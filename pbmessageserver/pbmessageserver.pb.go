//protoc --gogofast_out=plugins=grpc:. *.proto
//protoc --gogofast_out=plugins=grpc:. ./gitlab.chatserver.im/interfaceprobuf/pbmessageserver/pbmessageserver.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: pbmessageserver.proto

package pbmessageserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pbcomm "interfaceprobuf/pbcomm"
	pbmessagedb "interfaceprobuf/pbmessagedb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetSecurityRandomIdsResult_ErrorCode int32

const (
	GetSecurityRandomIdsResult_Success GetSecurityRandomIdsResult_ErrorCode = 0
	GetSecurityRandomIdsResult_Failed  GetSecurityRandomIdsResult_ErrorCode = 1
)

// Enum value maps for GetSecurityRandomIdsResult_ErrorCode.
var (
	GetSecurityRandomIdsResult_ErrorCode_name = map[int32]string{
		0: "Success",
		1: "Failed",
	}
	GetSecurityRandomIdsResult_ErrorCode_value = map[string]int32{
		"Success": 0,
		"Failed":  1,
	}
)

func (x GetSecurityRandomIdsResult_ErrorCode) Enum() *GetSecurityRandomIdsResult_ErrorCode {
	p := new(GetSecurityRandomIdsResult_ErrorCode)
	*p = x
	return p
}

func (x GetSecurityRandomIdsResult_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetSecurityRandomIdsResult_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmessageserver_proto_enumTypes[0].Descriptor()
}

func (GetSecurityRandomIdsResult_ErrorCode) Type() protoreflect.EnumType {
	return &file_pbmessageserver_proto_enumTypes[0]
}

func (x GetSecurityRandomIdsResult_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetSecurityRandomIdsResult_ErrorCode.Descriptor instead.
func (GetSecurityRandomIdsResult_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{12, 0}
}

type LogoutDisCardAllSecurityResult_ErrorCode int32

const (
	LogoutDisCardAllSecurityResult_Success LogoutDisCardAllSecurityResult_ErrorCode = 0
	LogoutDisCardAllSecurityResult_Failed  LogoutDisCardAllSecurityResult_ErrorCode = 1
)

// Enum value maps for LogoutDisCardAllSecurityResult_ErrorCode.
var (
	LogoutDisCardAllSecurityResult_ErrorCode_name = map[int32]string{
		0: "Success",
		1: "Failed",
	}
	LogoutDisCardAllSecurityResult_ErrorCode_value = map[string]int32{
		"Success": 0,
		"Failed":  1,
	}
)

func (x LogoutDisCardAllSecurityResult_ErrorCode) Enum() *LogoutDisCardAllSecurityResult_ErrorCode {
	p := new(LogoutDisCardAllSecurityResult_ErrorCode)
	*p = x
	return p
}

func (x LogoutDisCardAllSecurityResult_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogoutDisCardAllSecurityResult_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmessageserver_proto_enumTypes[1].Descriptor()
}

func (LogoutDisCardAllSecurityResult_ErrorCode) Type() protoreflect.EnumType {
	return &file_pbmessageserver_proto_enumTypes[1]
}

func (x LogoutDisCardAllSecurityResult_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogoutDisCardAllSecurityResult_ErrorCode.Descriptor instead.
func (LogoutDisCardAllSecurityResult_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{14, 0}
}

type SetEncryptedTypingResult_Errcode int32

const (
	SetEncryptedTypingResult_Success       SetEncryptedTypingResult_Errcode = 0 //成功
	SetEncryptedTypingResult_failed        SetEncryptedTypingResult_Errcode = 1 //失败
	SetEncryptedTypingResult_AccessHashErr SetEncryptedTypingResult_Errcode = 2 //错误的哈希值
)

// Enum value maps for SetEncryptedTypingResult_Errcode.
var (
	SetEncryptedTypingResult_Errcode_name = map[int32]string{
		0: "Success",
		1: "failed",
		2: "AccessHashErr",
	}
	SetEncryptedTypingResult_Errcode_value = map[string]int32{
		"Success":       0,
		"failed":        1,
		"AccessHashErr": 2,
	}
)

func (x SetEncryptedTypingResult_Errcode) Enum() *SetEncryptedTypingResult_Errcode {
	p := new(SetEncryptedTypingResult_Errcode)
	*p = x
	return p
}

func (x SetEncryptedTypingResult_Errcode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetEncryptedTypingResult_Errcode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmessageserver_proto_enumTypes[2].Descriptor()
}

func (SetEncryptedTypingResult_Errcode) Type() protoreflect.EnumType {
	return &file_pbmessageserver_proto_enumTypes[2]
}

func (x SetEncryptedTypingResult_Errcode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetEncryptedTypingResult_Errcode.Descriptor instead.
func (SetEncryptedTypingResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{16, 0}
}

type ReadEncryptedHistoryResult_Errcode int32

const (
	ReadEncryptedHistoryResult_Success       ReadEncryptedHistoryResult_Errcode = 0 //成功
	ReadEncryptedHistoryResult_failed        ReadEncryptedHistoryResult_Errcode = 1 //失败
	ReadEncryptedHistoryResult_AccessHashErr ReadEncryptedHistoryResult_Errcode = 2 //错误的哈希值
)

// Enum value maps for ReadEncryptedHistoryResult_Errcode.
var (
	ReadEncryptedHistoryResult_Errcode_name = map[int32]string{
		0: "Success",
		1: "failed",
		2: "AccessHashErr",
	}
	ReadEncryptedHistoryResult_Errcode_value = map[string]int32{
		"Success":       0,
		"failed":        1,
		"AccessHashErr": 2,
	}
)

func (x ReadEncryptedHistoryResult_Errcode) Enum() *ReadEncryptedHistoryResult_Errcode {
	p := new(ReadEncryptedHistoryResult_Errcode)
	*p = x
	return p
}

func (x ReadEncryptedHistoryResult_Errcode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadEncryptedHistoryResult_Errcode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmessageserver_proto_enumTypes[3].Descriptor()
}

func (ReadEncryptedHistoryResult_Errcode) Type() protoreflect.EnumType {
	return &file_pbmessageserver_proto_enumTypes[3]
}

func (x ReadEncryptedHistoryResult_Errcode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadEncryptedHistoryResult_Errcode.Descriptor instead.
func (ReadEncryptedHistoryResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{18, 0}
}

type DiscardEncryptionResult_Errcode int32

const (
	DiscardEncryptionResult_Success       DiscardEncryptionResult_Errcode = 0 //成功
	DiscardEncryptionResult_failed        DiscardEncryptionResult_Errcode = 2 //删除失败
	DiscardEncryptionResult_AccessHashErr DiscardEncryptionResult_Errcode = 3 //错误的哈希值
)

// Enum value maps for DiscardEncryptionResult_Errcode.
var (
	DiscardEncryptionResult_Errcode_name = map[int32]string{
		0: "Success",
		2: "failed",
		3: "AccessHashErr",
	}
	DiscardEncryptionResult_Errcode_value = map[string]int32{
		"Success":       0,
		"failed":        2,
		"AccessHashErr": 3,
	}
)

func (x DiscardEncryptionResult_Errcode) Enum() *DiscardEncryptionResult_Errcode {
	p := new(DiscardEncryptionResult_Errcode)
	*p = x
	return p
}

func (x DiscardEncryptionResult_Errcode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscardEncryptionResult_Errcode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmessageserver_proto_enumTypes[4].Descriptor()
}

func (DiscardEncryptionResult_Errcode) Type() protoreflect.EnumType {
	return &file_pbmessageserver_proto_enumTypes[4]
}

func (x DiscardEncryptionResult_Errcode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscardEncryptionResult_Errcode.Descriptor instead.
func (DiscardEncryptionResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{20, 0}
}

type SendEncryptedServiceResult_Errcode int32

const (
	SendEncryptedServiceResult_Success        SendEncryptedServiceResult_Errcode = 0 //成功
	SendEncryptedServiceResult_Repeatedhandle SendEncryptedServiceResult_Errcode = 1 //重复的处理
	SendEncryptedServiceResult_ChatNotExist   SendEncryptedServiceResult_Errcode = 2 //加密聊天已经不存在
	SendEncryptedServiceResult_DbError        SendEncryptedServiceResult_Errcode = 3 //数据库错误
	SendEncryptedServiceResult_AccessHashErr  SendEncryptedServiceResult_Errcode = 4 //错误的哈希值
)

// Enum value maps for SendEncryptedServiceResult_Errcode.
var (
	SendEncryptedServiceResult_Errcode_name = map[int32]string{
		0: "Success",
		1: "Repeatedhandle",
		2: "ChatNotExist",
		3: "DbError",
		4: "AccessHashErr",
	}
	SendEncryptedServiceResult_Errcode_value = map[string]int32{
		"Success":        0,
		"Repeatedhandle": 1,
		"ChatNotExist":   2,
		"DbError":        3,
		"AccessHashErr":  4,
	}
)

func (x SendEncryptedServiceResult_Errcode) Enum() *SendEncryptedServiceResult_Errcode {
	p := new(SendEncryptedServiceResult_Errcode)
	*p = x
	return p
}

func (x SendEncryptedServiceResult_Errcode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendEncryptedServiceResult_Errcode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmessageserver_proto_enumTypes[5].Descriptor()
}

func (SendEncryptedServiceResult_Errcode) Type() protoreflect.EnumType {
	return &file_pbmessageserver_proto_enumTypes[5]
}

func (x SendEncryptedServiceResult_Errcode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendEncryptedServiceResult_Errcode.Descriptor instead.
func (SendEncryptedServiceResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{22, 0}
}

type SendEncryptedFileResult_Errcode int32

const (
	SendEncryptedFileResult_Success        SendEncryptedFileResult_Errcode = 0 //成功
	SendEncryptedFileResult_Repeatedhandle SendEncryptedFileResult_Errcode = 1 //重复的处理
	SendEncryptedFileResult_ChatNotExist   SendEncryptedFileResult_Errcode = 2 //加密聊天已经不存在
	SendEncryptedFileResult_DbError        SendEncryptedFileResult_Errcode = 3 //数据库错误
	SendEncryptedFileResult_AccessHashErr  SendEncryptedFileResult_Errcode = 4 //错误的哈希值
)

// Enum value maps for SendEncryptedFileResult_Errcode.
var (
	SendEncryptedFileResult_Errcode_name = map[int32]string{
		0: "Success",
		1: "Repeatedhandle",
		2: "ChatNotExist",
		3: "DbError",
		4: "AccessHashErr",
	}
	SendEncryptedFileResult_Errcode_value = map[string]int32{
		"Success":        0,
		"Repeatedhandle": 1,
		"ChatNotExist":   2,
		"DbError":        3,
		"AccessHashErr":  4,
	}
)

func (x SendEncryptedFileResult_Errcode) Enum() *SendEncryptedFileResult_Errcode {
	p := new(SendEncryptedFileResult_Errcode)
	*p = x
	return p
}

func (x SendEncryptedFileResult_Errcode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendEncryptedFileResult_Errcode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmessageserver_proto_enumTypes[6].Descriptor()
}

func (SendEncryptedFileResult_Errcode) Type() protoreflect.EnumType {
	return &file_pbmessageserver_proto_enumTypes[6]
}

func (x SendEncryptedFileResult_Errcode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendEncryptedFileResult_Errcode.Descriptor instead.
func (SendEncryptedFileResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{24, 0}
}

type SendEncryptedResult_Errcode int32

const (
	SendEncryptedResult_Success        SendEncryptedResult_Errcode = 0 //成功
	SendEncryptedResult_Repeatedhandle SendEncryptedResult_Errcode = 1 //重复的处理
	SendEncryptedResult_ChatNotExist   SendEncryptedResult_Errcode = 2 //加密聊天已经不存在
	SendEncryptedResult_DbError        SendEncryptedResult_Errcode = 3 //数据库错误
	SendEncryptedResult_AccessHashErr  SendEncryptedResult_Errcode = 4 //错误的哈希值
)

// Enum value maps for SendEncryptedResult_Errcode.
var (
	SendEncryptedResult_Errcode_name = map[int32]string{
		0: "Success",
		1: "Repeatedhandle",
		2: "ChatNotExist",
		3: "DbError",
		4: "AccessHashErr",
	}
	SendEncryptedResult_Errcode_value = map[string]int32{
		"Success":        0,
		"Repeatedhandle": 1,
		"ChatNotExist":   2,
		"DbError":        3,
		"AccessHashErr":  4,
	}
)

func (x SendEncryptedResult_Errcode) Enum() *SendEncryptedResult_Errcode {
	p := new(SendEncryptedResult_Errcode)
	*p = x
	return p
}

func (x SendEncryptedResult_Errcode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendEncryptedResult_Errcode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmessageserver_proto_enumTypes[7].Descriptor()
}

func (SendEncryptedResult_Errcode) Type() protoreflect.EnumType {
	return &file_pbmessageserver_proto_enumTypes[7]
}

func (x SendEncryptedResult_Errcode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendEncryptedResult_Errcode.Descriptor instead.
func (SendEncryptedResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{26, 0}
}

type AcceptEncryptionResult_Errcode int32

const (
	AcceptEncryptionResult_Success        AcceptEncryptionResult_Errcode = 0 //成功
	AcceptEncryptionResult_AlreadyAccept  AcceptEncryptionResult_Errcode = 1 //加密聊天已经被自己的其他端接收
	AcceptEncryptionResult_Repeatedhandle AcceptEncryptionResult_Errcode = 2 //重复的处理
	AcceptEncryptionResult_DbError        AcceptEncryptionResult_Errcode = 3 //数据库错误
	AcceptEncryptionResult_AccessHashErr  AcceptEncryptionResult_Errcode = 4 //错误的哈希值
)

// Enum value maps for AcceptEncryptionResult_Errcode.
var (
	AcceptEncryptionResult_Errcode_name = map[int32]string{
		0: "Success",
		1: "AlreadyAccept",
		2: "Repeatedhandle",
		3: "DbError",
		4: "AccessHashErr",
	}
	AcceptEncryptionResult_Errcode_value = map[string]int32{
		"Success":        0,
		"AlreadyAccept":  1,
		"Repeatedhandle": 2,
		"DbError":        3,
		"AccessHashErr":  4,
	}
)

func (x AcceptEncryptionResult_Errcode) Enum() *AcceptEncryptionResult_Errcode {
	p := new(AcceptEncryptionResult_Errcode)
	*p = x
	return p
}

func (x AcceptEncryptionResult_Errcode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcceptEncryptionResult_Errcode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmessageserver_proto_enumTypes[8].Descriptor()
}

func (AcceptEncryptionResult_Errcode) Type() protoreflect.EnumType {
	return &file_pbmessageserver_proto_enumTypes[8]
}

func (x AcceptEncryptionResult_Errcode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcceptEncryptionResult_Errcode.Descriptor instead.
func (AcceptEncryptionResult_Errcode) EnumDescriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{28, 0}
}

type RequestEncryptionResult_ErroCode int32

const (
	RequestEncryptionResult_SusscessFull       RequestEncryptionResult_ErroCode = 0 //发起成功
	RequestEncryptionResult_GenIdFailed        RequestEncryptionResult_ErroCode = 1 //生成Id失败
	RequestEncryptionResult_DbError            RequestEncryptionResult_ErroCode = 2 //数据库错误 (调用数据库存储加密聊天失败)
	RequestEncryptionResult_Restricted         RequestEncryptionResult_ErroCode = 3 // blocked or privacy restricted
	RequestEncryptionResult_ParticipantBlocked RequestEncryptionResult_ErroCode = 4 // participant is blocked by you
)

// Enum value maps for RequestEncryptionResult_ErroCode.
var (
	RequestEncryptionResult_ErroCode_name = map[int32]string{
		0: "SusscessFull",
		1: "GenIdFailed",
		2: "DbError",
		3: "Restricted",
		4: "ParticipantBlocked",
	}
	RequestEncryptionResult_ErroCode_value = map[string]int32{
		"SusscessFull":       0,
		"GenIdFailed":        1,
		"DbError":            2,
		"Restricted":         3,
		"ParticipantBlocked": 4,
	}
)

func (x RequestEncryptionResult_ErroCode) Enum() *RequestEncryptionResult_ErroCode {
	p := new(RequestEncryptionResult_ErroCode)
	*p = x
	return p
}

func (x RequestEncryptionResult_ErroCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestEncryptionResult_ErroCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmessageserver_proto_enumTypes[9].Descriptor()
}

func (RequestEncryptionResult_ErroCode) Type() protoreflect.EnumType {
	return &file_pbmessageserver_proto_enumTypes[9]
}

func (x RequestEncryptionResult_ErroCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestEncryptionResult_ErroCode.Descriptor instead.
func (RequestEncryptionResult_ErroCode) EnumDescriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{30, 0}
}

// 系统号推送富文本消息请求接口
type ReqSendMediaSysNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId      string        `protobuf:"bytes,1,opt,name=msgId,proto3" json:"msgId,omitempty"` //后台管理记录数据id
	FromId     int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	SourceCode int32         `protobuf:"varint,3,opt,name=sourceCode,proto3" json:"sourceCode,omitempty"`
	Request    []byte        `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
	Layer      int32         `protobuf:"varint,5,opt,name=layer,proto3" json:"layer,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqSendMediaSysNotify) Reset() {
	*x = ReqSendMediaSysNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendMediaSysNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendMediaSysNotify) ProtoMessage() {}

func (x *ReqSendMediaSysNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendMediaSysNotify.ProtoReflect.Descriptor instead.
func (*ReqSendMediaSysNotify) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{0}
}

func (x *ReqSendMediaSysNotify) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *ReqSendMediaSysNotify) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqSendMediaSysNotify) GetSourceCode() int32 {
	if x != nil {
		return x.SourceCode
	}
	return 0
}

func (x *ReqSendMediaSysNotify) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ReqSendMediaSysNotify) GetLayer() int32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *ReqSendMediaSysNotify) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 系统号推送富文本消息返回接口
type FailUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User int32  `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *FailUser) Reset() {
	*x = FailUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailUser) ProtoMessage() {}

func (x *FailUser) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailUser.ProtoReflect.Descriptor instead.
func (*FailUser) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{1}
}

func (x *FailUser) GetUser() int32 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *FailUser) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SucceedUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User int32  `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SucceedUser) Reset() {
	*x = SucceedUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SucceedUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SucceedUser) ProtoMessage() {}

func (x *SucceedUser) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SucceedUser.ProtoReflect.Descriptor instead.
func (*SucceedUser) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{2}
}

func (x *SucceedUser) GetUser() int32 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *SucceedUser) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 后台管理回调填充数据
type CallBackRespSendMediaSysNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailUsers    []*FailUser    `protobuf:"bytes,2,rep,name=failUsers,proto3" json:"failUsers,omitempty"`
	SucceedUsers []*SucceedUser `protobuf:"bytes,3,rep,name=SucceedUsers,proto3" json:"SucceedUsers,omitempty"`
}

func (x *CallBackRespSendMediaSysNotify) Reset() {
	*x = CallBackRespSendMediaSysNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallBackRespSendMediaSysNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallBackRespSendMediaSysNotify) ProtoMessage() {}

func (x *CallBackRespSendMediaSysNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallBackRespSendMediaSysNotify.ProtoReflect.Descriptor instead.
func (*CallBackRespSendMediaSysNotify) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{3}
}

func (x *CallBackRespSendMediaSysNotify) GetFailUsers() []*FailUser {
	if x != nil {
		return x.FailUsers
	}
	return nil
}

func (x *CallBackRespSendMediaSysNotify) GetSucceedUsers() []*SucceedUser {
	if x != nil {
		return x.SucceedUsers
	}
	return nil
}

type RespSendMediaSysNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32  `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMsg  string `protobuf:"bytes,2,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
}

func (x *RespSendMediaSysNotify) Reset() {
	*x = RespSendMediaSysNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespSendMediaSysNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespSendMediaSysNotify) ProtoMessage() {}

func (x *RespSendMediaSysNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespSendMediaSysNotify.ProtoReflect.Descriptor instead.
func (*RespSendMediaSysNotify) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{4}
}

func (x *RespSendMediaSysNotify) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *RespSendMediaSysNotify) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// 编辑媒体消息
type ReqEditMessageMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormId    int32         `protobuf:"varint,1,opt,name=form_id,json=formId,proto3" json:"form_id,omitempty"` // 编辑方id
	FromKeyid uint64        `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Peer      []byte        `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`   // 框
	Id        int32         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`      // id
	Media     []byte        `protobuf:"bytes,5,opt,name=media,proto3" json:"media,omitempty"` //inputMedia
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditMessageMedia) Reset() {
	*x = ReqEditMessageMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditMessageMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditMessageMedia) ProtoMessage() {}

func (x *ReqEditMessageMedia) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditMessageMedia.ProtoReflect.Descriptor instead.
func (*ReqEditMessageMedia) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{5}
}

func (x *ReqEditMessageMedia) GetFormId() int32 {
	if x != nil {
		return x.FormId
	}
	return 0
}

func (x *ReqEditMessageMedia) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqEditMessageMedia) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ReqEditMessageMedia) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReqEditMessageMedia) GetMedia() []byte {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *ReqEditMessageMedia) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type RespEditMessageMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateEditMessage []byte `protobuf:"bytes,1,opt,name=UpdateEditMessage,proto3" json:"UpdateEditMessage,omitempty"`
	Error             int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` // 1.获取消息失败 2.编辑失败
}

func (x *RespEditMessageMedia) Reset() {
	*x = RespEditMessageMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespEditMessageMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespEditMessageMedia) ProtoMessage() {}

func (x *RespEditMessageMedia) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespEditMessageMedia.ProtoReflect.Descriptor instead.
func (*RespEditMessageMedia) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{6}
}

func (x *RespEditMessageMedia) GetUpdateEditMessage() []byte {
	if x != nil {
		return x.UpdateEditMessage
	}
	return nil
}

func (x *RespEditMessageMedia) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type InlineCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId    int32 `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	FromId   int32 `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	ChatId   int32 `protobuf:"varint,3,opt,name=ChatId,proto3" json:"ChatId,omitempty"`
	ChatType int32 `protobuf:"varint,4,opt,name=ChatType,proto3" json:"ChatType,omitempty"`
	BotId    int32 `protobuf:"varint,5,opt,name=BotId,proto3" json:"BotId,omitempty"`
}

func (x *InlineCall) Reset() {
	*x = InlineCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlineCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlineCall) ProtoMessage() {}

func (x *InlineCall) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlineCall.ProtoReflect.Descriptor instead.
func (*InlineCall) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{7}
}

func (x *InlineCall) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *InlineCall) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *InlineCall) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *InlineCall) GetChatType() int32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *InlineCall) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

type ChannelInactiveUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`          //用户ID
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`       //用户名
	Time    int32  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`      //活跃时间
	TimeStr string `protobuf:"bytes,4,opt,name=timeStr,proto3" json:"timeStr,omitempty"` //活跃时间格式化字符串
}

func (x *ChannelInactiveUser) Reset() {
	*x = ChannelInactiveUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInactiveUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInactiveUser) ProtoMessage() {}

func (x *ChannelInactiveUser) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInactiveUser.ProtoReflect.Descriptor instead.
func (*ChannelInactiveUser) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{8}
}

func (x *ChannelInactiveUser) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelInactiveUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelInactiveUser) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ChannelInactiveUser) GetTimeStr() string {
	if x != nil {
		return x.TimeStr
	}
	return ""
}

type GetChannelInactiveUsersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Limit     int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Userid    int32 `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (x *GetChannelInactiveUsersReq) Reset() {
	*x = GetChannelInactiveUsersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelInactiveUsersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelInactiveUsersReq) ProtoMessage() {}

func (x *GetChannelInactiveUsersReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelInactiveUsersReq.ProtoReflect.Descriptor instead.
func (*GetChannelInactiveUsersReq) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{9}
}

func (x *GetChannelInactiveUsersReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelInactiveUsersReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetChannelInactiveUsersReq) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

type GetChannelInactiveUsersResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*ChannelInactiveUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Count int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"` //群当前总人数
}

func (x *GetChannelInactiveUsersResult) Reset() {
	*x = GetChannelInactiveUsersResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelInactiveUsersResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelInactiveUsersResult) ProtoMessage() {}

func (x *GetChannelInactiveUsersResult) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelInactiveUsersResult.ProtoReflect.Descriptor instead.
func (*GetChannelInactiveUsersResult) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{10}
}

func (x *GetChannelInactiveUsersResult) GetUsers() []*ChannelInactiveUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetChannelInactiveUsersResult) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 获取加密聊天的randomId的请求
type GetSecurityRandomIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId  int64         `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`    //取消方的端的标识
	MaxQts int32         `protobuf:"varint,2,opt,name=max_qts,json=maxQts,proto3" json:"max_qts,omitempty"` //获取需要的qts
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetSecurityRandomIdsReq) Reset() {
	*x = GetSecurityRandomIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecurityRandomIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecurityRandomIdsReq) ProtoMessage() {}

func (x *GetSecurityRandomIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecurityRandomIdsReq.ProtoReflect.Descriptor instead.
func (*GetSecurityRandomIdsReq) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{11}
}

func (x *GetSecurityRandomIdsReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *GetSecurityRandomIdsReq) GetMaxQts() int32 {
	if x != nil {
		return x.MaxQts
	}
	return 0
}

func (x *GetSecurityRandomIdsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取加密聊天的randomId 们的返回值
type GetSecurityRandomIdsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errcode   GetSecurityRandomIdsResult_ErrorCode `protobuf:"varint,1,opt,name=errcode,proto3,enum=pbmessageserver.GetSecurityRandomIdsResult_ErrorCode" json:"errcode,omitempty"` //错误码
	RandomIds []int64                              `protobuf:"varint,2,rep,packed,name=random_ids,json=randomIds,proto3" json:"random_ids,omitempty"`                               //查询到的Id的列表
}

func (x *GetSecurityRandomIdsResult) Reset() {
	*x = GetSecurityRandomIdsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecurityRandomIdsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecurityRandomIdsResult) ProtoMessage() {}

func (x *GetSecurityRandomIdsResult) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecurityRandomIdsResult.ProtoReflect.Descriptor instead.
func (*GetSecurityRandomIdsResult) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{12}
}

func (x *GetSecurityRandomIdsResult) GetErrcode() GetSecurityRandomIdsResult_ErrorCode {
	if x != nil {
		return x.Errcode
	}
	return GetSecurityRandomIdsResult_Success
}

func (x *GetSecurityRandomIdsResult) GetRandomIds() []int64 {
	if x != nil {
		return x.RandomIds
	}
	return nil
}

// LogOut后删除所有的加密聊天的请求
type LogoutDisCardAllSecurityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //取消方的用户的Id
	KeyId  int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`    //取消方的端的标识
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *LogoutDisCardAllSecurityReq) Reset() {
	*x = LogoutDisCardAllSecurityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutDisCardAllSecurityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutDisCardAllSecurityReq) ProtoMessage() {}

func (x *LogoutDisCardAllSecurityReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutDisCardAllSecurityReq.ProtoReflect.Descriptor instead.
func (*LogoutDisCardAllSecurityReq) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{13}
}

func (x *LogoutDisCardAllSecurityReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LogoutDisCardAllSecurityReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *LogoutDisCardAllSecurityReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// LogOut后删除所有的加密聊天的返回
type LogoutDisCardAllSecurityResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errcode LogoutDisCardAllSecurityResult_ErrorCode `protobuf:"varint,1,opt,name=errcode,proto3,enum=pbmessageserver.LogoutDisCardAllSecurityResult_ErrorCode" json:"errcode,omitempty"`
}

func (x *LogoutDisCardAllSecurityResult) Reset() {
	*x = LogoutDisCardAllSecurityResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutDisCardAllSecurityResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutDisCardAllSecurityResult) ProtoMessage() {}

func (x *LogoutDisCardAllSecurityResult) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutDisCardAllSecurityResult.ProtoReflect.Descriptor instead.
func (*LogoutDisCardAllSecurityResult) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{14}
}

func (x *LogoutDisCardAllSecurityResult) GetErrcode() LogoutDisCardAllSecurityResult_ErrorCode {
	if x != nil {
		return x.Errcode
	}
	return LogoutDisCardAllSecurityResult_Success
}

// 加密聊天settyping状态
type SetEncryptedTypingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //阅读消息方的Id
	KeyId      int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`                //阅读方的端标识
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`             //所读的加密聊天的Id
	AccessHash int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //加密聊天哈希值
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *SetEncryptedTypingReq) Reset() {
	*x = SetEncryptedTypingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEncryptedTypingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEncryptedTypingReq) ProtoMessage() {}

func (x *SetEncryptedTypingReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEncryptedTypingReq.ProtoReflect.Descriptor instead.
func (*SetEncryptedTypingReq) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{15}
}

func (x *SetEncryptedTypingReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetEncryptedTypingReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SetEncryptedTypingReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *SetEncryptedTypingReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *SetEncryptedTypingReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 加密聊天settyping返回
type SetEncryptedTypingResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode SetEncryptedTypingResult_Errcode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=pbmessageserver.SetEncryptedTypingResult_Errcode" json:"error_code,omitempty"` //返回错误码
}

func (x *SetEncryptedTypingResult) Reset() {
	*x = SetEncryptedTypingResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEncryptedTypingResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEncryptedTypingResult) ProtoMessage() {}

func (x *SetEncryptedTypingResult) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEncryptedTypingResult.ProtoReflect.Descriptor instead.
func (*SetEncryptedTypingResult) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{16}
}

func (x *SetEncryptedTypingResult) GetErrorCode() SetEncryptedTypingResult_Errcode {
	if x != nil {
		return x.ErrorCode
	}
	return SetEncryptedTypingResult_Success
}

// 加密聊天双钩的请求
type ReadEncryptedHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //阅读消息方的Id
	KeyId      int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`                //阅读方的端标识
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`             //所读的加密聊天的Id
	AccessHash int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //加密聊天哈希值
	MaxDate    int32         `protobuf:"varint,5,opt,name=max_date,json=maxDate,proto3" json:"max_date,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReadEncryptedHistoryReq) Reset() {
	*x = ReadEncryptedHistoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadEncryptedHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadEncryptedHistoryReq) ProtoMessage() {}

func (x *ReadEncryptedHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadEncryptedHistoryReq.ProtoReflect.Descriptor instead.
func (*ReadEncryptedHistoryReq) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{17}
}

func (x *ReadEncryptedHistoryReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReadEncryptedHistoryReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ReadEncryptedHistoryReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ReadEncryptedHistoryReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReadEncryptedHistoryReq) GetMaxDate() int32 {
	if x != nil {
		return x.MaxDate
	}
	return 0
}

func (x *ReadEncryptedHistoryReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 加密聊天双钩的返回
type ReadEncryptedHistoryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ReadEncryptedHistoryResult_Errcode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=pbmessageserver.ReadEncryptedHistoryResult_Errcode" json:"error_code,omitempty"` //返回错误码
}

func (x *ReadEncryptedHistoryResult) Reset() {
	*x = ReadEncryptedHistoryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadEncryptedHistoryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadEncryptedHistoryResult) ProtoMessage() {}

func (x *ReadEncryptedHistoryResult) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadEncryptedHistoryResult.ProtoReflect.Descriptor instead.
func (*ReadEncryptedHistoryResult) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{18}
}

func (x *ReadEncryptedHistoryResult) GetErrorCode() ReadEncryptedHistoryResult_Errcode {
	if x != nil {
		return x.ErrorCode
	}
	return ReadEncryptedHistoryResult_Success
}

// 加密聊天取消请求
type DiscardEncryptionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //取消方的用户的Id
	KeyId  int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`    //取消方的端的标识
	ChatId int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"` //需要取消的加密聊天id
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DiscardEncryptionReq) Reset() {
	*x = DiscardEncryptionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscardEncryptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardEncryptionReq) ProtoMessage() {}

func (x *DiscardEncryptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardEncryptionReq.ProtoReflect.Descriptor instead.
func (*DiscardEncryptionReq) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{19}
}

func (x *DiscardEncryptionReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DiscardEncryptionReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *DiscardEncryptionReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *DiscardEncryptionReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 加密聊天取消返回
type DiscardEncryptionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode DiscardEncryptionResult_Errcode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=pbmessageserver.DiscardEncryptionResult_Errcode" json:"error_code,omitempty"` //返回错误码
}

func (x *DiscardEncryptionResult) Reset() {
	*x = DiscardEncryptionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscardEncryptionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardEncryptionResult) ProtoMessage() {}

func (x *DiscardEncryptionResult) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardEncryptionResult.ProtoReflect.Descriptor instead.
func (*DiscardEncryptionResult) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{20}
}

func (x *DiscardEncryptionResult) GetErrorCode() DiscardEncryptionResult_Errcode {
	if x != nil {
		return x.ErrorCode
	}
	return DiscardEncryptionResult_Success
}

// 发送加密聊天发送service请求
type SendEncryptedServiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendId     int32         `protobuf:"varint,1,opt,name=send_id,json=sendId,proto3" json:"send_id,omitempty"`             //消息发送者的Id
	KeyId      int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`                //消息发送者的key_id
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`             //加密聊天的id
	AccessHash int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //加密聊天哈希值
	RandomId   int64         `protobuf:"varint,5,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`       //消息的randmon_id
	Data       []byte        `protobuf:"bytes,6,opt,name=Data,proto3" json:"Data,omitempty"`                                //加密聊天的发送的加密消息
	Debug      *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *SendEncryptedServiceReq) Reset() {
	*x = SendEncryptedServiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEncryptedServiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEncryptedServiceReq) ProtoMessage() {}

func (x *SendEncryptedServiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEncryptedServiceReq.ProtoReflect.Descriptor instead.
func (*SendEncryptedServiceReq) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{21}
}

func (x *SendEncryptedServiceReq) GetSendId() int32 {
	if x != nil {
		return x.SendId
	}
	return 0
}

func (x *SendEncryptedServiceReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SendEncryptedServiceReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *SendEncryptedServiceReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *SendEncryptedServiceReq) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *SendEncryptedServiceReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SendEncryptedServiceReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 发送加密聊天发送service的返回
type SendEncryptedServiceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode SendEncryptedServiceResult_Errcode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=pbmessageserver.SendEncryptedServiceResult_Errcode" json:"error_code,omitempty"` //返回错误码
}

func (x *SendEncryptedServiceResult) Reset() {
	*x = SendEncryptedServiceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEncryptedServiceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEncryptedServiceResult) ProtoMessage() {}

func (x *SendEncryptedServiceResult) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEncryptedServiceResult.ProtoReflect.Descriptor instead.
func (*SendEncryptedServiceResult) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{22}
}

func (x *SendEncryptedServiceResult) GetErrorCode() SendEncryptedServiceResult_Errcode {
	if x != nil {
		return x.ErrorCode
	}
	return SendEncryptedServiceResult_Success
}

// 发送加密聊天发送没提 消息的请求
type SendEncryptedFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendId     int32         `protobuf:"varint,1,opt,name=send_id,json=sendId,proto3" json:"send_id,omitempty"`             //消息发送者的Id
	KeyId      int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`                //消息发送者的key_id
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`             //加密聊天的id
	AccessHash int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //加密聊天哈希值
	RandomId   int64         `protobuf:"varint,5,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`       //消息的randmon_id
	Data       []byte        `protobuf:"bytes,6,opt,name=Data,proto3" json:"Data,omitempty"`                                //加密聊天的发送的加密消息
	File       []byte        `protobuf:"bytes,7,opt,name=file,proto3" json:"file,omitempty"`                                //加密聊天文件信息 mtproto.TL 的二进制
	Debug      *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *SendEncryptedFileReq) Reset() {
	*x = SendEncryptedFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEncryptedFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEncryptedFileReq) ProtoMessage() {}

func (x *SendEncryptedFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEncryptedFileReq.ProtoReflect.Descriptor instead.
func (*SendEncryptedFileReq) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{23}
}

func (x *SendEncryptedFileReq) GetSendId() int32 {
	if x != nil {
		return x.SendId
	}
	return 0
}

func (x *SendEncryptedFileReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SendEncryptedFileReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *SendEncryptedFileReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *SendEncryptedFileReq) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *SendEncryptedFileReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SendEncryptedFileReq) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *SendEncryptedFileReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 发送媒体消息的返回
type SendEncryptedFileResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode SendEncryptedFileResult_Errcode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=pbmessageserver.SendEncryptedFileResult_Errcode" json:"error_code,omitempty"` //返回错误码
}

func (x *SendEncryptedFileResult) Reset() {
	*x = SendEncryptedFileResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEncryptedFileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEncryptedFileResult) ProtoMessage() {}

func (x *SendEncryptedFileResult) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEncryptedFileResult.ProtoReflect.Descriptor instead.
func (*SendEncryptedFileResult) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{24}
}

func (x *SendEncryptedFileResult) GetErrorCode() SendEncryptedFileResult_Errcode {
	if x != nil {
		return x.ErrorCode
	}
	return SendEncryptedFileResult_Success
}

// 发送加密聊天发送普通文本消息的请求
type SendEncryptedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendId     int32         `protobuf:"varint,1,opt,name=send_id,json=sendId,proto3" json:"send_id,omitempty"`             //消息发送者的Id
	KeyId      int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`                //消息发送者的key_id
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`             //加密聊天的id
	AccessHash int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` //加密聊天哈希值
	RandomId   int64         `protobuf:"varint,5,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`       //消息的randmon_id
	Data       []byte        `protobuf:"bytes,6,opt,name=Data,proto3" json:"Data,omitempty"`                                //加密聊天的发送的加密消息
	Debug      *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *SendEncryptedReq) Reset() {
	*x = SendEncryptedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEncryptedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEncryptedReq) ProtoMessage() {}

func (x *SendEncryptedReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEncryptedReq.ProtoReflect.Descriptor instead.
func (*SendEncryptedReq) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{25}
}

func (x *SendEncryptedReq) GetSendId() int32 {
	if x != nil {
		return x.SendId
	}
	return 0
}

func (x *SendEncryptedReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SendEncryptedReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *SendEncryptedReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *SendEncryptedReq) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *SendEncryptedReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SendEncryptedReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 发送加密聊天发送普通文本消息的返回
type SendEncryptedResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode SendEncryptedResult_Errcode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=pbmessageserver.SendEncryptedResult_Errcode" json:"error_code,omitempty"` //返回错误码
}

func (x *SendEncryptedResult) Reset() {
	*x = SendEncryptedResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEncryptedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEncryptedResult) ProtoMessage() {}

func (x *SendEncryptedResult) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEncryptedResult.ProtoReflect.Descriptor instead.
func (*SendEncryptedResult) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{26}
}

func (x *SendEncryptedResult) GetErrorCode() SendEncryptedResult_Errcode {
	if x != nil {
		return x.ErrorCode
	}
	return SendEncryptedResult_Success
}

// B端接收的请求
type AcceptEncryptionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipartId    int32         `protobuf:"varint,1,opt,name=participart_id,json=participartId,proto3" json:"participart_id,omitempty"` //加密聊天请求接收者的Id
	ParticipartKeyId int64         `protobuf:"varint,2,opt,name=participart_key_id,json=participartKeyId,proto3" json:"participart_key_id,omitempty"`
	ChatId           int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`                         //加密聊天的聊天id
	AccessHash       int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`             //加密聊天的哈希值
	GB               []byte        `protobuf:"bytes,5,opt,name=G_b,json=GB,proto3" json:"G_b,omitempty"`                                      //接收方的公钥
	KeyFingerprint   int64         `protobuf:"varint,6,opt,name=Key_fingerprint,json=KeyFingerprint,proto3" json:"Key_fingerprint,omitempty"` //加密聊天的指纹
	Debug            *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *AcceptEncryptionReq) Reset() {
	*x = AcceptEncryptionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptEncryptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptEncryptionReq) ProtoMessage() {}

func (x *AcceptEncryptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptEncryptionReq.ProtoReflect.Descriptor instead.
func (*AcceptEncryptionReq) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{27}
}

func (x *AcceptEncryptionReq) GetParticipartId() int32 {
	if x != nil {
		return x.ParticipartId
	}
	return 0
}

func (x *AcceptEncryptionReq) GetParticipartKeyId() int64 {
	if x != nil {
		return x.ParticipartKeyId
	}
	return 0
}

func (x *AcceptEncryptionReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *AcceptEncryptionReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *AcceptEncryptionReq) GetGB() []byte {
	if x != nil {
		return x.GB
	}
	return nil
}

func (x *AcceptEncryptionReq) GetKeyFingerprint() int64 {
	if x != nil {
		return x.KeyFingerprint
	}
	return 0
}

func (x *AcceptEncryptionReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// B端接收的请求的返回
type AcceptEncryptionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminId         int32                          `protobuf:"varint,1,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`                                                           //发起者的ID
	GAOrB           []byte                         `protobuf:"bytes,2,opt,name=G_a_or_b,json=GAOrB,proto3" json:"G_a_or_b,omitempty"`                                                              //GA 发起方的秘钥
	KeyFingerPrint2 int64                          `protobuf:"varint,3,opt,name=keyFingerPrint2,proto3" json:"keyFingerPrint2,omitempty"`                                                          //指纹(不是劫持流程就是原来的指纹)
	ChatId          int32                          `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`                                                              //机密聊天 的Id
	AccessHash      int64                          `protobuf:"varint,5,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`                                                  //加密聊天的哈希值
	ErrorCode       AcceptEncryptionResult_Errcode `protobuf:"varint,6,opt,name=error_code,json=errorCode,proto3,enum=pbmessageserver.AcceptEncryptionResult_Errcode" json:"error_code,omitempty"` //返回错误码
}

func (x *AcceptEncryptionResult) Reset() {
	*x = AcceptEncryptionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptEncryptionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptEncryptionResult) ProtoMessage() {}

func (x *AcceptEncryptionResult) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptEncryptionResult.ProtoReflect.Descriptor instead.
func (*AcceptEncryptionResult) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{28}
}

func (x *AcceptEncryptionResult) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *AcceptEncryptionResult) GetGAOrB() []byte {
	if x != nil {
		return x.GAOrB
	}
	return nil
}

func (x *AcceptEncryptionResult) GetKeyFingerPrint2() int64 {
	if x != nil {
		return x.KeyFingerPrint2
	}
	return 0
}

func (x *AcceptEncryptionResult) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *AcceptEncryptionResult) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *AcceptEncryptionResult) GetErrorCode() AcceptEncryptionResult_Errcode {
	if x != nil {
		return x.ErrorCode
	}
	return AcceptEncryptionResult_Success
}

// 发起加密聊天请求
type RequestEncryptionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminId       int32         `protobuf:"varint,1,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`                   //发起者的ID
	AdminKeyId    int64         `protobuf:"varint,2,opt,name=admin_key_id,json=adminKeyId,proto3" json:"admin_key_id,omitempty"`        //发起方的端标识
	ParticipantId int32         `protobuf:"varint,3,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"` //被邀请者的ID
	AccessHash    int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`          //被邀请者的用户的哈希值
	GA            []byte        `protobuf:"bytes,5,opt,name=g_a,json=gA,proto3" json:"g_a,omitempty"`                                   //发起方的指纹
	Debug         *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *RequestEncryptionReq) Reset() {
	*x = RequestEncryptionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestEncryptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestEncryptionReq) ProtoMessage() {}

func (x *RequestEncryptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestEncryptionReq.ProtoReflect.Descriptor instead.
func (*RequestEncryptionReq) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{29}
}

func (x *RequestEncryptionReq) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *RequestEncryptionReq) GetAdminKeyId() int64 {
	if x != nil {
		return x.AdminKeyId
	}
	return 0
}

func (x *RequestEncryptionReq) GetParticipantId() int32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *RequestEncryptionReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *RequestEncryptionReq) GetGA() []byte {
	if x != nil {
		return x.GA
	}
	return nil
}

func (x *RequestEncryptionReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 发起加密聊天的返回结果
type RequestEncryptionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId     int32                            `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`                                               //加密聊天的id
	AccessHash int64                            `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`                                   // 加密聊天的哈希值
	ErrorCode  RequestEncryptionResult_ErroCode `protobuf:"varint,3,opt,name=errorCode,proto3,enum=pbmessageserver.RequestEncryptionResult_ErroCode" json:"errorCode,omitempty"` //错误码
}

func (x *RequestEncryptionResult) Reset() {
	*x = RequestEncryptionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestEncryptionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestEncryptionResult) ProtoMessage() {}

func (x *RequestEncryptionResult) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestEncryptionResult.ProtoReflect.Descriptor instead.
func (*RequestEncryptionResult) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{30}
}

func (x *RequestEncryptionResult) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *RequestEncryptionResult) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *RequestEncryptionResult) GetErrorCode() RequestEncryptionResult_ErroCode {
	if x != nil {
		return x.ErrorCode
	}
	return RequestEncryptionResult_SusscessFull
}

// 机器人调用接口
type ReqBotCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrombotId int32         `protobuf:"varint,1,opt,name=frombotId,proto3" json:"frombotId,omitempty"`
	Request   []byte        `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Layer     int32         `protobuf:"varint,3,opt,name=layer,proto3" json:"layer,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqBotCall) Reset() {
	*x = ReqBotCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBotCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBotCall) ProtoMessage() {}

func (x *ReqBotCall) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBotCall.ProtoReflect.Descriptor instead.
func (*ReqBotCall) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{31}
}

func (x *ReqBotCall) GetFrombotId() int32 {
	if x != nil {
		return x.FrombotId
	}
	return 0
}

func (x *ReqBotCall) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ReqBotCall) GetLayer() int32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *ReqBotCall) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 机器人返回接口
type ReplyBotCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReplyBotCall) Reset() {
	*x = ReplyBotCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyBotCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyBotCall) ProtoMessage() {}

func (x *ReplyBotCall) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyBotCall.ProtoReflect.Descriptor instead.
func (*ReplyBotCall) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{32}
}

func (x *ReplyBotCall) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyBotCall) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 机器人调用接口-Inline
type ReqBotInlineCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug     *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`                           // debug
	UserId    int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // 用户id
	BotId     int32         `protobuf:"varint,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`             // 机器人id
	MessageId uint64        `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` // msg_id
	KeyId     uint64        `protobuf:"varint,5,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`             // keyid
	SessionId uint64        `protobuf:"varint,6,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // sessionid
	Data      []byte        `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`                             // tl encode data
	Id        string        `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`                                 // sendInline时客户端带的id
}

func (x *ReqBotInlineCall) Reset() {
	*x = ReqBotInlineCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBotInlineCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBotInlineCall) ProtoMessage() {}

func (x *ReqBotInlineCall) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBotInlineCall.ProtoReflect.Descriptor instead.
func (*ReqBotInlineCall) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{33}
}

func (x *ReqBotInlineCall) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ReqBotInlineCall) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqBotInlineCall) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

func (x *ReqBotInlineCall) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ReqBotInlineCall) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ReqBotInlineCall) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *ReqBotInlineCall) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReqBotInlineCall) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// 机器人返回接口-Inline
type ReplyBotInlineCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode    int32       `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
	Message    string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Inlinecall *InlineCall `protobuf:"bytes,3,opt,name=inlinecall,proto3" json:"inlinecall,omitempty"`
}

func (x *ReplyBotInlineCall) Reset() {
	*x = ReplyBotInlineCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyBotInlineCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyBotInlineCall) ProtoMessage() {}

func (x *ReplyBotInlineCall) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyBotInlineCall.ProtoReflect.Descriptor instead.
func (*ReplyBotInlineCall) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{34}
}

func (x *ReplyBotInlineCall) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *ReplyBotInlineCall) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReplyBotInlineCall) GetInlinecall() *InlineCall {
	if x != nil {
		return x.Inlinecall
	}
	return nil
}

// 调用设置分数
type ReqSetGameScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid             int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`                                                     // 用户id
	Scores             []*UserScore  `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty"`                                                      // 新分数（非负数）
	Force              bool          `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`                                                       // 如果为true 则覆盖原分数  如果为false则新分数大于旧的分数才会更新
	DisableEditMessage bool          `protobuf:"varint,4,opt,name=disable_edit_message,json=disableEditMessage,proto3" json:"disable_edit_message,omitempty"` // 为true则不编辑
	ChatId             int32         `protobuf:"varint,5,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`                                       // 如果未指定inline_message_id，这里就需要填chatid
	ChatType           int32         `protobuf:"varint,6,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`                                 // 1-单聊 2-普通群 3-超级群
	MessageId          int32         `protobuf:"varint,7,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`                              // 如果未指定inline_message_id，则需要填这里的message_id
	InlineMessageId    string        `protobuf:"bytes,8,opt,name=inline_message_id,json=inlineMessageId,proto3" json:"inline_message_id,omitempty"`           // 如果未指定chatid或者message_id 就需要填写inline_message_id
	Botid              int32         `protobuf:"varint,9,opt,name=botid,proto3" json:"botid,omitempty"`                                                       // 请求的机器人id
	Debug              *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug,proto3" json:"debug,omitempty"`                                                       // debug
}

func (x *ReqSetGameScore) Reset() {
	*x = ReqSetGameScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSetGameScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSetGameScore) ProtoMessage() {}

func (x *ReqSetGameScore) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSetGameScore.ProtoReflect.Descriptor instead.
func (*ReqSetGameScore) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{35}
}

func (x *ReqSetGameScore) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqSetGameScore) GetScores() []*UserScore {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *ReqSetGameScore) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *ReqSetGameScore) GetDisableEditMessage() bool {
	if x != nil {
		return x.DisableEditMessage
	}
	return false
}

func (x *ReqSetGameScore) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ReqSetGameScore) GetChatType() int32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *ReqSetGameScore) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ReqSetGameScore) GetInlineMessageId() string {
	if x != nil {
		return x.InlineMessageId
	}
	return ""
}

func (x *ReqSetGameScore) GetBotid() int32 {
	if x != nil {
		return x.Botid
	}
	return 0
}

func (x *ReqSetGameScore) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 设置分数返回
type ReplySetGameScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed   bool   `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Error     string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Errorcode int32  `protobuf:"varint,3,opt,name=errorcode,proto3" json:"errorcode,omitempty"`
}

func (x *ReplySetGameScore) Reset() {
	*x = ReplySetGameScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplySetGameScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplySetGameScore) ProtoMessage() {}

func (x *ReplySetGameScore) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplySetGameScore.ProtoReflect.Descriptor instead.
func (*ReplySetGameScore) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{36}
}

func (x *ReplySetGameScore) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *ReplySetGameScore) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ReplySetGameScore) GetErrorcode() int32 {
	if x != nil {
		return x.Errorcode
	}
	return 0
}

type ReqRemoveConn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid     int32         `protobuf:"varint,1,opt,name=Userid,proto3" json:"Userid,omitempty"`                           //被踢人id
	RequestKey uint64        `protobuf:"varint,2,opt,name=request_key,json=requestKey,proto3" json:"request_key,omitempty"` // 发起踢人方keyid
	RemoveType int32         `protobuf:"varint,3,opt,name=remove_type,json=removeType,proto3" json:"remove_type,omitempty"` // 全踢 还是 踢单个用户
	RemoveKey  uint64        `protobuf:"varint,4,opt,name=remove_key,json=removeKey,proto3" json:"remove_key,omitempty"`    // 踢单人时的 keyid
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqRemoveConn) Reset() {
	*x = ReqRemoveConn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqRemoveConn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqRemoveConn) ProtoMessage() {}

func (x *ReqRemoveConn) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqRemoveConn.ProtoReflect.Descriptor instead.
func (*ReqRemoveConn) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{37}
}

func (x *ReqRemoveConn) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqRemoveConn) GetRequestKey() uint64 {
	if x != nil {
		return x.RequestKey
	}
	return 0
}

func (x *ReqRemoveConn) GetRemoveType() int32 {
	if x != nil {
		return x.RemoveType
	}
	return 0
}

func (x *ReqRemoveConn) GetRemoveKey() uint64 {
	if x != nil {
		return x.RemoveKey
	}
	return 0
}

func (x *ReqRemoveConn) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyRemoveConn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32 `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"` // 1: 成功 2: 不成功
}

func (x *ReplyRemoveConn) Reset() {
	*x = ReplyRemoveConn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyRemoveConn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyRemoveConn) ProtoMessage() {}

func (x *ReplyRemoveConn) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyRemoveConn.ProtoReflect.Descriptor instead.
func (*ReplyRemoveConn) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{38}
}

func (x *ReplyRemoveConn) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 注册激活系统号
type ReqSignUpMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid     int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`                           // 新注册用户id
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` // 用户hash
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`                              // debug日志
}

func (x *ReqSignUpMsg) Reset() {
	*x = ReqSignUpMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSignUpMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSignUpMsg) ProtoMessage() {}

func (x *ReqSignUpMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSignUpMsg.ProtoReflect.Descriptor instead.
func (*ReqSignUpMsg) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{39}
}

func (x *ReqSignUpMsg) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqSignUpMsg) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqSignUpMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 发送短信
type ReqSendCodeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid     int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`                           // 发送短信用户id
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` // 用户hash
	Keyid      uint64        `protobuf:"varint,3,opt,name=keyid,proto3" json:"keyid,omitempty"`                             // 当前用户keyid
	Code       string        `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`                                // 验证码
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`                              // debug日志
}

func (x *ReqSendCodeMsg) Reset() {
	*x = ReqSendCodeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendCodeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendCodeMsg) ProtoMessage() {}

func (x *ReqSendCodeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendCodeMsg.ProtoReflect.Descriptor instead.
func (*ReqSendCodeMsg) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{40}
}

func (x *ReqSendCodeMsg) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqSendCodeMsg) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqSendCodeMsg) GetKeyid() uint64 {
	if x != nil {
		return x.Keyid
	}
	return 0
}

func (x *ReqSendCodeMsg) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ReqSendCodeMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 发送ip消息
type ReqSignInMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid     int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`                           // 发送短信用户id
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` // 用户hash
	Keyid      uint64        `protobuf:"varint,3,opt,name=keyid,proto3" json:"keyid,omitempty"`                             // 当前用户keyid
	Name       string        `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`                                // 验证码
	Device     string        `protobuf:"bytes,5,opt,name=Device,proto3" json:"Device,omitempty"`                            // 设备
	Location   string        `protobuf:"bytes,6,opt,name=Location,proto3" json:"Location,omitempty"`                        // 地址
	IP         string        `protobuf:"bytes,7,opt,name=IP,proto3" json:"IP,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"` // debug日志
}

func (x *ReqSignInMsg) Reset() {
	*x = ReqSignInMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSignInMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSignInMsg) ProtoMessage() {}

func (x *ReqSignInMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSignInMsg.ProtoReflect.Descriptor instead.
func (*ReqSignInMsg) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{41}
}

func (x *ReqSignInMsg) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqSignInMsg) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqSignInMsg) GetKeyid() uint64 {
	if x != nil {
		return x.Keyid
	}
	return 0
}

func (x *ReqSignInMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReqSignInMsg) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *ReqSignInMsg) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ReqSignInMsg) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *ReqSignInMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 多端同步发送
type ReqSendSynMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"` // 同步用户id
	Keyid  int64         `protobuf:"varint,2,opt,name=keyid,proto3" json:"keyid,omitempty"`   // 当前端keyid
	Data   []byte        `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`      // 发送的MT协议二进制数据
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`    // debug日志
}

func (x *ReqSendSynMsg) Reset() {
	*x = ReqSendSynMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendSynMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendSynMsg) ProtoMessage() {}

func (x *ReqSendSynMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendSynMsg.ProtoReflect.Descriptor instead.
func (*ReqSendSynMsg) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{42}
}

func (x *ReqSendSynMsg) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqSendSynMsg) GetKeyid() int64 {
	if x != nil {
		return x.Keyid
	}
	return 0
}

func (x *ReqSendSynMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReqSendSynMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 发送给对方所有端
type ReqSendUserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`       // 发送方id
	FromKeyId int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"` // 发送方keyid
	Toid      int32         `protobuf:"varint,3,opt,name=toid,proto3" json:"toid,omitempty"`           // 接收方id
	Data      []byte        `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`            // Mt数据
	Debug     *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`          // debug日志
}

func (x *ReqSendUserMsg) Reset() {
	*x = ReqSendUserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendUserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendUserMsg) ProtoMessage() {}

func (x *ReqSendUserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendUserMsg.ProtoReflect.Descriptor instead.
func (*ReqSendUserMsg) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{43}
}

func (x *ReqSendUserMsg) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqSendUserMsg) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqSendUserMsg) GetToid() int32 {
	if x != nil {
		return x.Toid
	}
	return 0
}

func (x *ReqSendUserMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReqSendUserMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 发送消息给单个端
type ReqSendUserOneClientMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`       // 发送方id
	FromKeyId int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"` // 发送方keyid
	Toid      int32         `protobuf:"varint,3,opt,name=toid,proto3" json:"toid,omitempty"`           // 接收方id
	Tokeyid   int64         `protobuf:"varint,4,opt,name=tokeyid,proto3" json:"tokeyid,omitempty"`     // 接受对id
	Data      []byte        `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`            // Mt数据
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`          // debug日志
}

func (x *ReqSendUserOneClientMsg) Reset() {
	*x = ReqSendUserOneClientMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendUserOneClientMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendUserOneClientMsg) ProtoMessage() {}

func (x *ReqSendUserOneClientMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendUserOneClientMsg.ProtoReflect.Descriptor instead.
func (*ReqSendUserOneClientMsg) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{44}
}

func (x *ReqSendUserOneClientMsg) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqSendUserOneClientMsg) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqSendUserOneClientMsg) GetToid() int32 {
	if x != nil {
		return x.Toid
	}
	return 0
}

func (x *ReqSendUserOneClientMsg) GetTokeyid() int64 {
	if x != nil {
		return x.Tokeyid
	}
	return 0
}

func (x *ReqSendUserOneClientMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReqSendUserOneClientMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 群发多人 (其他服务)
type ReqSendMoreUserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid    int32         `protobuf:"varint,1,opt,name=Fromid,proto3" json:"Fromid,omitempty"`       // 发送方id
	FromKeyid int64         `protobuf:"varint,2,opt,name=FromKeyid,proto3" json:"FromKeyid,omitempty"` // 发送方keyid
	Toid      []int32       `protobuf:"varint,3,rep,packed,name=toid,proto3" json:"toid,omitempty"`    // 接收方id
	Data      []byte        `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`            // Mt数据
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`          // debug日志
}

func (x *ReqSendMoreUserMsg) Reset() {
	*x = ReqSendMoreUserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendMoreUserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendMoreUserMsg) ProtoMessage() {}

func (x *ReqSendMoreUserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendMoreUserMsg.ProtoReflect.Descriptor instead.
func (*ReqSendMoreUserMsg) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{45}
}

func (x *ReqSendMoreUserMsg) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqSendMoreUserMsg) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqSendMoreUserMsg) GetToid() []int32 {
	if x != nil {
		return x.Toid
	}
	return nil
}

func (x *ReqSendMoreUserMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReqSendMoreUserMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// ######################### 打电话 #############################
// 发送打电话消息 (其他服务)
type ReqSendCallMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid     int32         `protobuf:"varint,1,opt,name=Fromid,proto3" json:"Fromid,omitempty"`        // 发送方id
	FromKeyid  int64         `protobuf:"varint,2,opt,name=FromKeyid,proto3" json:"FromKeyid,omitempty"`  // 发送方keyid
	Toid       int32         `protobuf:"varint,3,opt,name=toid,proto3" json:"toid,omitempty"`            // 接收方id
	CallAction []byte        `protobuf:"bytes,5,opt,name=callAction,proto3" json:"callAction,omitempty"` // call action Mt数据
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`           // debug日志
}

func (x *ReqSendCallMsg) Reset() {
	*x = ReqSendCallMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendCallMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendCallMsg) ProtoMessage() {}

func (x *ReqSendCallMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendCallMsg.ProtoReflect.Descriptor instead.
func (*ReqSendCallMsg) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{46}
}

func (x *ReqSendCallMsg) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqSendCallMsg) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqSendCallMsg) GetToid() int32 {
	if x != nil {
		return x.Toid
	}
	return 0
}

func (x *ReqSendCallMsg) GetCallAction() []byte {
	if x != nil {
		return x.CallAction
	}
	return nil
}

func (x *ReqSendCallMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqCallPush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid         int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 发起电话请求方
	Toid           int32         `protobuf:"varint,2,opt,name=toid,proto3" json:"toid,omitempty"`     // 电话接收方
	Callid         int64         `protobuf:"varint,3,opt,name=callid,proto3" json:"callid,omitempty"`
	CallAccessHash int64         `protobuf:"varint,4,opt,name=callAccessHash,proto3" json:"callAccessHash,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
	Data           []byte        `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"` // Mt数据
}

func (x *ReqCallPush) Reset() {
	*x = ReqCallPush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCallPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCallPush) ProtoMessage() {}

func (x *ReqCallPush) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCallPush.ProtoReflect.Descriptor instead.
func (*ReqCallPush) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{47}
}

func (x *ReqCallPush) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqCallPush) GetToid() int32 {
	if x != nil {
		return x.Toid
	}
	return 0
}

func (x *ReqCallPush) GetCallid() int64 {
	if x != nil {
		return x.Callid
	}
	return 0
}

func (x *ReqCallPush) GetCallAccessHash() int64 {
	if x != nil {
		return x.CallAccessHash
	}
	return 0
}

func (x *ReqCallPush) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ReqCallPush) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReplyCallPush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply bool  `protobuf:"varint,1,opt,name=reply,proto3" json:"reply,omitempty"`
	Error int32 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReplyCallPush) Reset() {
	*x = ReplyCallPush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyCallPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyCallPush) ProtoMessage() {}

func (x *ReplyCallPush) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyCallPush.ProtoReflect.Descriptor instead.
func (*ReplyCallPush) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{48}
}

func (x *ReplyCallPush) GetReply() bool {
	if x != nil {
		return x.Reply
	}
	return false
}

func (x *ReplyCallPush) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// #################################################################
// 获取用户状态数据
type ReqGetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"` // 用户id
	Keyid  uint64        `protobuf:"varint,2,opt,name=keyid,proto3" json:"keyid,omitempty"`   // 用户keyid
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`    // debug日志
}

func (x *ReqGetState) Reset() {
	*x = ReqGetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetState) ProtoMessage() {}

func (x *ReqGetState) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetState.ProtoReflect.Descriptor instead.
func (*ReqGetState) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{49}
}

func (x *ReqGetState) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqGetState) GetKeyid() uint64 {
	if x != nil {
		return x.Keyid
	}
	return 0
}

func (x *ReqGetState) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 状态返回
type ReplyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` //1: 无法获取 2: 数据过去超时 3: 崩溃 4: 发起id为0
}

func (x *ReplyResult) Reset() {
	*x = ReplyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyResult) ProtoMessage() {}

func (x *ReplyResult) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyResult.ProtoReflect.Descriptor instead.
func (*ReplyResult) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{50}
}

func (x *ReplyResult) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyResult) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type ReplyNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplyNull) Reset() {
	*x = ReplyNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyNull) ProtoMessage() {}

func (x *ReplyNull) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyNull.ProtoReflect.Descriptor instead.
func (*ReplyNull) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{51}
}

// ############################### pts ##########################
type ReqGetPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetPts) Reset() {
	*x = ReqGetPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetPts) ProtoMessage() {}

func (x *ReqGetPts) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetPts.ProtoReflect.Descriptor instead.
func (*ReqGetPts) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{52}
}

func (x *ReqGetPts) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqGetPts) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pts   int32 `protobuf:"varint,1,opt,name=pts,proto3" json:"pts,omitempty"`
	Error int32 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` // 1.数据库获取出错 2.其他错误
}

func (x *ReplyGetPts) Reset() {
	*x = ReplyGetPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetPts) ProtoMessage() {}

func (x *ReplyGetPts) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetPts.ProtoReflect.Descriptor instead.
func (*ReplyGetPts) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{53}
}

func (x *ReplyGetPts) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReplyGetPts) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ################################ dialohg ######################
// 获取dialog接口
type RequestDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid     int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`                           // 用户id
	Flags      int32         `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`                             // 标识位
	FolderId   int32         `protobuf:"varint,3,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`       // 归档id
	OffsetDate int32         `protobuf:"varint,4,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"` // 偏移时间
	OffsetId   int32         `protobuf:"varint,5,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`       // 偏移id
	OffsetPeer []byte        `protobuf:"bytes,6,opt,name=offset_peer,json=offsetPeer,proto3" json:"offset_peer,omitempty"`  // 偏移对象 (mt 协议)
	Limit      int32         `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`                             // 偏移长度
	Debug      *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *RequestDialog) Reset() {
	*x = RequestDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDialog) ProtoMessage() {}

func (x *RequestDialog) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDialog.ProtoReflect.Descriptor instead.
func (*RequestDialog) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{54}
}

func (x *RequestDialog) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *RequestDialog) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *RequestDialog) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *RequestDialog) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *RequestDialog) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *RequestDialog) GetOffsetPeer() []byte {
	if x != nil {
		return x.OffsetPeer
	}
	return nil
}

func (x *RequestDialog) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RequestDialog) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回dialog
type ReplyDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//    repeated DialogSlice dialog = 1;
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // 对话框数据返回
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`  // 1: 无法获取到 2: userid 为0  3: 数据库返回超时 4: 消息服务crash
}

func (x *ReplyDialog) Reset() {
	*x = ReplyDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDialog) ProtoMessage() {}

func (x *ReplyDialog) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDialog.ProtoReflect.Descriptor instead.
func (*ReplyDialog) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{55}
}

func (x *ReplyDialog) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyDialog) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type UserIdRating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` //用户的Id
	Rating float64 `protobuf:"fixed64,2,opt,name=Rating,proto3" json:"Rating,omitempty"`
}

func (x *UserIdRating) Reset() {
	*x = UserIdRating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdRating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdRating) ProtoMessage() {}

func (x *UserIdRating) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdRating.ProtoReflect.Descriptor instead.
func (*UserIdRating) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{56}
}

func (x *UserIdRating) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserIdRating) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

type ReplyGetLastLimitDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserRatingList []*UserIdRating `protobuf:"bytes,1,rep,name=UserRatingList,proto3" json:"UserRatingList,omitempty"`       // 单聊 withId列表 所对应类型的Id的列表(dialog)
	ChannelIdlist  []int32         `protobuf:"varint,2,rep,packed,name=channelIdlist,proto3" json:"channelIdlist,omitempty"` // 超级群 withId列表 所对应类型的Id的列表(暂时不用)
	ChatIdlist     []int32         `protobuf:"varint,3,rep,packed,name=chatIdlist,proto3" json:"chatIdlist,omitempty"`       // 普通群 withId列表 所对应普通群的Id的列表(暂时不用)
	Error          int32           `protobuf:"varint,4,opt,name=Error,proto3" json:"Error,omitempty"`                        // 返回错误码
}

func (x *ReplyGetLastLimitDialog) Reset() {
	*x = ReplyGetLastLimitDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetLastLimitDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetLastLimitDialog) ProtoMessage() {}

func (x *ReplyGetLastLimitDialog) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetLastLimitDialog.ProtoReflect.Descriptor instead.
func (*ReplyGetLastLimitDialog) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{57}
}

func (x *ReplyGetLastLimitDialog) GetUserRatingList() []*UserIdRating {
	if x != nil {
		return x.UserRatingList
	}
	return nil
}

func (x *ReplyGetLastLimitDialog) GetChannelIdlist() []int32 {
	if x != nil {
		return x.ChannelIdlist
	}
	return nil
}

func (x *ReplyGetLastLimitDialog) GetChatIdlist() []int32 {
	if x != nil {
		return x.ChatIdlist
	}
	return nil
}

func (x *ReplyGetLastLimitDialog) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 获去pinned dialog
type ReqPinnedDialogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid   int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	FolderId int32         `protobuf:"varint,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqPinnedDialogs) Reset() {
	*x = ReqPinnedDialogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPinnedDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPinnedDialogs) ProtoMessage() {}

func (x *ReqPinnedDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPinnedDialogs.ProtoReflect.Descriptor instead.
func (*ReqPinnedDialogs) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{58}
}

func (x *ReqPinnedDialogs) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqPinnedDialogs) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *ReqPinnedDialogs) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取单独对话框
type ReqPeerDialogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"` // 用户id
	Peers  [][]byte      `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers,omitempty"`    // 对话框
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqPeerDialogs) Reset() {
	*x = ReqPeerDialogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPeerDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPeerDialogs) ProtoMessage() {}

func (x *ReqPeerDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPeerDialogs.ProtoReflect.Descriptor instead.
func (*ReqPeerDialogs) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{59}
}

func (x *ReqPeerDialogs) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqPeerDialogs) GetPeers() [][]byte {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *ReqPeerDialogs) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取最近位置
type ReqRecentLocations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"` // 用户id
	Peers  []byte        `protobuf:"bytes,2,opt,name=peers,proto3" json:"peers,omitempty"`    // 具体的框
	Limit  int32         `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqRecentLocations) Reset() {
	*x = ReqRecentLocations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqRecentLocations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqRecentLocations) ProtoMessage() {}

func (x *ReqRecentLocations) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqRecentLocations.ProtoReflect.Descriptor instead.
func (*ReqRecentLocations) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{60}
}

func (x *ReqRecentLocations) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqRecentLocations) GetPeers() []byte {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *ReqRecentLocations) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqRecentLocations) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 置顶对话框请求
type ReqPinDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"` // 请求用户
	Pinned bool          `protobuf:"varint,2,opt,name=pinned,proto3" json:"pinned,omitempty"` // true 置顶 false 取消置顶
	Peer   []byte        `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`      // 具体的框
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqPinDialog) Reset() {
	*x = ReqPinDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPinDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPinDialog) ProtoMessage() {}

func (x *ReqPinDialog) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPinDialog.ProtoReflect.Descriptor instead.
func (*ReqPinDialog) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{61}
}

func (x *ReqPinDialog) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqPinDialog) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

func (x *ReqPinDialog) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ReqPinDialog) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// ios 置顶对话框
type ReqReorderPinnedDialogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"` // 请求用户
	Peer   [][]byte      `protobuf:"bytes,3,rep,name=peer,proto3" json:"peer,omitempty"`      // 具体的框
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqReorderPinnedDialogs) Reset() {
	*x = ReqReorderPinnedDialogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqReorderPinnedDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqReorderPinnedDialogs) ProtoMessage() {}

func (x *ReqReorderPinnedDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqReorderPinnedDialogs.ProtoReflect.Descriptor instead.
func (*ReqReorderPinnedDialogs) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{62}
}

func (x *ReqReorderPinnedDialogs) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqReorderPinnedDialogs) GetPeer() [][]byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ReqReorderPinnedDialogs) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 置顶对话框返回
type ReplyBool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` // 1: 对话框不存在  2:无法置顶 3:其他错误
}

func (x *ReplyBool) Reset() {
	*x = ReplyBool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyBool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyBool) ProtoMessage() {}

func (x *ReplyBool) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyBool.ProtoReflect.Descriptor instead.
func (*ReplyBool) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{63}
}

func (x *ReplyBool) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ReplyBool) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ########################## 发消息 ###############################
// 发送消息请求
type RequestSendMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid       int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`                        // 发送方id
	NoWebpage    bool          `protobuf:"varint,2,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"` // 是否有网页
	Silent       bool          `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`                        // 是否无声音
	Background   bool          `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool          `protobuf:"varint,5,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`           // 是否清除草稿
	Peer         []byte        `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`                                          // 发送对象
	ReplyToMsgId int32         `protobuf:"varint,7,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"` // 回复消息
	Message      string        `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`                                    // 文本内容
	RandomId     int64         `protobuf:"varint,9,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`                 // 随机id
	ReplyMarkup  []byte        `protobuf:"bytes,10,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`        // 小键盘
	Entities     [][]byte      `protobuf:"bytes,11,rep,name=entities,proto3" json:"entities,omitempty"`                                 // 高亮
	FromkeyId    uint64        `protobuf:"varint,13,opt,name=fromkey_id,json=fromkeyId,proto3" json:"fromkey_id,omitempty"`             // 发送方的key_id
	Debug        *pbcomm.Debug `protobuf:"bytes,15,opt,name=debug,proto3" json:"debug,omitempty"`
	IncludeChat  bool          `protobuf:"varint,16,opt,name=include_chat,json=includeChat,proto3" json:"include_chat,omitempty"`
	ViaBotId     int32         `protobuf:"varint,17,opt,name=via_bot_id,json=viaBotId,proto3" json:"via_bot_id,omitempty"` //via_bot_id
}

func (x *RequestSendMessage) Reset() {
	*x = RequestSendMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSendMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSendMessage) ProtoMessage() {}

func (x *RequestSendMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSendMessage.ProtoReflect.Descriptor instead.
func (*RequestSendMessage) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{64}
}

func (x *RequestSendMessage) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *RequestSendMessage) GetNoWebpage() bool {
	if x != nil {
		return x.NoWebpage
	}
	return false
}

func (x *RequestSendMessage) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *RequestSendMessage) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

func (x *RequestSendMessage) GetClearDraft() bool {
	if x != nil {
		return x.ClearDraft
	}
	return false
}

func (x *RequestSendMessage) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *RequestSendMessage) GetReplyToMsgId() int32 {
	if x != nil {
		return x.ReplyToMsgId
	}
	return 0
}

func (x *RequestSendMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RequestSendMessage) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *RequestSendMessage) GetReplyMarkup() []byte {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *RequestSendMessage) GetEntities() [][]byte {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *RequestSendMessage) GetFromkeyId() uint64 {
	if x != nil {
		return x.FromkeyId
	}
	return 0
}

func (x *RequestSendMessage) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *RequestSendMessage) GetIncludeChat() bool {
	if x != nil {
		return x.IncludeChat
	}
	return false
}

func (x *RequestSendMessage) GetViaBotId() int32 {
	if x != nil {
		return x.ViaBotId
	}
	return 0
}

// 发送投票
type SendVoteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid  int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`            // 发送方id
	Peer    []byte        `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`                 // 发送对象
	MsgId   int32         `protobuf:"varint,3,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"` // 投票id
	Options []string      `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`           // 内容
	FromKey int64         `protobuf:"varint,5,opt,name=fromKey,proto3" json:"fromKey,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *SendVoteReq) Reset() {
	*x = SendVoteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendVoteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendVoteReq) ProtoMessage() {}

func (x *SendVoteReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendVoteReq.ProtoReflect.Descriptor instead.
func (*SendVoteReq) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{65}
}

func (x *SendVoteReq) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *SendVoteReq) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *SendVoteReq) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *SendVoteReq) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *SendVoteReq) GetFromKey() int64 {
	if x != nil {
		return x.FromKey
	}
	return 0
}

func (x *SendVoteReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type SendVoteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`  //0: ok 1: err
	Error int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` //1: 存储失败 2:发送失败 3: 其他错误
}

func (x *SendVoteReply) Reset() {
	*x = SendVoteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendVoteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendVoteReply) ProtoMessage() {}

func (x *SendVoteReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendVoteReply.ProtoReflect.Descriptor instead.
func (*SendVoteReply) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{66}
}

func (x *SendVoteReply) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *SendVoteReply) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 系统号发消息
type RequestSySSendMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid       int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`                        // 发送方id
	NoWebpage    bool          `protobuf:"varint,2,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"` // 是否有网页
	Silent       bool          `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`                        // 是否无声音
	Background   bool          `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool          `protobuf:"varint,5,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`           // 是否清除草稿
	Peer         []byte        `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`                                          // 发送对象
	ReplyToMsgId int32         `protobuf:"varint,7,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"` // 回复消息
	Message      string        `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`                                    // 文本内容
	RandomId     int64         `protobuf:"varint,9,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`                 // 随机id
	ReplyMarkup  []byte        `protobuf:"bytes,10,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`        // 小键盘
	Entities     [][]byte      `protobuf:"bytes,11,rep,name=entities,proto3" json:"entities,omitempty"`                                 // 高亮
	ChatMember   []int32       `protobuf:"varint,12,rep,packed,name=chat_member,json=chatMember,proto3" json:"chat_member,omitempty"`
	FromkeyId    uint64        `protobuf:"varint,13,opt,name=fromkey_id,json=fromkeyId,proto3" json:"fromkey_id,omitempty"` // 发送方的key_id
	Phone        string        `protobuf:"bytes,14,opt,name=Phone,proto3" json:"Phone,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,15,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *RequestSySSendMessage) Reset() {
	*x = RequestSySSendMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSySSendMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSySSendMessage) ProtoMessage() {}

func (x *RequestSySSendMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSySSendMessage.ProtoReflect.Descriptor instead.
func (*RequestSySSendMessage) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{67}
}

func (x *RequestSySSendMessage) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *RequestSySSendMessage) GetNoWebpage() bool {
	if x != nil {
		return x.NoWebpage
	}
	return false
}

func (x *RequestSySSendMessage) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *RequestSySSendMessage) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

func (x *RequestSySSendMessage) GetClearDraft() bool {
	if x != nil {
		return x.ClearDraft
	}
	return false
}

func (x *RequestSySSendMessage) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *RequestSySSendMessage) GetReplyToMsgId() int32 {
	if x != nil {
		return x.ReplyToMsgId
	}
	return 0
}

func (x *RequestSySSendMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RequestSySSendMessage) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *RequestSySSendMessage) GetReplyMarkup() []byte {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *RequestSySSendMessage) GetEntities() [][]byte {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *RequestSySSendMessage) GetChatMember() []int32 {
	if x != nil {
		return x.ChatMember
	}
	return nil
}

func (x *RequestSySSendMessage) GetFromkeyId() uint64 {
	if x != nil {
		return x.FromkeyId
	}
	return 0
}

func (x *RequestSySSendMessage) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *RequestSySSendMessage) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqS2SMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid       int32         `protobuf:"varint,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	WithidType   int32         `protobuf:"varint,4,opt,name=WithidType,proto3" json:"WithidType,omitempty"`                      // 1.user 2:chat 3:channel
	MessageType  int32         `protobuf:"varint,5,opt,name=MessageType,proto3" json:"MessageType,omitempty"`                    // 消息类型
	Flags        int32         `protobuf:"varint,6,opt,name=Flags,proto3" json:"Flags,omitempty"`                                // 消息标识
	Out          bool          `protobuf:"varint,7,opt,name=Out,proto3" json:"Out,omitempty"`                                    // 是否为自己发送
	Mentioned    bool          `protobuf:"varint,8,opt,name=Mentioned,proto3" json:"Mentioned,omitempty"`                        // 是否提及他人
	MediaUnread  bool          `protobuf:"varint,9,opt,name=MediaUnread,proto3" json:"MediaUnread,omitempty"`                    // 媒体是否已读
	Silent       bool          `protobuf:"varint,10,opt,name=Silent,proto3" json:"Silent,omitempty"`                             // 是否静音
	Post         bool          `protobuf:"varint,11,opt,name=Post,proto3" json:"Post,omitempty"`                                 // 是否邮递
	MsgId        int32         `protobuf:"varint,12,opt,name=MsgId,proto3" json:"MsgId,omitempty"`                               // 消息id
	FromId       int32         `protobuf:"varint,13,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`               // 发送方id
	ToId         int32         `protobuf:"varint,14,opt,name=To_id,json=ToId,proto3" json:"To_id,omitempty"`                     // 接收方id
	Pts          int32         `protobuf:"varint,15,opt,name=Pts,proto3" json:"Pts,omitempty"`                                   // 消息的pts
	FwdFrom      []byte        `protobuf:"bytes,16,opt,name=Fwd_from,json=FwdFrom,proto3" json:"Fwd_from,omitempty"`             //	引用
	ViaBotId     int32         `protobuf:"varint,17,opt,name=ViaBotId,proto3" json:"ViaBotId,omitempty"`                         //	机器人id
	ReplyToMsgId int32         `protobuf:"varint,18,opt,name=ReplyToMsgId,proto3" json:"ReplyToMsgId,omitempty"`                 // 回复id
	Date         int32         `protobuf:"varint,19,opt,name=Date,proto3" json:"Date,omitempty"`                                 // 时间
	Message      string        `protobuf:"bytes,20,opt,name=Message,proto3" json:"Message,omitempty"`                            // 消息内容
	Media        int64         `protobuf:"varint,21,opt,name=Media,proto3" json:"Media,omitempty"`                               // 媒体id
	Meidadata    []byte        `protobuf:"bytes,22,opt,name=Meidadata,proto3" json:"Meidadata,omitempty"`                        // 媒体二进制
	ReplyMarkup  []byte        `protobuf:"bytes,23,opt,name=Reply_markup,json=ReplyMarkup,proto3" json:"Reply_markup,omitempty"` //	小键盘
	Entities     [][]byte      `protobuf:"bytes,24,rep,name=Entities,proto3" json:"Entities,omitempty"`                          // 高亮
	Views        int32         `protobuf:"varint,25,opt,name=Views,proto3" json:"Views,omitempty"`                               // 查看人数
	EditDate     int32         `protobuf:"varint,26,opt,name=Edit_date,json=EditDate,proto3" json:"Edit_date,omitempty"`         // 编辑时间
	Action       []byte        `protobuf:"bytes,27,opt,name=Action,proto3" json:"Action,omitempty"`                              // 行为
	Uuid         int64         `protobuf:"varint,28,opt,name=Uuid,proto3" json:"Uuid,omitempty"`                                 // 全局唯一id
	Encry        int32         `protobuf:"varint,29,opt,name=encry,proto3" json:"encry,omitempty"`                               // 是否为加密消息
	Debug        *pbcomm.Debug `protobuf:"bytes,30,opt,name=debug,proto3" json:"debug,omitempty"`
	Groupid      int64         `protobuf:"varint,32,opt,name=Groupid,proto3" json:"Groupid,omitempty"`
	ReplyUuid    int64         `protobuf:"varint,33,opt,name=ReplyUuid,proto3" json:"ReplyUuid,omitempty"`
}

func (x *ReqS2SMsg) Reset() {
	*x = ReqS2SMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqS2SMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqS2SMsg) ProtoMessage() {}

func (x *ReqS2SMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqS2SMsg.ProtoReflect.Descriptor instead.
func (*ReqS2SMsg) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{68}
}

func (x *ReqS2SMsg) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqS2SMsg) GetWithidType() int32 {
	if x != nil {
		return x.WithidType
	}
	return 0
}

func (x *ReqS2SMsg) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *ReqS2SMsg) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqS2SMsg) GetOut() bool {
	if x != nil {
		return x.Out
	}
	return false
}

func (x *ReqS2SMsg) GetMentioned() bool {
	if x != nil {
		return x.Mentioned
	}
	return false
}

func (x *ReqS2SMsg) GetMediaUnread() bool {
	if x != nil {
		return x.MediaUnread
	}
	return false
}

func (x *ReqS2SMsg) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *ReqS2SMsg) GetPost() bool {
	if x != nil {
		return x.Post
	}
	return false
}

func (x *ReqS2SMsg) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqS2SMsg) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqS2SMsg) GetToId() int32 {
	if x != nil {
		return x.ToId
	}
	return 0
}

func (x *ReqS2SMsg) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReqS2SMsg) GetFwdFrom() []byte {
	if x != nil {
		return x.FwdFrom
	}
	return nil
}

func (x *ReqS2SMsg) GetViaBotId() int32 {
	if x != nil {
		return x.ViaBotId
	}
	return 0
}

func (x *ReqS2SMsg) GetReplyToMsgId() int32 {
	if x != nil {
		return x.ReplyToMsgId
	}
	return 0
}

func (x *ReqS2SMsg) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ReqS2SMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReqS2SMsg) GetMedia() int64 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *ReqS2SMsg) GetMeidadata() []byte {
	if x != nil {
		return x.Meidadata
	}
	return nil
}

func (x *ReqS2SMsg) GetReplyMarkup() []byte {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *ReqS2SMsg) GetEntities() [][]byte {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *ReqS2SMsg) GetViews() int32 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *ReqS2SMsg) GetEditDate() int32 {
	if x != nil {
		return x.EditDate
	}
	return 0
}

func (x *ReqS2SMsg) GetAction() []byte {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ReqS2SMsg) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *ReqS2SMsg) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ReqS2SMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ReqS2SMsg) GetGroupid() int64 {
	if x != nil {
		return x.Groupid
	}
	return 0
}

func (x *ReqS2SMsg) GetReplyUuid() int64 {
	if x != nil {
		return x.ReplyUuid
	}
	return 0
}

type ReplyS2SMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply int32 `protobuf:"varint,1,opt,name=reply,proto3" json:"reply,omitempty"` //0: ok 1: err
	Error int32 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` //1: 存储失败 2:发送失败 3: 其他错误
}

func (x *ReplyS2SMsg) Reset() {
	*x = ReplyS2SMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyS2SMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyS2SMsg) ProtoMessage() {}

func (x *ReplyS2SMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyS2SMsg.ProtoReflect.Descriptor instead.
func (*ReplyS2SMsg) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{69}
}

func (x *ReplyS2SMsg) GetReply() int32 {
	if x != nil {
		return x.Reply
	}
	return 0
}

func (x *ReplyS2SMsg) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ############################# 发送媒体 ##############################
type ReqSendMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid       int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 发送方id
	Flags        int32         `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Silent       bool          `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Background   bool          `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool          `protobuf:"varint,5,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Peer         []byte        `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyToMsgId int32         `protobuf:"varint,7,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Media        []byte        `protobuf:"bytes,8,opt,name=media,proto3" json:"media,omitempty"`
	Message      string        `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
	MultiMedia   [][]byte      `protobuf:"bytes,10,rep,name=multi_media,json=multiMedia,proto3" json:"multi_media,omitempty"`
	RandomId     int64         `protobuf:"varint,11,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ReplyMarkup  []byte        `protobuf:"bytes,12,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Newfileid    int64         `protobuf:"varint,13,opt,name=newfileid,proto3" json:"newfileid,omitempty"`
	Entities     [][]byte      `protobuf:"bytes,14,rep,name=entities,proto3" json:"entities,omitempty"`                     // @ add by qingsong at 2020.08.06 for high light message.
	FromkeyId    uint64        `protobuf:"varint,15,opt,name=fromkey_id,json=fromkeyId,proto3" json:"fromkey_id,omitempty"` // 发送方的key_id
	Chatmeber    []int32       `protobuf:"varint,16,rep,packed,name=chatmeber,proto3" json:"chatmeber,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,17,opt,name=debug,proto3" json:"debug,omitempty"`
	ViaBotId     int32         `protobuf:"varint,18,opt,name=via_bot_id,json=viaBotId,proto3" json:"via_bot_id,omitempty"` //via_bot_id
}

func (x *ReqSendMedia) Reset() {
	*x = ReqSendMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendMedia) ProtoMessage() {}

func (x *ReqSendMedia) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendMedia.ProtoReflect.Descriptor instead.
func (*ReqSendMedia) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{70}
}

func (x *ReqSendMedia) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqSendMedia) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqSendMedia) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *ReqSendMedia) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

func (x *ReqSendMedia) GetClearDraft() bool {
	if x != nil {
		return x.ClearDraft
	}
	return false
}

func (x *ReqSendMedia) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ReqSendMedia) GetReplyToMsgId() int32 {
	if x != nil {
		return x.ReplyToMsgId
	}
	return 0
}

func (x *ReqSendMedia) GetMedia() []byte {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *ReqSendMedia) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReqSendMedia) GetMultiMedia() [][]byte {
	if x != nil {
		return x.MultiMedia
	}
	return nil
}

func (x *ReqSendMedia) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *ReqSendMedia) GetReplyMarkup() []byte {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *ReqSendMedia) GetNewfileid() int64 {
	if x != nil {
		return x.Newfileid
	}
	return 0
}

func (x *ReqSendMedia) GetEntities() [][]byte {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *ReqSendMedia) GetFromkeyId() uint64 {
	if x != nil {
		return x.FromkeyId
	}
	return 0
}

func (x *ReqSendMedia) GetChatmeber() []int32 {
	if x != nil {
		return x.Chatmeber
	}
	return nil
}

func (x *ReqSendMedia) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ReqSendMedia) GetViaBotId() int32 {
	if x != nil {
		return x.ViaBotId
	}
	return 0
}

// ############################# 上传媒体文件 ##########################
type ReqUploadMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 发送方id
	Peer   []byte        `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	Media  []byte        `protobuf:"bytes,3,opt,name=media,proto3" json:"media,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,15,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqUploadMedia) Reset() {
	*x = ReqUploadMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUploadMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUploadMedia) ProtoMessage() {}

func (x *ReqUploadMedia) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUploadMedia.ProtoReflect.Descriptor instead.
func (*ReqUploadMedia) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{71}
}

func (x *ReqUploadMedia) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqUploadMedia) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ReqUploadMedia) GetMedia() []byte {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *ReqUploadMedia) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// ############################# 转发消息 ##############################
type ReqForwardMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid      int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 发送方id
	Flags       int32         `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`   // 标识
	Silent      bool          `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"` // 是否无声音
	Background  bool          `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	WithMyScore bool          `protobuf:"varint,5,opt,name=with_my_score,json=withMyScore,proto3" json:"with_my_score,omitempty"`
	FromPeer    []byte        `protobuf:"bytes,6,opt,name=from_peer,json=fromPeer,proto3" json:"from_peer,omitempty"`
	Id          []int32       `protobuf:"varint,7,rep,packed,name=id,proto3" json:"id,omitempty"`
	RandomId    []int64       `protobuf:"varint,8,rep,packed,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ToPeer      []byte        `protobuf:"bytes,9,opt,name=to_peer,json=toPeer,proto3" json:"to_peer,omitempty"`
	FromKeyid   uint64        `protobuf:"varint,10,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,11,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqForwardMessages) Reset() {
	*x = ReqForwardMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqForwardMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqForwardMessages) ProtoMessage() {}

func (x *ReqForwardMessages) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqForwardMessages.ProtoReflect.Descriptor instead.
func (*ReqForwardMessages) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{72}
}

func (x *ReqForwardMessages) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqForwardMessages) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqForwardMessages) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *ReqForwardMessages) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

func (x *ReqForwardMessages) GetWithMyScore() bool {
	if x != nil {
		return x.WithMyScore
	}
	return false
}

func (x *ReqForwardMessages) GetFromPeer() []byte {
	if x != nil {
		return x.FromPeer
	}
	return nil
}

func (x *ReqForwardMessages) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReqForwardMessages) GetRandomId() []int64 {
	if x != nil {
		return x.RandomId
	}
	return nil
}

func (x *ReqForwardMessages) GetToPeer() []byte {
	if x != nil {
		return x.ToPeer
	}
	return nil
}

func (x *ReqForwardMessages) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqForwardMessages) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyForwardMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // 转发返回
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`  // 1.转发获取失败 2.转发转存失败 3.转发失败
}

func (x *ReplyForwardMessages) Reset() {
	*x = ReplyForwardMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyForwardMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyForwardMessages) ProtoMessage() {}

func (x *ReplyForwardMessages) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyForwardMessages.ProtoReflect.Descriptor instead.
func (*ReplyForwardMessages) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{73}
}

func (x *ReplyForwardMessages) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyForwardMessages) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         int32    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // 0: empty 1: message 2: messageserver
	Flags        int32    `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Id           int32    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                             // 消息id
	FromId       int32    `protobuf:"varint,4,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`                       // 发送者id
	ToId         []byte   `protobuf:"bytes,5,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`                              // 接收者
	FwdFrom      []byte   `protobuf:"bytes,6,opt,name=fwd_from,json=fwdFrom,proto3" json:"fwd_from,omitempty"`                     // 转发消息
	ViaBotId     int32    `protobuf:"varint,7,opt,name=via_bot_id,json=viaBotId,proto3" json:"via_bot_id,omitempty"`               // 机器人
	ReplyToMsgId int32    `protobuf:"varint,8,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"` // 回复消息
	Date         int32    `protobuf:"varint,9,opt,name=date,proto3" json:"date,omitempty"`
	Message      string   `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"` // 消息内容
	Media        []byte   `protobuf:"bytes,11,opt,name=media,proto3" json:"media,omitempty"`     // 媒体
	MediaType    int32    `protobuf:"varint,12,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	ReplyMarkup  []byte   `protobuf:"bytes,13,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"` // 小键盘
	Entities     [][]byte `protobuf:"bytes,14,rep,name=entities,proto3" json:"entities,omitempty"`                          // 高亮
	Views        int32    `protobuf:"varint,15,opt,name=views,proto3" json:"views,omitempty"`                               // 查看人数
	EditDate     int32    `protobuf:"varint,16,opt,name=edit_date,json=editDate,proto3" json:"edit_date,omitempty"`         // 编辑时间
	Action       []byte   `protobuf:"bytes,17,opt,name=action,proto3" json:"action,omitempty"`                              // 动作
	Randomid     int64    `protobuf:"varint,18,opt,name=Randomid,proto3" json:"Randomid,omitempty"`                         // 消息随机id
	Pts          int32    `protobuf:"varint,19,opt,name=Pts,proto3" json:"Pts,omitempty"`                                   // 消息的pts
}

func (x *Msg) Reset() {
	*x = Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Msg) ProtoMessage() {}

func (x *Msg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Msg.ProtoReflect.Descriptor instead.
func (*Msg) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{74}
}

func (x *Msg) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Msg) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Msg) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Msg) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *Msg) GetToId() []byte {
	if x != nil {
		return x.ToId
	}
	return nil
}

func (x *Msg) GetFwdFrom() []byte {
	if x != nil {
		return x.FwdFrom
	}
	return nil
}

func (x *Msg) GetViaBotId() int32 {
	if x != nil {
		return x.ViaBotId
	}
	return 0
}

func (x *Msg) GetReplyToMsgId() int32 {
	if x != nil {
		return x.ReplyToMsgId
	}
	return 0
}

func (x *Msg) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *Msg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Msg) GetMedia() []byte {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *Msg) GetMediaType() int32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *Msg) GetReplyMarkup() []byte {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *Msg) GetEntities() [][]byte {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *Msg) GetViews() int32 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *Msg) GetEditDate() int32 {
	if x != nil {
		return x.EditDate
	}
	return 0
}

func (x *Msg) GetAction() []byte {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Msg) GetRandomid() int64 {
	if x != nil {
		return x.Randomid
	}
	return 0
}

func (x *Msg) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

// ################################ 获取部分消息 #####################
type ReqGetMsgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	KeyId  uint64        `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Ids    []int32       `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetMsgs) Reset() {
	*x = ReqGetMsgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetMsgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetMsgs) ProtoMessage() {}

func (x *ReqGetMsgs) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetMsgs.ProtoReflect.Descriptor instead.
func (*ReqGetMsgs) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{75}
}

func (x *ReqGetMsgs) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *ReqGetMsgs) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ReqGetMsgs) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ReqGetMsgs) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetMsgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // 历史返回
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`  // 1: 数据库无法获取消息 2:处理历史错误 3:其他错误 101: 获取对象为empty 102: 超级群历史获取 103: 数据库获取出错
}

func (x *ReplyGetMsgs) Reset() {
	*x = ReplyGetMsgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetMsgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetMsgs) ProtoMessage() {}

func (x *ReplyGetMsgs) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetMsgs.ProtoReflect.Descriptor instead.
func (*ReplyGetMsgs) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{76}
}

func (x *ReplyGetMsgs) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyGetMsgs) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ################################ 历史获取 ########################
type ReqHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selfid     int32         `protobuf:"varint,1,opt,name=Selfid,proto3" json:"Selfid,omitempty"`                           // 自己的id
	Peer       []byte        `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`                                // 对象
	OffsetId   int32         `protobuf:"varint,3,opt,name=Offset_id,json=OffsetId,proto3" json:"Offset_id,omitempty"`       // 偏移id
	OffsetDate int32         `protobuf:"varint,4,opt,name=Offset_date,json=OffsetDate,proto3" json:"Offset_date,omitempty"` // 偏移时间
	AddOffset  int32         `protobuf:"varint,5,opt,name=Add_offset,json=AddOffset,proto3" json:"Add_offset,omitempty"`    // 追加偏移
	Limit      int32         `protobuf:"varint,6,opt,name=Limit,proto3" json:"Limit,omitempty"`                             // 限制条数
	MaxId      int32         `protobuf:"varint,7,opt,name=Max_id,json=MaxId,proto3" json:"Max_id,omitempty"`                // 最大id
	MinId      int32         `protobuf:"varint,8,opt,name=Min_id,json=MinId,proto3" json:"Min_id,omitempty"`                // 最小id
	Debug      *pbcomm.Debug `protobuf:"bytes,9,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqHistory) Reset() {
	*x = ReqHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqHistory) ProtoMessage() {}

func (x *ReqHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqHistory.ProtoReflect.Descriptor instead.
func (*ReqHistory) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{77}
}

func (x *ReqHistory) GetSelfid() int32 {
	if x != nil {
		return x.Selfid
	}
	return 0
}

func (x *ReqHistory) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ReqHistory) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *ReqHistory) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *ReqHistory) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *ReqHistory) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqHistory) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *ReqHistory) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *ReqHistory) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // 历史返回
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`  // 1: 数据库无法获取消息 2:处理历史错误 3:其他错误 101: 获取对象为empty 102: 超级群历史获取 103: 数据库获取出错
}

func (x *ReplyHistory) Reset() {
	*x = ReplyHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyHistory) ProtoMessage() {}

func (x *ReplyHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyHistory.ProtoReflect.Descriptor instead.
func (*ReplyHistory) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{78}
}

func (x *ReplyHistory) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyHistory) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ################################# 创建群 #########################
type ReqCreateChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatid    int32         `protobuf:"varint,1,opt,name=chatid,proto3" json:"chatid,omitempty"`      // 群id
	Title     string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`         // 名称
	Creator   int32         `protobuf:"varint,3,opt,name=creator,proto3" json:"creator,omitempty"`    // 创建者
	Users     []int32       `protobuf:"varint,4,rep,packed,name=users,proto3" json:"users,omitempty"` // 用户数据
	FromKeyid uint64        `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqCreateChat) Reset() {
	*x = ReqCreateChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCreateChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCreateChat) ProtoMessage() {}

func (x *ReqCreateChat) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCreateChat.ProtoReflect.Descriptor instead.
func (*ReqCreateChat) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{79}
}

func (x *ReqCreateChat) GetChatid() int32 {
	if x != nil {
		return x.Chatid
	}
	return 0
}

func (x *ReqCreateChat) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ReqCreateChat) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *ReqCreateChat) GetUsers() []int32 {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ReqCreateChat) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqCreateChat) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyCreateChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`                // 创建普通群返回
	ChatId int32  `protobuf:"varint,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"` //普通群ID
	Error  int32  `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`                 // 1: 创建者id为0 2: 被加入的成员不允许 3: 成员不允许被添加 4: 其他, 5: 消息处理出错
}

func (x *ReplyCreateChat) Reset() {
	*x = ReplyCreateChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyCreateChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyCreateChat) ProtoMessage() {}

func (x *ReplyCreateChat) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyCreateChat.ProtoReflect.Descriptor instead.
func (*ReplyCreateChat) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{80}
}

func (x *ReplyCreateChat) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyCreateChat) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ReplyCreateChat) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ################################ 添加群成员 ######################
type ReqAddChatUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid     int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 用户id
	Chatid     int32         `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"` // 群id
	Userid     int32         `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"` // 被添加人id
	Fwdlimit   int32         `protobuf:"varint,4,opt,name=fwdlimit,proto3" json:"fwdlimit,omitempty"`
	FromKeyid  uint64        `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	InviteType int32         `protobuf:"varint,6,opt,name=invite_type,json=inviteType,proto3" json:"invite_type,omitempty"` //邀请类型 0-链接 1-二维码
	Debug      *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqAddChatUser) Reset() {
	*x = ReqAddChatUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqAddChatUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqAddChatUser) ProtoMessage() {}

func (x *ReqAddChatUser) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqAddChatUser.ProtoReflect.Descriptor instead.
func (*ReqAddChatUser) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{81}
}

func (x *ReqAddChatUser) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqAddChatUser) GetChatid() int32 {
	if x != nil {
		return x.Chatid
	}
	return 0
}

func (x *ReqAddChatUser) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqAddChatUser) GetFwdlimit() int32 {
	if x != nil {
		return x.Fwdlimit
	}
	return 0
}

func (x *ReqAddChatUser) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqAddChatUser) GetInviteType() int32 {
	if x != nil {
		return x.InviteType
	}
	return 0
}

func (x *ReqAddChatUser) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyAddChatUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` // 1.发起方id为0 2: 群id为0 3: 自增pts和msgid失败
}

func (x *ReplyAddChatUser) Reset() {
	*x = ReplyAddChatUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyAddChatUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyAddChatUser) ProtoMessage() {}

func (x *ReplyAddChatUser) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyAddChatUser.ProtoReflect.Descriptor instead.
func (*ReplyAddChatUser) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{82}
}

func (x *ReplyAddChatUser) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyAddChatUser) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// messages.deleteChatUser#e0611f16 chat_id:int user_id:InputUser = Updates;
// ################################ 删除群成员 ######################
type ReqDeleteChatUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 用户id
	Chatid    int32         `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"` // 群id
	Userid    int32         `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"` // 被删除人id
	FromKeyid uint64        `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDeleteChatUser) Reset() {
	*x = ReqDeleteChatUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteChatUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteChatUser) ProtoMessage() {}

func (x *ReqDeleteChatUser) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteChatUser.ProtoReflect.Descriptor instead.
func (*ReqDeleteChatUser) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{83}
}

func (x *ReqDeleteChatUser) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqDeleteChatUser) GetChatid() int32 {
	if x != nil {
		return x.Chatid
	}
	return 0
}

func (x *ReqDeleteChatUser) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqDeleteChatUser) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqDeleteChatUser) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyDeleteChatUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` // 1.发起方id为0 2: 群id为0 3: 自增pts和msgid失败
}

func (x *ReplyDeleteChatUser) Reset() {
	*x = ReplyDeleteChatUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDeleteChatUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDeleteChatUser) ProtoMessage() {}

func (x *ReplyDeleteChatUser) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDeleteChatUser.ProtoReflect.Descriptor instead.
func (*ReplyDeleteChatUser) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{84}
}

func (x *ReplyDeleteChatUser) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyDeleteChatUser) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ################################ 编辑群的管理员 ##################
type ReqEditChatAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 用户id
	Chatid    int32         `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"` // 群id
	Userid    int32         `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"` // 被删除人id
	FromKeyid uint64        `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	IsAdmin   bool          `protobuf:"varint,5,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"` // true 增加管理员 false 删除管理员
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditChatAdmin) Reset() {
	*x = ReqEditChatAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditChatAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditChatAdmin) ProtoMessage() {}

func (x *ReqEditChatAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditChatAdmin.ProtoReflect.Descriptor instead.
func (*ReqEditChatAdmin) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{85}
}

func (x *ReqEditChatAdmin) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqEditChatAdmin) GetChatid() int32 {
	if x != nil {
		return x.Chatid
	}
	return 0
}

func (x *ReqEditChatAdmin) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqEditChatAdmin) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqEditChatAdmin) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *ReqEditChatAdmin) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyEditChatAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` // 1.发起方id为0 2: 群id为0
}

func (x *ReplyEditChatAdmin) Reset() {
	*x = ReplyEditChatAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyEditChatAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyEditChatAdmin) ProtoMessage() {}

func (x *ReplyEditChatAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyEditChatAdmin.ProtoReflect.Descriptor instead.
func (*ReplyEditChatAdmin) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{86}
}

func (x *ReplyEditChatAdmin) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ReplyEditChatAdmin) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ################################ 编辑群名字 ######################
type ReqEditChatTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 用户id
	Chatid    int32         `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Title     string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	FromKeyid uint64        `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditChatTitle) Reset() {
	*x = ReqEditChatTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditChatTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditChatTitle) ProtoMessage() {}

func (x *ReqEditChatTitle) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditChatTitle.ProtoReflect.Descriptor instead.
func (*ReqEditChatTitle) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{87}
}

func (x *ReqEditChatTitle) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqEditChatTitle) GetChatid() int32 {
	if x != nil {
		return x.Chatid
	}
	return 0
}

func (x *ReqEditChatTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ReqEditChatTitle) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqEditChatTitle) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyEditChatTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"` //1. 群不存在 2. 编辑失败
}

func (x *ReplyEditChatTitle) Reset() {
	*x = ReplyEditChatTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyEditChatTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyEditChatTitle) ProtoMessage() {}

func (x *ReplyEditChatTitle) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyEditChatTitle.ProtoReflect.Descriptor instead.
func (*ReplyEditChatTitle) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{88}
}

func (x *ReplyEditChatTitle) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyEditChatTitle) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ############################### 获取所有群id ###################
// 获取所有群 (除去部分)
type ReqGetAllChats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetAllChats) Reset() {
	*x = ReqGetAllChats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetAllChats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetAllChats) ProtoMessage() {}

func (x *ReqGetAllChats) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetAllChats.ProtoReflect.Descriptor instead.
func (*ReqGetAllChats) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{89}
}

func (x *ReqGetAllChats) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqGetAllChats) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetAllChats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chats []int32 `protobuf:"varint,1,rep,packed,name=chats,proto3" json:"chats,omitempty"`
	Error int32   `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReplyGetAllChats) Reset() {
	*x = ReplyGetAllChats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetAllChats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetAllChats) ProtoMessage() {}

func (x *ReplyGetAllChats) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetAllChats.ProtoReflect.Descriptor instead.
func (*ReplyGetAllChats) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{90}
}

func (x *ReplyGetAllChats) GetChats() []int32 {
	if x != nil {
		return x.Chats
	}
	return nil
}

func (x *ReplyGetAllChats) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ############################### 获取群的完整信息 ################
type ReqGetFullChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Chatid int32         `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetFullChat) Reset() {
	*x = ReqGetFullChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetFullChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetFullChat) ProtoMessage() {}

func (x *ReqGetFullChat) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetFullChat.ProtoReflect.Descriptor instead.
func (*ReqGetFullChat) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{91}
}

func (x *ReqGetFullChat) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqGetFullChat) GetChatid() int32 {
	if x != nil {
		return x.Chatid
	}
	return 0
}

func (x *ReqGetFullChat) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetFullChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReplyGetFullChat) Reset() {
	*x = ReplyGetFullChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetFullChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetFullChat) ProtoMessage() {}

func (x *ReplyGetFullChat) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetFullChat.ProtoReflect.Descriptor instead.
func (*ReplyGetFullChat) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{92}
}

func (x *ReplyGetFullChat) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyGetFullChat) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ############################### 编辑群头像 #######################
type ReqEditChatPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 编辑方id
	FromKeyid uint64        `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Chatid    int32         `protobuf:"varint,3,opt,name=chatid,proto3" json:"chatid,omitempty"` // 群id
	Photo     []byte        `protobuf:"bytes,4,opt,name=photo,proto3" json:"photo,omitempty"`    // 图片
	Debug     *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditChatPhoto) Reset() {
	*x = ReqEditChatPhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditChatPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditChatPhoto) ProtoMessage() {}

func (x *ReqEditChatPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditChatPhoto.ProtoReflect.Descriptor instead.
func (*ReqEditChatPhoto) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{93}
}

func (x *ReqEditChatPhoto) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqEditChatPhoto) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqEditChatPhoto) GetChatid() int32 {
	if x != nil {
		return x.Chatid
	}
	return 0
}

func (x *ReqEditChatPhoto) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *ReqEditChatPhoto) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyEditChatPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,6,opt,name=error,proto3" json:"error,omitempty"` //1. t图片处理失败 2.存储失败 3.发送失败
}

func (x *ReplyEditChatPhoto) Reset() {
	*x = ReplyEditChatPhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyEditChatPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyEditChatPhoto) ProtoMessage() {}

func (x *ReplyEditChatPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyEditChatPhoto.ProtoReflect.Descriptor instead.
func (*ReplyEditChatPhoto) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{94}
}

func (x *ReplyEditChatPhoto) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyEditChatPhoto) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ################################ 升级超级群 #######################
type ReqMigrateChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid int32 `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 邀请者id
	Chatid int32 `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"` //等待升级的普通群ID
	//    int32 channelid = 3; //升级后的超级群ID
	//    string title = 4; // 群标题
	//    repeated int32 members = 5; //现有用户
	//    string Phone = 6; //电话
	Fromkeyid uint64 `protobuf:"varint,3,opt,name=fromkeyid,proto3" json:"fromkeyid,omitempty"` //邀请者的KEYID
	//    bool isBroadCast = 8; //超级群还是频道
	Debug *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqMigrateChat) Reset() {
	*x = ReqMigrateChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqMigrateChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqMigrateChat) ProtoMessage() {}

func (x *ReqMigrateChat) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqMigrateChat.ProtoReflect.Descriptor instead.
func (*ReqMigrateChat) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{95}
}

func (x *ReqMigrateChat) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqMigrateChat) GetChatid() int32 {
	if x != nil {
		return x.Chatid
	}
	return 0
}

func (x *ReqMigrateChat) GetFromkeyid() uint64 {
	if x != nil {
		return x.Fromkeyid
	}
	return 0
}

func (x *ReqMigrateChat) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyMigrateChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//    int32 msgid = 1; // 消息id
	//    int64 randomid = 2; // 消息随机id
	//    int32 date = 3; // 消息时间
	//    int32 pts = 4; // 消息pts
	//    int32 channelmsgid = 5; //频道的消息ID
	//    int32 channelpts = 6; //频道的PTS
	Result []byte `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	Error  int32  `protobuf:"varint,8,opt,name=error,proto3" json:"error,omitempty"`  // 1. 普通群处理失败 2. 超级群处理失败 3. 其他错误
}

func (x *ReplyMigrateChat) Reset() {
	*x = ReplyMigrateChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyMigrateChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyMigrateChat) ProtoMessage() {}

func (x *ReplyMigrateChat) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyMigrateChat.ProtoReflect.Descriptor instead.
func (*ReplyMigrateChat) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{96}
}

func (x *ReplyMigrateChat) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyMigrateChat) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ############################### 读取历史 #########################
type ReqReadHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selfid    int32         `protobuf:"varint,1,opt,name=selfid,proto3" json:"selfid,omitempty"`                        //自己的ID
	Peer      []byte        `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`                             //对方 user, chat, channel
	MaxId     int32         `protobuf:"varint,3,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`             // 消息ID
	FromKeyid uint64        `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"` //自己的KEYID
	Debug     *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`                           //debug
}

func (x *ReqReadHistory) Reset() {
	*x = ReqReadHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqReadHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqReadHistory) ProtoMessage() {}

func (x *ReqReadHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqReadHistory.ProtoReflect.Descriptor instead.
func (*ReqReadHistory) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{97}
}

func (x *ReqReadHistory) GetSelfid() int32 {
	if x != nil {
		return x.Selfid
	}
	return 0
}

func (x *ReqReadHistory) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ReqReadHistory) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *ReqReadHistory) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqReadHistory) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyReadHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pts   int32 `protobuf:"varint,1,opt,name=pts,proto3" json:"pts,omitempty"`                  //返回的PTS
	MaxId int32 `protobuf:"varint,2,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"` //返回的最新消息ID
	Error int32 `protobuf:"varint,3,opt,name=error,proto3" json:"error,omitempty"`              // 1.获取数据失败 2.更新失败
}

func (x *ReplyReadHistory) Reset() {
	*x = ReplyReadHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyReadHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyReadHistory) ProtoMessage() {}

func (x *ReplyReadHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyReadHistory.ProtoReflect.Descriptor instead.
func (*ReplyReadHistory) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{98}
}

func (x *ReplyReadHistory) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReplyReadHistory) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *ReplyReadHistory) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ############################## 更新双勾 #########################
type ReqUpdateReadOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId   int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`       // 自己id
	FromId   int32         `protobuf:"varint,2,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`       // 发起更新请求方id
	PeerType int32         `protobuf:"varint,3,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"` // 类型
	Debug    *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqUpdateReadOut) Reset() {
	*x = ReqUpdateReadOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateReadOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateReadOut) ProtoMessage() {}

func (x *ReqUpdateReadOut) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateReadOut.ProtoReflect.Descriptor instead.
func (*ReqUpdateReadOut) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{99}
}

func (x *ReqUpdateReadOut) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *ReqUpdateReadOut) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqUpdateReadOut) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *ReqUpdateReadOut) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUpdateReadOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Maxid int32 `protobuf:"varint,1,opt,name=maxid,proto3" json:"maxid,omitempty"`
	Pts   int32 `protobuf:"varint,2,opt,name=pts,proto3" json:"pts,omitempty"`
	Error int32 `protobuf:"varint,3,opt,name=error,proto3" json:"error,omitempty"` // 1. 获取失败 2,更新失败
}

func (x *ReplyUpdateReadOut) Reset() {
	*x = ReplyUpdateReadOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUpdateReadOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUpdateReadOut) ProtoMessage() {}

func (x *ReplyUpdateReadOut) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUpdateReadOut.ProtoReflect.Descriptor instead.
func (*ReplyUpdateReadOut) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{100}
}

func (x *ReplyUpdateReadOut) GetMaxid() int32 {
	if x != nil {
		return x.Maxid
	}
	return 0
}

func (x *ReplyUpdateReadOut) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReplyUpdateReadOut) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ############################# pts 矫正 ##########################
type ReqDiffByPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid        int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	FromKeyid     uint64        `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Pts           int32         `protobuf:"varint,3,opt,name=pts,proto3" json:"pts,omitempty"`
	Flags         int32         `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
	PtsTotalLimit int32         `protobuf:"varint,5,opt,name=Pts_total_limit,json=PtsTotalLimit,proto3" json:"Pts_total_limit,omitempty"`
	Date          int32         `protobuf:"varint,6,opt,name=Date,proto3" json:"Date,omitempty"`
	Qts           int32         `protobuf:"varint,7,opt,name=Qts,proto3" json:"Qts,omitempty"`
	Debug         *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDiffByPts) Reset() {
	*x = ReqDiffByPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDiffByPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDiffByPts) ProtoMessage() {}

func (x *ReqDiffByPts) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDiffByPts.ProtoReflect.Descriptor instead.
func (*ReqDiffByPts) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{101}
}

func (x *ReqDiffByPts) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqDiffByPts) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqDiffByPts) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReqDiffByPts) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqDiffByPts) GetPtsTotalLimit() int32 {
	if x != nil {
		return x.PtsTotalLimit
	}
	return 0
}

func (x *ReqDiffByPts) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ReqDiffByPts) GetQts() int32 {
	if x != nil {
		return x.Qts
	}
	return 0
}

func (x *ReqDiffByPts) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyDiffByPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error   int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`     // 1. 获取普通历史失败 2. 获取其他特殊操作失败 3. 获取超级群失败 4. 获取加密聊天数据失败 5.服务器出错
	Usetime int32  `protobuf:"varint,3,opt,name=usetime,proto3" json:"usetime,omitempty"` // use time
}

func (x *ReplyDiffByPts) Reset() {
	*x = ReplyDiffByPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDiffByPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDiffByPts) ProtoMessage() {}

func (x *ReplyDiffByPts) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDiffByPts.ProtoReflect.Descriptor instead.
func (*ReplyDiffByPts) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{102}
}

func (x *ReplyDiffByPts) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyDiffByPts) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *ReplyDiffByPts) GetUsetime() int32 {
	if x != nil {
		return x.Usetime
	}
	return 0
}

// ############################## 删除历史 ##########################
type ReqDeleteHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	FromKeyid uint64        `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Flags     int32         `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	JustClear bool          `protobuf:"varint,4,opt,name=just_clear,json=justClear,proto3" json:"just_clear,omitempty"`
	Peer      []byte        `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	MaxId     int32         `protobuf:"varint,6,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDeleteHistory) Reset() {
	*x = ReqDeleteHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteHistory) ProtoMessage() {}

func (x *ReqDeleteHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteHistory.ProtoReflect.Descriptor instead.
func (*ReqDeleteHistory) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{103}
}

func (x *ReqDeleteHistory) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqDeleteHistory) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqDeleteHistory) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqDeleteHistory) GetJustClear() bool {
	if x != nil {
		return x.JustClear
	}
	return false
}

func (x *ReqDeleteHistory) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ReqDeleteHistory) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *ReqDeleteHistory) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyDeleteHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pts      int32 `protobuf:"varint,1,opt,name=pts,proto3" json:"pts,omitempty"`
	PtsCount int32 `protobuf:"varint,2,opt,name=pts_count,json=ptsCount,proto3" json:"pts_count,omitempty"`
	Offset   int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Error    int32 `protobuf:"varint,4,opt,name=error,proto3" json:"error,omitempty"` // 1.获取历史失败 2.删除历史失败 3.其他
}

func (x *ReplyDeleteHistory) Reset() {
	*x = ReplyDeleteHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDeleteHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDeleteHistory) ProtoMessage() {}

func (x *ReplyDeleteHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDeleteHistory.ProtoReflect.Descriptor instead.
func (*ReplyDeleteHistory) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{104}
}

func (x *ReplyDeleteHistory) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReplyDeleteHistory) GetPtsCount() int32 {
	if x != nil {
		return x.PtsCount
	}
	return 0
}

func (x *ReplyDeleteHistory) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ReplyDeleteHistory) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ############################# 删除消息 ####################
type ReqDeleteMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 删除方id
	FromKeyid uint64        `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Flags     int32         `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`   //标识
	Revoke    bool          `protobuf:"varint,4,opt,name=revoke,proto3" json:"revoke,omitempty"` // shifou wei duifang shanchu
	Id        []int32       `protobuf:"varint,5,rep,packed,name=id,proto3" json:"id,omitempty"`
	Channelid int32         `protobuf:"varint,6,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDeleteMessages) Reset() {
	*x = ReqDeleteMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteMessages) ProtoMessage() {}

func (x *ReqDeleteMessages) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteMessages.ProtoReflect.Descriptor instead.
func (*ReqDeleteMessages) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{105}
}

func (x *ReqDeleteMessages) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqDeleteMessages) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqDeleteMessages) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqDeleteMessages) GetRevoke() bool {
	if x != nil {
		return x.Revoke
	}
	return false
}

func (x *ReqDeleteMessages) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReqDeleteMessages) GetChannelid() int32 {
	if x != nil {
		return x.Channelid
	}
	return 0
}

func (x *ReqDeleteMessages) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyDeleteMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` // 1.获取失败 2.删除失败
}

func (x *ReplyDeleteMessages) Reset() {
	*x = ReplyDeleteMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDeleteMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDeleteMessages) ProtoMessage() {}

func (x *ReplyDeleteMessages) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDeleteMessages.ProtoReflect.Descriptor instead.
func (*ReplyDeleteMessages) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{106}
}

func (x *ReplyDeleteMessages) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyDeleteMessages) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ############################ 编辑消息 ######################
type ReqEditMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormId      int32         `protobuf:"varint,1,opt,name=form_id,json=formId,proto3" json:"form_id,omitempty"` // 编辑方id
	FromKeyid   uint64        `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Flags       int32         `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`                                  // 标识
	NoWebpage   bool          `protobuf:"varint,4,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"`         // 是否是网页
	StopGeoLive bool          `protobuf:"varint,5,opt,name=Stop_geo_live,json=StopGeoLive,proto3" json:"Stop_geo_live,omitempty"` // stop update gep live
	Peer        []byte        `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`                                     // 框
	Id          int32         `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`                                        // id
	Message     string        `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`                               // 消息内容
	ReplyMarkup []byte        `protobuf:"bytes,9,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities    [][]byte      `protobuf:"bytes,10,rep,name=entities,proto3" json:"entities,omitempty"`                 // 高亮
	GeoPoint    []byte        `protobuf:"bytes,11,opt,name=Geo_point,json=GeoPoint,proto3" json:"Geo_point,omitempty"` // live GetPoint
	ViaBotId    int32         `protobuf:"varint,12,opt,name=ViaBotId,proto3" json:"ViaBotId,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,13,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditMessage) Reset() {
	*x = ReqEditMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditMessage) ProtoMessage() {}

func (x *ReqEditMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditMessage.ProtoReflect.Descriptor instead.
func (*ReqEditMessage) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{107}
}

func (x *ReqEditMessage) GetFormId() int32 {
	if x != nil {
		return x.FormId
	}
	return 0
}

func (x *ReqEditMessage) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqEditMessage) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqEditMessage) GetNoWebpage() bool {
	if x != nil {
		return x.NoWebpage
	}
	return false
}

func (x *ReqEditMessage) GetStopGeoLive() bool {
	if x != nil {
		return x.StopGeoLive
	}
	return false
}

func (x *ReqEditMessage) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ReqEditMessage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReqEditMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReqEditMessage) GetReplyMarkup() []byte {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *ReqEditMessage) GetEntities() [][]byte {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *ReqEditMessage) GetGeoPoint() []byte {
	if x != nil {
		return x.GeoPoint
	}
	return nil
}

func (x *ReqEditMessage) GetViaBotId() int32 {
	if x != nil {
		return x.ViaBotId
	}
	return 0
}

func (x *ReqEditMessage) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyEditMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateEditMessage []byte `protobuf:"bytes,1,opt,name=UpdateEditMessage,proto3" json:"UpdateEditMessage,omitempty"`
	Error             int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` // 1.获取消息失败 2.编辑失败
}

func (x *ReplyEditMessage) Reset() {
	*x = ReplyEditMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyEditMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyEditMessage) ProtoMessage() {}

func (x *ReplyEditMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyEditMessage.ProtoReflect.Descriptor instead.
func (*ReplyEditMessage) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{108}
}

func (x *ReplyEditMessage) GetUpdateEditMessage() []byte {
	if x != nil {
		return x.UpdateEditMessage
	}
	return nil
}

func (x *ReplyEditMessage) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ############################ 获取对话框特殊信息 ###################
type ReqNotifySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Peer   []byte        `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"` // 框
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqNotifySettings) Reset() {
	*x = ReqNotifySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqNotifySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqNotifySettings) ProtoMessage() {}

func (x *ReqNotifySettings) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqNotifySettings.ProtoReflect.Descriptor instead.
func (*ReqNotifySettings) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{109}
}

func (x *ReqNotifySettings) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqNotifySettings) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ReqNotifySettings) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyNotifySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags        int32  `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	ShowPreviews bool   `protobuf:"varint,2,opt,name=show_previews,json=showPreviews,proto3" json:"show_previews,omitempty"`
	Silent       bool   `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	MuteUntil    int32  `protobuf:"varint,4,opt,name=mute_until,json=muteUntil,proto3" json:"mute_until,omitempty"`
	Sound        string `protobuf:"bytes,5,opt,name=sound,proto3" json:"sound,omitempty"`
	Error        int32  `protobuf:"varint,6,opt,name=error,proto3" json:"error,omitempty"` // 1. 框不存在 2. 获取失败
}

func (x *ReplyNotifySettings) Reset() {
	*x = ReplyNotifySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyNotifySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyNotifySettings) ProtoMessage() {}

func (x *ReplyNotifySettings) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyNotifySettings.ProtoReflect.Descriptor instead.
func (*ReplyNotifySettings) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{110}
}

func (x *ReplyNotifySettings) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReplyNotifySettings) GetShowPreviews() bool {
	if x != nil {
		return x.ShowPreviews
	}
	return false
}

func (x *ReplyNotifySettings) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *ReplyNotifySettings) GetMuteUntil() int32 {
	if x != nil {
		return x.MuteUntil
	}
	return 0
}

func (x *ReplyNotifySettings) GetSound() string {
	if x != nil {
		return x.Sound
	}
	return ""
}

func (x *ReplyNotifySettings) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ########################### 更新特殊对话框设置信息 #################
type ReqUpdateNotifySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid   int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Peer     []byte        `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`         // 更新对象
	Settings []byte        `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"` // 设置信息
	Debug    *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqUpdateNotifySettings) Reset() {
	*x = ReqUpdateNotifySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateNotifySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateNotifySettings) ProtoMessage() {}

func (x *ReqUpdateNotifySettings) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateNotifySettings.ProtoReflect.Descriptor instead.
func (*ReqUpdateNotifySettings) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{111}
}

func (x *ReqUpdateNotifySettings) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqUpdateNotifySettings) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ReqUpdateNotifySettings) GetSettings() []byte {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ReqUpdateNotifySettings) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUpdateNotifySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReplyUpdateNotifySettings) Reset() {
	*x = ReplyUpdateNotifySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUpdateNotifySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUpdateNotifySettings) ProtoMessage() {}

func (x *ReplyUpdateNotifySettings) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUpdateNotifySettings.ProtoReflect.Descriptor instead.
func (*ReplyUpdateNotifySettings) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{112}
}

func (x *ReplyUpdateNotifySettings) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyUpdateNotifySettings) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ############################ 获取消息编辑的数据 ###################
type ReqMessageEditData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Layer  int32         `protobuf:"varint,1,opt,name=layer,proto3" json:"layer,omitempty"`
	Fromid int32         `protobuf:"varint,2,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Peer   []byte        `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id     int32         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqMessageEditData) Reset() {
	*x = ReqMessageEditData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqMessageEditData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqMessageEditData) ProtoMessage() {}

func (x *ReqMessageEditData) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqMessageEditData.ProtoReflect.Descriptor instead.
func (*ReqMessageEditData) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{113}
}

func (x *ReqMessageEditData) GetLayer() int32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *ReqMessageEditData) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqMessageEditData) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ReqMessageEditData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReqMessageEditData) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyMessageEditData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags   int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Caption bool  `protobuf:"varint,2,opt,name=caption,proto3" json:"caption,omitempty"`
	Error   int32 `protobuf:"varint,3,opt,name=error,proto3" json:"error,omitempty"` //1. 编辑失败
}

func (x *ReplyMessageEditData) Reset() {
	*x = ReplyMessageEditData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyMessageEditData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyMessageEditData) ProtoMessage() {}

func (x *ReplyMessageEditData) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyMessageEditData.ProtoReflect.Descriptor instead.
func (*ReplyMessageEditData) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{114}
}

func (x *ReplyMessageEditData) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReplyMessageEditData) GetCaption() bool {
	if x != nil {
		return x.Caption
	}
	return false
}

func (x *ReplyMessageEditData) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ############################ 存储草稿 ###################
type ReqSaveMsgDraft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selfid       int32         `protobuf:"varint,1,opt,name=selfid,proto3" json:"selfid,omitempty"` // 自己id
	FromKeyid    int64         `protobuf:"varint,2,opt,name=fromKeyid,proto3" json:"fromKeyid,omitempty"`
	Layer        int32         `protobuf:"varint,3,opt,name=layer,proto3" json:"layer,omitempty"` // 层
	Flags        int32         `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
	NoWebpage    bool          `protobuf:"varint,5,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"` // 是否是网页
	ReplyToMsgId int32         `protobuf:"varint,6,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Peer         []byte        `protobuf:"bytes,7,opt,name=peer,proto3" json:"peer,omitempty"`
	Message      string        `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`   // 消息内容
	Entities     [][]byte      `protobuf:"bytes,9,rep,name=entities,proto3" json:"entities,omitempty"` // 高亮
	Debug        *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqSaveMsgDraft) Reset() {
	*x = ReqSaveMsgDraft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSaveMsgDraft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSaveMsgDraft) ProtoMessage() {}

func (x *ReqSaveMsgDraft) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSaveMsgDraft.ProtoReflect.Descriptor instead.
func (*ReqSaveMsgDraft) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{115}
}

func (x *ReqSaveMsgDraft) GetSelfid() int32 {
	if x != nil {
		return x.Selfid
	}
	return 0
}

func (x *ReqSaveMsgDraft) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqSaveMsgDraft) GetLayer() int32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *ReqSaveMsgDraft) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqSaveMsgDraft) GetNoWebpage() bool {
	if x != nil {
		return x.NoWebpage
	}
	return false
}

func (x *ReqSaveMsgDraft) GetReplyToMsgId() int32 {
	if x != nil {
		return x.ReplyToMsgId
	}
	return 0
}

func (x *ReqSaveMsgDraft) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ReqSaveMsgDraft) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReqSaveMsgDraft) GetEntities() [][]byte {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *ReqSaveMsgDraft) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplySaveMsgDraft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply bool  `protobuf:"varint,1,opt,name=reply,proto3" json:"reply,omitempty"`
	Error int32 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` // 1.存储失败 2.同步失败
}

func (x *ReplySaveMsgDraft) Reset() {
	*x = ReplySaveMsgDraft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplySaveMsgDraft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplySaveMsgDraft) ProtoMessage() {}

func (x *ReplySaveMsgDraft) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplySaveMsgDraft.ProtoReflect.Descriptor instead.
func (*ReplySaveMsgDraft) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{116}
}

func (x *ReplySaveMsgDraft) GetReply() bool {
	if x != nil {
		return x.Reply
	}
	return false
}

func (x *ReplySaveMsgDraft) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type ReqGetUserUnRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32         `protobuf:"varint,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Keyid  int64         `protobuf:"varint,2,opt,name=keyid,proto3" json:"keyid,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetUserUnRead) Reset() {
	*x = ReqGetUserUnRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUserUnRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUserUnRead) ProtoMessage() {}

func (x *ReqGetUserUnRead) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUserUnRead.ProtoReflect.Descriptor instead.
func (*ReqGetUserUnRead) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{117}
}

func (x *ReqGetUserUnRead) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqGetUserUnRead) GetKeyid() int64 {
	if x != nil {
		return x.Keyid
	}
	return 0
}

func (x *ReqGetUserUnRead) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUserUnread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unread int32 `protobuf:"varint,1,opt,name=unread,proto3" json:"unread,omitempty"`
	Error  int32 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` // 1.获取总未读数失败 2. 其他
}

func (x *ReplyUserUnread) Reset() {
	*x = ReplyUserUnread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUserUnread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUserUnread) ProtoMessage() {}

func (x *ReplyUserUnread) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUserUnread.ProtoReflect.Descriptor instead.
func (*ReplyUserUnread) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{118}
}

func (x *ReplyUserUnread) GetUnread() int32 {
	if x != nil {
		return x.Unread
	}
	return 0
}

func (x *ReplyUserUnread) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// ###################################################### channel ####################################################################
type InputChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                     int32                     `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	InputChannelEmpty        *InputChannelEmpty        `protobuf:"bytes,2,opt,name=inputChannelEmpty,proto3" json:"inputChannelEmpty,omitempty"`
	InputChannelinputChannel *InputChannelinputChannel `protobuf:"bytes,3,opt,name=inputChannelinputChannel,proto3" json:"inputChannelinputChannel,omitempty"`
}

func (x *InputChannel) Reset() {
	*x = InputChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputChannel) ProtoMessage() {}

func (x *InputChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputChannel.ProtoReflect.Descriptor instead.
func (*InputChannel) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{119}
}

func (x *InputChannel) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *InputChannel) GetInputChannelEmpty() *InputChannelEmpty {
	if x != nil {
		return x.InputChannelEmpty
	}
	return nil
}

func (x *InputChannel) GetInputChannelinputChannel() *InputChannelinputChannel {
	if x != nil {
		return x.InputChannelinputChannel
	}
	return nil
}

type InputChannelEmpty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InputChannelEmpty) Reset() {
	*x = InputChannelEmpty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputChannelEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputChannelEmpty) ProtoMessage() {}

func (x *InputChannelEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputChannelEmpty.ProtoReflect.Descriptor instead.
func (*InputChannelEmpty) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{120}
}

type InputChannelinputChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (x *InputChannelinputChannel) Reset() {
	*x = InputChannelinputChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputChannelinputChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputChannelinputChannel) ProtoMessage() {}

func (x *InputChannelinputChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputChannelinputChannel.ProtoReflect.Descriptor instead.
func (*InputChannelinputChannel) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{121}
}

func (x *InputChannelinputChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *InputChannelinputChannel) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

type MessageActionEditChannelPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Date       int32  `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	Pothosize  []byte `protobuf:"bytes,4,opt,name=pothosize,proto3" json:"pothosize,omitempty"`
}

func (x *MessageActionEditChannelPhoto) Reset() {
	*x = MessageActionEditChannelPhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageActionEditChannelPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageActionEditChannelPhoto) ProtoMessage() {}

func (x *MessageActionEditChannelPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageActionEditChannelPhoto.ProtoReflect.Descriptor instead.
func (*MessageActionEditChannelPhoto) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{122}
}

func (x *MessageActionEditChannelPhoto) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageActionEditChannelPhoto) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *MessageActionEditChannelPhoto) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *MessageActionEditChannelPhoto) GetPothosize() []byte {
	if x != nil {
		return x.Pothosize
	}
	return nil
}

type MessageActionEditChannelAbout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	About string `protobuf:"bytes,1,opt,name=about,proto3" json:"about,omitempty"`
}

func (x *MessageActionEditChannelAbout) Reset() {
	*x = MessageActionEditChannelAbout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageActionEditChannelAbout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageActionEditChannelAbout) ProtoMessage() {}

func (x *MessageActionEditChannelAbout) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageActionEditChannelAbout.ProtoReflect.Descriptor instead.
func (*MessageActionEditChannelAbout) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{123}
}

func (x *MessageActionEditChannelAbout) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

type MessageActionDeleteChannelMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MessageActionDeleteChannelMessages) Reset() {
	*x = MessageActionDeleteChannelMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageActionDeleteChannelMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageActionDeleteChannelMessages) ProtoMessage() {}

func (x *MessageActionDeleteChannelMessages) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageActionDeleteChannelMessages.ProtoReflect.Descriptor instead.
func (*MessageActionDeleteChannelMessages) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{124}
}

func (x *MessageActionDeleteChannelMessages) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type MessageActionDeleteChannelHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId []byte `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *MessageActionDeleteChannelHistory) Reset() {
	*x = MessageActionDeleteChannelHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageActionDeleteChannelHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageActionDeleteChannelHistory) ProtoMessage() {}

func (x *MessageActionDeleteChannelHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageActionDeleteChannelHistory.ProtoReflect.Descriptor instead.
func (*MessageActionDeleteChannelHistory) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{125}
}

func (x *MessageActionDeleteChannelHistory) GetUserId() []byte {
	if x != nil {
		return x.UserId
	}
	return nil
}

type MessageActionUpdatePinnedChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MessageActionUpdatePinnedChannelMessage) Reset() {
	*x = MessageActionUpdatePinnedChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageActionUpdatePinnedChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageActionUpdatePinnedChannelMessage) ProtoMessage() {}

func (x *MessageActionUpdatePinnedChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageActionUpdatePinnedChannelMessage.ProtoReflect.Descriptor instead.
func (*MessageActionUpdatePinnedChannelMessage) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{126}
}

type MessageActionCheckChannelUsername struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *MessageActionCheckChannelUsername) Reset() {
	*x = MessageActionCheckChannelUsername{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageActionCheckChannelUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageActionCheckChannelUsername) ProtoMessage() {}

func (x *MessageActionCheckChannelUsername) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageActionCheckChannelUsername.ProtoReflect.Descriptor instead.
func (*MessageActionCheckChannelUsername) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{127}
}

func (x *MessageActionCheckChannelUsername) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type MessageActionUpdateChannelUsername struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *MessageActionUpdateChannelUsername) Reset() {
	*x = MessageActionUpdateChannelUsername{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageActionUpdateChannelUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageActionUpdateChannelUsername) ProtoMessage() {}

func (x *MessageActionUpdateChannelUsername) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageActionUpdateChannelUsername.ProtoReflect.Descriptor instead.
func (*MessageActionUpdateChannelUsername) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{128}
}

func (x *MessageActionUpdateChannelUsername) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type MessageActionExportChannelInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MessageActionExportChannelInvite) Reset() {
	*x = MessageActionExportChannelInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageActionExportChannelInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageActionExportChannelInvite) ProtoMessage() {}

func (x *MessageActionExportChannelInvite) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageActionExportChannelInvite.ProtoReflect.Descriptor instead.
func (*MessageActionExportChannelInvite) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{129}
}

type MessageActionDeleteChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MessageActionDeleteChannel) Reset() {
	*x = MessageActionDeleteChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageActionDeleteChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageActionDeleteChannel) ProtoMessage() {}

func (x *MessageActionDeleteChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageActionDeleteChannel.ProtoReflect.Descriptor instead.
func (*MessageActionDeleteChannel) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{130}
}

type MessageActionChannelCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *MessageActionChannelCreate) Reset() {
	*x = MessageActionChannelCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageActionChannelCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageActionChannelCreate) ProtoMessage() {}

func (x *MessageActionChannelCreate) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageActionChannelCreate.ProtoReflect.Descriptor instead.
func (*MessageActionChannelCreate) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{131}
}

func (x *MessageActionChannelCreate) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type MessageActionAddChannelUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId []int32 `protobuf:"varint,1,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *MessageActionAddChannelUser) Reset() {
	*x = MessageActionAddChannelUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageActionAddChannelUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageActionAddChannelUser) ProtoMessage() {}

func (x *MessageActionAddChannelUser) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageActionAddChannelUser.ProtoReflect.Descriptor instead.
func (*MessageActionAddChannelUser) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{132}
}

func (x *MessageActionAddChannelUser) GetUserId() []int32 {
	if x != nil {
		return x.UserId
	}
	return nil
}

type MessageActionDeleteChannelUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *MessageActionDeleteChannelUser) Reset() {
	*x = MessageActionDeleteChannelUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageActionDeleteChannelUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageActionDeleteChannelUser) ProtoMessage() {}

func (x *MessageActionDeleteChannelUser) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageActionDeleteChannelUser.ProtoReflect.Descriptor instead.
func (*MessageActionDeleteChannelUser) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{133}
}

func (x *MessageActionDeleteChannelUser) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type MessageActionUserLeaveChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *MessageActionUserLeaveChannel) Reset() {
	*x = MessageActionUserLeaveChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageActionUserLeaveChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageActionUserLeaveChannel) ProtoMessage() {}

func (x *MessageActionUserLeaveChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageActionUserLeaveChannel.ProtoReflect.Descriptor instead.
func (*MessageActionUserLeaveChannel) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{134}
}

func (x *MessageActionUserLeaveChannel) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type MessageActionEditChannelTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *MessageActionEditChannelTitle) Reset() {
	*x = MessageActionEditChannelTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageActionEditChannelTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageActionEditChannelTitle) ProtoMessage() {}

func (x *MessageActionEditChannelTitle) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageActionEditChannelTitle.ProtoReflect.Descriptor instead.
func (*MessageActionEditChannelTitle) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{135}
}

func (x *MessageActionEditChannelTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type UserStatusOnline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expires int32 `protobuf:"varint,1,opt,name=expires,proto3" json:"expires,omitempty"`
}

func (x *UserStatusOnline) Reset() {
	*x = UserStatusOnline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatusOnline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatusOnline) ProtoMessage() {}

func (x *UserStatusOnline) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatusOnline.ProtoReflect.Descriptor instead.
func (*UserStatusOnline) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{136}
}

func (x *UserStatusOnline) GetExpires() int32 {
	if x != nil {
		return x.Expires
	}
	return 0
}

type UserStatusOffline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WasOnline int32 `protobuf:"varint,1,opt,name=was_online,json=wasOnline,proto3" json:"was_online,omitempty"`
}

func (x *UserStatusOffline) Reset() {
	*x = UserStatusOffline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatusOffline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatusOffline) ProtoMessage() {}

func (x *UserStatusOffline) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatusOffline.ProtoReflect.Descriptor instead.
func (*UserStatusOffline) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{137}
}

func (x *UserStatusOffline) GetWasOnline() int32 {
	if x != nil {
		return x.WasOnline
	}
	return 0
}

type UserStatusLastMonth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastMonth int32 `protobuf:"varint,1,opt,name=lastMonth,proto3" json:"lastMonth,omitempty"`
}

func (x *UserStatusLastMonth) Reset() {
	*x = UserStatusLastMonth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatusLastMonth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatusLastMonth) ProtoMessage() {}

func (x *UserStatusLastMonth) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatusLastMonth.ProtoReflect.Descriptor instead.
func (*UserStatusLastMonth) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{138}
}

func (x *UserStatusLastMonth) GetLastMonth() int32 {
	if x != nil {
		return x.LastMonth
	}
	return 0
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      int32                `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Online    *UserStatusOnline    `protobuf:"bytes,2,opt,name=online,proto3" json:"online,omitempty"`
	Offline   *UserStatusOffline   `protobuf:"bytes,3,opt,name=offline,proto3" json:"offline,omitempty"`
	LastMonth *UserStatusLastMonth `protobuf:"bytes,4,opt,name=lastMonth,proto3" json:"lastMonth,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{139}
}

func (x *Status) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Status) GetOnline() *UserStatusOnline {
	if x != nil {
		return x.Online
	}
	return nil
}

func (x *Status) GetOffline() *UserStatusOffline {
	if x != nil {
		return x.Offline
	}
	return nil
}

func (x *Status) GetLastMonth() *UserStatusLastMonth {
	if x != nil {
		return x.LastMonth
	}
	return nil
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags                int32   `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Self                 bool    `protobuf:"varint,2,opt,name=self,proto3" json:"self,omitempty"`
	Contact              bool    `protobuf:"varint,3,opt,name=contact,proto3" json:"contact,omitempty"`
	MutualContact        bool    `protobuf:"varint,4,opt,name=mutual_contact,json=mutualContact,proto3" json:"mutual_contact,omitempty"`
	Deleted              bool    `protobuf:"varint,5,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Bot                  bool    `protobuf:"varint,6,opt,name=bot,proto3" json:"bot,omitempty"`
	BotChatHistory       bool    `protobuf:"varint,7,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNoChats           bool    `protobuf:"varint,8,opt,name=bot_no_chats,json=botNoChats,proto3" json:"bot_no_chats,omitempty"`
	Verified             bool    `protobuf:"varint,9,opt,name=verified,proto3" json:"verified,omitempty"`
	Restricted           bool    `protobuf:"varint,10,opt,name=restricted,proto3" json:"restricted,omitempty"`
	Min                  bool    `protobuf:"varint,11,opt,name=min,proto3" json:"min,omitempty"`
	BotInlineGeo         bool    `protobuf:"varint,12,opt,name=bot_inline_geo,json=botInlineGeo,proto3" json:"bot_inline_geo,omitempty"`
	Id                   int32   `protobuf:"varint,13,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash           int64   `protobuf:"varint,14,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Firstname            string  `protobuf:"bytes,15,opt,name=firstname,proto3" json:"firstname,omitempty"`
	Lastname             string  `protobuf:"bytes,16,opt,name=lastname,proto3" json:"lastname,omitempty"`
	Username             string  `protobuf:"bytes,17,opt,name=username,proto3" json:"username,omitempty"`
	Phone                string  `protobuf:"bytes,18,opt,name=phone,proto3" json:"phone,omitempty"`
	Photo                []byte  `protobuf:"bytes,19,opt,name=photo,proto3" json:"photo,omitempty"`
	Status               *Status `protobuf:"bytes,20,opt,name=status,proto3" json:"status,omitempty"`
	BotInfoVersion       bool    `protobuf:"varint,21,opt,name=bot_info_version,json=botInfoVersion,proto3" json:"bot_info_version,omitempty"`
	RestrictionReason    bool    `protobuf:"varint,22,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"`
	BotInlinePlaceholder bool    `protobuf:"varint,23,opt,name=bot_inline_placeholder,json=botInlinePlaceholder,proto3" json:"bot_inline_placeholder,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{140}
}

func (x *UserInfo) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *UserInfo) GetSelf() bool {
	if x != nil {
		return x.Self
	}
	return false
}

func (x *UserInfo) GetContact() bool {
	if x != nil {
		return x.Contact
	}
	return false
}

func (x *UserInfo) GetMutualContact() bool {
	if x != nil {
		return x.MutualContact
	}
	return false
}

func (x *UserInfo) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *UserInfo) GetBot() bool {
	if x != nil {
		return x.Bot
	}
	return false
}

func (x *UserInfo) GetBotChatHistory() bool {
	if x != nil {
		return x.BotChatHistory
	}
	return false
}

func (x *UserInfo) GetBotNoChats() bool {
	if x != nil {
		return x.BotNoChats
	}
	return false
}

func (x *UserInfo) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *UserInfo) GetRestricted() bool {
	if x != nil {
		return x.Restricted
	}
	return false
}

func (x *UserInfo) GetMin() bool {
	if x != nil {
		return x.Min
	}
	return false
}

func (x *UserInfo) GetBotInlineGeo() bool {
	if x != nil {
		return x.BotInlineGeo
	}
	return false
}

func (x *UserInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserInfo) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *UserInfo) GetFirstname() string {
	if x != nil {
		return x.Firstname
	}
	return ""
}

func (x *UserInfo) GetLastname() string {
	if x != nil {
		return x.Lastname
	}
	return ""
}

func (x *UserInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserInfo) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *UserInfo) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UserInfo) GetBotInfoVersion() bool {
	if x != nil {
		return x.BotInfoVersion
	}
	return false
}

func (x *UserInfo) GetRestrictionReason() bool {
	if x != nil {
		return x.RestrictionReason
	}
	return false
}

func (x *UserInfo) GetBotInlinePlaceholder() bool {
	if x != nil {
		return x.BotInlinePlaceholder
	}
	return false
}

type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags             int32  `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Creator           bool   `protobuf:"varint,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Kicked            bool   `protobuf:"varint,3,opt,name=kicked,proto3" json:"kicked,omitempty"`
	Left              bool   `protobuf:"varint,4,opt,name=left,proto3" json:"left,omitempty"`
	Editor            bool   `protobuf:"varint,5,opt,name=editor,proto3" json:"editor,omitempty"`
	Moderator         bool   `protobuf:"varint,6,opt,name=moderator,proto3" json:"moderator,omitempty"`
	Broadcast         bool   `protobuf:"varint,7,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Verified          bool   `protobuf:"varint,8,opt,name=verified,proto3" json:"verified,omitempty"`
	Megagroup         bool   `protobuf:"varint,9,opt,name=megagroup,proto3" json:"megagroup,omitempty"`
	Restricted        bool   `protobuf:"varint,10,opt,name=restricted,proto3" json:"restricted,omitempty"`
	Democracy         bool   `protobuf:"varint,11,opt,name=democracy,proto3" json:"democracy,omitempty"`
	Signatures        bool   `protobuf:"varint,12,opt,name=signatures,proto3" json:"signatures,omitempty"`
	Min               bool   `protobuf:"varint,13,opt,name=min,proto3" json:"min,omitempty"`
	Id                int32  `protobuf:"varint,14,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash        int64  `protobuf:"varint,15,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Title             string `protobuf:"bytes,16,opt,name=title,proto3" json:"title,omitempty"`
	Username          string `protobuf:"bytes,17,opt,name=username,proto3" json:"username,omitempty"`
	Photo             int32  `protobuf:"varint,18,opt,name=photo,proto3" json:"photo,omitempty"`
	Date              int32  `protobuf:"varint,19,opt,name=date,proto3" json:"date,omitempty"`
	Version           int32  `protobuf:"varint,20,opt,name=version,proto3" json:"version,omitempty"`
	RestrictionReason bool   `protobuf:"varint,21,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{141}
}

func (x *Channel) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Channel) GetCreator() bool {
	if x != nil {
		return x.Creator
	}
	return false
}

func (x *Channel) GetKicked() bool {
	if x != nil {
		return x.Kicked
	}
	return false
}

func (x *Channel) GetLeft() bool {
	if x != nil {
		return x.Left
	}
	return false
}

func (x *Channel) GetEditor() bool {
	if x != nil {
		return x.Editor
	}
	return false
}

func (x *Channel) GetModerator() bool {
	if x != nil {
		return x.Moderator
	}
	return false
}

func (x *Channel) GetBroadcast() bool {
	if x != nil {
		return x.Broadcast
	}
	return false
}

func (x *Channel) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *Channel) GetMegagroup() bool {
	if x != nil {
		return x.Megagroup
	}
	return false
}

func (x *Channel) GetRestricted() bool {
	if x != nil {
		return x.Restricted
	}
	return false
}

func (x *Channel) GetDemocracy() bool {
	if x != nil {
		return x.Democracy
	}
	return false
}

func (x *Channel) GetSignatures() bool {
	if x != nil {
		return x.Signatures
	}
	return false
}

func (x *Channel) GetMin() bool {
	if x != nil {
		return x.Min
	}
	return false
}

func (x *Channel) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Channel) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *Channel) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Channel) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Channel) GetPhoto() int32 {
	if x != nil {
		return x.Photo
	}
	return 0
}

func (x *Channel) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *Channel) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Channel) GetRestrictionReason() bool {
	if x != nil {
		return x.RestrictionReason
	}
	return false
}

type UpdateNewChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags        int32  `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Out          bool   `protobuf:"varint,2,opt,name=out,proto3" json:"out,omitempty"`
	Mentioned    bool   `protobuf:"varint,3,opt,name=mentioned,proto3" json:"mentioned,omitempty"`
	MediaUnread  bool   `protobuf:"varint,4,opt,name=media_unread,json=mediaUnread,proto3" json:"media_unread,omitempty"`
	Silent       bool   `protobuf:"varint,5,opt,name=silent,proto3" json:"silent,omitempty"`
	Post         bool   `protobuf:"varint,6,opt,name=post,proto3" json:"post,omitempty"`
	Id           int32  `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	FromId       int32  `protobuf:"varint,8,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ToId         int32  `protobuf:"varint,9,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`
	ReplyToMsgId bool   `protobuf:"varint,10,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Date         int32  `protobuf:"varint,11,opt,name=date,proto3" json:"date,omitempty"`
	Action       []byte `protobuf:"bytes,12,opt,name=action,proto3" json:"action,omitempty"`
	Pts          int32  `protobuf:"varint,13,opt,name=pts,proto3" json:"pts,omitempty"`
	PtsCount     int32  `protobuf:"varint,14,opt,name=pts_count,json=ptsCount,proto3" json:"pts_count,omitempty"`
}

func (x *UpdateNewChannelMessage) Reset() {
	*x = UpdateNewChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNewChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNewChannelMessage) ProtoMessage() {}

func (x *UpdateNewChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNewChannelMessage.ProtoReflect.Descriptor instead.
func (*UpdateNewChannelMessage) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{142}
}

func (x *UpdateNewChannelMessage) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *UpdateNewChannelMessage) GetOut() bool {
	if x != nil {
		return x.Out
	}
	return false
}

func (x *UpdateNewChannelMessage) GetMentioned() bool {
	if x != nil {
		return x.Mentioned
	}
	return false
}

func (x *UpdateNewChannelMessage) GetMediaUnread() bool {
	if x != nil {
		return x.MediaUnread
	}
	return false
}

func (x *UpdateNewChannelMessage) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *UpdateNewChannelMessage) GetPost() bool {
	if x != nil {
		return x.Post
	}
	return false
}

func (x *UpdateNewChannelMessage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateNewChannelMessage) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *UpdateNewChannelMessage) GetToId() int32 {
	if x != nil {
		return x.ToId
	}
	return 0
}

func (x *UpdateNewChannelMessage) GetReplyToMsgId() bool {
	if x != nil {
		return x.ReplyToMsgId
	}
	return false
}

func (x *UpdateNewChannelMessage) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *UpdateNewChannelMessage) GetAction() []byte {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *UpdateNewChannelMessage) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *UpdateNewChannelMessage) GetPtsCount() int32 {
	if x != nil {
		return x.PtsCount
	}
	return 0
}

// 创建channel
// channels.createChannel#f4893d7f flags:# broadcast:flags.0?true megagroup:flags.1?true title:string about:string = Updates;
type RequestChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId     int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`                                // channelid
	UserId        int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`                                      // userid
	Title         string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                         // 群标题
	About         string        `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`                                         // 描述
	FromKeyid     int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`               // 创建者的KEYID
	BroadCast     bool          `protobuf:"varint,6,opt,name=broadCast,proto3" json:"broadCast,omitempty"`                                // 是否频道
	Megagroup     bool          `protobuf:"varint,7,opt,name=megagroup,proto3" json:"megagroup,omitempty"`                                // 是否超级群
	ReplyMsgId    uint64        `protobuf:"varint,8,opt,name=replyMsgId,proto3" json:"replyMsgId,omitempty"`                              // infoserver给的ID
	BanAddContact bool          `protobuf:"varint,9,opt,name=ban_add_contact,json=banAddContact,proto3" json:"ban_add_contact,omitempty"` // @ add by qingsong at 2019.12.25 for ban channel member add contact.
	Debug         *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *RequestChannel) Reset() {
	*x = RequestChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestChannel) ProtoMessage() {}

func (x *RequestChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestChannel.ProtoReflect.Descriptor instead.
func (*RequestChannel) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{143}
}

func (x *RequestChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *RequestChannel) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RequestChannel) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RequestChannel) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *RequestChannel) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *RequestChannel) GetBroadCast() bool {
	if x != nil {
		return x.BroadCast
	}
	return false
}

func (x *RequestChannel) GetMegagroup() bool {
	if x != nil {
		return x.Megagroup
	}
	return false
}

func (x *RequestChannel) GetReplyMsgId() uint64 {
	if x != nil {
		return x.ReplyMsgId
	}
	return 0
}

func (x *RequestChannel) GetBanAddContact() bool {
	if x != nil {
		return x.BanAddContact
	}
	return false
}

func (x *RequestChannel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回create channel
type ReplyChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyChannel) Reset() {
	*x = ReplyChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChannel) ProtoMessage() {}

func (x *ReplyChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChannel.ProtoReflect.Descriptor instead.
func (*ReplyChannel) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{144}
}

func (x *ReplyChannel) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyChannel) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 邀请用户进入超级群
type RequestChannelInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`                  // 频道超级群ID
	Title      string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                           // 标题
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`                        // 邀请者的ID
	PeerId     []int32       `protobuf:"varint,4,rep,packed,name=peerId,proto3" json:"peerId,omitempty"`                 // 被邀请者的ID
	FromKeyid  int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"` // 邀请者的KEYID
	AccessHash int64         `protobuf:"varint,6,opt,name=accessHash,proto3" json:"accessHash,omitempty"`                // 频道超级群的哈希
	Debug      *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *RequestChannelInvite) Reset() {
	*x = RequestChannelInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestChannelInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestChannelInvite) ProtoMessage() {}

func (x *RequestChannelInvite) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestChannelInvite.ProtoReflect.Descriptor instead.
func (*RequestChannelInvite) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{145}
}

func (x *RequestChannelInvite) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *RequestChannelInvite) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RequestChannelInvite) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RequestChannelInvite) GetPeerId() []int32 {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *RequestChannelInvite) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *RequestChannelInvite) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *RequestChannelInvite) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 邀请操作的ACK
type ReplyChannelInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyChannelInvite) Reset() {
	*x = ReplyChannelInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChannelInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChannelInvite) ProtoMessage() {}

func (x *ReplyChannelInvite) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChannelInvite.ProtoReflect.Descriptor instead.
func (*ReplyChannelInvite) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{146}
}

func (x *ReplyChannelInvite) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyChannelInvite) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 邀请用户进入超级群
type ReqJoinChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`                  //超级群ID
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`                        // 自己的ID
	FromKeyid  int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"` //自己的KEYID
	AccessHash int64         `protobuf:"varint,6,opt,name=accessHash,proto3" json:"accessHash,omitempty"`                //超级群的哈希
	ByLink     bool          `protobuf:"varint,7,opt,name=byLink,proto3" json:"byLink,omitempty"`                        //是否通过链接加入
	Invitor    int32         `protobuf:"varint,8,opt,name=invitor,proto3" json:"invitor,omitempty"`
	InviteType int32         `protobuf:"varint,9,opt,name=invite_type,json=inviteType,proto3" json:"invite_type,omitempty"` //邀请类型 0-链接 1-二维码
	Debug      *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqJoinChannel) Reset() {
	*x = ReqJoinChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqJoinChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqJoinChannel) ProtoMessage() {}

func (x *ReqJoinChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqJoinChannel.ProtoReflect.Descriptor instead.
func (*ReqJoinChannel) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{147}
}

func (x *ReqJoinChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqJoinChannel) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqJoinChannel) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqJoinChannel) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqJoinChannel) GetByLink() bool {
	if x != nil {
		return x.ByLink
	}
	return false
}

func (x *ReqJoinChannel) GetInvitor() int32 {
	if x != nil {
		return x.Invitor
	}
	return 0
}

func (x *ReqJoinChannel) GetInviteType() int32 {
	if x != nil {
		return x.InviteType
	}
	return 0
}

func (x *ReqJoinChannel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 邀请操作的ACK
type ReplyJoinChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyJoinChannel) Reset() {
	*x = ReplyJoinChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyJoinChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyJoinChannel) ProtoMessage() {}

func (x *ReplyJoinChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyJoinChannel.ProtoReflect.Descriptor instead.
func (*ReplyJoinChannel) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{148}
}

func (x *ReplyJoinChannel) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyJoinChannel) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 踢人
type ReqChannelKick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Kicker    int32         `protobuf:"varint,2,opt,name=kicker,proto3" json:"kicker,omitempty"`                          //谁踢人
	Kickee    int32         `protobuf:"varint,3,opt,name=kickee,proto3" json:"kickee,omitempty"`                          //谁被踢
	IsBotUser bool          `protobuf:"varint,4,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"` //被邀请者是不是机器人
	IsKicked  bool          `protobuf:"varint,5,opt,name=is_kicked,json=isKicked,proto3" json:"is_kicked,omitempty"`      // 是否是离开超级群\频道
	KickedId  int32         `protobuf:"varint,6,opt,name=Kicked_id,json=KickedId,proto3" json:"Kicked_id,omitempty"`      //如果是超级群被踢的话将，此用户保存到被踢列表中
	FromKeyid int64         `protobuf:"varint,7,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`   //踢人者的KEYID
	Debug     *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqChannelKick) Reset() {
	*x = ReqChannelKick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqChannelKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqChannelKick) ProtoMessage() {}

func (x *ReqChannelKick) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqChannelKick.ProtoReflect.Descriptor instead.
func (*ReqChannelKick) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{149}
}

func (x *ReqChannelKick) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqChannelKick) GetKicker() int32 {
	if x != nil {
		return x.Kicker
	}
	return 0
}

func (x *ReqChannelKick) GetKickee() int32 {
	if x != nil {
		return x.Kickee
	}
	return 0
}

func (x *ReqChannelKick) GetIsBotUser() bool {
	if x != nil {
		return x.IsBotUser
	}
	return false
}

func (x *ReqChannelKick) GetIsKicked() bool {
	if x != nil {
		return x.IsKicked
	}
	return false
}

func (x *ReqChannelKick) GetKickedId() int32 {
	if x != nil {
		return x.KickedId
	}
	return 0
}

func (x *ReqChannelKick) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqChannelKick) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyChannelKick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyChannelKick) Reset() {
	*x = ReplyChannelKick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChannelKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChannelKick) ProtoMessage() {}

func (x *ReplyChannelKick) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChannelKick.ProtoReflect.Descriptor instead.
func (*ReplyChannelKick) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{150}
}

func (x *ReplyChannelKick) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyChannelKick) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 退出超级群
type ReqLeaveChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`                  //退出的超级群ID
	UserId    int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`                        // 退出的用户
	FromKeyid int64         `protobuf:"varint,3,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"` //退出用户的KEYID
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqLeaveChannel) Reset() {
	*x = ReqLeaveChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLeaveChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLeaveChannel) ProtoMessage() {}

func (x *ReqLeaveChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLeaveChannel.ProtoReflect.Descriptor instead.
func (*ReqLeaveChannel) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{151}
}

func (x *ReqLeaveChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqLeaveChannel) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqLeaveChannel) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqLeaveChannel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 推出超级群返回
type ReplyLeaveChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyLeaveChannel) Reset() {
	*x = ReplyLeaveChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyLeaveChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyLeaveChannel) ProtoMessage() {}

func (x *ReplyLeaveChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyLeaveChannel.ProtoReflect.Descriptor instead.
func (*ReplyLeaveChannel) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{152}
}

func (x *ReplyLeaveChannel) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyLeaveChannel) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// edit title
type ReqEditChannelTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Title     string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	UserId    int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyid int64         `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditChannelTitle) Reset() {
	*x = ReqEditChannelTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditChannelTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditChannelTitle) ProtoMessage() {}

func (x *ReqEditChannelTitle) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditChannelTitle.ProtoReflect.Descriptor instead.
func (*ReqEditChannelTitle) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{153}
}

func (x *ReqEditChannelTitle) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqEditChannelTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ReqEditChannelTitle) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqEditChannelTitle) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqEditChannelTitle) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// ack to the title editing
type ReplyEditChannelTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyEditChannelTitle) Reset() {
	*x = ReplyEditChannelTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyEditChannelTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyEditChannelTitle) ProtoMessage() {}

func (x *ReplyEditChannelTitle) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyEditChannelTitle.ProtoReflect.Descriptor instead.
func (*ReplyEditChannelTitle) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{154}
}

func (x *ReplyEditChannelTitle) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyEditChannelTitle) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 请求参数
type ReqEditChannelAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"` //请求者ID
	ChannelId  int32         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`         //频道ID
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`               //被升级或降级的人
	FromKeyId  int64         `protobuf:"varint,4,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`         //请求者的KEYID
	Role       []byte        `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`                    //admin rights
	KeyId      uint64        `protobuf:"varint,6,opt,name=keyId,proto3" json:"keyId,omitempty"`
	AccessHash int64         `protobuf:"varint,7,opt,name=accessHash,proto3" json:"accessHash,omitempty"` //哈希
	Rank       string        `protobuf:"bytes,8,opt,name=rank,proto3" json:"rank,omitempty"`              // 标签
	Debug      *pbcomm.Debug `protobuf:"bytes,9,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditChannelAdmin) Reset() {
	*x = ReqEditChannelAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditChannelAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditChannelAdmin) ProtoMessage() {}

func (x *ReqEditChannelAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditChannelAdmin.ProtoReflect.Descriptor instead.
func (*ReqEditChannelAdmin) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{155}
}

func (x *ReqEditChannelAdmin) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqEditChannelAdmin) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqEditChannelAdmin) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqEditChannelAdmin) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqEditChannelAdmin) GetRole() []byte {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *ReqEditChannelAdmin) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ReqEditChannelAdmin) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqEditChannelAdmin) GetRank() string {
	if x != nil {
		return x.Rank
	}
	return ""
}

func (x *ReqEditChannelAdmin) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回参数
type ReplyEditChannelAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyEditChannelAdmin) Reset() {
	*x = ReplyEditChannelAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyEditChannelAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyEditChannelAdmin) ProtoMessage() {}

func (x *ReplyEditChannelAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyEditChannelAdmin.ProtoReflect.Descriptor instead.
func (*ReplyEditChannelAdmin) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{156}
}

func (x *ReplyEditChannelAdmin) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyEditChannelAdmin) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// edit photo
type ReqEditChannelPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Photo     []byte        `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	FromKeyid int64         `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditChannelPhoto) Reset() {
	*x = ReqEditChannelPhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditChannelPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditChannelPhoto) ProtoMessage() {}

func (x *ReqEditChannelPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditChannelPhoto.ProtoReflect.Descriptor instead.
func (*ReqEditChannelPhoto) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{157}
}

func (x *ReqEditChannelPhoto) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqEditChannelPhoto) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqEditChannelPhoto) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *ReqEditChannelPhoto) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqEditChannelPhoto) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// ack to edit photo
type ReplyEditChannelPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyEditChannelPhoto) Reset() {
	*x = ReplyEditChannelPhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyEditChannelPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyEditChannelPhoto) ProtoMessage() {}

func (x *ReplyEditChannelPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyEditChannelPhoto.ProtoReflect.Descriptor instead.
func (*ReplyEditChannelPhoto) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{158}
}

func (x *ReplyEditChannelPhoto) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyEditChannelPhoto) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ChatInviteExported struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link  string        `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ChatInviteExported) Reset() {
	*x = ChatInviteExported{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatInviteExported) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatInviteExported) ProtoMessage() {}

func (x *ChatInviteExported) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatInviteExported.ProtoReflect.Descriptor instead.
func (*ChatInviteExported) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{159}
}

func (x *ChatInviteExported) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *ChatInviteExported) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// ################################ 编辑超级群群说明信息 editAbout ######################
// 请求参数
type ReqEditChannelAbout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	FromKeyId  int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId  int32         `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	About      string        `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
	AccessHash int64         `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditChannelAbout) Reset() {
	*x = ReqEditChannelAbout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditChannelAbout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditChannelAbout) ProtoMessage() {}

func (x *ReqEditChannelAbout) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditChannelAbout.ProtoReflect.Descriptor instead.
func (*ReqEditChannelAbout) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{160}
}

func (x *ReqEditChannelAbout) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqEditChannelAbout) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqEditChannelAbout) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqEditChannelAbout) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *ReqEditChannelAbout) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqEditChannelAbout) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回参数
type ReplyEditChannelAbout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed   bool  `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	ErrorCode int32 `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyEditChannelAbout) Reset() {
	*x = ReplyEditChannelAbout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyEditChannelAbout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyEditChannelAbout) ProtoMessage() {}

func (x *ReplyEditChannelAbout) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyEditChannelAbout.ProtoReflect.Descriptor instead.
func (*ReplyEditChannelAbout) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{161}
}

func (x *ReplyEditChannelAbout) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *ReplyEditChannelAbout) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// ################################ 超级群删除指定人发送的消息 deleteUserHistory ######################
// 请求参数
type ReqDeleteChannelMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ChannelId  int32         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Id         []int32       `protobuf:"varint,3,rep,packed,name=id,proto3" json:"id,omitempty"`
	FromKeyid  int64         `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	AccessHash int64         `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDeleteChannelMessages) Reset() {
	*x = ReqDeleteChannelMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteChannelMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteChannelMessages) ProtoMessage() {}

func (x *ReqDeleteChannelMessages) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteChannelMessages.ProtoReflect.Descriptor instead.
func (*ReqDeleteChannelMessages) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{162}
}

func (x *ReqDeleteChannelMessages) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqDeleteChannelMessages) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqDeleteChannelMessages) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReqDeleteChannelMessages) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqDeleteChannelMessages) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqDeleteChannelMessages) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回参数
type ReplyDeleteChannelMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msgid     int32 `protobuf:"varint,1,opt,name=msgid,proto3" json:"msgid,omitempty"`
	Date      int32 `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
	Pts       int32 `protobuf:"varint,3,opt,name=pts,proto3" json:"pts,omitempty"`
	MaxId     int32 `protobuf:"varint,4,opt,name=maxId,proto3" json:"maxId,omitempty"`
	PtsCount  int32 `protobuf:"varint,5,opt,name=ptsCount,proto3" json:"ptsCount,omitempty"`
	ErrorCode int32 `protobuf:"varint,6,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyDeleteChannelMessages) Reset() {
	*x = ReplyDeleteChannelMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDeleteChannelMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDeleteChannelMessages) ProtoMessage() {}

func (x *ReplyDeleteChannelMessages) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDeleteChannelMessages.ProtoReflect.Descriptor instead.
func (*ReplyDeleteChannelMessages) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{163}
}

func (x *ReplyDeleteChannelMessages) GetMsgid() int32 {
	if x != nil {
		return x.Msgid
	}
	return 0
}

func (x *ReplyDeleteChannelMessages) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ReplyDeleteChannelMessages) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReplyDeleteChannelMessages) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *ReplyDeleteChannelMessages) GetPtsCount() int32 {
	if x != nil {
		return x.PtsCount
	}
	return 0
}

func (x *ReplyDeleteChannelMessages) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// ################################ 超级群删除自己端的历史 ###################################
type ReqDeleteChannelSelfHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ChannelId  int32         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FromKeyid  int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDeleteChannelSelfHistory) Reset() {
	*x = ReqDeleteChannelSelfHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteChannelSelfHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteChannelSelfHistory) ProtoMessage() {}

func (x *ReqDeleteChannelSelfHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteChannelSelfHistory.ProtoReflect.Descriptor instead.
func (*ReqDeleteChannelSelfHistory) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{164}
}

func (x *ReqDeleteChannelSelfHistory) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqDeleteChannelSelfHistory) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqDeleteChannelSelfHistory) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqDeleteChannelSelfHistory) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqDeleteChannelSelfHistory) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// ################################ 超级群删除指定条消息 deleteMessages ######################
// 请求参数
type ReqDeleteChannelHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ChannelId  int32         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UsreId     int32         `protobuf:"varint,3,opt,name=usreId,proto3" json:"usreId,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FromKeyid  int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDeleteChannelHistory) Reset() {
	*x = ReqDeleteChannelHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteChannelHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteChannelHistory) ProtoMessage() {}

func (x *ReqDeleteChannelHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteChannelHistory.ProtoReflect.Descriptor instead.
func (*ReqDeleteChannelHistory) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{165}
}

func (x *ReqDeleteChannelHistory) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqDeleteChannelHistory) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqDeleteChannelHistory) GetUsreId() int32 {
	if x != nil {
		return x.UsreId
	}
	return 0
}

func (x *ReqDeleteChannelHistory) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqDeleteChannelHistory) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqDeleteChannelHistory) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回参数
type ReplyDeleteChannelHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ErrorCode int32  `protobuf:"varint,6,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyDeleteChannelHistory) Reset() {
	*x = ReplyDeleteChannelHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDeleteChannelHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDeleteChannelHistory) ProtoMessage() {}

func (x *ReplyDeleteChannelHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDeleteChannelHistory.ProtoReflect.Descriptor instead.
func (*ReplyDeleteChannelHistory) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{166}
}

func (x *ReplyDeleteChannelHistory) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyDeleteChannelHistory) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// ################################ 超级群中置顶一条消息 updatePinnedMessage ######################
// 请求参数
type ReqUpdatePinnedChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId int32 `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Flags  int32 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Silent bool  `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	//    InputChannel channel = 4;
	ChannelId int32         `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Id        int32         `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	FromKeyid int64         `protobuf:"varint,6,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqUpdatePinnedChannelMessage) Reset() {
	*x = ReqUpdatePinnedChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdatePinnedChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdatePinnedChannelMessage) ProtoMessage() {}

func (x *ReqUpdatePinnedChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdatePinnedChannelMessage.ProtoReflect.Descriptor instead.
func (*ReqUpdatePinnedChannelMessage) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{167}
}

func (x *ReqUpdatePinnedChannelMessage) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *ReqUpdatePinnedChannelMessage) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回参数
type ReplyUpdatePinnedChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyUpdatePinnedChannelMessage) Reset() {
	*x = ReplyUpdatePinnedChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUpdatePinnedChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUpdatePinnedChannelMessage) ProtoMessage() {}

func (x *ReplyUpdatePinnedChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUpdatePinnedChannelMessage.ProtoReflect.Descriptor instead.
func (*ReplyUpdatePinnedChannelMessage) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{168}
}

func (x *ReplyUpdatePinnedChannelMessage) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyUpdatePinnedChannelMessage) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// ################################ 频道设置username checkUsername updateUsername ######################
// // 请求参数
//
//	message ReqCheckChannelUsername {
//	   int32 from_id = 1;
//	   InputChannel channel = 2;
//	   string username = 3;
//	   pbcomm.Debug debug = 4;
//	}
//
// // 返回参数
//
//	message ReplyCheckChannelUsername {
//	   int32 msgid = 1;
//	   int32 date = 2;
//	   int32 pts = 3;
//	   bool check_user_name = 4;
//	}
//
// // 请求参数
//
//	message ReqUpdateChannelUsername {
//	   int32 from_id = 1;
//	   InputChannel channel = 2;
//	   string username = 3;
//	   pbcomm.Debug debug = 4;
//	}
//
// // 返回参数
//
//	message ReplyUpdateChannelUsername {
//	   int32 msgid = 1;
//	   int32 date = 2;
//	   int32 pts = 3;
//	   bool update_user_name = 4;
//	}
//
// //################################ 频道生成邀请链接 exportInvite ######################
// // 请求参数
//
//	message ReqExportChannelInvite {
//	   int32 from_id = 1;
//	   InputChannel channel = 2;
//	   string link = 3;
//	   pbcomm.Debug debug = 4;
//	}
//
// // 返回参数
//
//	message ReplyExportChannelInvite {
//	   int32 msgid = 1;
//	   int32 date = 2;
//	   int32 pts = 3;
//	}
//
// ################################ 删除超级群 deletechannel ######################
// deletechannel 请求参数
type ReqDeleteChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId  int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId  int32         `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDeleteChannel) Reset() {
	*x = ReqDeleteChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteChannel) ProtoMessage() {}

func (x *ReqDeleteChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteChannel.ProtoReflect.Descriptor instead.
func (*ReqDeleteChannel) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{169}
}

func (x *ReqDeleteChannel) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqDeleteChannel) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqDeleteChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqDeleteChannel) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqDeleteChannel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// deletechannel 返回参数
type ReplyDeleteChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Send      bool   `protobuf:"varint,1,opt,name=send,proto3" json:"send,omitempty"` //是否成功
	Reply     []byte `protobuf:"bytes,2,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyDeleteChannel) Reset() {
	*x = ReplyDeleteChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDeleteChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDeleteChannel) ProtoMessage() {}

func (x *ReplyDeleteChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDeleteChannel.ProtoReflect.Descriptor instead.
func (*ReplyDeleteChannel) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{170}
}

func (x *ReplyDeleteChannel) GetSend() bool {
	if x != nil {
		return x.Send
	}
	return false
}

func (x *ReplyDeleteChannel) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyDeleteChannel) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// ############################### 读取channel历史 #########################
type ReqReadChannelHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	FromKeyid int64         `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	ChannelId int32         `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	TopMsgId  int32         `protobuf:"varint,4,opt,name=topMsgId,proto3" json:"topMsgId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqReadChannelHistory) Reset() {
	*x = ReqReadChannelHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqReadChannelHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqReadChannelHistory) ProtoMessage() {}

func (x *ReqReadChannelHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqReadChannelHistory.ProtoReflect.Descriptor instead.
func (*ReqReadChannelHistory) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{171}
}

func (x *ReqReadChannelHistory) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqReadChannelHistory) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqReadChannelHistory) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqReadChannelHistory) GetTopMsgId() int32 {
	if x != nil {
		return x.TopMsgId
	}
	return 0
}

func (x *ReqReadChannelHistory) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyReadChannelHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOk      bool  `protobuf:"varint,1,opt,name=isOk,proto3" json:"isOk,omitempty"`
	ErrorCode int32 `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *ReplyReadChannelHistory) Reset() {
	*x = ReplyReadChannelHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyReadChannelHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyReadChannelHistory) ProtoMessage() {}

func (x *ReplyReadChannelHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyReadChannelHistory.ProtoReflect.Descriptor instead.
func (*ReplyReadChannelHistory) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{172}
}

func (x *ReplyReadChannelHistory) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

func (x *ReplyReadChannelHistory) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReqUpdateChannelReadOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	MaxId     int32         `protobuf:"varint,2,opt,name=maxId,proto3" json:"maxId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqUpdateChannelReadOut) Reset() {
	*x = ReqUpdateChannelReadOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateChannelReadOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateChannelReadOut) ProtoMessage() {}

func (x *ReqUpdateChannelReadOut) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateChannelReadOut.ProtoReflect.Descriptor instead.
func (*ReqUpdateChannelReadOut) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{173}
}

func (x *ReqUpdateChannelReadOut) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqUpdateChannelReadOut) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *ReqUpdateChannelReadOut) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUpdateChannelReadOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Maxid int32 `protobuf:"varint,1,opt,name=maxid,proto3" json:"maxid,omitempty"`
	Pts   int32 `protobuf:"varint,2,opt,name=pts,proto3" json:"pts,omitempty"`
}

func (x *ReplyUpdateChannelReadOut) Reset() {
	*x = ReplyUpdateChannelReadOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUpdateChannelReadOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUpdateChannelReadOut) ProtoMessage() {}

func (x *ReplyUpdateChannelReadOut) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUpdateChannelReadOut.ProtoReflect.Descriptor instead.
func (*ReplyUpdateChannelReadOut) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{174}
}

func (x *ReplyUpdateChannelReadOut) GetMaxid() int32 {
	if x != nil {
		return x.Maxid
	}
	return 0
}

func (x *ReplyUpdateChannelReadOut) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

// #####################超级群get diff###################
type ReqGetchannelDifference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId      int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId   int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Flags       int32         `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	Force       bool          `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	ChannelId   int32         `protobuf:"varint,5,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Pts         int32         `protobuf:"varint,6,opt,name=pts,proto3" json:"pts,omitempty"`
	Limit       int32         `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Range_MinId int32         `protobuf:"varint,8,opt,name=range_MinId,json=rangeMinId,proto3" json:"range_MinId,omitempty"`
	Range_MaxId int32         `protobuf:"varint,9,opt,name=range_MaxId,json=rangeMaxId,proto3" json:"range_MaxId,omitempty"`
	Device      int32         `protobuf:"varint,10,opt,name=device,proto3" json:"device,omitempty"` //1, pc 2, android 3, ios
	Debug       *pbcomm.Debug `protobuf:"bytes,11,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetchannelDifference) Reset() {
	*x = ReqGetchannelDifference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetchannelDifference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetchannelDifference) ProtoMessage() {}

func (x *ReqGetchannelDifference) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetchannelDifference.ProtoReflect.Descriptor instead.
func (*ReqGetchannelDifference) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{175}
}

func (x *ReqGetchannelDifference) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetchannelDifference) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqGetchannelDifference) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqGetchannelDifference) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *ReqGetchannelDifference) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetchannelDifference) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReqGetchannelDifference) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetchannelDifference) GetRange_MinId() int32 {
	if x != nil {
		return x.Range_MinId
	}
	return 0
}

func (x *ReqGetchannelDifference) GetRange_MaxId() int32 {
	if x != nil {
		return x.Range_MaxId
	}
	return 0
}

func (x *ReqGetchannelDifference) GetDevice() int32 {
	if x != nil {
		return x.Device
	}
	return 0
}

func (x *ReqGetchannelDifference) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyChannelDiffCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Difference []byte `protobuf:"bytes,1,opt,name=difference,proto3" json:"difference,omitempty"` //  1: ReplyGetChannelDifferenceEmpty 2: ReplyGetChannelDifference 3: ReplyGetChannelDifferenceTooLong tooLong
	ErrorCode  int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyChannelDiffCommon) Reset() {
	*x = ReplyChannelDiffCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChannelDiffCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChannelDiffCommon) ProtoMessage() {}

func (x *ReplyChannelDiffCommon) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChannelDiffCommon.ProtoReflect.Descriptor instead.
func (*ReplyChannelDiffCommon) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{176}
}

func (x *ReplyChannelDiffCommon) GetDifference() []byte {
	if x != nil {
		return x.Difference
	}
	return nil
}

func (x *ReplyChannelDiffCommon) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReplyGetChannelDifferenceEmpty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags   int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Final   bool  `protobuf:"varint,2,opt,name=final,proto3" json:"final,omitempty"`
	Pts     int32 `protobuf:"varint,3,opt,name=pts,proto3" json:"pts,omitempty"`
	Timeout int32 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *ReplyGetChannelDifferenceEmpty) Reset() {
	*x = ReplyGetChannelDifferenceEmpty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelDifferenceEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelDifferenceEmpty) ProtoMessage() {}

func (x *ReplyGetChannelDifferenceEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelDifferenceEmpty.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelDifferenceEmpty) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{177}
}

func (x *ReplyGetChannelDifferenceEmpty) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReplyGetChannelDifferenceEmpty) GetFinal() bool {
	if x != nil {
		return x.Final
	}
	return false
}

func (x *ReplyGetChannelDifferenceEmpty) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReplyGetChannelDifferenceEmpty) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type ReplyGetChannelDifference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags     int32    `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Final     bool     `protobuf:"varint,2,opt,name=final,proto3" json:"final,omitempty"`
	Pts       int32    `protobuf:"varint,3,opt,name=pts,proto3" json:"pts,omitempty"`
	Timeout   int32    `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Msgs      [][]byte `protobuf:"bytes,5,rep,name=msgs,proto3" json:"msgs,omitempty"`
	ErrorCode int32    `protobuf:"varint,6,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyGetChannelDifference) Reset() {
	*x = ReplyGetChannelDifference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelDifference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelDifference) ProtoMessage() {}

func (x *ReplyGetChannelDifference) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelDifference.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelDifference) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{178}
}

func (x *ReplyGetChannelDifference) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReplyGetChannelDifference) GetFinal() bool {
	if x != nil {
		return x.Final
	}
	return false
}

func (x *ReplyGetChannelDifference) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReplyGetChannelDifference) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ReplyGetChannelDifference) GetMsgs() [][]byte {
	if x != nil {
		return x.Msgs
	}
	return nil
}

func (x *ReplyGetChannelDifference) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReplyGetChannelDifferenceTooLong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags           int32    `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Final           bool     `protobuf:"varint,2,opt,name=final,proto3" json:"final,omitempty"`
	Pts             int32    `protobuf:"varint,3,opt,name=pts,proto3" json:"pts,omitempty"`
	Timeout         int32    `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	TopMessage      int32    `protobuf:"varint,5,opt,name=top_message,json=topMessage,proto3" json:"top_message,omitempty"`
	ReadInboxMaxId  int32    `protobuf:"varint,6,opt,name=read_inbox_max_id,json=readInboxMaxId,proto3" json:"read_inbox_max_id,omitempty"`
	ReadOutboxMaxId int32    `protobuf:"varint,7,opt,name=read_outbox_max_id,json=readOutboxMaxId,proto3" json:"read_outbox_max_id,omitempty"`
	UnreadCount     int32    `protobuf:"varint,8,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	Msgs            [][]byte `protobuf:"bytes,9,rep,name=msgs,proto3" json:"msgs,omitempty"`
	ErrorCode       int32    `protobuf:"varint,10,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyGetChannelDifferenceTooLong) Reset() {
	*x = ReplyGetChannelDifferenceTooLong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelDifferenceTooLong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelDifferenceTooLong) ProtoMessage() {}

func (x *ReplyGetChannelDifferenceTooLong) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelDifferenceTooLong.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelDifferenceTooLong) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{179}
}

func (x *ReplyGetChannelDifferenceTooLong) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReplyGetChannelDifferenceTooLong) GetFinal() bool {
	if x != nil {
		return x.Final
	}
	return false
}

func (x *ReplyGetChannelDifferenceTooLong) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReplyGetChannelDifferenceTooLong) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ReplyGetChannelDifferenceTooLong) GetTopMessage() int32 {
	if x != nil {
		return x.TopMessage
	}
	return 0
}

func (x *ReplyGetChannelDifferenceTooLong) GetReadInboxMaxId() int32 {
	if x != nil {
		return x.ReadInboxMaxId
	}
	return 0
}

func (x *ReplyGetChannelDifferenceTooLong) GetReadOutboxMaxId() int32 {
	if x != nil {
		return x.ReadOutboxMaxId
	}
	return 0
}

func (x *ReplyGetChannelDifferenceTooLong) GetUnreadCount() int32 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

func (x *ReplyGetChannelDifferenceTooLong) GetMsgs() [][]byte {
	if x != nil {
		return x.Msgs
	}
	return nil
}

func (x *ReplyGetChannelDifferenceTooLong) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// ######超级群get history##########
type ReqGetChannelMsgHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	OffsetId   int32         `protobuf:"varint,2,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`
	OffsetDate int32         `protobuf:"varint,3,opt,name=OffsetDate,proto3" json:"OffsetDate,omitempty"`
	AddOffset  int32         `protobuf:"varint,4,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`
	MinId      int32         `protobuf:"varint,5,opt,name=MinId,proto3" json:"MinId,omitempty"`
	MaxId      int32         `protobuf:"varint,6,opt,name=MaxId,proto3" json:"MaxId,omitempty"`
	Limit      int32         `protobuf:"varint,7,opt,name=Limit,proto3" json:"Limit,omitempty"`
	FromId     int32         `protobuf:"varint,8,opt,name=fromId,proto3" json:"fromId,omitempty"`
	KeyId      uint64        `protobuf:"varint,9,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChannelMsgHistory) Reset() {
	*x = ReqGetChannelMsgHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMsgHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMsgHistory) ProtoMessage() {}

func (x *ReqGetChannelMsgHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMsgHistory.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMsgHistory) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{180}
}

func (x *ReqGetChannelMsgHistory) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyChannelMsgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//    int32 historyType = 1; // 1:slice 2: all
	//    int32 count = 2; // 总消息数
	//    repeated UserMsg userMsgs = 3; // 消息
	//    int32 pts = 4;
	//    int32 flags = 5;
	//    bytes messages = 6;
	Result    []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ErrorCode int32  `protobuf:"varint,7,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *ReplyChannelMsgs) Reset() {
	*x = ReplyChannelMsgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChannelMsgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChannelMsgs) ProtoMessage() {}

func (x *ReplyChannelMsgs) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChannelMsgs.ProtoReflect.Descriptor instead.
func (*ReplyChannelMsgs) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{181}
}

func (x *ReplyChannelMsgs) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyChannelMsgs) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 获取participants
type ReqParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffSet    int32         `protobuf:"varint,1,opt,name=offSet,proto3" json:"offSet,omitempty"`
	Limit     int32         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	PartiType int32         `protobuf:"varint,3,opt,name=partiType,proto3" json:"partiType,omitempty"`
	ChannelId int32         `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId    int32         `protobuf:"varint,5,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Q         string        `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	Hash      int32         `protobuf:"varint,7,opt,name=Hash,proto3" json:"Hash,omitempty"` // 校验唯一的， 如果不为0 则要进行唯一判断
	Debug     *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqParticipants) Reset() {
	*x = ReqParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqParticipants) ProtoMessage() {}

func (x *ReqParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqParticipants.ProtoReflect.Descriptor instead.
func (*ReqParticipants) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{182}
}

func (x *ReqParticipants) GetOffSet() int32 {
	if x != nil {
		return x.OffSet
	}
	return 0
}

func (x *ReqParticipants) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqParticipants) GetPartiType() int32 {
	if x != nil {
		return x.PartiType
	}
	return 0
}

func (x *ReqParticipants) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqParticipants) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqParticipants) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ReqParticipants) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *ReqParticipants) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回participants
type ReplyParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates   []byte `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyParticipants) Reset() {
	*x = ReplyParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyParticipants) ProtoMessage() {}

func (x *ReplyParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyParticipants.ProtoReflect.Descriptor instead.
func (*ReplyParticipants) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{183}
}

func (x *ReplyParticipants) GetUpdates() []byte {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *ReplyParticipants) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 获取participant
type ReqParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channelid  int32         `protobuf:"varint,1,opt,name=channelid,proto3" json:"channelid,omitempty"`
	FromId     int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqParticipant) Reset() {
	*x = ReqParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqParticipant) ProtoMessage() {}

func (x *ReqParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqParticipant.ProtoReflect.Descriptor instead.
func (*ReqParticipant) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{184}
}

func (x *ReqParticipant) GetChannelid() int32 {
	if x != nil {
		return x.Channelid
	}
	return 0
}

func (x *ReqParticipant) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqParticipant) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqParticipant) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqParticipant) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回participant
type ReplyParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates   []byte `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyParticipant) Reset() {
	*x = ReplyParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyParticipant) ProtoMessage() {}

func (x *ReplyParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyParticipant.ProtoReflect.Descriptor instead.
func (*ReplyParticipant) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{185}
}

func (x *ReplyParticipant) GetUpdates() []byte {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *ReplyParticipant) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// #####超级群get messages by messages id#####
type ReqGetChannelMsgsByMsgsId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	MsgsId    []int32       `protobuf:"varint,2,rep,packed,name=msgsId,proto3" json:"msgsId,omitempty"`
	FromId    int32         `protobuf:"varint,3,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChannelMsgsByMsgsId) Reset() {
	*x = ReqGetChannelMsgsByMsgsId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMsgsByMsgsId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMsgsByMsgsId) ProtoMessage() {}

func (x *ReqGetChannelMsgsByMsgsId) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMsgsByMsgsId.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMsgsByMsgsId) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{186}
}

func (x *ReqGetChannelMsgsByMsgsId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelMsgsByMsgsId) GetMsgsId() []int32 {
	if x != nil {
		return x.MsgsId
	}
	return nil
}

func (x *ReqGetChannelMsgsByMsgsId) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetChannelMsgsByMsgsId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetChannelCommonDialogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId   int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChannIds []int32       `protobuf:"varint,2,rep,packed,name=channIds,proto3" json:"channIds,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChannelCommonDialogs) Reset() {
	*x = ReqGetChannelCommonDialogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelCommonDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelCommonDialogs) ProtoMessage() {}

func (x *ReqGetChannelCommonDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelCommonDialogs.ProtoReflect.Descriptor instead.
func (*ReqGetChannelCommonDialogs) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{187}
}

func (x *ReqGetChannelCommonDialogs) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetChannelCommonDialogs) GetChannIds() []int32 {
	if x != nil {
		return x.ChannIds
	}
	return nil
}

func (x *ReqGetChannelCommonDialogs) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ChannelDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId   int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`     // 超级群唯一ID
	TopMessage  int32 `protobuf:"varint,2,opt,name=TopMessage,proto3" json:"TopMessage,omitempty"`   //
	MaxReadInId int32 `protobuf:"varint,3,opt,name=MaxReadInId,proto3" json:"MaxReadInId,omitempty"` // 已读最大ID
	Encry       int32 `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`             // 是否加密
}

func (x *ChannelDialog) Reset() {
	*x = ChannelDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDialog) ProtoMessage() {}

func (x *ChannelDialog) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDialog.ProtoReflect.Descriptor instead.
func (*ChannelDialog) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{188}
}

func (x *ChannelDialog) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelDialog) GetTopMessage() int32 {
	if x != nil {
		return x.TopMessage
	}
	return 0
}

func (x *ChannelDialog) GetMaxReadInId() int32 {
	if x != nil {
		return x.MaxReadInId
	}
	return 0
}

func (x *ChannelDialog) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

type ChannelDialogAndMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelDialog *ChannelDialog `protobuf:"bytes,1,opt,name=ChannelDialog,proto3" json:"ChannelDialog,omitempty"`
	ChannelMsg    *UserMsg       `protobuf:"bytes,2,opt,name=ChannelMsg,proto3" json:"ChannelMsg,omitempty"`
}

func (x *ChannelDialogAndMsg) Reset() {
	*x = ChannelDialogAndMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelDialogAndMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDialogAndMsg) ProtoMessage() {}

func (x *ChannelDialogAndMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDialogAndMsg.ProtoReflect.Descriptor instead.
func (*ChannelDialogAndMsg) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{189}
}

func (x *ChannelDialogAndMsg) GetChannelDialog() *ChannelDialog {
	if x != nil {
		return x.ChannelDialog
	}
	return nil
}

func (x *ChannelDialogAndMsg) GetChannelMsg() *UserMsg {
	if x != nil {
		return x.ChannelMsg
	}
	return nil
}

type ChannelDialogAndMsgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelDialogAndMsg []*ChannelDialogAndMsg `protobuf:"bytes,1,rep,name=channelDialogAndMsg,proto3" json:"channelDialogAndMsg,omitempty"`
}

func (x *ChannelDialogAndMsgs) Reset() {
	*x = ChannelDialogAndMsgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelDialogAndMsgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDialogAndMsgs) ProtoMessage() {}

func (x *ChannelDialogAndMsgs) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDialogAndMsgs.ProtoReflect.Descriptor instead.
func (*ChannelDialogAndMsgs) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{190}
}

func (x *ChannelDialogAndMsgs) GetChannelDialogAndMsg() []*ChannelDialogAndMsg {
	if x != nil {
		return x.ChannelDialogAndMsg
	}
	return nil
}

type UserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserId       int32    `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId       int32    `protobuf:"varint,3,opt,name=WithId,proto3" json:"WithId,omitempty"`              // 消息交互方
	WithIdType   int32    `protobuf:"varint,4,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`      // 1.user 2:chat 3:channel
	MessageType  int32    `protobuf:"varint,5,opt,name=MessageType,proto3" json:"MessageType,omitempty"`    // 消息类型
	Flags        int32    `protobuf:"varint,6,opt,name=Flags,proto3" json:"Flags,omitempty"`                // 消息标识
	Out          bool     `protobuf:"varint,7,opt,name=Out,proto3" json:"Out,omitempty"`                    // 是否为自己发送
	Mentioned    bool     `protobuf:"varint,8,opt,name=Mentioned,proto3" json:"Mentioned,omitempty"`        // 是否提及他人
	MediaUnread  bool     `protobuf:"varint,9,opt,name=MediaUnread,proto3" json:"MediaUnread,omitempty"`    // 媒体是否已读
	Silent       bool     `protobuf:"varint,10,opt,name=Silent,proto3" json:"Silent,omitempty"`             // 是否静音
	Post         bool     `protobuf:"varint,11,opt,name=Post,proto3" json:"Post,omitempty"`                 // 是否邮递
	MsgId        int32    `protobuf:"varint,12,opt,name=MsgId,proto3" json:"MsgId,omitempty"`               // 消息id
	ToId         int32    `protobuf:"varint,13,opt,name=ToId,proto3" json:"ToId,omitempty"`                 // 接收方id
	Pts          int32    `protobuf:"varint,14,opt,name=Pts,proto3" json:"Pts,omitempty"`                   // 消息的pts
	FwdFrom      []byte   `protobuf:"bytes,15,opt,name=FwdFrom,proto3" json:"FwdFrom,omitempty"`            // 引用
	ViaBotId     int32    `protobuf:"varint,16,opt,name=ViaBotId,proto3" json:"ViaBotId,omitempty"`         // 机器人id
	ReplyToMsgId int32    `protobuf:"varint,17,opt,name=ReplyToMsgId,proto3" json:"ReplyToMsgId,omitempty"` // 回复id
	Date         int32    `protobuf:"varint,18,opt,name=Date,proto3" json:"Date,omitempty"`                 // 时间
	Message      string   `protobuf:"bytes,19,opt,name=Message,proto3" json:"Message,omitempty"`            // 消息内容
	Media        int64    `protobuf:"varint,20,opt,name=Media,proto3" json:"Media,omitempty"`               // 媒体id
	MediaData    []byte   `protobuf:"bytes,21,opt,name=MediaData,proto3" json:"MediaData,omitempty"`        // 媒体二进制
	ReplyMarkup  []byte   `protobuf:"bytes,22,opt,name=ReplyMarkup,proto3" json:"ReplyMarkup,omitempty"`    // 小键盘
	Entities     [][]byte `protobuf:"bytes,23,rep,name=Entities,proto3" json:"Entities,omitempty"`          // 高亮
	FromId       int32    `protobuf:"varint,24,opt,name=FromId,proto3" json:"FromId,omitempty"`             // 发送方
	Views        int32    `protobuf:"varint,25,opt,name=Views,proto3" json:"Views,omitempty"`               // 查看人数
	EditDate     int32    `protobuf:"varint,26,opt,name=EditDate,proto3" json:"EditDate,omitempty"`         // 编辑时间
	Action       []byte   `protobuf:"bytes,27,opt,name=Action,proto3" json:"Action,omitempty"`              // 行为
	RandomId     int64    `protobuf:"varint,28,opt,name=RandomId,proto3" json:"RandomId,omitempty"`         // 随机id
	Uuid         int64    `protobuf:"varint,29,opt,name=Uuid,proto3" json:"Uuid,omitempty"`                 // 消息全局唯一id
	InsertDate   int32    `protobuf:"varint,30,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
	UpdateDate   int32    `protobuf:"varint,31,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`
	Encry        int32    `protobuf:"varint,32,opt,name=Encry,proto3" json:"Encry,omitempty"` // 0: 不加密 1：加密
}

func (x *UserMsg) Reset() {
	*x = UserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMsg) ProtoMessage() {}

func (x *UserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMsg.ProtoReflect.Descriptor instead.
func (*UserMsg) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{191}
}

func (x *UserMsg) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserMsg) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *UserMsg) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *UserMsg) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *UserMsg) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *UserMsg) GetOut() bool {
	if x != nil {
		return x.Out
	}
	return false
}

func (x *UserMsg) GetMentioned() bool {
	if x != nil {
		return x.Mentioned
	}
	return false
}

func (x *UserMsg) GetMediaUnread() bool {
	if x != nil {
		return x.MediaUnread
	}
	return false
}

func (x *UserMsg) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *UserMsg) GetPost() bool {
	if x != nil {
		return x.Post
	}
	return false
}

func (x *UserMsg) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *UserMsg) GetToId() int32 {
	if x != nil {
		return x.ToId
	}
	return 0
}

func (x *UserMsg) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *UserMsg) GetFwdFrom() []byte {
	if x != nil {
		return x.FwdFrom
	}
	return nil
}

func (x *UserMsg) GetViaBotId() int32 {
	if x != nil {
		return x.ViaBotId
	}
	return 0
}

func (x *UserMsg) GetReplyToMsgId() int32 {
	if x != nil {
		return x.ReplyToMsgId
	}
	return 0
}

func (x *UserMsg) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *UserMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserMsg) GetMedia() int64 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *UserMsg) GetMediaData() []byte {
	if x != nil {
		return x.MediaData
	}
	return nil
}

func (x *UserMsg) GetReplyMarkup() []byte {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *UserMsg) GetEntities() [][]byte {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *UserMsg) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *UserMsg) GetViews() int32 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *UserMsg) GetEditDate() int32 {
	if x != nil {
		return x.EditDate
	}
	return 0
}

func (x *UserMsg) GetAction() []byte {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *UserMsg) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *UserMsg) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *UserMsg) GetInsertDate() int32 {
	if x != nil {
		return x.InsertDate
	}
	return 0
}

func (x *UserMsg) GetUpdateDate() int32 {
	if x != nil {
		return x.UpdateDate
	}
	return 0
}

func (x *UserMsg) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

type RequestWebPMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	KeyIdNum uint64 `protobuf:"varint,2,opt,name=keyIdNum,proto3" json:"keyIdNum,omitempty"`
	DcId     int32  `protobuf:"varint,3,opt,name=dcId,proto3" json:"dcId,omitempty"`
}

func (x *RequestWebPMessage) Reset() {
	*x = RequestWebPMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWebPMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWebPMessage) ProtoMessage() {}

func (x *RequestWebPMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWebPMessage.ProtoReflect.Descriptor instead.
func (*RequestWebPMessage) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{192}
}

func (x *RequestWebPMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RequestWebPMessage) GetKeyIdNum() uint64 {
	if x != nil {
		return x.KeyIdNum
	}
	return 0
}

func (x *RequestWebPMessage) GetDcId() int32 {
	if x != nil {
		return x.DcId
	}
	return 0
}

type ReplyRequestWebPagePreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebPage []byte `protobuf:"bytes,1,opt,name=webPage,proto3" json:"webPage,omitempty"`
}

func (x *ReplyRequestWebPagePreview) Reset() {
	*x = ReplyRequestWebPagePreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyRequestWebPagePreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyRequestWebPagePreview) ProtoMessage() {}

func (x *ReplyRequestWebPagePreview) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyRequestWebPagePreview.ProtoReflect.Descriptor instead.
func (*ReplyRequestWebPagePreview) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{193}
}

func (x *ReplyRequestWebPagePreview) GetWebPage() []byte {
	if x != nil {
		return x.WebPage
	}
	return nil
}

// #########################  推送服务 #################################
type Reqpushusermsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PushUserId int32  `protobuf:"varint,1,opt,name=PushUserId,proto3" json:"PushUserId,omitempty"` // 最终推送抵达的用户id
	Fromid     int32  `protobuf:"varint,2,opt,name=Fromid,proto3" json:"Fromid,omitempty"`         // 该推送消息的发送方id
	PushType   string `protobuf:"bytes,3,opt,name=PushType,proto3" json:"PushType,omitempty"`      //1: user 2: chat 3: channel
	Toid       int32  `protobuf:"varint,4,opt,name=Toid,proto3" json:"Toid,omitempty"`             // 该条消息接收方id 可能是userID chatid channelid
	Msg        string `protobuf:"bytes,5,opt,name=Msg,proto3" json:"Msg,omitempty"`                // 消息的文本内容
	MediaType  string `protobuf:"bytes,6,opt,name=MediaType,proto3" json:"MediaType,omitempty"`    // 消息的媒体类型 (video, mp3, photo, doc, sticker)
	Msgid      int32  `protobuf:"varint,7,opt,name=Msgid,proto3" json:"Msgid,omitempty"`           // 该条消息的消息id
}

func (x *Reqpushusermsg) Reset() {
	*x = Reqpushusermsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reqpushusermsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reqpushusermsg) ProtoMessage() {}

func (x *Reqpushusermsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reqpushusermsg.ProtoReflect.Descriptor instead.
func (*Reqpushusermsg) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{194}
}

func (x *Reqpushusermsg) GetPushUserId() int32 {
	if x != nil {
		return x.PushUserId
	}
	return 0
}

func (x *Reqpushusermsg) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *Reqpushusermsg) GetPushType() string {
	if x != nil {
		return x.PushType
	}
	return ""
}

func (x *Reqpushusermsg) GetToid() int32 {
	if x != nil {
		return x.Toid
	}
	return 0
}

func (x *Reqpushusermsg) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Reqpushusermsg) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *Reqpushusermsg) GetMsgid() int32 {
	if x != nil {
		return x.Msgid
	}
	return 0
}

type ReplyPush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply bool `protobuf:"varint,1,opt,name=reply,proto3" json:"reply,omitempty"` // 成功true 失败false
}

func (x *ReplyPush) Reset() {
	*x = ReplyPush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyPush) ProtoMessage() {}

func (x *ReplyPush) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyPush.ProtoReflect.Descriptor instead.
func (*ReplyPush) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{195}
}

func (x *ReplyPush) GetReply() bool {
	if x != nil {
		return x.Reply
	}
	return false
}

type ReqMessageSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfId  int32         `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Peer    []byte        `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	Q       string        `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	FromId  int32         `protobuf:"varint,4,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Filter  []byte        `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	MinDate int32         `protobuf:"varint,6,opt,name=min_date,json=minDate,proto3" json:"min_date,omitempty"`
	MaxDate int32         `protobuf:"varint,7,opt,name=max_date,json=maxDate,proto3" json:"max_date,omitempty"`
	Offset  int32         `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	MaxId   int32         `protobuf:"varint,9,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Limit   int32         `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,11,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqMessageSearch) Reset() {
	*x = ReqMessageSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqMessageSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqMessageSearch) ProtoMessage() {}

func (x *ReqMessageSearch) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqMessageSearch.ProtoReflect.Descriptor instead.
func (*ReqMessageSearch) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{196}
}

func (x *ReqMessageSearch) GetSelfId() int32 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *ReqMessageSearch) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ReqMessageSearch) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ReqMessageSearch) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqMessageSearch) GetFilter() []byte {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ReqMessageSearch) GetMinDate() int32 {
	if x != nil {
		return x.MinDate
	}
	return 0
}

func (x *ReqMessageSearch) GetMaxDate() int32 {
	if x != nil {
		return x.MaxDate
	}
	return 0
}

func (x *ReqMessageSearch) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ReqMessageSearch) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *ReqMessageSearch) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqMessageSearch) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyMessageSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retype  int32      `protobuf:"varint,1,opt,name=retype,proto3" json:"retype,omitempty"` // 1: 表示完全返回 2: 表示无法完全返回需要分片返回
	Count   int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`   // 当需要分片返回的时候 count有值 表示返回的条数
	Message []*UserMsg `protobuf:"bytes,3,rep,name=message,proto3" json:"message,omitempty"`
}

func (x *ReplyMessageSearch) Reset() {
	*x = ReplyMessageSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyMessageSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyMessageSearch) ProtoMessage() {}

func (x *ReplyMessageSearch) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyMessageSearch.ProtoReflect.Descriptor instead.
func (*ReplyMessageSearch) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{197}
}

func (x *ReplyMessageSearch) GetRetype() int32 {
	if x != nil {
		return x.Retype
	}
	return 0
}

func (x *ReplyMessageSearch) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ReplyMessageSearch) GetMessage() []*UserMsg {
	if x != nil {
		return x.Message
	}
	return nil
}

type ReqCheckChatInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId    int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Hash      string        `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqCheckChatInvite) Reset() {
	*x = ReqCheckChatInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCheckChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCheckChatInvite) ProtoMessage() {}

func (x *ReqCheckChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCheckChatInvite.ProtoReflect.Descriptor instead.
func (*ReqCheckChatInvite) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{198}
}

func (x *ReqCheckChatInvite) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqCheckChatInvite) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqCheckChatInvite) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ReqCheckChatInvite) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetChannelsLastMsgsByUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Date   int32         `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChannelsLastMsgsByUserId) Reset() {
	*x = ReqGetChannelsLastMsgsByUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelsLastMsgsByUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelsLastMsgsByUserId) ProtoMessage() {}

func (x *ReqGetChannelsLastMsgsByUserId) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelsLastMsgsByUserId.ProtoReflect.Descriptor instead.
func (*ReqGetChannelsLastMsgsByUserId) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{199}
}

func (x *ReqGetChannelsLastMsgsByUserId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetChannelsLastMsgsByUserId) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ReqGetChannelsLastMsgsByUserId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelsLastMsgsByUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsgs  []*UserMsg `protobuf:"bytes,1,rep,name=userMsgs,proto3" json:"userMsgs,omitempty"`
	ErrorCode int32      `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyGetChannelsLastMsgsByUserId) Reset() {
	*x = ReplyGetChannelsLastMsgsByUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelsLastMsgsByUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelsLastMsgsByUserId) ProtoMessage() {}

func (x *ReplyGetChannelsLastMsgsByUserId) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelsLastMsgsByUserId.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelsLastMsgsByUserId) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{200}
}

func (x *ReplyGetChannelsLastMsgsByUserId) GetUserMsgs() []*UserMsg {
	if x != nil {
		return x.UserMsgs
	}
	return nil
}

func (x *ReplyGetChannelsLastMsgsByUserId) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// #############Admin Logs#############
type ReqChannelAdminLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId   int32                       `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId      int32                       `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId   int64                       `protobuf:"varint,3,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	AccessHash  int64                       `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Q           string                      `protobuf:"bytes,5,opt,name=q,proto3" json:"q,omitempty"`
	EventFilter *ChannelAdminLogEventFilter `protobuf:"bytes,6,opt,name=eventFilter,proto3" json:"eventFilter,omitempty"`
	Admins      []int32                     `protobuf:"varint,7,rep,packed,name=admins,proto3" json:"admins,omitempty"`
	MaxId       int32                       `protobuf:"varint,8,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId       int32                       `protobuf:"varint,9,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	Limit       int32                       `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
	Debug       *pbcomm.Debug               `protobuf:"bytes,11,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqChannelAdminLog) Reset() {
	*x = ReqChannelAdminLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqChannelAdminLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqChannelAdminLog) ProtoMessage() {}

func (x *ReqChannelAdminLog) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqChannelAdminLog.ProtoReflect.Descriptor instead.
func (*ReqChannelAdminLog) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{201}
}

func (x *ReqChannelAdminLog) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqChannelAdminLog) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqChannelAdminLog) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqChannelAdminLog) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqChannelAdminLog) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ReqChannelAdminLog) GetEventFilter() *ChannelAdminLogEventFilter {
	if x != nil {
		return x.EventFilter
	}
	return nil
}

func (x *ReqChannelAdminLog) GetAdmins() []int32 {
	if x != nil {
		return x.Admins
	}
	return nil
}

func (x *ReqChannelAdminLog) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *ReqChannelAdminLog) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *ReqChannelAdminLog) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqChannelAdminLog) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ChannelAdminLogEventFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags   int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Join    bool  `protobuf:"varint,2,opt,name=join,proto3" json:"join,omitempty"`
	Leave   bool  `protobuf:"varint,3,opt,name=leave,proto3" json:"leave,omitempty"`
	Invite  bool  `protobuf:"varint,4,opt,name=invite,proto3" json:"invite,omitempty"`
	Ban     bool  `protobuf:"varint,5,opt,name=ban,proto3" json:"ban,omitempty"`
	Unban   bool  `protobuf:"varint,6,opt,name=unban,proto3" json:"unban,omitempty"`
	Kick    bool  `protobuf:"varint,7,opt,name=kick,proto3" json:"kick,omitempty"`
	Unkick  bool  `protobuf:"varint,8,opt,name=unkick,proto3" json:"unkick,omitempty"`
	Promote bool  `protobuf:"varint,9,opt,name=promote,proto3" json:"promote,omitempty"`
	Demote  bool  `protobuf:"varint,10,opt,name=demote,proto3" json:"demote,omitempty"`
	Info    bool  `protobuf:"varint,11,opt,name=info,proto3" json:"info,omitempty"`
	Setting bool  `protobuf:"varint,12,opt,name=setting,proto3" json:"setting,omitempty"`
	Pinned  bool  `protobuf:"varint,13,opt,name=pinned,proto3" json:"pinned,omitempty"`
	Edit    bool  `protobuf:"varint,14,opt,name=edit,proto3" json:"edit,omitempty"`
	Delete  bool  `protobuf:"varint,15,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *ChannelAdminLogEventFilter) Reset() {
	*x = ChannelAdminLogEventFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelAdminLogEventFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelAdminLogEventFilter) ProtoMessage() {}

func (x *ChannelAdminLogEventFilter) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelAdminLogEventFilter.ProtoReflect.Descriptor instead.
func (*ChannelAdminLogEventFilter) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{202}
}

func (x *ChannelAdminLogEventFilter) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ChannelAdminLogEventFilter) GetJoin() bool {
	if x != nil {
		return x.Join
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetLeave() bool {
	if x != nil {
		return x.Leave
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetInvite() bool {
	if x != nil {
		return x.Invite
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetBan() bool {
	if x != nil {
		return x.Ban
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetUnban() bool {
	if x != nil {
		return x.Unban
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetKick() bool {
	if x != nil {
		return x.Kick
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetUnkick() bool {
	if x != nil {
		return x.Unkick
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetPromote() bool {
	if x != nil {
		return x.Promote
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetDemote() bool {
	if x != nil {
		return x.Demote
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetSetting() bool {
	if x != nil {
		return x.Setting
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetEdit() bool {
	if x != nil {
		return x.Edit
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

type ReplyChannelAdminLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminLogResults []byte `protobuf:"bytes,1,opt,name=adminLogResults,proto3" json:"adminLogResults,omitempty"`
	ErrorCode       int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyChannelAdminLog) Reset() {
	*x = ReplyChannelAdminLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChannelAdminLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChannelAdminLog) ProtoMessage() {}

func (x *ReplyChannelAdminLog) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChannelAdminLog.ProtoReflect.Descriptor instead.
func (*ReplyChannelAdminLog) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{203}
}

func (x *ReplyChannelAdminLog) GetAdminLogResults() []byte {
	if x != nil {
		return x.AdminLogResults
	}
	return nil
}

func (x *ReplyChannelAdminLog) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// ################Import Chat Invite##################
type ReqImportChatInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId    int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Hash      string        `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqImportChatInvite) Reset() {
	*x = ReqImportChatInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqImportChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqImportChatInvite) ProtoMessage() {}

func (x *ReqImportChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqImportChatInvite.ProtoReflect.Descriptor instead.
func (*ReqImportChatInvite) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{204}
}

func (x *ReqImportChatInvite) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqImportChatInvite) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqImportChatInvite) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ReqImportChatInvite) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyImportChatInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates   []byte `protobuf:"bytes,1,opt,name=updates,proto3" json:"updates,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyImportChatInvite) Reset() {
	*x = ReplyImportChatInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyImportChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyImportChatInvite) ProtoMessage() {}

func (x *ReplyImportChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyImportChatInvite.ProtoReflect.Descriptor instead.
func (*ReplyImportChatInvite) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{205}
}

func (x *ReplyImportChatInvite) GetUpdates() []byte {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *ReplyImportChatInvite) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReqBanChannelUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId              int32                `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId           int64                `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId           int32                `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	BannedUserId        int32                `protobuf:"varint,4,opt,name=bannedUserId,proto3" json:"bannedUserId,omitempty"`
	AccessHash          int64                `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	UtilDate            int32                `protobuf:"varint,6,opt,name=util_date,json=utilDate,proto3" json:"util_date,omitempty"`
	ChannelBannedRights *ChannelBannedRights `protobuf:"bytes,7,opt,name=channelBannedRights,proto3" json:"channelBannedRights,omitempty"`
	Debug               *pbcomm.Debug        `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqBanChannelUser) Reset() {
	*x = ReqBanChannelUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBanChannelUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBanChannelUser) ProtoMessage() {}

func (x *ReqBanChannelUser) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBanChannelUser.ProtoReflect.Descriptor instead.
func (*ReqBanChannelUser) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{206}
}

func (x *ReqBanChannelUser) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqBanChannelUser) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqBanChannelUser) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqBanChannelUser) GetBannedUserId() int32 {
	if x != nil {
		return x.BannedUserId
	}
	return 0
}

func (x *ReqBanChannelUser) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqBanChannelUser) GetUtilDate() int32 {
	if x != nil {
		return x.UtilDate
	}
	return 0
}

func (x *ReqBanChannelUser) GetChannelBannedRights() *ChannelBannedRights {
	if x != nil {
		return x.ChannelBannedRights
	}
	return nil
}

func (x *ReqBanChannelUser) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyBanChannelUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates   []byte `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyBanChannelUser) Reset() {
	*x = ReplyBanChannelUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyBanChannelUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyBanChannelUser) ProtoMessage() {}

func (x *ReplyBanChannelUser) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyBanChannelUser.ProtoReflect.Descriptor instead.
func (*ReplyBanChannelUser) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{207}
}

func (x *ReplyBanChannelUser) GetUpdates() []byte {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *ReplyBanChannelUser) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ChannelBannedRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags        int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	ViewMessages bool  `protobuf:"varint,2,opt,name=view_messages,json=viewMessages,proto3" json:"view_messages,omitempty"`
	SendMessages bool  `protobuf:"varint,3,opt,name=send_messages,json=sendMessages,proto3" json:"send_messages,omitempty"`
	SendMedia    bool  `protobuf:"varint,4,opt,name=send_media,json=sendMedia,proto3" json:"send_media,omitempty"`
	SendStickers bool  `protobuf:"varint,5,opt,name=send_stickers,json=sendStickers,proto3" json:"send_stickers,omitempty"`
	SendGifs     bool  `protobuf:"varint,6,opt,name=send_gifs,json=sendGifs,proto3" json:"send_gifs,omitempty"`
	SendGames    bool  `protobuf:"varint,7,opt,name=send_games,json=sendGames,proto3" json:"send_games,omitempty"`
	SendInline   bool  `protobuf:"varint,8,opt,name=send_inline,json=sendInline,proto3" json:"send_inline,omitempty"`
	EmbedLinks   bool  `protobuf:"varint,9,opt,name=embed_links,json=embedLinks,proto3" json:"embed_links,omitempty"`
	UntilDate    int32 `protobuf:"varint,10,opt,name=until_date,json=untilDate,proto3" json:"until_date,omitempty"`
	// @ add by Qingsong at 2019-11-14 for ban member rights.
	InviteUser      bool `protobuf:"varint,11,opt,name=invite_user,json=inviteUser,proto3" json:"invite_user,omitempty"`                  // 邀請用戶
	PinMessage      bool `protobuf:"varint,12,opt,name=pin_message,json=pinMessage,proto3" json:"pin_message,omitempty"`                  // 置頂消息
	ChangeGroupInfo bool `protobuf:"varint,13,opt,name=change_group_info,json=changeGroupInfo,proto3" json:"change_group_info,omitempty"` // 修群组信息
	SendPolls       bool `protobuf:"varint,14,opt,name=send_polls,json=sendPolls,proto3" json:"send_polls,omitempty"`                     // 发起投票权限
}

func (x *ChannelBannedRights) Reset() {
	*x = ChannelBannedRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelBannedRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelBannedRights) ProtoMessage() {}

func (x *ChannelBannedRights) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelBannedRights.ProtoReflect.Descriptor instead.
func (*ChannelBannedRights) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{208}
}

func (x *ChannelBannedRights) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ChannelBannedRights) GetViewMessages() bool {
	if x != nil {
		return x.ViewMessages
	}
	return false
}

func (x *ChannelBannedRights) GetSendMessages() bool {
	if x != nil {
		return x.SendMessages
	}
	return false
}

func (x *ChannelBannedRights) GetSendMedia() bool {
	if x != nil {
		return x.SendMedia
	}
	return false
}

func (x *ChannelBannedRights) GetSendStickers() bool {
	if x != nil {
		return x.SendStickers
	}
	return false
}

func (x *ChannelBannedRights) GetSendGifs() bool {
	if x != nil {
		return x.SendGifs
	}
	return false
}

func (x *ChannelBannedRights) GetSendGames() bool {
	if x != nil {
		return x.SendGames
	}
	return false
}

func (x *ChannelBannedRights) GetSendInline() bool {
	if x != nil {
		return x.SendInline
	}
	return false
}

func (x *ChannelBannedRights) GetEmbedLinks() bool {
	if x != nil {
		return x.EmbedLinks
	}
	return false
}

func (x *ChannelBannedRights) GetUntilDate() int32 {
	if x != nil {
		return x.UntilDate
	}
	return 0
}

func (x *ChannelBannedRights) GetInviteUser() bool {
	if x != nil {
		return x.InviteUser
	}
	return false
}

func (x *ChannelBannedRights) GetPinMessage() bool {
	if x != nil {
		return x.PinMessage
	}
	return false
}

func (x *ChannelBannedRights) GetChangeGroupInfo() bool {
	if x != nil {
		return x.ChangeGroupInfo
	}
	return false
}

func (x *ChannelBannedRights) GetSendPolls() bool {
	if x != nil {
		return x.SendPolls
	}
	return false
}

// 获取fullchannel
type ReqFullchannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChannelId  int32         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqFullchannel) Reset() {
	*x = ReqFullchannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFullchannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFullchannel) ProtoMessage() {}

func (x *ReqFullchannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFullchannel.ProtoReflect.Descriptor instead.
func (*ReqFullchannel) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{209}
}

func (x *ReqFullchannel) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqFullchannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqFullchannel) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqFullchannel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 创建超级群的邀请链接
type ReqExportChannelLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqExportChannelLink) Reset() {
	*x = ReqExportChannelLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqExportChannelLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqExportChannelLink) ProtoMessage() {}

func (x *ReqExportChannelLink) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqExportChannelLink.ProtoReflect.Descriptor instead.
func (*ReqExportChannelLink) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{210}
}

func (x *ReqExportChannelLink) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqExportChannelLink) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqExportChannelLink) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回超级群的邀请链接
type ReplyExportChannelLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exported  []byte `protobuf:"bytes,1,opt,name=exported,proto3" json:"exported,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyExportChannelLink) Reset() {
	*x = ReplyExportChannelLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyExportChannelLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyExportChannelLink) ProtoMessage() {}

func (x *ReplyExportChannelLink) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyExportChannelLink.ProtoReflect.Descriptor instead.
func (*ReplyExportChannelLink) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{211}
}

func (x *ReplyExportChannelLink) GetExported() []byte {
	if x != nil {
		return x.Exported
	}
	return nil
}

func (x *ReplyExportChannelLink) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 是否允许普通成员邀请人
type ReqChannelToggleInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Enabled    bool          `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqChannelToggleInvite) Reset() {
	*x = ReqChannelToggleInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqChannelToggleInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqChannelToggleInvite) ProtoMessage() {}

func (x *ReqChannelToggleInvite) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqChannelToggleInvite.ProtoReflect.Descriptor instead.
func (*ReqChannelToggleInvite) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{212}
}

func (x *ReqChannelToggleInvite) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqChannelToggleInvite) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqChannelToggleInvite) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ReqChannelToggleInvite) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqChannelToggleInvite) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 回复toggle invite
type ReplyChannelToggleInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyChannelToggleInvite) Reset() {
	*x = ReplyChannelToggleInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChannelToggleInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChannelToggleInvite) ProtoMessage() {}

func (x *ReplyChannelToggleInvite) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChannelToggleInvite.ProtoReflect.Descriptor instead.
func (*ReplyChannelToggleInvite) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{213}
}

func (x *ReplyChannelToggleInvite) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyChannelToggleInvite) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 修改channel user name
type ReqChannelUpdateUserName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	FromId     int32         `protobuf:"varint,3,opt,name=fromId,proto3" json:"fromId,omitempty"`
	UserName   string        `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqChannelUpdateUserName) Reset() {
	*x = ReqChannelUpdateUserName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqChannelUpdateUserName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqChannelUpdateUserName) ProtoMessage() {}

func (x *ReqChannelUpdateUserName) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqChannelUpdateUserName.ProtoReflect.Descriptor instead.
func (*ReqChannelUpdateUserName) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{214}
}

func (x *ReqChannelUpdateUserName) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqChannelUpdateUserName) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqChannelUpdateUserName) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqChannelUpdateUserName) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ReqChannelUpdateUserName) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 回复channel user name
type ReplyChannelUpdateUserName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updated   bool  `protobuf:"varint,1,opt,name=updated,proto3" json:"updated,omitempty"`
	ErrorCode int32 `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyChannelUpdateUserName) Reset() {
	*x = ReplyChannelUpdateUserName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChannelUpdateUserName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChannelUpdateUserName) ProtoMessage() {}

func (x *ReplyChannelUpdateUserName) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChannelUpdateUserName.ProtoReflect.Descriptor instead.
func (*ReplyChannelUpdateUserName) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{215}
}

func (x *ReplyChannelUpdateUserName) GetUpdated() bool {
	if x != nil {
		return x.Updated
	}
	return false
}

func (x *ReplyChannelUpdateUserName) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 修改channel user name
type ReqChannelCheckUserName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	FromId     int32         `protobuf:"varint,3,opt,name=fromId,proto3" json:"fromId,omitempty"`
	UserName   string        `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqChannelCheckUserName) Reset() {
	*x = ReqChannelCheckUserName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqChannelCheckUserName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqChannelCheckUserName) ProtoMessage() {}

func (x *ReqChannelCheckUserName) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqChannelCheckUserName.ProtoReflect.Descriptor instead.
func (*ReqChannelCheckUserName) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{216}
}

func (x *ReqChannelCheckUserName) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqChannelCheckUserName) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqChannelCheckUserName) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqChannelCheckUserName) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ReqChannelCheckUserName) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 回复channel user name
type ReplyChannelCheckUserName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid     bool  `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	ErrorCode int32 `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyChannelCheckUserName) Reset() {
	*x = ReplyChannelCheckUserName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChannelCheckUserName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChannelCheckUserName) ProtoMessage() {}

func (x *ReplyChannelCheckUserName) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChannelCheckUserName.ProtoReflect.Descriptor instead.
func (*ReplyChannelCheckUserName) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{217}
}

func (x *ReplyChannelCheckUserName) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ReplyChannelCheckUserName) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 转移群主
type ReqChangeGroupAndChannelCrator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    int32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	FromId     int32 `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	OperatorId int32 `protobuf:"varint,3,opt,name=OperatorId,proto3" json:"OperatorId,omitempty"`
	IsChat     bool  `protobuf:"varint,4,opt,name=IsChat,proto3" json:"IsChat,omitempty"`
}

func (x *ReqChangeGroupAndChannelCrator) Reset() {
	*x = ReqChangeGroupAndChannelCrator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqChangeGroupAndChannelCrator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqChangeGroupAndChannelCrator) ProtoMessage() {}

func (x *ReqChangeGroupAndChannelCrator) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqChangeGroupAndChannelCrator.ProtoReflect.Descriptor instead.
func (*ReqChangeGroupAndChannelCrator) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{218}
}

func (x *ReqChangeGroupAndChannelCrator) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ReqChangeGroupAndChannelCrator) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqChangeGroupAndChannelCrator) GetOperatorId() int32 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *ReqChangeGroupAndChannelCrator) GetIsChat() bool {
	if x != nil {
		return x.IsChat
	}
	return false
}

// 回复转移群主
type ReplyChangeGroupAndChannelCrator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid     bool  `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	ErrorCode int32 `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyChangeGroupAndChannelCrator) Reset() {
	*x = ReplyChangeGroupAndChannelCrator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChangeGroupAndChannelCrator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChangeGroupAndChannelCrator) ProtoMessage() {}

func (x *ReplyChangeGroupAndChannelCrator) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChangeGroupAndChannelCrator.ProtoReflect.Descriptor instead.
func (*ReplyChangeGroupAndChannelCrator) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{219}
}

func (x *ReplyChangeGroupAndChannelCrator) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ReplyChangeGroupAndChannelCrator) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 请求给定channel
type ReqGetChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelIds []int32       `protobuf:"varint,1,rep,packed,name=channelIds,proto3" json:"channelIds,omitempty"`
	FromId     int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChannels) Reset() {
	*x = ReqGetChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannels) ProtoMessage() {}

func (x *ReqGetChannels) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannels.ProtoReflect.Descriptor instead.
func (*ReqGetChannels) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{220}
}

func (x *ReqGetChannels) GetChannelIds() []int32 {
	if x != nil {
		return x.ChannelIds
	}
	return nil
}

func (x *ReqGetChannels) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetChannels) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回get channles
type ReplyGetChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyGetChannels) Reset() {
	*x = ReplyGetChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannels) ProtoMessage() {}

func (x *ReplyGetChannels) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannels.ProtoReflect.Descriptor instead.
func (*ReplyGetChannels) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{221}
}

func (x *ReplyGetChannels) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyGetChannels) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 返回fullchannel
type ReplyFullChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates   []byte `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyFullChannel) Reset() {
	*x = ReplyFullChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyFullChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyFullChannel) ProtoMessage() {}

func (x *ReplyFullChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyFullChannel.ProtoReflect.Descriptor instead.
func (*ReplyFullChannel) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{222}
}

func (x *ReplyFullChannel) GetUpdates() []byte {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *ReplyFullChannel) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReqGetMessageByUserIdMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MsgId  int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetMessageByUserIdMsgId) Reset() {
	*x = ReqGetMessageByUserIdMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetMessageByUserIdMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetMessageByUserIdMsgId) ProtoMessage() {}

func (x *ReqGetMessageByUserIdMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetMessageByUserIdMsgId.ProtoReflect.Descriptor instead.
func (*ReqGetMessageByUserIdMsgId) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{223}
}

func (x *ReqGetMessageByUserIdMsgId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetMessageByUserIdMsgId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqGetMessageByUserIdMsgId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetMessageByUserIdMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMessage *pbmessagedb.UserMsg `protobuf:"bytes,1,opt,name=UserMessage,proto3" json:"UserMessage,omitempty"`
	ErrorCode   int32                `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyGetMessageByUserIdMsgId) Reset() {
	*x = ReplyGetMessageByUserIdMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetMessageByUserIdMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetMessageByUserIdMsgId) ProtoMessage() {}

func (x *ReplyGetMessageByUserIdMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetMessageByUserIdMsgId.ProtoReflect.Descriptor instead.
func (*ReplyGetMessageByUserIdMsgId) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{224}
}

func (x *ReplyGetMessageByUserIdMsgId) GetUserMessage() *pbmessagedb.UserMsg {
	if x != nil {
		return x.UserMessage
	}
	return nil
}

func (x *ReplyGetMessageByUserIdMsgId) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReqGetMessageByUserIdUuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Uuid   int64         `protobuf:"varint,2,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetMessageByUserIdUuid) Reset() {
	*x = ReqGetMessageByUserIdUuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetMessageByUserIdUuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetMessageByUserIdUuid) ProtoMessage() {}

func (x *ReqGetMessageByUserIdUuid) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetMessageByUserIdUuid.ProtoReflect.Descriptor instead.
func (*ReqGetMessageByUserIdUuid) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{225}
}

func (x *ReqGetMessageByUserIdUuid) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetMessageByUserIdUuid) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *ReqGetMessageByUserIdUuid) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetMessageByUserIdUuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMessage *pbmessagedb.UserMsg `protobuf:"bytes,1,opt,name=UserMessage,proto3" json:"UserMessage,omitempty"`
	ErrorCode   int32                `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyGetMessageByUserIdUuid) Reset() {
	*x = ReplyGetMessageByUserIdUuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetMessageByUserIdUuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetMessageByUserIdUuid) ProtoMessage() {}

func (x *ReplyGetMessageByUserIdUuid) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetMessageByUserIdUuid.ProtoReflect.Descriptor instead.
func (*ReplyGetMessageByUserIdUuid) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{226}
}

func (x *ReplyGetMessageByUserIdUuid) GetUserMessage() *pbmessagedb.UserMsg {
	if x != nil {
		return x.UserMessage
	}
	return nil
}

func (x *ReplyGetMessageByUserIdUuid) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReqGetChannelMessageByChannelIdMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	MsgId     int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChannelMessageByChannelIdMsgId) Reset() {
	*x = ReqGetChannelMessageByChannelIdMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMessageByChannelIdMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMessageByChannelIdMsgId) ProtoMessage() {}

func (x *ReqGetChannelMessageByChannelIdMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMessageByChannelIdMsgId.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMessageByChannelIdMsgId) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{227}
}

func (x *ReqGetChannelMessageByChannelIdMsgId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelMessageByChannelIdMsgId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqGetChannelMessageByChannelIdMsgId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelMessageByChannelIdMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMessage *pbmessagedb.UserMsg `protobuf:"bytes,1,opt,name=UserMessage,proto3" json:"UserMessage,omitempty"`
	ErrorCode   int32                `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyGetChannelMessageByChannelIdMsgId) Reset() {
	*x = ReplyGetChannelMessageByChannelIdMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelMessageByChannelIdMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelMessageByChannelIdMsgId) ProtoMessage() {}

func (x *ReplyGetChannelMessageByChannelIdMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelMessageByChannelIdMsgId.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelMessageByChannelIdMsgId) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{228}
}

func (x *ReplyGetChannelMessageByChannelIdMsgId) GetUserMessage() *pbmessagedb.UserMsg {
	if x != nil {
		return x.UserMessage
	}
	return nil
}

func (x *ReplyGetChannelMessageByChannelIdMsgId) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReplyStoreOtherInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyStoreOtherInfoMsg) Reset() {
	*x = ReplyStoreOtherInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyStoreOtherInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyStoreOtherInfoMsg) ProtoMessage() {}

func (x *ReplyStoreOtherInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyStoreOtherInfoMsg.ProtoReflect.Descriptor instead.
func (*ReplyStoreOtherInfoMsg) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{229}
}

func (x *ReplyStoreOtherInfoMsg) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReplyBatchStoreOtherInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyBatchStoreOtherInfoMsg) Reset() {
	*x = ReplyBatchStoreOtherInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyBatchStoreOtherInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyBatchStoreOtherInfoMsg) ProtoMessage() {}

func (x *ReplyBatchStoreOtherInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyBatchStoreOtherInfoMsg.ProtoReflect.Descriptor instead.
func (*ReplyBatchStoreOtherInfoMsg) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{230}
}

func (x *ReplyBatchStoreOtherInfoMsg) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReplyGetOtherInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherInfoMsgs []*pbmessagedb.OtherInfoMsg `protobuf:"bytes,1,rep,name=OtherInfoMsgs,proto3" json:"OtherInfoMsgs,omitempty"`           // 其他消息二进制列表
	ErrorCode     int32                       `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` // 错误码
}

func (x *ReplyGetOtherInfoMsg) Reset() {
	*x = ReplyGetOtherInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetOtherInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetOtherInfoMsg) ProtoMessage() {}

func (x *ReplyGetOtherInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetOtherInfoMsg.ProtoReflect.Descriptor instead.
func (*ReplyGetOtherInfoMsg) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{231}
}

func (x *ReplyGetOtherInfoMsg) GetOtherInfoMsgs() []*pbmessagedb.OtherInfoMsg {
	if x != nil {
		return x.OtherInfoMsgs
	}
	return nil
}

func (x *ReplyGetOtherInfoMsg) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReqGetUsersChatsMt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfUserid int32         `protobuf:"varint,1,opt,name=self_userid,json=selfUserid,proto3" json:"self_userid,omitempty"`
	UseridArr  []int32       `protobuf:"varint,2,rep,packed,name=userid_arr,json=useridArr,proto3" json:"userid_arr,omitempty"`
	ChatidArr  []int32       `protobuf:"varint,3,rep,packed,name=chatid_arr,json=chatidArr,proto3" json:"chatid_arr,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetUsersChatsMt) Reset() {
	*x = ReqGetUsersChatsMt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUsersChatsMt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUsersChatsMt) ProtoMessage() {}

func (x *ReqGetUsersChatsMt) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUsersChatsMt.ProtoReflect.Descriptor instead.
func (*ReqGetUsersChatsMt) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{232}
}

func (x *ReqGetUsersChatsMt) GetSelfUserid() int32 {
	if x != nil {
		return x.SelfUserid
	}
	return 0
}

func (x *ReqGetUsersChatsMt) GetUseridArr() []int32 {
	if x != nil {
		return x.UseridArr
	}
	return nil
}

func (x *ReqGetUsersChatsMt) GetChatidArr() []int32 {
	if x != nil {
		return x.ChatidArr
	}
	return nil
}

func (x *ReqGetUsersChatsMt) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetUsersChatsMt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users     []byte `protobuf:"bytes,1,opt,name=users,proto3" json:"users,omitempty"`
	Chats     []byte `protobuf:"bytes,2,opt,name=chats,proto3" json:"chats,omitempty"`
	ReplyCode int32  `protobuf:"varint,3,opt,name=ReplyCode,proto3" json:"ReplyCode,omitempty"`
}

func (x *ReplyGetUsersChatsMt) Reset() {
	*x = ReplyGetUsersChatsMt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetUsersChatsMt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetUsersChatsMt) ProtoMessage() {}

func (x *ReplyGetUsersChatsMt) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetUsersChatsMt.ProtoReflect.Descriptor instead.
func (*ReplyGetUsersChatsMt) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{233}
}

func (x *ReplyGetUsersChatsMt) GetUsers() []byte {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ReplyGetUsersChatsMt) GetChats() []byte {
	if x != nil {
		return x.Chats
	}
	return nil
}

func (x *ReplyGetUsersChatsMt) GetReplyCode() int32 {
	if x != nil {
		return x.ReplyCode
	}
	return 0
}

// gif查询上传请求
type ReqGifQueryAndUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GifId string `protobuf:"bytes,1,opt,name=gif_id,json=gifId,proto3" json:"gif_id,omitempty"`
}

func (x *ReqGifQueryAndUpload) Reset() {
	*x = ReqGifQueryAndUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGifQueryAndUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGifQueryAndUpload) ProtoMessage() {}

func (x *ReqGifQueryAndUpload) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGifQueryAndUpload.ProtoReflect.Descriptor instead.
func (*ReqGifQueryAndUpload) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{234}
}

func (x *ReqGifQueryAndUpload) GetGifId() string {
	if x != nil {
		return x.GifId
	}
	return ""
}

// gif查询上传返回
type ReplyGifQueryAndUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *FidData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReplyGifQueryAndUpload) Reset() {
	*x = ReplyGifQueryAndUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGifQueryAndUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGifQueryAndUpload) ProtoMessage() {}

func (x *ReplyGifQueryAndUpload) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGifQueryAndUpload.ProtoReflect.Descriptor instead.
func (*ReplyGifQueryAndUpload) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{235}
}

func (x *ReplyGifQueryAndUpload) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ReplyGifQueryAndUpload) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReplyGifQueryAndUpload) GetData() *FidData {
	if x != nil {
		return x.Data
	}
	return nil
}

// gif查询上传数据
type FidData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid        uint64 `protobuf:"varint,2,opt,name=fid,proto3" json:"fid,omitempty"`
	AccessHash uint64 `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FileSize   uint64 `protobuf:"varint,4,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Result     int32  `protobuf:"varint,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *FidData) Reset() {
	*x = FidData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FidData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FidData) ProtoMessage() {}

func (x *FidData) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FidData.ProtoReflect.Descriptor instead.
func (*FidData) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{236}
}

func (x *FidData) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *FidData) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *FidData) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *FidData) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

// gif搜索请求
type ReqGifSearchApi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Q      string `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	Limit  int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ReqGifSearchApi) Reset() {
	*x = ReqGifSearchApi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGifSearchApi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGifSearchApi) ProtoMessage() {}

func (x *ReqGifSearchApi) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGifSearchApi.ProtoReflect.Descriptor instead.
func (*ReqGifSearchApi) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{237}
}

func (x *ReqGifSearchApi) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ReqGifSearchApi) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGifSearchApi) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// gif搜索返回
type ReplyGifSearchApi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool          `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*SearchData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Page    *Pagination   `protobuf:"bytes,4,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ReplyGifSearchApi) Reset() {
	*x = ReplyGifSearchApi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGifSearchApi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGifSearchApi) ProtoMessage() {}

func (x *ReplyGifSearchApi) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGifSearchApi.ProtoReflect.Descriptor instead.
func (*ReplyGifSearchApi) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{238}
}

func (x *ReplyGifSearchApi) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ReplyGifSearchApi) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReplyGifSearchApi) GetData() []*SearchData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReplyGifSearchApi) GetPage() *Pagination {
	if x != nil {
		return x.Page
	}
	return nil
}

// gif搜索数据
type SearchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id          string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Url         string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	ThumbUrl    string `protobuf:"bytes,5,opt,name=thumb_url,json=thumbUrl,proto3" json:"thumb_url,omitempty"`
	ContentUrl  string `protobuf:"bytes,6,opt,name=content_url,json=contentUrl,proto3" json:"content_url,omitempty"`
	ContentType string `protobuf:"bytes,7,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Width       int32  `protobuf:"varint,8,opt,name=width,proto3" json:"width,omitempty"`
	Height      int32  `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *SearchData) Reset() {
	*x = SearchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchData) ProtoMessage() {}

func (x *SearchData) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchData.ProtoReflect.Descriptor instead.
func (*SearchData) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{239}
}

func (x *SearchData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SearchData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SearchData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SearchData) GetThumbUrl() string {
	if x != nil {
		return x.ThumbUrl
	}
	return ""
}

func (x *SearchData) GetContentUrl() string {
	if x != nil {
		return x.ContentUrl
	}
	return ""
}

func (x *SearchData) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *SearchData) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SearchData) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// 分页数据
type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int32 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Count      int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Offset     int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{240}
}

func (x *Pagination) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *Pagination) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Pagination) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// 领取红包请求
type ReqReceiveRedPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromKeyid      int64         `protobuf:"varint,1,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	UserId         int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerId         int32         `protobuf:"varint,3,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	PeerType       int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerAccessHash int64         `protobuf:"varint,5,opt,name=peer_access_hash,json=peerAccessHash,proto3" json:"peer_access_hash,omitempty"`
	RedPacketId    int64         `protobuf:"varint,6,opt,name=red_packet_id,json=redPacketId,proto3" json:"red_packet_id,omitempty"`
	Debug          *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqReceiveRedPacket) Reset() {
	*x = ReqReceiveRedPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqReceiveRedPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqReceiveRedPacket) ProtoMessage() {}

func (x *ReqReceiveRedPacket) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqReceiveRedPacket.ProtoReflect.Descriptor instead.
func (*ReqReceiveRedPacket) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{241}
}

func (x *ReqReceiveRedPacket) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqReceiveRedPacket) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqReceiveRedPacket) GetPeerId() int32 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *ReqReceiveRedPacket) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *ReqReceiveRedPacket) GetPeerAccessHash() int64 {
	if x != nil {
		return x.PeerAccessHash
	}
	return 0
}

func (x *ReqReceiveRedPacket) GetRedPacketId() int64 {
	if x != nil {
		return x.RedPacketId
	}
	return 0
}

func (x *ReqReceiveRedPacket) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 领取红包请求结果
type ReplyReceiveRedPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyReceiveRedPacket) Reset() {
	*x = ReplyReceiveRedPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyReceiveRedPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyReceiveRedPacket) ProtoMessage() {}

func (x *ReplyReceiveRedPacket) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyReceiveRedPacket.ProtoReflect.Descriptor instead.
func (*ReplyReceiveRedPacket) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{242}
}

func (x *ReplyReceiveRedPacket) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyReceiveRedPacket) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// webpage req
type ReqGetWebPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ReqGetWebPage) Reset() {
	*x = ReqGetWebPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetWebPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetWebPage) ProtoMessage() {}

func (x *ReqGetWebPage) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetWebPage.ProtoReflect.Descriptor instead.
func (*ReqGetWebPage) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{243}
}

func (x *ReqGetWebPage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// webpage reply
type ReplyGetWebPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	WebPage *WebPage `protobuf:"bytes,3,opt,name=webPage,proto3" json:"webPage,omitempty"`
}

func (x *ReplyGetWebPage) Reset() {
	*x = ReplyGetWebPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetWebPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetWebPage) ProtoMessage() {}

func (x *ReplyGetWebPage) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetWebPage.ProtoReflect.Descriptor instead.
func (*ReplyGetWebPage) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{244}
}

func (x *ReplyGetWebPage) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ReplyGetWebPage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReplyGetWebPage) GetWebPage() *WebPage {
	if x != nil {
		return x.WebPage
	}
	return nil
}

// webpage data
type WebPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Url         string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	DisplayUrl  string `protobuf:"bytes,3,opt,name=display_url,json=displayUrl,proto3" json:"display_url,omitempty"`
	Type        string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	SiteName    string `protobuf:"bytes,5,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	Title       string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Photo       string `protobuf:"bytes,8,opt,name=photo,proto3" json:"photo,omitempty"`
	EmbedUrl    string `protobuf:"bytes,9,opt,name=embed_url,json=embedUrl,proto3" json:"embed_url,omitempty"`
	EmbedType   string `protobuf:"bytes,10,opt,name=embed_type,json=embedType,proto3" json:"embed_type,omitempty"`
	EmbedWidth  int32  `protobuf:"varint,11,opt,name=embed_width,json=embedWidth,proto3" json:"embed_width,omitempty"`
	EmbedHeight int32  `protobuf:"varint,12,opt,name=embed_height,json=embedHeight,proto3" json:"embed_height,omitempty"`
	Author      string `protobuf:"bytes,13,opt,name=author,proto3" json:"author,omitempty"`
}

func (x *WebPage) Reset() {
	*x = WebPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebPage) ProtoMessage() {}

func (x *WebPage) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebPage.ProtoReflect.Descriptor instead.
func (*WebPage) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{245}
}

func (x *WebPage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebPage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *WebPage) GetDisplayUrl() string {
	if x != nil {
		return x.DisplayUrl
	}
	return ""
}

func (x *WebPage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WebPage) GetSiteName() string {
	if x != nil {
		return x.SiteName
	}
	return ""
}

func (x *WebPage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WebPage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WebPage) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *WebPage) GetEmbedUrl() string {
	if x != nil {
		return x.EmbedUrl
	}
	return ""
}

func (x *WebPage) GetEmbedType() string {
	if x != nil {
		return x.EmbedType
	}
	return ""
}

func (x *WebPage) GetEmbedWidth() int32 {
	if x != nil {
		return x.EmbedWidth
	}
	return 0
}

func (x *WebPage) GetEmbedHeight() int32 {
	if x != nil {
		return x.EmbedHeight
	}
	return 0
}

func (x *WebPage) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

type ReqGetWebPagePreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ReqGetWebPagePreview) Reset() {
	*x = ReqGetWebPagePreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetWebPagePreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetWebPagePreview) ProtoMessage() {}

func (x *ReqGetWebPagePreview) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetWebPagePreview.ProtoReflect.Descriptor instead.
func (*ReqGetWebPagePreview) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{246}
}

func (x *ReqGetWebPagePreview) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ReplyGetWebPagePreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	WebPage *WebPage `protobuf:"bytes,3,opt,name=webPage,proto3" json:"webPage,omitempty"`
}

func (x *ReplyGetWebPagePreview) Reset() {
	*x = ReplyGetWebPagePreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetWebPagePreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetWebPagePreview) ProtoMessage() {}

func (x *ReplyGetWebPagePreview) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetWebPagePreview.ProtoReflect.Descriptor instead.
func (*ReplyGetWebPagePreview) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{247}
}

func (x *ReplyGetWebPagePreview) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ReplyGetWebPagePreview) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReplyGetWebPagePreview) GetWebPage() *WebPage {
	if x != nil {
		return x.WebPage
	}
	return nil
}

// 用户分数
type UserScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32 `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"` // 用户id
	Score  int32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`   // 用户分数
}

func (x *UserScore) Reset() {
	*x = UserScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserScore) ProtoMessage() {}

func (x *UserScore) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserScore.ProtoReflect.Descriptor instead.
func (*UserScore) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{248}
}

func (x *UserScore) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *UserScore) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type FoldersEditPeerFoldersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid      int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"` // 用户id
	FolderPeers [][]byte      `protobuf:"bytes,2,rep,name=folder_peers,json=folderPeers,proto3" json:"folder_peers,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *FoldersEditPeerFoldersReq) Reset() {
	*x = FoldersEditPeerFoldersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoldersEditPeerFoldersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoldersEditPeerFoldersReq) ProtoMessage() {}

func (x *FoldersEditPeerFoldersReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoldersEditPeerFoldersReq.ProtoReflect.Descriptor instead.
func (*FoldersEditPeerFoldersReq) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{249}
}

func (x *FoldersEditPeerFoldersReq) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *FoldersEditPeerFoldersReq) GetFolderPeers() [][]byte {
	if x != nil {
		return x.FolderPeers
	}
	return nil
}

func (x *FoldersEditPeerFoldersReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type FoldersEditPeerFoldersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // 对话框数据返回
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`  // 1: 无法获取到 2: userid 为0  3: 数据库返回超时 4: 消息服务crash
}

func (x *FoldersEditPeerFoldersReply) Reset() {
	*x = FoldersEditPeerFoldersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoldersEditPeerFoldersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoldersEditPeerFoldersReply) ProtoMessage() {}

func (x *FoldersEditPeerFoldersReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoldersEditPeerFoldersReply.ProtoReflect.Descriptor instead.
func (*FoldersEditPeerFoldersReply) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{250}
}

func (x *FoldersEditPeerFoldersReply) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *FoldersEditPeerFoldersReply) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type FoldersDeleteFolderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid   int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"` // 用户id
	FolderId int32         `protobuf:"varint,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *FoldersDeleteFolderReq) Reset() {
	*x = FoldersDeleteFolderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoldersDeleteFolderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoldersDeleteFolderReq) ProtoMessage() {}

func (x *FoldersDeleteFolderReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoldersDeleteFolderReq.ProtoReflect.Descriptor instead.
func (*FoldersDeleteFolderReq) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{251}
}

func (x *FoldersDeleteFolderReq) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *FoldersDeleteFolderReq) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *FoldersDeleteFolderReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type FoldersDeleteFolderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // 对话框数据返回
	Error  int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`  // 1: 无法获取到 2: userid 为0  3: 数据库返回超时 4: 消息服务crash
}

func (x *FoldersDeleteFolderReply) Reset() {
	*x = FoldersDeleteFolderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoldersDeleteFolderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoldersDeleteFolderReply) ProtoMessage() {}

func (x *FoldersDeleteFolderReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoldersDeleteFolderReply.ProtoReflect.Descriptor instead.
func (*FoldersDeleteFolderReply) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{252}
}

func (x *FoldersDeleteFolderReply) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *FoldersDeleteFolderReply) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 为红包通知定制系统号发送消息的请求
type ReqSendPaymentNotifyMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //通知的用户Id
	AccessHash int64         `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"` // 用户hash
	FromId     int32         `protobuf:"varint,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`             //通知浩的Id 777000
	Message    string        `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`                          //通知消息
	Media      []byte        `protobuf:"bytes,5,opt,name=media,proto3" json:"media,omitempty"`                              // 通知的媒体 mtproto.TL.ENcode
	MediaType  int32         `protobuf:"varint,6,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`    //媒体类型 其中  33 代表支付通知,  37 红包通知
	Debug      *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`                              // debug日志
}

func (x *ReqSendPaymentNotifyMsg) Reset() {
	*x = ReqSendPaymentNotifyMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendPaymentNotifyMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendPaymentNotifyMsg) ProtoMessage() {}

func (x *ReqSendPaymentNotifyMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendPaymentNotifyMsg.ProtoReflect.Descriptor instead.
func (*ReqSendPaymentNotifyMsg) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{253}
}

func (x *ReqSendPaymentNotifyMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqSendPaymentNotifyMsg) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqSendPaymentNotifyMsg) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqSendPaymentNotifyMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReqSendPaymentNotifyMsg) GetMedia() []byte {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *ReqSendPaymentNotifyMsg) GetMediaType() int32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *ReqSendPaymentNotifyMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 为红包通知定制系统号发送消息的请求返回
type RspSendPaymentNotifyMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"` //是否成功
}

func (x *RspSendPaymentNotifyMsg) Reset() {
	*x = RspSendPaymentNotifyMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSendPaymentNotifyMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSendPaymentNotifyMsg) ProtoMessage() {}

func (x *RspSendPaymentNotifyMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSendPaymentNotifyMsg.ProtoReflect.Descriptor instead.
func (*RspSendPaymentNotifyMsg) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{254}
}

func (x *RspSendPaymentNotifyMsg) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

// 定制加好友成功后的相互通知消息  （你们已经是好友了，可以进行聊天了）
type ReqSendAddMutulContactNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //接受方的ID
	FromId int32         `protobuf:"varint,2,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"` // 申请方的userId
	Debug  *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`                  // debug日志
}

func (x *ReqSendAddMutulContactNotify) Reset() {
	*x = ReqSendAddMutulContactNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendAddMutulContactNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendAddMutulContactNotify) ProtoMessage() {}

func (x *ReqSendAddMutulContactNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendAddMutulContactNotify.ProtoReflect.Descriptor instead.
func (*ReqSendAddMutulContactNotify) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{255}
}

func (x *ReqSendAddMutulContactNotify) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqSendAddMutulContactNotify) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqSendAddMutulContactNotify) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type RespSendAddMutulContactNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sucessful bool `protobuf:"varint,1,opt,name=sucessful,proto3" json:"sucessful,omitempty"` //是否成功
}

func (x *RespSendAddMutulContactNotify) Reset() {
	*x = RespSendAddMutulContactNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespSendAddMutulContactNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespSendAddMutulContactNotify) ProtoMessage() {}

func (x *RespSendAddMutulContactNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespSendAddMutulContactNotify.ProtoReflect.Descriptor instead.
func (*RespSendAddMutulContactNotify) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{256}
}

func (x *RespSendAddMutulContactNotify) GetSucessful() bool {
	if x != nil {
		return x.Sucessful
	}
	return false
}

type ReqSendAddSingleContactNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ToId   int32         `protobuf:"varint,2,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqSendAddSingleContactNotify) Reset() {
	*x = ReqSendAddSingleContactNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendAddSingleContactNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendAddSingleContactNotify) ProtoMessage() {}

func (x *ReqSendAddSingleContactNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendAddSingleContactNotify.ProtoReflect.Descriptor instead.
func (*ReqSendAddSingleContactNotify) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{257}
}

func (x *ReqSendAddSingleContactNotify) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqSendAddSingleContactNotify) GetToId() int32 {
	if x != nil {
		return x.ToId
	}
	return 0
}

func (x *ReqSendAddSingleContactNotify) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type RespSendAddSingleContactNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *RespSendAddSingleContactNotify) Reset() {
	*x = RespSendAddSingleContactNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmessageserver_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespSendAddSingleContactNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespSendAddSingleContactNotify) ProtoMessage() {}

func (x *RespSendAddSingleContactNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pbmessageserver_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespSendAddSingleContactNotify.ProtoReflect.Descriptor instead.
func (*RespSendAddSingleContactNotify) Descriptor() ([]byte, []int) {
	return file_pbmessageserver_proto_rawDescGZIP(), []int{258}
}

func (x *RespSendAddSingleContactNotify) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

var File_pbmessageserver_proto protoreflect.FileDescriptor

var file_pbmessageserver_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x13, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2f, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x01, 0x0a, 0x15, 0x52,
	0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x79, 0x73, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x30, 0x0a, 0x08, 0x46, 0x61, 0x69, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x33, 0x0a, 0x0b, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x9b,
	0x01, 0x0a, 0x1e, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x79, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x09, 0x66, 0x61, 0x69, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x52, 0x0a, 0x16,
	0x52, 0x65, 0x73, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x79, 0x73,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x22, 0xac, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x5a, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x84, 0x01, 0x0a, 0x0a,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x42, 0x6f, 0x74,
	0x49, 0x64, 0x22, 0x67, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x22, 0x68, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x22, 0x71, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61,
	0x78, 0x5f, 0x71, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78,
	0x51, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xb2, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x22, 0x24, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x22, 0x72, 0x0a,
	0x1b, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x43, 0x61, 0x72, 0x64, 0x41, 0x6c,
	0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x9b, 0x01, 0x0a, 0x1e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x43,
	0x61, 0x72, 0x64, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x44, 0x69,
	0x73, 0x43, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x24, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x22,
	0xa6, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xa3, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x70, 0x62, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x35, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x45, 0x72, 0x72, 0x10, 0x02, 0x22, 0xc3,
	0x01, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0xa7, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x52, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x35, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x45, 0x72, 0x72, 0x10, 0x02, 0x22, 0x84,
	0x01, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xa1, 0x01, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x4f, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x45, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x35, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x45, 0x72, 0x72, 0x10, 0x03, 0x22, 0xd9, 0x01, 0x0a, 0x17, 0x53, 0x65,
	0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xce, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x52, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5c, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x62, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x45, 0x72, 0x72, 0x10, 0x04, 0x22, 0xea, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0xc8, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x4f, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x5c, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x68, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x45, 0x72, 0x72, 0x10, 0x04, 0x22, 0xd2,
	0x01, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0xc0, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5c, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x62, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x45, 0x72, 0x72, 0x10, 0x04, 0x22, 0x83, 0x02, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0f, 0x0a,
	0x03, 0x47, 0x5f, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x47, 0x42, 0x12, 0x27,
	0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xdf, 0x02, 0x0a,
	0x16, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x08, 0x47, 0x5f, 0x61, 0x5f, 0x6f, 0x72, 0x5f, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x47, 0x41, 0x4f, 0x72, 0x42, 0x12, 0x28, 0x0a, 0x0f, 0x6b,
	0x65, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x32, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x6e, 0x74, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x4e, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x5d, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x45, 0x72, 0x72, 0x10, 0x04, 0x22, 0xd1,
	0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0f, 0x0a, 0x03,
	0x67, 0x5f, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x67, 0x41, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x88, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4f, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x62, 0x0a, 0x08, 0x45, 0x72, 0x72,
	0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x75, 0x73, 0x73, 0x63, 0x65, 0x73,
	0x73, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x49, 0x64,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x62, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x04, 0x22, 0x7f, 0x0a,
	0x0a, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x3c,
	0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xe0, 0x01, 0x0a,
	0x10, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x86, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x0a, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0xe1, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x71,
	0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x74, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x62, 0x6f, 0x74, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x61, 0x0a, 0x11,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xad, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x27, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x6c, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x53,
	0x69, 0x67, 0x6e, 0x55, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x98, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0xda, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x4d,
	0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6b,
	0x65, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x76,
	0x0a, 0x0d, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x79, 0x6e, 0x4d, 0x73, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x93, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x53, 0x65,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x6f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xb6, 0x01, 0x0a,
	0x17, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x46, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72,
	0x6f, 0x6d, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x6f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x9f, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x4d,
	0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72,
	0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46,
	0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0xb2, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x75, 0x73,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63,
	0x61, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63,
	0x61, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x50, 0x75, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x60, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65,
	0x79, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x3b, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x0b, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x22,
	0x48, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x50, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x35, 0x0a, 0x0b, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x47, 0x65, 0x74, 0x50, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xf4, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x3b, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x3e, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x22, 0xbc, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x12, 0x45, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x6c, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x63, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x50, 0x65, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x7d, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x77, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x50, 0x69, 0x6e, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x6a,
	0x0a, 0x17, 0x52, 0x65, 0x71, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x39, 0x0a, 0x09, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xda, 0x03, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x77, 0x65, 0x62, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x57, 0x65, 0x62, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x76, 0x69, 0x61, 0x5f, 0x62, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x69, 0x61, 0x42, 0x6f, 0x74,
	0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15,
	0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x3b,
	0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xd3, 0x03, 0x0a, 0x15,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x79, 0x53, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x6f, 0x5f, 0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x6e, 0x6f, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69,
	0x6c, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0f, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f,
	0x6d, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x9d, 0x06, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x53, 0x32, 0x53, 0x4d, 0x73, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x69,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x69, 0x74,
	0x68, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x4f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x4f, 0x75,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x73,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05,
	0x54, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x6f, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x50, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x46, 0x77, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x46, 0x77, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x56, 0x69, 0x61, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x56, 0x69, 0x61, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x69, 0x64, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x4d, 0x65, 0x69, 0x64, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x21, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72,
	0x6b, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x69, 0x65, 0x77, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x45, 0x64, 0x69, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x64, 0x69, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x75, 0x69,
	0x64, 0x22, 0x39, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x32, 0x53, 0x4d, 0x73, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9b, 0x04, 0x0a,
	0x0c, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66,
	0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x61,
	0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x74, 0x6d, 0x65, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x74, 0x6d, 0x65, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x1c, 0x0a, 0x0a,
	0x76, 0x69, 0x61, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x76, 0x69, 0x61, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x0e, 0x52, 0x65,
	0x71, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0xc5, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x4d, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x74, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f,
	0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x44, 0x0a, 0x14, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xe8, 0x03, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05,
	0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x6f, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x77, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x77, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x0a,
	0x76, 0x69, 0x61, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x76, 0x69, 0x61, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0f, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x75, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x64,
	0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x22, 0x73, 0x0a, 0x0a,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65,
	0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c,
	0x66, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x3c, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0xfe, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x65, 0x6c, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x53, 0x65, 0x6c, 0x66, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x64,
	0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x4d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d,
	0x61, 0x78, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x4d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x3c, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb1,
	0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x58, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xd9, 0x01, 0x0a,
	0x0e, 0x52, 0x65, 0x71, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x77, 0x64, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x77, 0x64, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x40, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9f, 0x01, 0x0a, 0x11, 0x52,
	0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x43, 0x0a, 0x13,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xb9, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x42, 0x0a,
	0x12, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x9c, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x42, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x4d, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x3e, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x65, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c,
	0x6c, 0x43, 0x68, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x40, 0x0a, 0x10, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9c, 0x01, 0x0a,
	0x10, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x42, 0x0a, 0x12, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x83, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x40, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x52,
	0x65, 0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6c, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x51, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x61, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x52, 0x0a,
	0x12, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x4f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xe0, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x44, 0x69, 0x66, 0x66, 0x42, 0x79, 0x50,
	0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x50, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x74, 0x73, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x51, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x51, 0x74, 0x73, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x58, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x66,
	0x66, 0x42, 0x79, 0x50, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xce,
	0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6a, 0x75, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x71, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xcb, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x43, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xfc, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x77, 0x65, 0x62,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x57, 0x65,
	0x62, 0x70, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x5f, 0x67, 0x65,
	0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x53, 0x74,
	0x6f, 0x70, 0x47, 0x65, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x47, 0x65, 0x6f, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x47, 0x65, 0x6f, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x69, 0x61, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x56, 0x69, 0x61, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x56, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x64, 0x69,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x64, 0x69, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x64, 0x0a, 0x11,
	0x52, 0x65, 0x71, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x22, 0xb3, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6d, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x49, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8b, 0x01, 0x0a,
	0x12, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x5c, 0x0a, 0x14, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa8, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x71,
	0x53, 0x61, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x6c, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65,
	0x6c, 0x66, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x3f, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x65,
	0x4d, 0x73, 0x67, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x65, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x55, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x3f, 0x0a, 0x0f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xdb, 0x01, 0x0a,
	0x0c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x50, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x18, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x18, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x13, 0x0a, 0x11, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x5a, 0x0a, 0x18, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x82, 0x01, 0x0a, 0x1d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x64, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x74, 0x68, 0x6f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x6f, 0x74, 0x68, 0x6f, 0x73, 0x69, 0x7a, 0x65,
	0x22, 0x35, 0x0a, 0x1d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x62, 0x6f, 0x75,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x22, 0x34, 0x0a, 0x22, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3c, 0x0a,
	0x21, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x27, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x40, 0x0a, 0x21, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x22, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x22,
	0x1c, 0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x32, 0x0a,
	0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x22, 0x36, 0x0a, 0x1b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x1e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x1d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x35,
	0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x2c, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x73, 0x5f,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x61,
	0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x33, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0xd9, 0x01, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x06,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0xd5, 0x05, 0x0a, 0x09, 0x55, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x65, 0x6c, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x75,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x62,
	0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x6f, 0x74, 0x5f, 0x6e,
	0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62,
	0x6f, 0x74, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x67, 0x65, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x65, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x6f, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x6f,
	0x74, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x62, 0x6f, 0x74, 0x49,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x22, 0xb9, 0x04, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6b, 0x69,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x67, 0x61,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x65, 0x67,
	0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6d, 0x6f, 0x63, 0x72,
	0x61, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6d, 0x6f, 0x63,
	0x72, 0x61, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xee, 0x02, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6f, 0x75, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0f, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xba, 0x02,
	0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x62, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x43, 0x0a, 0x0c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xde, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x49, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x0e,
	0x52, 0x65, 0x71, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65,
	0x79, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x47, 0x0a, 0x10, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6b,
	0x69, 0x63, 0x6b, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6f,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6b, 0x69, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4b, 0x69, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x47, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8b, 0x01, 0x0a,
	0x0f, 0x52, 0x65, 0x71, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b,
	0x65, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d,
	0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x48, 0x0a, 0x11, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4c, 0x0a, 0x15,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x13, 0x52,
	0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x4c, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xa5, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65,
	0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4c, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xc5, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x50, 0x0a,
	0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xc5, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66,
	0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xa9, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0xcd, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x72, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x52, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x56,
	0x0a, 0x1f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x5d, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x52, 0x65, 0x61, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66,
	0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65,
	0x79, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b,
	0x65, 0x79, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x4b, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73,
	0x4f, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x72, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x78,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x43, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x61, 0x78, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x17, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x57, 0x0a, 0x16,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x78, 0x0a, 0x1e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x70, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0xa6, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x20, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x61, 0x78, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x78,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72,
	0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x04, 0x6d, 0x73, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xa6, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64,
	0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41,
	0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d,
	0x61, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x48, 0x0a,
	0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x0c, 0x0a,
	0x01, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x4c, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4b, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x73, 0x42, 0x79, 0x4d, 0x73, 0x67,
	0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x75, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x85, 0x01,
	0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x22, 0x95, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x44, 0x0a,
	0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x12, 0x38, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x22, 0x6e, 0x0a,
	0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e,
	0x64, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x56, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x22, 0xbd, 0x06,
	0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x4f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x6f, 0x49, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x6f, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x46,
	0x77, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x46, 0x77,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x69, 0x61, 0x42, 0x6f, 0x74, 0x49,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x56, 0x69, 0x61, 0x42, 0x6f, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x69, 0x65, 0x77, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56, 0x69,
	0x65, 0x77, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x49, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x22, 0x5e, 0x0a,
	0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x65, 0x62, 0x50, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x63, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x63, 0x49, 0x64, 0x22, 0x36, 0x0a,
	0x1a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x65, 0x62,
	0x50, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x77,
	0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x77, 0x65,
	0x62, 0x50, 0x61, 0x67, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x70, 0x75, 0x73,
	0x68, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x75, 0x73, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x75,
	0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x75, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x50, 0x75, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x6f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x6f, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d,
	0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x4d, 0x73, 0x67, 0x69, 0x64, 0x22, 0x21, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50,
	0x75, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x9e, 0x02, 0x0a, 0x10, 0x52, 0x65,
	0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x71,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x76, 0x0a, 0x12, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x71, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x73,
	0x67, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x77, 0x0a, 0x20, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xe6, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x0c, 0x0a, 0x01, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x4d, 0x0a,
	0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xec, 0x02,
	0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x62, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6b, 0x69, 0x63, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x6b, 0x69, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x75, 0x6e, 0x6b, 0x69, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x65, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x5f, 0x0a, 0x14,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x84, 0x01,
	0x0a, 0x13, 0x52, 0x65, 0x71, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x50, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x42, 0x61,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x56, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4e,
	0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xe3,
	0x03, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65,
	0x6e, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x67, 0x69, 0x66, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73,
	0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6e,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x6e,
	0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x62, 0x65, 0x64,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x74, 0x69,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e,
	0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x6e, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70,
	0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f,
	0x6c, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x50,
	0x6f, 0x6c, 0x6c, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x46, 0x75, 0x6c, 0x6c,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x71, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x53, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x16, 0x52,
	0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4f, 0x0a, 0x18, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x18,
	0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x55, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x50, 0x0a, 0x19, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x1e,
	0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x43, 0x68, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x49, 0x73, 0x43, 0x68, 0x61, 0x74, 0x22, 0x57, 0x0a, 0x20, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x6d, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x47, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x10, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6f, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x73, 0x0a, 0x1c, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6c, 0x0a, 0x19,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x72, 0x0a, 0x1b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x55, 0x75, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7f,
	0x0a, 0x24, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x7d, 0x0a, 0x26, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x37,
	0x0a, 0x16, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x3c, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x74, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65,
	0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x3d, 0x0a,
	0x0d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x12,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x74, 0x73,
	0x4d, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x5f, 0x61, 0x72,
	0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x41,
	0x72, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x72,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x41, 0x72,
	0x72, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x60, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x74, 0x73, 0x4d, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2d, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x47,
	0x69, 0x66, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x67, 0x69, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x67, 0x69, 0x66, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x47, 0x69, 0x66, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x46, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x71, 0x0a, 0x07, 0x46, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x4d, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x47, 0x69, 0x66, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x70, 0x69, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0xa5, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x69, 0x66, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x70, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x0a, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55,
	0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x5b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0xf6, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4e, 0x0a, 0x15, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x21, 0x0a, 0x0d, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x75, 0x0a, 0x0f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x52, 0x07, 0x77, 0x65, 0x62, 0x50,
	0x61, 0x67, 0x65, 0x22, 0xe3, 0x02, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x55,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x28, 0x0a, 0x14, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0x7c, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x57,
	0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x07, 0x77, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x52, 0x07, 0x77, 0x65, 0x62, 0x50, 0x61, 0x67,
	0x65, 0x22, 0x39, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x7b, 0x0a, 0x19,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x45, 0x64, 0x69, 0x74, 0x50, 0x65, 0x65, 0x72, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4b, 0x0a, 0x1b, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x73, 0x45, 0x64, 0x69, 0x74, 0x50, 0x65, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x72, 0x0a, 0x16, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x48, 0x0a, 0x18, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xe0, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x73, 0x67,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x39, 0x0a, 0x17, 0x52, 0x73, 0x70, 0x53, 0x65,
	0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d,
	0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x22, 0x75, 0x0a, 0x1c, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64,
	0x4d, 0x75, 0x74, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x3d, 0x0a, 0x1d, 0x52, 0x65, 0x73,
	0x70, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x4d, 0x75, 0x74, 0x75, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x75, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0x72, 0x0a, 0x1d, 0x52, 0x65, 0x71, 0x53,
	0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x40, 0x0a, 0x1e,
	0x52, 0x65, 0x73, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x32, 0x91,
	0x51, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x47, 0x0a, 0x07, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1b, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x42, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0d, 0x42, 0x6f, 0x74,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x42, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x1a, 0x23, 0x2e,
	0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0a,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e,
	0x4d, 0x73, 0x67, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x4d,
	0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x4a, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x79, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x1e,
	0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x79, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x1a,
	0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b,
	0x53, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1f, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x14, 0x53, 0x65,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x73, 0x67, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x6e, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x23, 0x2e,
	0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x4c, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x12,
	0x1f, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x73, 0x67,
	0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x75, 0x73, 0x68, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x43, 0x61, 0x6c, 0x6c, 0x50, 0x75, 0x73, 0x68, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x43, 0x61, 0x6c, 0x6c, 0x50, 0x75, 0x73, 0x68, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x20, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x1a,
	0x28, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12,
	0x21, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x73, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x50, 0x65, 0x65, 0x72, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x73, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x1d, 0x2e,
	0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x50, 0x69, 0x6e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x1a, 0x1a, 0x2e, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x14, 0x52, 0x65,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x1a, 0x1a, 0x2e, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0e, 0x53, 0x59, 0x53, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x79, 0x53, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12,
	0x1d, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x1c,
	0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4e,
	0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1f, 0x2e,
	0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x1c,
	0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x4d, 0x73, 0x67, 0x73, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74,
	0x4d, 0x73, 0x67, 0x73, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x22, 0x00, 0x12, 0x50, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x12, 0x1e, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x1a, 0x20, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x64, 0x64, 0x43,
	0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x1a,
	0x24, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0d, 0x45, 0x64, 0x69, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x45, 0x64,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x1a, 0x23, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x0d, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x64,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x0d, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21,
	0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x73, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1f, 0x2e, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x1a, 0x21, 0x2e,
	0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a,
	0x25, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0a, 0x53, 0x32, 0x53, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x32, 0x53, 0x4d,
	0x73, 0x67, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x32, 0x53, 0x4d, 0x73, 0x67,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x50, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x47, 0x65, 0x74, 0x50, 0x74, 0x73, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x47, 0x65, 0x74, 0x50, 0x74, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x52, 0x65, 0x61,
	0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x52, 0x65, 0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x42, 0x6f,
	0x78, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x4f, 0x75, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x42, 0x79, 0x50, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x44, 0x69, 0x66, 0x66, 0x42, 0x79, 0x50, 0x74, 0x73, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x44, 0x69, 0x66, 0x66, 0x42, 0x79, 0x50, 0x74, 0x73, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x21,
	0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x24,
	0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x64,
	0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x22, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x2a,
	0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00,
	0x12, 0x56, 0x0a, 0x0c, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x12, 0x20, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x73,
	0x67, 0x44, 0x72, 0x61, 0x66, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x55, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x1a, 0x20, 0x2e, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12,
	0x21, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x1d, 0x2e, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x00, 0x12, 0x63, 0x0a,
	0x13, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x23, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x0f, 0x4b, 0x69, 0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0c, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x22, 0x2e,
	0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x1a, 0x26, 0x2e,
	0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x24, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x10, 0x45,
	0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12,
	0x24, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x64, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x22, 0x00, 0x12,
	0x62, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x62,
	0x6f, 0x75, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x62, 0x6f, 0x75,
	0x74, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x2c, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x6e,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x1a, 0x2a, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x80,
	0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x2e,
	0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x30, 0x2e,
	0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x12, 0x6e, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x2e,
	0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x52, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x61,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22,
	0x00, 0x12, 0x6b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x6d,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x73, 0x67, 0x73, 0x49, 0x64, 0x12, 0x2a, 0x2e, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x73,
	0x42, 0x79, 0x4d, 0x73, 0x67, 0x73, 0x49, 0x64, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x2e, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x21, 0x2e,
	0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x00, 0x12, 0x83, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4c, 0x61, 0x73,
	0x74, 0x4d, 0x73, 0x67, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x2e,
	0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4c, 0x61,
	0x73, 0x74, 0x4d, 0x73, 0x67, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x31,
	0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x25,
	0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x10, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x12, 0x45,
	0x64, 0x69, 0x74, 0x42, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x61, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x56, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x1f, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x46, 0x75, 0x6c, 0x6c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x1a, 0x21, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x20, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x25, 0x2e,
	0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x00, 0x12,
	0x6b, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a,
	0x29, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x21, 0x2e, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22,
	0x00, 0x12, 0x71, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x62, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x2e, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x2a, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x31, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2b, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x1a, 0x2d, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x2e,
	0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x55, 0x75, 0x69, 0x64, 0x1a, 0x2c, 0x2e, 0x70, 0x62, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x55, 0x75, 0x69, 0x64, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x35, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x1a, 0x37, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67,
	0x22, 0x00, 0x12, 0x6e, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x73, 0x67, 0x1a, 0x2c, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67,
	0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x10, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x5a, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x12, 0x21, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x53,
	0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x25, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x28, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x14,
	0x52, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2b,
	0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x67, 0x0a,
	0x10, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6e,
	0x67, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x18, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x44, 0x69, 0x73, 0x43, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x2c, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x43, 0x61,
	0x72, 0x64, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x2f, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x43, 0x61, 0x72, 0x64,
	0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x26,
	0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x2b, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x2e, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x74, 0x0a, 0x16, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x45, 0x64, 0x69,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x45, 0x64, 0x69, 0x74, 0x50, 0x65, 0x65, 0x72, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x64, 0x69, 0x74, 0x50, 0x65, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x13, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x27, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x6f, 0x74,
	0x65, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1e, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x6c, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53,
	0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x4d, 0x73, 0x67, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x4d, 0x73, 0x67, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f,
	0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x19, 0x53, 0x65, 0x6e, 0x64, 0x41,
	0x64, 0x64, 0x4d, 0x75, 0x74, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x2d, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x64,
	0x64, 0x4d, 0x75, 0x74, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x1a, 0x2e, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x64,
	0x64, 0x4d, 0x75, 0x74, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x1a, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x2e, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x1a, 0x2f, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x64,
	0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x53, 0x79, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x26, 0x2e, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x79, 0x73, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x53, 0x79, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0x00, 0x12,
	0x61, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x22, 0x00, 0x32, 0x7c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x67, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x65,
	0x62, 0x50, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x23, 0x2e, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x65, 0x62, 0x50, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0x00,
	0x32, 0x57, 0x0a, 0x0a, 0x50, 0x75, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x49,
	0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x75, 0x73, 0x68, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x70, 0x75, 0x73, 0x68, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x50, 0x75, 0x73, 0x68, 0x22, 0x00, 0x32, 0xe1, 0x03, 0x0a, 0x0c, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x0d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x21, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x23,
	0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x11, 0x47, 0x69, 0x66, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x47, 0x69, 0x66, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x69, 0x66, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0c,
	0x47, 0x69, 0x66, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x70, 0x69, 0x12, 0x20, 0x2e, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x47, 0x69, 0x66, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x70, 0x69, 0x1a, 0x22,
	0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x69, 0x66, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x70, 0x69, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x50, 0x61,
	0x67, 0x65, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62,
	0x50, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62,
	0x50, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x25, 0x2e, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62,
	0x50, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0x00, 0x42, 0x21, 0x5a,
	0x1f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbmessageserver_proto_rawDescOnce sync.Once
	file_pbmessageserver_proto_rawDescData = file_pbmessageserver_proto_rawDesc
)

func file_pbmessageserver_proto_rawDescGZIP() []byte {
	file_pbmessageserver_proto_rawDescOnce.Do(func() {
		file_pbmessageserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbmessageserver_proto_rawDescData)
	})
	return file_pbmessageserver_proto_rawDescData
}

var file_pbmessageserver_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_pbmessageserver_proto_msgTypes = make([]protoimpl.MessageInfo, 259)
var file_pbmessageserver_proto_goTypes = []interface{}{
	(GetSecurityRandomIdsResult_ErrorCode)(0),       // 0: pbmessageserver.GetSecurityRandomIdsResult.ErrorCode
	(LogoutDisCardAllSecurityResult_ErrorCode)(0),   // 1: pbmessageserver.LogoutDisCardAllSecurityResult.ErrorCode
	(SetEncryptedTypingResult_Errcode)(0),           // 2: pbmessageserver.SetEncryptedTypingResult.Errcode
	(ReadEncryptedHistoryResult_Errcode)(0),         // 3: pbmessageserver.ReadEncryptedHistoryResult.Errcode
	(DiscardEncryptionResult_Errcode)(0),            // 4: pbmessageserver.DiscardEncryptionResult.Errcode
	(SendEncryptedServiceResult_Errcode)(0),         // 5: pbmessageserver.SendEncryptedServiceResult.Errcode
	(SendEncryptedFileResult_Errcode)(0),            // 6: pbmessageserver.SendEncryptedFileResult.Errcode
	(SendEncryptedResult_Errcode)(0),                // 7: pbmessageserver.SendEncryptedResult.Errcode
	(AcceptEncryptionResult_Errcode)(0),             // 8: pbmessageserver.AcceptEncryptionResult.Errcode
	(RequestEncryptionResult_ErroCode)(0),           // 9: pbmessageserver.RequestEncryptionResult.ErroCode
	(*ReqSendMediaSysNotify)(nil),                   // 10: pbmessageserver.ReqSendMediaSysNotify
	(*FailUser)(nil),                                // 11: pbmessageserver.FailUser
	(*SucceedUser)(nil),                             // 12: pbmessageserver.SucceedUser
	(*CallBackRespSendMediaSysNotify)(nil),          // 13: pbmessageserver.CallBackRespSendMediaSysNotify
	(*RespSendMediaSysNotify)(nil),                  // 14: pbmessageserver.RespSendMediaSysNotify
	(*ReqEditMessageMedia)(nil),                     // 15: pbmessageserver.ReqEditMessageMedia
	(*RespEditMessageMedia)(nil),                    // 16: pbmessageserver.RespEditMessageMedia
	(*InlineCall)(nil),                              // 17: pbmessageserver.InlineCall
	(*ChannelInactiveUser)(nil),                     // 18: pbmessageserver.ChannelInactiveUser
	(*GetChannelInactiveUsersReq)(nil),              // 19: pbmessageserver.GetChannelInactiveUsersReq
	(*GetChannelInactiveUsersResult)(nil),           // 20: pbmessageserver.GetChannelInactiveUsersResult
	(*GetSecurityRandomIdsReq)(nil),                 // 21: pbmessageserver.GetSecurityRandomIdsReq
	(*GetSecurityRandomIdsResult)(nil),              // 22: pbmessageserver.GetSecurityRandomIdsResult
	(*LogoutDisCardAllSecurityReq)(nil),             // 23: pbmessageserver.LogoutDisCardAllSecurityReq
	(*LogoutDisCardAllSecurityResult)(nil),          // 24: pbmessageserver.LogoutDisCardAllSecurityResult
	(*SetEncryptedTypingReq)(nil),                   // 25: pbmessageserver.SetEncryptedTypingReq
	(*SetEncryptedTypingResult)(nil),                // 26: pbmessageserver.SetEncryptedTypingResult
	(*ReadEncryptedHistoryReq)(nil),                 // 27: pbmessageserver.ReadEncryptedHistoryReq
	(*ReadEncryptedHistoryResult)(nil),              // 28: pbmessageserver.ReadEncryptedHistoryResult
	(*DiscardEncryptionReq)(nil),                    // 29: pbmessageserver.DiscardEncryptionReq
	(*DiscardEncryptionResult)(nil),                 // 30: pbmessageserver.DiscardEncryptionResult
	(*SendEncryptedServiceReq)(nil),                 // 31: pbmessageserver.SendEncryptedServiceReq
	(*SendEncryptedServiceResult)(nil),              // 32: pbmessageserver.SendEncryptedServiceResult
	(*SendEncryptedFileReq)(nil),                    // 33: pbmessageserver.SendEncryptedFileReq
	(*SendEncryptedFileResult)(nil),                 // 34: pbmessageserver.SendEncryptedFileResult
	(*SendEncryptedReq)(nil),                        // 35: pbmessageserver.SendEncryptedReq
	(*SendEncryptedResult)(nil),                     // 36: pbmessageserver.SendEncryptedResult
	(*AcceptEncryptionReq)(nil),                     // 37: pbmessageserver.AcceptEncryptionReq
	(*AcceptEncryptionResult)(nil),                  // 38: pbmessageserver.AcceptEncryptionResult
	(*RequestEncryptionReq)(nil),                    // 39: pbmessageserver.RequestEncryptionReq
	(*RequestEncryptionResult)(nil),                 // 40: pbmessageserver.RequestEncryptionResult
	(*ReqBotCall)(nil),                              // 41: pbmessageserver.ReqBotCall
	(*ReplyBotCall)(nil),                            // 42: pbmessageserver.ReplyBotCall
	(*ReqBotInlineCall)(nil),                        // 43: pbmessageserver.ReqBotInlineCall
	(*ReplyBotInlineCall)(nil),                      // 44: pbmessageserver.ReplyBotInlineCall
	(*ReqSetGameScore)(nil),                         // 45: pbmessageserver.ReqSetGameScore
	(*ReplySetGameScore)(nil),                       // 46: pbmessageserver.ReplySetGameScore
	(*ReqRemoveConn)(nil),                           // 47: pbmessageserver.ReqRemoveConn
	(*ReplyRemoveConn)(nil),                         // 48: pbmessageserver.ReplyRemoveConn
	(*ReqSignUpMsg)(nil),                            // 49: pbmessageserver.ReqSignUpMsg
	(*ReqSendCodeMsg)(nil),                          // 50: pbmessageserver.ReqSendCodeMsg
	(*ReqSignInMsg)(nil),                            // 51: pbmessageserver.ReqSignInMsg
	(*ReqSendSynMsg)(nil),                           // 52: pbmessageserver.ReqSendSynMsg
	(*ReqSendUserMsg)(nil),                          // 53: pbmessageserver.ReqSendUserMsg
	(*ReqSendUserOneClientMsg)(nil),                 // 54: pbmessageserver.ReqSendUserOneClientMsg
	(*ReqSendMoreUserMsg)(nil),                      // 55: pbmessageserver.ReqSendMoreUserMsg
	(*ReqSendCallMsg)(nil),                          // 56: pbmessageserver.ReqSendCallMsg
	(*ReqCallPush)(nil),                             // 57: pbmessageserver.ReqCallPush
	(*ReplyCallPush)(nil),                           // 58: pbmessageserver.ReplyCallPush
	(*ReqGetState)(nil),                             // 59: pbmessageserver.ReqGetState
	(*ReplyResult)(nil),                             // 60: pbmessageserver.ReplyResult
	(*ReplyNull)(nil),                               // 61: pbmessageserver.ReplyNull
	(*ReqGetPts)(nil),                               // 62: pbmessageserver.ReqGetPts
	(*ReplyGetPts)(nil),                             // 63: pbmessageserver.ReplyGetPts
	(*RequestDialog)(nil),                           // 64: pbmessageserver.RequestDialog
	(*ReplyDialog)(nil),                             // 65: pbmessageserver.ReplyDialog
	(*UserIdRating)(nil),                            // 66: pbmessageserver.UserIdRating
	(*ReplyGetLastLimitDialog)(nil),                 // 67: pbmessageserver.ReplyGetLastLimitDialog
	(*ReqPinnedDialogs)(nil),                        // 68: pbmessageserver.ReqPinnedDialogs
	(*ReqPeerDialogs)(nil),                          // 69: pbmessageserver.ReqPeerDialogs
	(*ReqRecentLocations)(nil),                      // 70: pbmessageserver.ReqRecentLocations
	(*ReqPinDialog)(nil),                            // 71: pbmessageserver.ReqPinDialog
	(*ReqReorderPinnedDialogs)(nil),                 // 72: pbmessageserver.ReqReorderPinnedDialogs
	(*ReplyBool)(nil),                               // 73: pbmessageserver.ReplyBool
	(*RequestSendMessage)(nil),                      // 74: pbmessageserver.RequestSendMessage
	(*SendVoteReq)(nil),                             // 75: pbmessageserver.SendVoteReq
	(*SendVoteReply)(nil),                           // 76: pbmessageserver.SendVoteReply
	(*RequestSySSendMessage)(nil),                   // 77: pbmessageserver.RequestSySSendMessage
	(*ReqS2SMsg)(nil),                               // 78: pbmessageserver.ReqS2SMsg
	(*ReplyS2SMsg)(nil),                             // 79: pbmessageserver.ReplyS2SMsg
	(*ReqSendMedia)(nil),                            // 80: pbmessageserver.ReqSendMedia
	(*ReqUploadMedia)(nil),                          // 81: pbmessageserver.ReqUploadMedia
	(*ReqForwardMessages)(nil),                      // 82: pbmessageserver.ReqForwardMessages
	(*ReplyForwardMessages)(nil),                    // 83: pbmessageserver.ReplyForwardMessages
	(*Msg)(nil),                                     // 84: pbmessageserver.Msg
	(*ReqGetMsgs)(nil),                              // 85: pbmessageserver.ReqGetMsgs
	(*ReplyGetMsgs)(nil),                            // 86: pbmessageserver.ReplyGetMsgs
	(*ReqHistory)(nil),                              // 87: pbmessageserver.ReqHistory
	(*ReplyHistory)(nil),                            // 88: pbmessageserver.ReplyHistory
	(*ReqCreateChat)(nil),                           // 89: pbmessageserver.ReqCreateChat
	(*ReplyCreateChat)(nil),                         // 90: pbmessageserver.ReplyCreateChat
	(*ReqAddChatUser)(nil),                          // 91: pbmessageserver.ReqAddChatUser
	(*ReplyAddChatUser)(nil),                        // 92: pbmessageserver.ReplyAddChatUser
	(*ReqDeleteChatUser)(nil),                       // 93: pbmessageserver.ReqDeleteChatUser
	(*ReplyDeleteChatUser)(nil),                     // 94: pbmessageserver.ReplyDeleteChatUser
	(*ReqEditChatAdmin)(nil),                        // 95: pbmessageserver.ReqEditChatAdmin
	(*ReplyEditChatAdmin)(nil),                      // 96: pbmessageserver.ReplyEditChatAdmin
	(*ReqEditChatTitle)(nil),                        // 97: pbmessageserver.ReqEditChatTitle
	(*ReplyEditChatTitle)(nil),                      // 98: pbmessageserver.ReplyEditChatTitle
	(*ReqGetAllChats)(nil),                          // 99: pbmessageserver.ReqGetAllChats
	(*ReplyGetAllChats)(nil),                        // 100: pbmessageserver.ReplyGetAllChats
	(*ReqGetFullChat)(nil),                          // 101: pbmessageserver.ReqGetFullChat
	(*ReplyGetFullChat)(nil),                        // 102: pbmessageserver.ReplyGetFullChat
	(*ReqEditChatPhoto)(nil),                        // 103: pbmessageserver.ReqEditChatPhoto
	(*ReplyEditChatPhoto)(nil),                      // 104: pbmessageserver.ReplyEditChatPhoto
	(*ReqMigrateChat)(nil),                          // 105: pbmessageserver.ReqMigrateChat
	(*ReplyMigrateChat)(nil),                        // 106: pbmessageserver.ReplyMigrateChat
	(*ReqReadHistory)(nil),                          // 107: pbmessageserver.ReqReadHistory
	(*ReplyReadHistory)(nil),                        // 108: pbmessageserver.ReplyReadHistory
	(*ReqUpdateReadOut)(nil),                        // 109: pbmessageserver.ReqUpdateReadOut
	(*ReplyUpdateReadOut)(nil),                      // 110: pbmessageserver.ReplyUpdateReadOut
	(*ReqDiffByPts)(nil),                            // 111: pbmessageserver.ReqDiffByPts
	(*ReplyDiffByPts)(nil),                          // 112: pbmessageserver.ReplyDiffByPts
	(*ReqDeleteHistory)(nil),                        // 113: pbmessageserver.ReqDeleteHistory
	(*ReplyDeleteHistory)(nil),                      // 114: pbmessageserver.ReplyDeleteHistory
	(*ReqDeleteMessages)(nil),                       // 115: pbmessageserver.ReqDeleteMessages
	(*ReplyDeleteMessages)(nil),                     // 116: pbmessageserver.ReplyDeleteMessages
	(*ReqEditMessage)(nil),                          // 117: pbmessageserver.ReqEditMessage
	(*ReplyEditMessage)(nil),                        // 118: pbmessageserver.ReplyEditMessage
	(*ReqNotifySettings)(nil),                       // 119: pbmessageserver.ReqNotifySettings
	(*ReplyNotifySettings)(nil),                     // 120: pbmessageserver.ReplyNotifySettings
	(*ReqUpdateNotifySettings)(nil),                 // 121: pbmessageserver.ReqUpdateNotifySettings
	(*ReplyUpdateNotifySettings)(nil),               // 122: pbmessageserver.ReplyUpdateNotifySettings
	(*ReqMessageEditData)(nil),                      // 123: pbmessageserver.ReqMessageEditData
	(*ReplyMessageEditData)(nil),                    // 124: pbmessageserver.ReplyMessageEditData
	(*ReqSaveMsgDraft)(nil),                         // 125: pbmessageserver.ReqSaveMsgDraft
	(*ReplySaveMsgDraft)(nil),                       // 126: pbmessageserver.ReplySaveMsgDraft
	(*ReqGetUserUnRead)(nil),                        // 127: pbmessageserver.ReqGetUserUnRead
	(*ReplyUserUnread)(nil),                         // 128: pbmessageserver.ReplyUserUnread
	(*InputChannel)(nil),                            // 129: pbmessageserver.InputChannel
	(*InputChannelEmpty)(nil),                       // 130: pbmessageserver.InputChannelEmpty
	(*InputChannelinputChannel)(nil),                // 131: pbmessageserver.InputChannelinputChannel
	(*MessageActionEditChannelPhoto)(nil),           // 132: pbmessageserver.MessageActionEditChannelPhoto
	(*MessageActionEditChannelAbout)(nil),           // 133: pbmessageserver.MessageActionEditChannelAbout
	(*MessageActionDeleteChannelMessages)(nil),      // 134: pbmessageserver.MessageActionDeleteChannelMessages
	(*MessageActionDeleteChannelHistory)(nil),       // 135: pbmessageserver.MessageActionDeleteChannelHistory
	(*MessageActionUpdatePinnedChannelMessage)(nil), // 136: pbmessageserver.MessageActionUpdatePinnedChannelMessage
	(*MessageActionCheckChannelUsername)(nil),       // 137: pbmessageserver.MessageActionCheckChannelUsername
	(*MessageActionUpdateChannelUsername)(nil),      // 138: pbmessageserver.MessageActionUpdateChannelUsername
	(*MessageActionExportChannelInvite)(nil),        // 139: pbmessageserver.MessageActionExportChannelInvite
	(*MessageActionDeleteChannel)(nil),              // 140: pbmessageserver.MessageActionDeleteChannel
	(*MessageActionChannelCreate)(nil),              // 141: pbmessageserver.MessageActionChannelCreate
	(*MessageActionAddChannelUser)(nil),             // 142: pbmessageserver.MessageActionAddChannelUser
	(*MessageActionDeleteChannelUser)(nil),          // 143: pbmessageserver.MessageActionDeleteChannelUser
	(*MessageActionUserLeaveChannel)(nil),           // 144: pbmessageserver.MessageActionUserLeaveChannel
	(*MessageActionEditChannelTitle)(nil),           // 145: pbmessageserver.messageActionEditChannelTitle
	(*UserStatusOnline)(nil),                        // 146: pbmessageserver.UserStatusOnline
	(*UserStatusOffline)(nil),                       // 147: pbmessageserver.UserStatusOffline
	(*UserStatusLastMonth)(nil),                     // 148: pbmessageserver.UserStatusLastMonth
	(*Status)(nil),                                  // 149: pbmessageserver.Status
	(*UserInfo)(nil),                                // 150: pbmessageserver.User_info
	(*Channel)(nil),                                 // 151: pbmessageserver.Channel
	(*UpdateNewChannelMessage)(nil),                 // 152: pbmessageserver.UpdateNewChannelMessage
	(*RequestChannel)(nil),                          // 153: pbmessageserver.RequestChannel
	(*ReplyChannel)(nil),                            // 154: pbmessageserver.ReplyChannel
	(*RequestChannelInvite)(nil),                    // 155: pbmessageserver.RequestChannelInvite
	(*ReplyChannelInvite)(nil),                      // 156: pbmessageserver.ReplyChannelInvite
	(*ReqJoinChannel)(nil),                          // 157: pbmessageserver.ReqJoinChannel
	(*ReplyJoinChannel)(nil),                        // 158: pbmessageserver.ReplyJoinChannel
	(*ReqChannelKick)(nil),                          // 159: pbmessageserver.ReqChannelKick
	(*ReplyChannelKick)(nil),                        // 160: pbmessageserver.ReplyChannelKick
	(*ReqLeaveChannel)(nil),                         // 161: pbmessageserver.ReqLeaveChannel
	(*ReplyLeaveChannel)(nil),                       // 162: pbmessageserver.ReplyLeaveChannel
	(*ReqEditChannelTitle)(nil),                     // 163: pbmessageserver.ReqEditChannelTitle
	(*ReplyEditChannelTitle)(nil),                   // 164: pbmessageserver.ReplyEditChannelTitle
	(*ReqEditChannelAdmin)(nil),                     // 165: pbmessageserver.ReqEditChannelAdmin
	(*ReplyEditChannelAdmin)(nil),                   // 166: pbmessageserver.ReplyEditChannelAdmin
	(*ReqEditChannelPhoto)(nil),                     // 167: pbmessageserver.ReqEditChannelPhoto
	(*ReplyEditChannelPhoto)(nil),                   // 168: pbmessageserver.ReplyEditChannelPhoto
	(*ChatInviteExported)(nil),                      // 169: pbmessageserver.chatInviteExported
	(*ReqEditChannelAbout)(nil),                     // 170: pbmessageserver.ReqEditChannelAbout
	(*ReplyEditChannelAbout)(nil),                   // 171: pbmessageserver.ReplyEditChannelAbout
	(*ReqDeleteChannelMessages)(nil),                // 172: pbmessageserver.ReqDeleteChannelMessages
	(*ReplyDeleteChannelMessages)(nil),              // 173: pbmessageserver.ReplyDeleteChannelMessages
	(*ReqDeleteChannelSelfHistory)(nil),             // 174: pbmessageserver.ReqDeleteChannelSelfHistory
	(*ReqDeleteChannelHistory)(nil),                 // 175: pbmessageserver.ReqDeleteChannelHistory
	(*ReplyDeleteChannelHistory)(nil),               // 176: pbmessageserver.ReplyDeleteChannelHistory
	(*ReqUpdatePinnedChannelMessage)(nil),           // 177: pbmessageserver.ReqUpdatePinnedChannelMessage
	(*ReplyUpdatePinnedChannelMessage)(nil),         // 178: pbmessageserver.ReplyUpdatePinnedChannelMessage
	(*ReqDeleteChannel)(nil),                        // 179: pbmessageserver.ReqDeleteChannel
	(*ReplyDeleteChannel)(nil),                      // 180: pbmessageserver.ReplyDeleteChannel
	(*ReqReadChannelHistory)(nil),                   // 181: pbmessageserver.ReqReadChannelHistory
	(*ReplyReadChannelHistory)(nil),                 // 182: pbmessageserver.ReplyReadChannelHistory
	(*ReqUpdateChannelReadOut)(nil),                 // 183: pbmessageserver.ReqUpdateChannelReadOut
	(*ReplyUpdateChannelReadOut)(nil),               // 184: pbmessageserver.ReplyUpdateChannelReadOut
	(*ReqGetchannelDifference)(nil),                 // 185: pbmessageserver.ReqGetchannelDifference
	(*ReplyChannelDiffCommon)(nil),                  // 186: pbmessageserver.ReplyChannelDiffCommon
	(*ReplyGetChannelDifferenceEmpty)(nil),          // 187: pbmessageserver.ReplyGetChannelDifferenceEmpty
	(*ReplyGetChannelDifference)(nil),               // 188: pbmessageserver.ReplyGetChannelDifference
	(*ReplyGetChannelDifferenceTooLong)(nil),        // 189: pbmessageserver.ReplyGetChannelDifferenceTooLong
	(*ReqGetChannelMsgHistory)(nil),                 // 190: pbmessageserver.ReqGetChannelMsgHistory
	(*ReplyChannelMsgs)(nil),                        // 191: pbmessageserver.ReplyChannelMsgs
	(*ReqParticipants)(nil),                         // 192: pbmessageserver.ReqParticipants
	(*ReplyParticipants)(nil),                       // 193: pbmessageserver.ReplyParticipants
	(*ReqParticipant)(nil),                          // 194: pbmessageserver.ReqParticipant
	(*ReplyParticipant)(nil),                        // 195: pbmessageserver.ReplyParticipant
	(*ReqGetChannelMsgsByMsgsId)(nil),               // 196: pbmessageserver.ReqGetChannelMsgsByMsgsId
	(*ReqGetChannelCommonDialogs)(nil),              // 197: pbmessageserver.ReqGetChannelCommonDialogs
	(*ChannelDialog)(nil),                           // 198: pbmessageserver.ChannelDialog
	(*ChannelDialogAndMsg)(nil),                     // 199: pbmessageserver.ChannelDialogAndMsg
	(*ChannelDialogAndMsgs)(nil),                    // 200: pbmessageserver.ChannelDialogAndMsgs
	(*UserMsg)(nil),                                 // 201: pbmessageserver.UserMsg
	(*RequestWebPMessage)(nil),                      // 202: pbmessageserver.RequestWebPMessage
	(*ReplyRequestWebPagePreview)(nil),              // 203: pbmessageserver.ReplyRequestWebPagePreview
	(*Reqpushusermsg)(nil),                          // 204: pbmessageserver.Reqpushusermsg
	(*ReplyPush)(nil),                               // 205: pbmessageserver.ReplyPush
	(*ReqMessageSearch)(nil),                        // 206: pbmessageserver.ReqMessageSearch
	(*ReplyMessageSearch)(nil),                      // 207: pbmessageserver.ReplyMessageSearch
	(*ReqCheckChatInvite)(nil),                      // 208: pbmessageserver.ReqCheckChatInvite
	(*ReqGetChannelsLastMsgsByUserId)(nil),          // 209: pbmessageserver.ReqGetChannelsLastMsgsByUserId
	(*ReplyGetChannelsLastMsgsByUserId)(nil),        // 210: pbmessageserver.ReplyGetChannelsLastMsgsByUserId
	(*ReqChannelAdminLog)(nil),                      // 211: pbmessageserver.ReqChannelAdminLog
	(*ChannelAdminLogEventFilter)(nil),              // 212: pbmessageserver.ChannelAdminLogEventFilter
	(*ReplyChannelAdminLog)(nil),                    // 213: pbmessageserver.ReplyChannelAdminLog
	(*ReqImportChatInvite)(nil),                     // 214: pbmessageserver.ReqImportChatInvite
	(*ReplyImportChatInvite)(nil),                   // 215: pbmessageserver.ReplyImportChatInvite
	(*ReqBanChannelUser)(nil),                       // 216: pbmessageserver.ReqBanChannelUser
	(*ReplyBanChannelUser)(nil),                     // 217: pbmessageserver.ReplyBanChannelUser
	(*ChannelBannedRights)(nil),                     // 218: pbmessageserver.ChannelBannedRights
	(*ReqFullchannel)(nil),                          // 219: pbmessageserver.ReqFullchannel
	(*ReqExportChannelLink)(nil),                    // 220: pbmessageserver.ReqExportChannelLink
	(*ReplyExportChannelLink)(nil),                  // 221: pbmessageserver.ReplyExportChannelLink
	(*ReqChannelToggleInvite)(nil),                  // 222: pbmessageserver.ReqChannelToggleInvite
	(*ReplyChannelToggleInvite)(nil),                // 223: pbmessageserver.ReplyChannelToggleInvite
	(*ReqChannelUpdateUserName)(nil),                // 224: pbmessageserver.ReqChannelUpdateUserName
	(*ReplyChannelUpdateUserName)(nil),              // 225: pbmessageserver.ReplyChannelUpdateUserName
	(*ReqChannelCheckUserName)(nil),                 // 226: pbmessageserver.ReqChannelCheckUserName
	(*ReplyChannelCheckUserName)(nil),               // 227: pbmessageserver.ReplyChannelCheckUserName
	(*ReqChangeGroupAndChannelCrator)(nil),          // 228: pbmessageserver.ReqChangeGroupAndChannelCrator
	(*ReplyChangeGroupAndChannelCrator)(nil),        // 229: pbmessageserver.ReplyChangeGroupAndChannelCrator
	(*ReqGetChannels)(nil),                          // 230: pbmessageserver.ReqGetChannels
	(*ReplyGetChannels)(nil),                        // 231: pbmessageserver.ReplyGetChannels
	(*ReplyFullChannel)(nil),                        // 232: pbmessageserver.ReplyFullChannel
	(*ReqGetMessageByUserIdMsgId)(nil),              // 233: pbmessageserver.ReqGetMessageByUserIdMsgId
	(*ReplyGetMessageByUserIdMsgId)(nil),            // 234: pbmessageserver.ReplyGetMessageByUserIdMsgId
	(*ReqGetMessageByUserIdUuid)(nil),               // 235: pbmessageserver.ReqGetMessageByUserIdUuid
	(*ReplyGetMessageByUserIdUuid)(nil),             // 236: pbmessageserver.ReplyGetMessageByUserIdUuid
	(*ReqGetChannelMessageByChannelIdMsgId)(nil),    // 237: pbmessageserver.ReqGetChannelMessageByChannelIdMsgId
	(*ReplyGetChannelMessageByChannelIdMsgId)(nil),  // 238: pbmessageserver.ReplyGetChannelMessageByChannelIdMsgId
	(*ReplyStoreOtherInfoMsg)(nil),                  // 239: pbmessageserver.ReplyStoreOtherInfoMsg
	(*ReplyBatchStoreOtherInfoMsg)(nil),             // 240: pbmessageserver.ReplyBatchStoreOtherInfoMsg
	(*ReplyGetOtherInfoMsg)(nil),                    // 241: pbmessageserver.ReplyGetOtherInfoMsg
	(*ReqGetUsersChatsMt)(nil),                      // 242: pbmessageserver.ReqGetUsersChatsMt
	(*ReplyGetUsersChatsMt)(nil),                    // 243: pbmessageserver.ReplyGetUsersChatsMt
	(*ReqGifQueryAndUpload)(nil),                    // 244: pbmessageserver.ReqGifQueryAndUpload
	(*ReplyGifQueryAndUpload)(nil),                  // 245: pbmessageserver.ReplyGifQueryAndUpload
	(*FidData)(nil),                                 // 246: pbmessageserver.FidData
	(*ReqGifSearchApi)(nil),                         // 247: pbmessageserver.ReqGifSearchApi
	(*ReplyGifSearchApi)(nil),                       // 248: pbmessageserver.ReplyGifSearchApi
	(*SearchData)(nil),                              // 249: pbmessageserver.SearchData
	(*Pagination)(nil),                              // 250: pbmessageserver.Pagination
	(*ReqReceiveRedPacket)(nil),                     // 251: pbmessageserver.ReqReceiveRedPacket
	(*ReplyReceiveRedPacket)(nil),                   // 252: pbmessageserver.ReplyReceiveRedPacket
	(*ReqGetWebPage)(nil),                           // 253: pbmessageserver.ReqGetWebPage
	(*ReplyGetWebPage)(nil),                         // 254: pbmessageserver.ReplyGetWebPage
	(*WebPage)(nil),                                 // 255: pbmessageserver.WebPage
	(*ReqGetWebPagePreview)(nil),                    // 256: pbmessageserver.ReqGetWebPagePreview
	(*ReplyGetWebPagePreview)(nil),                  // 257: pbmessageserver.ReplyGetWebPagePreview
	(*UserScore)(nil),                               // 258: pbmessageserver.UserScore
	(*FoldersEditPeerFoldersReq)(nil),               // 259: pbmessageserver.FoldersEditPeerFoldersReq
	(*FoldersEditPeerFoldersReply)(nil),             // 260: pbmessageserver.FoldersEditPeerFoldersReply
	(*FoldersDeleteFolderReq)(nil),                  // 261: pbmessageserver.FoldersDeleteFolderReq
	(*FoldersDeleteFolderReply)(nil),                // 262: pbmessageserver.FoldersDeleteFolderReply
	(*ReqSendPaymentNotifyMsg)(nil),                 // 263: pbmessageserver.ReqSendPaymentNotifyMsg
	(*RspSendPaymentNotifyMsg)(nil),                 // 264: pbmessageserver.RspSendPaymentNotifyMsg
	(*ReqSendAddMutulContactNotify)(nil),            // 265: pbmessageserver.ReqSendAddMutulContactNotify
	(*RespSendAddMutulContactNotify)(nil),           // 266: pbmessageserver.RespSendAddMutulContactNotify
	(*ReqSendAddSingleContactNotify)(nil),           // 267: pbmessageserver.ReqSendAddSingleContactNotify
	(*RespSendAddSingleContactNotify)(nil),          // 268: pbmessageserver.RespSendAddSingleContactNotify
	(*pbcomm.Debug)(nil),                            // 269: pbcomm.Debug
	(*pbmessagedb.UserMsg)(nil),                     // 270: messagedb.UserMsg
	(*pbmessagedb.OtherInfoMsg)(nil),                // 271: messagedb.OtherInfoMsg
	(*pbmessagedb.ReqGetLastLimitDialog)(nil),       // 272: messagedb.ReqGetLastLimitDialog
	(*pbmessagedb.ReqStoreOtherInfoMsg)(nil),        // 273: messagedb.ReqStoreOtherInfoMsg
	(*pbmessagedb.ReqBatchStoreOtherInfoMsg)(nil),   // 274: messagedb.ReqBatchStoreOtherInfoMsg
}
var file_pbmessageserver_proto_depIdxs = []int32{
	269, // 0: pbmessageserver.ReqSendMediaSysNotify.debug:type_name -> pbcomm.Debug
	11,  // 1: pbmessageserver.CallBackRespSendMediaSysNotify.failUsers:type_name -> pbmessageserver.FailUser
	12,  // 2: pbmessageserver.CallBackRespSendMediaSysNotify.SucceedUsers:type_name -> pbmessageserver.SucceedUser
	269, // 3: pbmessageserver.ReqEditMessageMedia.debug:type_name -> pbcomm.Debug
	18,  // 4: pbmessageserver.GetChannelInactiveUsersResult.users:type_name -> pbmessageserver.ChannelInactiveUser
	269, // 5: pbmessageserver.GetSecurityRandomIdsReq.debug:type_name -> pbcomm.Debug
	0,   // 6: pbmessageserver.GetSecurityRandomIdsResult.errcode:type_name -> pbmessageserver.GetSecurityRandomIdsResult.ErrorCode
	269, // 7: pbmessageserver.LogoutDisCardAllSecurityReq.debug:type_name -> pbcomm.Debug
	1,   // 8: pbmessageserver.LogoutDisCardAllSecurityResult.errcode:type_name -> pbmessageserver.LogoutDisCardAllSecurityResult.ErrorCode
	269, // 9: pbmessageserver.SetEncryptedTypingReq.debug:type_name -> pbcomm.Debug
	2,   // 10: pbmessageserver.SetEncryptedTypingResult.error_code:type_name -> pbmessageserver.SetEncryptedTypingResult.Errcode
	269, // 11: pbmessageserver.ReadEncryptedHistoryReq.debug:type_name -> pbcomm.Debug
	3,   // 12: pbmessageserver.ReadEncryptedHistoryResult.error_code:type_name -> pbmessageserver.ReadEncryptedHistoryResult.Errcode
	269, // 13: pbmessageserver.DiscardEncryptionReq.debug:type_name -> pbcomm.Debug
	4,   // 14: pbmessageserver.DiscardEncryptionResult.error_code:type_name -> pbmessageserver.DiscardEncryptionResult.Errcode
	269, // 15: pbmessageserver.SendEncryptedServiceReq.debug:type_name -> pbcomm.Debug
	5,   // 16: pbmessageserver.SendEncryptedServiceResult.error_code:type_name -> pbmessageserver.SendEncryptedServiceResult.Errcode
	269, // 17: pbmessageserver.SendEncryptedFileReq.debug:type_name -> pbcomm.Debug
	6,   // 18: pbmessageserver.SendEncryptedFileResult.error_code:type_name -> pbmessageserver.SendEncryptedFileResult.Errcode
	269, // 19: pbmessageserver.SendEncryptedReq.debug:type_name -> pbcomm.Debug
	7,   // 20: pbmessageserver.SendEncryptedResult.error_code:type_name -> pbmessageserver.SendEncryptedResult.Errcode
	269, // 21: pbmessageserver.AcceptEncryptionReq.debug:type_name -> pbcomm.Debug
	8,   // 22: pbmessageserver.AcceptEncryptionResult.error_code:type_name -> pbmessageserver.AcceptEncryptionResult.Errcode
	269, // 23: pbmessageserver.RequestEncryptionReq.debug:type_name -> pbcomm.Debug
	9,   // 24: pbmessageserver.RequestEncryptionResult.errorCode:type_name -> pbmessageserver.RequestEncryptionResult.ErroCode
	269, // 25: pbmessageserver.ReqBotCall.debug:type_name -> pbcomm.Debug
	269, // 26: pbmessageserver.ReqBotInlineCall.debug:type_name -> pbcomm.Debug
	17,  // 27: pbmessageserver.ReplyBotInlineCall.inlinecall:type_name -> pbmessageserver.InlineCall
	258, // 28: pbmessageserver.ReqSetGameScore.scores:type_name -> pbmessageserver.UserScore
	269, // 29: pbmessageserver.ReqSetGameScore.debug:type_name -> pbcomm.Debug
	269, // 30: pbmessageserver.ReqRemoveConn.debug:type_name -> pbcomm.Debug
	269, // 31: pbmessageserver.ReqSignUpMsg.debug:type_name -> pbcomm.Debug
	269, // 32: pbmessageserver.ReqSendCodeMsg.debug:type_name -> pbcomm.Debug
	269, // 33: pbmessageserver.ReqSignInMsg.debug:type_name -> pbcomm.Debug
	269, // 34: pbmessageserver.ReqSendSynMsg.debug:type_name -> pbcomm.Debug
	269, // 35: pbmessageserver.ReqSendUserMsg.debug:type_name -> pbcomm.Debug
	269, // 36: pbmessageserver.ReqSendUserOneClientMsg.debug:type_name -> pbcomm.Debug
	269, // 37: pbmessageserver.ReqSendMoreUserMsg.debug:type_name -> pbcomm.Debug
	269, // 38: pbmessageserver.ReqSendCallMsg.debug:type_name -> pbcomm.Debug
	269, // 39: pbmessageserver.ReqCallPush.debug:type_name -> pbcomm.Debug
	269, // 40: pbmessageserver.ReqGetState.debug:type_name -> pbcomm.Debug
	269, // 41: pbmessageserver.ReqGetPts.debug:type_name -> pbcomm.Debug
	269, // 42: pbmessageserver.RequestDialog.debug:type_name -> pbcomm.Debug
	66,  // 43: pbmessageserver.ReplyGetLastLimitDialog.UserRatingList:type_name -> pbmessageserver.UserIdRating
	269, // 44: pbmessageserver.ReqPinnedDialogs.debug:type_name -> pbcomm.Debug
	269, // 45: pbmessageserver.ReqPeerDialogs.debug:type_name -> pbcomm.Debug
	269, // 46: pbmessageserver.ReqRecentLocations.debug:type_name -> pbcomm.Debug
	269, // 47: pbmessageserver.ReqPinDialog.debug:type_name -> pbcomm.Debug
	269, // 48: pbmessageserver.ReqReorderPinnedDialogs.debug:type_name -> pbcomm.Debug
	269, // 49: pbmessageserver.RequestSendMessage.debug:type_name -> pbcomm.Debug
	269, // 50: pbmessageserver.SendVoteReq.debug:type_name -> pbcomm.Debug
	269, // 51: pbmessageserver.RequestSySSendMessage.debug:type_name -> pbcomm.Debug
	269, // 52: pbmessageserver.ReqS2SMsg.debug:type_name -> pbcomm.Debug
	269, // 53: pbmessageserver.ReqSendMedia.debug:type_name -> pbcomm.Debug
	269, // 54: pbmessageserver.ReqUploadMedia.debug:type_name -> pbcomm.Debug
	269, // 55: pbmessageserver.ReqForwardMessages.debug:type_name -> pbcomm.Debug
	269, // 56: pbmessageserver.ReqGetMsgs.debug:type_name -> pbcomm.Debug
	269, // 57: pbmessageserver.ReqHistory.debug:type_name -> pbcomm.Debug
	269, // 58: pbmessageserver.ReqCreateChat.debug:type_name -> pbcomm.Debug
	269, // 59: pbmessageserver.ReqAddChatUser.debug:type_name -> pbcomm.Debug
	269, // 60: pbmessageserver.ReqDeleteChatUser.debug:type_name -> pbcomm.Debug
	269, // 61: pbmessageserver.ReqEditChatAdmin.debug:type_name -> pbcomm.Debug
	269, // 62: pbmessageserver.ReqEditChatTitle.debug:type_name -> pbcomm.Debug
	269, // 63: pbmessageserver.ReqGetAllChats.debug:type_name -> pbcomm.Debug
	269, // 64: pbmessageserver.ReqGetFullChat.debug:type_name -> pbcomm.Debug
	269, // 65: pbmessageserver.ReqEditChatPhoto.debug:type_name -> pbcomm.Debug
	269, // 66: pbmessageserver.ReqMigrateChat.debug:type_name -> pbcomm.Debug
	269, // 67: pbmessageserver.ReqReadHistory.debug:type_name -> pbcomm.Debug
	269, // 68: pbmessageserver.ReqUpdateReadOut.debug:type_name -> pbcomm.Debug
	269, // 69: pbmessageserver.ReqDiffByPts.debug:type_name -> pbcomm.Debug
	269, // 70: pbmessageserver.ReqDeleteHistory.debug:type_name -> pbcomm.Debug
	269, // 71: pbmessageserver.ReqDeleteMessages.debug:type_name -> pbcomm.Debug
	269, // 72: pbmessageserver.ReqEditMessage.debug:type_name -> pbcomm.Debug
	269, // 73: pbmessageserver.ReqNotifySettings.debug:type_name -> pbcomm.Debug
	269, // 74: pbmessageserver.ReqUpdateNotifySettings.debug:type_name -> pbcomm.Debug
	269, // 75: pbmessageserver.ReqMessageEditData.debug:type_name -> pbcomm.Debug
	269, // 76: pbmessageserver.ReqSaveMsgDraft.debug:type_name -> pbcomm.Debug
	269, // 77: pbmessageserver.ReqGetUserUnRead.debug:type_name -> pbcomm.Debug
	130, // 78: pbmessageserver.InputChannel.inputChannelEmpty:type_name -> pbmessageserver.InputChannelEmpty
	131, // 79: pbmessageserver.InputChannel.inputChannelinputChannel:type_name -> pbmessageserver.InputChannelinputChannel
	146, // 80: pbmessageserver.Status.online:type_name -> pbmessageserver.UserStatusOnline
	147, // 81: pbmessageserver.Status.offline:type_name -> pbmessageserver.UserStatusOffline
	148, // 82: pbmessageserver.Status.lastMonth:type_name -> pbmessageserver.UserStatusLastMonth
	149, // 83: pbmessageserver.User_info.status:type_name -> pbmessageserver.Status
	269, // 84: pbmessageserver.RequestChannel.debug:type_name -> pbcomm.Debug
	269, // 85: pbmessageserver.RequestChannelInvite.debug:type_name -> pbcomm.Debug
	269, // 86: pbmessageserver.ReqJoinChannel.debug:type_name -> pbcomm.Debug
	269, // 87: pbmessageserver.ReqChannelKick.debug:type_name -> pbcomm.Debug
	269, // 88: pbmessageserver.ReqLeaveChannel.debug:type_name -> pbcomm.Debug
	269, // 89: pbmessageserver.ReqEditChannelTitle.debug:type_name -> pbcomm.Debug
	269, // 90: pbmessageserver.ReqEditChannelAdmin.debug:type_name -> pbcomm.Debug
	269, // 91: pbmessageserver.ReqEditChannelPhoto.debug:type_name -> pbcomm.Debug
	269, // 92: pbmessageserver.chatInviteExported.debug:type_name -> pbcomm.Debug
	269, // 93: pbmessageserver.ReqEditChannelAbout.debug:type_name -> pbcomm.Debug
	269, // 94: pbmessageserver.ReqDeleteChannelMessages.debug:type_name -> pbcomm.Debug
	269, // 95: pbmessageserver.ReqDeleteChannelSelfHistory.debug:type_name -> pbcomm.Debug
	269, // 96: pbmessageserver.ReqDeleteChannelHistory.debug:type_name -> pbcomm.Debug
	269, // 97: pbmessageserver.ReqUpdatePinnedChannelMessage.debug:type_name -> pbcomm.Debug
	269, // 98: pbmessageserver.ReqDeleteChannel.debug:type_name -> pbcomm.Debug
	269, // 99: pbmessageserver.ReqReadChannelHistory.debug:type_name -> pbcomm.Debug
	269, // 100: pbmessageserver.ReqUpdateChannelReadOut.debug:type_name -> pbcomm.Debug
	269, // 101: pbmessageserver.ReqGetchannelDifference.debug:type_name -> pbcomm.Debug
	269, // 102: pbmessageserver.ReqGetChannelMsgHistory.debug:type_name -> pbcomm.Debug
	269, // 103: pbmessageserver.ReqParticipants.debug:type_name -> pbcomm.Debug
	269, // 104: pbmessageserver.ReqParticipant.debug:type_name -> pbcomm.Debug
	269, // 105: pbmessageserver.ReqGetChannelMsgsByMsgsId.debug:type_name -> pbcomm.Debug
	269, // 106: pbmessageserver.ReqGetChannelCommonDialogs.debug:type_name -> pbcomm.Debug
	198, // 107: pbmessageserver.ChannelDialogAndMsg.ChannelDialog:type_name -> pbmessageserver.ChannelDialog
	201, // 108: pbmessageserver.ChannelDialogAndMsg.ChannelMsg:type_name -> pbmessageserver.UserMsg
	199, // 109: pbmessageserver.ChannelDialogAndMsgs.channelDialogAndMsg:type_name -> pbmessageserver.ChannelDialogAndMsg
	269, // 110: pbmessageserver.ReqMessageSearch.debug:type_name -> pbcomm.Debug
	201, // 111: pbmessageserver.ReplyMessageSearch.message:type_name -> pbmessageserver.UserMsg
	269, // 112: pbmessageserver.ReqCheckChatInvite.debug:type_name -> pbcomm.Debug
	269, // 113: pbmessageserver.ReqGetChannelsLastMsgsByUserId.debug:type_name -> pbcomm.Debug
	201, // 114: pbmessageserver.ReplyGetChannelsLastMsgsByUserId.userMsgs:type_name -> pbmessageserver.UserMsg
	212, // 115: pbmessageserver.ReqChannelAdminLog.eventFilter:type_name -> pbmessageserver.ChannelAdminLogEventFilter
	269, // 116: pbmessageserver.ReqChannelAdminLog.debug:type_name -> pbcomm.Debug
	269, // 117: pbmessageserver.ReqImportChatInvite.debug:type_name -> pbcomm.Debug
	218, // 118: pbmessageserver.ReqBanChannelUser.channelBannedRights:type_name -> pbmessageserver.ChannelBannedRights
	269, // 119: pbmessageserver.ReqBanChannelUser.debug:type_name -> pbcomm.Debug
	269, // 120: pbmessageserver.ReqFullchannel.debug:type_name -> pbcomm.Debug
	269, // 121: pbmessageserver.ReqExportChannelLink.debug:type_name -> pbcomm.Debug
	269, // 122: pbmessageserver.ReqChannelToggleInvite.debug:type_name -> pbcomm.Debug
	269, // 123: pbmessageserver.ReqChannelUpdateUserName.debug:type_name -> pbcomm.Debug
	269, // 124: pbmessageserver.ReqChannelCheckUserName.debug:type_name -> pbcomm.Debug
	269, // 125: pbmessageserver.ReqGetChannels.debug:type_name -> pbcomm.Debug
	269, // 126: pbmessageserver.ReqGetMessageByUserIdMsgId.debug:type_name -> pbcomm.Debug
	270, // 127: pbmessageserver.ReplyGetMessageByUserIdMsgId.UserMessage:type_name -> messagedb.UserMsg
	269, // 128: pbmessageserver.ReqGetMessageByUserIdUuid.debug:type_name -> pbcomm.Debug
	270, // 129: pbmessageserver.ReplyGetMessageByUserIdUuid.UserMessage:type_name -> messagedb.UserMsg
	269, // 130: pbmessageserver.ReqGetChannelMessageByChannelIdMsgId.debug:type_name -> pbcomm.Debug
	270, // 131: pbmessageserver.ReplyGetChannelMessageByChannelIdMsgId.UserMessage:type_name -> messagedb.UserMsg
	271, // 132: pbmessageserver.ReplyGetOtherInfoMsg.OtherInfoMsgs:type_name -> messagedb.OtherInfoMsg
	269, // 133: pbmessageserver.ReqGetUsersChatsMt.debug:type_name -> pbcomm.Debug
	246, // 134: pbmessageserver.ReplyGifQueryAndUpload.data:type_name -> pbmessageserver.FidData
	249, // 135: pbmessageserver.ReplyGifSearchApi.data:type_name -> pbmessageserver.SearchData
	250, // 136: pbmessageserver.ReplyGifSearchApi.page:type_name -> pbmessageserver.Pagination
	269, // 137: pbmessageserver.ReqReceiveRedPacket.debug:type_name -> pbcomm.Debug
	255, // 138: pbmessageserver.ReplyGetWebPage.webPage:type_name -> pbmessageserver.WebPage
	255, // 139: pbmessageserver.ReplyGetWebPagePreview.webPage:type_name -> pbmessageserver.WebPage
	269, // 140: pbmessageserver.FoldersEditPeerFoldersReq.debug:type_name -> pbcomm.Debug
	269, // 141: pbmessageserver.FoldersDeleteFolderReq.debug:type_name -> pbcomm.Debug
	269, // 142: pbmessageserver.ReqSendPaymentNotifyMsg.debug:type_name -> pbcomm.Debug
	269, // 143: pbmessageserver.ReqSendAddMutulContactNotify.debug:type_name -> pbcomm.Debug
	269, // 144: pbmessageserver.ReqSendAddSingleContactNotify.debug:type_name -> pbcomm.Debug
	41,  // 145: pbmessageserver.MessageServer.BotCall:input_type -> pbmessageserver.ReqBotCall
	43,  // 146: pbmessageserver.MessageServer.BotInlineCall:input_type -> pbmessageserver.ReqBotInlineCall
	45,  // 147: pbmessageserver.MessageServer.SetGameScore:input_type -> pbmessageserver.ReqSetGameScore
	47,  // 148: pbmessageserver.MessageServer.RemoveConn:input_type -> pbmessageserver.ReqRemoveConn
	49,  // 149: pbmessageserver.MessageServer.SignUpMsg:input_type -> pbmessageserver.ReqSignUpMsg
	50,  // 150: pbmessageserver.MessageServer.SendCodeMsg:input_type -> pbmessageserver.ReqSendCodeMsg
	51,  // 151: pbmessageserver.MessageServer.SignInMsg:input_type -> pbmessageserver.ReqSignInMsg
	52,  // 152: pbmessageserver.MessageServer.SendSynMsg:input_type -> pbmessageserver.ReqSendSynMsg
	53,  // 153: pbmessageserver.MessageServer.SendUserMsg:input_type -> pbmessageserver.ReqSendUserMsg
	54,  // 154: pbmessageserver.MessageServer.SendUserOneClientMsg:input_type -> pbmessageserver.ReqSendUserOneClientMsg
	55,  // 155: pbmessageserver.MessageServer.SendMoreUserMsg:input_type -> pbmessageserver.ReqSendMoreUserMsg
	56,  // 156: pbmessageserver.MessageServer.SendCallMsg:input_type -> pbmessageserver.ReqSendCallMsg
	57,  // 157: pbmessageserver.MessageServer.CallPush:input_type -> pbmessageserver.ReqCallPush
	64,  // 158: pbmessageserver.MessageServer.GetDialog:input_type -> pbmessageserver.RequestDialog
	272, // 159: pbmessageserver.MessageServer.GetLastLimitDialog:input_type -> messagedb.ReqGetLastLimitDialog
	68,  // 160: pbmessageserver.MessageServer.GetPinnedDialogs:input_type -> pbmessageserver.ReqPinnedDialogs
	69,  // 161: pbmessageserver.MessageServer.GetPeerDialogs:input_type -> pbmessageserver.ReqPeerDialogs
	70,  // 162: pbmessageserver.MessageServer.GetRecentLocations:input_type -> pbmessageserver.ReqRecentLocations
	71,  // 163: pbmessageserver.MessageServer.PinDialog:input_type -> pbmessageserver.ReqPinDialog
	72,  // 164: pbmessageserver.MessageServer.ReorderPinnedDialogs:input_type -> pbmessageserver.ReqReorderPinnedDialogs
	59,  // 165: pbmessageserver.MessageServer.GetState:input_type -> pbmessageserver.ReqGetState
	74,  // 166: pbmessageserver.MessageServer.SendMessage:input_type -> pbmessageserver.RequestSendMessage
	77,  // 167: pbmessageserver.MessageServer.SYSSendMessage:input_type -> pbmessageserver.RequestSySSendMessage
	80,  // 168: pbmessageserver.MessageServer.SendMedia:input_type -> pbmessageserver.ReqSendMedia
	81,  // 169: pbmessageserver.MessageServer.UploadMedia:input_type -> pbmessageserver.ReqUploadMedia
	85,  // 170: pbmessageserver.MessageServer.GetMsg:input_type -> pbmessageserver.ReqGetMsgs
	87,  // 171: pbmessageserver.MessageServer.GetHistory:input_type -> pbmessageserver.ReqHistory
	89,  // 172: pbmessageserver.MessageServer.CreateChat:input_type -> pbmessageserver.ReqCreateChat
	91,  // 173: pbmessageserver.MessageServer.AddChatUser:input_type -> pbmessageserver.ReqAddChatUser
	93,  // 174: pbmessageserver.MessageServer.DeleteChatUser:input_type -> pbmessageserver.ReqDeleteChatUser
	95,  // 175: pbmessageserver.MessageServer.EditChatAdmin:input_type -> pbmessageserver.ReqEditChatAdmin
	103, // 176: pbmessageserver.MessageServer.EditChatPhoto:input_type -> pbmessageserver.ReqEditChatPhoto
	97,  // 177: pbmessageserver.MessageServer.EditChatTitle:input_type -> pbmessageserver.ReqEditChatTitle
	99,  // 178: pbmessageserver.MessageServer.GetAllChats:input_type -> pbmessageserver.ReqGetAllChats
	101, // 179: pbmessageserver.MessageServer.GetFullChat:input_type -> pbmessageserver.ReqGetFullChat
	105, // 180: pbmessageserver.MessageServer.MigrateChat:input_type -> pbmessageserver.ReqMigrateChat
	82,  // 181: pbmessageserver.MessageServer.ForwardMessages:input_type -> pbmessageserver.ReqForwardMessages
	78,  // 182: pbmessageserver.MessageServer.S2SSendMsg:input_type -> pbmessageserver.ReqS2SMsg
	62,  // 183: pbmessageserver.MessageServer.GetPts:input_type -> pbmessageserver.ReqGetPts
	107, // 184: pbmessageserver.MessageServer.ReadHistory:input_type -> pbmessageserver.ReqReadHistory
	109, // 185: pbmessageserver.MessageServer.UpdateReadOutBox:input_type -> pbmessageserver.ReqUpdateReadOut
	111, // 186: pbmessageserver.MessageServer.GetDiffByPts:input_type -> pbmessageserver.ReqDiffByPts
	113, // 187: pbmessageserver.MessageServer.DeleteHistory:input_type -> pbmessageserver.ReqDeleteHistory
	115, // 188: pbmessageserver.MessageServer.DeleteMessages:input_type -> pbmessageserver.ReqDeleteMessages
	117, // 189: pbmessageserver.MessageServer.EditMessage:input_type -> pbmessageserver.ReqEditMessage
	119, // 190: pbmessageserver.MessageServer.GetNotifySettings:input_type -> pbmessageserver.ReqNotifySettings
	121, // 191: pbmessageserver.MessageServer.UpdateNotifySettings:input_type -> pbmessageserver.ReqUpdateNotifySettings
	123, // 192: pbmessageserver.MessageServer.GetMessageEditData:input_type -> pbmessageserver.ReqMessageEditData
	125, // 193: pbmessageserver.MessageServer.SaveMsgDraft:input_type -> pbmessageserver.ReqSaveMsgDraft
	127, // 194: pbmessageserver.MessageServer.GetUserUnRead:input_type -> pbmessageserver.ReqGetUserUnRead
	206, // 195: pbmessageserver.MessageServer.SearchMedia:input_type -> pbmessageserver.ReqMessageSearch
	208, // 196: pbmessageserver.MessageServer.CheckChatInvite:input_type -> pbmessageserver.ReqCheckChatInvite
	153, // 197: pbmessageserver.MessageServer.CreateChannel:input_type -> pbmessageserver.RequestChannel
	155, // 198: pbmessageserver.MessageServer.InviteChannelMember:input_type -> pbmessageserver.RequestChannelInvite
	159, // 199: pbmessageserver.MessageServer.KickFromChannel:input_type -> pbmessageserver.ReqChannelKick
	161, // 200: pbmessageserver.MessageServer.LeaveChannel:input_type -> pbmessageserver.ReqLeaveChannel
	163, // 201: pbmessageserver.MessageServer.EditChannelTitle:input_type -> pbmessageserver.ReqEditChannelTitle
	165, // 202: pbmessageserver.MessageServer.EditChannelAdmin:input_type -> pbmessageserver.ReqEditChannelAdmin
	167, // 203: pbmessageserver.MessageServer.EditChannelPhoto:input_type -> pbmessageserver.ReqEditChannelPhoto
	170, // 204: pbmessageserver.MessageServer.EditChannelAbout:input_type -> pbmessageserver.ReqEditChannelAbout
	172, // 205: pbmessageserver.MessageServer.DeleteChannelMessages:input_type -> pbmessageserver.ReqDeleteChannelMessages
	174, // 206: pbmessageserver.MessageServer.DeleteChannelSelfHistory:input_type -> pbmessageserver.ReqDeleteChannelSelfHistory
	175, // 207: pbmessageserver.MessageServer.DeleteChannelHistory:input_type -> pbmessageserver.ReqDeleteChannelHistory
	177, // 208: pbmessageserver.MessageServer.UpdatePinnedChannelMessage:input_type -> pbmessageserver.ReqUpdatePinnedChannelMessage
	181, // 209: pbmessageserver.MessageServer.UpdateChannelReadHistory:input_type -> pbmessageserver.ReqReadChannelHistory
	185, // 210: pbmessageserver.MessageServer.GetChannelDifference:input_type -> pbmessageserver.ReqGetchannelDifference
	196, // 211: pbmessageserver.MessageServer.GetChannelMessagesByMsgsId:input_type -> pbmessageserver.ReqGetChannelMsgsByMsgsId
	157, // 212: pbmessageserver.MessageServer.JoinChannel:input_type -> pbmessageserver.ReqJoinChannel
	179, // 213: pbmessageserver.MessageServer.DeleteChannel:input_type -> pbmessageserver.ReqDeleteChannel
	209, // 214: pbmessageserver.MessageServer.GetChannelsLastMsgsByUserId:input_type -> pbmessageserver.ReqGetChannelsLastMsgsByUserId
	211, // 215: pbmessageserver.MessageServer.GetChannelAdminLog:input_type -> pbmessageserver.ReqChannelAdminLog
	214, // 216: pbmessageserver.MessageServer.ImportChatInvite:input_type -> pbmessageserver.ReqImportChatInvite
	216, // 217: pbmessageserver.MessageServer.EditBanChannelUser:input_type -> pbmessageserver.ReqBanChannelUser
	219, // 218: pbmessageserver.MessageServer.GetFullChannel:input_type -> pbmessageserver.ReqFullchannel
	194, // 219: pbmessageserver.MessageServer.GetParticipant:input_type -> pbmessageserver.ReqParticipant
	192, // 220: pbmessageserver.MessageServer.GetParticipants:input_type -> pbmessageserver.ReqParticipants
	220, // 221: pbmessageserver.MessageServer.ExportChannelLink:input_type -> pbmessageserver.ReqExportChannelLink
	222, // 222: pbmessageserver.MessageServer.ChannelToggleInvite:input_type -> pbmessageserver.ReqChannelToggleInvite
	230, // 223: pbmessageserver.MessageServer.Getchannels:input_type -> pbmessageserver.ReqGetChannels
	224, // 224: pbmessageserver.MessageServer.UpdateChannelUserName:input_type -> pbmessageserver.ReqChannelUpdateUserName
	226, // 225: pbmessageserver.MessageServer.CheckChannelUserName:input_type -> pbmessageserver.ReqChannelCheckUserName
	228, // 226: pbmessageserver.MessageServer.ChangeGroupAndChannelCrator:input_type -> pbmessageserver.ReqChangeGroupAndChannelCrator
	233, // 227: pbmessageserver.MessageServer.GetMessageByUserIdMsgId:input_type -> pbmessageserver.ReqGetMessageByUserIdMsgId
	235, // 228: pbmessageserver.MessageServer.GetMessageByUserIdUuid:input_type -> pbmessageserver.ReqGetMessageByUserIdUuid
	237, // 229: pbmessageserver.MessageServer.GetChannelMessageByChannelIdMsgId:input_type -> pbmessageserver.ReqGetChannelMessageByChannelIdMsgId
	273, // 230: pbmessageserver.MessageServer.StoreOtherInfoMsg:input_type -> messagedb.ReqStoreOtherInfoMsg
	274, // 231: pbmessageserver.MessageServer.BatchStoreOtherInfoMsg:input_type -> messagedb.ReqBatchStoreOtherInfoMsg
	39,  // 232: pbmessageserver.MessageServer.RequestEncryption:input_type -> pbmessageserver.RequestEncryptionReq
	37,  // 233: pbmessageserver.MessageServer.AcceptEncryption:input_type -> pbmessageserver.AcceptEncryptionReq
	35,  // 234: pbmessageserver.MessageServer.SendEncrypted:input_type -> pbmessageserver.SendEncryptedReq
	33,  // 235: pbmessageserver.MessageServer.SendEncryptedFile:input_type -> pbmessageserver.SendEncryptedFileReq
	31,  // 236: pbmessageserver.MessageServer.SendEncryptedService:input_type -> pbmessageserver.SendEncryptedServiceReq
	29,  // 237: pbmessageserver.MessageServer.DiscardEncryption:input_type -> pbmessageserver.DiscardEncryptionReq
	27,  // 238: pbmessageserver.MessageServer.ReadEncryptedHistory:input_type -> pbmessageserver.ReadEncryptedHistoryReq
	25,  // 239: pbmessageserver.MessageServer.SetEncryptedTing:input_type -> pbmessageserver.SetEncryptedTypingReq
	23,  // 240: pbmessageserver.MessageServer.LogoutDisCardAllSecurity:input_type -> pbmessageserver.LogoutDisCardAllSecurityReq
	21,  // 241: pbmessageserver.MessageServer.GetSecurityRandomIds:input_type -> pbmessageserver.GetSecurityRandomIdsReq
	251, // 242: pbmessageserver.MessageServer.ReceiveRedPacket:input_type -> pbmessageserver.ReqReceiveRedPacket
	19,  // 243: pbmessageserver.MessageServer.GetChannelInactiveUsers:input_type -> pbmessageserver.GetChannelInactiveUsersReq
	259, // 244: pbmessageserver.MessageServer.FoldersEditPeerFolders:input_type -> pbmessageserver.FoldersEditPeerFoldersReq
	261, // 245: pbmessageserver.MessageServer.FoldersDeleteFolder:input_type -> pbmessageserver.FoldersDeleteFolderReq
	75,  // 246: pbmessageserver.MessageServer.SendVote:input_type -> pbmessageserver.SendVoteReq
	263, // 247: pbmessageserver.MessageServer.SendPaymentNotifyMsg:input_type -> pbmessageserver.ReqSendPaymentNotifyMsg
	55,  // 248: pbmessageserver.MessageServer.SendBatchUsersMsg:input_type -> pbmessageserver.ReqSendMoreUserMsg
	265, // 249: pbmessageserver.MessageServer.SendAddMutulContactNotify:input_type -> pbmessageserver.ReqSendAddMutulContactNotify
	267, // 250: pbmessageserver.MessageServer.SendAddSingleContactNotify:input_type -> pbmessageserver.ReqSendAddSingleContactNotify
	10,  // 251: pbmessageserver.MessageServer.SendMediaSysNotify:input_type -> pbmessageserver.ReqSendMediaSysNotify
	15,  // 252: pbmessageserver.MessageServer.EditMessageMedia:input_type -> pbmessageserver.ReqEditMessageMedia
	202, // 253: pbmessageserver.GetWebPagePreview.GetWebPagePreview:input_type -> pbmessageserver.RequestWebPMessage
	204, // 254: pbmessageserver.PushServer.CallPush:input_type -> pbmessageserver.Reqpushusermsg
	206, // 255: pbmessageserver.SearchServer.MessageSearch:input_type -> pbmessageserver.ReqMessageSearch
	244, // 256: pbmessageserver.SearchServer.GifQueryAndUpload:input_type -> pbmessageserver.ReqGifQueryAndUpload
	247, // 257: pbmessageserver.SearchServer.GifSearchApi:input_type -> pbmessageserver.ReqGifSearchApi
	253, // 258: pbmessageserver.SearchServer.GetWebPage:input_type -> pbmessageserver.ReqGetWebPage
	256, // 259: pbmessageserver.SearchServer.GetWebPagePreview:input_type -> pbmessageserver.ReqGetWebPagePreview
	42,  // 260: pbmessageserver.MessageServer.BotCall:output_type -> pbmessageserver.ReplyBotCall
	44,  // 261: pbmessageserver.MessageServer.BotInlineCall:output_type -> pbmessageserver.ReplyBotInlineCall
	46,  // 262: pbmessageserver.MessageServer.SetGameScore:output_type -> pbmessageserver.ReplySetGameScore
	48,  // 263: pbmessageserver.MessageServer.RemoveConn:output_type -> pbmessageserver.ReplyRemoveConn
	73,  // 264: pbmessageserver.MessageServer.SignUpMsg:output_type -> pbmessageserver.ReplyBool
	73,  // 265: pbmessageserver.MessageServer.SendCodeMsg:output_type -> pbmessageserver.ReplyBool
	73,  // 266: pbmessageserver.MessageServer.SignInMsg:output_type -> pbmessageserver.ReplyBool
	73,  // 267: pbmessageserver.MessageServer.SendSynMsg:output_type -> pbmessageserver.ReplyBool
	73,  // 268: pbmessageserver.MessageServer.SendUserMsg:output_type -> pbmessageserver.ReplyBool
	73,  // 269: pbmessageserver.MessageServer.SendUserOneClientMsg:output_type -> pbmessageserver.ReplyBool
	73,  // 270: pbmessageserver.MessageServer.SendMoreUserMsg:output_type -> pbmessageserver.ReplyBool
	73,  // 271: pbmessageserver.MessageServer.SendCallMsg:output_type -> pbmessageserver.ReplyBool
	58,  // 272: pbmessageserver.MessageServer.CallPush:output_type -> pbmessageserver.ReplyCallPush
	65,  // 273: pbmessageserver.MessageServer.GetDialog:output_type -> pbmessageserver.ReplyDialog
	67,  // 274: pbmessageserver.MessageServer.GetLastLimitDialog:output_type -> pbmessageserver.ReplyGetLastLimitDialog
	65,  // 275: pbmessageserver.MessageServer.GetPinnedDialogs:output_type -> pbmessageserver.ReplyDialog
	65,  // 276: pbmessageserver.MessageServer.GetPeerDialogs:output_type -> pbmessageserver.ReplyDialog
	60,  // 277: pbmessageserver.MessageServer.GetRecentLocations:output_type -> pbmessageserver.ReplyResult
	73,  // 278: pbmessageserver.MessageServer.PinDialog:output_type -> pbmessageserver.ReplyBool
	73,  // 279: pbmessageserver.MessageServer.ReorderPinnedDialogs:output_type -> pbmessageserver.ReplyBool
	60,  // 280: pbmessageserver.MessageServer.GetState:output_type -> pbmessageserver.ReplyResult
	60,  // 281: pbmessageserver.MessageServer.SendMessage:output_type -> pbmessageserver.ReplyResult
	60,  // 282: pbmessageserver.MessageServer.SYSSendMessage:output_type -> pbmessageserver.ReplyResult
	60,  // 283: pbmessageserver.MessageServer.SendMedia:output_type -> pbmessageserver.ReplyResult
	60,  // 284: pbmessageserver.MessageServer.UploadMedia:output_type -> pbmessageserver.ReplyResult
	86,  // 285: pbmessageserver.MessageServer.GetMsg:output_type -> pbmessageserver.ReplyGetMsgs
	88,  // 286: pbmessageserver.MessageServer.GetHistory:output_type -> pbmessageserver.ReplyHistory
	90,  // 287: pbmessageserver.MessageServer.CreateChat:output_type -> pbmessageserver.ReplyCreateChat
	92,  // 288: pbmessageserver.MessageServer.AddChatUser:output_type -> pbmessageserver.ReplyAddChatUser
	94,  // 289: pbmessageserver.MessageServer.DeleteChatUser:output_type -> pbmessageserver.ReplyDeleteChatUser
	96,  // 290: pbmessageserver.MessageServer.EditChatAdmin:output_type -> pbmessageserver.ReplyEditChatAdmin
	104, // 291: pbmessageserver.MessageServer.EditChatPhoto:output_type -> pbmessageserver.ReplyEditChatPhoto
	98,  // 292: pbmessageserver.MessageServer.EditChatTitle:output_type -> pbmessageserver.ReplyEditChatTitle
	100, // 293: pbmessageserver.MessageServer.GetAllChats:output_type -> pbmessageserver.ReplyGetAllChats
	102, // 294: pbmessageserver.MessageServer.GetFullChat:output_type -> pbmessageserver.ReplyGetFullChat
	106, // 295: pbmessageserver.MessageServer.MigrateChat:output_type -> pbmessageserver.ReplyMigrateChat
	83,  // 296: pbmessageserver.MessageServer.ForwardMessages:output_type -> pbmessageserver.ReplyForwardMessages
	79,  // 297: pbmessageserver.MessageServer.S2SSendMsg:output_type -> pbmessageserver.ReplyS2SMsg
	63,  // 298: pbmessageserver.MessageServer.GetPts:output_type -> pbmessageserver.ReplyGetPts
	108, // 299: pbmessageserver.MessageServer.ReadHistory:output_type -> pbmessageserver.ReplyReadHistory
	110, // 300: pbmessageserver.MessageServer.UpdateReadOutBox:output_type -> pbmessageserver.ReplyUpdateReadOut
	112, // 301: pbmessageserver.MessageServer.GetDiffByPts:output_type -> pbmessageserver.ReplyDiffByPts
	114, // 302: pbmessageserver.MessageServer.DeleteHistory:output_type -> pbmessageserver.ReplyDeleteHistory
	116, // 303: pbmessageserver.MessageServer.DeleteMessages:output_type -> pbmessageserver.ReplyDeleteMessages
	118, // 304: pbmessageserver.MessageServer.EditMessage:output_type -> pbmessageserver.ReplyEditMessage
	120, // 305: pbmessageserver.MessageServer.GetNotifySettings:output_type -> pbmessageserver.ReplyNotifySettings
	122, // 306: pbmessageserver.MessageServer.UpdateNotifySettings:output_type -> pbmessageserver.ReplyUpdateNotifySettings
	124, // 307: pbmessageserver.MessageServer.GetMessageEditData:output_type -> pbmessageserver.ReplyMessageEditData
	126, // 308: pbmessageserver.MessageServer.SaveMsgDraft:output_type -> pbmessageserver.ReplySaveMsgDraft
	128, // 309: pbmessageserver.MessageServer.GetUserUnRead:output_type -> pbmessageserver.ReplyUserUnread
	60,  // 310: pbmessageserver.MessageServer.SearchMedia:output_type -> pbmessageserver.ReplyResult
	60,  // 311: pbmessageserver.MessageServer.CheckChatInvite:output_type -> pbmessageserver.ReplyResult
	154, // 312: pbmessageserver.MessageServer.CreateChannel:output_type -> pbmessageserver.ReplyChannel
	156, // 313: pbmessageserver.MessageServer.InviteChannelMember:output_type -> pbmessageserver.ReplyChannelInvite
	160, // 314: pbmessageserver.MessageServer.KickFromChannel:output_type -> pbmessageserver.ReplyChannelKick
	162, // 315: pbmessageserver.MessageServer.LeaveChannel:output_type -> pbmessageserver.ReplyLeaveChannel
	164, // 316: pbmessageserver.MessageServer.EditChannelTitle:output_type -> pbmessageserver.ReplyEditChannelTitle
	166, // 317: pbmessageserver.MessageServer.EditChannelAdmin:output_type -> pbmessageserver.ReplyEditChannelAdmin
	168, // 318: pbmessageserver.MessageServer.EditChannelPhoto:output_type -> pbmessageserver.ReplyEditChannelPhoto
	171, // 319: pbmessageserver.MessageServer.EditChannelAbout:output_type -> pbmessageserver.ReplyEditChannelAbout
	173, // 320: pbmessageserver.MessageServer.DeleteChannelMessages:output_type -> pbmessageserver.ReplyDeleteChannelMessages
	73,  // 321: pbmessageserver.MessageServer.DeleteChannelSelfHistory:output_type -> pbmessageserver.ReplyBool
	176, // 322: pbmessageserver.MessageServer.DeleteChannelHistory:output_type -> pbmessageserver.ReplyDeleteChannelHistory
	178, // 323: pbmessageserver.MessageServer.UpdatePinnedChannelMessage:output_type -> pbmessageserver.ReplyUpdatePinnedChannelMessage
	182, // 324: pbmessageserver.MessageServer.UpdateChannelReadHistory:output_type -> pbmessageserver.ReplyReadChannelHistory
	186, // 325: pbmessageserver.MessageServer.GetChannelDifference:output_type -> pbmessageserver.ReplyChannelDiffCommon
	191, // 326: pbmessageserver.MessageServer.GetChannelMessagesByMsgsId:output_type -> pbmessageserver.ReplyChannelMsgs
	158, // 327: pbmessageserver.MessageServer.JoinChannel:output_type -> pbmessageserver.ReplyJoinChannel
	180, // 328: pbmessageserver.MessageServer.DeleteChannel:output_type -> pbmessageserver.ReplyDeleteChannel
	210, // 329: pbmessageserver.MessageServer.GetChannelsLastMsgsByUserId:output_type -> pbmessageserver.ReplyGetChannelsLastMsgsByUserId
	213, // 330: pbmessageserver.MessageServer.GetChannelAdminLog:output_type -> pbmessageserver.ReplyChannelAdminLog
	215, // 331: pbmessageserver.MessageServer.ImportChatInvite:output_type -> pbmessageserver.ReplyImportChatInvite
	217, // 332: pbmessageserver.MessageServer.EditBanChannelUser:output_type -> pbmessageserver.ReplyBanChannelUser
	232, // 333: pbmessageserver.MessageServer.GetFullChannel:output_type -> pbmessageserver.ReplyFullChannel
	195, // 334: pbmessageserver.MessageServer.GetParticipant:output_type -> pbmessageserver.ReplyParticipant
	193, // 335: pbmessageserver.MessageServer.GetParticipants:output_type -> pbmessageserver.ReplyParticipants
	221, // 336: pbmessageserver.MessageServer.ExportChannelLink:output_type -> pbmessageserver.ReplyExportChannelLink
	223, // 337: pbmessageserver.MessageServer.ChannelToggleInvite:output_type -> pbmessageserver.ReplyChannelToggleInvite
	231, // 338: pbmessageserver.MessageServer.Getchannels:output_type -> pbmessageserver.ReplyGetChannels
	225, // 339: pbmessageserver.MessageServer.UpdateChannelUserName:output_type -> pbmessageserver.ReplyChannelUpdateUserName
	227, // 340: pbmessageserver.MessageServer.CheckChannelUserName:output_type -> pbmessageserver.ReplyChannelCheckUserName
	229, // 341: pbmessageserver.MessageServer.ChangeGroupAndChannelCrator:output_type -> pbmessageserver.ReplyChangeGroupAndChannelCrator
	234, // 342: pbmessageserver.MessageServer.GetMessageByUserIdMsgId:output_type -> pbmessageserver.ReplyGetMessageByUserIdMsgId
	236, // 343: pbmessageserver.MessageServer.GetMessageByUserIdUuid:output_type -> pbmessageserver.ReplyGetMessageByUserIdUuid
	238, // 344: pbmessageserver.MessageServer.GetChannelMessageByChannelIdMsgId:output_type -> pbmessageserver.ReplyGetChannelMessageByChannelIdMsgId
	239, // 345: pbmessageserver.MessageServer.StoreOtherInfoMsg:output_type -> pbmessageserver.ReplyStoreOtherInfoMsg
	240, // 346: pbmessageserver.MessageServer.BatchStoreOtherInfoMsg:output_type -> pbmessageserver.ReplyBatchStoreOtherInfoMsg
	40,  // 347: pbmessageserver.MessageServer.RequestEncryption:output_type -> pbmessageserver.RequestEncryptionResult
	38,  // 348: pbmessageserver.MessageServer.AcceptEncryption:output_type -> pbmessageserver.AcceptEncryptionResult
	36,  // 349: pbmessageserver.MessageServer.SendEncrypted:output_type -> pbmessageserver.SendEncryptedResult
	34,  // 350: pbmessageserver.MessageServer.SendEncryptedFile:output_type -> pbmessageserver.SendEncryptedFileResult
	32,  // 351: pbmessageserver.MessageServer.SendEncryptedService:output_type -> pbmessageserver.SendEncryptedServiceResult
	30,  // 352: pbmessageserver.MessageServer.DiscardEncryption:output_type -> pbmessageserver.DiscardEncryptionResult
	28,  // 353: pbmessageserver.MessageServer.ReadEncryptedHistory:output_type -> pbmessageserver.ReadEncryptedHistoryResult
	26,  // 354: pbmessageserver.MessageServer.SetEncryptedTing:output_type -> pbmessageserver.SetEncryptedTypingResult
	24,  // 355: pbmessageserver.MessageServer.LogoutDisCardAllSecurity:output_type -> pbmessageserver.LogoutDisCardAllSecurityResult
	22,  // 356: pbmessageserver.MessageServer.GetSecurityRandomIds:output_type -> pbmessageserver.GetSecurityRandomIdsResult
	252, // 357: pbmessageserver.MessageServer.ReceiveRedPacket:output_type -> pbmessageserver.ReplyReceiveRedPacket
	20,  // 358: pbmessageserver.MessageServer.GetChannelInactiveUsers:output_type -> pbmessageserver.GetChannelInactiveUsersResult
	260, // 359: pbmessageserver.MessageServer.FoldersEditPeerFolders:output_type -> pbmessageserver.FoldersEditPeerFoldersReply
	262, // 360: pbmessageserver.MessageServer.FoldersDeleteFolder:output_type -> pbmessageserver.FoldersDeleteFolderReply
	76,  // 361: pbmessageserver.MessageServer.SendVote:output_type -> pbmessageserver.SendVoteReply
	264, // 362: pbmessageserver.MessageServer.SendPaymentNotifyMsg:output_type -> pbmessageserver.RspSendPaymentNotifyMsg
	73,  // 363: pbmessageserver.MessageServer.SendBatchUsersMsg:output_type -> pbmessageserver.ReplyBool
	266, // 364: pbmessageserver.MessageServer.SendAddMutulContactNotify:output_type -> pbmessageserver.RespSendAddMutulContactNotify
	268, // 365: pbmessageserver.MessageServer.SendAddSingleContactNotify:output_type -> pbmessageserver.RespSendAddSingleContactNotify
	14,  // 366: pbmessageserver.MessageServer.SendMediaSysNotify:output_type -> pbmessageserver.RespSendMediaSysNotify
	16,  // 367: pbmessageserver.MessageServer.EditMessageMedia:output_type -> pbmessageserver.RespEditMessageMedia
	203, // 368: pbmessageserver.GetWebPagePreview.GetWebPagePreview:output_type -> pbmessageserver.ReplyRequestWebPagePreview
	205, // 369: pbmessageserver.PushServer.CallPush:output_type -> pbmessageserver.ReplyPush
	207, // 370: pbmessageserver.SearchServer.MessageSearch:output_type -> pbmessageserver.ReplyMessageSearch
	245, // 371: pbmessageserver.SearchServer.GifQueryAndUpload:output_type -> pbmessageserver.ReplyGifQueryAndUpload
	248, // 372: pbmessageserver.SearchServer.GifSearchApi:output_type -> pbmessageserver.ReplyGifSearchApi
	254, // 373: pbmessageserver.SearchServer.GetWebPage:output_type -> pbmessageserver.ReplyGetWebPage
	257, // 374: pbmessageserver.SearchServer.GetWebPagePreview:output_type -> pbmessageserver.ReplyGetWebPagePreview
	260, // [260:375] is the sub-list for method output_type
	145, // [145:260] is the sub-list for method input_type
	145, // [145:145] is the sub-list for extension type_name
	145, // [145:145] is the sub-list for extension extendee
	0,   // [0:145] is the sub-list for field type_name
}

func init() { file_pbmessageserver_proto_init() }
func file_pbmessageserver_proto_init() {
	if File_pbmessageserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pbmessageserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendMediaSysNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SucceedUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallBackRespSendMediaSysNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespSendMediaSysNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditMessageMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespEditMessageMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlineCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInactiveUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelInactiveUsersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelInactiveUsersResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecurityRandomIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecurityRandomIdsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutDisCardAllSecurityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutDisCardAllSecurityResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEncryptedTypingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEncryptedTypingResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadEncryptedHistoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadEncryptedHistoryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscardEncryptionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscardEncryptionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEncryptedServiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEncryptedServiceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEncryptedFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEncryptedFileResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEncryptedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEncryptedResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptEncryptionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptEncryptionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestEncryptionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestEncryptionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBotCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyBotCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBotInlineCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyBotInlineCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSetGameScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplySetGameScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqRemoveConn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyRemoveConn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSignUpMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendCodeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSignInMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendSynMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendUserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendUserOneClientMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendMoreUserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendCallMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCallPush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyCallPush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdRating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetLastLimitDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqPinnedDialogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqPeerDialogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqRecentLocations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqPinDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqReorderPinnedDialogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyBool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSendMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendVoteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendVoteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSySSendMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqS2SMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyS2SMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUploadMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqForwardMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyForwardMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetMsgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetMsgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCreateChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyCreateChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqAddChatUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyAddChatUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteChatUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDeleteChatUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditChatAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyEditChatAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditChatTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyEditChatTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetAllChats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetAllChats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetFullChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetFullChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditChatPhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyEditChatPhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqMigrateChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyMigrateChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqReadHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyReadHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateReadOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUpdateReadOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDiffByPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDiffByPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDeleteHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDeleteMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyEditMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqNotifySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyNotifySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateNotifySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUpdateNotifySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqMessageEditData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyMessageEditData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSaveMsgDraft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplySaveMsgDraft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUserUnRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUserUnread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputChannelEmpty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputChannelinputChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageActionEditChannelPhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageActionEditChannelAbout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageActionDeleteChannelMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageActionDeleteChannelHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageActionUpdatePinnedChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageActionCheckChannelUsername); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageActionUpdateChannelUsername); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageActionExportChannelInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageActionDeleteChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageActionChannelCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageActionAddChannelUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageActionDeleteChannelUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageActionUserLeaveChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageActionEditChannelTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatusOnline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatusOffline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatusLastMonth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNewChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestChannelInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChannelInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqJoinChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyJoinChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqChannelKick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChannelKick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLeaveChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyLeaveChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditChannelTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyEditChannelTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditChannelAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyEditChannelAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditChannelPhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyEditChannelPhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatInviteExported); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditChannelAbout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyEditChannelAbout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteChannelMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDeleteChannelMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteChannelSelfHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteChannelHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDeleteChannelHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdatePinnedChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUpdatePinnedChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDeleteChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqReadChannelHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyReadChannelHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateChannelReadOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUpdateChannelReadOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetchannelDifference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChannelDiffCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelDifferenceEmpty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelDifference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelDifferenceTooLong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMsgHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChannelMsgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMsgsByMsgsId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelCommonDialogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelDialogAndMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelDialogAndMsgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestWebPMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyRequestWebPagePreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reqpushusermsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyPush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqMessageSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyMessageSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCheckChatInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelsLastMsgsByUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelsLastMsgsByUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqChannelAdminLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelAdminLogEventFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChannelAdminLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqImportChatInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyImportChatInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBanChannelUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyBanChannelUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelBannedRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFullchannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqExportChannelLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyExportChannelLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqChannelToggleInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChannelToggleInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqChannelUpdateUserName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChannelUpdateUserName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqChannelCheckUserName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChannelCheckUserName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqChangeGroupAndChannelCrator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChangeGroupAndChannelCrator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyFullChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetMessageByUserIdMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetMessageByUserIdMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetMessageByUserIdUuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetMessageByUserIdUuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMessageByChannelIdMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelMessageByChannelIdMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyStoreOtherInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyBatchStoreOtherInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetOtherInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUsersChatsMt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetUsersChatsMt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGifQueryAndUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGifQueryAndUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FidData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGifSearchApi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGifSearchApi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqReceiveRedPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyReceiveRedPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetWebPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetWebPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetWebPagePreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetWebPagePreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoldersEditPeerFoldersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoldersEditPeerFoldersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoldersDeleteFolderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoldersDeleteFolderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendPaymentNotifyMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSendPaymentNotifyMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendAddMutulContactNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespSendAddMutulContactNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendAddSingleContactNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmessageserver_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespSendAddSingleContactNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbmessageserver_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   259,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_pbmessageserver_proto_goTypes,
		DependencyIndexes: file_pbmessageserver_proto_depIdxs,
		EnumInfos:         file_pbmessageserver_proto_enumTypes,
		MessageInfos:      file_pbmessageserver_proto_msgTypes,
	}.Build()
	File_pbmessageserver_proto = out.File
	file_pbmessageserver_proto_rawDesc = nil
	file_pbmessageserver_proto_goTypes = nil
	file_pbmessageserver_proto_depIdxs = nil
}
