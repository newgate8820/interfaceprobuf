// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pbmessageserver.proto

package pbmessageserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	pbmessagedb "interfaceprobuf/pbmessagedb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageServerClient is the client API for MessageServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServerClient interface {
	// 机器人调用接口
	BotCall(ctx context.Context, in *ReqBotCall, opts ...grpc.CallOption) (*ReplyBotCall, error)
	BotInlineCall(ctx context.Context, in *ReqBotInlineCall, opts ...grpc.CallOption) (*ReplyBotInlineCall, error)
	SetGameScore(ctx context.Context, in *ReqSetGameScore, opts ...grpc.CallOption) (*ReplySetGameScore, error)
	// 踢人
	RemoveConn(ctx context.Context, in *ReqRemoveConn, opts ...grpc.CallOption) (*ReplyRemoveConn, error)
	// 注册激活系统号
	SignUpMsg(ctx context.Context, in *ReqSignUpMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 发送短信消息接口
	SendCodeMsg(ctx context.Context, in *ReqSendCodeMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 登录成功其他端发送登录ip消息
	SignInMsg(ctx context.Context, in *ReqSignInMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 多端同步发送
	SendSynMsg(ctx context.Context, in *ReqSendSynMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 发送给对方所有端
	SendUserMsg(ctx context.Context, in *ReqSendUserMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 给单端发消息
	SendUserOneClientMsg(ctx context.Context, in *ReqSendUserOneClientMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 群发多人 (其他服务)
	SendMoreUserMsg(ctx context.Context, in *ReqSendMoreUserMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 发送打电话消息 (其他服务)
	SendCallMsg(ctx context.Context, in *ReqSendCallMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	// 打电话推送调用
	CallPush(ctx context.Context, in *ReqCallPush, opts ...grpc.CallOption) (*ReplyCallPush, error)
	//    获取对话框
	GetDialog(ctx context.Context, in *RequestDialog, opts ...grpc.CallOption) (*ReplyDialog, error)
	// 获取最近操作的对话框 limit 个
	GetLastLimitDialog(ctx context.Context, in *pbmessagedb.ReqGetLastLimitDialog, opts ...grpc.CallOption) (*ReplyGetLastLimitDialog, error)
	// 获取pinned对话框
	GetPinnedDialogs(ctx context.Context, in *ReqPinnedDialogs, opts ...grpc.CallOption) (*ReplyDialog, error)
	// 获取单独对话框
	GetPeerDialogs(ctx context.Context, in *ReqPeerDialogs, opts ...grpc.CallOption) (*ReplyDialog, error)
	// 获取最近位置
	GetRecentLocations(ctx context.Context, in *ReqRecentLocations, opts ...grpc.CallOption) (*ReplyResult, error)
	// 置顶对话框
	PinDialog(ctx context.Context, in *ReqPinDialog, opts ...grpc.CallOption) (*ReplyBool, error)
	// ios 置顶对话框
	ReorderPinnedDialogs(ctx context.Context, in *ReqReorderPinnedDialogs, opts ...grpc.CallOption) (*ReplyBool, error)
	// get status 获取状态信息
	GetState(ctx context.Context, in *ReqGetState, opts ...grpc.CallOption) (*ReplyResult, error)
	//    发送消息
	SendMessage(ctx context.Context, in *RequestSendMessage, opts ...grpc.CallOption) (*ReplyResult, error)
	// 系统号发消息
	SYSSendMessage(ctx context.Context, in *RequestSySSendMessage, opts ...grpc.CallOption) (*ReplyResult, error)
	//    发送媒体消息
	SendMedia(ctx context.Context, in *ReqSendMedia, opts ...grpc.CallOption) (*ReplyResult, error)
	// 上传媒体
	UploadMedia(ctx context.Context, in *ReqUploadMedia, opts ...grpc.CallOption) (*ReplyResult, error)
	// 获取部分消息
	GetMsg(ctx context.Context, in *ReqGetMsgs, opts ...grpc.CallOption) (*ReplyGetMsgs, error)
	//    获取历史
	GetHistory(ctx context.Context, in *ReqHistory, opts ...grpc.CallOption) (*ReplyHistory, error)
	//    创建普通群
	CreateChat(ctx context.Context, in *ReqCreateChat, opts ...grpc.CallOption) (*ReplyCreateChat, error)
	//    普通群添加成员
	AddChatUser(ctx context.Context, in *ReqAddChatUser, opts ...grpc.CallOption) (*ReplyAddChatUser, error)
	//    普通群删除成员
	DeleteChatUser(ctx context.Context, in *ReqDeleteChatUser, opts ...grpc.CallOption) (*ReplyDeleteChatUser, error)
	// 编辑群管理员
	EditChatAdmin(ctx context.Context, in *ReqEditChatAdmin, opts ...grpc.CallOption) (*ReplyEditChatAdmin, error)
	// 编辑群头像
	EditChatPhoto(ctx context.Context, in *ReqEditChatPhoto, opts ...grpc.CallOption) (*ReplyEditChatPhoto, error)
	//    编辑群名称
	EditChatTitle(ctx context.Context, in *ReqEditChatTitle, opts ...grpc.CallOption) (*ReplyEditChatTitle, error)
	// 获取所有群 (除去部分)
	GetAllChats(ctx context.Context, in *ReqGetAllChats, opts ...grpc.CallOption) (*ReplyGetAllChats, error)
	// 获取群的完整信息
	GetFullChat(ctx context.Context, in *ReqGetFullChat, opts ...grpc.CallOption) (*ReplyGetFullChat, error)
	//    普通群升级超级群
	MigrateChat(ctx context.Context, in *ReqMigrateChat, opts ...grpc.CallOption) (*ReplyMigrateChat, error)
	//    转发消息
	ForwardMessages(ctx context.Context, in *ReqForwardMessages, opts ...grpc.CallOption) (*ReplyForwardMessages, error)
	// 消息服务内部发消息
	S2SSendMsg(ctx context.Context, in *ReqS2SMsg, opts ...grpc.CallOption) (*ReplyS2SMsg, error)
	// 获取pts
	GetPts(ctx context.Context, in *ReqGetPts, opts ...grpc.CallOption) (*ReplyGetPts, error)
	// 读取历史
	ReadHistory(ctx context.Context, in *ReqReadHistory, opts ...grpc.CallOption) (*ReplyReadHistory, error)
	// 更新双勾
	UpdateReadOutBox(ctx context.Context, in *ReqUpdateReadOut, opts ...grpc.CallOption) (*ReplyUpdateReadOut, error)
	// pts矫正
	GetDiffByPts(ctx context.Context, in *ReqDiffByPts, opts ...grpc.CallOption) (*ReplyDiffByPts, error)
	// 删除历史
	DeleteHistory(ctx context.Context, in *ReqDeleteHistory, opts ...grpc.CallOption) (*ReplyDeleteHistory, error)
	// 删除消息
	DeleteMessages(ctx context.Context, in *ReqDeleteMessages, opts ...grpc.CallOption) (*ReplyDeleteMessages, error)
	// 编辑消息
	EditMessage(ctx context.Context, in *ReqEditMessage, opts ...grpc.CallOption) (*ReplyEditMessage, error)
	// 获取对话框特殊信息
	GetNotifySettings(ctx context.Context, in *ReqNotifySettings, opts ...grpc.CallOption) (*ReplyNotifySettings, error)
	// 更新特殊对话框信息
	UpdateNotifySettings(ctx context.Context, in *ReqUpdateNotifySettings, opts ...grpc.CallOption) (*ReplyUpdateNotifySettings, error)
	// 获取消息编辑的数据
	GetMessageEditData(ctx context.Context, in *ReqMessageEditData, opts ...grpc.CallOption) (*ReplyMessageEditData, error)
	// 存储草稿
	SaveMsgDraft(ctx context.Context, in *ReqSaveMsgDraft, opts ...grpc.CallOption) (*ReplySaveMsgDraft, error)
	// 获取未读数
	GetUserUnRead(ctx context.Context, in *ReqGetUserUnRead, opts ...grpc.CallOption) (*ReplyUserUnread, error)
	// 搜索媒体
	SearchMedia(ctx context.Context, in *ReqMessageSearch, opts ...grpc.CallOption) (*ReplyResult, error)
	CheckChatInvite(ctx context.Context, in *ReqCheckChatInvite, opts ...grpc.CallOption) (*ReplyResult, error)
	//###############################channel#####################################
	//    rpc SendChannelMessage (RequestSendMessage) returns (ReplySendMessage) {
	//    }
	//    rpc SendChannelMedia (ReqSendMedia) returns (ReplySendMedia) {
	//    }
	//创建频道
	CreateChannel(ctx context.Context, in *RequestChannel, opts ...grpc.CallOption) (*ReplyChannel, error)
	//邀请用户进入超级群或者频道
	InviteChannelMember(ctx context.Context, in *RequestChannelInvite, opts ...grpc.CallOption) (*ReplyChannelInvite, error)
	//踢人出超级群或者频道
	KickFromChannel(ctx context.Context, in *ReqChannelKick, opts ...grpc.CallOption) (*ReplyChannelKick, error)
	//离开超级群或者频道
	LeaveChannel(ctx context.Context, in *ReqLeaveChannel, opts ...grpc.CallOption) (*ReplyLeaveChannel, error)
	//编辑超级群或者频道的标题
	EditChannelTitle(ctx context.Context, in *ReqEditChannelTitle, opts ...grpc.CallOption) (*ReplyEditChannelTitle, error)
	//升级或降级超级群或者频道的用户权限
	EditChannelAdmin(ctx context.Context, in *ReqEditChannelAdmin, opts ...grpc.CallOption) (*ReplyEditChannelAdmin, error)
	//修改超级群或者频道的头像
	EditChannelPhoto(ctx context.Context, in *ReqEditChannelPhoto, opts ...grpc.CallOption) (*ReplyEditChannelPhoto, error)
	//修改超级群或者频道的描述信息
	EditChannelAbout(ctx context.Context, in *ReqEditChannelAbout, opts ...grpc.CallOption) (*ReplyEditChannelAbout, error)
	//删除超级群或者频道的消息
	DeleteChannelMessages(ctx context.Context, in *ReqDeleteChannelMessages, opts ...grpc.CallOption) (*ReplyDeleteChannelMessages, error)
	DeleteChannelSelfHistory(ctx context.Context, in *ReqDeleteChannelSelfHistory, opts ...grpc.CallOption) (*ReplyBool, error)
	//清除超级群或者频道某用户的历史
	DeleteChannelHistory(ctx context.Context, in *ReqDeleteChannelHistory, opts ...grpc.CallOption) (*ReplyDeleteChannelHistory, error)
	//置顶超级群或者频道的消息
	UpdatePinnedChannelMessage(ctx context.Context, in *ReqUpdatePinnedChannelMessage, opts ...grpc.CallOption) (*ReplyUpdatePinnedChannelMessage, error)
	//    rpc MigrateChatEvent (ReqMigrateChat) returns (ReplyMigrateChat) {
	//    }
	//修改超级群或者频道的消息读取状态
	UpdateChannelReadHistory(ctx context.Context, in *ReqReadChannelHistory, opts ...grpc.CallOption) (*ReplyReadChannelHistory, error)
	//获取超级群或者频道的修正信息
	GetChannelDifference(ctx context.Context, in *ReqGetchannelDifference, opts ...grpc.CallOption) (*ReplyChannelDiffCommon, error)
	//获取超级群或者频道的历史
	//    rpc GetChannelHistory (ReqGetChannelMsgHistory) returns (ReplyChannelMsgs) {
	//    }
	//通过消息ID获取超级群或者频道的消息
	GetChannelMessagesByMsgsId(ctx context.Context, in *ReqGetChannelMsgsByMsgsId, opts ...grpc.CallOption) (*ReplyChannelMsgs, error)
	//主动加入超级群或者频道
	JoinChannel(ctx context.Context, in *ReqJoinChannel, opts ...grpc.CallOption) (*ReplyJoinChannel, error)
	//解散超级群或者频道
	DeleteChannel(ctx context.Context, in *ReqDeleteChannel, opts ...grpc.CallOption) (*ReplyDeleteChannel, error)
	//通过用户ID获取超级群或者频道的最后一条消息
	GetChannelsLastMsgsByUserId(ctx context.Context, in *ReqGetChannelsLastMsgsByUserId, opts ...grpc.CallOption) (*ReplyGetChannelsLastMsgsByUserId, error)
	//获取超级群或者频道的管理记录
	GetChannelAdminLog(ctx context.Context, in *ReqChannelAdminLog, opts ...grpc.CallOption) (*ReplyChannelAdminLog, error)
	//通过link加入超级群或者频道
	ImportChatInvite(ctx context.Context, in *ReqImportChatInvite, opts ...grpc.CallOption) (*ReplyImportChatInvite, error)
	//踢人并进组其再次加入超级群或者频道，或者解除该禁止
	EditBanChannelUser(ctx context.Context, in *ReqBanChannelUser, opts ...grpc.CallOption) (*ReplyBanChannelUser, error)
	//获取full channel
	GetFullChannel(ctx context.Context, in *ReqFullchannel, opts ...grpc.CallOption) (*ReplyFullChannel, error)
	GetParticipant(ctx context.Context, in *ReqParticipant, opts ...grpc.CallOption) (*ReplyParticipant, error)
	GetParticipants(ctx context.Context, in *ReqParticipants, opts ...grpc.CallOption) (*ReplyParticipants, error)
	ExportChannelLink(ctx context.Context, in *ReqExportChannelLink, opts ...grpc.CallOption) (*ReplyExportChannelLink, error)
	ChannelToggleInvite(ctx context.Context, in *ReqChannelToggleInvite, opts ...grpc.CallOption) (*ReplyChannelToggleInvite, error)
	Getchannels(ctx context.Context, in *ReqGetChannels, opts ...grpc.CallOption) (*ReplyGetChannels, error)
	UpdateChannelUserName(ctx context.Context, in *ReqChannelUpdateUserName, opts ...grpc.CallOption) (*ReplyChannelUpdateUserName, error)
	CheckChannelUserName(ctx context.Context, in *ReqChannelCheckUserName, opts ...grpc.CallOption) (*ReplyChannelCheckUserName, error)
	//变更群主
	ChangeGroupAndChannelCrator(ctx context.Context, in *ReqChangeGroupAndChannelCrator, opts ...grpc.CallOption) (*ReplyChangeGroupAndChannelCrator, error)
	// ====================================================== 为机器人服务提供数据 ======================================================
	// 根据 消息id和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdMsgId(ctx context.Context, in *ReqGetMessageByUserIdMsgId, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdMsgId, error)
	// 根据 uuid和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdUuid(ctx context.Context, in *ReqGetMessageByUserIdUuid, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdUuid, error)
	GetChannelMessageByChannelIdMsgId(ctx context.Context, in *ReqGetChannelMessageByChannelIdMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMessageByChannelIdMsgId, error)
	// ================== 存储 电话信息 联系人 加密聊天请求 二进制信息 ==================
	// infoService 调用存储信息
	StoreOtherInfoMsg(ctx context.Context, in *pbmessagedb.ReqStoreOtherInfoMsg, opts ...grpc.CallOption) (*ReplyStoreOtherInfoMsg, error)
	// 批量 存储 otherInfoMsg
	BatchStoreOtherInfoMsg(ctx context.Context, in *pbmessagedb.ReqBatchStoreOtherInfoMsg, opts ...grpc.CallOption) (*ReplyBatchStoreOtherInfoMsg, error)
	//发送加密聊天请求
	RequestEncryption(ctx context.Context, in *RequestEncryptionReq, opts ...grpc.CallOption) (*RequestEncryptionResult, error)
	//接收加密聊天
	AcceptEncryption(ctx context.Context, in *AcceptEncryptionReq, opts ...grpc.CallOption) (*AcceptEncryptionResult, error)
	//发送加密聊天普通消息
	SendEncrypted(ctx context.Context, in *SendEncryptedReq, opts ...grpc.CallOption) (*SendEncryptedResult, error)
	//发送加密聊天媒体消息
	SendEncryptedFile(ctx context.Context, in *SendEncryptedFileReq, opts ...grpc.CallOption) (*SendEncryptedFileResult, error)
	//发送加密聊天action消息
	SendEncryptedService(ctx context.Context, in *SendEncryptedServiceReq, opts ...grpc.CallOption) (*SendEncryptedServiceResult, error)
	//发送加密聊天取消
	DiscardEncryption(ctx context.Context, in *DiscardEncryptionReq, opts ...grpc.CallOption) (*DiscardEncryptionResult, error)
	//加密聊天双钩
	ReadEncryptedHistory(ctx context.Context, in *ReadEncryptedHistoryReq, opts ...grpc.CallOption) (*ReadEncryptedHistoryResult, error)
	//加密聊天settyping
	SetEncryptedTing(ctx context.Context, in *SetEncryptedTypingReq, opts ...grpc.CallOption) (*SetEncryptedTypingResult, error)
	//LogOut后删除所有的加密聊天
	LogoutDisCardAllSecurity(ctx context.Context, in *LogoutDisCardAllSecurityReq, opts ...grpc.CallOption) (*LogoutDisCardAllSecurityResult, error)
	//获取加密聊天的randomId 们
	GetSecurityRandomIds(ctx context.Context, in *GetSecurityRandomIdsReq, opts ...grpc.CallOption) (*GetSecurityRandomIdsResult, error)
	ReceiveRedPacket(ctx context.Context, in *ReqReceiveRedPacket, opts ...grpc.CallOption) (*ReplyReceiveRedPacket, error)
	GetChannelInactiveUsers(ctx context.Context, in *GetChannelInactiveUsersReq, opts ...grpc.CallOption) (*GetChannelInactiveUsersResult, error)
	// 105 add 归档对话框
	FoldersEditPeerFolders(ctx context.Context, in *FoldersEditPeerFoldersReq, opts ...grpc.CallOption) (*FoldersEditPeerFoldersReply, error)
	// 105 删除归档对话框
	FoldersDeleteFolder(ctx context.Context, in *FoldersDeleteFolderReq, opts ...grpc.CallOption) (*FoldersDeleteFolderReply, error)
	// 105 发送投票
	SendVote(ctx context.Context, in *SendVoteReq, opts ...grpc.CallOption) (*SendVoteReply, error)
	//发送支付结果通知 接口，为支付定制
	SendPaymentNotifyMsg(ctx context.Context, in *ReqSendPaymentNotifyMsg, opts ...grpc.CallOption) (*RspSendPaymentNotifyMsg, error)
	SendBatchUsersMsg(ctx context.Context, in *ReqSendMoreUserMsg, opts ...grpc.CallOption) (*ReplyBool, error)
	//加好友成功后的相互通知消息
	SendAddMutulContactNotify(ctx context.Context, in *ReqSendAddMutulContactNotify, opts ...grpc.CallOption) (*RespSendAddMutulContactNotify, error)
	//单方面加好友通知消息
	SendAddSingleContactNotify(ctx context.Context, in *ReqSendAddSingleContactNotify, opts ...grpc.CallOption) (*RespSendAddSingleContactNotify, error)
	// 朋友圈通知消息
	SendMediaSysNotify(ctx context.Context, in *ReqSendMediaSysNotify, opts ...grpc.CallOption) (*RespSendMediaSysNotify, error)
	// 编辑媒体消息 by ty 2020.09.27
	EditMessageMedia(ctx context.Context, in *ReqEditMessageMedia, opts ...grpc.CallOption) (*RespEditMessageMedia, error)
}

type messageServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServerClient(cc grpc.ClientConnInterface) MessageServerClient {
	return &messageServerClient{cc}
}

func (c *messageServerClient) BotCall(ctx context.Context, in *ReqBotCall, opts ...grpc.CallOption) (*ReplyBotCall, error) {
	out := new(ReplyBotCall)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/BotCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) BotInlineCall(ctx context.Context, in *ReqBotInlineCall, opts ...grpc.CallOption) (*ReplyBotInlineCall, error) {
	out := new(ReplyBotInlineCall)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/BotInlineCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SetGameScore(ctx context.Context, in *ReqSetGameScore, opts ...grpc.CallOption) (*ReplySetGameScore, error) {
	out := new(ReplySetGameScore)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SetGameScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) RemoveConn(ctx context.Context, in *ReqRemoveConn, opts ...grpc.CallOption) (*ReplyRemoveConn, error) {
	out := new(ReplyRemoveConn)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/RemoveConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SignUpMsg(ctx context.Context, in *ReqSignUpMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SignUpMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendCodeMsg(ctx context.Context, in *ReqSendCodeMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SendCodeMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SignInMsg(ctx context.Context, in *ReqSignInMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SignInMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendSynMsg(ctx context.Context, in *ReqSendSynMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SendSynMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendUserMsg(ctx context.Context, in *ReqSendUserMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SendUserMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendUserOneClientMsg(ctx context.Context, in *ReqSendUserOneClientMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SendUserOneClientMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendMoreUserMsg(ctx context.Context, in *ReqSendMoreUserMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SendMoreUserMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendCallMsg(ctx context.Context, in *ReqSendCallMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SendCallMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) CallPush(ctx context.Context, in *ReqCallPush, opts ...grpc.CallOption) (*ReplyCallPush, error) {
	out := new(ReplyCallPush)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/CallPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetDialog(ctx context.Context, in *RequestDialog, opts ...grpc.CallOption) (*ReplyDialog, error) {
	out := new(ReplyDialog)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetLastLimitDialog(ctx context.Context, in *pbmessagedb.ReqGetLastLimitDialog, opts ...grpc.CallOption) (*ReplyGetLastLimitDialog, error) {
	out := new(ReplyGetLastLimitDialog)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetLastLimitDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetPinnedDialogs(ctx context.Context, in *ReqPinnedDialogs, opts ...grpc.CallOption) (*ReplyDialog, error) {
	out := new(ReplyDialog)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetPinnedDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetPeerDialogs(ctx context.Context, in *ReqPeerDialogs, opts ...grpc.CallOption) (*ReplyDialog, error) {
	out := new(ReplyDialog)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetPeerDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetRecentLocations(ctx context.Context, in *ReqRecentLocations, opts ...grpc.CallOption) (*ReplyResult, error) {
	out := new(ReplyResult)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetRecentLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) PinDialog(ctx context.Context, in *ReqPinDialog, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/PinDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) ReorderPinnedDialogs(ctx context.Context, in *ReqReorderPinnedDialogs, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/ReorderPinnedDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetState(ctx context.Context, in *ReqGetState, opts ...grpc.CallOption) (*ReplyResult, error) {
	out := new(ReplyResult)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendMessage(ctx context.Context, in *RequestSendMessage, opts ...grpc.CallOption) (*ReplyResult, error) {
	out := new(ReplyResult)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SYSSendMessage(ctx context.Context, in *RequestSySSendMessage, opts ...grpc.CallOption) (*ReplyResult, error) {
	out := new(ReplyResult)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SYSSendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendMedia(ctx context.Context, in *ReqSendMedia, opts ...grpc.CallOption) (*ReplyResult, error) {
	out := new(ReplyResult)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SendMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) UploadMedia(ctx context.Context, in *ReqUploadMedia, opts ...grpc.CallOption) (*ReplyResult, error) {
	out := new(ReplyResult)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/UploadMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetMsg(ctx context.Context, in *ReqGetMsgs, opts ...grpc.CallOption) (*ReplyGetMsgs, error) {
	out := new(ReplyGetMsgs)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetHistory(ctx context.Context, in *ReqHistory, opts ...grpc.CallOption) (*ReplyHistory, error) {
	out := new(ReplyHistory)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) CreateChat(ctx context.Context, in *ReqCreateChat, opts ...grpc.CallOption) (*ReplyCreateChat, error) {
	out := new(ReplyCreateChat)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/CreateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) AddChatUser(ctx context.Context, in *ReqAddChatUser, opts ...grpc.CallOption) (*ReplyAddChatUser, error) {
	out := new(ReplyAddChatUser)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/AddChatUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) DeleteChatUser(ctx context.Context, in *ReqDeleteChatUser, opts ...grpc.CallOption) (*ReplyDeleteChatUser, error) {
	out := new(ReplyDeleteChatUser)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/DeleteChatUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditChatAdmin(ctx context.Context, in *ReqEditChatAdmin, opts ...grpc.CallOption) (*ReplyEditChatAdmin, error) {
	out := new(ReplyEditChatAdmin)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/EditChatAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditChatPhoto(ctx context.Context, in *ReqEditChatPhoto, opts ...grpc.CallOption) (*ReplyEditChatPhoto, error) {
	out := new(ReplyEditChatPhoto)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/EditChatPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditChatTitle(ctx context.Context, in *ReqEditChatTitle, opts ...grpc.CallOption) (*ReplyEditChatTitle, error) {
	out := new(ReplyEditChatTitle)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/EditChatTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetAllChats(ctx context.Context, in *ReqGetAllChats, opts ...grpc.CallOption) (*ReplyGetAllChats, error) {
	out := new(ReplyGetAllChats)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetAllChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetFullChat(ctx context.Context, in *ReqGetFullChat, opts ...grpc.CallOption) (*ReplyGetFullChat, error) {
	out := new(ReplyGetFullChat)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetFullChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) MigrateChat(ctx context.Context, in *ReqMigrateChat, opts ...grpc.CallOption) (*ReplyMigrateChat, error) {
	out := new(ReplyMigrateChat)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/MigrateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) ForwardMessages(ctx context.Context, in *ReqForwardMessages, opts ...grpc.CallOption) (*ReplyForwardMessages, error) {
	out := new(ReplyForwardMessages)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/ForwardMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) S2SSendMsg(ctx context.Context, in *ReqS2SMsg, opts ...grpc.CallOption) (*ReplyS2SMsg, error) {
	out := new(ReplyS2SMsg)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/S2SSendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetPts(ctx context.Context, in *ReqGetPts, opts ...grpc.CallOption) (*ReplyGetPts, error) {
	out := new(ReplyGetPts)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetPts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) ReadHistory(ctx context.Context, in *ReqReadHistory, opts ...grpc.CallOption) (*ReplyReadHistory, error) {
	out := new(ReplyReadHistory)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/ReadHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) UpdateReadOutBox(ctx context.Context, in *ReqUpdateReadOut, opts ...grpc.CallOption) (*ReplyUpdateReadOut, error) {
	out := new(ReplyUpdateReadOut)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/UpdateReadOutBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetDiffByPts(ctx context.Context, in *ReqDiffByPts, opts ...grpc.CallOption) (*ReplyDiffByPts, error) {
	out := new(ReplyDiffByPts)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetDiffByPts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) DeleteHistory(ctx context.Context, in *ReqDeleteHistory, opts ...grpc.CallOption) (*ReplyDeleteHistory, error) {
	out := new(ReplyDeleteHistory)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/DeleteHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) DeleteMessages(ctx context.Context, in *ReqDeleteMessages, opts ...grpc.CallOption) (*ReplyDeleteMessages, error) {
	out := new(ReplyDeleteMessages)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/DeleteMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditMessage(ctx context.Context, in *ReqEditMessage, opts ...grpc.CallOption) (*ReplyEditMessage, error) {
	out := new(ReplyEditMessage)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/EditMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetNotifySettings(ctx context.Context, in *ReqNotifySettings, opts ...grpc.CallOption) (*ReplyNotifySettings, error) {
	out := new(ReplyNotifySettings)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetNotifySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) UpdateNotifySettings(ctx context.Context, in *ReqUpdateNotifySettings, opts ...grpc.CallOption) (*ReplyUpdateNotifySettings, error) {
	out := new(ReplyUpdateNotifySettings)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/UpdateNotifySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetMessageEditData(ctx context.Context, in *ReqMessageEditData, opts ...grpc.CallOption) (*ReplyMessageEditData, error) {
	out := new(ReplyMessageEditData)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetMessageEditData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SaveMsgDraft(ctx context.Context, in *ReqSaveMsgDraft, opts ...grpc.CallOption) (*ReplySaveMsgDraft, error) {
	out := new(ReplySaveMsgDraft)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SaveMsgDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetUserUnRead(ctx context.Context, in *ReqGetUserUnRead, opts ...grpc.CallOption) (*ReplyUserUnread, error) {
	out := new(ReplyUserUnread)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetUserUnRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SearchMedia(ctx context.Context, in *ReqMessageSearch, opts ...grpc.CallOption) (*ReplyResult, error) {
	out := new(ReplyResult)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SearchMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) CheckChatInvite(ctx context.Context, in *ReqCheckChatInvite, opts ...grpc.CallOption) (*ReplyResult, error) {
	out := new(ReplyResult)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/CheckChatInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) CreateChannel(ctx context.Context, in *RequestChannel, opts ...grpc.CallOption) (*ReplyChannel, error) {
	out := new(ReplyChannel)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) InviteChannelMember(ctx context.Context, in *RequestChannelInvite, opts ...grpc.CallOption) (*ReplyChannelInvite, error) {
	out := new(ReplyChannelInvite)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/InviteChannelMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) KickFromChannel(ctx context.Context, in *ReqChannelKick, opts ...grpc.CallOption) (*ReplyChannelKick, error) {
	out := new(ReplyChannelKick)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/KickFromChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) LeaveChannel(ctx context.Context, in *ReqLeaveChannel, opts ...grpc.CallOption) (*ReplyLeaveChannel, error) {
	out := new(ReplyLeaveChannel)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/LeaveChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditChannelTitle(ctx context.Context, in *ReqEditChannelTitle, opts ...grpc.CallOption) (*ReplyEditChannelTitle, error) {
	out := new(ReplyEditChannelTitle)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/EditChannelTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditChannelAdmin(ctx context.Context, in *ReqEditChannelAdmin, opts ...grpc.CallOption) (*ReplyEditChannelAdmin, error) {
	out := new(ReplyEditChannelAdmin)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/EditChannelAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditChannelPhoto(ctx context.Context, in *ReqEditChannelPhoto, opts ...grpc.CallOption) (*ReplyEditChannelPhoto, error) {
	out := new(ReplyEditChannelPhoto)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/EditChannelPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditChannelAbout(ctx context.Context, in *ReqEditChannelAbout, opts ...grpc.CallOption) (*ReplyEditChannelAbout, error) {
	out := new(ReplyEditChannelAbout)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/EditChannelAbout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) DeleteChannelMessages(ctx context.Context, in *ReqDeleteChannelMessages, opts ...grpc.CallOption) (*ReplyDeleteChannelMessages, error) {
	out := new(ReplyDeleteChannelMessages)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/DeleteChannelMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) DeleteChannelSelfHistory(ctx context.Context, in *ReqDeleteChannelSelfHistory, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/DeleteChannelSelfHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) DeleteChannelHistory(ctx context.Context, in *ReqDeleteChannelHistory, opts ...grpc.CallOption) (*ReplyDeleteChannelHistory, error) {
	out := new(ReplyDeleteChannelHistory)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/DeleteChannelHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) UpdatePinnedChannelMessage(ctx context.Context, in *ReqUpdatePinnedChannelMessage, opts ...grpc.CallOption) (*ReplyUpdatePinnedChannelMessage, error) {
	out := new(ReplyUpdatePinnedChannelMessage)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/UpdatePinnedChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) UpdateChannelReadHistory(ctx context.Context, in *ReqReadChannelHistory, opts ...grpc.CallOption) (*ReplyReadChannelHistory, error) {
	out := new(ReplyReadChannelHistory)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/UpdateChannelReadHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetChannelDifference(ctx context.Context, in *ReqGetchannelDifference, opts ...grpc.CallOption) (*ReplyChannelDiffCommon, error) {
	out := new(ReplyChannelDiffCommon)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetChannelDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetChannelMessagesByMsgsId(ctx context.Context, in *ReqGetChannelMsgsByMsgsId, opts ...grpc.CallOption) (*ReplyChannelMsgs, error) {
	out := new(ReplyChannelMsgs)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetChannelMessagesByMsgsId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) JoinChannel(ctx context.Context, in *ReqJoinChannel, opts ...grpc.CallOption) (*ReplyJoinChannel, error) {
	out := new(ReplyJoinChannel)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/JoinChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) DeleteChannel(ctx context.Context, in *ReqDeleteChannel, opts ...grpc.CallOption) (*ReplyDeleteChannel, error) {
	out := new(ReplyDeleteChannel)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/DeleteChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetChannelsLastMsgsByUserId(ctx context.Context, in *ReqGetChannelsLastMsgsByUserId, opts ...grpc.CallOption) (*ReplyGetChannelsLastMsgsByUserId, error) {
	out := new(ReplyGetChannelsLastMsgsByUserId)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetChannelsLastMsgsByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetChannelAdminLog(ctx context.Context, in *ReqChannelAdminLog, opts ...grpc.CallOption) (*ReplyChannelAdminLog, error) {
	out := new(ReplyChannelAdminLog)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetChannelAdminLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) ImportChatInvite(ctx context.Context, in *ReqImportChatInvite, opts ...grpc.CallOption) (*ReplyImportChatInvite, error) {
	out := new(ReplyImportChatInvite)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/ImportChatInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditBanChannelUser(ctx context.Context, in *ReqBanChannelUser, opts ...grpc.CallOption) (*ReplyBanChannelUser, error) {
	out := new(ReplyBanChannelUser)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/EditBanChannelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetFullChannel(ctx context.Context, in *ReqFullchannel, opts ...grpc.CallOption) (*ReplyFullChannel, error) {
	out := new(ReplyFullChannel)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetFullChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetParticipant(ctx context.Context, in *ReqParticipant, opts ...grpc.CallOption) (*ReplyParticipant, error) {
	out := new(ReplyParticipant)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetParticipants(ctx context.Context, in *ReqParticipants, opts ...grpc.CallOption) (*ReplyParticipants, error) {
	out := new(ReplyParticipants)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) ExportChannelLink(ctx context.Context, in *ReqExportChannelLink, opts ...grpc.CallOption) (*ReplyExportChannelLink, error) {
	out := new(ReplyExportChannelLink)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/ExportChannelLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) ChannelToggleInvite(ctx context.Context, in *ReqChannelToggleInvite, opts ...grpc.CallOption) (*ReplyChannelToggleInvite, error) {
	out := new(ReplyChannelToggleInvite)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/ChannelToggleInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) Getchannels(ctx context.Context, in *ReqGetChannels, opts ...grpc.CallOption) (*ReplyGetChannels, error) {
	out := new(ReplyGetChannels)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/Getchannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) UpdateChannelUserName(ctx context.Context, in *ReqChannelUpdateUserName, opts ...grpc.CallOption) (*ReplyChannelUpdateUserName, error) {
	out := new(ReplyChannelUpdateUserName)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/UpdateChannelUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) CheckChannelUserName(ctx context.Context, in *ReqChannelCheckUserName, opts ...grpc.CallOption) (*ReplyChannelCheckUserName, error) {
	out := new(ReplyChannelCheckUserName)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/CheckChannelUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) ChangeGroupAndChannelCrator(ctx context.Context, in *ReqChangeGroupAndChannelCrator, opts ...grpc.CallOption) (*ReplyChangeGroupAndChannelCrator, error) {
	out := new(ReplyChangeGroupAndChannelCrator)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/ChangeGroupAndChannelCrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetMessageByUserIdMsgId(ctx context.Context, in *ReqGetMessageByUserIdMsgId, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdMsgId, error) {
	out := new(ReplyGetMessageByUserIdMsgId)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetMessageByUserIdMsgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetMessageByUserIdUuid(ctx context.Context, in *ReqGetMessageByUserIdUuid, opts ...grpc.CallOption) (*ReplyGetMessageByUserIdUuid, error) {
	out := new(ReplyGetMessageByUserIdUuid)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetMessageByUserIdUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetChannelMessageByChannelIdMsgId(ctx context.Context, in *ReqGetChannelMessageByChannelIdMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMessageByChannelIdMsgId, error) {
	out := new(ReplyGetChannelMessageByChannelIdMsgId)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetChannelMessageByChannelIdMsgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) StoreOtherInfoMsg(ctx context.Context, in *pbmessagedb.ReqStoreOtherInfoMsg, opts ...grpc.CallOption) (*ReplyStoreOtherInfoMsg, error) {
	out := new(ReplyStoreOtherInfoMsg)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/StoreOtherInfoMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) BatchStoreOtherInfoMsg(ctx context.Context, in *pbmessagedb.ReqBatchStoreOtherInfoMsg, opts ...grpc.CallOption) (*ReplyBatchStoreOtherInfoMsg, error) {
	out := new(ReplyBatchStoreOtherInfoMsg)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/BatchStoreOtherInfoMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) RequestEncryption(ctx context.Context, in *RequestEncryptionReq, opts ...grpc.CallOption) (*RequestEncryptionResult, error) {
	out := new(RequestEncryptionResult)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/RequestEncryption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) AcceptEncryption(ctx context.Context, in *AcceptEncryptionReq, opts ...grpc.CallOption) (*AcceptEncryptionResult, error) {
	out := new(AcceptEncryptionResult)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/AcceptEncryption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendEncrypted(ctx context.Context, in *SendEncryptedReq, opts ...grpc.CallOption) (*SendEncryptedResult, error) {
	out := new(SendEncryptedResult)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SendEncrypted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendEncryptedFile(ctx context.Context, in *SendEncryptedFileReq, opts ...grpc.CallOption) (*SendEncryptedFileResult, error) {
	out := new(SendEncryptedFileResult)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SendEncryptedFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendEncryptedService(ctx context.Context, in *SendEncryptedServiceReq, opts ...grpc.CallOption) (*SendEncryptedServiceResult, error) {
	out := new(SendEncryptedServiceResult)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SendEncryptedService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) DiscardEncryption(ctx context.Context, in *DiscardEncryptionReq, opts ...grpc.CallOption) (*DiscardEncryptionResult, error) {
	out := new(DiscardEncryptionResult)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/DiscardEncryption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) ReadEncryptedHistory(ctx context.Context, in *ReadEncryptedHistoryReq, opts ...grpc.CallOption) (*ReadEncryptedHistoryResult, error) {
	out := new(ReadEncryptedHistoryResult)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/ReadEncryptedHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SetEncryptedTing(ctx context.Context, in *SetEncryptedTypingReq, opts ...grpc.CallOption) (*SetEncryptedTypingResult, error) {
	out := new(SetEncryptedTypingResult)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SetEncryptedTing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) LogoutDisCardAllSecurity(ctx context.Context, in *LogoutDisCardAllSecurityReq, opts ...grpc.CallOption) (*LogoutDisCardAllSecurityResult, error) {
	out := new(LogoutDisCardAllSecurityResult)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/LogoutDisCardAllSecurity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetSecurityRandomIds(ctx context.Context, in *GetSecurityRandomIdsReq, opts ...grpc.CallOption) (*GetSecurityRandomIdsResult, error) {
	out := new(GetSecurityRandomIdsResult)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetSecurityRandomIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) ReceiveRedPacket(ctx context.Context, in *ReqReceiveRedPacket, opts ...grpc.CallOption) (*ReplyReceiveRedPacket, error) {
	out := new(ReplyReceiveRedPacket)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/ReceiveRedPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) GetChannelInactiveUsers(ctx context.Context, in *GetChannelInactiveUsersReq, opts ...grpc.CallOption) (*GetChannelInactiveUsersResult, error) {
	out := new(GetChannelInactiveUsersResult)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/GetChannelInactiveUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) FoldersEditPeerFolders(ctx context.Context, in *FoldersEditPeerFoldersReq, opts ...grpc.CallOption) (*FoldersEditPeerFoldersReply, error) {
	out := new(FoldersEditPeerFoldersReply)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/FoldersEditPeerFolders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) FoldersDeleteFolder(ctx context.Context, in *FoldersDeleteFolderReq, opts ...grpc.CallOption) (*FoldersDeleteFolderReply, error) {
	out := new(FoldersDeleteFolderReply)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/FoldersDeleteFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendVote(ctx context.Context, in *SendVoteReq, opts ...grpc.CallOption) (*SendVoteReply, error) {
	out := new(SendVoteReply)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SendVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendPaymentNotifyMsg(ctx context.Context, in *ReqSendPaymentNotifyMsg, opts ...grpc.CallOption) (*RspSendPaymentNotifyMsg, error) {
	out := new(RspSendPaymentNotifyMsg)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SendPaymentNotifyMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendBatchUsersMsg(ctx context.Context, in *ReqSendMoreUserMsg, opts ...grpc.CallOption) (*ReplyBool, error) {
	out := new(ReplyBool)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SendBatchUsersMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendAddMutulContactNotify(ctx context.Context, in *ReqSendAddMutulContactNotify, opts ...grpc.CallOption) (*RespSendAddMutulContactNotify, error) {
	out := new(RespSendAddMutulContactNotify)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SendAddMutulContactNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendAddSingleContactNotify(ctx context.Context, in *ReqSendAddSingleContactNotify, opts ...grpc.CallOption) (*RespSendAddSingleContactNotify, error) {
	out := new(RespSendAddSingleContactNotify)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SendAddSingleContactNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) SendMediaSysNotify(ctx context.Context, in *ReqSendMediaSysNotify, opts ...grpc.CallOption) (*RespSendMediaSysNotify, error) {
	out := new(RespSendMediaSysNotify)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/SendMediaSysNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServerClient) EditMessageMedia(ctx context.Context, in *ReqEditMessageMedia, opts ...grpc.CallOption) (*RespEditMessageMedia, error) {
	out := new(RespEditMessageMedia)
	err := c.cc.Invoke(ctx, "/pbmessageserver.MessageServer/EditMessageMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServerServer is the server API for MessageServer service.
// All implementations must embed UnimplementedMessageServerServer
// for forward compatibility
type MessageServerServer interface {
	// 机器人调用接口
	BotCall(context.Context, *ReqBotCall) (*ReplyBotCall, error)
	BotInlineCall(context.Context, *ReqBotInlineCall) (*ReplyBotInlineCall, error)
	SetGameScore(context.Context, *ReqSetGameScore) (*ReplySetGameScore, error)
	// 踢人
	RemoveConn(context.Context, *ReqRemoveConn) (*ReplyRemoveConn, error)
	// 注册激活系统号
	SignUpMsg(context.Context, *ReqSignUpMsg) (*ReplyBool, error)
	// 发送短信消息接口
	SendCodeMsg(context.Context, *ReqSendCodeMsg) (*ReplyBool, error)
	// 登录成功其他端发送登录ip消息
	SignInMsg(context.Context, *ReqSignInMsg) (*ReplyBool, error)
	// 多端同步发送
	SendSynMsg(context.Context, *ReqSendSynMsg) (*ReplyBool, error)
	// 发送给对方所有端
	SendUserMsg(context.Context, *ReqSendUserMsg) (*ReplyBool, error)
	// 给单端发消息
	SendUserOneClientMsg(context.Context, *ReqSendUserOneClientMsg) (*ReplyBool, error)
	// 群发多人 (其他服务)
	SendMoreUserMsg(context.Context, *ReqSendMoreUserMsg) (*ReplyBool, error)
	// 发送打电话消息 (其他服务)
	SendCallMsg(context.Context, *ReqSendCallMsg) (*ReplyBool, error)
	// 打电话推送调用
	CallPush(context.Context, *ReqCallPush) (*ReplyCallPush, error)
	//    获取对话框
	GetDialog(context.Context, *RequestDialog) (*ReplyDialog, error)
	// 获取最近操作的对话框 limit 个
	GetLastLimitDialog(context.Context, *pbmessagedb.ReqGetLastLimitDialog) (*ReplyGetLastLimitDialog, error)
	// 获取pinned对话框
	GetPinnedDialogs(context.Context, *ReqPinnedDialogs) (*ReplyDialog, error)
	// 获取单独对话框
	GetPeerDialogs(context.Context, *ReqPeerDialogs) (*ReplyDialog, error)
	// 获取最近位置
	GetRecentLocations(context.Context, *ReqRecentLocations) (*ReplyResult, error)
	// 置顶对话框
	PinDialog(context.Context, *ReqPinDialog) (*ReplyBool, error)
	// ios 置顶对话框
	ReorderPinnedDialogs(context.Context, *ReqReorderPinnedDialogs) (*ReplyBool, error)
	// get status 获取状态信息
	GetState(context.Context, *ReqGetState) (*ReplyResult, error)
	//    发送消息
	SendMessage(context.Context, *RequestSendMessage) (*ReplyResult, error)
	// 系统号发消息
	SYSSendMessage(context.Context, *RequestSySSendMessage) (*ReplyResult, error)
	//    发送媒体消息
	SendMedia(context.Context, *ReqSendMedia) (*ReplyResult, error)
	// 上传媒体
	UploadMedia(context.Context, *ReqUploadMedia) (*ReplyResult, error)
	// 获取部分消息
	GetMsg(context.Context, *ReqGetMsgs) (*ReplyGetMsgs, error)
	//    获取历史
	GetHistory(context.Context, *ReqHistory) (*ReplyHistory, error)
	//    创建普通群
	CreateChat(context.Context, *ReqCreateChat) (*ReplyCreateChat, error)
	//    普通群添加成员
	AddChatUser(context.Context, *ReqAddChatUser) (*ReplyAddChatUser, error)
	//    普通群删除成员
	DeleteChatUser(context.Context, *ReqDeleteChatUser) (*ReplyDeleteChatUser, error)
	// 编辑群管理员
	EditChatAdmin(context.Context, *ReqEditChatAdmin) (*ReplyEditChatAdmin, error)
	// 编辑群头像
	EditChatPhoto(context.Context, *ReqEditChatPhoto) (*ReplyEditChatPhoto, error)
	//    编辑群名称
	EditChatTitle(context.Context, *ReqEditChatTitle) (*ReplyEditChatTitle, error)
	// 获取所有群 (除去部分)
	GetAllChats(context.Context, *ReqGetAllChats) (*ReplyGetAllChats, error)
	// 获取群的完整信息
	GetFullChat(context.Context, *ReqGetFullChat) (*ReplyGetFullChat, error)
	//    普通群升级超级群
	MigrateChat(context.Context, *ReqMigrateChat) (*ReplyMigrateChat, error)
	//    转发消息
	ForwardMessages(context.Context, *ReqForwardMessages) (*ReplyForwardMessages, error)
	// 消息服务内部发消息
	S2SSendMsg(context.Context, *ReqS2SMsg) (*ReplyS2SMsg, error)
	// 获取pts
	GetPts(context.Context, *ReqGetPts) (*ReplyGetPts, error)
	// 读取历史
	ReadHistory(context.Context, *ReqReadHistory) (*ReplyReadHistory, error)
	// 更新双勾
	UpdateReadOutBox(context.Context, *ReqUpdateReadOut) (*ReplyUpdateReadOut, error)
	// pts矫正
	GetDiffByPts(context.Context, *ReqDiffByPts) (*ReplyDiffByPts, error)
	// 删除历史
	DeleteHistory(context.Context, *ReqDeleteHistory) (*ReplyDeleteHistory, error)
	// 删除消息
	DeleteMessages(context.Context, *ReqDeleteMessages) (*ReplyDeleteMessages, error)
	// 编辑消息
	EditMessage(context.Context, *ReqEditMessage) (*ReplyEditMessage, error)
	// 获取对话框特殊信息
	GetNotifySettings(context.Context, *ReqNotifySettings) (*ReplyNotifySettings, error)
	// 更新特殊对话框信息
	UpdateNotifySettings(context.Context, *ReqUpdateNotifySettings) (*ReplyUpdateNotifySettings, error)
	// 获取消息编辑的数据
	GetMessageEditData(context.Context, *ReqMessageEditData) (*ReplyMessageEditData, error)
	// 存储草稿
	SaveMsgDraft(context.Context, *ReqSaveMsgDraft) (*ReplySaveMsgDraft, error)
	// 获取未读数
	GetUserUnRead(context.Context, *ReqGetUserUnRead) (*ReplyUserUnread, error)
	// 搜索媒体
	SearchMedia(context.Context, *ReqMessageSearch) (*ReplyResult, error)
	CheckChatInvite(context.Context, *ReqCheckChatInvite) (*ReplyResult, error)
	//###############################channel#####################################
	//    rpc SendChannelMessage (RequestSendMessage) returns (ReplySendMessage) {
	//    }
	//    rpc SendChannelMedia (ReqSendMedia) returns (ReplySendMedia) {
	//    }
	//创建频道
	CreateChannel(context.Context, *RequestChannel) (*ReplyChannel, error)
	//邀请用户进入超级群或者频道
	InviteChannelMember(context.Context, *RequestChannelInvite) (*ReplyChannelInvite, error)
	//踢人出超级群或者频道
	KickFromChannel(context.Context, *ReqChannelKick) (*ReplyChannelKick, error)
	//离开超级群或者频道
	LeaveChannel(context.Context, *ReqLeaveChannel) (*ReplyLeaveChannel, error)
	//编辑超级群或者频道的标题
	EditChannelTitle(context.Context, *ReqEditChannelTitle) (*ReplyEditChannelTitle, error)
	//升级或降级超级群或者频道的用户权限
	EditChannelAdmin(context.Context, *ReqEditChannelAdmin) (*ReplyEditChannelAdmin, error)
	//修改超级群或者频道的头像
	EditChannelPhoto(context.Context, *ReqEditChannelPhoto) (*ReplyEditChannelPhoto, error)
	//修改超级群或者频道的描述信息
	EditChannelAbout(context.Context, *ReqEditChannelAbout) (*ReplyEditChannelAbout, error)
	//删除超级群或者频道的消息
	DeleteChannelMessages(context.Context, *ReqDeleteChannelMessages) (*ReplyDeleteChannelMessages, error)
	DeleteChannelSelfHistory(context.Context, *ReqDeleteChannelSelfHistory) (*ReplyBool, error)
	//清除超级群或者频道某用户的历史
	DeleteChannelHistory(context.Context, *ReqDeleteChannelHistory) (*ReplyDeleteChannelHistory, error)
	//置顶超级群或者频道的消息
	UpdatePinnedChannelMessage(context.Context, *ReqUpdatePinnedChannelMessage) (*ReplyUpdatePinnedChannelMessage, error)
	//    rpc MigrateChatEvent (ReqMigrateChat) returns (ReplyMigrateChat) {
	//    }
	//修改超级群或者频道的消息读取状态
	UpdateChannelReadHistory(context.Context, *ReqReadChannelHistory) (*ReplyReadChannelHistory, error)
	//获取超级群或者频道的修正信息
	GetChannelDifference(context.Context, *ReqGetchannelDifference) (*ReplyChannelDiffCommon, error)
	//获取超级群或者频道的历史
	//    rpc GetChannelHistory (ReqGetChannelMsgHistory) returns (ReplyChannelMsgs) {
	//    }
	//通过消息ID获取超级群或者频道的消息
	GetChannelMessagesByMsgsId(context.Context, *ReqGetChannelMsgsByMsgsId) (*ReplyChannelMsgs, error)
	//主动加入超级群或者频道
	JoinChannel(context.Context, *ReqJoinChannel) (*ReplyJoinChannel, error)
	//解散超级群或者频道
	DeleteChannel(context.Context, *ReqDeleteChannel) (*ReplyDeleteChannel, error)
	//通过用户ID获取超级群或者频道的最后一条消息
	GetChannelsLastMsgsByUserId(context.Context, *ReqGetChannelsLastMsgsByUserId) (*ReplyGetChannelsLastMsgsByUserId, error)
	//获取超级群或者频道的管理记录
	GetChannelAdminLog(context.Context, *ReqChannelAdminLog) (*ReplyChannelAdminLog, error)
	//通过link加入超级群或者频道
	ImportChatInvite(context.Context, *ReqImportChatInvite) (*ReplyImportChatInvite, error)
	//踢人并进组其再次加入超级群或者频道，或者解除该禁止
	EditBanChannelUser(context.Context, *ReqBanChannelUser) (*ReplyBanChannelUser, error)
	//获取full channel
	GetFullChannel(context.Context, *ReqFullchannel) (*ReplyFullChannel, error)
	GetParticipant(context.Context, *ReqParticipant) (*ReplyParticipant, error)
	GetParticipants(context.Context, *ReqParticipants) (*ReplyParticipants, error)
	ExportChannelLink(context.Context, *ReqExportChannelLink) (*ReplyExportChannelLink, error)
	ChannelToggleInvite(context.Context, *ReqChannelToggleInvite) (*ReplyChannelToggleInvite, error)
	Getchannels(context.Context, *ReqGetChannels) (*ReplyGetChannels, error)
	UpdateChannelUserName(context.Context, *ReqChannelUpdateUserName) (*ReplyChannelUpdateUserName, error)
	CheckChannelUserName(context.Context, *ReqChannelCheckUserName) (*ReplyChannelCheckUserName, error)
	//变更群主
	ChangeGroupAndChannelCrator(context.Context, *ReqChangeGroupAndChannelCrator) (*ReplyChangeGroupAndChannelCrator, error)
	// ====================================================== 为机器人服务提供数据 ======================================================
	// 根据 消息id和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdMsgId(context.Context, *ReqGetMessageByUserIdMsgId) (*ReplyGetMessageByUserIdMsgId, error)
	// 根据 uuid和用户id 获取单聊消息\普通群消息
	GetMessageByUserIdUuid(context.Context, *ReqGetMessageByUserIdUuid) (*ReplyGetMessageByUserIdUuid, error)
	GetChannelMessageByChannelIdMsgId(context.Context, *ReqGetChannelMessageByChannelIdMsgId) (*ReplyGetChannelMessageByChannelIdMsgId, error)
	// ================== 存储 电话信息 联系人 加密聊天请求 二进制信息 ==================
	// infoService 调用存储信息
	StoreOtherInfoMsg(context.Context, *pbmessagedb.ReqStoreOtherInfoMsg) (*ReplyStoreOtherInfoMsg, error)
	// 批量 存储 otherInfoMsg
	BatchStoreOtherInfoMsg(context.Context, *pbmessagedb.ReqBatchStoreOtherInfoMsg) (*ReplyBatchStoreOtherInfoMsg, error)
	//发送加密聊天请求
	RequestEncryption(context.Context, *RequestEncryptionReq) (*RequestEncryptionResult, error)
	//接收加密聊天
	AcceptEncryption(context.Context, *AcceptEncryptionReq) (*AcceptEncryptionResult, error)
	//发送加密聊天普通消息
	SendEncrypted(context.Context, *SendEncryptedReq) (*SendEncryptedResult, error)
	//发送加密聊天媒体消息
	SendEncryptedFile(context.Context, *SendEncryptedFileReq) (*SendEncryptedFileResult, error)
	//发送加密聊天action消息
	SendEncryptedService(context.Context, *SendEncryptedServiceReq) (*SendEncryptedServiceResult, error)
	//发送加密聊天取消
	DiscardEncryption(context.Context, *DiscardEncryptionReq) (*DiscardEncryptionResult, error)
	//加密聊天双钩
	ReadEncryptedHistory(context.Context, *ReadEncryptedHistoryReq) (*ReadEncryptedHistoryResult, error)
	//加密聊天settyping
	SetEncryptedTing(context.Context, *SetEncryptedTypingReq) (*SetEncryptedTypingResult, error)
	//LogOut后删除所有的加密聊天
	LogoutDisCardAllSecurity(context.Context, *LogoutDisCardAllSecurityReq) (*LogoutDisCardAllSecurityResult, error)
	//获取加密聊天的randomId 们
	GetSecurityRandomIds(context.Context, *GetSecurityRandomIdsReq) (*GetSecurityRandomIdsResult, error)
	ReceiveRedPacket(context.Context, *ReqReceiveRedPacket) (*ReplyReceiveRedPacket, error)
	GetChannelInactiveUsers(context.Context, *GetChannelInactiveUsersReq) (*GetChannelInactiveUsersResult, error)
	// 105 add 归档对话框
	FoldersEditPeerFolders(context.Context, *FoldersEditPeerFoldersReq) (*FoldersEditPeerFoldersReply, error)
	// 105 删除归档对话框
	FoldersDeleteFolder(context.Context, *FoldersDeleteFolderReq) (*FoldersDeleteFolderReply, error)
	// 105 发送投票
	SendVote(context.Context, *SendVoteReq) (*SendVoteReply, error)
	//发送支付结果通知 接口，为支付定制
	SendPaymentNotifyMsg(context.Context, *ReqSendPaymentNotifyMsg) (*RspSendPaymentNotifyMsg, error)
	SendBatchUsersMsg(context.Context, *ReqSendMoreUserMsg) (*ReplyBool, error)
	//加好友成功后的相互通知消息
	SendAddMutulContactNotify(context.Context, *ReqSendAddMutulContactNotify) (*RespSendAddMutulContactNotify, error)
	//单方面加好友通知消息
	SendAddSingleContactNotify(context.Context, *ReqSendAddSingleContactNotify) (*RespSendAddSingleContactNotify, error)
	// 朋友圈通知消息
	SendMediaSysNotify(context.Context, *ReqSendMediaSysNotify) (*RespSendMediaSysNotify, error)
	// 编辑媒体消息 by ty 2020.09.27
	EditMessageMedia(context.Context, *ReqEditMessageMedia) (*RespEditMessageMedia, error)
	mustEmbedUnimplementedMessageServerServer()
}

// UnimplementedMessageServerServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServerServer struct {
}

func (UnimplementedMessageServerServer) BotCall(context.Context, *ReqBotCall) (*ReplyBotCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotCall not implemented")
}
func (UnimplementedMessageServerServer) BotInlineCall(context.Context, *ReqBotInlineCall) (*ReplyBotInlineCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotInlineCall not implemented")
}
func (UnimplementedMessageServerServer) SetGameScore(context.Context, *ReqSetGameScore) (*ReplySetGameScore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGameScore not implemented")
}
func (UnimplementedMessageServerServer) RemoveConn(context.Context, *ReqRemoveConn) (*ReplyRemoveConn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveConn not implemented")
}
func (UnimplementedMessageServerServer) SignUpMsg(context.Context, *ReqSignUpMsg) (*ReplyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpMsg not implemented")
}
func (UnimplementedMessageServerServer) SendCodeMsg(context.Context, *ReqSendCodeMsg) (*ReplyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCodeMsg not implemented")
}
func (UnimplementedMessageServerServer) SignInMsg(context.Context, *ReqSignInMsg) (*ReplyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInMsg not implemented")
}
func (UnimplementedMessageServerServer) SendSynMsg(context.Context, *ReqSendSynMsg) (*ReplyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSynMsg not implemented")
}
func (UnimplementedMessageServerServer) SendUserMsg(context.Context, *ReqSendUserMsg) (*ReplyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserMsg not implemented")
}
func (UnimplementedMessageServerServer) SendUserOneClientMsg(context.Context, *ReqSendUserOneClientMsg) (*ReplyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserOneClientMsg not implemented")
}
func (UnimplementedMessageServerServer) SendMoreUserMsg(context.Context, *ReqSendMoreUserMsg) (*ReplyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMoreUserMsg not implemented")
}
func (UnimplementedMessageServerServer) SendCallMsg(context.Context, *ReqSendCallMsg) (*ReplyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCallMsg not implemented")
}
func (UnimplementedMessageServerServer) CallPush(context.Context, *ReqCallPush) (*ReplyCallPush, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallPush not implemented")
}
func (UnimplementedMessageServerServer) GetDialog(context.Context, *RequestDialog) (*ReplyDialog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialog not implemented")
}
func (UnimplementedMessageServerServer) GetLastLimitDialog(context.Context, *pbmessagedb.ReqGetLastLimitDialog) (*ReplyGetLastLimitDialog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastLimitDialog not implemented")
}
func (UnimplementedMessageServerServer) GetPinnedDialogs(context.Context, *ReqPinnedDialogs) (*ReplyDialog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPinnedDialogs not implemented")
}
func (UnimplementedMessageServerServer) GetPeerDialogs(context.Context, *ReqPeerDialogs) (*ReplyDialog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerDialogs not implemented")
}
func (UnimplementedMessageServerServer) GetRecentLocations(context.Context, *ReqRecentLocations) (*ReplyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentLocations not implemented")
}
func (UnimplementedMessageServerServer) PinDialog(context.Context, *ReqPinDialog) (*ReplyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinDialog not implemented")
}
func (UnimplementedMessageServerServer) ReorderPinnedDialogs(context.Context, *ReqReorderPinnedDialogs) (*ReplyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReorderPinnedDialogs not implemented")
}
func (UnimplementedMessageServerServer) GetState(context.Context, *ReqGetState) (*ReplyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedMessageServerServer) SendMessage(context.Context, *RequestSendMessage) (*ReplyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessageServerServer) SYSSendMessage(context.Context, *RequestSySSendMessage) (*ReplyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SYSSendMessage not implemented")
}
func (UnimplementedMessageServerServer) SendMedia(context.Context, *ReqSendMedia) (*ReplyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMedia not implemented")
}
func (UnimplementedMessageServerServer) UploadMedia(context.Context, *ReqUploadMedia) (*ReplyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadMedia not implemented")
}
func (UnimplementedMessageServerServer) GetMsg(context.Context, *ReqGetMsgs) (*ReplyGetMsgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsg not implemented")
}
func (UnimplementedMessageServerServer) GetHistory(context.Context, *ReqHistory) (*ReplyHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedMessageServerServer) CreateChat(context.Context, *ReqCreateChat) (*ReplyCreateChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedMessageServerServer) AddChatUser(context.Context, *ReqAddChatUser) (*ReplyAddChatUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChatUser not implemented")
}
func (UnimplementedMessageServerServer) DeleteChatUser(context.Context, *ReqDeleteChatUser) (*ReplyDeleteChatUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatUser not implemented")
}
func (UnimplementedMessageServerServer) EditChatAdmin(context.Context, *ReqEditChatAdmin) (*ReplyEditChatAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChatAdmin not implemented")
}
func (UnimplementedMessageServerServer) EditChatPhoto(context.Context, *ReqEditChatPhoto) (*ReplyEditChatPhoto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChatPhoto not implemented")
}
func (UnimplementedMessageServerServer) EditChatTitle(context.Context, *ReqEditChatTitle) (*ReplyEditChatTitle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChatTitle not implemented")
}
func (UnimplementedMessageServerServer) GetAllChats(context.Context, *ReqGetAllChats) (*ReplyGetAllChats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChats not implemented")
}
func (UnimplementedMessageServerServer) GetFullChat(context.Context, *ReqGetFullChat) (*ReplyGetFullChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullChat not implemented")
}
func (UnimplementedMessageServerServer) MigrateChat(context.Context, *ReqMigrateChat) (*ReplyMigrateChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateChat not implemented")
}
func (UnimplementedMessageServerServer) ForwardMessages(context.Context, *ReqForwardMessages) (*ReplyForwardMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardMessages not implemented")
}
func (UnimplementedMessageServerServer) S2SSendMsg(context.Context, *ReqS2SMsg) (*ReplyS2SMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method S2SSendMsg not implemented")
}
func (UnimplementedMessageServerServer) GetPts(context.Context, *ReqGetPts) (*ReplyGetPts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPts not implemented")
}
func (UnimplementedMessageServerServer) ReadHistory(context.Context, *ReqReadHistory) (*ReplyReadHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadHistory not implemented")
}
func (UnimplementedMessageServerServer) UpdateReadOutBox(context.Context, *ReqUpdateReadOut) (*ReplyUpdateReadOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReadOutBox not implemented")
}
func (UnimplementedMessageServerServer) GetDiffByPts(context.Context, *ReqDiffByPts) (*ReplyDiffByPts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiffByPts not implemented")
}
func (UnimplementedMessageServerServer) DeleteHistory(context.Context, *ReqDeleteHistory) (*ReplyDeleteHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHistory not implemented")
}
func (UnimplementedMessageServerServer) DeleteMessages(context.Context, *ReqDeleteMessages) (*ReplyDeleteMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessages not implemented")
}
func (UnimplementedMessageServerServer) EditMessage(context.Context, *ReqEditMessage) (*ReplyEditMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessage not implemented")
}
func (UnimplementedMessageServerServer) GetNotifySettings(context.Context, *ReqNotifySettings) (*ReplyNotifySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifySettings not implemented")
}
func (UnimplementedMessageServerServer) UpdateNotifySettings(context.Context, *ReqUpdateNotifySettings) (*ReplyUpdateNotifySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotifySettings not implemented")
}
func (UnimplementedMessageServerServer) GetMessageEditData(context.Context, *ReqMessageEditData) (*ReplyMessageEditData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageEditData not implemented")
}
func (UnimplementedMessageServerServer) SaveMsgDraft(context.Context, *ReqSaveMsgDraft) (*ReplySaveMsgDraft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMsgDraft not implemented")
}
func (UnimplementedMessageServerServer) GetUserUnRead(context.Context, *ReqGetUserUnRead) (*ReplyUserUnread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserUnRead not implemented")
}
func (UnimplementedMessageServerServer) SearchMedia(context.Context, *ReqMessageSearch) (*ReplyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMedia not implemented")
}
func (UnimplementedMessageServerServer) CheckChatInvite(context.Context, *ReqCheckChatInvite) (*ReplyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChatInvite not implemented")
}
func (UnimplementedMessageServerServer) CreateChannel(context.Context, *RequestChannel) (*ReplyChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedMessageServerServer) InviteChannelMember(context.Context, *RequestChannelInvite) (*ReplyChannelInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteChannelMember not implemented")
}
func (UnimplementedMessageServerServer) KickFromChannel(context.Context, *ReqChannelKick) (*ReplyChannelKick, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickFromChannel not implemented")
}
func (UnimplementedMessageServerServer) LeaveChannel(context.Context, *ReqLeaveChannel) (*ReplyLeaveChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChannel not implemented")
}
func (UnimplementedMessageServerServer) EditChannelTitle(context.Context, *ReqEditChannelTitle) (*ReplyEditChannelTitle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelTitle not implemented")
}
func (UnimplementedMessageServerServer) EditChannelAdmin(context.Context, *ReqEditChannelAdmin) (*ReplyEditChannelAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelAdmin not implemented")
}
func (UnimplementedMessageServerServer) EditChannelPhoto(context.Context, *ReqEditChannelPhoto) (*ReplyEditChannelPhoto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelPhoto not implemented")
}
func (UnimplementedMessageServerServer) EditChannelAbout(context.Context, *ReqEditChannelAbout) (*ReplyEditChannelAbout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelAbout not implemented")
}
func (UnimplementedMessageServerServer) DeleteChannelMessages(context.Context, *ReqDeleteChannelMessages) (*ReplyDeleteChannelMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelMessages not implemented")
}
func (UnimplementedMessageServerServer) DeleteChannelSelfHistory(context.Context, *ReqDeleteChannelSelfHistory) (*ReplyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelSelfHistory not implemented")
}
func (UnimplementedMessageServerServer) DeleteChannelHistory(context.Context, *ReqDeleteChannelHistory) (*ReplyDeleteChannelHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelHistory not implemented")
}
func (UnimplementedMessageServerServer) UpdatePinnedChannelMessage(context.Context, *ReqUpdatePinnedChannelMessage) (*ReplyUpdatePinnedChannelMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePinnedChannelMessage not implemented")
}
func (UnimplementedMessageServerServer) UpdateChannelReadHistory(context.Context, *ReqReadChannelHistory) (*ReplyReadChannelHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelReadHistory not implemented")
}
func (UnimplementedMessageServerServer) GetChannelDifference(context.Context, *ReqGetchannelDifference) (*ReplyChannelDiffCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelDifference not implemented")
}
func (UnimplementedMessageServerServer) GetChannelMessagesByMsgsId(context.Context, *ReqGetChannelMsgsByMsgsId) (*ReplyChannelMsgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMessagesByMsgsId not implemented")
}
func (UnimplementedMessageServerServer) JoinChannel(context.Context, *ReqJoinChannel) (*ReplyJoinChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChannel not implemented")
}
func (UnimplementedMessageServerServer) DeleteChannel(context.Context, *ReqDeleteChannel) (*ReplyDeleteChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedMessageServerServer) GetChannelsLastMsgsByUserId(context.Context, *ReqGetChannelsLastMsgsByUserId) (*ReplyGetChannelsLastMsgsByUserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelsLastMsgsByUserId not implemented")
}
func (UnimplementedMessageServerServer) GetChannelAdminLog(context.Context, *ReqChannelAdminLog) (*ReplyChannelAdminLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelAdminLog not implemented")
}
func (UnimplementedMessageServerServer) ImportChatInvite(context.Context, *ReqImportChatInvite) (*ReplyImportChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportChatInvite not implemented")
}
func (UnimplementedMessageServerServer) EditBanChannelUser(context.Context, *ReqBanChannelUser) (*ReplyBanChannelUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBanChannelUser not implemented")
}
func (UnimplementedMessageServerServer) GetFullChannel(context.Context, *ReqFullchannel) (*ReplyFullChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullChannel not implemented")
}
func (UnimplementedMessageServerServer) GetParticipant(context.Context, *ReqParticipant) (*ReplyParticipant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipant not implemented")
}
func (UnimplementedMessageServerServer) GetParticipants(context.Context, *ReqParticipants) (*ReplyParticipants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipants not implemented")
}
func (UnimplementedMessageServerServer) ExportChannelLink(context.Context, *ReqExportChannelLink) (*ReplyExportChannelLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportChannelLink not implemented")
}
func (UnimplementedMessageServerServer) ChannelToggleInvite(context.Context, *ReqChannelToggleInvite) (*ReplyChannelToggleInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelToggleInvite not implemented")
}
func (UnimplementedMessageServerServer) Getchannels(context.Context, *ReqGetChannels) (*ReplyGetChannels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getchannels not implemented")
}
func (UnimplementedMessageServerServer) UpdateChannelUserName(context.Context, *ReqChannelUpdateUserName) (*ReplyChannelUpdateUserName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelUserName not implemented")
}
func (UnimplementedMessageServerServer) CheckChannelUserName(context.Context, *ReqChannelCheckUserName) (*ReplyChannelCheckUserName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChannelUserName not implemented")
}
func (UnimplementedMessageServerServer) ChangeGroupAndChannelCrator(context.Context, *ReqChangeGroupAndChannelCrator) (*ReplyChangeGroupAndChannelCrator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeGroupAndChannelCrator not implemented")
}
func (UnimplementedMessageServerServer) GetMessageByUserIdMsgId(context.Context, *ReqGetMessageByUserIdMsgId) (*ReplyGetMessageByUserIdMsgId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageByUserIdMsgId not implemented")
}
func (UnimplementedMessageServerServer) GetMessageByUserIdUuid(context.Context, *ReqGetMessageByUserIdUuid) (*ReplyGetMessageByUserIdUuid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageByUserIdUuid not implemented")
}
func (UnimplementedMessageServerServer) GetChannelMessageByChannelIdMsgId(context.Context, *ReqGetChannelMessageByChannelIdMsgId) (*ReplyGetChannelMessageByChannelIdMsgId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMessageByChannelIdMsgId not implemented")
}
func (UnimplementedMessageServerServer) StoreOtherInfoMsg(context.Context, *pbmessagedb.ReqStoreOtherInfoMsg) (*ReplyStoreOtherInfoMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreOtherInfoMsg not implemented")
}
func (UnimplementedMessageServerServer) BatchStoreOtherInfoMsg(context.Context, *pbmessagedb.ReqBatchStoreOtherInfoMsg) (*ReplyBatchStoreOtherInfoMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchStoreOtherInfoMsg not implemented")
}
func (UnimplementedMessageServerServer) RequestEncryption(context.Context, *RequestEncryptionReq) (*RequestEncryptionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestEncryption not implemented")
}
func (UnimplementedMessageServerServer) AcceptEncryption(context.Context, *AcceptEncryptionReq) (*AcceptEncryptionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptEncryption not implemented")
}
func (UnimplementedMessageServerServer) SendEncrypted(context.Context, *SendEncryptedReq) (*SendEncryptedResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEncrypted not implemented")
}
func (UnimplementedMessageServerServer) SendEncryptedFile(context.Context, *SendEncryptedFileReq) (*SendEncryptedFileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEncryptedFile not implemented")
}
func (UnimplementedMessageServerServer) SendEncryptedService(context.Context, *SendEncryptedServiceReq) (*SendEncryptedServiceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEncryptedService not implemented")
}
func (UnimplementedMessageServerServer) DiscardEncryption(context.Context, *DiscardEncryptionReq) (*DiscardEncryptionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscardEncryption not implemented")
}
func (UnimplementedMessageServerServer) ReadEncryptedHistory(context.Context, *ReadEncryptedHistoryReq) (*ReadEncryptedHistoryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadEncryptedHistory not implemented")
}
func (UnimplementedMessageServerServer) SetEncryptedTing(context.Context, *SetEncryptedTypingReq) (*SetEncryptedTypingResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEncryptedTing not implemented")
}
func (UnimplementedMessageServerServer) LogoutDisCardAllSecurity(context.Context, *LogoutDisCardAllSecurityReq) (*LogoutDisCardAllSecurityResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutDisCardAllSecurity not implemented")
}
func (UnimplementedMessageServerServer) GetSecurityRandomIds(context.Context, *GetSecurityRandomIdsReq) (*GetSecurityRandomIdsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityRandomIds not implemented")
}
func (UnimplementedMessageServerServer) ReceiveRedPacket(context.Context, *ReqReceiveRedPacket) (*ReplyReceiveRedPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveRedPacket not implemented")
}
func (UnimplementedMessageServerServer) GetChannelInactiveUsers(context.Context, *GetChannelInactiveUsersReq) (*GetChannelInactiveUsersResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelInactiveUsers not implemented")
}
func (UnimplementedMessageServerServer) FoldersEditPeerFolders(context.Context, *FoldersEditPeerFoldersReq) (*FoldersEditPeerFoldersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FoldersEditPeerFolders not implemented")
}
func (UnimplementedMessageServerServer) FoldersDeleteFolder(context.Context, *FoldersDeleteFolderReq) (*FoldersDeleteFolderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FoldersDeleteFolder not implemented")
}
func (UnimplementedMessageServerServer) SendVote(context.Context, *SendVoteReq) (*SendVoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVote not implemented")
}
func (UnimplementedMessageServerServer) SendPaymentNotifyMsg(context.Context, *ReqSendPaymentNotifyMsg) (*RspSendPaymentNotifyMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPaymentNotifyMsg not implemented")
}
func (UnimplementedMessageServerServer) SendBatchUsersMsg(context.Context, *ReqSendMoreUserMsg) (*ReplyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBatchUsersMsg not implemented")
}
func (UnimplementedMessageServerServer) SendAddMutulContactNotify(context.Context, *ReqSendAddMutulContactNotify) (*RespSendAddMutulContactNotify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAddMutulContactNotify not implemented")
}
func (UnimplementedMessageServerServer) SendAddSingleContactNotify(context.Context, *ReqSendAddSingleContactNotify) (*RespSendAddSingleContactNotify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAddSingleContactNotify not implemented")
}
func (UnimplementedMessageServerServer) SendMediaSysNotify(context.Context, *ReqSendMediaSysNotify) (*RespSendMediaSysNotify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMediaSysNotify not implemented")
}
func (UnimplementedMessageServerServer) EditMessageMedia(context.Context, *ReqEditMessageMedia) (*RespEditMessageMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessageMedia not implemented")
}
func (UnimplementedMessageServerServer) mustEmbedUnimplementedMessageServerServer() {}

// UnsafeMessageServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServerServer will
// result in compilation errors.
type UnsafeMessageServerServer interface {
	mustEmbedUnimplementedMessageServerServer()
}

func RegisterMessageServerServer(s grpc.ServiceRegistrar, srv MessageServerServer) {
	s.RegisterService(&MessageServer_ServiceDesc, srv)
}

func _MessageServer_BotCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBotCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).BotCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/BotCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).BotCall(ctx, req.(*ReqBotCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_BotInlineCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBotInlineCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).BotInlineCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/BotInlineCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).BotInlineCall(ctx, req.(*ReqBotInlineCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SetGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetGameScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SetGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SetGameScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SetGameScore(ctx, req.(*ReqSetGameScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_RemoveConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRemoveConn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).RemoveConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/RemoveConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).RemoveConn(ctx, req.(*ReqRemoveConn))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SignUpMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSignUpMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SignUpMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SignUpMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SignUpMsg(ctx, req.(*ReqSignUpMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendCodeMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendCodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendCodeMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendCodeMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendCodeMsg(ctx, req.(*ReqSendCodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SignInMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSignInMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SignInMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SignInMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SignInMsg(ctx, req.(*ReqSignInMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendSynMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendSynMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendSynMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendSynMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendSynMsg(ctx, req.(*ReqSendSynMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendUserMsg(ctx, req.(*ReqSendUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendUserOneClientMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendUserOneClientMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendUserOneClientMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendUserOneClientMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendUserOneClientMsg(ctx, req.(*ReqSendUserOneClientMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendMoreUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendMoreUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendMoreUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendMoreUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendMoreUserMsg(ctx, req.(*ReqSendMoreUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendCallMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendCallMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendCallMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendCallMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendCallMsg(ctx, req.(*ReqSendCallMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_CallPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCallPush)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).CallPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/CallPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).CallPush(ctx, req.(*ReqCallPush))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetDialog(ctx, req.(*RequestDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetLastLimitDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbmessagedb.ReqGetLastLimitDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetLastLimitDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetLastLimitDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetLastLimitDialog(ctx, req.(*pbmessagedb.ReqGetLastLimitDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetPinnedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPinnedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetPinnedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetPinnedDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetPinnedDialogs(ctx, req.(*ReqPinnedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetPeerDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPeerDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetPeerDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetPeerDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetPeerDialogs(ctx, req.(*ReqPeerDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetRecentLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRecentLocations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetRecentLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetRecentLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetRecentLocations(ctx, req.(*ReqRecentLocations))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_PinDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPinDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).PinDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/PinDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).PinDialog(ctx, req.(*ReqPinDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_ReorderPinnedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReorderPinnedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).ReorderPinnedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/ReorderPinnedDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).ReorderPinnedDialogs(ctx, req.(*ReqReorderPinnedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetState(ctx, req.(*ReqGetState))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendMessage(ctx, req.(*RequestSendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SYSSendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSySSendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SYSSendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SYSSendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SYSSendMessage(ctx, req.(*RequestSySSendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendMedia(ctx, req.(*ReqSendMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_UploadMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUploadMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).UploadMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/UploadMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).UploadMedia(ctx, req.(*ReqUploadMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMsgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetMsg(ctx, req.(*ReqGetMsgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetHistory(ctx, req.(*ReqHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).CreateChat(ctx, req.(*ReqCreateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_AddChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddChatUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).AddChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/AddChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).AddChatUser(ctx, req.(*ReqAddChatUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_DeleteChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChatUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).DeleteChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/DeleteChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).DeleteChatUser(ctx, req.(*ReqDeleteChatUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditChatAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChatAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditChatAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditChatAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditChatAdmin(ctx, req.(*ReqEditChatAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditChatPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChatPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditChatPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditChatPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditChatPhoto(ctx, req.(*ReqEditChatPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditChatTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChatTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditChatTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditChatTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditChatTitle(ctx, req.(*ReqEditChatTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetAllChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetAllChats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetAllChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetAllChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetAllChats(ctx, req.(*ReqGetAllChats))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetFullChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetFullChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetFullChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetFullChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetFullChat(ctx, req.(*ReqGetFullChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_MigrateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMigrateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).MigrateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/MigrateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).MigrateChat(ctx, req.(*ReqMigrateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_ForwardMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqForwardMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).ForwardMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/ForwardMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).ForwardMessages(ctx, req.(*ReqForwardMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_S2SSendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqS2SMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).S2SSendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/S2SSendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).S2SSendMsg(ctx, req.(*ReqS2SMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetPts(ctx, req.(*ReqGetPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_ReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReadHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).ReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/ReadHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).ReadHistory(ctx, req.(*ReqReadHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_UpdateReadOutBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateReadOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).UpdateReadOutBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/UpdateReadOutBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).UpdateReadOutBox(ctx, req.(*ReqUpdateReadOut))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetDiffByPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDiffByPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetDiffByPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetDiffByPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetDiffByPts(ctx, req.(*ReqDiffByPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_DeleteHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).DeleteHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/DeleteHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).DeleteHistory(ctx, req.(*ReqDeleteHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_DeleteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).DeleteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/DeleteMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).DeleteMessages(ctx, req.(*ReqDeleteMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditMessage(ctx, req.(*ReqEditMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetNotifySettings(ctx, req.(*ReqNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_UpdateNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).UpdateNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/UpdateNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).UpdateNotifySettings(ctx, req.(*ReqUpdateNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetMessageEditData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMessageEditData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetMessageEditData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetMessageEditData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetMessageEditData(ctx, req.(*ReqMessageEditData))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SaveMsgDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSaveMsgDraft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SaveMsgDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SaveMsgDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SaveMsgDraft(ctx, req.(*ReqSaveMsgDraft))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetUserUnRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserUnRead)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetUserUnRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetUserUnRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetUserUnRead(ctx, req.(*ReqGetUserUnRead))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SearchMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMessageSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SearchMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SearchMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SearchMedia(ctx, req.(*ReqMessageSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_CheckChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCheckChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).CheckChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/CheckChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).CheckChatInvite(ctx, req.(*ReqCheckChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).CreateChannel(ctx, req.(*RequestChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_InviteChannelMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChannelInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).InviteChannelMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/InviteChannelMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).InviteChannelMember(ctx, req.(*RequestChannelInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_KickFromChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelKick)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).KickFromChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/KickFromChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).KickFromChannel(ctx, req.(*ReqChannelKick))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_LeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLeaveChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).LeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/LeaveChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).LeaveChannel(ctx, req.(*ReqLeaveChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditChannelTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditChannelTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditChannelTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditChannelTitle(ctx, req.(*ReqEditChannelTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditChannelAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditChannelAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditChannelAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditChannelAdmin(ctx, req.(*ReqEditChannelAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditChannelPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditChannelPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditChannelPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditChannelPhoto(ctx, req.(*ReqEditChannelPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditChannelAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditChannelAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditChannelAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditChannelAbout(ctx, req.(*ReqEditChannelAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_DeleteChannelMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).DeleteChannelMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/DeleteChannelMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).DeleteChannelMessages(ctx, req.(*ReqDeleteChannelMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_DeleteChannelSelfHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelSelfHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).DeleteChannelSelfHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/DeleteChannelSelfHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).DeleteChannelSelfHistory(ctx, req.(*ReqDeleteChannelSelfHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_DeleteChannelHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).DeleteChannelHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/DeleteChannelHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).DeleteChannelHistory(ctx, req.(*ReqDeleteChannelHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_UpdatePinnedChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdatePinnedChannelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).UpdatePinnedChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/UpdatePinnedChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).UpdatePinnedChannelMessage(ctx, req.(*ReqUpdatePinnedChannelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_UpdateChannelReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReadChannelHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).UpdateChannelReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/UpdateChannelReadHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).UpdateChannelReadHistory(ctx, req.(*ReqReadChannelHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetChannelDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetchannelDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetChannelDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetChannelDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetChannelDifference(ctx, req.(*ReqGetchannelDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetChannelMessagesByMsgsId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMsgsByMsgsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetChannelMessagesByMsgsId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetChannelMessagesByMsgsId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetChannelMessagesByMsgsId(ctx, req.(*ReqGetChannelMsgsByMsgsId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_JoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqJoinChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).JoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/JoinChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).JoinChannel(ctx, req.(*ReqJoinChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/DeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).DeleteChannel(ctx, req.(*ReqDeleteChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetChannelsLastMsgsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelsLastMsgsByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetChannelsLastMsgsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetChannelsLastMsgsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetChannelsLastMsgsByUserId(ctx, req.(*ReqGetChannelsLastMsgsByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetChannelAdminLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelAdminLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetChannelAdminLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetChannelAdminLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetChannelAdminLog(ctx, req.(*ReqChannelAdminLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_ImportChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqImportChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).ImportChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/ImportChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).ImportChatInvite(ctx, req.(*ReqImportChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditBanChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBanChannelUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditBanChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditBanChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditBanChannelUser(ctx, req.(*ReqBanChannelUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetFullChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFullchannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetFullChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetFullChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetFullChannel(ctx, req.(*ReqFullchannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqParticipant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetParticipant(ctx, req.(*ReqParticipant))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetParticipants(ctx, req.(*ReqParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_ExportChannelLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqExportChannelLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).ExportChannelLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/ExportChannelLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).ExportChannelLink(ctx, req.(*ReqExportChannelLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_ChannelToggleInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelToggleInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).ChannelToggleInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/ChannelToggleInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).ChannelToggleInvite(ctx, req.(*ReqChannelToggleInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_Getchannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).Getchannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/Getchannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).Getchannels(ctx, req.(*ReqGetChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_UpdateChannelUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelUpdateUserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).UpdateChannelUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/UpdateChannelUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).UpdateChannelUserName(ctx, req.(*ReqChannelUpdateUserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_CheckChannelUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelCheckUserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).CheckChannelUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/CheckChannelUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).CheckChannelUserName(ctx, req.(*ReqChannelCheckUserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_ChangeGroupAndChannelCrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangeGroupAndChannelCrator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).ChangeGroupAndChannelCrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/ChangeGroupAndChannelCrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).ChangeGroupAndChannelCrator(ctx, req.(*ReqChangeGroupAndChannelCrator))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetMessageByUserIdMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMessageByUserIdMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetMessageByUserIdMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetMessageByUserIdMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetMessageByUserIdMsgId(ctx, req.(*ReqGetMessageByUserIdMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetMessageByUserIdUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMessageByUserIdUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetMessageByUserIdUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetMessageByUserIdUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetMessageByUserIdUuid(ctx, req.(*ReqGetMessageByUserIdUuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetChannelMessageByChannelIdMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMessageByChannelIdMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetChannelMessageByChannelIdMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetChannelMessageByChannelIdMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetChannelMessageByChannelIdMsgId(ctx, req.(*ReqGetChannelMessageByChannelIdMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_StoreOtherInfoMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbmessagedb.ReqStoreOtherInfoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).StoreOtherInfoMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/StoreOtherInfoMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).StoreOtherInfoMsg(ctx, req.(*pbmessagedb.ReqStoreOtherInfoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_BatchStoreOtherInfoMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbmessagedb.ReqBatchStoreOtherInfoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).BatchStoreOtherInfoMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/BatchStoreOtherInfoMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).BatchStoreOtherInfoMsg(ctx, req.(*pbmessagedb.ReqBatchStoreOtherInfoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_RequestEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEncryptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).RequestEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/RequestEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).RequestEncryption(ctx, req.(*RequestEncryptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_AcceptEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptEncryptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).AcceptEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/AcceptEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).AcceptEncryption(ctx, req.(*AcceptEncryptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendEncrypted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEncryptedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendEncrypted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendEncrypted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendEncrypted(ctx, req.(*SendEncryptedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendEncryptedFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEncryptedFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendEncryptedFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendEncryptedFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendEncryptedFile(ctx, req.(*SendEncryptedFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendEncryptedService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEncryptedServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendEncryptedService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendEncryptedService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendEncryptedService(ctx, req.(*SendEncryptedServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_DiscardEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardEncryptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).DiscardEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/DiscardEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).DiscardEncryption(ctx, req.(*DiscardEncryptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_ReadEncryptedHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadEncryptedHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).ReadEncryptedHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/ReadEncryptedHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).ReadEncryptedHistory(ctx, req.(*ReadEncryptedHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SetEncryptedTing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEncryptedTypingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SetEncryptedTing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SetEncryptedTing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SetEncryptedTing(ctx, req.(*SetEncryptedTypingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_LogoutDisCardAllSecurity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutDisCardAllSecurityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).LogoutDisCardAllSecurity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/LogoutDisCardAllSecurity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).LogoutDisCardAllSecurity(ctx, req.(*LogoutDisCardAllSecurityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetSecurityRandomIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityRandomIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetSecurityRandomIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetSecurityRandomIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetSecurityRandomIds(ctx, req.(*GetSecurityRandomIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_ReceiveRedPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveRedPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).ReceiveRedPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/ReceiveRedPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).ReceiveRedPacket(ctx, req.(*ReqReceiveRedPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_GetChannelInactiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelInactiveUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).GetChannelInactiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/GetChannelInactiveUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).GetChannelInactiveUsers(ctx, req.(*GetChannelInactiveUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_FoldersEditPeerFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FoldersEditPeerFoldersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).FoldersEditPeerFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/FoldersEditPeerFolders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).FoldersEditPeerFolders(ctx, req.(*FoldersEditPeerFoldersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_FoldersDeleteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FoldersDeleteFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).FoldersDeleteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/FoldersDeleteFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).FoldersDeleteFolder(ctx, req.(*FoldersDeleteFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendVote(ctx, req.(*SendVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendPaymentNotifyMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendPaymentNotifyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendPaymentNotifyMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendPaymentNotifyMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendPaymentNotifyMsg(ctx, req.(*ReqSendPaymentNotifyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendBatchUsersMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendMoreUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendBatchUsersMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendBatchUsersMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendBatchUsersMsg(ctx, req.(*ReqSendMoreUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendAddMutulContactNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendAddMutulContactNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendAddMutulContactNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendAddMutulContactNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendAddMutulContactNotify(ctx, req.(*ReqSendAddMutulContactNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendAddSingleContactNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendAddSingleContactNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendAddSingleContactNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendAddSingleContactNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendAddSingleContactNotify(ctx, req.(*ReqSendAddSingleContactNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_SendMediaSysNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendMediaSysNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).SendMediaSysNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/SendMediaSysNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).SendMediaSysNotify(ctx, req.(*ReqSendMediaSysNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageServer_EditMessageMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditMessageMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServerServer).EditMessageMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.MessageServer/EditMessageMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServerServer).EditMessageMedia(ctx, req.(*ReqEditMessageMedia))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageServer_ServiceDesc is the grpc.ServiceDesc for MessageServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbmessageserver.MessageServer",
	HandlerType: (*MessageServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BotCall",
			Handler:    _MessageServer_BotCall_Handler,
		},
		{
			MethodName: "BotInlineCall",
			Handler:    _MessageServer_BotInlineCall_Handler,
		},
		{
			MethodName: "SetGameScore",
			Handler:    _MessageServer_SetGameScore_Handler,
		},
		{
			MethodName: "RemoveConn",
			Handler:    _MessageServer_RemoveConn_Handler,
		},
		{
			MethodName: "SignUpMsg",
			Handler:    _MessageServer_SignUpMsg_Handler,
		},
		{
			MethodName: "SendCodeMsg",
			Handler:    _MessageServer_SendCodeMsg_Handler,
		},
		{
			MethodName: "SignInMsg",
			Handler:    _MessageServer_SignInMsg_Handler,
		},
		{
			MethodName: "SendSynMsg",
			Handler:    _MessageServer_SendSynMsg_Handler,
		},
		{
			MethodName: "SendUserMsg",
			Handler:    _MessageServer_SendUserMsg_Handler,
		},
		{
			MethodName: "SendUserOneClientMsg",
			Handler:    _MessageServer_SendUserOneClientMsg_Handler,
		},
		{
			MethodName: "SendMoreUserMsg",
			Handler:    _MessageServer_SendMoreUserMsg_Handler,
		},
		{
			MethodName: "SendCallMsg",
			Handler:    _MessageServer_SendCallMsg_Handler,
		},
		{
			MethodName: "CallPush",
			Handler:    _MessageServer_CallPush_Handler,
		},
		{
			MethodName: "GetDialog",
			Handler:    _MessageServer_GetDialog_Handler,
		},
		{
			MethodName: "GetLastLimitDialog",
			Handler:    _MessageServer_GetLastLimitDialog_Handler,
		},
		{
			MethodName: "GetPinnedDialogs",
			Handler:    _MessageServer_GetPinnedDialogs_Handler,
		},
		{
			MethodName: "GetPeerDialogs",
			Handler:    _MessageServer_GetPeerDialogs_Handler,
		},
		{
			MethodName: "GetRecentLocations",
			Handler:    _MessageServer_GetRecentLocations_Handler,
		},
		{
			MethodName: "PinDialog",
			Handler:    _MessageServer_PinDialog_Handler,
		},
		{
			MethodName: "ReorderPinnedDialogs",
			Handler:    _MessageServer_ReorderPinnedDialogs_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _MessageServer_GetState_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _MessageServer_SendMessage_Handler,
		},
		{
			MethodName: "SYSSendMessage",
			Handler:    _MessageServer_SYSSendMessage_Handler,
		},
		{
			MethodName: "SendMedia",
			Handler:    _MessageServer_SendMedia_Handler,
		},
		{
			MethodName: "UploadMedia",
			Handler:    _MessageServer_UploadMedia_Handler,
		},
		{
			MethodName: "GetMsg",
			Handler:    _MessageServer_GetMsg_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _MessageServer_GetHistory_Handler,
		},
		{
			MethodName: "CreateChat",
			Handler:    _MessageServer_CreateChat_Handler,
		},
		{
			MethodName: "AddChatUser",
			Handler:    _MessageServer_AddChatUser_Handler,
		},
		{
			MethodName: "DeleteChatUser",
			Handler:    _MessageServer_DeleteChatUser_Handler,
		},
		{
			MethodName: "EditChatAdmin",
			Handler:    _MessageServer_EditChatAdmin_Handler,
		},
		{
			MethodName: "EditChatPhoto",
			Handler:    _MessageServer_EditChatPhoto_Handler,
		},
		{
			MethodName: "EditChatTitle",
			Handler:    _MessageServer_EditChatTitle_Handler,
		},
		{
			MethodName: "GetAllChats",
			Handler:    _MessageServer_GetAllChats_Handler,
		},
		{
			MethodName: "GetFullChat",
			Handler:    _MessageServer_GetFullChat_Handler,
		},
		{
			MethodName: "MigrateChat",
			Handler:    _MessageServer_MigrateChat_Handler,
		},
		{
			MethodName: "ForwardMessages",
			Handler:    _MessageServer_ForwardMessages_Handler,
		},
		{
			MethodName: "S2SSendMsg",
			Handler:    _MessageServer_S2SSendMsg_Handler,
		},
		{
			MethodName: "GetPts",
			Handler:    _MessageServer_GetPts_Handler,
		},
		{
			MethodName: "ReadHistory",
			Handler:    _MessageServer_ReadHistory_Handler,
		},
		{
			MethodName: "UpdateReadOutBox",
			Handler:    _MessageServer_UpdateReadOutBox_Handler,
		},
		{
			MethodName: "GetDiffByPts",
			Handler:    _MessageServer_GetDiffByPts_Handler,
		},
		{
			MethodName: "DeleteHistory",
			Handler:    _MessageServer_DeleteHistory_Handler,
		},
		{
			MethodName: "DeleteMessages",
			Handler:    _MessageServer_DeleteMessages_Handler,
		},
		{
			MethodName: "EditMessage",
			Handler:    _MessageServer_EditMessage_Handler,
		},
		{
			MethodName: "GetNotifySettings",
			Handler:    _MessageServer_GetNotifySettings_Handler,
		},
		{
			MethodName: "UpdateNotifySettings",
			Handler:    _MessageServer_UpdateNotifySettings_Handler,
		},
		{
			MethodName: "GetMessageEditData",
			Handler:    _MessageServer_GetMessageEditData_Handler,
		},
		{
			MethodName: "SaveMsgDraft",
			Handler:    _MessageServer_SaveMsgDraft_Handler,
		},
		{
			MethodName: "GetUserUnRead",
			Handler:    _MessageServer_GetUserUnRead_Handler,
		},
		{
			MethodName: "SearchMedia",
			Handler:    _MessageServer_SearchMedia_Handler,
		},
		{
			MethodName: "CheckChatInvite",
			Handler:    _MessageServer_CheckChatInvite_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _MessageServer_CreateChannel_Handler,
		},
		{
			MethodName: "InviteChannelMember",
			Handler:    _MessageServer_InviteChannelMember_Handler,
		},
		{
			MethodName: "KickFromChannel",
			Handler:    _MessageServer_KickFromChannel_Handler,
		},
		{
			MethodName: "LeaveChannel",
			Handler:    _MessageServer_LeaveChannel_Handler,
		},
		{
			MethodName: "EditChannelTitle",
			Handler:    _MessageServer_EditChannelTitle_Handler,
		},
		{
			MethodName: "EditChannelAdmin",
			Handler:    _MessageServer_EditChannelAdmin_Handler,
		},
		{
			MethodName: "EditChannelPhoto",
			Handler:    _MessageServer_EditChannelPhoto_Handler,
		},
		{
			MethodName: "EditChannelAbout",
			Handler:    _MessageServer_EditChannelAbout_Handler,
		},
		{
			MethodName: "DeleteChannelMessages",
			Handler:    _MessageServer_DeleteChannelMessages_Handler,
		},
		{
			MethodName: "DeleteChannelSelfHistory",
			Handler:    _MessageServer_DeleteChannelSelfHistory_Handler,
		},
		{
			MethodName: "DeleteChannelHistory",
			Handler:    _MessageServer_DeleteChannelHistory_Handler,
		},
		{
			MethodName: "UpdatePinnedChannelMessage",
			Handler:    _MessageServer_UpdatePinnedChannelMessage_Handler,
		},
		{
			MethodName: "UpdateChannelReadHistory",
			Handler:    _MessageServer_UpdateChannelReadHistory_Handler,
		},
		{
			MethodName: "GetChannelDifference",
			Handler:    _MessageServer_GetChannelDifference_Handler,
		},
		{
			MethodName: "GetChannelMessagesByMsgsId",
			Handler:    _MessageServer_GetChannelMessagesByMsgsId_Handler,
		},
		{
			MethodName: "JoinChannel",
			Handler:    _MessageServer_JoinChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _MessageServer_DeleteChannel_Handler,
		},
		{
			MethodName: "GetChannelsLastMsgsByUserId",
			Handler:    _MessageServer_GetChannelsLastMsgsByUserId_Handler,
		},
		{
			MethodName: "GetChannelAdminLog",
			Handler:    _MessageServer_GetChannelAdminLog_Handler,
		},
		{
			MethodName: "ImportChatInvite",
			Handler:    _MessageServer_ImportChatInvite_Handler,
		},
		{
			MethodName: "EditBanChannelUser",
			Handler:    _MessageServer_EditBanChannelUser_Handler,
		},
		{
			MethodName: "GetFullChannel",
			Handler:    _MessageServer_GetFullChannel_Handler,
		},
		{
			MethodName: "GetParticipant",
			Handler:    _MessageServer_GetParticipant_Handler,
		},
		{
			MethodName: "GetParticipants",
			Handler:    _MessageServer_GetParticipants_Handler,
		},
		{
			MethodName: "ExportChannelLink",
			Handler:    _MessageServer_ExportChannelLink_Handler,
		},
		{
			MethodName: "ChannelToggleInvite",
			Handler:    _MessageServer_ChannelToggleInvite_Handler,
		},
		{
			MethodName: "Getchannels",
			Handler:    _MessageServer_Getchannels_Handler,
		},
		{
			MethodName: "UpdateChannelUserName",
			Handler:    _MessageServer_UpdateChannelUserName_Handler,
		},
		{
			MethodName: "CheckChannelUserName",
			Handler:    _MessageServer_CheckChannelUserName_Handler,
		},
		{
			MethodName: "ChangeGroupAndChannelCrator",
			Handler:    _MessageServer_ChangeGroupAndChannelCrator_Handler,
		},
		{
			MethodName: "GetMessageByUserIdMsgId",
			Handler:    _MessageServer_GetMessageByUserIdMsgId_Handler,
		},
		{
			MethodName: "GetMessageByUserIdUuid",
			Handler:    _MessageServer_GetMessageByUserIdUuid_Handler,
		},
		{
			MethodName: "GetChannelMessageByChannelIdMsgId",
			Handler:    _MessageServer_GetChannelMessageByChannelIdMsgId_Handler,
		},
		{
			MethodName: "StoreOtherInfoMsg",
			Handler:    _MessageServer_StoreOtherInfoMsg_Handler,
		},
		{
			MethodName: "BatchStoreOtherInfoMsg",
			Handler:    _MessageServer_BatchStoreOtherInfoMsg_Handler,
		},
		{
			MethodName: "RequestEncryption",
			Handler:    _MessageServer_RequestEncryption_Handler,
		},
		{
			MethodName: "AcceptEncryption",
			Handler:    _MessageServer_AcceptEncryption_Handler,
		},
		{
			MethodName: "SendEncrypted",
			Handler:    _MessageServer_SendEncrypted_Handler,
		},
		{
			MethodName: "SendEncryptedFile",
			Handler:    _MessageServer_SendEncryptedFile_Handler,
		},
		{
			MethodName: "SendEncryptedService",
			Handler:    _MessageServer_SendEncryptedService_Handler,
		},
		{
			MethodName: "DiscardEncryption",
			Handler:    _MessageServer_DiscardEncryption_Handler,
		},
		{
			MethodName: "ReadEncryptedHistory",
			Handler:    _MessageServer_ReadEncryptedHistory_Handler,
		},
		{
			MethodName: "SetEncryptedTing",
			Handler:    _MessageServer_SetEncryptedTing_Handler,
		},
		{
			MethodName: "LogoutDisCardAllSecurity",
			Handler:    _MessageServer_LogoutDisCardAllSecurity_Handler,
		},
		{
			MethodName: "GetSecurityRandomIds",
			Handler:    _MessageServer_GetSecurityRandomIds_Handler,
		},
		{
			MethodName: "ReceiveRedPacket",
			Handler:    _MessageServer_ReceiveRedPacket_Handler,
		},
		{
			MethodName: "GetChannelInactiveUsers",
			Handler:    _MessageServer_GetChannelInactiveUsers_Handler,
		},
		{
			MethodName: "FoldersEditPeerFolders",
			Handler:    _MessageServer_FoldersEditPeerFolders_Handler,
		},
		{
			MethodName: "FoldersDeleteFolder",
			Handler:    _MessageServer_FoldersDeleteFolder_Handler,
		},
		{
			MethodName: "SendVote",
			Handler:    _MessageServer_SendVote_Handler,
		},
		{
			MethodName: "SendPaymentNotifyMsg",
			Handler:    _MessageServer_SendPaymentNotifyMsg_Handler,
		},
		{
			MethodName: "SendBatchUsersMsg",
			Handler:    _MessageServer_SendBatchUsersMsg_Handler,
		},
		{
			MethodName: "SendAddMutulContactNotify",
			Handler:    _MessageServer_SendAddMutulContactNotify_Handler,
		},
		{
			MethodName: "SendAddSingleContactNotify",
			Handler:    _MessageServer_SendAddSingleContactNotify_Handler,
		},
		{
			MethodName: "SendMediaSysNotify",
			Handler:    _MessageServer_SendMediaSysNotify_Handler,
		},
		{
			MethodName: "EditMessageMedia",
			Handler:    _MessageServer_EditMessageMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pbmessageserver.proto",
}

// GetWebPagePreviewClient is the client API for GetWebPagePreview service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetWebPagePreviewClient interface {
	// 获取网页预览信息
	GetWebPagePreview(ctx context.Context, in *RequestWebPMessage, opts ...grpc.CallOption) (*ReplyRequestWebPagePreview, error)
}

type getWebPagePreviewClient struct {
	cc grpc.ClientConnInterface
}

func NewGetWebPagePreviewClient(cc grpc.ClientConnInterface) GetWebPagePreviewClient {
	return &getWebPagePreviewClient{cc}
}

func (c *getWebPagePreviewClient) GetWebPagePreview(ctx context.Context, in *RequestWebPMessage, opts ...grpc.CallOption) (*ReplyRequestWebPagePreview, error) {
	out := new(ReplyRequestWebPagePreview)
	err := c.cc.Invoke(ctx, "/pbmessageserver.GetWebPagePreview/GetWebPagePreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetWebPagePreviewServer is the server API for GetWebPagePreview service.
// All implementations must embed UnimplementedGetWebPagePreviewServer
// for forward compatibility
type GetWebPagePreviewServer interface {
	// 获取网页预览信息
	GetWebPagePreview(context.Context, *RequestWebPMessage) (*ReplyRequestWebPagePreview, error)
	mustEmbedUnimplementedGetWebPagePreviewServer()
}

// UnimplementedGetWebPagePreviewServer must be embedded to have forward compatible implementations.
type UnimplementedGetWebPagePreviewServer struct {
}

func (UnimplementedGetWebPagePreviewServer) GetWebPagePreview(context.Context, *RequestWebPMessage) (*ReplyRequestWebPagePreview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebPagePreview not implemented")
}
func (UnimplementedGetWebPagePreviewServer) mustEmbedUnimplementedGetWebPagePreviewServer() {}

// UnsafeGetWebPagePreviewServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetWebPagePreviewServer will
// result in compilation errors.
type UnsafeGetWebPagePreviewServer interface {
	mustEmbedUnimplementedGetWebPagePreviewServer()
}

func RegisterGetWebPagePreviewServer(s grpc.ServiceRegistrar, srv GetWebPagePreviewServer) {
	s.RegisterService(&GetWebPagePreview_ServiceDesc, srv)
}

func _GetWebPagePreview_GetWebPagePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWebPMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetWebPagePreviewServer).GetWebPagePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.GetWebPagePreview/GetWebPagePreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetWebPagePreviewServer).GetWebPagePreview(ctx, req.(*RequestWebPMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// GetWebPagePreview_ServiceDesc is the grpc.ServiceDesc for GetWebPagePreview service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetWebPagePreview_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbmessageserver.GetWebPagePreview",
	HandlerType: (*GetWebPagePreviewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWebPagePreview",
			Handler:    _GetWebPagePreview_GetWebPagePreview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pbmessageserver.proto",
}

// PushServerClient is the client API for PushServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushServerClient interface {
	// 调用推送
	CallPush(ctx context.Context, in *Reqpushusermsg, opts ...grpc.CallOption) (*ReplyPush, error)
}

type pushServerClient struct {
	cc grpc.ClientConnInterface
}

func NewPushServerClient(cc grpc.ClientConnInterface) PushServerClient {
	return &pushServerClient{cc}
}

func (c *pushServerClient) CallPush(ctx context.Context, in *Reqpushusermsg, opts ...grpc.CallOption) (*ReplyPush, error) {
	out := new(ReplyPush)
	err := c.cc.Invoke(ctx, "/pbmessageserver.PushServer/CallPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushServerServer is the server API for PushServer service.
// All implementations must embed UnimplementedPushServerServer
// for forward compatibility
type PushServerServer interface {
	// 调用推送
	CallPush(context.Context, *Reqpushusermsg) (*ReplyPush, error)
	mustEmbedUnimplementedPushServerServer()
}

// UnimplementedPushServerServer must be embedded to have forward compatible implementations.
type UnimplementedPushServerServer struct {
}

func (UnimplementedPushServerServer) CallPush(context.Context, *Reqpushusermsg) (*ReplyPush, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallPush not implemented")
}
func (UnimplementedPushServerServer) mustEmbedUnimplementedPushServerServer() {}

// UnsafePushServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushServerServer will
// result in compilation errors.
type UnsafePushServerServer interface {
	mustEmbedUnimplementedPushServerServer()
}

func RegisterPushServerServer(s grpc.ServiceRegistrar, srv PushServerServer) {
	s.RegisterService(&PushServer_ServiceDesc, srv)
}

func _PushServer_CallPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reqpushusermsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServerServer).CallPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.PushServer/CallPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServerServer).CallPush(ctx, req.(*Reqpushusermsg))
	}
	return interceptor(ctx, in, info, handler)
}

// PushServer_ServiceDesc is the grpc.ServiceDesc for PushServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PushServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbmessageserver.PushServer",
	HandlerType: (*PushServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallPush",
			Handler:    _PushServer_CallPush_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pbmessageserver.proto",
}

// SearchServerClient is the client API for SearchServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchServerClient interface {
	// 消息搜索
	MessageSearch(ctx context.Context, in *ReqMessageSearch, opts ...grpc.CallOption) (*ReplyMessageSearch, error)
	// gifs查询上传
	GifQueryAndUpload(ctx context.Context, in *ReqGifQueryAndUpload, opts ...grpc.CallOption) (*ReplyGifQueryAndUpload, error)
	// gifs搜索Api
	GifSearchApi(ctx context.Context, in *ReqGifSearchApi, opts ...grpc.CallOption) (*ReplyGifSearchApi, error)
	// webpage
	GetWebPage(ctx context.Context, in *ReqGetWebPage, opts ...grpc.CallOption) (*ReplyGetWebPage, error)
	// getWebPagePreview
	GetWebPagePreview(ctx context.Context, in *ReqGetWebPagePreview, opts ...grpc.CallOption) (*ReplyGetWebPagePreview, error)
}

type searchServerClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchServerClient(cc grpc.ClientConnInterface) SearchServerClient {
	return &searchServerClient{cc}
}

func (c *searchServerClient) MessageSearch(ctx context.Context, in *ReqMessageSearch, opts ...grpc.CallOption) (*ReplyMessageSearch, error) {
	out := new(ReplyMessageSearch)
	err := c.cc.Invoke(ctx, "/pbmessageserver.SearchServer/MessageSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServerClient) GifQueryAndUpload(ctx context.Context, in *ReqGifQueryAndUpload, opts ...grpc.CallOption) (*ReplyGifQueryAndUpload, error) {
	out := new(ReplyGifQueryAndUpload)
	err := c.cc.Invoke(ctx, "/pbmessageserver.SearchServer/GifQueryAndUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServerClient) GifSearchApi(ctx context.Context, in *ReqGifSearchApi, opts ...grpc.CallOption) (*ReplyGifSearchApi, error) {
	out := new(ReplyGifSearchApi)
	err := c.cc.Invoke(ctx, "/pbmessageserver.SearchServer/GifSearchApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServerClient) GetWebPage(ctx context.Context, in *ReqGetWebPage, opts ...grpc.CallOption) (*ReplyGetWebPage, error) {
	out := new(ReplyGetWebPage)
	err := c.cc.Invoke(ctx, "/pbmessageserver.SearchServer/GetWebPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServerClient) GetWebPagePreview(ctx context.Context, in *ReqGetWebPagePreview, opts ...grpc.CallOption) (*ReplyGetWebPagePreview, error) {
	out := new(ReplyGetWebPagePreview)
	err := c.cc.Invoke(ctx, "/pbmessageserver.SearchServer/GetWebPagePreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServerServer is the server API for SearchServer service.
// All implementations must embed UnimplementedSearchServerServer
// for forward compatibility
type SearchServerServer interface {
	// 消息搜索
	MessageSearch(context.Context, *ReqMessageSearch) (*ReplyMessageSearch, error)
	// gifs查询上传
	GifQueryAndUpload(context.Context, *ReqGifQueryAndUpload) (*ReplyGifQueryAndUpload, error)
	// gifs搜索Api
	GifSearchApi(context.Context, *ReqGifSearchApi) (*ReplyGifSearchApi, error)
	// webpage
	GetWebPage(context.Context, *ReqGetWebPage) (*ReplyGetWebPage, error)
	// getWebPagePreview
	GetWebPagePreview(context.Context, *ReqGetWebPagePreview) (*ReplyGetWebPagePreview, error)
	mustEmbedUnimplementedSearchServerServer()
}

// UnimplementedSearchServerServer must be embedded to have forward compatible implementations.
type UnimplementedSearchServerServer struct {
}

func (UnimplementedSearchServerServer) MessageSearch(context.Context, *ReqMessageSearch) (*ReplyMessageSearch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSearch not implemented")
}
func (UnimplementedSearchServerServer) GifQueryAndUpload(context.Context, *ReqGifQueryAndUpload) (*ReplyGifQueryAndUpload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GifQueryAndUpload not implemented")
}
func (UnimplementedSearchServerServer) GifSearchApi(context.Context, *ReqGifSearchApi) (*ReplyGifSearchApi, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GifSearchApi not implemented")
}
func (UnimplementedSearchServerServer) GetWebPage(context.Context, *ReqGetWebPage) (*ReplyGetWebPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebPage not implemented")
}
func (UnimplementedSearchServerServer) GetWebPagePreview(context.Context, *ReqGetWebPagePreview) (*ReplyGetWebPagePreview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebPagePreview not implemented")
}
func (UnimplementedSearchServerServer) mustEmbedUnimplementedSearchServerServer() {}

// UnsafeSearchServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServerServer will
// result in compilation errors.
type UnsafeSearchServerServer interface {
	mustEmbedUnimplementedSearchServerServer()
}

func RegisterSearchServerServer(s grpc.ServiceRegistrar, srv SearchServerServer) {
	s.RegisterService(&SearchServer_ServiceDesc, srv)
}

func _SearchServer_MessageSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMessageSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServerServer).MessageSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.SearchServer/MessageSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServerServer).MessageSearch(ctx, req.(*ReqMessageSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchServer_GifQueryAndUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGifQueryAndUpload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServerServer).GifQueryAndUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.SearchServer/GifQueryAndUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServerServer).GifQueryAndUpload(ctx, req.(*ReqGifQueryAndUpload))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchServer_GifSearchApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGifSearchApi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServerServer).GifSearchApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.SearchServer/GifSearchApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServerServer).GifSearchApi(ctx, req.(*ReqGifSearchApi))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchServer_GetWebPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetWebPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServerServer).GetWebPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.SearchServer/GetWebPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServerServer).GetWebPage(ctx, req.(*ReqGetWebPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchServer_GetWebPagePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetWebPagePreview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServerServer).GetWebPagePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbmessageserver.SearchServer/GetWebPagePreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServerServer).GetWebPagePreview(ctx, req.(*ReqGetWebPagePreview))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchServer_ServiceDesc is the grpc.ServiceDesc for SearchServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbmessageserver.SearchServer",
	HandlerType: (*SearchServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MessageSearch",
			Handler:    _SearchServer_MessageSearch_Handler,
		},
		{
			MethodName: "GifQueryAndUpload",
			Handler:    _SearchServer_GifQueryAndUpload_Handler,
		},
		{
			MethodName: "GifSearchApi",
			Handler:    _SearchServer_GifSearchApi_Handler,
		},
		{
			MethodName: "GetWebPage",
			Handler:    _SearchServer_GetWebPage_Handler,
		},
		{
			MethodName: "GetWebPagePreview",
			Handler:    _SearchServer_GetWebPagePreview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pbmessageserver.proto",
}
