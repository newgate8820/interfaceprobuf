// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: digcurrentserver.proto

package digcurrentserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DctCurrServerClient is the client API for DctCurrServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DctCurrServerClient interface {
	// 法币通用协议
	DigCurrencyUniversal(ctx context.Context, in *DigCurrencyUniversalReq, opts ...grpc.CallOption) (*DigCurrencyUniversalResp, error)
}

type dctCurrServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDctCurrServerClient(cc grpc.ClientConnInterface) DctCurrServerClient {
	return &dctCurrServerClient{cc}
}

func (c *dctCurrServerClient) DigCurrencyUniversal(ctx context.Context, in *DigCurrencyUniversalReq, opts ...grpc.CallOption) (*DigCurrencyUniversalResp, error) {
	out := new(DigCurrencyUniversalResp)
	err := c.cc.Invoke(ctx, "/digcurrentserver.DctCurrServer/DigCurrencyUniversal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DctCurrServerServer is the server API for DctCurrServer service.
// All implementations must embed UnimplementedDctCurrServerServer
// for forward compatibility
type DctCurrServerServer interface {
	// 法币通用协议
	DigCurrencyUniversal(context.Context, *DigCurrencyUniversalReq) (*DigCurrencyUniversalResp, error)
	mustEmbedUnimplementedDctCurrServerServer()
}

// UnimplementedDctCurrServerServer must be embedded to have forward compatible implementations.
type UnimplementedDctCurrServerServer struct {
}

func (UnimplementedDctCurrServerServer) DigCurrencyUniversal(context.Context, *DigCurrencyUniversalReq) (*DigCurrencyUniversalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DigCurrencyUniversal not implemented")
}
func (UnimplementedDctCurrServerServer) mustEmbedUnimplementedDctCurrServerServer() {}

// UnsafeDctCurrServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DctCurrServerServer will
// result in compilation errors.
type UnsafeDctCurrServerServer interface {
	mustEmbedUnimplementedDctCurrServerServer()
}

func RegisterDctCurrServerServer(s grpc.ServiceRegistrar, srv DctCurrServerServer) {
	s.RegisterService(&DctCurrServer_ServiceDesc, srv)
}

func _DctCurrServer_DigCurrencyUniversal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DigCurrencyUniversalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DctCurrServerServer).DigCurrencyUniversal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/digcurrentserver.DctCurrServer/DigCurrencyUniversal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DctCurrServerServer).DigCurrencyUniversal(ctx, req.(*DigCurrencyUniversalReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DctCurrServer_ServiceDesc is the grpc.ServiceDesc for DctCurrServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DctCurrServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "digcurrentserver.DctCurrServer",
	HandlerType: (*DctCurrServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DigCurrencyUniversal",
			Handler:    _DctCurrServer_DigCurrencyUniversal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "digcurrentserver.proto",
}
