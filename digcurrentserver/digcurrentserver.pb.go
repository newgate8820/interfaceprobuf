// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: digcurrentserver.proto

/*
Package digcurrentserver is a generated protocol buffer package.

protoc --gogofast_out=plugins=grpc:. *.proto

It is generated from these files:

	digcurrentserver.proto

It has these top-level messages:

	DigCurrencyUniversalReq
	DigCurrencyUniversalResp
*/
package digcurrentserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 法币通用协议请求
type DigCurrencyUniversalReq struct {
	Ip         string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	ImUserId   int64  `protobuf:"varint,2,opt,name=imUserId,proto3" json:"imUserId,omitempty"`
	BusinessId int32  `protobuf:"varint,4,opt,name=businessId,proto3" json:"businessId,omitempty"`
	Data       []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DigCurrencyUniversalReq) Reset()         { *m = DigCurrencyUniversalReq{} }
func (m *DigCurrencyUniversalReq) String() string { return proto.CompactTextString(m) }
func (*DigCurrencyUniversalReq) ProtoMessage()    {}
func (*DigCurrencyUniversalReq) Descriptor() ([]byte, []int) {
	return fileDescriptorDigcurrentserver, []int{0}
}

func (m *DigCurrencyUniversalReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *DigCurrencyUniversalReq) GetImUserId() int64 {
	if m != nil {
		return m.ImUserId
	}
	return 0
}

func (m *DigCurrencyUniversalReq) GetBusinessId() int32 {
	if m != nil {
		return m.BusinessId
	}
	return 0
}

func (m *DigCurrencyUniversalReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 法币通用协议响应
type DigCurrencyUniversalResp struct {
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DigCurrencyUniversalResp) Reset()         { *m = DigCurrencyUniversalResp{} }
func (m *DigCurrencyUniversalResp) String() string { return proto.CompactTextString(m) }
func (*DigCurrencyUniversalResp) ProtoMessage()    {}
func (*DigCurrencyUniversalResp) Descriptor() ([]byte, []int) {
	return fileDescriptorDigcurrentserver, []int{1}
}

func (m *DigCurrencyUniversalResp) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*DigCurrencyUniversalReq)(nil), "digcurrentserver.DigCurrencyUniversalReq")
	proto.RegisterType((*DigCurrencyUniversalResp)(nil), "digcurrentserver.DigCurrencyUniversalResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DctCurrServer service

type DctCurrServerClient interface {
	// 法币通用协议
	DigCurrencyUniversal(ctx context.Context, in *DigCurrencyUniversalReq, opts ...grpc.CallOption) (*DigCurrencyUniversalResp, error)
}

type dctCurrServerClient struct {
	cc *grpc.ClientConn
}

func NewDctCurrServerClient(cc *grpc.ClientConn) DctCurrServerClient {
	return &dctCurrServerClient{cc}
}

func (c *dctCurrServerClient) DigCurrencyUniversal(ctx context.Context, in *DigCurrencyUniversalReq, opts ...grpc.CallOption) (*DigCurrencyUniversalResp, error) {
	out := new(DigCurrencyUniversalResp)
	err := grpc.Invoke(ctx, "/digcurrentserver.DctCurrServer/DigCurrencyUniversal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DctCurrServer service

type DctCurrServerServer interface {
	// 法币通用协议
	DigCurrencyUniversal(context.Context, *DigCurrencyUniversalReq) (*DigCurrencyUniversalResp, error)
}

func RegisterDctCurrServerServer(s *grpc.Server, srv DctCurrServerServer) {
	s.RegisterService(&_DctCurrServer_serviceDesc, srv)
}

func _DctCurrServer_DigCurrencyUniversal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DigCurrencyUniversalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DctCurrServerServer).DigCurrencyUniversal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/digcurrentserver.DctCurrServer/DigCurrencyUniversal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DctCurrServerServer).DigCurrencyUniversal(ctx, req.(*DigCurrencyUniversalReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DctCurrServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "digcurrentserver.DctCurrServer",
	HandlerType: (*DctCurrServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DigCurrencyUniversal",
			Handler:    _DctCurrServer_DigCurrencyUniversal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "digcurrentserver.proto",
}

func (m *DigCurrencyUniversalReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DigCurrencyUniversalReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDigcurrentserver(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.ImUserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDigcurrentserver(dAtA, i, uint64(m.ImUserId))
	}
	if m.BusinessId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDigcurrentserver(dAtA, i, uint64(m.BusinessId))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDigcurrentserver(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *DigCurrencyUniversalResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DigCurrencyUniversalResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDigcurrentserver(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func encodeVarintDigcurrentserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DigCurrencyUniversalReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovDigcurrentserver(uint64(l))
	}
	if m.ImUserId != 0 {
		n += 1 + sovDigcurrentserver(uint64(m.ImUserId))
	}
	if m.BusinessId != 0 {
		n += 1 + sovDigcurrentserver(uint64(m.BusinessId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDigcurrentserver(uint64(l))
	}
	return n
}

func (m *DigCurrencyUniversalResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDigcurrentserver(uint64(l))
	}
	return n
}

func sovDigcurrentserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDigcurrentserver(x uint64) (n int) {
	return sovDigcurrentserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DigCurrencyUniversalReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDigcurrentserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DigCurrencyUniversalReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DigCurrencyUniversalReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigcurrentserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDigcurrentserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImUserId", wireType)
			}
			m.ImUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigcurrentserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImUserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessId", wireType)
			}
			m.BusinessId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigcurrentserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusinessId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigcurrentserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDigcurrentserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDigcurrentserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDigcurrentserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DigCurrencyUniversalResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDigcurrentserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DigCurrencyUniversalResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DigCurrencyUniversalResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDigcurrentserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDigcurrentserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDigcurrentserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDigcurrentserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDigcurrentserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDigcurrentserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDigcurrentserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDigcurrentserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDigcurrentserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDigcurrentserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDigcurrentserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDigcurrentserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDigcurrentserver   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("digcurrentserver.proto", fileDescriptorDigcurrentserver) }

var fileDescriptorDigcurrentserver = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4b, 0xc9, 0x4c, 0x4f,
	0x2e, 0x2d, 0x2a, 0x4a, 0xcd, 0x2b, 0x29, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x12, 0x40, 0x17, 0x57, 0xaa, 0xe4, 0x12, 0x77, 0xc9, 0x4c, 0x77, 0x06, 0x8b,
	0x25, 0x57, 0x86, 0xe6, 0x65, 0x96, 0xa5, 0x16, 0x15, 0x27, 0xe6, 0x04, 0xa5, 0x16, 0x0a, 0xf1,
	0x71, 0x31, 0x65, 0x16, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x31, 0x65, 0x16, 0x08, 0x49,
	0x71, 0x71, 0x64, 0xe6, 0x86, 0x16, 0xa7, 0x16, 0x79, 0xa6, 0x48, 0x30, 0x29, 0x30, 0x6a, 0x30,
	0x07, 0xc1, 0xf9, 0x42, 0x72, 0x5c, 0x5c, 0x49, 0xa5, 0xc5, 0x99, 0x79, 0xa9, 0xc5, 0xc5, 0x9e,
	0x29, 0x12, 0x2c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x48, 0x22, 0x42, 0x42, 0x5c, 0x2c, 0x29, 0x89,
	0x25, 0x89, 0x12, 0x6c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x60, 0xb6, 0x92, 0x1e, 0x97, 0x04, 0x76,
	0xab, 0x8b, 0x0b, 0xe0, 0xea, 0x21, 0xb6, 0x83, 0xd9, 0x46, 0x0d, 0x8c, 0x5c, 0xbc, 0x2e, 0xc9,
	0x25, 0x20, 0x0d, 0xc1, 0x60, 0xc7, 0x0b, 0xe5, 0x73, 0x89, 0x60, 0x33, 0x41, 0x48, 0x53, 0x0f,
	0xc3, 0xff, 0x38, 0x3c, 0x29, 0xa5, 0x45, 0xac, 0xd2, 0xe2, 0x02, 0x25, 0x06, 0x27, 0x9e, 0x13,
	0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x31, 0x89, 0x0d, 0x1c, 0xa8,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xad, 0x88, 0x88, 0xc8, 0x6e, 0x01, 0x00, 0x00,
}
