// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/walletidserver/userid.proto

/*
Package walletidserver is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/walletidserver/userid.proto

It has these top-level messages:

	GetUserIdReq
	GetUserIdRep
*/
package walletidserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ReErrCode int32

const (
	ReErrCode_Success       ReErrCode = 0
	ReErrCode_InternalError ReErrCode = 1
)

var ReErrCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var ReErrCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x ReErrCode) String() string {
	return proto.EnumName(ReErrCode_name, int32(x))
}
func (ReErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorUserid, []int{0} }

type GetUserIdReq struct {
}

func (m *GetUserIdReq) Reset()                    { *m = GetUserIdReq{} }
func (m *GetUserIdReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserIdReq) ProtoMessage()               {}
func (*GetUserIdReq) Descriptor() ([]byte, []int) { return fileDescriptorUserid, []int{0} }

type GetUserIdRep struct {
	UserId    int64     `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ErrorCode ReErrCode `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3,enum=walletidserver.ReErrCode" json:"error_code,omitempty"`
}

func (m *GetUserIdRep) Reset()                    { *m = GetUserIdRep{} }
func (m *GetUserIdRep) String() string            { return proto.CompactTextString(m) }
func (*GetUserIdRep) ProtoMessage()               {}
func (*GetUserIdRep) Descriptor() ([]byte, []int) { return fileDescriptorUserid, []int{1} }

func (m *GetUserIdRep) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUserIdRep) GetErrorCode() ReErrCode {
	if m != nil {
		return m.ErrorCode
	}
	return ReErrCode_Success
}

func init() {
	proto.RegisterType((*GetUserIdReq)(nil), "walletidserver.GetUserIdReq")
	proto.RegisterType((*GetUserIdRep)(nil), "walletidserver.GetUserIdRep")
	proto.RegisterEnum("walletidserver.ReErrCode", ReErrCode_name, ReErrCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IdService service

type IdServiceClient interface {
	GetUserId(ctx context.Context, in *GetUserIdReq, opts ...grpc.CallOption) (*GetUserIdRep, error)
}

type idServiceClient struct {
	cc *grpc.ClientConn
}

func NewIdServiceClient(cc *grpc.ClientConn) IdServiceClient {
	return &idServiceClient{cc}
}

func (c *idServiceClient) GetUserId(ctx context.Context, in *GetUserIdReq, opts ...grpc.CallOption) (*GetUserIdRep, error) {
	out := new(GetUserIdRep)
	err := grpc.Invoke(ctx, "/walletidserver.IdService/GetUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IdService service

type IdServiceServer interface {
	GetUserId(context.Context, *GetUserIdReq) (*GetUserIdRep, error)
}

func RegisterIdServiceServer(s *grpc.Server, srv IdServiceServer) {
	s.RegisterService(&_IdService_serviceDesc, srv)
}

func _IdService_GetUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdServiceServer).GetUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletidserver.IdService/GetUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdServiceServer).GetUserId(ctx, req.(*GetUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "walletidserver.IdService",
	HandlerType: (*IdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserId",
			Handler:    _IdService_GetUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/walletidserver/userid.proto",
}

func (m *GetUserIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetUserIdRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserIdRep) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserid(dAtA, i, uint64(m.UserId))
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserid(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func encodeVarintUserid(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetUserIdReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetUserIdRep) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserid(uint64(m.UserId))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovUserid(uint64(m.ErrorCode))
	}
	return n
}

func sovUserid(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUserid(x uint64) (n int) {
	return sovUserid(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetUserIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUserid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserIdRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserIdRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserIdRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ReErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserid(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserid
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUserid
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUserid
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUserid(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUserid = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserid   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/walletidserver/userid.proto", fileDescriptorUserid)
}

var fileDescriptorUserid = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0xbb, 0x0a, 0x2d, 0x19, 0x6b, 0xa8, 0x7b, 0xb1, 0x8a, 0x84, 0x92, 0x53, 0x51, 0xd8,
	0x40, 0xbd, 0x78, 0x14, 0xa5, 0x48, 0xae, 0x29, 0x7a, 0x2d, 0x9b, 0xdd, 0xa9, 0x2e, 0xc4, 0x6e,
	0x9c, 0xdd, 0xd4, 0x57, 0xf4, 0xe8, 0x23, 0x48, 0x9e, 0x44, 0x36, 0x42, 0x31, 0x1e, 0xbc, 0xcd,
	0xcc, 0xf7, 0x9b, 0x3f, 0xdf, 0xc0, 0xed, 0xb3, 0xf1, 0x95, 0x2c, 0x85, 0x7a, 0x91, 0xde, 0x21,
	0xed, 0x90, 0x84, 0x79, 0xcd, 0xcc, 0xd6, 0x23, 0x6d, 0xa4, 0xc2, 0x9a, 0x6c, 0xd9, 0x6c, 0xb2,
	0x77, 0x59, 0x55, 0xe8, 0x8d, 0xfe, 0x21, 0xb2, 0xc6, 0x21, 0x19, 0x2d, 0x6a, 0xb2, 0xde, 0xf2,
	0xb8, 0x2f, 0xa6, 0x31, 0x8c, 0x1f, 0xd0, 0x3f, 0x3a, 0xa4, 0x5c, 0x17, 0xf8, 0x96, 0xca, 0x5e,
	0x5e, 0xf3, 0x53, 0x18, 0x85, 0xfe, 0xb5, 0xd1, 0x53, 0x36, 0x63, 0xf3, 0xc3, 0x62, 0xd8, 0x74,
	0x1a, 0xbf, 0x01, 0x40, 0x22, 0x4b, 0x6b, 0x65, 0x35, 0x4e, 0x0f, 0x66, 0x6c, 0x1e, 0x2f, 0xce,
	0x44, 0x7f, 0xba, 0x28, 0x70, 0x49, 0x74, 0x6f, 0x35, 0x16, 0x51, 0x07, 0x87, 0xf0, 0xf2, 0x0a,
	0xa2, 0x7d, 0x9d, 0x1f, 0xc1, 0x68, 0xd5, 0x28, 0x85, 0xce, 0x4d, 0x06, 0xfc, 0x04, 0x8e, 0xf3,
	0xe0, 0x65, 0x2b, 0xab, 0x65, 0xc0, 0x27, 0x6c, 0xf1, 0x04, 0x51, 0xae, 0x57, 0x48, 0x3b, 0xa3,
	0x90, 0xe7, 0x10, 0xed, 0x8f, 0xe3, 0x17, 0x7f, 0x97, 0xfd, 0xf6, 0x71, 0xfe, 0x9f, 0x5a, 0xa7,
	0x83, 0xbb, 0xf1, 0x47, 0x9b, 0xb0, 0xcf, 0x36, 0x61, 0x5f, 0x6d, 0xc2, 0xca, 0x61, 0xf7, 0x9c,
	0xeb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0xe4, 0x11, 0x03, 0x60, 0x01, 0x00, 0x00,
}
