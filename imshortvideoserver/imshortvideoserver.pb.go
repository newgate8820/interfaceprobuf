// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/imshortvideoserver/imshortvideoserver.proto

/*
Package imshortvideoserver is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/imshortvideoserver/imshortvideoserver.proto

It has these top-level messages:

	ShortVideoBussinessReq
	ShortVideoBussinessResp
*/
package imshortvideoserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ShortVideoBussinessReq struct {
	UserId      int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId       int64  `protobuf:"varint,2,opt,name=Key_id,json=KeyId,proto3" json:"Key_id,omitempty"`
	ClientIp    string `protobuf:"bytes,3,opt,name=Client_ip,json=ClientIp,proto3" json:"Client_ip,omitempty"`
	BussinessId int32  `protobuf:"varint,4,opt,name=Bussiness_id,json=BussinessId,proto3" json:"Bussiness_id,omitempty"`
	ReqData     string `protobuf:"bytes,5,opt,name=ReqData,proto3" json:"ReqData,omitempty"`
}

func (m *ShortVideoBussinessReq) Reset()         { *m = ShortVideoBussinessReq{} }
func (m *ShortVideoBussinessReq) String() string { return proto.CompactTextString(m) }
func (*ShortVideoBussinessReq) ProtoMessage()    {}
func (*ShortVideoBussinessReq) Descriptor() ([]byte, []int) {
	return fileDescriptorImshortvideoserver, []int{0}
}

func (m *ShortVideoBussinessReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ShortVideoBussinessReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ShortVideoBussinessReq) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *ShortVideoBussinessReq) GetBussinessId() int32 {
	if m != nil {
		return m.BussinessId
	}
	return 0
}

func (m *ShortVideoBussinessReq) GetReqData() string {
	if m != nil {
		return m.ReqData
	}
	return ""
}

type ShortVideoBussinessResp struct {
	ResData string  `protobuf:"bytes,1,opt,name=ResData,proto3" json:"ResData,omitempty"`
	UserIds []int32 `protobuf:"varint,2,rep,packed,name=userIds" json:"userIds,omitempty"`
}

func (m *ShortVideoBussinessResp) Reset()         { *m = ShortVideoBussinessResp{} }
func (m *ShortVideoBussinessResp) String() string { return proto.CompactTextString(m) }
func (*ShortVideoBussinessResp) ProtoMessage()    {}
func (*ShortVideoBussinessResp) Descriptor() ([]byte, []int) {
	return fileDescriptorImshortvideoserver, []int{1}
}

func (m *ShortVideoBussinessResp) GetResData() string {
	if m != nil {
		return m.ResData
	}
	return ""
}

func (m *ShortVideoBussinessResp) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func init() {
	proto.RegisterType((*ShortVideoBussinessReq)(nil), "imshortvideoserver.ShortVideoBussinessReq")
	proto.RegisterType((*ShortVideoBussinessResp)(nil), "imshortvideoserver.ShortVideoBussinessResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServerService service

type ServerServiceClient interface {
	// 通用协议
	ShortVideoBussiness(ctx context.Context, in *ShortVideoBussinessReq, opts ...grpc.CallOption) (*ShortVideoBussinessResp, error)
}

type serverServiceClient struct {
	cc *grpc.ClientConn
}

func NewServerServiceClient(cc *grpc.ClientConn) ServerServiceClient {
	return &serverServiceClient{cc}
}

func (c *serverServiceClient) ShortVideoBussiness(ctx context.Context, in *ShortVideoBussinessReq, opts ...grpc.CallOption) (*ShortVideoBussinessResp, error) {
	out := new(ShortVideoBussinessResp)
	err := grpc.Invoke(ctx, "/imshortvideoserver.ServerService/ShortVideoBussiness", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServerService service

type ServerServiceServer interface {
	// 通用协议
	ShortVideoBussiness(context.Context, *ShortVideoBussinessReq) (*ShortVideoBussinessResp, error)
}

func RegisterServerServiceServer(s *grpc.Server, srv ServerServiceServer) {
	s.RegisterService(&_ServerService_serviceDesc, srv)
}

func _ServerService_ShortVideoBussiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortVideoBussinessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).ShortVideoBussiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imshortvideoserver.ServerService/ShortVideoBussiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).ShortVideoBussiness(ctx, req.(*ShortVideoBussinessReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imshortvideoserver.ServerService",
	HandlerType: (*ServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShortVideoBussiness",
			Handler:    _ServerService_ShortVideoBussiness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/imshortvideoserver/imshortvideoserver.proto",
}

func (m *ShortVideoBussinessReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShortVideoBussinessReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImshortvideoserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImshortvideoserver(dAtA, i, uint64(m.KeyId))
	}
	if len(m.ClientIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImshortvideoserver(dAtA, i, uint64(len(m.ClientIp)))
		i += copy(dAtA[i:], m.ClientIp)
	}
	if m.BussinessId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImshortvideoserver(dAtA, i, uint64(m.BussinessId))
	}
	if len(m.ReqData) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImshortvideoserver(dAtA, i, uint64(len(m.ReqData)))
		i += copy(dAtA[i:], m.ReqData)
	}
	return i, nil
}

func (m *ShortVideoBussinessResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShortVideoBussinessResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ResData) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImshortvideoserver(dAtA, i, uint64(len(m.ResData)))
		i += copy(dAtA[i:], m.ResData)
	}
	if len(m.UserIds) > 0 {
		dAtA2 := make([]byte, len(m.UserIds)*10)
		var j1 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintImshortvideoserver(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func encodeVarintImshortvideoserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ShortVideoBussinessReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImshortvideoserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImshortvideoserver(uint64(m.KeyId))
	}
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovImshortvideoserver(uint64(l))
	}
	if m.BussinessId != 0 {
		n += 1 + sovImshortvideoserver(uint64(m.BussinessId))
	}
	l = len(m.ReqData)
	if l > 0 {
		n += 1 + l + sovImshortvideoserver(uint64(l))
	}
	return n
}

func (m *ShortVideoBussinessResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.ResData)
	if l > 0 {
		n += 1 + l + sovImshortvideoserver(uint64(l))
	}
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovImshortvideoserver(uint64(e))
		}
		n += 1 + sovImshortvideoserver(uint64(l)) + l
	}
	return n
}

func sovImshortvideoserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozImshortvideoserver(x uint64) (n int) {
	return sovImshortvideoserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShortVideoBussinessReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImshortvideoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShortVideoBussinessReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShortVideoBussinessReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImshortvideoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImshortvideoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImshortvideoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImshortvideoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BussinessId", wireType)
			}
			m.BussinessId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImshortvideoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BussinessId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImshortvideoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImshortvideoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImshortvideoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImshortvideoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShortVideoBussinessResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImshortvideoserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShortVideoBussinessResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShortVideoBussinessResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImshortvideoserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImshortvideoserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImshortvideoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImshortvideoserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImshortvideoserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImshortvideoserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImshortvideoserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImshortvideoserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImshortvideoserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImshortvideoserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImshortvideoserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImshortvideoserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthImshortvideoserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowImshortvideoserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipImshortvideoserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthImshortvideoserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImshortvideoserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/imshortvideoserver/imshortvideoserver.proto", fileDescriptorImshortvideoserver)
}

var fileDescriptorImshortvideoserver = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0xbf, 0x69, 0xbf, 0xb4, 0x76, 0xac, 0x9b, 0x11, 0x6d, 0x50, 0x08, 0x31, 0xab, 0xa0,
	0x90, 0x82, 0xbe, 0x41, 0x75, 0x13, 0x8a, 0x20, 0x53, 0x70, 0x5b, 0xf2, 0xe7, 0xd6, 0x0e, 0xb4,
	0xc9, 0x74, 0xee, 0xa4, 0xd0, 0xa5, 0xaf, 0xe2, 0xd3, 0xb8, 0xf4, 0x11, 0x24, 0x4f, 0x22, 0x33,
	0x21, 0xdd, 0x98, 0x85, 0x9b, 0x81, 0xf3, 0xbb, 0xf7, 0xdc, 0xb9, 0x73, 0x86, 0xbe, 0xbc, 0x09,
	0xbd, 0x49, 0xd2, 0x28, 0x5b, 0x27, 0x1a, 0x41, 0xed, 0x41, 0x45, 0x62, 0x3b, 0x15, 0x85, 0x06,
	0xb5, 0x4a, 0x32, 0x90, 0xaa, 0x4c, 0xab, 0xd5, 0x54, 0x6c, 0x71, 0x5d, 0x2a, 0xbd, 0x17, 0x39,
	0x94, 0x4d, 0x57, 0x07, 0x8a, 0xa4, 0x2a, 0x75, 0xc9, 0xd8, 0xef, 0x4a, 0xf0, 0x41, 0xe8, 0xe5,
	0xc2, 0xc0, 0x57, 0x03, 0x67, 0x15, 0xa2, 0x28, 0x00, 0x91, 0xc3, 0x8e, 0x4d, 0xe8, 0xb0, 0x42,
	0x50, 0x4b, 0x91, 0xbb, 0xc4, 0x27, 0xa1, 0xc3, 0x07, 0x46, 0xc6, 0x39, 0xbb, 0xa0, 0x83, 0x39,
	0x1c, 0x0c, 0xef, 0xf9, 0x24, 0xec, 0x73, 0x67, 0x0e, 0x87, 0x38, 0x67, 0xd7, 0x74, 0xf4, 0xb8,
	0x11, 0x50, 0xe8, 0xa5, 0x90, 0x6e, 0xdf, 0x27, 0xe1, 0x88, 0x9f, 0x34, 0x20, 0x96, 0xec, 0x86,
	0x8e, 0x8f, 0xc3, 0x8d, 0xf3, 0xbf, 0x9d, 0x78, 0x7a, 0x64, 0x71, 0xce, 0x5c, 0x3a, 0xe4, 0xb0,
	0x7b, 0x4a, 0x74, 0xe2, 0x3a, 0xd6, 0xdd, 0xca, 0xe0, 0x99, 0x4e, 0x3a, 0x77, 0x44, 0xd9, 0x98,
	0xd0, 0x9a, 0x48, 0x6b, 0xb2, 0xd2, 0x54, 0x9a, 0x7d, 0xd1, 0xed, 0xf9, 0xfd, 0xd0, 0xe1, 0xad,
	0xbc, 0x7f, 0x27, 0xf4, 0x6c, 0x61, 0x9f, 0x6f, 0x4e, 0x91, 0x01, 0x93, 0xf4, 0xbc, 0xe3, 0x02,
	0x76, 0x1b, 0x75, 0x64, 0xd9, 0x9d, 0xd6, 0xd5, 0xdd, 0x9f, 0x7b, 0x51, 0x06, 0xff, 0x66, 0xe3,
	0xcf, 0xda, 0x23, 0x5f, 0xb5, 0x47, 0xbe, 0x6b, 0x8f, 0xa4, 0x03, 0xfb, 0x41, 0x0f, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x52, 0x0c, 0xbd, 0x58, 0xf4, 0x01, 0x00, 0x00,
}
