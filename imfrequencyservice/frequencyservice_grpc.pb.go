// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: frequencyservice.proto

package imfrequencyservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FrequencyServiceClient is the client API for FrequencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrequencyServiceClient interface {
	// 根据crc和keyid判断频率
	CheckFrequencyByCRC(ctx context.Context, in *CheckFrequencyByCRCReq, opts ...grpc.CallOption) (*CheckFrequencyResult, error)
	// 判断sendmessage
	CheckSendMessageFrequency(ctx context.Context, in *CheckSendMessageReq, opts ...grpc.CallOption) (*CheckFrequencyResult, error)
	// 获取监控配置
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResult, error)
	// 上报异常频率
	ReportFrequency(ctx context.Context, in *ReportFrequencyRequest, opts ...grpc.CallOption) (*ReportFrequencyResult, error)
	// 计数api call
	IncAPICall(ctx context.Context, in *IncAPICallRequest, opts ...grpc.CallOption) (*IncAPICallResult, error)
}

type frequencyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrequencyServiceClient(cc grpc.ClientConnInterface) FrequencyServiceClient {
	return &frequencyServiceClient{cc}
}

func (c *frequencyServiceClient) CheckFrequencyByCRC(ctx context.Context, in *CheckFrequencyByCRCReq, opts ...grpc.CallOption) (*CheckFrequencyResult, error) {
	out := new(CheckFrequencyResult)
	err := c.cc.Invoke(ctx, "/imfrequencyservice.FrequencyService/CheckFrequencyByCRC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frequencyServiceClient) CheckSendMessageFrequency(ctx context.Context, in *CheckSendMessageReq, opts ...grpc.CallOption) (*CheckFrequencyResult, error) {
	out := new(CheckFrequencyResult)
	err := c.cc.Invoke(ctx, "/imfrequencyservice.FrequencyService/CheckSendMessageFrequency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frequencyServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResult, error) {
	out := new(GetConfigResult)
	err := c.cc.Invoke(ctx, "/imfrequencyservice.FrequencyService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frequencyServiceClient) ReportFrequency(ctx context.Context, in *ReportFrequencyRequest, opts ...grpc.CallOption) (*ReportFrequencyResult, error) {
	out := new(ReportFrequencyResult)
	err := c.cc.Invoke(ctx, "/imfrequencyservice.FrequencyService/ReportFrequency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frequencyServiceClient) IncAPICall(ctx context.Context, in *IncAPICallRequest, opts ...grpc.CallOption) (*IncAPICallResult, error) {
	out := new(IncAPICallResult)
	err := c.cc.Invoke(ctx, "/imfrequencyservice.FrequencyService/IncAPICall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrequencyServiceServer is the server API for FrequencyService service.
// All implementations must embed UnimplementedFrequencyServiceServer
// for forward compatibility
type FrequencyServiceServer interface {
	// 根据crc和keyid判断频率
	CheckFrequencyByCRC(context.Context, *CheckFrequencyByCRCReq) (*CheckFrequencyResult, error)
	// 判断sendmessage
	CheckSendMessageFrequency(context.Context, *CheckSendMessageReq) (*CheckFrequencyResult, error)
	// 获取监控配置
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResult, error)
	// 上报异常频率
	ReportFrequency(context.Context, *ReportFrequencyRequest) (*ReportFrequencyResult, error)
	// 计数api call
	IncAPICall(context.Context, *IncAPICallRequest) (*IncAPICallResult, error)
	mustEmbedUnimplementedFrequencyServiceServer()
}

// UnimplementedFrequencyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFrequencyServiceServer struct {
}

func (UnimplementedFrequencyServiceServer) CheckFrequencyByCRC(context.Context, *CheckFrequencyByCRCReq) (*CheckFrequencyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFrequencyByCRC not implemented")
}
func (UnimplementedFrequencyServiceServer) CheckSendMessageFrequency(context.Context, *CheckSendMessageReq) (*CheckFrequencyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSendMessageFrequency not implemented")
}
func (UnimplementedFrequencyServiceServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedFrequencyServiceServer) ReportFrequency(context.Context, *ReportFrequencyRequest) (*ReportFrequencyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportFrequency not implemented")
}
func (UnimplementedFrequencyServiceServer) IncAPICall(context.Context, *IncAPICallRequest) (*IncAPICallResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncAPICall not implemented")
}
func (UnimplementedFrequencyServiceServer) mustEmbedUnimplementedFrequencyServiceServer() {}

// UnsafeFrequencyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrequencyServiceServer will
// result in compilation errors.
type UnsafeFrequencyServiceServer interface {
	mustEmbedUnimplementedFrequencyServiceServer()
}

func RegisterFrequencyServiceServer(s grpc.ServiceRegistrar, srv FrequencyServiceServer) {
	s.RegisterService(&FrequencyService_ServiceDesc, srv)
}

func _FrequencyService_CheckFrequencyByCRC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFrequencyByCRCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrequencyServiceServer).CheckFrequencyByCRC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imfrequencyservice.FrequencyService/CheckFrequencyByCRC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrequencyServiceServer).CheckFrequencyByCRC(ctx, req.(*CheckFrequencyByCRCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrequencyService_CheckSendMessageFrequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSendMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrequencyServiceServer).CheckSendMessageFrequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imfrequencyservice.FrequencyService/CheckSendMessageFrequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrequencyServiceServer).CheckSendMessageFrequency(ctx, req.(*CheckSendMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrequencyService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrequencyServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imfrequencyservice.FrequencyService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrequencyServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrequencyService_ReportFrequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportFrequencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrequencyServiceServer).ReportFrequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imfrequencyservice.FrequencyService/ReportFrequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrequencyServiceServer).ReportFrequency(ctx, req.(*ReportFrequencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrequencyService_IncAPICall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncAPICallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrequencyServiceServer).IncAPICall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imfrequencyservice.FrequencyService/IncAPICall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrequencyServiceServer).IncAPICall(ctx, req.(*IncAPICallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FrequencyService_ServiceDesc is the grpc.ServiceDesc for FrequencyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrequencyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imfrequencyservice.FrequencyService",
	HandlerType: (*FrequencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckFrequencyByCRC",
			Handler:    _FrequencyService_CheckFrequencyByCRC_Handler,
		},
		{
			MethodName: "CheckSendMessageFrequency",
			Handler:    _FrequencyService_CheckSendMessageFrequency_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _FrequencyService_GetConfig_Handler,
		},
		{
			MethodName: "ReportFrequency",
			Handler:    _FrequencyService_ReportFrequency_Handler,
		},
		{
			MethodName: "IncAPICall",
			Handler:    _FrequencyService_IncAPICall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frequencyservice.proto",
}
