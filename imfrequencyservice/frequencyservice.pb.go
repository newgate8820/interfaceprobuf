//protoc --gogofast_out=plugins=grpc:. ./gitlab.chatserver.im/interfaceprobuf/imfrequencyservice/frequencyservice.proto
//protoc --gogofast_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: frequencyservice.proto

package imfrequencyservice

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResultType int32

const (
	ResultType_Status_OK       ResultType = 0 //没有异常, 可以正常调用
	ResultType_CrcOverflowType ResultType = 1 //用户调用当前协议频率异常,不要继续调用
	ResultType_KeyOverflowType ResultType = 2 //用户调用协议总次数频率异常, 不要继续调用
	ResultType_IsRepeatRequest ResultType = 3 //是重复的请求
)

// Enum value maps for ResultType.
var (
	ResultType_name = map[int32]string{
		0: "Status_OK",
		1: "CrcOverflowType",
		2: "KeyOverflowType",
		3: "IsRepeatRequest",
	}
	ResultType_value = map[string]int32{
		"Status_OK":       0,
		"CrcOverflowType": 1,
		"KeyOverflowType": 2,
		"IsRepeatRequest": 3,
	}
)

func (x ResultType) Enum() *ResultType {
	p := new(ResultType)
	*p = x
	return p
}

func (x ResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_frequencyservice_proto_enumTypes[0].Descriptor()
}

func (ResultType) Type() protoreflect.EnumType {
	return &file_frequencyservice_proto_enumTypes[0]
}

func (x ResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultType.Descriptor instead.
func (ResultType) EnumDescriptor() ([]byte, []int) {
	return file_frequencyservice_proto_rawDescGZIP(), []int{0}
}

type IncAPICallResult_Code int32

const (
	IncAPICallResult_Unlimited IncAPICallResult_Code = 0
	IncAPICallResult_Limited   IncAPICallResult_Code = 1
)

// Enum value maps for IncAPICallResult_Code.
var (
	IncAPICallResult_Code_name = map[int32]string{
		0: "Unlimited",
		1: "Limited",
	}
	IncAPICallResult_Code_value = map[string]int32{
		"Unlimited": 0,
		"Limited":   1,
	}
)

func (x IncAPICallResult_Code) Enum() *IncAPICallResult_Code {
	p := new(IncAPICallResult_Code)
	*p = x
	return p
}

func (x IncAPICallResult_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IncAPICallResult_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_frequencyservice_proto_enumTypes[1].Descriptor()
}

func (IncAPICallResult_Code) Type() protoreflect.EnumType {
	return &file_frequencyservice_proto_enumTypes[1]
}

func (x IncAPICallResult_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IncAPICallResult_Code.Descriptor instead.
func (IncAPICallResult_Code) EnumDescriptor() ([]byte, []int) {
	return file_frequencyservice_proto_rawDescGZIP(), []int{9, 0}
}

type CheckSendMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId         uint64 `protobuf:"varint,1,opt,name=keyId,proto3" json:"keyId,omitempty"`
	CrcId         uint32 `protobuf:"varint,2,opt,name=crcId,proto3" json:"crcId,omitempty"`
	MessageId     uint64 `protobuf:"varint,3,opt,name=messageId,proto3" json:"messageId,omitempty"`
	UserId        int32  `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	MessageObjBin []byte `protobuf:"bytes,5,opt,name=messageObjBin,proto3" json:"messageObjBin,omitempty"`
	ClientIp      string `protobuf:"bytes,6,opt,name=clientIp,proto3" json:"clientIp,omitempty"`
}

func (x *CheckSendMessageReq) Reset() {
	*x = CheckSendMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frequencyservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSendMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSendMessageReq) ProtoMessage() {}

func (x *CheckSendMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_frequencyservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSendMessageReq.ProtoReflect.Descriptor instead.
func (*CheckSendMessageReq) Descriptor() ([]byte, []int) {
	return file_frequencyservice_proto_rawDescGZIP(), []int{0}
}

func (x *CheckSendMessageReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *CheckSendMessageReq) GetCrcId() uint32 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *CheckSendMessageReq) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *CheckSendMessageReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckSendMessageReq) GetMessageObjBin() []byte {
	if x != nil {
		return x.MessageObjBin
	}
	return nil
}

func (x *CheckSendMessageReq) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

// CheckFrequencyReq
type CheckFrequencyByCRCReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId     uint64 `protobuf:"varint,1,opt,name=keyId,proto3" json:"keyId,omitempty"`
	CrcId     uint32 `protobuf:"varint,2,opt,name=crcId,proto3" json:"crcId,omitempty"`
	MessageId uint64 `protobuf:"varint,3,opt,name=messageId,proto3" json:"messageId,omitempty"`
	UserId    int32  `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	ClientIp  string `protobuf:"bytes,5,opt,name=clientIp,proto3" json:"clientIp,omitempty"`
}

func (x *CheckFrequencyByCRCReq) Reset() {
	*x = CheckFrequencyByCRCReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frequencyservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckFrequencyByCRCReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFrequencyByCRCReq) ProtoMessage() {}

func (x *CheckFrequencyByCRCReq) ProtoReflect() protoreflect.Message {
	mi := &file_frequencyservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFrequencyByCRCReq.ProtoReflect.Descriptor instead.
func (*CheckFrequencyByCRCReq) Descriptor() ([]byte, []int) {
	return file_frequencyservice_proto_rawDescGZIP(), []int{1}
}

func (x *CheckFrequencyByCRCReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *CheckFrequencyByCRCReq) GetCrcId() uint32 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *CheckFrequencyByCRCReq) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *CheckFrequencyByCRCReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckFrequencyByCRCReq) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

// CheckFrequencyResult
type CheckFrequencyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultCode ResultType `protobuf:"varint,1,opt,name=resultCode,proto3,enum=imfrequencyservice.ResultType" json:"resultCode,omitempty"` //返回结果类型
	BlockTime  int64      `protobuf:"varint,2,opt,name=blockTime,proto3" json:"blockTime,omitempty"`                                      // 封禁时间, 如果=0,则没有被封 单位: 秒
}

func (x *CheckFrequencyResult) Reset() {
	*x = CheckFrequencyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frequencyservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckFrequencyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFrequencyResult) ProtoMessage() {}

func (x *CheckFrequencyResult) ProtoReflect() protoreflect.Message {
	mi := &file_frequencyservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFrequencyResult.ProtoReflect.Descriptor instead.
func (*CheckFrequencyResult) Descriptor() ([]byte, []int) {
	return file_frequencyservice_proto_rawDescGZIP(), []int{2}
}

func (x *CheckFrequencyResult) GetResultCode() ResultType {
	if x != nil {
		return x.ResultCode
	}
	return ResultType_Status_OK
}

func (x *CheckFrequencyResult) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

type FrequencyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qps float64 `protobuf:"fixed64,1,opt,name=qps,proto3" json:"qps,omitempty"`
}

func (x *FrequencyConfig) Reset() {
	*x = FrequencyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frequencyservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrequencyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyConfig) ProtoMessage() {}

func (x *FrequencyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_frequencyservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyConfig.ProtoReflect.Descriptor instead.
func (*FrequencyConfig) Descriptor() ([]byte, []int) {
	return file_frequencyservice_proto_rawDescGZIP(), []int{3}
}

func (x *FrequencyConfig) GetQps() float64 {
	if x != nil {
		return x.Qps
	}
	return 0
}

type GetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frequencyservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frequencyservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_frequencyservice_proto_rawDescGZIP(), []int{4}
}

type GetConfigResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config map[uint32]*FrequencyConfig `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // crc对应的配置
}

func (x *GetConfigResult) Reset() {
	*x = GetConfigResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frequencyservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigResult) ProtoMessage() {}

func (x *GetConfigResult) ProtoReflect() protoreflect.Message {
	mi := &file_frequencyservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigResult.ProtoReflect.Descriptor instead.
func (*GetConfigResult) Descriptor() ([]byte, []int) {
	return file_frequencyservice_proto_rawDescGZIP(), []int{5}
}

func (x *GetConfigResult) GetConfig() map[uint32]*FrequencyConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type ReportFrequencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Crc        uint32  `protobuf:"varint,1,opt,name=crc,proto3" json:"crc,omitempty"`                                  // 协议id
	AvgQps     float64 `protobuf:"fixed64,2,opt,name=avg_qps,json=avgQps,proto3" json:"avg_qps,omitempty"`             // 平均每秒频率
	AvgQpm     float64 `protobuf:"fixed64,3,opt,name=avg_qpm,json=avgQpm,proto3" json:"avg_qpm,omitempty"`             // 平均每分钟频率
	AvgQph     float64 `protobuf:"fixed64,4,opt,name=avg_qph,json=avgQph,proto3" json:"avg_qph,omitempty"`             // 平均每小时频率
	InstantQps float64 `protobuf:"fixed64,5,opt,name=instant_qps,json=instantQps,proto3" json:"instant_qps,omitempty"` // 最近60s频率
	UserId     int32   `protobuf:"varint,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`              // 用户id
	KeyId      int64   `protobuf:"varint,7,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`                 // 客户端keyid
}

func (x *ReportFrequencyRequest) Reset() {
	*x = ReportFrequencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frequencyservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportFrequencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportFrequencyRequest) ProtoMessage() {}

func (x *ReportFrequencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frequencyservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportFrequencyRequest.ProtoReflect.Descriptor instead.
func (*ReportFrequencyRequest) Descriptor() ([]byte, []int) {
	return file_frequencyservice_proto_rawDescGZIP(), []int{6}
}

func (x *ReportFrequencyRequest) GetCrc() uint32 {
	if x != nil {
		return x.Crc
	}
	return 0
}

func (x *ReportFrequencyRequest) GetAvgQps() float64 {
	if x != nil {
		return x.AvgQps
	}
	return 0
}

func (x *ReportFrequencyRequest) GetAvgQpm() float64 {
	if x != nil {
		return x.AvgQpm
	}
	return 0
}

func (x *ReportFrequencyRequest) GetAvgQph() float64 {
	if x != nil {
		return x.AvgQph
	}
	return 0
}

func (x *ReportFrequencyRequest) GetInstantQps() float64 {
	if x != nil {
		return x.InstantQps
	}
	return 0
}

func (x *ReportFrequencyRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReportFrequencyRequest) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

type ReportFrequencyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportAfter int64 `protobuf:"varint,1,opt,name=report_after,json=reportAfter,proto3" json:"report_after,omitempty"` // 下次上报时间点控制 unix时间戳
}

func (x *ReportFrequencyResult) Reset() {
	*x = ReportFrequencyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frequencyservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportFrequencyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportFrequencyResult) ProtoMessage() {}

func (x *ReportFrequencyResult) ProtoReflect() protoreflect.Message {
	mi := &file_frequencyservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportFrequencyResult.ProtoReflect.Descriptor instead.
func (*ReportFrequencyResult) Descriptor() ([]byte, []int) {
	return file_frequencyservice_proto_rawDescGZIP(), []int{7}
}

func (x *ReportFrequencyResult) GetReportAfter() int64 {
	if x != nil {
		return x.ReportAfter
	}
	return 0
}

type IncAPICallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Crc    uint32 `protobuf:"varint,2,opt,name=crc,proto3" json:"crc,omitempty"`
}

func (x *IncAPICallRequest) Reset() {
	*x = IncAPICallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frequencyservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncAPICallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncAPICallRequest) ProtoMessage() {}

func (x *IncAPICallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frequencyservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncAPICallRequest.ProtoReflect.Descriptor instead.
func (*IncAPICallRequest) Descriptor() ([]byte, []int) {
	return file_frequencyservice_proto_rawDescGZIP(), []int{8}
}

func (x *IncAPICallRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *IncAPICallRequest) GetCrc() uint32 {
	if x != nil {
		return x.Crc
	}
	return 0
}

type IncAPICallResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code IncAPICallResult_Code `protobuf:"varint,1,opt,name=code,proto3,enum=imfrequencyservice.IncAPICallResult_Code" json:"code,omitempty"`
	Tpm  int32                 `protobuf:"varint,2,opt,name=tpm,proto3" json:"tpm,omitempty"`
	Tph  int32                 `protobuf:"varint,3,opt,name=tph,proto3" json:"tph,omitempty"`
	Tpd  int32                 `protobuf:"varint,4,opt,name=tpd,proto3" json:"tpd,omitempty"`
}

func (x *IncAPICallResult) Reset() {
	*x = IncAPICallResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frequencyservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncAPICallResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncAPICallResult) ProtoMessage() {}

func (x *IncAPICallResult) ProtoReflect() protoreflect.Message {
	mi := &file_frequencyservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncAPICallResult.ProtoReflect.Descriptor instead.
func (*IncAPICallResult) Descriptor() ([]byte, []int) {
	return file_frequencyservice_proto_rawDescGZIP(), []int{9}
}

func (x *IncAPICallResult) GetCode() IncAPICallResult_Code {
	if x != nil {
		return x.Code
	}
	return IncAPICallResult_Unlimited
}

func (x *IncAPICallResult) GetTpm() int32 {
	if x != nil {
		return x.Tpm
	}
	return 0
}

func (x *IncAPICallResult) GetTph() int32 {
	if x != nil {
		return x.Tph
	}
	return 0
}

func (x *IncAPICallResult) GetTpd() int32 {
	if x != nil {
		return x.Tpd
	}
	return 0
}

var File_frequencyservice_proto protoreflect.FileDescriptor

var file_frequencyservice_proto_rawDesc = []byte{
	0x0a, 0x16, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x69, 0x6d, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xb9, 0x01, 0x0a,
	0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x72,
	0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x22, 0x96, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x79, 0x43, 0x52, 0x43,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x72, 0x63,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x70, 0x22, 0x74, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x69, 0x6d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x23, 0x0a, 0x0f, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x71, 0x70, 0x73, 0x22, 0x12, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xba, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x5e, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x69, 0x6d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x01,
	0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x72, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x72, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x76,
	0x67, 0x5f, 0x71, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x76, 0x67,
	0x51, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x76, 0x67, 0x5f, 0x71, 0x70, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x76, 0x67, 0x51, 0x70, 0x6d, 0x12, 0x17, 0x0a, 0x07,
	0x61, 0x76, 0x67, 0x5f, 0x71, 0x70, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x76, 0x67, 0x51, 0x70, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x5f, 0x71, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x51, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x22, 0x3e, 0x0a, 0x11, 0x49, 0x6e, 0x63, 0x41, 0x50, 0x49, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63,
	0x72, 0x63, 0x22, 0xab, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x63, 0x41, 0x50, 0x49, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x69, 0x6d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x63, 0x41, 0x50,
	0x49, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x70, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x70, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x70, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x70, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x70,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x70, 0x64, 0x22, 0x22, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x01,
	0x2a, 0x5a, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x72, 0x63, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x73, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x03, 0x32, 0x94, 0x04, 0x0a,
	0x10, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x6d, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x42, 0x79, 0x43, 0x52, 0x43, 0x12, 0x2a, 0x2e, 0x69, 0x6d, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x79, 0x43, 0x52,
	0x43, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x69, 0x6d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x70, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x27, 0x2e,
	0x69, 0x6d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x69, 0x6d, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x24, 0x2e, 0x69, 0x6d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x2a, 0x2e, 0x69, 0x6d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x69, 0x6d,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0a, 0x49, 0x6e, 0x63, 0x41,
	0x50, 0x49, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x25, 0x2e, 0x69, 0x6d, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x63, 0x41,
	0x50, 0x49, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x69, 0x6d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x49, 0x6e, 0x63, 0x41, 0x50, 0x49, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x42, 0x24, 0x5a, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_frequencyservice_proto_rawDescOnce sync.Once
	file_frequencyservice_proto_rawDescData = file_frequencyservice_proto_rawDesc
)

func file_frequencyservice_proto_rawDescGZIP() []byte {
	file_frequencyservice_proto_rawDescOnce.Do(func() {
		file_frequencyservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_frequencyservice_proto_rawDescData)
	})
	return file_frequencyservice_proto_rawDescData
}

var file_frequencyservice_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_frequencyservice_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_frequencyservice_proto_goTypes = []interface{}{
	(ResultType)(0),                // 0: imfrequencyservice.ResultType
	(IncAPICallResult_Code)(0),     // 1: imfrequencyservice.IncAPICallResult.Code
	(*CheckSendMessageReq)(nil),    // 2: imfrequencyservice.CheckSendMessageReq
	(*CheckFrequencyByCRCReq)(nil), // 3: imfrequencyservice.CheckFrequencyByCRCReq
	(*CheckFrequencyResult)(nil),   // 4: imfrequencyservice.CheckFrequencyResult
	(*FrequencyConfig)(nil),        // 5: imfrequencyservice.FrequencyConfig
	(*GetConfigRequest)(nil),       // 6: imfrequencyservice.GetConfigRequest
	(*GetConfigResult)(nil),        // 7: imfrequencyservice.GetConfigResult
	(*ReportFrequencyRequest)(nil), // 8: imfrequencyservice.ReportFrequencyRequest
	(*ReportFrequencyResult)(nil),  // 9: imfrequencyservice.ReportFrequencyResult
	(*IncAPICallRequest)(nil),      // 10: imfrequencyservice.IncAPICallRequest
	(*IncAPICallResult)(nil),       // 11: imfrequencyservice.IncAPICallResult
	nil,                            // 12: imfrequencyservice.GetConfigResult.ConfigEntry
}
var file_frequencyservice_proto_depIdxs = []int32{
	0,  // 0: imfrequencyservice.CheckFrequencyResult.resultCode:type_name -> imfrequencyservice.ResultType
	12, // 1: imfrequencyservice.GetConfigResult.config:type_name -> imfrequencyservice.GetConfigResult.ConfigEntry
	1,  // 2: imfrequencyservice.IncAPICallResult.code:type_name -> imfrequencyservice.IncAPICallResult.Code
	5,  // 3: imfrequencyservice.GetConfigResult.ConfigEntry.value:type_name -> imfrequencyservice.FrequencyConfig
	3,  // 4: imfrequencyservice.FrequencyService.CheckFrequencyByCRC:input_type -> imfrequencyservice.CheckFrequencyByCRCReq
	2,  // 5: imfrequencyservice.FrequencyService.CheckSendMessageFrequency:input_type -> imfrequencyservice.CheckSendMessageReq
	6,  // 6: imfrequencyservice.FrequencyService.GetConfig:input_type -> imfrequencyservice.GetConfigRequest
	8,  // 7: imfrequencyservice.FrequencyService.ReportFrequency:input_type -> imfrequencyservice.ReportFrequencyRequest
	10, // 8: imfrequencyservice.FrequencyService.IncAPICall:input_type -> imfrequencyservice.IncAPICallRequest
	4,  // 9: imfrequencyservice.FrequencyService.CheckFrequencyByCRC:output_type -> imfrequencyservice.CheckFrequencyResult
	4,  // 10: imfrequencyservice.FrequencyService.CheckSendMessageFrequency:output_type -> imfrequencyservice.CheckFrequencyResult
	7,  // 11: imfrequencyservice.FrequencyService.GetConfig:output_type -> imfrequencyservice.GetConfigResult
	9,  // 12: imfrequencyservice.FrequencyService.ReportFrequency:output_type -> imfrequencyservice.ReportFrequencyResult
	11, // 13: imfrequencyservice.FrequencyService.IncAPICall:output_type -> imfrequencyservice.IncAPICallResult
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_frequencyservice_proto_init() }
func file_frequencyservice_proto_init() {
	if File_frequencyservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_frequencyservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSendMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frequencyservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckFrequencyByCRCReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frequencyservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckFrequencyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frequencyservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrequencyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frequencyservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frequencyservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frequencyservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportFrequencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frequencyservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportFrequencyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frequencyservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncAPICallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frequencyservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncAPICallResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frequencyservice_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_frequencyservice_proto_goTypes,
		DependencyIndexes: file_frequencyservice_proto_depIdxs,
		EnumInfos:         file_frequencyservice_proto_enumTypes,
		MessageInfos:      file_frequencyservice_proto_msgTypes,
	}.Build()
	File_frequencyservice_proto = out.File
	file_frequencyservice_proto_rawDesc = nil
	file_frequencyservice_proto_goTypes = nil
	file_frequencyservice_proto_depIdxs = nil
}
