// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: imfrequencyservice/frequencyservice.proto

/*
Package imfrequencyservice is a generated protocol buffer package.

It is generated from these files:

	imfrequencyservice/frequencyservice.proto

It has these top-level messages:

	CheckSendMessageReq
	CheckFrequencyByCRCReq
	CheckFrequencyResult
	FrequencyConfig
	GetConfigRequest
	GetConfigResult
	ReportFrequencyRequest
	ReportFrequencyResult
	IncAPICallRequest
	IncAPICallResult
*/
package imfrequencyservice

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ResultType int32

const (
	ResultType_Status_OK       ResultType = 0
	ResultType_CrcOverflowType ResultType = 1
	ResultType_KeyOverflowType ResultType = 2
	ResultType_IsRepeatRequest ResultType = 3
)

var ResultType_name = map[int32]string{
	0: "Status_OK",
	1: "CrcOverflowType",
	2: "KeyOverflowType",
	3: "IsRepeatRequest",
}
var ResultType_value = map[string]int32{
	"Status_OK":       0,
	"CrcOverflowType": 1,
	"KeyOverflowType": 2,
	"IsRepeatRequest": 3,
}

func (x ResultType) String() string {
	return proto.EnumName(ResultType_name, int32(x))
}
func (ResultType) EnumDescriptor() ([]byte, []int) { return fileDescriptorFrequencyservice, []int{0} }

type IncAPICallResult_Code int32

const (
	IncAPICallResult_Unlimited IncAPICallResult_Code = 0
	IncAPICallResult_Limited   IncAPICallResult_Code = 1
)

var IncAPICallResult_Code_name = map[int32]string{
	0: "Unlimited",
	1: "Limited",
}
var IncAPICallResult_Code_value = map[string]int32{
	"Unlimited": 0,
	"Limited":   1,
}

func (x IncAPICallResult_Code) String() string {
	return proto.EnumName(IncAPICallResult_Code_name, int32(x))
}
func (IncAPICallResult_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorFrequencyservice, []int{9, 0}
}

type CheckSendMessageReq struct {
	KeyId         uint64 `protobuf:"varint,1,opt,name=keyId,proto3" json:"keyId,omitempty"`
	CrcId         uint32 `protobuf:"varint,2,opt,name=crcId,proto3" json:"crcId,omitempty"`
	MessageId     uint64 `protobuf:"varint,3,opt,name=messageId,proto3" json:"messageId,omitempty"`
	UserId        int32  `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	MessageObjBin []byte `protobuf:"bytes,5,opt,name=messageObjBin,proto3" json:"messageObjBin,omitempty"`
	ClientIp      string `protobuf:"bytes,6,opt,name=clientIp,proto3" json:"clientIp,omitempty"`
}

func (m *CheckSendMessageReq) Reset()         { *m = CheckSendMessageReq{} }
func (m *CheckSendMessageReq) String() string { return proto.CompactTextString(m) }
func (*CheckSendMessageReq) ProtoMessage()    {}
func (*CheckSendMessageReq) Descriptor() ([]byte, []int) {
	return fileDescriptorFrequencyservice, []int{0}
}

func (m *CheckSendMessageReq) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *CheckSendMessageReq) GetCrcId() uint32 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *CheckSendMessageReq) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *CheckSendMessageReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckSendMessageReq) GetMessageObjBin() []byte {
	if m != nil {
		return m.MessageObjBin
	}
	return nil
}

func (m *CheckSendMessageReq) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

// CheckFrequencyReq
type CheckFrequencyByCRCReq struct {
	KeyId     uint64 `protobuf:"varint,1,opt,name=keyId,proto3" json:"keyId,omitempty"`
	CrcId     uint32 `protobuf:"varint,2,opt,name=crcId,proto3" json:"crcId,omitempty"`
	MessageId uint64 `protobuf:"varint,3,opt,name=messageId,proto3" json:"messageId,omitempty"`
	UserId    int32  `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	ClientIp  string `protobuf:"bytes,5,opt,name=clientIp,proto3" json:"clientIp,omitempty"`
}

func (m *CheckFrequencyByCRCReq) Reset()         { *m = CheckFrequencyByCRCReq{} }
func (m *CheckFrequencyByCRCReq) String() string { return proto.CompactTextString(m) }
func (*CheckFrequencyByCRCReq) ProtoMessage()    {}
func (*CheckFrequencyByCRCReq) Descriptor() ([]byte, []int) {
	return fileDescriptorFrequencyservice, []int{1}
}

func (m *CheckFrequencyByCRCReq) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *CheckFrequencyByCRCReq) GetCrcId() uint32 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *CheckFrequencyByCRCReq) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *CheckFrequencyByCRCReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckFrequencyByCRCReq) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

// CheckFrequencyResult
type CheckFrequencyResult struct {
	ResultCode ResultType `protobuf:"varint,1,opt,name=resultCode,proto3,enum=imfrequencyservice.ResultType" json:"resultCode,omitempty"`
	BlockTime  int64      `protobuf:"varint,2,opt,name=blockTime,proto3" json:"blockTime,omitempty"`
}

func (m *CheckFrequencyResult) Reset()         { *m = CheckFrequencyResult{} }
func (m *CheckFrequencyResult) String() string { return proto.CompactTextString(m) }
func (*CheckFrequencyResult) ProtoMessage()    {}
func (*CheckFrequencyResult) Descriptor() ([]byte, []int) {
	return fileDescriptorFrequencyservice, []int{2}
}

func (m *CheckFrequencyResult) GetResultCode() ResultType {
	if m != nil {
		return m.ResultCode
	}
	return ResultType_Status_OK
}

func (m *CheckFrequencyResult) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

type FrequencyConfig struct {
	Qps float64 `protobuf:"fixed64,1,opt,name=qps,proto3" json:"qps,omitempty"`
}

func (m *FrequencyConfig) Reset()                    { *m = FrequencyConfig{} }
func (m *FrequencyConfig) String() string            { return proto.CompactTextString(m) }
func (*FrequencyConfig) ProtoMessage()               {}
func (*FrequencyConfig) Descriptor() ([]byte, []int) { return fileDescriptorFrequencyservice, []int{3} }

func (m *FrequencyConfig) GetQps() float64 {
	if m != nil {
		return m.Qps
	}
	return 0
}

type GetConfigRequest struct {
}

func (m *GetConfigRequest) Reset()         { *m = GetConfigRequest{} }
func (m *GetConfigRequest) String() string { return proto.CompactTextString(m) }
func (*GetConfigRequest) ProtoMessage()    {}
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorFrequencyservice, []int{4}
}

type GetConfigResult struct {
	Config map[uint32]*FrequencyConfig `protobuf:"bytes,1,rep,name=config" json:"config,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetConfigResult) Reset()                    { *m = GetConfigResult{} }
func (m *GetConfigResult) String() string            { return proto.CompactTextString(m) }
func (*GetConfigResult) ProtoMessage()               {}
func (*GetConfigResult) Descriptor() ([]byte, []int) { return fileDescriptorFrequencyservice, []int{5} }

func (m *GetConfigResult) GetConfig() map[uint32]*FrequencyConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type ReportFrequencyRequest struct {
	Crc        uint32  `protobuf:"varint,1,opt,name=crc,proto3" json:"crc,omitempty"`
	AvgQps     float64 `protobuf:"fixed64,2,opt,name=avg_qps,json=avgQps,proto3" json:"avg_qps,omitempty"`
	AvgQpm     float64 `protobuf:"fixed64,3,opt,name=avg_qpm,json=avgQpm,proto3" json:"avg_qpm,omitempty"`
	AvgQph     float64 `protobuf:"fixed64,4,opt,name=avg_qph,json=avgQph,proto3" json:"avg_qph,omitempty"`
	InstantQps float64 `protobuf:"fixed64,5,opt,name=instant_qps,json=instantQps,proto3" json:"instant_qps,omitempty"`
	UserId     int32   `protobuf:"varint,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId      int64   `protobuf:"varint,7,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (m *ReportFrequencyRequest) Reset()         { *m = ReportFrequencyRequest{} }
func (m *ReportFrequencyRequest) String() string { return proto.CompactTextString(m) }
func (*ReportFrequencyRequest) ProtoMessage()    {}
func (*ReportFrequencyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorFrequencyservice, []int{6}
}

func (m *ReportFrequencyRequest) GetCrc() uint32 {
	if m != nil {
		return m.Crc
	}
	return 0
}

func (m *ReportFrequencyRequest) GetAvgQps() float64 {
	if m != nil {
		return m.AvgQps
	}
	return 0
}

func (m *ReportFrequencyRequest) GetAvgQpm() float64 {
	if m != nil {
		return m.AvgQpm
	}
	return 0
}

func (m *ReportFrequencyRequest) GetAvgQph() float64 {
	if m != nil {
		return m.AvgQph
	}
	return 0
}

func (m *ReportFrequencyRequest) GetInstantQps() float64 {
	if m != nil {
		return m.InstantQps
	}
	return 0
}

func (m *ReportFrequencyRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReportFrequencyRequest) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

type ReportFrequencyResult struct {
	ReportAfter int64 `protobuf:"varint,1,opt,name=report_after,json=reportAfter,proto3" json:"report_after,omitempty"`
}

func (m *ReportFrequencyResult) Reset()         { *m = ReportFrequencyResult{} }
func (m *ReportFrequencyResult) String() string { return proto.CompactTextString(m) }
func (*ReportFrequencyResult) ProtoMessage()    {}
func (*ReportFrequencyResult) Descriptor() ([]byte, []int) {
	return fileDescriptorFrequencyservice, []int{7}
}

func (m *ReportFrequencyResult) GetReportAfter() int64 {
	if m != nil {
		return m.ReportAfter
	}
	return 0
}

type IncAPICallRequest struct {
	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Crc    uint32 `protobuf:"varint,2,opt,name=crc,proto3" json:"crc,omitempty"`
}

func (m *IncAPICallRequest) Reset()         { *m = IncAPICallRequest{} }
func (m *IncAPICallRequest) String() string { return proto.CompactTextString(m) }
func (*IncAPICallRequest) ProtoMessage()    {}
func (*IncAPICallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorFrequencyservice, []int{8}
}

func (m *IncAPICallRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *IncAPICallRequest) GetCrc() uint32 {
	if m != nil {
		return m.Crc
	}
	return 0
}

type IncAPICallResult struct {
	Code IncAPICallResult_Code `protobuf:"varint,1,opt,name=code,proto3,enum=imfrequencyservice.IncAPICallResult_Code" json:"code,omitempty"`
	Tpm  int32                 `protobuf:"varint,2,opt,name=tpm,proto3" json:"tpm,omitempty"`
	Tph  int32                 `protobuf:"varint,3,opt,name=tph,proto3" json:"tph,omitempty"`
	Tpd  int32                 `protobuf:"varint,4,opt,name=tpd,proto3" json:"tpd,omitempty"`
}

func (m *IncAPICallResult) Reset()         { *m = IncAPICallResult{} }
func (m *IncAPICallResult) String() string { return proto.CompactTextString(m) }
func (*IncAPICallResult) ProtoMessage()    {}
func (*IncAPICallResult) Descriptor() ([]byte, []int) {
	return fileDescriptorFrequencyservice, []int{9}
}

func (m *IncAPICallResult) GetCode() IncAPICallResult_Code {
	if m != nil {
		return m.Code
	}
	return IncAPICallResult_Unlimited
}

func (m *IncAPICallResult) GetTpm() int32 {
	if m != nil {
		return m.Tpm
	}
	return 0
}

func (m *IncAPICallResult) GetTph() int32 {
	if m != nil {
		return m.Tph
	}
	return 0
}

func (m *IncAPICallResult) GetTpd() int32 {
	if m != nil {
		return m.Tpd
	}
	return 0
}

func init() {
	proto.RegisterType((*CheckSendMessageReq)(nil), "imfrequencyservice.CheckSendMessageReq")
	proto.RegisterType((*CheckFrequencyByCRCReq)(nil), "imfrequencyservice.CheckFrequencyByCRCReq")
	proto.RegisterType((*CheckFrequencyResult)(nil), "imfrequencyservice.CheckFrequencyResult")
	proto.RegisterType((*FrequencyConfig)(nil), "imfrequencyservice.FrequencyConfig")
	proto.RegisterType((*GetConfigRequest)(nil), "imfrequencyservice.GetConfigRequest")
	proto.RegisterType((*GetConfigResult)(nil), "imfrequencyservice.GetConfigResult")
	proto.RegisterType((*ReportFrequencyRequest)(nil), "imfrequencyservice.ReportFrequencyRequest")
	proto.RegisterType((*ReportFrequencyResult)(nil), "imfrequencyservice.ReportFrequencyResult")
	proto.RegisterType((*IncAPICallRequest)(nil), "imfrequencyservice.IncAPICallRequest")
	proto.RegisterType((*IncAPICallResult)(nil), "imfrequencyservice.IncAPICallResult")
	proto.RegisterEnum("imfrequencyservice.ResultType", ResultType_name, ResultType_value)
	proto.RegisterEnum("imfrequencyservice.IncAPICallResult_Code", IncAPICallResult_Code_name, IncAPICallResult_Code_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FrequencyService service

type FrequencyServiceClient interface {
	// 根据crc和keyid判断频率
	CheckFrequencyByCRC(ctx context.Context, in *CheckFrequencyByCRCReq, opts ...grpc.CallOption) (*CheckFrequencyResult, error)
	// 判断sendmessage
	CheckSendMessageFrequency(ctx context.Context, in *CheckSendMessageReq, opts ...grpc.CallOption) (*CheckFrequencyResult, error)
	// 获取监控配置
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResult, error)
	// 上报异常频率
	ReportFrequency(ctx context.Context, in *ReportFrequencyRequest, opts ...grpc.CallOption) (*ReportFrequencyResult, error)
	// 计数api call
	IncAPICall(ctx context.Context, in *IncAPICallRequest, opts ...grpc.CallOption) (*IncAPICallResult, error)
}

type frequencyServiceClient struct {
	cc *grpc.ClientConn
}

func NewFrequencyServiceClient(cc *grpc.ClientConn) FrequencyServiceClient {
	return &frequencyServiceClient{cc}
}

func (c *frequencyServiceClient) CheckFrequencyByCRC(ctx context.Context, in *CheckFrequencyByCRCReq, opts ...grpc.CallOption) (*CheckFrequencyResult, error) {
	out := new(CheckFrequencyResult)
	err := grpc.Invoke(ctx, "/imfrequencyservice.FrequencyService/CheckFrequencyByCRC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frequencyServiceClient) CheckSendMessageFrequency(ctx context.Context, in *CheckSendMessageReq, opts ...grpc.CallOption) (*CheckFrequencyResult, error) {
	out := new(CheckFrequencyResult)
	err := grpc.Invoke(ctx, "/imfrequencyservice.FrequencyService/CheckSendMessageFrequency", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frequencyServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResult, error) {
	out := new(GetConfigResult)
	err := grpc.Invoke(ctx, "/imfrequencyservice.FrequencyService/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frequencyServiceClient) ReportFrequency(ctx context.Context, in *ReportFrequencyRequest, opts ...grpc.CallOption) (*ReportFrequencyResult, error) {
	out := new(ReportFrequencyResult)
	err := grpc.Invoke(ctx, "/imfrequencyservice.FrequencyService/ReportFrequency", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frequencyServiceClient) IncAPICall(ctx context.Context, in *IncAPICallRequest, opts ...grpc.CallOption) (*IncAPICallResult, error) {
	out := new(IncAPICallResult)
	err := grpc.Invoke(ctx, "/imfrequencyservice.FrequencyService/IncAPICall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FrequencyService service

type FrequencyServiceServer interface {
	// 根据crc和keyid判断频率
	CheckFrequencyByCRC(context.Context, *CheckFrequencyByCRCReq) (*CheckFrequencyResult, error)
	// 判断sendmessage
	CheckSendMessageFrequency(context.Context, *CheckSendMessageReq) (*CheckFrequencyResult, error)
	// 获取监控配置
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResult, error)
	// 上报异常频率
	ReportFrequency(context.Context, *ReportFrequencyRequest) (*ReportFrequencyResult, error)
	// 计数api call
	IncAPICall(context.Context, *IncAPICallRequest) (*IncAPICallResult, error)
}

func RegisterFrequencyServiceServer(s *grpc.Server, srv FrequencyServiceServer) {
	s.RegisterService(&_FrequencyService_serviceDesc, srv)
}

func _FrequencyService_CheckFrequencyByCRC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFrequencyByCRCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrequencyServiceServer).CheckFrequencyByCRC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imfrequencyservice.FrequencyService/CheckFrequencyByCRC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrequencyServiceServer).CheckFrequencyByCRC(ctx, req.(*CheckFrequencyByCRCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrequencyService_CheckSendMessageFrequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSendMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrequencyServiceServer).CheckSendMessageFrequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imfrequencyservice.FrequencyService/CheckSendMessageFrequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrequencyServiceServer).CheckSendMessageFrequency(ctx, req.(*CheckSendMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrequencyService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrequencyServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imfrequencyservice.FrequencyService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrequencyServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrequencyService_ReportFrequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportFrequencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrequencyServiceServer).ReportFrequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imfrequencyservice.FrequencyService/ReportFrequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrequencyServiceServer).ReportFrequency(ctx, req.(*ReportFrequencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrequencyService_IncAPICall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncAPICallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrequencyServiceServer).IncAPICall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imfrequencyservice.FrequencyService/IncAPICall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrequencyServiceServer).IncAPICall(ctx, req.(*IncAPICallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FrequencyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imfrequencyservice.FrequencyService",
	HandlerType: (*FrequencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckFrequencyByCRC",
			Handler:    _FrequencyService_CheckFrequencyByCRC_Handler,
		},
		{
			MethodName: "CheckSendMessageFrequency",
			Handler:    _FrequencyService_CheckSendMessageFrequency_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _FrequencyService_GetConfig_Handler,
		},
		{
			MethodName: "ReportFrequency",
			Handler:    _FrequencyService_ReportFrequency_Handler,
		},
		{
			MethodName: "IncAPICall",
			Handler:    _FrequencyService_IncAPICall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imfrequencyservice/frequencyservice.proto",
}

func (m *CheckSendMessageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckSendMessageReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.KeyId))
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.MessageId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.MessageObjBin) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(len(m.MessageObjBin)))
		i += copy(dAtA[i:], m.MessageObjBin)
	}
	if len(m.ClientIp) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(len(m.ClientIp)))
		i += copy(dAtA[i:], m.ClientIp)
	}
	return i, nil
}

func (m *CheckFrequencyByCRCReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckFrequencyByCRCReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.KeyId))
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.MessageId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.ClientIp) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(len(m.ClientIp)))
		i += copy(dAtA[i:], m.ClientIp)
	}
	return i, nil
}

func (m *CheckFrequencyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckFrequencyResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResultCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.ResultCode))
	}
	if m.BlockTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.BlockTime))
	}
	return i, nil
}

func (m *FrequencyConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrequencyConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Qps != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Qps))))
		i += 8
	}
	return i, nil
}

func (m *GetConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetConfigResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConfigResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Config) > 0 {
		for k, _ := range m.Config {
			dAtA[i] = 0xa
			i++
			v := m.Config[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovFrequencyservice(uint64(msgSize))
			}
			mapSize := 1 + sovFrequencyservice(uint64(k)) + msgSize
			i = encodeVarintFrequencyservice(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintFrequencyservice(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintFrequencyservice(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *ReportFrequencyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportFrequencyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Crc != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.Crc))
	}
	if m.AvgQps != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AvgQps))))
		i += 8
	}
	if m.AvgQpm != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AvgQpm))))
		i += 8
	}
	if m.AvgQph != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AvgQph))))
		i += 8
	}
	if m.InstantQps != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.InstantQps))))
		i += 8
	}
	if m.UserId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.KeyId))
	}
	return i, nil
}

func (m *ReportFrequencyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportFrequencyResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReportAfter != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.ReportAfter))
	}
	return i, nil
}

func (m *IncAPICallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncAPICallRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.UserId))
	}
	if m.Crc != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.Crc))
	}
	return i, nil
}

func (m *IncAPICallResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncAPICallResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.Code))
	}
	if m.Tpm != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.Tpm))
	}
	if m.Tph != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.Tph))
	}
	if m.Tpd != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFrequencyservice(dAtA, i, uint64(m.Tpd))
	}
	return i, nil
}

func encodeVarintFrequencyservice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CheckSendMessageReq) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovFrequencyservice(uint64(m.KeyId))
	}
	if m.CrcId != 0 {
		n += 1 + sovFrequencyservice(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovFrequencyservice(uint64(m.MessageId))
	}
	if m.UserId != 0 {
		n += 1 + sovFrequencyservice(uint64(m.UserId))
	}
	l = len(m.MessageObjBin)
	if l > 0 {
		n += 1 + l + sovFrequencyservice(uint64(l))
	}
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovFrequencyservice(uint64(l))
	}
	return n
}

func (m *CheckFrequencyByCRCReq) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovFrequencyservice(uint64(m.KeyId))
	}
	if m.CrcId != 0 {
		n += 1 + sovFrequencyservice(uint64(m.CrcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovFrequencyservice(uint64(m.MessageId))
	}
	if m.UserId != 0 {
		n += 1 + sovFrequencyservice(uint64(m.UserId))
	}
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovFrequencyservice(uint64(l))
	}
	return n
}

func (m *CheckFrequencyResult) Size() (n int) {
	var l int
	_ = l
	if m.ResultCode != 0 {
		n += 1 + sovFrequencyservice(uint64(m.ResultCode))
	}
	if m.BlockTime != 0 {
		n += 1 + sovFrequencyservice(uint64(m.BlockTime))
	}
	return n
}

func (m *FrequencyConfig) Size() (n int) {
	var l int
	_ = l
	if m.Qps != 0 {
		n += 9
	}
	return n
}

func (m *GetConfigRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetConfigResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Config) > 0 {
		for k, v := range m.Config {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFrequencyservice(uint64(l))
			}
			mapEntrySize := 1 + sovFrequencyservice(uint64(k)) + l
			n += mapEntrySize + 1 + sovFrequencyservice(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ReportFrequencyRequest) Size() (n int) {
	var l int
	_ = l
	if m.Crc != 0 {
		n += 1 + sovFrequencyservice(uint64(m.Crc))
	}
	if m.AvgQps != 0 {
		n += 9
	}
	if m.AvgQpm != 0 {
		n += 9
	}
	if m.AvgQph != 0 {
		n += 9
	}
	if m.InstantQps != 0 {
		n += 9
	}
	if m.UserId != 0 {
		n += 1 + sovFrequencyservice(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovFrequencyservice(uint64(m.KeyId))
	}
	return n
}

func (m *ReportFrequencyResult) Size() (n int) {
	var l int
	_ = l
	if m.ReportAfter != 0 {
		n += 1 + sovFrequencyservice(uint64(m.ReportAfter))
	}
	return n
}

func (m *IncAPICallRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovFrequencyservice(uint64(m.UserId))
	}
	if m.Crc != 0 {
		n += 1 + sovFrequencyservice(uint64(m.Crc))
	}
	return n
}

func (m *IncAPICallResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFrequencyservice(uint64(m.Code))
	}
	if m.Tpm != 0 {
		n += 1 + sovFrequencyservice(uint64(m.Tpm))
	}
	if m.Tph != 0 {
		n += 1 + sovFrequencyservice(uint64(m.Tph))
	}
	if m.Tpd != 0 {
		n += 1 + sovFrequencyservice(uint64(m.Tpd))
	}
	return n
}

func sovFrequencyservice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFrequencyservice(x uint64) (n int) {
	return sovFrequencyservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CheckSendMessageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrequencyservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckSendMessageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckSendMessageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFrequencyservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageObjBin = append(m.MessageObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageObjBin == nil {
				m.MessageObjBin = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrequencyservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrequencyservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFrequencyservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckFrequencyByCRCReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrequencyservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckFrequencyByCRCReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckFrequencyByCRCReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrequencyservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrequencyservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFrequencyservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckFrequencyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrequencyservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckFrequencyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckFrequencyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= (ResultType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			m.BlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFrequencyservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFrequencyservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrequencyConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrequencyservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrequencyConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrequencyConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qps", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Qps = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipFrequencyservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFrequencyservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrequencyservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFrequencyservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFrequencyservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConfigResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrequencyservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConfigResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConfigResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFrequencyservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = make(map[uint32]*FrequencyConfig)
			}
			var mapkey uint32
			var mapvalue *FrequencyConfig
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFrequencyservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFrequencyservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFrequencyservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFrequencyservice
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthFrequencyservice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FrequencyConfig{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFrequencyservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFrequencyservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Config[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrequencyservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFrequencyservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportFrequencyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrequencyservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportFrequencyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportFrequencyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crc", wireType)
			}
			m.Crc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crc |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgQps", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AvgQps = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgQpm", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AvgQpm = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgQph", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AvgQph = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstantQps", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.InstantQps = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFrequencyservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFrequencyservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportFrequencyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrequencyservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportFrequencyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportFrequencyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportAfter", wireType)
			}
			m.ReportAfter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportAfter |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFrequencyservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFrequencyservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncAPICallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrequencyservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncAPICallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncAPICallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crc", wireType)
			}
			m.Crc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crc |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFrequencyservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFrequencyservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncAPICallResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrequencyservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncAPICallResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncAPICallResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (IncAPICallResult_Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tpm", wireType)
			}
			m.Tpm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tpm |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tph", wireType)
			}
			m.Tph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tph |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tpd", wireType)
			}
			m.Tpd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tpd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFrequencyservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFrequencyservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFrequencyservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFrequencyservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrequencyservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFrequencyservice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFrequencyservice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFrequencyservice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFrequencyservice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFrequencyservice   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("imfrequencyservice/frequencyservice.proto", fileDescriptorFrequencyservice)
}

var fileDescriptorFrequencyservice = []byte{
	// 771 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xdd, 0x6e, 0xd3, 0x48,
	0x14, 0xce, 0xe4, 0xaf, 0x9b, 0x93, 0x66, 0xe3, 0x9d, 0xfe, 0x6c, 0x36, 0x5a, 0x65, 0xb3, 0x6e,
	0x57, 0x9b, 0xf6, 0x22, 0x95, 0xc2, 0x0d, 0x54, 0xa2, 0x52, 0x1b, 0x41, 0x65, 0x15, 0x54, 0x98,
	0x16, 0x09, 0xb8, 0x20, 0x72, 0xc7, 0x93, 0xc4, 0x8d, 0xed, 0xb8, 0xf6, 0x24, 0xc8, 0xef, 0x81,
	0x78, 0x09, 0x9e, 0x00, 0x1e, 0x00, 0x71, 0xc9, 0x23, 0xa0, 0x3e, 0x09, 0x9a, 0x19, 0x27, 0x4e,
	0xd2, 0xa0, 0x96, 0x1b, 0xee, 0xe6, 0x7c, 0xe7, 0x1c, 0x9f, 0xef, 0x9c, 0xf9, 0xe6, 0x18, 0x76,
	0x6c, 0xb7, 0x1b, 0xb0, 0xab, 0x11, 0xf3, 0x68, 0x14, 0xb2, 0x60, 0x6c, 0x53, 0xb6, 0xb7, 0x08,
	0x34, 0xfd, 0x60, 0xc8, 0x87, 0x18, 0xdf, 0x0c, 0xd5, 0x3f, 0x22, 0x58, 0x6b, 0xf7, 0x19, 0x1d,
	0x9c, 0x31, 0xcf, 0x7a, 0xca, 0xc2, 0xd0, 0xec, 0x31, 0xc2, 0xae, 0xf0, 0x3a, 0xe4, 0x06, 0x2c,
	0x32, 0xac, 0x0a, 0xaa, 0xa3, 0x46, 0x96, 0x28, 0x43, 0xa0, 0x34, 0xa0, 0x86, 0x55, 0x49, 0xd7,
	0x51, 0xa3, 0x44, 0x94, 0x81, 0xff, 0x86, 0x82, 0xab, 0x32, 0x0d, 0xab, 0x92, 0x91, 0xf1, 0x09,
	0x80, 0x37, 0x21, 0x3f, 0x0a, 0x59, 0x60, 0x58, 0x95, 0x6c, 0x1d, 0x35, 0x72, 0x24, 0xb6, 0xf0,
	0x36, 0x94, 0xe2, 0xa0, 0xd3, 0x8b, 0xcb, 0x23, 0xdb, 0xab, 0xe4, 0xea, 0xa8, 0xb1, 0x4a, 0xe6,
	0x41, 0x5c, 0x85, 0xdf, 0xa8, 0x63, 0x33, 0x8f, 0x1b, 0x7e, 0x25, 0x5f, 0x47, 0x8d, 0x02, 0x99,
	0xda, 0xfa, 0x7b, 0x04, 0x9b, 0x92, 0xfb, 0xe3, 0x49, 0x57, 0x47, 0x51, 0x9b, 0xb4, 0x7f, 0x0d,
	0xfd, 0x59, 0x62, 0xb9, 0x05, 0x62, 0x1c, 0xd6, 0xe7, 0x79, 0x11, 0x16, 0x8e, 0x1c, 0x8e, 0x0f,
	0x00, 0x02, 0x79, 0x6a, 0x0f, 0x2d, 0x26, 0xa9, 0xfd, 0xde, 0xaa, 0x35, 0x6f, 0xde, 0x4a, 0x53,
	0xc5, 0x9f, 0x47, 0x3e, 0x23, 0x33, 0x19, 0x82, 0xe9, 0x85, 0x33, 0xa4, 0x83, 0x73, 0xdb, 0x65,
	0xb2, 0x87, 0x0c, 0x49, 0x00, 0x7d, 0x0b, 0xca, 0xd3, 0x82, 0xed, 0xa1, 0xd7, 0xb5, 0x7b, 0x58,
	0x83, 0xcc, 0x95, 0x1f, 0xca, 0x4a, 0x88, 0x88, 0xa3, 0x8e, 0x41, 0x3b, 0x66, 0x5c, 0xb9, 0x89,
	0x08, 0x0e, 0xb9, 0xfe, 0x09, 0x41, 0x79, 0x06, 0x94, 0x54, 0x8f, 0x21, 0x4f, 0xa5, 0x5d, 0x41,
	0xf5, 0x4c, 0xa3, 0xd8, 0xda, 0x5b, 0x46, 0x73, 0x21, 0xa9, 0xa9, 0x8c, 0x47, 0x1e, 0x0f, 0x22,
	0x12, 0xa7, 0x57, 0xdf, 0x40, 0x71, 0x06, 0x16, 0x8c, 0x06, 0x2c, 0x92, 0x8c, 0x4a, 0x44, 0x1c,
	0xf1, 0x03, 0xc8, 0x8d, 0x4d, 0x67, 0xa4, 0x1a, 0x2a, 0xb6, 0xb6, 0x96, 0x15, 0x5a, 0xe8, 0x8b,
	0xa8, 0x8c, 0xfd, 0xf4, 0x7d, 0xa4, 0x7f, 0x46, 0xb0, 0x49, 0x98, 0x3f, 0x0c, 0xf8, 0xcc, 0xb4,
	0x65, 0x5f, 0xa2, 0x16, 0x0d, 0xe8, 0xa4, 0x16, 0x0d, 0x28, 0xfe, 0x13, 0x56, 0xcc, 0x71, 0xaf,
	0x23, 0x66, 0x92, 0x96, 0x33, 0xc9, 0x9b, 0xe3, 0xde, 0x73, 0x3f, 0x4c, 0x1c, 0xae, 0x54, 0xc0,
	0xc4, 0xe1, 0x26, 0x8e, 0xbe, 0xbc, 0xff, 0x89, 0xa3, 0x8f, 0xff, 0x81, 0xa2, 0xed, 0x85, 0xdc,
	0xf4, 0xb8, 0xfc, 0x5c, 0x4e, 0x3a, 0x21, 0x86, 0xe2, 0x4f, 0x0a, 0xa9, 0x74, 0x6c, 0x4b, 0x0a,
	0x37, 0x51, 0xce, 0x06, 0xe4, 0x07, 0x2c, 0x12, 0xf8, 0x8a, 0xbc, 0x42, 0x25, 0x4e, 0x7d, 0x1f,
	0x36, 0x6e, 0xf4, 0x21, 0xaf, 0xe2, 0x5f, 0x58, 0x0d, 0xa4, 0xa3, 0x63, 0x76, 0x39, 0x0b, 0x64,
	0x3f, 0x19, 0x52, 0x54, 0xd8, 0xa1, 0x80, 0xf4, 0x03, 0xf8, 0xc3, 0xf0, 0xe8, 0xe1, 0x33, 0xa3,
	0x6d, 0x3a, 0xce, 0xa4, 0xfd, 0x19, 0x02, 0x68, 0x8e, 0x40, 0x3c, 0x97, 0xf4, 0x74, 0x2e, 0xfa,
	0x07, 0x04, 0xda, 0xec, 0x07, 0x64, 0xdd, 0x87, 0x90, 0xa5, 0x89, 0x4e, 0x77, 0x96, 0xdd, 0xcb,
	0x62, 0x4e, 0x53, 0xc8, 0x94, 0xc8, 0x34, 0x51, 0x85, 0xfb, 0xae, 0xac, 0x92, 0x23, 0xe2, 0xa8,
	0x90, 0xbe, 0x1c, 0xb0, 0x44, 0xfa, 0x0a, 0x99, 0xbc, 0x2c, 0x71, 0xd4, 0x75, 0xc8, 0x4a, 0xa9,
	0x97, 0xa0, 0xf0, 0xc2, 0x73, 0x6c, 0xd7, 0xe6, 0xcc, 0xd2, 0x52, 0xb8, 0x08, 0x2b, 0x4f, 0x62,
	0x03, 0xed, 0xbe, 0x06, 0x48, 0x1e, 0x88, 0x88, 0x3c, 0xe3, 0x26, 0x1f, 0x85, 0x9d, 0xd3, 0x13,
	0x2d, 0x85, 0xd7, 0xa0, 0xdc, 0x0e, 0xe8, 0xe9, 0x98, 0x05, 0x5d, 0x67, 0xf8, 0x56, 0x44, 0x68,
	0x48, 0x80, 0x27, 0x2c, 0x9a, 0x03, 0xd3, 0x02, 0x34, 0x42, 0xc2, 0x7c, 0x66, 0xf2, 0x78, 0x64,
	0x5a, 0xa6, 0xf5, 0x2e, 0x0b, 0xda, 0xf4, 0x02, 0xce, 0x54, 0x9b, 0xd8, 0x8d, 0x77, 0xe4, 0xfc,
	0x9e, 0xc1, 0xbb, 0xcb, 0x46, 0xb2, 0x7c, 0x21, 0x55, 0x1b, 0xb7, 0xc7, 0xaa, 0x9e, 0xf4, 0x14,
	0xf6, 0xe1, 0xaf, 0xc5, 0x95, 0x3c, 0x0d, 0xc2, 0xff, 0xff, 0xf0, 0x43, 0xf3, 0x1b, 0xfc, 0xa7,
	0x2a, 0xbe, 0x84, 0xc2, 0xf4, 0x2d, 0xe3, 0xed, 0x5b, 0x9e, 0xba, 0x1c, 0x55, 0x75, 0xeb, 0x0e,
	0x0b, 0x41, 0x4f, 0xe1, 0x4b, 0x28, 0x2f, 0xa8, 0x7a, 0xf9, 0xd8, 0x96, 0x3f, 0xe1, 0xea, 0xce,
	0x9d, 0x62, 0xe3, 0x5a, 0xaf, 0x00, 0x12, 0x41, 0xe2, 0xff, 0x6e, 0x13, 0xac, 0xaa, 0xb0, 0x7d,
	0x17, 0x5d, 0x1f, 0xad, 0x7e, 0xb9, 0xae, 0xa1, 0xaf, 0xd7, 0x35, 0xf4, 0xed, 0xba, 0x86, 0x2e,
	0xf2, 0xf2, 0x7f, 0x7a, 0xef, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x14, 0x1a, 0x61, 0xaf, 0x7c,
	0x07, 0x00, 0x00,
}
