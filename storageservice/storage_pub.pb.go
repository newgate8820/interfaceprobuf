// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/storageservice/storage_pub.proto

package storageservice

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 结果码定义，后续在此添加 ...
type ERpcResultCode int32

const (
	ERpcResultCode_RRC_OK                  ERpcResultCode = 0
	ERpcResultCode_RRC_FILE_NOT_EXISITS    ERpcResultCode = 1
	ERpcResultCode_RRC_SYSTEM_EXCEPTION    ERpcResultCode = 2
	ERpcResultCode_RRC_PARAMETER_EXCEPTION ERpcResultCode = 3
	ERpcResultCode_RRC_LOGIC_EXCEPTION     ERpcResultCode = 4
	ERpcResultCode_RRC_REPEAT_SLICE        ERpcResultCode = 5
	ERpcResultCode_RRC_SESSION_NOT_EXISITS ERpcResultCode = 6
	ERpcResultCode_RRC_DATA_EXCEPTION      ERpcResultCode = 7
	ERpcResultCode_RRC_NO_ACCESS_RIGHTS    ERpcResultCode = 8
	ERpcResultCode_RRC_DB_EXCEPTION        ERpcResultCode = 9
	ERpcResultCode_RRC_UNKNOWN             ERpcResultCode = 65535
)

var ERpcResultCode_name = map[int32]string{
	0:     "RRC_OK",
	1:     "RRC_FILE_NOT_EXISITS",
	2:     "RRC_SYSTEM_EXCEPTION",
	3:     "RRC_PARAMETER_EXCEPTION",
	4:     "RRC_LOGIC_EXCEPTION",
	5:     "RRC_REPEAT_SLICE",
	6:     "RRC_SESSION_NOT_EXISITS",
	7:     "RRC_DATA_EXCEPTION",
	8:     "RRC_NO_ACCESS_RIGHTS",
	9:     "RRC_DB_EXCEPTION",
	65535: "RRC_UNKNOWN",
}
var ERpcResultCode_value = map[string]int32{
	"RRC_OK":                  0,
	"RRC_FILE_NOT_EXISITS":    1,
	"RRC_SYSTEM_EXCEPTION":    2,
	"RRC_PARAMETER_EXCEPTION": 3,
	"RRC_LOGIC_EXCEPTION":     4,
	"RRC_REPEAT_SLICE":        5,
	"RRC_SESSION_NOT_EXISITS": 6,
	"RRC_DATA_EXCEPTION":      7,
	"RRC_NO_ACCESS_RIGHTS":    8,
	"RRC_DB_EXCEPTION":        9,
	"RRC_UNKNOWN":             65535,
}

func (x ERpcResultCode) String() string {
	return proto.EnumName(ERpcResultCode_name, int32(x))
}
func (ERpcResultCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorStoragePub, []int{0} }

// 存放文件的引擎标识定义
type EEngineFlag int32

const (
	EEngineFlag_EF_LEO_FS     EEngineFlag = 0
	EEngineFlag_EF_SEAWEED_FS EEngineFlag = 1
	EEngineFlag_EF_PHOTO      EEngineFlag = 2
)

var EEngineFlag_name = map[int32]string{
	0: "EF_LEO_FS",
	1: "EF_SEAWEED_FS",
	2: "EF_PHOTO",
}
var EEngineFlag_value = map[string]int32{
	"EF_LEO_FS":     0,
	"EF_SEAWEED_FS": 1,
	"EF_PHOTO":      2,
}

func (x EEngineFlag) String() string {
	return proto.EnumName(EEngineFlag_name, int32(x))
}
func (EEngineFlag) EnumDescriptor() ([]byte, []int) { return fileDescriptorStoragePub, []int{1} }

// Fid参数
type FidPara struct {
	Fid uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
}

func (m *FidPara) Reset()                    { *m = FidPara{} }
func (m *FidPara) String() string            { return proto.CompactTextString(m) }
func (*FidPara) ProtoMessage()               {}
func (*FidPara) Descriptor() ([]byte, []int) { return fileDescriptorStoragePub, []int{0} }

func (m *FidPara) GetFid() uint64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

// FileHash参数
type FileHashPara struct {
	FileHash string `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
}

func (m *FileHashPara) Reset()                    { *m = FileHashPara{} }
func (m *FileHashPara) String() string            { return proto.CompactTextString(m) }
func (*FileHashPara) ProtoMessage()               {}
func (*FileHashPara) Descriptor() ([]byte, []int) { return fileDescriptorStoragePub, []int{1} }

func (m *FileHashPara) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func init() {
	proto.RegisterType((*FidPara)(nil), "storageservice.FidPara")
	proto.RegisterType((*FileHashPara)(nil), "storageservice.FileHashPara")
	proto.RegisterEnum("storageservice.ERpcResultCode", ERpcResultCode_name, ERpcResultCode_value)
	proto.RegisterEnum("storageservice.EEngineFlag", EEngineFlag_name, EEngineFlag_value)
}
func (m *FidPara) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FidPara) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStoragePub(dAtA, i, uint64(m.Fid))
	}
	return i, nil
}

func (m *FileHashPara) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileHashPara) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FileHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStoragePub(dAtA, i, uint64(len(m.FileHash)))
		i += copy(dAtA[i:], m.FileHash)
	}
	return i, nil
}

func encodeVarintStoragePub(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FidPara) Size() (n int) {
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovStoragePub(uint64(m.Fid))
	}
	return n
}

func (m *FileHashPara) Size() (n int) {
	var l int
	_ = l
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovStoragePub(uint64(l))
	}
	return n
}

func sovStoragePub(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStoragePub(x uint64) (n int) {
	return sovStoragePub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FidPara) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoragePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FidPara: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FidPara: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStoragePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoragePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileHashPara) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoragePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileHashPara: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileHashPara: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoragePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoragePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoragePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStoragePub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStoragePub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoragePub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoragePub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStoragePub
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStoragePub
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStoragePub(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStoragePub = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStoragePub   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/storageservice/storage_pub.proto", fileDescriptorStoragePub)
}

var fileDescriptorStoragePub = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xd1, 0x6a, 0xdb, 0x30,
	0x14, 0x86, 0xeb, 0xa4, 0x4b, 0x93, 0xd3, 0xb4, 0xa8, 0x5a, 0x59, 0x0b, 0x81, 0x30, 0x7a, 0x35,
	0x3a, 0x48, 0x2f, 0x76, 0xbd, 0x0b, 0xd7, 0x39, 0x6e, 0x44, 0x53, 0xcb, 0x48, 0x1a, 0xed, 0xae,
	0x84, 0x92, 0xc8, 0x89, 0xc0, 0x8b, 0x83, 0xed, 0xec, 0x49, 0xf6, 0x50, 0xbb, 0xdc, 0x23, 0x8c,
	0xbc, 0x48, 0x87, 0xc2, 0x0c, 0xe9, 0xdd, 0xd1, 0xf9, 0x3e, 0x7e, 0xfd, 0x70, 0x00, 0x97, 0xae,
	0xce, 0xcd, 0x6c, 0x34, 0x5f, 0x99, 0xba, 0xb2, 0xe5, 0x4f, 0x5b, 0x8e, 0xdc, 0x8f, 0x3b, 0xb7,
	0xae, 0x6d, 0x99, 0x99, 0xb9, 0xdd, 0x94, 0xc5, 0x6c, 0x9b, 0xdd, 0x55, 0x75, 0x51, 0x9a, 0xa5,
	0xf5, 0x82, 0x9b, 0xdb, 0xe6, 0xa9, 0x37, 0xdb, 0xd9, 0x68, 0x53, 0x16, 0x75, 0x41, 0xcf, 0xdf,
	0x1a, 0x37, 0x03, 0x38, 0x89, 0xdd, 0x22, 0x35, 0xa5, 0xa1, 0x04, 0xda, 0x99, 0x5b, 0x5c, 0x07,
	0x1f, 0x83, 0x4f, 0xc7, 0xc2, 0x8f, 0x37, 0x9f, 0xa1, 0x1f, 0xbb, 0xdc, 0x4e, 0x4c, 0xb5, 0xda,
	0x1b, 0x03, 0xe8, 0x65, 0x2e, 0xb7, 0x7a, 0x65, 0xaa, 0xd5, 0xde, 0xeb, 0x89, 0x6e, 0xf6, 0x5f,
	0xb8, 0xfd, 0xd5, 0x82, 0x73, 0x14, 0x9b, 0xb9, 0xb0, 0xd5, 0x36, 0xaf, 0xa3, 0x62, 0x61, 0x29,
	0x40, 0x47, 0x88, 0x48, 0xf3, 0x47, 0x72, 0x44, 0xaf, 0xe1, 0xd2, 0xcf, 0x31, 0x9b, 0xa2, 0x4e,
	0xb8, 0xd2, 0xf8, 0xc2, 0x24, 0x53, 0x92, 0x04, 0x0d, 0x91, 0xdf, 0xa5, 0xc2, 0x27, 0x8d, 0x2f,
	0x11, 0xa6, 0x8a, 0xf1, 0x84, 0xb4, 0xe8, 0x00, 0xae, 0x3c, 0x49, 0x43, 0x11, 0x3e, 0xa1, 0x42,
	0x71, 0x00, 0xdb, 0xf4, 0x0a, 0xde, 0x7b, 0x38, 0xe5, 0x0f, 0x2c, 0x3a, 0x00, 0xc7, 0xf4, 0x12,
	0x88, 0x07, 0x02, 0x53, 0x0c, 0x95, 0x96, 0x53, 0x16, 0x21, 0x79, 0xd7, 0x64, 0x49, 0x94, 0x92,
	0xf1, 0xe4, 0x4d, 0x85, 0x0e, 0xfd, 0x00, 0xd4, 0xc3, 0x71, 0xa8, 0xc2, 0x83, 0xa8, 0x93, 0xa6,
	0x5a, 0xc2, 0x75, 0x18, 0x45, 0x28, 0xa5, 0x16, 0xec, 0x61, 0xa2, 0x24, 0xe9, 0x36, 0x9f, 0x8c,
	0xef, 0x0f, 0xfc, 0x1e, 0xbd, 0x80, 0x53, 0xbf, 0xfd, 0x96, 0x3c, 0x26, 0xfc, 0x39, 0x21, 0xaf,
	0xaf, 0xed, 0xdb, 0xaf, 0x70, 0x8a, 0xb8, 0x5e, 0xba, 0xb5, 0x8d, 0x73, 0xb3, 0xa4, 0x67, 0xd0,
	0xc3, 0x58, 0x4f, 0x91, 0xeb, 0x58, 0x92, 0x23, 0x7a, 0x01, 0x67, 0x18, 0x6b, 0x89, 0xe1, 0x33,
	0xe2, 0xd8, 0xaf, 0x02, 0xda, 0x87, 0x2e, 0xc6, 0x3a, 0x9d, 0x70, 0xc5, 0x49, 0xeb, 0xbe, 0xff,
	0x7b, 0x37, 0x0c, 0xfe, 0xec, 0x86, 0xc1, 0xdf, 0xdd, 0x30, 0x98, 0x75, 0xf6, 0x47, 0xfc, 0xf2,
	0x2f, 0x00, 0x00, 0xff, 0xff, 0x10, 0x34, 0x0d, 0x8a, 0x0d, 0x02, 0x00, 0x00,
}
