// protoc --gogofast_out=plugins=grpc:. ./hbase.proto
// protoc  --java_out=. ./hbase.proto
syntax = "proto3";
option java_multiple_files = true;
option java_package = "im.pt.message.proto";

package messagedbold;


// messagedb冷数据查询服务
service MessagedbOldService{
    // FindForwardUserMsg 查询转发消息 返回结构要升序排序
    rpc FindForwardUserMsg(FindForwardUserMsgReq) returns (FindForwardUserMsgResp) {}

    // GetUserMessageHistory 查询历史
    rpc GetUserMessageHistory(GetUserMessageHistoryReq) returns (GetUserMessageHistoryResp) {}

    // SearchMessage 搜索消息（主要是导出历史指定人发送的搜索协议重定向，以后导出历史有改动这块可以看业务需求是否能去掉
    rpc SearchMessage(SearchMessageReq) returns (SearchMessageResp) {}

    // GetTopMessage 查询符合条件的最新的一条消息
    rpc GetTopMessage(GetTopMessageReq) returns (GetTopMessageResp) {}

    // GetUserMsgUUID 查询消息的uuid 注意 DATABASETYPE 类型，要特殊处理
    rpc GetUserMsgUUID(GetUserMsgUUIDReq) returns (GetUserMsgUUIDResp) {}

    // GetUserMsgByUserIDMsgID 查询单条消息 注意 DATABASETYPE 类型，要特殊处理
    rpc GetUserMsgByUserIDMsgID(GetUserMsgByUserIDMsgIDReq) returns (GetUserMsgByUserIDMsgIDResp) {}

    // GetUserMsgByUserIDMsgIDs 获取多条消息
    rpc GetUserMsgByUserIDMsgIDs(GetUserMsgByUserIDMsgIDsReq) returns(GetUserMsgByUserIDMsgIDsResp) {}

    // GetUserMsgIdByUUID 根据UUID 查询消息ID 注意 DATABASETYPE 类型，要特殊处理
    rpc GetUserMsgIDByUUID(GetUserMsgIDByUUIDReq) returns (GetUserMsgIDByUUIDResp) {}

    // GetUserMsgListByUUIDS 根据UUDIs 查询消息 注意 DATABASETYPE 类型，要特殊处理
    rpc GetUserMsgListByUUIDS(GetUserMsgListByUUIDSReq) returns (GetUserMsgListByUUIDSResp) {}

    // GetMediaMsgHistory 获取媒体消息历史 查询 < msgID 的消息
    rpc GetMediaMsgHistory(GetMediaMsgHistoryReq) returns (GetMediaMsgHistoryResp) {}

    // DeleteUserMsg 删除单条消息
    rpc DeleteUserMsg(DeleteUserMsgReq) returns (DeleteUserMsgResp) {}

    // BatchDeleteUserMsg 批量删除消息
    rpc BatchDeleteUserMsg(BatchDeleteUserMsgReq) returns (BatchDeleteUserMsgResp) {}

    // DeleteUserMsgByUserIDWithIDWithType 删除对话框消息
    rpc DeleteUserMsgByUserIDWithIDWithType(DeleteUserMsgByUserIDWithIDWithTypeReq) returns (DeleteUserMsgByUserIDWithIDWithTypeResp) {}

    // ClearHistory 分页清除对话框消息
    rpc ClearHistory(ClearHistoryReq) returns (ClearHistoryResp) {}

    // GetMsgIDPtsByDate 获取大于时间戳的最小的msgID 返回各个库中比较小的值 删除vip用户数据是调用（暂时不实现）
    rpc GetMsgIDPtsByDate(GetMsgIDPtsByDateReq) returns (GetMsgIDPtsByDateResp) {}
}

message GetMsgIDPtsByDateReq {
    int32 UserID       = 1;
    int32 Date         = 2;
    DATABASETYPE DType = 3;
}

message GetMsgIDPtsByDateResp {
    int32 MsgID = 1;
    int32 Pts   = 2;
}

message ClearHistoryReq {
    int32 UserID       = 1;
    int32 WithID       = 2;
    int32 WithType     = 3;
    int32 Limit        = 4;
    DATABASETYPE DType = 5;
}

message ClearHistoryResp {
    repeated int32 MsgIDs = 1; // 删除的消息ID切片
    repeated int32 Pts    = 2; // 删除的消息pts
    int32 LastMsgID       = 3; // 未删除的消息最大的MsgID
    int32 Count           = 4; // 暂时返回Len(MsgIDs)
}

message DeleteUserMsgByUserIDWithIDWithTypeReq {
    int32 UserID       = 1;
    int32 WithID       = 2;
    int32 WithType     = 3;
    DATABASETYPE DType = 4;
}

message DeleteUserMsgByUserIDWithIDWithTypeResp {}

message BatchDeleteUserMsgReq {
    int32 UserID          = 1;
    repeated int32 MsgIDs = 2;
    DATABASETYPE DType    = 3;
}

message BatchDeleteUserMsgResp {}

message DeleteUserMsgReq {
    int32 UserID       = 1;
    int32 MsgID        = 2;
    DATABASETYPE DType = 3;
}

message DeleteUserMsgResp {}

message GetMediaMsgHistoryReq {
    int32 UserID          = 1;
    int32 WithID          = 2;
    int32 WithType        = 3;
    int32 MaxMsgID        = 4;
    repeated int32 Medias = 5;
    int32 Limit           = 6;
    DATABASETYPE DType    = 7;
}

message GetMediaMsgHistoryResp {
    repeated UserMessage Messages = 1;
}

message GetUserMsgListByUUIDSReq {
    int32 UserID         = 1;
    DATABASETYPE DType   = 2;
    repeated int64 UUIDs = 3;
}

message GetUserMsgListByUUIDSResp {
    repeated UserMessage Messages = 1;
}

message GetUserMsgIDByUUIDReq {
    int32 UserID       = 1;
    int64 UUID         = 2;
    DATABASETYPE DType = 3;
}

message GetUserMsgIDByUUIDResp {
    int32 WithID = 1;
    int32 MsgID  = 2;
}

message GetUserMsgByUserIDMsgIDReq {
    int32 UserID       = 1;
    int32 MsgID        = 2;
    DATABASETYPE DType = 3;
}

message GetUserMsgByUserIDMsgIDResp {
    UserMessage Message = 1;
}

message GetUserMsgByUserIDMsgIDsReq {
    int32 UserID          = 1;
    int32 WithID          = 2;
    int32 WithType        = 3;
    repeated int32 MsgIDs = 4;
    DATABASETYPE DType    = 5; // 数据库类型
}

message GetUserMsgByUserIDMsgIDsResp {
    repeated UserMessage Messages = 1;
}

message GetUserMsgUUIDReq {
    int32 UserID       = 1;
    int32 MsgID        = 2;
    DATABASETYPE DType = 3; // 数据库类型
}

message GetUserMsgUUIDResp {
    int64 UUID = 1;
    int32 WithID = 2;
}

message GetTopMessageReq {
    int32 UserID       = 1; // 消息拥有者
    int32 WithID       = 2; // 消息接收者
    int32 WithType     = 3; // 对话框类型
    DATABASETYPE DType = 4; // 数据库类型
}

message GetTopMessageResp {
    UserMessage Message = 1; // 消息
}

message SearchMessageReq {
    int32 UserID          = 1; // 用户ID
    int32 WithID          = 2; // 消息接收者
    int32 WithType        = 3; // 对话框类型
    int32 FromID          = 4; // 消息发送者
    repeated int32 Medias = 5; // 媒体类型
    int32 OffsetID        = 6; // 偏移的MsgID
    int32 AddOffset       = 7; // 向后偏移量 （包括OffsetID）
    DATABASETYPE DType    = 8; // 数据库类型
    int32 Limit           = 9; // 获取消息的条数限制
    int32 MinDate         = 10; // 最小日期 暂时不用
    int32 MaxDate         = 11; // 最大日期 暂时不用
    int32 MinID           = 12; // 最小MsgID
    int32 MaxID           = 13; // 最大MsgID 暂时不用
}

message SearchMessageResp {
    repeated UserMessage Messages = 1; // 消息切片
}

message GetUserMessageHistoryReq {
    int32 UserID       = 1; // 消息拥有者
    int32 WithID       = 2; // 消息接收者
    int32 WithType     = 3; // 对话框类型
    int32 OffsetID     = 4; // 偏移的MsgID
    int32 OffsetDate   = 5; // 偏移的时间戳（如果有值 对应user_message表的date字段
    int32 AddOffset    = 6; // 往下偏移数量（包括OffsetID）
    DATABASETYPE DType = 7; // 数据库类型
    int32 Limit        = 8; // 查询数量总数
    int32 MinID        = 9; // 查询大于MinID的
    int32 MaxID        = 10; // 暂时没有使用
}

message GetUserMessageHistoryResp {
    repeated UserMessage Messages = 1; // 消息切片
}

message FindForwardUserMsgReq {
    int32 UserID          = 1; // 消息拥有者
    int32 WithID          = 2; // 消息接收者
    int32 WithType        = 3; // 对话框类型（1：单聊  2： 普通群）
    repeated int32 MsgIDs = 4; // 要查询的消息ID
    DATABASETYPE DType    = 5; // 数据库类型
}

message FindForwardUserMsgResp {
    repeated ForwardUserMsg Messages = 1;
}

message ForwardUserMsg {
    int32 FromId            = 1; // 消息发送者
    int32 Encry             = 2; // 消息是否加密
    int64 GroupId           = 3; // 图片组ID
    int32 MsgID             = 4; // 消息ID
    int32 Media             = 5; // 媒体类型
    int32 Date              = 6; // 时间戳
    int32 ViaBotID          = 7; // 机器人ID
    string Message          = 8; // 消息
    bytes MediaData         = 9; // 媒体信息摘要
    bytes ReplyMarkup       = 10; // 键盘信息
    bytes FwdFrom           = 11; // 转发摘要
    repeated bytes Entities = 12; // 高亮信息
}

// 数据库类型
enum DATABASETYPE {
    _        = 0;
    UN_ENCRY = 1; // 非加密库
    ENCRY    = 2; // 加密库     预留
    VIP      = 4; // 3549VIP库 预留
}

message UserMessage {
    int32   UserID          = 1;  // 用户ID
    int32   WithID          = 2;  // 消息交互方
    int32   WithType        = 3;  // 消息交互方类型 1.user 2:chat 3:channel
    int32   MessageType     = 4;  // 消息类型
    int32   Flags           = 5;  // 消息标识
    bool    Out             = 6;  // 是否为自己发送
    bool    Mentioned       = 7;  // 是否提及他人
    bool    MediaUnread     = 8;  // 媒体是否已读
    bool    Silent          = 9; // 是否静音
    bool    Post            = 10; // 是否邮递
    int64   GroupID         = 11; // 图片组ID
    int32   MsgID           = 12; // 消息id
    int32   ToID            = 13; // 接收方id
    int32   Pts             = 14; // 消息的pts
    bytes   FwdFrom         = 15; // 引用
    int32   ViaBotID        = 16; // 机器人id
    int32   ReplyToMsgID    = 17; // 回复id
    int32   Date            = 18; // 时间
    string  Message         = 19; // 消息内容
    int64   Media           = 20; // 媒体id
    bytes   MediaData       = 21; // 媒体二进制
    bytes   ReplyMarkup     = 22; // 小键盘
    repeated bytes Entities = 23; // 高亮
    int32   FromID          = 24; // 发送方
    int32   Views           = 25; // 查看人数
    int32   EditDate        = 26; // 编辑时间
    bytes   Action          = 27; // 行为
    int64   RandomID        = 28; // 随机id
    int64   UUID            = 29; // 消息全局唯一id
    int32   InsertDate      = 30; // 插入时间
    int32   UpdateDate      = 31; // 更新时间
    int32   Encry           = 32; // 是否加密信息 0: 不加密 1：加密
    Combination Combination = 33; // 预留字段
}

message Combination {
    repeated MentionStatus MentionedSlice = 1; // @人 二进制
    repeated int64 KeyID                  = 2; // keyId 判断
}

message MentionStatus {
    int32 UserID = 1;
    int32 Status = 2;
}