// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hbase.proto

package im.pt.message.proto;

/**
 * <pre>
 * 数据库类型
 * </pre>
 *
 * Protobuf enum {@code messagedbold.DATABASETYPE}
 */
public enum DATABASETYPE
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>_ = 0;</code>
   */
  _(0),
  /**
   * <pre>
   * 非加密库
   * </pre>
   *
   * <code>UN_ENCRY = 1;</code>
   */
  UN_ENCRY(1),
  /**
   * <pre>
   * 加密库     预留
   * </pre>
   *
   * <code>ENCRY = 2;</code>
   */
  ENCRY(2),
  /**
   * <pre>
   * 3549VIP库 预留
   * </pre>
   *
   * <code>VIP = 4;</code>
   */
  VIP(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>_ = 0;</code>
   */
  public static final int __VALUE = 0;
  /**
   * <pre>
   * 非加密库
   * </pre>
   *
   * <code>UN_ENCRY = 1;</code>
   */
  public static final int UN_ENCRY_VALUE = 1;
  /**
   * <pre>
   * 加密库     预留
   * </pre>
   *
   * <code>ENCRY = 2;</code>
   */
  public static final int ENCRY_VALUE = 2;
  /**
   * <pre>
   * 3549VIP库 预留
   * </pre>
   *
   * <code>VIP = 4;</code>
   */
  public static final int VIP_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static DATABASETYPE valueOf(int value) {
    return forNumber(value);
  }

  public static DATABASETYPE forNumber(int value) {
    switch (value) {
      case 0: return _;
      case 1: return UN_ENCRY;
      case 2: return ENCRY;
      case 4: return VIP;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<DATABASETYPE>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      DATABASETYPE> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<DATABASETYPE>() {
          public DATABASETYPE findValueByNumber(int number) {
            return DATABASETYPE.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return im.pt.message.proto.Hbase.getDescriptor().getEnumTypes().get(0);
  }

  private static final DATABASETYPE[] VALUES = values();

  public static DATABASETYPE valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private DATABASETYPE(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:messagedbold.DATABASETYPE)
}

