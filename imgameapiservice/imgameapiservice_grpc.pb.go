// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imgameapiservice.proto

package imgameapiservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImGameApiServiceClient is the client API for ImGameApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImGameApiServiceClient interface {
	// 注册
	Register(ctx context.Context, in *ReqRegister, opts ...grpc.CallOption) (*ReplyRegister, error)
	// 登录
	Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*ReplyLogin, error)
	// 获取会员当前余额
	FindMemberBalance(ctx context.Context, in *ReqMemberBalance, opts ...grpc.CallOption) (*ReplyMemberBalance, error)
	// ---------------------------------- 以下为原服务协议, 暂时保留 ----------------------------------
	// 获取帐户token
	GetAccountToken(ctx context.Context, in *GetAccountTokenMsg, opts ...grpc.CallOption) (*GetAccountTokenMsgReply, error)
	// 验证帐户token
	VerifyAccountToken(ctx context.Context, in *VerifyAccountTokenMsg, opts ...grpc.CallOption) (*VerifyAccountTokenMsgReply, error)
}

type imGameApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImGameApiServiceClient(cc grpc.ClientConnInterface) ImGameApiServiceClient {
	return &imGameApiServiceClient{cc}
}

func (c *imGameApiServiceClient) Register(ctx context.Context, in *ReqRegister, opts ...grpc.CallOption) (*ReplyRegister, error) {
	out := new(ReplyRegister)
	err := c.cc.Invoke(ctx, "/imgameapiservice.ImGameApiService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imGameApiServiceClient) Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*ReplyLogin, error) {
	out := new(ReplyLogin)
	err := c.cc.Invoke(ctx, "/imgameapiservice.ImGameApiService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imGameApiServiceClient) FindMemberBalance(ctx context.Context, in *ReqMemberBalance, opts ...grpc.CallOption) (*ReplyMemberBalance, error) {
	out := new(ReplyMemberBalance)
	err := c.cc.Invoke(ctx, "/imgameapiservice.ImGameApiService/FindMemberBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imGameApiServiceClient) GetAccountToken(ctx context.Context, in *GetAccountTokenMsg, opts ...grpc.CallOption) (*GetAccountTokenMsgReply, error) {
	out := new(GetAccountTokenMsgReply)
	err := c.cc.Invoke(ctx, "/imgameapiservice.ImGameApiService/GetAccountToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imGameApiServiceClient) VerifyAccountToken(ctx context.Context, in *VerifyAccountTokenMsg, opts ...grpc.CallOption) (*VerifyAccountTokenMsgReply, error) {
	out := new(VerifyAccountTokenMsgReply)
	err := c.cc.Invoke(ctx, "/imgameapiservice.ImGameApiService/VerifyAccountToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImGameApiServiceServer is the server API for ImGameApiService service.
// All implementations must embed UnimplementedImGameApiServiceServer
// for forward compatibility
type ImGameApiServiceServer interface {
	// 注册
	Register(context.Context, *ReqRegister) (*ReplyRegister, error)
	// 登录
	Login(context.Context, *ReqLogin) (*ReplyLogin, error)
	// 获取会员当前余额
	FindMemberBalance(context.Context, *ReqMemberBalance) (*ReplyMemberBalance, error)
	// ---------------------------------- 以下为原服务协议, 暂时保留 ----------------------------------
	// 获取帐户token
	GetAccountToken(context.Context, *GetAccountTokenMsg) (*GetAccountTokenMsgReply, error)
	// 验证帐户token
	VerifyAccountToken(context.Context, *VerifyAccountTokenMsg) (*VerifyAccountTokenMsgReply, error)
	mustEmbedUnimplementedImGameApiServiceServer()
}

// UnimplementedImGameApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImGameApiServiceServer struct {
}

func (UnimplementedImGameApiServiceServer) Register(context.Context, *ReqRegister) (*ReplyRegister, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedImGameApiServiceServer) Login(context.Context, *ReqLogin) (*ReplyLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedImGameApiServiceServer) FindMemberBalance(context.Context, *ReqMemberBalance) (*ReplyMemberBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMemberBalance not implemented")
}
func (UnimplementedImGameApiServiceServer) GetAccountToken(context.Context, *GetAccountTokenMsg) (*GetAccountTokenMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountToken not implemented")
}
func (UnimplementedImGameApiServiceServer) VerifyAccountToken(context.Context, *VerifyAccountTokenMsg) (*VerifyAccountTokenMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccountToken not implemented")
}
func (UnimplementedImGameApiServiceServer) mustEmbedUnimplementedImGameApiServiceServer() {}

// UnsafeImGameApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImGameApiServiceServer will
// result in compilation errors.
type UnsafeImGameApiServiceServer interface {
	mustEmbedUnimplementedImGameApiServiceServer()
}

func RegisterImGameApiServiceServer(s grpc.ServiceRegistrar, srv ImGameApiServiceServer) {
	s.RegisterService(&ImGameApiService_ServiceDesc, srv)
}

func _ImGameApiService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImGameApiServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imgameapiservice.ImGameApiService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImGameApiServiceServer).Register(ctx, req.(*ReqRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImGameApiService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImGameApiServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imgameapiservice.ImGameApiService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImGameApiServiceServer).Login(ctx, req.(*ReqLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImGameApiService_FindMemberBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMemberBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImGameApiServiceServer).FindMemberBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imgameapiservice.ImGameApiService/FindMemberBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImGameApiServiceServer).FindMemberBalance(ctx, req.(*ReqMemberBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImGameApiService_GetAccountToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountTokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImGameApiServiceServer).GetAccountToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imgameapiservice.ImGameApiService/GetAccountToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImGameApiServiceServer).GetAccountToken(ctx, req.(*GetAccountTokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImGameApiService_VerifyAccountToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAccountTokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImGameApiServiceServer).VerifyAccountToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imgameapiservice.ImGameApiService/VerifyAccountToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImGameApiServiceServer).VerifyAccountToken(ctx, req.(*VerifyAccountTokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// ImGameApiService_ServiceDesc is the grpc.ServiceDesc for ImGameApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImGameApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imgameapiservice.ImGameApiService",
	HandlerType: (*ImGameApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ImGameApiService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ImGameApiService_Login_Handler,
		},
		{
			MethodName: "FindMemberBalance",
			Handler:    _ImGameApiService_FindMemberBalance_Handler,
		},
		{
			MethodName: "GetAccountToken",
			Handler:    _ImGameApiService_GetAccountToken_Handler,
		},
		{
			MethodName: "VerifyAccountToken",
			Handler:    _ImGameApiService_VerifyAccountToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imgameapiservice.proto",
}
