// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/imgameapiservice/imgameapiservice.proto

/*
Package imgameapiservice is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/imgameapiservice/imgameapiservice.proto

It has these top-level messages:

	GetAccountTokenMsg
	GetAccountTokenMsgReply
	VerifyAccountTokenMsg
	VerifyAccountTokenMsgReply
	ReqRegister
	ReplyRegister
	RegisterRespData
	ReqLogin
	ReplyLogin
	LoginRespData
	ReqMemberBalance
	ReplyMemberBalance
*/
package imgameapiservice

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GameApiServiceResultCode int32

const (
	GameApiServiceResultCode_ResultCode_Ok                          GameApiServiceResultCode = 0
	GameApiServiceResultCode_ResultCode_Token_Invalid               GameApiServiceResultCode = 1001
	GameApiServiceResultCode_ResultCode_Parameter_Exception         GameApiServiceResultCode = 1002
	GameApiServiceResultCode_ResultCode_IM_Side_Service_Exception   GameApiServiceResultCode = 1003
	GameApiServiceResultCode_ResultCode_Game_Side_Service_Exception GameApiServiceResultCode = 1004
)

var GameApiServiceResultCode_name = map[int32]string{
	0:    "ResultCode_Ok",
	1001: "ResultCode_Token_Invalid",
	1002: "ResultCode_Parameter_Exception",
	1003: "ResultCode_IM_Side_Service_Exception",
	1004: "ResultCode_Game_Side_Service_Exception",
}
var GameApiServiceResultCode_value = map[string]int32{
	"ResultCode_Ok":                          0,
	"ResultCode_Token_Invalid":               1001,
	"ResultCode_Parameter_Exception":         1002,
	"ResultCode_IM_Side_Service_Exception":   1003,
	"ResultCode_Game_Side_Service_Exception": 1004,
}

func (x GameApiServiceResultCode) String() string {
	return proto.EnumName(GameApiServiceResultCode_name, int32(x))
}
func (GameApiServiceResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImgameapiservice, []int{0}
}

// ---------------------------------- 以下为原服务协议, 暂时保留 ----------------------------------
// 获取帐户token消息请求参数
type GetAccountTokenMsg struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *GetAccountTokenMsg) Reset()         { *m = GetAccountTokenMsg{} }
func (m *GetAccountTokenMsg) String() string { return proto.CompactTextString(m) }
func (*GetAccountTokenMsg) ProtoMessage()    {}
func (*GetAccountTokenMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorImgameapiservice, []int{0}
}

func (m *GetAccountTokenMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 获取帐户token消息响应参数
type GetAccountTokenMsgReply struct {
	ResultCode GameApiServiceResultCode `protobuf:"varint,1,opt,name=ResultCode,proto3,enum=imgameapiservice.GameApiServiceResultCode" json:"ResultCode,omitempty"`
	Token      string                   `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	URL        string                   `protobuf:"bytes,3,opt,name=URL,proto3" json:"URL,omitempty"`
}

func (m *GetAccountTokenMsgReply) Reset()         { *m = GetAccountTokenMsgReply{} }
func (m *GetAccountTokenMsgReply) String() string { return proto.CompactTextString(m) }
func (*GetAccountTokenMsgReply) ProtoMessage()    {}
func (*GetAccountTokenMsgReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImgameapiservice, []int{1}
}

func (m *GetAccountTokenMsgReply) GetResultCode() GameApiServiceResultCode {
	if m != nil {
		return m.ResultCode
	}
	return GameApiServiceResultCode_ResultCode_Ok
}

func (m *GetAccountTokenMsgReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GetAccountTokenMsgReply) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

// 验证帐户token消息请求参数
type VerifyAccountTokenMsg struct {
	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (m *VerifyAccountTokenMsg) Reset()         { *m = VerifyAccountTokenMsg{} }
func (m *VerifyAccountTokenMsg) String() string { return proto.CompactTextString(m) }
func (*VerifyAccountTokenMsg) ProtoMessage()    {}
func (*VerifyAccountTokenMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorImgameapiservice, []int{2}
}

func (m *VerifyAccountTokenMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *VerifyAccountTokenMsg) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// 验证帐户token消息响应参数
type VerifyAccountTokenMsgReply struct {
	ResultCode GameApiServiceResultCode `protobuf:"varint,1,opt,name=ResultCode,proto3,enum=imgameapiservice.GameApiServiceResultCode" json:"ResultCode,omitempty"`
	UserId     int32                    `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *VerifyAccountTokenMsgReply) Reset()         { *m = VerifyAccountTokenMsgReply{} }
func (m *VerifyAccountTokenMsgReply) String() string { return proto.CompactTextString(m) }
func (*VerifyAccountTokenMsgReply) ProtoMessage()    {}
func (*VerifyAccountTokenMsgReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImgameapiservice, []int{3}
}

func (m *VerifyAccountTokenMsgReply) GetResultCode() GameApiServiceResultCode {
	if m != nil {
		return m.ResultCode
	}
	return GameApiServiceResultCode_ResultCode_Ok
}

func (m *VerifyAccountTokenMsgReply) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 注册请求
type ReqRegister struct {
	UserAccount        string `protobuf:"bytes,1,opt,name=userAccount,proto3" json:"userAccount,omitempty"`
	UserPassword       string `protobuf:"bytes,2,opt,name=userPassword,proto3" json:"userPassword,omitempty"`
	ConfirmPwd         string `protobuf:"bytes,3,opt,name=confirmPwd,proto3" json:"confirmPwd,omitempty"`
	UserName           string `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	ValidCode          string `protobuf:"bytes,5,opt,name=validCode,proto3" json:"validCode,omitempty"`
	Email              string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	UserQq             string `protobuf:"bytes,7,opt,name=userQq,proto3" json:"userQq,omitempty"`
	UserWx             string `protobuf:"bytes,8,opt,name=userWx,proto3" json:"userWx,omitempty"`
	Telephone          string `protobuf:"bytes,9,opt,name=telephone,proto3" json:"telephone,omitempty"`
	PhoneCode          string `protobuf:"bytes,10,opt,name=phoneCode,proto3" json:"phoneCode,omitempty"`
	BundleVersionId    string `protobuf:"bytes,11,opt,name=bundleVersionId,proto3" json:"bundleVersionId,omitempty"`
	Token              string `protobuf:"bytes,12,opt,name=token,proto3" json:"token,omitempty"`
	RegisterSourceName string `protobuf:"bytes,13,opt,name=registerSourceName,proto3" json:"registerSourceName,omitempty"`
	AppUuid            string `protobuf:"bytes,14,opt,name=appUuid,proto3" json:"appUuid,omitempty"`
	ProxyLinkCode      string `protobuf:"bytes,15,opt,name=proxyLinkCode,proto3" json:"proxyLinkCode,omitempty"`
	RegisterMethodId   string `protobuf:"bytes,16,opt,name=registerMethodId,proto3" json:"registerMethodId,omitempty"`
}

func (m *ReqRegister) Reset()                    { *m = ReqRegister{} }
func (m *ReqRegister) String() string            { return proto.CompactTextString(m) }
func (*ReqRegister) ProtoMessage()               {}
func (*ReqRegister) Descriptor() ([]byte, []int) { return fileDescriptorImgameapiservice, []int{4} }

func (m *ReqRegister) GetUserAccount() string {
	if m != nil {
		return m.UserAccount
	}
	return ""
}

func (m *ReqRegister) GetUserPassword() string {
	if m != nil {
		return m.UserPassword
	}
	return ""
}

func (m *ReqRegister) GetConfirmPwd() string {
	if m != nil {
		return m.ConfirmPwd
	}
	return ""
}

func (m *ReqRegister) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ReqRegister) GetValidCode() string {
	if m != nil {
		return m.ValidCode
	}
	return ""
}

func (m *ReqRegister) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ReqRegister) GetUserQq() string {
	if m != nil {
		return m.UserQq
	}
	return ""
}

func (m *ReqRegister) GetUserWx() string {
	if m != nil {
		return m.UserWx
	}
	return ""
}

func (m *ReqRegister) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *ReqRegister) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

func (m *ReqRegister) GetBundleVersionId() string {
	if m != nil {
		return m.BundleVersionId
	}
	return ""
}

func (m *ReqRegister) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ReqRegister) GetRegisterSourceName() string {
	if m != nil {
		return m.RegisterSourceName
	}
	return ""
}

func (m *ReqRegister) GetAppUuid() string {
	if m != nil {
		return m.AppUuid
	}
	return ""
}

func (m *ReqRegister) GetProxyLinkCode() string {
	if m != nil {
		return m.ProxyLinkCode
	}
	return ""
}

func (m *ReqRegister) GetRegisterMethodId() string {
	if m != nil {
		return m.RegisterMethodId
	}
	return ""
}

// 注册响应
type ReplyRegister struct {
	Status int32             `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data   *RegisterRespData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *ReplyRegister) Reset()                    { *m = ReplyRegister{} }
func (m *ReplyRegister) String() string            { return proto.CompactTextString(m) }
func (*ReplyRegister) ProtoMessage()               {}
func (*ReplyRegister) Descriptor() ([]byte, []int) { return fileDescriptorImgameapiservice, []int{5} }

func (m *ReplyRegister) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReplyRegister) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ReplyRegister) GetData() *RegisterRespData {
	if m != nil {
		return m.Data
	}
	return nil
}

// 注册响应数据
type RegisterRespData struct {
	CreationTime        int64   `protobuf:"varint,1,opt,name=creationTime,proto3" json:"creationTime,omitempty"`
	CreationBy          string  `protobuf:"bytes,2,opt,name=creationBy,proto3" json:"creationBy,omitempty"`
	LastUpdatedTime     int64   `protobuf:"varint,3,opt,name=lastUpdatedTime,proto3" json:"lastUpdatedTime,omitempty"`
	LastUpdatedBy       string  `protobuf:"bytes,4,opt,name=lastUpdatedBy,proto3" json:"lastUpdatedBy,omitempty"`
	DataSourceKey       string  `protobuf:"bytes,5,opt,name=dataSourceKey,proto3" json:"dataSourceKey,omitempty"`
	CurrentUser         string  `protobuf:"bytes,6,opt,name=currentUser,proto3" json:"currentUser,omitempty"`
	UserId              int32   `protobuf:"varint,7,opt,name=userId,proto3" json:"userId,omitempty"`
	UserSystemId        string  `protobuf:"bytes,8,opt,name=userSystemId,proto3" json:"userSystemId,omitempty"`
	ProxyLinkCode       string  `protobuf:"bytes,9,opt,name=proxyLinkCode,proto3" json:"proxyLinkCode,omitempty"`
	ParentId            int32   `protobuf:"varint,10,opt,name=parentId,proto3" json:"parentId,omitempty"`
	ProxyAccount        string  `protobuf:"bytes,11,opt,name=proxyAccount,proto3" json:"proxyAccount,omitempty"`
	UserLevelId         int32   `protobuf:"varint,12,opt,name=userLevelId,proto3" json:"userLevelId,omitempty"`
	MemberLevelName     string  `protobuf:"bytes,13,opt,name=memberLevelName,proto3" json:"memberLevelName,omitempty"`
	UserAccount         string  `protobuf:"bytes,14,opt,name=userAccount,proto3" json:"userAccount,omitempty"`
	UserPassword        string  `protobuf:"bytes,15,opt,name=userPassword,proto3" json:"userPassword,omitempty"`
	OldUserPassword     string  `protobuf:"bytes,16,opt,name=oldUserPassword,proto3" json:"oldUserPassword,omitempty"`
	RegisterIp          string  `protobuf:"bytes,17,opt,name=registerIp,proto3" json:"registerIp,omitempty"`
	RegisterSource      string  `protobuf:"bytes,18,opt,name=registerSource,proto3" json:"registerSource,omitempty"`
	RegisterSourceName  string  `protobuf:"bytes,19,opt,name=registerSourceName,proto3" json:"registerSourceName,omitempty"`
	RegisterMethodId    int32   `protobuf:"varint,20,opt,name=registerMethodId,proto3" json:"registerMethodId,omitempty"`
	Sex                 int32   `protobuf:"varint,21,opt,name=sex,proto3" json:"sex,omitempty"`
	Birthday            int32   `protobuf:"varint,22,opt,name=birthday,proto3" json:"birthday,omitempty"`
	NickName            string  `protobuf:"bytes,23,opt,name=nickName,proto3" json:"nickName,omitempty"`
	Email               string  `protobuf:"bytes,24,opt,name=email,proto3" json:"email,omitempty"`
	HeadPortrait        string  `protobuf:"bytes,25,opt,name=headPortrait,proto3" json:"headPortrait,omitempty"`
	UserName            string  `protobuf:"bytes,26,opt,name=userName,proto3" json:"userName,omitempty"`
	Telephone           string  `protobuf:"bytes,27,opt,name=telephone,proto3" json:"telephone,omitempty"`
	UserQq              string  `protobuf:"bytes,28,opt,name=userQq,proto3" json:"userQq,omitempty"`
	UserWx              string  `protobuf:"bytes,29,opt,name=userWx,proto3" json:"userWx,omitempty"`
	IsFrist             int32   `protobuf:"varint,30,opt,name=isFrist,proto3" json:"isFrist,omitempty"`
	IsOwner             int32   `protobuf:"varint,31,opt,name=isOwner,proto3" json:"isOwner,omitempty"`
	IsEnable            int32   `protobuf:"varint,32,opt,name=isEnable,proto3" json:"isEnable,omitempty"`
	IsFrozen            int32   `protobuf:"varint,33,opt,name=isFrozen,proto3" json:"isFrozen,omitempty"`
	BundleVersionId     string  `protobuf:"bytes,34,opt,name=bundleVersionId,proto3" json:"bundleVersionId,omitempty"`
	AppUuid             string  `protobuf:"bytes,35,opt,name=appUuid,proto3" json:"appUuid,omitempty"`
	ValidCode           string  `protobuf:"bytes,36,opt,name=validCode,proto3" json:"validCode,omitempty"`
	Balance             float64 `protobuf:"fixed64,37,opt,name=balance,proto3" json:"balance,omitempty"`
	Recharge            float64 `protobuf:"fixed64,38,opt,name=recharge,proto3" json:"recharge,omitempty"`
	CompanyInfo         string  `protobuf:"bytes,39,opt,name=companyInfo,proto3" json:"companyInfo,omitempty"`
	WithdrawPassword    string  `protobuf:"bytes,40,opt,name=withdrawPassword,proto3" json:"withdrawPassword,omitempty"`
	OldWithdrawPassword string  `protobuf:"bytes,41,opt,name=oldWithdrawPassword,proto3" json:"oldWithdrawPassword,omitempty"`
	LoginIp             string  `protobuf:"bytes,42,opt,name=loginIp,proto3" json:"loginIp,omitempty"`
	LoginRealAddress    string  `protobuf:"bytes,43,opt,name=loginRealAddress,proto3" json:"loginRealAddress,omitempty"`
	LoginSource         string  `protobuf:"bytes,44,opt,name=loginSource,proto3" json:"loginSource,omitempty"`
	LoginSourceName     string  `protobuf:"bytes,45,opt,name=loginSourceName,proto3" json:"loginSourceName,omitempty"`
	LoginDate           int64   `protobuf:"varint,46,opt,name=loginDate,proto3" json:"loginDate,omitempty"`
	PlatformMap         string  `protobuf:"bytes,47,opt,name=platformMap,proto3" json:"platformMap,omitempty"`
	FGQP                string  `protobuf:"bytes,48,opt,name=FGQP,proto3" json:"FGQP,omitempty"`
	KAIYUAN600          string  `protobuf:"bytes,49,opt,name=KAIYUAN600,proto3" json:"KAIYUAN600,omitempty"`
	ZILLIONAIRE         string  `protobuf:"bytes,50,opt,name=ZILLIONAIRE,proto3" json:"ZILLIONAIRE,omitempty"`
	SSOCHESS            string  `protobuf:"bytes,51,opt,name=SSOCHESS,proto3" json:"SSOCHESS,omitempty"`
	FGBY                string  `protobuf:"bytes,52,opt,name=FGBY,proto3" json:"FGBY,omitempty"`
	KYQP                string  `protobuf:"bytes,53,opt,name=KYQP,proto3" json:"KYQP,omitempty"`
	StartDate           int32   `protobuf:"varint,54,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate             int32   `protobuf:"varint,55,opt,name=endDate,proto3" json:"endDate,omitempty"`
	MemberLevelVO       int32   `protobuf:"varint,56,opt,name=memberLevelVO,proto3" json:"memberLevelVO,omitempty"`
	MoneyVO             int32   `protobuf:"varint,57,opt,name=moneyVO,proto3" json:"moneyVO,omitempty"`
	MemberLevelVIP      int32   `protobuf:"varint,58,opt,name=memberLevelVIP,proto3" json:"memberLevelVIP,omitempty"`
	MemberLevelVIPID    int32   `protobuf:"varint,59,opt,name=memberLevelVIPID,proto3" json:"memberLevelVIPID,omitempty"`
	MemberLevelVIPName  string  `protobuf:"bytes,60,opt,name=memberLevelVIPName,proto3" json:"memberLevelVIPName,omitempty"`
	DepositTotalMax     float64 `protobuf:"fixed64,61,opt,name=depositTotalMax,proto3" json:"depositTotalMax,omitempty"`
	DepositTotalMin     float64 `protobuf:"fixed64,62,opt,name=depositTotalMin,proto3" json:"depositTotalMin,omitempty"`
	WithdrawTotalMax    float64 `protobuf:"fixed64,63,opt,name=withdrawTotalMax,proto3" json:"withdrawTotalMax,omitempty"`
	WithdrawTotalMin    float64 `protobuf:"fixed64,64,opt,name=withdrawTotalMin,proto3" json:"withdrawTotalMin,omitempty"`
	TotalPayoffMax      float64 `protobuf:"fixed64,65,opt,name=totalPayoffMax,proto3" json:"totalPayoffMax,omitempty"`
	TotalPayoffMin      float64 `protobuf:"fixed64,66,opt,name=totalPayoffMin,proto3" json:"totalPayoffMin,omitempty"`
	WithdrawNumberMax   int32   `protobuf:"varint,67,opt,name=withdrawNumberMax,proto3" json:"withdrawNumberMax,omitempty"`
	WithdrawNumberMin   int32   `protobuf:"varint,68,opt,name=withdrawNumberMin,proto3" json:"withdrawNumberMin,omitempty"`
	DepositNumberMax    int32   `protobuf:"varint,69,opt,name=depositNumberMax,proto3" json:"depositNumberMax,omitempty"`
	DepositNumberMin    int32   `protobuf:"varint,70,opt,name=depositNumberMin,proto3" json:"depositNumberMin,omitempty"`
	Suffix              string  `protobuf:"bytes,71,opt,name=suffix,proto3" json:"suffix,omitempty"`
	Note                string  `protobuf:"bytes,72,opt,name=note,proto3" json:"note,omitempty"`
	DebitType           int32   `protobuf:"varint,73,opt,name=debitType,proto3" json:"debitType,omitempty"`
	Token               string  `protobuf:"bytes,74,opt,name=token,proto3" json:"token,omitempty"`
	IntegralStartDate   int32   `protobuf:"varint,75,opt,name=integralStartDate,proto3" json:"integralStartDate,omitempty"`
	IntegralEndDate     int32   `protobuf:"varint,76,opt,name=integralEndDate,proto3" json:"integralEndDate,omitempty"`
	BankCardCount       int32   `protobuf:"varint,77,opt,name=bankCardCount,proto3" json:"bankCardCount,omitempty"`
	IsCapital           int32   `protobuf:"varint,78,opt,name=isCapital,proto3" json:"isCapital,omitempty"`
	DamaMultiple        int32   `protobuf:"varint,79,opt,name=damaMultiple,proto3" json:"damaMultiple,omitempty"`
	NeedDama            int32   `protobuf:"varint,80,opt,name=needDama,proto3" json:"needDama,omitempty"`
	InspectionStatus    int32   `protobuf:"varint,81,opt,name=inspectionStatus,proto3" json:"inspectionStatus,omitempty"`
	InspectionId        int32   `protobuf:"varint,82,opt,name=inspectionId,proto3" json:"inspectionId,omitempty"`
	IsHaveSubordinate   int32   `protobuf:"varint,83,opt,name=isHaveSubordinate,proto3" json:"isHaveSubordinate,omitempty"`
	TeamCounts          int32   `protobuf:"varint,84,opt,name=teamCounts,proto3" json:"teamCounts,omitempty"`
	VerifyRedis         bool    `protobuf:"varint,85,opt,name=verifyRedis,proto3" json:"verifyRedis,omitempty"`
	OrderCode           string  `protobuf:"bytes,86,opt,name=orderCode,proto3" json:"orderCode,omitempty"`
	FailId              int32   `protobuf:"varint,87,opt,name=failId,proto3" json:"failId,omitempty"`
}

func (m *RegisterRespData) Reset()         { *m = RegisterRespData{} }
func (m *RegisterRespData) String() string { return proto.CompactTextString(m) }
func (*RegisterRespData) ProtoMessage()    {}
func (*RegisterRespData) Descriptor() ([]byte, []int) {
	return fileDescriptorImgameapiservice, []int{6}
}

func (m *RegisterRespData) GetCreationTime() int64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *RegisterRespData) GetCreationBy() string {
	if m != nil {
		return m.CreationBy
	}
	return ""
}

func (m *RegisterRespData) GetLastUpdatedTime() int64 {
	if m != nil {
		return m.LastUpdatedTime
	}
	return 0
}

func (m *RegisterRespData) GetLastUpdatedBy() string {
	if m != nil {
		return m.LastUpdatedBy
	}
	return ""
}

func (m *RegisterRespData) GetDataSourceKey() string {
	if m != nil {
		return m.DataSourceKey
	}
	return ""
}

func (m *RegisterRespData) GetCurrentUser() string {
	if m != nil {
		return m.CurrentUser
	}
	return ""
}

func (m *RegisterRespData) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RegisterRespData) GetUserSystemId() string {
	if m != nil {
		return m.UserSystemId
	}
	return ""
}

func (m *RegisterRespData) GetProxyLinkCode() string {
	if m != nil {
		return m.ProxyLinkCode
	}
	return ""
}

func (m *RegisterRespData) GetParentId() int32 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *RegisterRespData) GetProxyAccount() string {
	if m != nil {
		return m.ProxyAccount
	}
	return ""
}

func (m *RegisterRespData) GetUserLevelId() int32 {
	if m != nil {
		return m.UserLevelId
	}
	return 0
}

func (m *RegisterRespData) GetMemberLevelName() string {
	if m != nil {
		return m.MemberLevelName
	}
	return ""
}

func (m *RegisterRespData) GetUserAccount() string {
	if m != nil {
		return m.UserAccount
	}
	return ""
}

func (m *RegisterRespData) GetUserPassword() string {
	if m != nil {
		return m.UserPassword
	}
	return ""
}

func (m *RegisterRespData) GetOldUserPassword() string {
	if m != nil {
		return m.OldUserPassword
	}
	return ""
}

func (m *RegisterRespData) GetRegisterIp() string {
	if m != nil {
		return m.RegisterIp
	}
	return ""
}

func (m *RegisterRespData) GetRegisterSource() string {
	if m != nil {
		return m.RegisterSource
	}
	return ""
}

func (m *RegisterRespData) GetRegisterSourceName() string {
	if m != nil {
		return m.RegisterSourceName
	}
	return ""
}

func (m *RegisterRespData) GetRegisterMethodId() int32 {
	if m != nil {
		return m.RegisterMethodId
	}
	return 0
}

func (m *RegisterRespData) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *RegisterRespData) GetBirthday() int32 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *RegisterRespData) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *RegisterRespData) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegisterRespData) GetHeadPortrait() string {
	if m != nil {
		return m.HeadPortrait
	}
	return ""
}

func (m *RegisterRespData) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *RegisterRespData) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *RegisterRespData) GetUserQq() string {
	if m != nil {
		return m.UserQq
	}
	return ""
}

func (m *RegisterRespData) GetUserWx() string {
	if m != nil {
		return m.UserWx
	}
	return ""
}

func (m *RegisterRespData) GetIsFrist() int32 {
	if m != nil {
		return m.IsFrist
	}
	return 0
}

func (m *RegisterRespData) GetIsOwner() int32 {
	if m != nil {
		return m.IsOwner
	}
	return 0
}

func (m *RegisterRespData) GetIsEnable() int32 {
	if m != nil {
		return m.IsEnable
	}
	return 0
}

func (m *RegisterRespData) GetIsFrozen() int32 {
	if m != nil {
		return m.IsFrozen
	}
	return 0
}

func (m *RegisterRespData) GetBundleVersionId() string {
	if m != nil {
		return m.BundleVersionId
	}
	return ""
}

func (m *RegisterRespData) GetAppUuid() string {
	if m != nil {
		return m.AppUuid
	}
	return ""
}

func (m *RegisterRespData) GetValidCode() string {
	if m != nil {
		return m.ValidCode
	}
	return ""
}

func (m *RegisterRespData) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *RegisterRespData) GetRecharge() float64 {
	if m != nil {
		return m.Recharge
	}
	return 0
}

func (m *RegisterRespData) GetCompanyInfo() string {
	if m != nil {
		return m.CompanyInfo
	}
	return ""
}

func (m *RegisterRespData) GetWithdrawPassword() string {
	if m != nil {
		return m.WithdrawPassword
	}
	return ""
}

func (m *RegisterRespData) GetOldWithdrawPassword() string {
	if m != nil {
		return m.OldWithdrawPassword
	}
	return ""
}

func (m *RegisterRespData) GetLoginIp() string {
	if m != nil {
		return m.LoginIp
	}
	return ""
}

func (m *RegisterRespData) GetLoginRealAddress() string {
	if m != nil {
		return m.LoginRealAddress
	}
	return ""
}

func (m *RegisterRespData) GetLoginSource() string {
	if m != nil {
		return m.LoginSource
	}
	return ""
}

func (m *RegisterRespData) GetLoginSourceName() string {
	if m != nil {
		return m.LoginSourceName
	}
	return ""
}

func (m *RegisterRespData) GetLoginDate() int64 {
	if m != nil {
		return m.LoginDate
	}
	return 0
}

func (m *RegisterRespData) GetPlatformMap() string {
	if m != nil {
		return m.PlatformMap
	}
	return ""
}

func (m *RegisterRespData) GetFGQP() string {
	if m != nil {
		return m.FGQP
	}
	return ""
}

func (m *RegisterRespData) GetKAIYUAN600() string {
	if m != nil {
		return m.KAIYUAN600
	}
	return ""
}

func (m *RegisterRespData) GetZILLIONAIRE() string {
	if m != nil {
		return m.ZILLIONAIRE
	}
	return ""
}

func (m *RegisterRespData) GetSSOCHESS() string {
	if m != nil {
		return m.SSOCHESS
	}
	return ""
}

func (m *RegisterRespData) GetFGBY() string {
	if m != nil {
		return m.FGBY
	}
	return ""
}

func (m *RegisterRespData) GetKYQP() string {
	if m != nil {
		return m.KYQP
	}
	return ""
}

func (m *RegisterRespData) GetStartDate() int32 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *RegisterRespData) GetEndDate() int32 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

func (m *RegisterRespData) GetMemberLevelVO() int32 {
	if m != nil {
		return m.MemberLevelVO
	}
	return 0
}

func (m *RegisterRespData) GetMoneyVO() int32 {
	if m != nil {
		return m.MoneyVO
	}
	return 0
}

func (m *RegisterRespData) GetMemberLevelVIP() int32 {
	if m != nil {
		return m.MemberLevelVIP
	}
	return 0
}

func (m *RegisterRespData) GetMemberLevelVIPID() int32 {
	if m != nil {
		return m.MemberLevelVIPID
	}
	return 0
}

func (m *RegisterRespData) GetMemberLevelVIPName() string {
	if m != nil {
		return m.MemberLevelVIPName
	}
	return ""
}

func (m *RegisterRespData) GetDepositTotalMax() float64 {
	if m != nil {
		return m.DepositTotalMax
	}
	return 0
}

func (m *RegisterRespData) GetDepositTotalMin() float64 {
	if m != nil {
		return m.DepositTotalMin
	}
	return 0
}

func (m *RegisterRespData) GetWithdrawTotalMax() float64 {
	if m != nil {
		return m.WithdrawTotalMax
	}
	return 0
}

func (m *RegisterRespData) GetWithdrawTotalMin() float64 {
	if m != nil {
		return m.WithdrawTotalMin
	}
	return 0
}

func (m *RegisterRespData) GetTotalPayoffMax() float64 {
	if m != nil {
		return m.TotalPayoffMax
	}
	return 0
}

func (m *RegisterRespData) GetTotalPayoffMin() float64 {
	if m != nil {
		return m.TotalPayoffMin
	}
	return 0
}

func (m *RegisterRespData) GetWithdrawNumberMax() int32 {
	if m != nil {
		return m.WithdrawNumberMax
	}
	return 0
}

func (m *RegisterRespData) GetWithdrawNumberMin() int32 {
	if m != nil {
		return m.WithdrawNumberMin
	}
	return 0
}

func (m *RegisterRespData) GetDepositNumberMax() int32 {
	if m != nil {
		return m.DepositNumberMax
	}
	return 0
}

func (m *RegisterRespData) GetDepositNumberMin() int32 {
	if m != nil {
		return m.DepositNumberMin
	}
	return 0
}

func (m *RegisterRespData) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

func (m *RegisterRespData) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *RegisterRespData) GetDebitType() int32 {
	if m != nil {
		return m.DebitType
	}
	return 0
}

func (m *RegisterRespData) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RegisterRespData) GetIntegralStartDate() int32 {
	if m != nil {
		return m.IntegralStartDate
	}
	return 0
}

func (m *RegisterRespData) GetIntegralEndDate() int32 {
	if m != nil {
		return m.IntegralEndDate
	}
	return 0
}

func (m *RegisterRespData) GetBankCardCount() int32 {
	if m != nil {
		return m.BankCardCount
	}
	return 0
}

func (m *RegisterRespData) GetIsCapital() int32 {
	if m != nil {
		return m.IsCapital
	}
	return 0
}

func (m *RegisterRespData) GetDamaMultiple() int32 {
	if m != nil {
		return m.DamaMultiple
	}
	return 0
}

func (m *RegisterRespData) GetNeedDama() int32 {
	if m != nil {
		return m.NeedDama
	}
	return 0
}

func (m *RegisterRespData) GetInspectionStatus() int32 {
	if m != nil {
		return m.InspectionStatus
	}
	return 0
}

func (m *RegisterRespData) GetInspectionId() int32 {
	if m != nil {
		return m.InspectionId
	}
	return 0
}

func (m *RegisterRespData) GetIsHaveSubordinate() int32 {
	if m != nil {
		return m.IsHaveSubordinate
	}
	return 0
}

func (m *RegisterRespData) GetTeamCounts() int32 {
	if m != nil {
		return m.TeamCounts
	}
	return 0
}

func (m *RegisterRespData) GetVerifyRedis() bool {
	if m != nil {
		return m.VerifyRedis
	}
	return false
}

func (m *RegisterRespData) GetOrderCode() string {
	if m != nil {
		return m.OrderCode
	}
	return ""
}

func (m *RegisterRespData) GetFailId() int32 {
	if m != nil {
		return m.FailId
	}
	return 0
}

type ReqLogin struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Ip       string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *ReqLogin) Reset()                    { *m = ReqLogin{} }
func (m *ReqLogin) String() string            { return proto.CompactTextString(m) }
func (*ReqLogin) ProtoMessage()               {}
func (*ReqLogin) Descriptor() ([]byte, []int) { return fileDescriptorImgameapiservice, []int{7} }

func (m *ReqLogin) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ReqLogin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ReqLogin) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type ReplyLogin struct {
	Status int32          `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Msg    string         `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Data   *LoginRespData `protobuf:"bytes,3,opt,name=Data" json:"Data,omitempty"`
}

func (m *ReplyLogin) Reset()                    { *m = ReplyLogin{} }
func (m *ReplyLogin) String() string            { return proto.CompactTextString(m) }
func (*ReplyLogin) ProtoMessage()               {}
func (*ReplyLogin) Descriptor() ([]byte, []int) { return fileDescriptorImgameapiservice, []int{8} }

func (m *ReplyLogin) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReplyLogin) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ReplyLogin) GetData() *LoginRespData {
	if m != nil {
		return m.Data
	}
	return nil
}

type LoginRespData struct {
	CreationTime        int64   `protobuf:"varint,1,opt,name=CreationTime,proto3" json:"CreationTime,omitempty"`
	CreationBy          string  `protobuf:"bytes,2,opt,name=CreationBy,proto3" json:"CreationBy,omitempty"`
	LastUpdatedTime     int64   `protobuf:"varint,3,opt,name=LastUpdatedTime,proto3" json:"LastUpdatedTime,omitempty"`
	LastUpdatedBy       string  `protobuf:"bytes,4,opt,name=LastUpdatedBy,proto3" json:"LastUpdatedBy,omitempty"`
	DataSourceKey       string  `protobuf:"bytes,5,opt,name=DataSourceKey,proto3" json:"DataSourceKey,omitempty"`
	CurrentUser         string  `protobuf:"bytes,6,opt,name=CurrentUser,proto3" json:"CurrentUser,omitempty"`
	UserId              int32   `protobuf:"varint,7,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UserSystemId        string  `protobuf:"bytes,8,opt,name=UserSystemId,proto3" json:"UserSystemId,omitempty"`
	ProxyLinkCode       string  `protobuf:"bytes,9,opt,name=ProxyLinkCode,proto3" json:"ProxyLinkCode,omitempty"`
	ParentId            string  `protobuf:"bytes,11,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	ProxyAccount        string  `protobuf:"bytes,12,opt,name=ProxyAccount,proto3" json:"ProxyAccount,omitempty"`
	UserLevelId         int32   `protobuf:"varint,13,opt,name=UserLevelId,proto3" json:"UserLevelId,omitempty"`
	MemberLevelName     string  `protobuf:"bytes,14,opt,name=MemberLevelName,proto3" json:"MemberLevelName,omitempty"`
	UserAccount         string  `protobuf:"bytes,15,opt,name=UserAccount,proto3" json:"UserAccount,omitempty"`
	UserPassword        string  `protobuf:"bytes,16,opt,name=UserPassword,proto3" json:"UserPassword,omitempty"`
	OldUserPassword     string  `protobuf:"bytes,17,opt,name=OldUserPassword,proto3" json:"OldUserPassword,omitempty"`
	RegisterIp          string  `protobuf:"bytes,18,opt,name=RegisterIp,proto3" json:"RegisterIp,omitempty"`
	RegisterSource      string  `protobuf:"bytes,19,opt,name=RegisterSource,proto3" json:"RegisterSource,omitempty"`
	RegisterSourceName  string  `protobuf:"bytes,20,opt,name=RegisterSourceName,proto3" json:"RegisterSourceName,omitempty"`
	RegisterMethodId    string  `protobuf:"bytes,21,opt,name=RegisterMethodId,proto3" json:"RegisterMethodId,omitempty"`
	Sex                 string  `protobuf:"bytes,22,opt,name=Sex,proto3" json:"Sex,omitempty"`
	Birthday            string  `protobuf:"bytes,23,opt,name=Birthday,proto3" json:"Birthday,omitempty"`
	NickName            string  `protobuf:"bytes,24,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Email               string  `protobuf:"bytes,25,opt,name=Email,proto3" json:"Email,omitempty"`
	UserName            string  `protobuf:"bytes,26,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Telephone           string  `protobuf:"bytes,27,opt,name=Telephone,proto3" json:"Telephone,omitempty"`
	UserQq              string  `protobuf:"bytes,28,opt,name=UserQq,proto3" json:"UserQq,omitempty"`
	UserWx              string  `protobuf:"bytes,29,opt,name=UserWx,proto3" json:"UserWx,omitempty"`
	IsFrist             int32   `protobuf:"varint,30,opt,name=IsFrist,proto3" json:"IsFrist,omitempty"`
	IsOwner             int32   `protobuf:"varint,31,opt,name=IsOwner,proto3" json:"IsOwner,omitempty"`
	IsEnable            int32   `protobuf:"varint,32,opt,name=IsEnable,proto3" json:"IsEnable,omitempty"`
	IsFrozen            int32   `protobuf:"varint,33,opt,name=IsFrozen,proto3" json:"IsFrozen,omitempty"`
	BundleVersionId     string  `protobuf:"bytes,34,opt,name=BundleVersionId,proto3" json:"BundleVersionId,omitempty"`
	AppUuid             string  `protobuf:"bytes,35,opt,name=AppUuid,proto3" json:"AppUuid,omitempty"`
	ValidCode           string  `protobuf:"bytes,36,opt,name=ValidCode,proto3" json:"ValidCode,omitempty"`
	Balance             float32 `protobuf:"fixed32,37,opt,name=Balance,proto3" json:"Balance,omitempty"`
	Recharge            float32 `protobuf:"fixed32,38,opt,name=Recharge,proto3" json:"Recharge,omitempty"`
	CompanyInfo         string  `protobuf:"bytes,39,opt,name=CompanyInfo,proto3" json:"CompanyInfo,omitempty"`
	WithdrawPassword    string  `protobuf:"bytes,40,opt,name=WithdrawPassword,proto3" json:"WithdrawPassword,omitempty"`
	OldWithdrawPassword string  `protobuf:"bytes,41,opt,name=OldWithdrawPassword,proto3" json:"OldWithdrawPassword,omitempty"`
	LoginIp             string  `protobuf:"bytes,42,opt,name=LoginIp,proto3" json:"LoginIp,omitempty"`
	LoginRealAddress    string  `protobuf:"bytes,43,opt,name=LoginRealAddress,proto3" json:"LoginRealAddress,omitempty"`
	LoginDate           int64   `protobuf:"varint,44,opt,name=LoginDate,proto3" json:"LoginDate,omitempty"`
	FGQP                string  `protobuf:"bytes,45,opt,name=FGQP,proto3" json:"FGQP,omitempty"`
	KAIYUAN600          string  `protobuf:"bytes,46,opt,name=KAIYUAN600,proto3" json:"KAIYUAN600,omitempty"`
	ZILLIONAIRE         string  `protobuf:"bytes,47,opt,name=ZILLIONAIRE,proto3" json:"ZILLIONAIRE,omitempty"`
	SSOCHESS            string  `protobuf:"bytes,48,opt,name=SSOCHESS,proto3" json:"SSOCHESS,omitempty"`
	FGBY                string  `protobuf:"bytes,49,opt,name=FGBY,proto3" json:"FGBY,omitempty"`
	KYQP                string  `protobuf:"bytes,50,opt,name=KYQP,proto3" json:"KYQP,omitempty"`
	StartDate           string  `protobuf:"bytes,51,opt,name=StartDate,proto3" json:"StartDate,omitempty"`
	EndDate             string  `protobuf:"bytes,52,opt,name=EndDate,proto3" json:"EndDate,omitempty"`
	MemberLevelVIP      string  `protobuf:"bytes,53,opt,name=MemberLevelVIP,proto3" json:"MemberLevelVIP,omitempty"`
	MemberLevelVIPID    string  `protobuf:"bytes,54,opt,name=MemberLevelVIPID,proto3" json:"MemberLevelVIPID,omitempty"`
	MemberLevelVIPName  string  `protobuf:"bytes,55,opt,name=MemberLevelVIPName,proto3" json:"MemberLevelVIPName,omitempty"`
	DepositTotalMax     string  `protobuf:"bytes,56,opt,name=DepositTotalMax,proto3" json:"DepositTotalMax,omitempty"`
	DepositTotalMin     string  `protobuf:"bytes,57,opt,name=DepositTotalMin,proto3" json:"DepositTotalMin,omitempty"`
	WithdrawTotalMax    string  `protobuf:"bytes,58,opt,name=WithdrawTotalMax,proto3" json:"WithdrawTotalMax,omitempty"`
	WithdrawTotalMin    string  `protobuf:"bytes,59,opt,name=WithdrawTotalMin,proto3" json:"WithdrawTotalMin,omitempty"`
	TotalPayoffMax      string  `protobuf:"bytes,61,opt,name=TotalPayoffMax,proto3" json:"TotalPayoffMax,omitempty"`
	TotalPayoffMin      string  `protobuf:"bytes,62,opt,name=TotalPayoffMin,proto3" json:"TotalPayoffMin,omitempty"`
	WithdrawNumberMax   string  `protobuf:"bytes,63,opt,name=WithdrawNumberMax,proto3" json:"WithdrawNumberMax,omitempty"`
	WithdrawNumberMin   string  `protobuf:"bytes,64,opt,name=WithdrawNumberMin,proto3" json:"WithdrawNumberMin,omitempty"`
	DepositNumberMax    string  `protobuf:"bytes,65,opt,name=DepositNumberMax,proto3" json:"DepositNumberMax,omitempty"`
	DepositNumberMin    string  `protobuf:"bytes,66,opt,name=DepositNumberMin,proto3" json:"DepositNumberMin,omitempty"`
	Suffix              string  `protobuf:"bytes,67,opt,name=Suffix,proto3" json:"Suffix,omitempty"`
	Note                string  `protobuf:"bytes,68,opt,name=Note,proto3" json:"Note,omitempty"`
	DebitType           string  `protobuf:"bytes,69,opt,name=DebitType,proto3" json:"DebitType,omitempty"`
	Token               string  `protobuf:"bytes,70,opt,name=Token,proto3" json:"Token,omitempty"`
	IntegralStartDate   string  `protobuf:"bytes,71,opt,name=IntegralStartDate,proto3" json:"IntegralStartDate,omitempty"`
	IntegralEndDate     string  `protobuf:"bytes,72,opt,name=IntegralEndDate,proto3" json:"IntegralEndDate,omitempty"`
	BankCardCount       int32   `protobuf:"varint,73,opt,name=BankCardCount,proto3" json:"BankCardCount,omitempty"`
	IsCapital           string  `protobuf:"bytes,74,opt,name=IsCapital,proto3" json:"IsCapital,omitempty"`
	DamaMultiple        string  `protobuf:"bytes,75,opt,name=DamaMultiple,proto3" json:"DamaMultiple,omitempty"`
	NeedDama            string  `protobuf:"bytes,76,opt,name=NeedDama,proto3" json:"NeedDama,omitempty"`
	InspectionStatus    string  `protobuf:"bytes,77,opt,name=InspectionStatus,proto3" json:"InspectionStatus,omitempty"`
	InspectionId        string  `protobuf:"bytes,78,opt,name=InspectionId,proto3" json:"InspectionId,omitempty"`
	IsHaveSubordinate   string  `protobuf:"bytes,79,opt,name=IsHaveSubordinate,proto3" json:"IsHaveSubordinate,omitempty"`
	TeamCounts          string  `protobuf:"bytes,80,opt,name=TeamCounts,proto3" json:"TeamCounts,omitempty"`
	VerifyRedis         bool    `protobuf:"varint,81,opt,name=VerifyRedis,proto3" json:"VerifyRedis,omitempty"`
	OrderCode           string  `protobuf:"bytes,82,opt,name=OrderCode,proto3" json:"OrderCode,omitempty"`
}

func (m *LoginRespData) Reset()                    { *m = LoginRespData{} }
func (m *LoginRespData) String() string            { return proto.CompactTextString(m) }
func (*LoginRespData) ProtoMessage()               {}
func (*LoginRespData) Descriptor() ([]byte, []int) { return fileDescriptorImgameapiservice, []int{9} }

func (m *LoginRespData) GetCreationTime() int64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *LoginRespData) GetCreationBy() string {
	if m != nil {
		return m.CreationBy
	}
	return ""
}

func (m *LoginRespData) GetLastUpdatedTime() int64 {
	if m != nil {
		return m.LastUpdatedTime
	}
	return 0
}

func (m *LoginRespData) GetLastUpdatedBy() string {
	if m != nil {
		return m.LastUpdatedBy
	}
	return ""
}

func (m *LoginRespData) GetDataSourceKey() string {
	if m != nil {
		return m.DataSourceKey
	}
	return ""
}

func (m *LoginRespData) GetCurrentUser() string {
	if m != nil {
		return m.CurrentUser
	}
	return ""
}

func (m *LoginRespData) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *LoginRespData) GetUserSystemId() string {
	if m != nil {
		return m.UserSystemId
	}
	return ""
}

func (m *LoginRespData) GetProxyLinkCode() string {
	if m != nil {
		return m.ProxyLinkCode
	}
	return ""
}

func (m *LoginRespData) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *LoginRespData) GetProxyAccount() string {
	if m != nil {
		return m.ProxyAccount
	}
	return ""
}

func (m *LoginRespData) GetUserLevelId() int32 {
	if m != nil {
		return m.UserLevelId
	}
	return 0
}

func (m *LoginRespData) GetMemberLevelName() string {
	if m != nil {
		return m.MemberLevelName
	}
	return ""
}

func (m *LoginRespData) GetUserAccount() string {
	if m != nil {
		return m.UserAccount
	}
	return ""
}

func (m *LoginRespData) GetUserPassword() string {
	if m != nil {
		return m.UserPassword
	}
	return ""
}

func (m *LoginRespData) GetOldUserPassword() string {
	if m != nil {
		return m.OldUserPassword
	}
	return ""
}

func (m *LoginRespData) GetRegisterIp() string {
	if m != nil {
		return m.RegisterIp
	}
	return ""
}

func (m *LoginRespData) GetRegisterSource() string {
	if m != nil {
		return m.RegisterSource
	}
	return ""
}

func (m *LoginRespData) GetRegisterSourceName() string {
	if m != nil {
		return m.RegisterSourceName
	}
	return ""
}

func (m *LoginRespData) GetRegisterMethodId() string {
	if m != nil {
		return m.RegisterMethodId
	}
	return ""
}

func (m *LoginRespData) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *LoginRespData) GetBirthday() string {
	if m != nil {
		return m.Birthday
	}
	return ""
}

func (m *LoginRespData) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *LoginRespData) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LoginRespData) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *LoginRespData) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *LoginRespData) GetUserQq() string {
	if m != nil {
		return m.UserQq
	}
	return ""
}

func (m *LoginRespData) GetUserWx() string {
	if m != nil {
		return m.UserWx
	}
	return ""
}

func (m *LoginRespData) GetIsFrist() int32 {
	if m != nil {
		return m.IsFrist
	}
	return 0
}

func (m *LoginRespData) GetIsOwner() int32 {
	if m != nil {
		return m.IsOwner
	}
	return 0
}

func (m *LoginRespData) GetIsEnable() int32 {
	if m != nil {
		return m.IsEnable
	}
	return 0
}

func (m *LoginRespData) GetIsFrozen() int32 {
	if m != nil {
		return m.IsFrozen
	}
	return 0
}

func (m *LoginRespData) GetBundleVersionId() string {
	if m != nil {
		return m.BundleVersionId
	}
	return ""
}

func (m *LoginRespData) GetAppUuid() string {
	if m != nil {
		return m.AppUuid
	}
	return ""
}

func (m *LoginRespData) GetValidCode() string {
	if m != nil {
		return m.ValidCode
	}
	return ""
}

func (m *LoginRespData) GetBalance() float32 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *LoginRespData) GetRecharge() float32 {
	if m != nil {
		return m.Recharge
	}
	return 0
}

func (m *LoginRespData) GetCompanyInfo() string {
	if m != nil {
		return m.CompanyInfo
	}
	return ""
}

func (m *LoginRespData) GetWithdrawPassword() string {
	if m != nil {
		return m.WithdrawPassword
	}
	return ""
}

func (m *LoginRespData) GetOldWithdrawPassword() string {
	if m != nil {
		return m.OldWithdrawPassword
	}
	return ""
}

func (m *LoginRespData) GetLoginIp() string {
	if m != nil {
		return m.LoginIp
	}
	return ""
}

func (m *LoginRespData) GetLoginRealAddress() string {
	if m != nil {
		return m.LoginRealAddress
	}
	return ""
}

func (m *LoginRespData) GetLoginDate() int64 {
	if m != nil {
		return m.LoginDate
	}
	return 0
}

func (m *LoginRespData) GetFGQP() string {
	if m != nil {
		return m.FGQP
	}
	return ""
}

func (m *LoginRespData) GetKAIYUAN600() string {
	if m != nil {
		return m.KAIYUAN600
	}
	return ""
}

func (m *LoginRespData) GetZILLIONAIRE() string {
	if m != nil {
		return m.ZILLIONAIRE
	}
	return ""
}

func (m *LoginRespData) GetSSOCHESS() string {
	if m != nil {
		return m.SSOCHESS
	}
	return ""
}

func (m *LoginRespData) GetFGBY() string {
	if m != nil {
		return m.FGBY
	}
	return ""
}

func (m *LoginRespData) GetKYQP() string {
	if m != nil {
		return m.KYQP
	}
	return ""
}

func (m *LoginRespData) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *LoginRespData) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *LoginRespData) GetMemberLevelVIP() string {
	if m != nil {
		return m.MemberLevelVIP
	}
	return ""
}

func (m *LoginRespData) GetMemberLevelVIPID() string {
	if m != nil {
		return m.MemberLevelVIPID
	}
	return ""
}

func (m *LoginRespData) GetMemberLevelVIPName() string {
	if m != nil {
		return m.MemberLevelVIPName
	}
	return ""
}

func (m *LoginRespData) GetDepositTotalMax() string {
	if m != nil {
		return m.DepositTotalMax
	}
	return ""
}

func (m *LoginRespData) GetDepositTotalMin() string {
	if m != nil {
		return m.DepositTotalMin
	}
	return ""
}

func (m *LoginRespData) GetWithdrawTotalMax() string {
	if m != nil {
		return m.WithdrawTotalMax
	}
	return ""
}

func (m *LoginRespData) GetWithdrawTotalMin() string {
	if m != nil {
		return m.WithdrawTotalMin
	}
	return ""
}

func (m *LoginRespData) GetTotalPayoffMax() string {
	if m != nil {
		return m.TotalPayoffMax
	}
	return ""
}

func (m *LoginRespData) GetTotalPayoffMin() string {
	if m != nil {
		return m.TotalPayoffMin
	}
	return ""
}

func (m *LoginRespData) GetWithdrawNumberMax() string {
	if m != nil {
		return m.WithdrawNumberMax
	}
	return ""
}

func (m *LoginRespData) GetWithdrawNumberMin() string {
	if m != nil {
		return m.WithdrawNumberMin
	}
	return ""
}

func (m *LoginRespData) GetDepositNumberMax() string {
	if m != nil {
		return m.DepositNumberMax
	}
	return ""
}

func (m *LoginRespData) GetDepositNumberMin() string {
	if m != nil {
		return m.DepositNumberMin
	}
	return ""
}

func (m *LoginRespData) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

func (m *LoginRespData) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *LoginRespData) GetDebitType() string {
	if m != nil {
		return m.DebitType
	}
	return ""
}

func (m *LoginRespData) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LoginRespData) GetIntegralStartDate() string {
	if m != nil {
		return m.IntegralStartDate
	}
	return ""
}

func (m *LoginRespData) GetIntegralEndDate() string {
	if m != nil {
		return m.IntegralEndDate
	}
	return ""
}

func (m *LoginRespData) GetBankCardCount() int32 {
	if m != nil {
		return m.BankCardCount
	}
	return 0
}

func (m *LoginRespData) GetIsCapital() string {
	if m != nil {
		return m.IsCapital
	}
	return ""
}

func (m *LoginRespData) GetDamaMultiple() string {
	if m != nil {
		return m.DamaMultiple
	}
	return ""
}

func (m *LoginRespData) GetNeedDama() string {
	if m != nil {
		return m.NeedDama
	}
	return ""
}

func (m *LoginRespData) GetInspectionStatus() string {
	if m != nil {
		return m.InspectionStatus
	}
	return ""
}

func (m *LoginRespData) GetInspectionId() string {
	if m != nil {
		return m.InspectionId
	}
	return ""
}

func (m *LoginRespData) GetIsHaveSubordinate() string {
	if m != nil {
		return m.IsHaveSubordinate
	}
	return ""
}

func (m *LoginRespData) GetTeamCounts() string {
	if m != nil {
		return m.TeamCounts
	}
	return ""
}

func (m *LoginRespData) GetVerifyRedis() bool {
	if m != nil {
		return m.VerifyRedis
	}
	return false
}

func (m *LoginRespData) GetOrderCode() string {
	if m != nil {
		return m.OrderCode
	}
	return ""
}

type ReqMemberBalance struct {
	Token            string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Cookie           string `protobuf:"bytes,2,opt,name=cookie,proto3" json:"cookie,omitempty"`
	UpdateBlanceFlag string `protobuf:"bytes,3,opt,name=updateBlanceFlag,proto3" json:"updateBlanceFlag,omitempty"`
}

func (m *ReqMemberBalance) Reset()         { *m = ReqMemberBalance{} }
func (m *ReqMemberBalance) String() string { return proto.CompactTextString(m) }
func (*ReqMemberBalance) ProtoMessage()    {}
func (*ReqMemberBalance) Descriptor() ([]byte, []int) {
	return fileDescriptorImgameapiservice, []int{10}
}

func (m *ReqMemberBalance) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ReqMemberBalance) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

func (m *ReqMemberBalance) GetUpdateBlanceFlag() string {
	if m != nil {
		return m.UpdateBlanceFlag
	}
	return ""
}

type ReplyMemberBalance struct {
	Status int32   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Data   float32 `protobuf:"fixed32,2,opt,name=data,proto3" json:"data,omitempty"`
	Msg    string  `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *ReplyMemberBalance) Reset()         { *m = ReplyMemberBalance{} }
func (m *ReplyMemberBalance) String() string { return proto.CompactTextString(m) }
func (*ReplyMemberBalance) ProtoMessage()    {}
func (*ReplyMemberBalance) Descriptor() ([]byte, []int) {
	return fileDescriptorImgameapiservice, []int{11}
}

func (m *ReplyMemberBalance) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReplyMemberBalance) GetData() float32 {
	if m != nil {
		return m.Data
	}
	return 0
}

func (m *ReplyMemberBalance) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*GetAccountTokenMsg)(nil), "imgameapiservice.GetAccountTokenMsg")
	proto.RegisterType((*GetAccountTokenMsgReply)(nil), "imgameapiservice.GetAccountTokenMsgReply")
	proto.RegisterType((*VerifyAccountTokenMsg)(nil), "imgameapiservice.VerifyAccountTokenMsg")
	proto.RegisterType((*VerifyAccountTokenMsgReply)(nil), "imgameapiservice.VerifyAccountTokenMsgReply")
	proto.RegisterType((*ReqRegister)(nil), "imgameapiservice.ReqRegister")
	proto.RegisterType((*ReplyRegister)(nil), "imgameapiservice.ReplyRegister")
	proto.RegisterType((*RegisterRespData)(nil), "imgameapiservice.RegisterRespData")
	proto.RegisterType((*ReqLogin)(nil), "imgameapiservice.ReqLogin")
	proto.RegisterType((*ReplyLogin)(nil), "imgameapiservice.ReplyLogin")
	proto.RegisterType((*LoginRespData)(nil), "imgameapiservice.LoginRespData")
	proto.RegisterType((*ReqMemberBalance)(nil), "imgameapiservice.ReqMemberBalance")
	proto.RegisterType((*ReplyMemberBalance)(nil), "imgameapiservice.ReplyMemberBalance")
	proto.RegisterEnum("imgameapiservice.GameApiServiceResultCode", GameApiServiceResultCode_name, GameApiServiceResultCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ImGameApiService service

type ImGameApiServiceClient interface {
	// 注册
	Register(ctx context.Context, in *ReqRegister, opts ...grpc.CallOption) (*ReplyRegister, error)
	// 登录
	Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*ReplyLogin, error)
	// 获取会员当前余额
	FindMemberBalance(ctx context.Context, in *ReqMemberBalance, opts ...grpc.CallOption) (*ReplyMemberBalance, error)
	// ---------------------------------- 以下为原服务协议, 暂时保留 ----------------------------------
	// 获取帐户token
	GetAccountToken(ctx context.Context, in *GetAccountTokenMsg, opts ...grpc.CallOption) (*GetAccountTokenMsgReply, error)
	// 验证帐户token
	VerifyAccountToken(ctx context.Context, in *VerifyAccountTokenMsg, opts ...grpc.CallOption) (*VerifyAccountTokenMsgReply, error)
}

type imGameApiServiceClient struct {
	cc *grpc.ClientConn
}

func NewImGameApiServiceClient(cc *grpc.ClientConn) ImGameApiServiceClient {
	return &imGameApiServiceClient{cc}
}

func (c *imGameApiServiceClient) Register(ctx context.Context, in *ReqRegister, opts ...grpc.CallOption) (*ReplyRegister, error) {
	out := new(ReplyRegister)
	err := grpc.Invoke(ctx, "/imgameapiservice.ImGameApiService/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imGameApiServiceClient) Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*ReplyLogin, error) {
	out := new(ReplyLogin)
	err := grpc.Invoke(ctx, "/imgameapiservice.ImGameApiService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imGameApiServiceClient) FindMemberBalance(ctx context.Context, in *ReqMemberBalance, opts ...grpc.CallOption) (*ReplyMemberBalance, error) {
	out := new(ReplyMemberBalance)
	err := grpc.Invoke(ctx, "/imgameapiservice.ImGameApiService/FindMemberBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imGameApiServiceClient) GetAccountToken(ctx context.Context, in *GetAccountTokenMsg, opts ...grpc.CallOption) (*GetAccountTokenMsgReply, error) {
	out := new(GetAccountTokenMsgReply)
	err := grpc.Invoke(ctx, "/imgameapiservice.ImGameApiService/GetAccountToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imGameApiServiceClient) VerifyAccountToken(ctx context.Context, in *VerifyAccountTokenMsg, opts ...grpc.CallOption) (*VerifyAccountTokenMsgReply, error) {
	out := new(VerifyAccountTokenMsgReply)
	err := grpc.Invoke(ctx, "/imgameapiservice.ImGameApiService/VerifyAccountToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImGameApiService service

type ImGameApiServiceServer interface {
	// 注册
	Register(context.Context, *ReqRegister) (*ReplyRegister, error)
	// 登录
	Login(context.Context, *ReqLogin) (*ReplyLogin, error)
	// 获取会员当前余额
	FindMemberBalance(context.Context, *ReqMemberBalance) (*ReplyMemberBalance, error)
	// ---------------------------------- 以下为原服务协议, 暂时保留 ----------------------------------
	// 获取帐户token
	GetAccountToken(context.Context, *GetAccountTokenMsg) (*GetAccountTokenMsgReply, error)
	// 验证帐户token
	VerifyAccountToken(context.Context, *VerifyAccountTokenMsg) (*VerifyAccountTokenMsgReply, error)
}

func RegisterImGameApiServiceServer(s *grpc.Server, srv ImGameApiServiceServer) {
	s.RegisterService(&_ImGameApiService_serviceDesc, srv)
}

func _ImGameApiService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImGameApiServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imgameapiservice.ImGameApiService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImGameApiServiceServer).Register(ctx, req.(*ReqRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImGameApiService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImGameApiServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imgameapiservice.ImGameApiService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImGameApiServiceServer).Login(ctx, req.(*ReqLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImGameApiService_FindMemberBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMemberBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImGameApiServiceServer).FindMemberBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imgameapiservice.ImGameApiService/FindMemberBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImGameApiServiceServer).FindMemberBalance(ctx, req.(*ReqMemberBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImGameApiService_GetAccountToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountTokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImGameApiServiceServer).GetAccountToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imgameapiservice.ImGameApiService/GetAccountToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImGameApiServiceServer).GetAccountToken(ctx, req.(*GetAccountTokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImGameApiService_VerifyAccountToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAccountTokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImGameApiServiceServer).VerifyAccountToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imgameapiservice.ImGameApiService/VerifyAccountToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImGameApiServiceServer).VerifyAccountToken(ctx, req.(*VerifyAccountTokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImGameApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imgameapiservice.ImGameApiService",
	HandlerType: (*ImGameApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ImGameApiService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ImGameApiService_Login_Handler,
		},
		{
			MethodName: "FindMemberBalance",
			Handler:    _ImGameApiService_FindMemberBalance_Handler,
		},
		{
			MethodName: "GetAccountToken",
			Handler:    _ImGameApiService_GetAccountToken_Handler,
		},
		{
			MethodName: "VerifyAccountToken",
			Handler:    _ImGameApiService_VerifyAccountToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/imgameapiservice/imgameapiservice.proto",
}

func (m *GetAccountTokenMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetAccountTokenMsgReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountTokenMsgReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResultCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.ResultCode))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	return i, nil
}

func (m *VerifyAccountTokenMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyAccountTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *VerifyAccountTokenMsgReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyAccountTokenMsgReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResultCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.ResultCode))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *ReqRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRegister) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserAccount) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.UserAccount)))
		i += copy(dAtA[i:], m.UserAccount)
	}
	if len(m.UserPassword) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.UserPassword)))
		i += copy(dAtA[i:], m.UserPassword)
	}
	if len(m.ConfirmPwd) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.ConfirmPwd)))
		i += copy(dAtA[i:], m.ConfirmPwd)
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if len(m.ValidCode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.ValidCode)))
		i += copy(dAtA[i:], m.ValidCode)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.UserQq) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.UserQq)))
		i += copy(dAtA[i:], m.UserQq)
	}
	if len(m.UserWx) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.UserWx)))
		i += copy(dAtA[i:], m.UserWx)
	}
	if len(m.Telephone) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Telephone)))
		i += copy(dAtA[i:], m.Telephone)
	}
	if len(m.PhoneCode) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.PhoneCode)))
		i += copy(dAtA[i:], m.PhoneCode)
	}
	if len(m.BundleVersionId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.BundleVersionId)))
		i += copy(dAtA[i:], m.BundleVersionId)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.RegisterSourceName) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.RegisterSourceName)))
		i += copy(dAtA[i:], m.RegisterSourceName)
	}
	if len(m.AppUuid) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.AppUuid)))
		i += copy(dAtA[i:], m.AppUuid)
	}
	if len(m.ProxyLinkCode) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.ProxyLinkCode)))
		i += copy(dAtA[i:], m.ProxyLinkCode)
	}
	if len(m.RegisterMethodId) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.RegisterMethodId)))
		i += copy(dAtA[i:], m.RegisterMethodId)
	}
	return i, nil
}

func (m *ReplyRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyRegister) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.Status))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *RegisterRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreationTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.CreationTime))
	}
	if len(m.CreationBy) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.CreationBy)))
		i += copy(dAtA[i:], m.CreationBy)
	}
	if m.LastUpdatedTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.LastUpdatedTime))
	}
	if len(m.LastUpdatedBy) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.LastUpdatedBy)))
		i += copy(dAtA[i:], m.LastUpdatedBy)
	}
	if len(m.DataSourceKey) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.DataSourceKey)))
		i += copy(dAtA[i:], m.DataSourceKey)
	}
	if len(m.CurrentUser) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.CurrentUser)))
		i += copy(dAtA[i:], m.CurrentUser)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.UserSystemId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.UserSystemId)))
		i += copy(dAtA[i:], m.UserSystemId)
	}
	if len(m.ProxyLinkCode) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.ProxyLinkCode)))
		i += copy(dAtA[i:], m.ProxyLinkCode)
	}
	if m.ParentId != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.ParentId))
	}
	if len(m.ProxyAccount) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.ProxyAccount)))
		i += copy(dAtA[i:], m.ProxyAccount)
	}
	if m.UserLevelId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.UserLevelId))
	}
	if len(m.MemberLevelName) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.MemberLevelName)))
		i += copy(dAtA[i:], m.MemberLevelName)
	}
	if len(m.UserAccount) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.UserAccount)))
		i += copy(dAtA[i:], m.UserAccount)
	}
	if len(m.UserPassword) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.UserPassword)))
		i += copy(dAtA[i:], m.UserPassword)
	}
	if len(m.OldUserPassword) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.OldUserPassword)))
		i += copy(dAtA[i:], m.OldUserPassword)
	}
	if len(m.RegisterIp) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.RegisterIp)))
		i += copy(dAtA[i:], m.RegisterIp)
	}
	if len(m.RegisterSource) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.RegisterSource)))
		i += copy(dAtA[i:], m.RegisterSource)
	}
	if len(m.RegisterSourceName) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.RegisterSourceName)))
		i += copy(dAtA[i:], m.RegisterSourceName)
	}
	if m.RegisterMethodId != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.RegisterMethodId))
	}
	if m.Sex != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.Sex))
	}
	if m.Birthday != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.Birthday))
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.HeadPortrait) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.HeadPortrait)))
		i += copy(dAtA[i:], m.HeadPortrait)
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if len(m.Telephone) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Telephone)))
		i += copy(dAtA[i:], m.Telephone)
	}
	if len(m.UserQq) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.UserQq)))
		i += copy(dAtA[i:], m.UserQq)
	}
	if len(m.UserWx) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.UserWx)))
		i += copy(dAtA[i:], m.UserWx)
	}
	if m.IsFrist != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.IsFrist))
	}
	if m.IsOwner != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.IsOwner))
	}
	if m.IsEnable != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.IsEnable))
	}
	if m.IsFrozen != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.IsFrozen))
	}
	if len(m.BundleVersionId) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.BundleVersionId)))
		i += copy(dAtA[i:], m.BundleVersionId)
	}
	if len(m.AppUuid) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.AppUuid)))
		i += copy(dAtA[i:], m.AppUuid)
	}
	if len(m.ValidCode) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.ValidCode)))
		i += copy(dAtA[i:], m.ValidCode)
	}
	if m.Balance != 0 {
		dAtA[i] = 0xa9
		i++
		dAtA[i] = 0x2
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Balance))))
		i += 8
	}
	if m.Recharge != 0 {
		dAtA[i] = 0xb1
		i++
		dAtA[i] = 0x2
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Recharge))))
		i += 8
	}
	if len(m.CompanyInfo) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.CompanyInfo)))
		i += copy(dAtA[i:], m.CompanyInfo)
	}
	if len(m.WithdrawPassword) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.WithdrawPassword)))
		i += copy(dAtA[i:], m.WithdrawPassword)
	}
	if len(m.OldWithdrawPassword) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.OldWithdrawPassword)))
		i += copy(dAtA[i:], m.OldWithdrawPassword)
	}
	if len(m.LoginIp) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.LoginIp)))
		i += copy(dAtA[i:], m.LoginIp)
	}
	if len(m.LoginRealAddress) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.LoginRealAddress)))
		i += copy(dAtA[i:], m.LoginRealAddress)
	}
	if len(m.LoginSource) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.LoginSource)))
		i += copy(dAtA[i:], m.LoginSource)
	}
	if len(m.LoginSourceName) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.LoginSourceName)))
		i += copy(dAtA[i:], m.LoginSourceName)
	}
	if m.LoginDate != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.LoginDate))
	}
	if len(m.PlatformMap) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.PlatformMap)))
		i += copy(dAtA[i:], m.PlatformMap)
	}
	if len(m.FGQP) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.FGQP)))
		i += copy(dAtA[i:], m.FGQP)
	}
	if len(m.KAIYUAN600) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.KAIYUAN600)))
		i += copy(dAtA[i:], m.KAIYUAN600)
	}
	if len(m.ZILLIONAIRE) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.ZILLIONAIRE)))
		i += copy(dAtA[i:], m.ZILLIONAIRE)
	}
	if len(m.SSOCHESS) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.SSOCHESS)))
		i += copy(dAtA[i:], m.SSOCHESS)
	}
	if len(m.FGBY) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.FGBY)))
		i += copy(dAtA[i:], m.FGBY)
	}
	if len(m.KYQP) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.KYQP)))
		i += copy(dAtA[i:], m.KYQP)
	}
	if m.StartDate != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.StartDate))
	}
	if m.EndDate != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.EndDate))
	}
	if m.MemberLevelVO != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.MemberLevelVO))
	}
	if m.MoneyVO != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.MoneyVO))
	}
	if m.MemberLevelVIP != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.MemberLevelVIP))
	}
	if m.MemberLevelVIPID != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.MemberLevelVIPID))
	}
	if len(m.MemberLevelVIPName) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.MemberLevelVIPName)))
		i += copy(dAtA[i:], m.MemberLevelVIPName)
	}
	if m.DepositTotalMax != 0 {
		dAtA[i] = 0xe9
		i++
		dAtA[i] = 0x3
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DepositTotalMax))))
		i += 8
	}
	if m.DepositTotalMin != 0 {
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x3
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DepositTotalMin))))
		i += 8
	}
	if m.WithdrawTotalMax != 0 {
		dAtA[i] = 0xf9
		i++
		dAtA[i] = 0x3
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.WithdrawTotalMax))))
		i += 8
	}
	if m.WithdrawTotalMin != 0 {
		dAtA[i] = 0x81
		i++
		dAtA[i] = 0x4
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.WithdrawTotalMin))))
		i += 8
	}
	if m.TotalPayoffMax != 0 {
		dAtA[i] = 0x89
		i++
		dAtA[i] = 0x4
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TotalPayoffMax))))
		i += 8
	}
	if m.TotalPayoffMin != 0 {
		dAtA[i] = 0x91
		i++
		dAtA[i] = 0x4
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TotalPayoffMin))))
		i += 8
	}
	if m.WithdrawNumberMax != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.WithdrawNumberMax))
	}
	if m.WithdrawNumberMin != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.WithdrawNumberMin))
	}
	if m.DepositNumberMax != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.DepositNumberMax))
	}
	if m.DepositNumberMin != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.DepositNumberMin))
	}
	if len(m.Suffix) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Suffix)))
		i += copy(dAtA[i:], m.Suffix)
	}
	if len(m.Note) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Note)))
		i += copy(dAtA[i:], m.Note)
	}
	if m.DebitType != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.DebitType))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.IntegralStartDate != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.IntegralStartDate))
	}
	if m.IntegralEndDate != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.IntegralEndDate))
	}
	if m.BankCardCount != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.BankCardCount))
	}
	if m.IsCapital != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.IsCapital))
	}
	if m.DamaMultiple != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.DamaMultiple))
	}
	if m.NeedDama != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.NeedDama))
	}
	if m.InspectionStatus != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.InspectionStatus))
	}
	if m.InspectionId != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.InspectionId))
	}
	if m.IsHaveSubordinate != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.IsHaveSubordinate))
	}
	if m.TeamCounts != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.TeamCounts))
	}
	if m.VerifyRedis {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x5
		i++
		if m.VerifyRedis {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.OrderCode) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.OrderCode)))
		i += copy(dAtA[i:], m.OrderCode)
	}
	if m.FailId != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.FailId))
	}
	return i, nil
}

func (m *ReqLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	return i, nil
}

func (m *ReplyLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.Status))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.Data.Size()))
		n2, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *LoginRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreationTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.CreationTime))
	}
	if len(m.CreationBy) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.CreationBy)))
		i += copy(dAtA[i:], m.CreationBy)
	}
	if m.LastUpdatedTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.LastUpdatedTime))
	}
	if len(m.LastUpdatedBy) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.LastUpdatedBy)))
		i += copy(dAtA[i:], m.LastUpdatedBy)
	}
	if len(m.DataSourceKey) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.DataSourceKey)))
		i += copy(dAtA[i:], m.DataSourceKey)
	}
	if len(m.CurrentUser) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.CurrentUser)))
		i += copy(dAtA[i:], m.CurrentUser)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.UserSystemId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.UserSystemId)))
		i += copy(dAtA[i:], m.UserSystemId)
	}
	if len(m.ProxyLinkCode) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.ProxyLinkCode)))
		i += copy(dAtA[i:], m.ProxyLinkCode)
	}
	if len(m.ParentId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.ParentId)))
		i += copy(dAtA[i:], m.ParentId)
	}
	if len(m.ProxyAccount) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.ProxyAccount)))
		i += copy(dAtA[i:], m.ProxyAccount)
	}
	if m.UserLevelId != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.UserLevelId))
	}
	if len(m.MemberLevelName) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.MemberLevelName)))
		i += copy(dAtA[i:], m.MemberLevelName)
	}
	if len(m.UserAccount) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.UserAccount)))
		i += copy(dAtA[i:], m.UserAccount)
	}
	if len(m.UserPassword) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.UserPassword)))
		i += copy(dAtA[i:], m.UserPassword)
	}
	if len(m.OldUserPassword) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.OldUserPassword)))
		i += copy(dAtA[i:], m.OldUserPassword)
	}
	if len(m.RegisterIp) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.RegisterIp)))
		i += copy(dAtA[i:], m.RegisterIp)
	}
	if len(m.RegisterSource) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.RegisterSource)))
		i += copy(dAtA[i:], m.RegisterSource)
	}
	if len(m.RegisterSourceName) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.RegisterSourceName)))
		i += copy(dAtA[i:], m.RegisterSourceName)
	}
	if len(m.RegisterMethodId) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.RegisterMethodId)))
		i += copy(dAtA[i:], m.RegisterMethodId)
	}
	if len(m.Sex) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Sex)))
		i += copy(dAtA[i:], m.Sex)
	}
	if len(m.Birthday) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Birthday)))
		i += copy(dAtA[i:], m.Birthday)
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if len(m.Telephone) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Telephone)))
		i += copy(dAtA[i:], m.Telephone)
	}
	if len(m.UserQq) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.UserQq)))
		i += copy(dAtA[i:], m.UserQq)
	}
	if len(m.UserWx) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.UserWx)))
		i += copy(dAtA[i:], m.UserWx)
	}
	if m.IsFrist != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.IsFrist))
	}
	if m.IsOwner != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.IsOwner))
	}
	if m.IsEnable != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.IsEnable))
	}
	if m.IsFrozen != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.IsFrozen))
	}
	if len(m.BundleVersionId) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.BundleVersionId)))
		i += copy(dAtA[i:], m.BundleVersionId)
	}
	if len(m.AppUuid) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.AppUuid)))
		i += copy(dAtA[i:], m.AppUuid)
	}
	if len(m.ValidCode) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.ValidCode)))
		i += copy(dAtA[i:], m.ValidCode)
	}
	if m.Balance != 0 {
		dAtA[i] = 0xad
		i++
		dAtA[i] = 0x2
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Balance))))
		i += 4
	}
	if m.Recharge != 0 {
		dAtA[i] = 0xb5
		i++
		dAtA[i] = 0x2
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Recharge))))
		i += 4
	}
	if len(m.CompanyInfo) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.CompanyInfo)))
		i += copy(dAtA[i:], m.CompanyInfo)
	}
	if len(m.WithdrawPassword) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.WithdrawPassword)))
		i += copy(dAtA[i:], m.WithdrawPassword)
	}
	if len(m.OldWithdrawPassword) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.OldWithdrawPassword)))
		i += copy(dAtA[i:], m.OldWithdrawPassword)
	}
	if len(m.LoginIp) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.LoginIp)))
		i += copy(dAtA[i:], m.LoginIp)
	}
	if len(m.LoginRealAddress) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.LoginRealAddress)))
		i += copy(dAtA[i:], m.LoginRealAddress)
	}
	if m.LoginDate != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.LoginDate))
	}
	if len(m.FGQP) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.FGQP)))
		i += copy(dAtA[i:], m.FGQP)
	}
	if len(m.KAIYUAN600) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.KAIYUAN600)))
		i += copy(dAtA[i:], m.KAIYUAN600)
	}
	if len(m.ZILLIONAIRE) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.ZILLIONAIRE)))
		i += copy(dAtA[i:], m.ZILLIONAIRE)
	}
	if len(m.SSOCHESS) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.SSOCHESS)))
		i += copy(dAtA[i:], m.SSOCHESS)
	}
	if len(m.FGBY) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.FGBY)))
		i += copy(dAtA[i:], m.FGBY)
	}
	if len(m.KYQP) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.KYQP)))
		i += copy(dAtA[i:], m.KYQP)
	}
	if len(m.StartDate) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.StartDate)))
		i += copy(dAtA[i:], m.StartDate)
	}
	if len(m.EndDate) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.EndDate)))
		i += copy(dAtA[i:], m.EndDate)
	}
	if len(m.MemberLevelVIP) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.MemberLevelVIP)))
		i += copy(dAtA[i:], m.MemberLevelVIP)
	}
	if len(m.MemberLevelVIPID) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.MemberLevelVIPID)))
		i += copy(dAtA[i:], m.MemberLevelVIPID)
	}
	if len(m.MemberLevelVIPName) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.MemberLevelVIPName)))
		i += copy(dAtA[i:], m.MemberLevelVIPName)
	}
	if len(m.DepositTotalMax) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.DepositTotalMax)))
		i += copy(dAtA[i:], m.DepositTotalMax)
	}
	if len(m.DepositTotalMin) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.DepositTotalMin)))
		i += copy(dAtA[i:], m.DepositTotalMin)
	}
	if len(m.WithdrawTotalMax) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.WithdrawTotalMax)))
		i += copy(dAtA[i:], m.WithdrawTotalMax)
	}
	if len(m.WithdrawTotalMin) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.WithdrawTotalMin)))
		i += copy(dAtA[i:], m.WithdrawTotalMin)
	}
	if len(m.TotalPayoffMax) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.TotalPayoffMax)))
		i += copy(dAtA[i:], m.TotalPayoffMax)
	}
	if len(m.TotalPayoffMin) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.TotalPayoffMin)))
		i += copy(dAtA[i:], m.TotalPayoffMin)
	}
	if len(m.WithdrawNumberMax) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.WithdrawNumberMax)))
		i += copy(dAtA[i:], m.WithdrawNumberMax)
	}
	if len(m.WithdrawNumberMin) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.WithdrawNumberMin)))
		i += copy(dAtA[i:], m.WithdrawNumberMin)
	}
	if len(m.DepositNumberMax) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.DepositNumberMax)))
		i += copy(dAtA[i:], m.DepositNumberMax)
	}
	if len(m.DepositNumberMin) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.DepositNumberMin)))
		i += copy(dAtA[i:], m.DepositNumberMin)
	}
	if len(m.Suffix) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Suffix)))
		i += copy(dAtA[i:], m.Suffix)
	}
	if len(m.Note) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Note)))
		i += copy(dAtA[i:], m.Note)
	}
	if len(m.DebitType) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.DebitType)))
		i += copy(dAtA[i:], m.DebitType)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.IntegralStartDate) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.IntegralStartDate)))
		i += copy(dAtA[i:], m.IntegralStartDate)
	}
	if len(m.IntegralEndDate) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.IntegralEndDate)))
		i += copy(dAtA[i:], m.IntegralEndDate)
	}
	if m.BankCardCount != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.BankCardCount))
	}
	if len(m.IsCapital) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.IsCapital)))
		i += copy(dAtA[i:], m.IsCapital)
	}
	if len(m.DamaMultiple) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.DamaMultiple)))
		i += copy(dAtA[i:], m.DamaMultiple)
	}
	if len(m.NeedDama) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.NeedDama)))
		i += copy(dAtA[i:], m.NeedDama)
	}
	if len(m.InspectionStatus) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.InspectionStatus)))
		i += copy(dAtA[i:], m.InspectionStatus)
	}
	if len(m.InspectionId) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.InspectionId)))
		i += copy(dAtA[i:], m.InspectionId)
	}
	if len(m.IsHaveSubordinate) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.IsHaveSubordinate)))
		i += copy(dAtA[i:], m.IsHaveSubordinate)
	}
	if len(m.TeamCounts) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.TeamCounts)))
		i += copy(dAtA[i:], m.TeamCounts)
	}
	if m.VerifyRedis {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x5
		i++
		if m.VerifyRedis {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.OrderCode) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.OrderCode)))
		i += copy(dAtA[i:], m.OrderCode)
	}
	return i, nil
}

func (m *ReqMemberBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMemberBalance) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Cookie) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Cookie)))
		i += copy(dAtA[i:], m.Cookie)
	}
	if len(m.UpdateBlanceFlag) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.UpdateBlanceFlag)))
		i += copy(dAtA[i:], m.UpdateBlanceFlag)
	}
	return i, nil
}

func (m *ReplyMemberBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyMemberBalance) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(m.Status))
	}
	if m.Data != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Data))))
		i += 4
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImgameapiservice(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func encodeVarintImgameapiservice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetAccountTokenMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImgameapiservice(uint64(m.UserId))
	}
	return n
}

func (m *GetAccountTokenMsgReply) Size() (n int) {
	var l int
	_ = l
	if m.ResultCode != 0 {
		n += 1 + sovImgameapiservice(uint64(m.ResultCode))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	return n
}

func (m *VerifyAccountTokenMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImgameapiservice(uint64(m.UserId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	return n
}

func (m *VerifyAccountTokenMsgReply) Size() (n int) {
	var l int
	_ = l
	if m.ResultCode != 0 {
		n += 1 + sovImgameapiservice(uint64(m.ResultCode))
	}
	if m.UserId != 0 {
		n += 1 + sovImgameapiservice(uint64(m.UserId))
	}
	return n
}

func (m *ReqRegister) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserAccount)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.UserPassword)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.ConfirmPwd)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.ValidCode)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.UserQq)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.UserWx)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.Telephone)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.PhoneCode)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.BundleVersionId)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.RegisterSourceName)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.AppUuid)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.ProxyLinkCode)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.RegisterMethodId)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	return n
}

func (m *ReplyRegister) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovImgameapiservice(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	return n
}

func (m *RegisterRespData) Size() (n int) {
	var l int
	_ = l
	if m.CreationTime != 0 {
		n += 1 + sovImgameapiservice(uint64(m.CreationTime))
	}
	l = len(m.CreationBy)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	if m.LastUpdatedTime != 0 {
		n += 1 + sovImgameapiservice(uint64(m.LastUpdatedTime))
	}
	l = len(m.LastUpdatedBy)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.DataSourceKey)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.CurrentUser)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovImgameapiservice(uint64(m.UserId))
	}
	l = len(m.UserSystemId)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.ProxyLinkCode)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	if m.ParentId != 0 {
		n += 1 + sovImgameapiservice(uint64(m.ParentId))
	}
	l = len(m.ProxyAccount)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	if m.UserLevelId != 0 {
		n += 1 + sovImgameapiservice(uint64(m.UserLevelId))
	}
	l = len(m.MemberLevelName)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.UserAccount)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.UserPassword)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.OldUserPassword)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.RegisterIp)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.RegisterSource)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.RegisterSourceName)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	if m.RegisterMethodId != 0 {
		n += 2 + sovImgameapiservice(uint64(m.RegisterMethodId))
	}
	if m.Sex != 0 {
		n += 2 + sovImgameapiservice(uint64(m.Sex))
	}
	if m.Birthday != 0 {
		n += 2 + sovImgameapiservice(uint64(m.Birthday))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.HeadPortrait)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.Telephone)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.UserQq)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.UserWx)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	if m.IsFrist != 0 {
		n += 2 + sovImgameapiservice(uint64(m.IsFrist))
	}
	if m.IsOwner != 0 {
		n += 2 + sovImgameapiservice(uint64(m.IsOwner))
	}
	if m.IsEnable != 0 {
		n += 2 + sovImgameapiservice(uint64(m.IsEnable))
	}
	if m.IsFrozen != 0 {
		n += 2 + sovImgameapiservice(uint64(m.IsFrozen))
	}
	l = len(m.BundleVersionId)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.AppUuid)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.ValidCode)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	if m.Balance != 0 {
		n += 10
	}
	if m.Recharge != 0 {
		n += 10
	}
	l = len(m.CompanyInfo)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.WithdrawPassword)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.OldWithdrawPassword)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.LoginIp)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.LoginRealAddress)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.LoginSource)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.LoginSourceName)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	if m.LoginDate != 0 {
		n += 2 + sovImgameapiservice(uint64(m.LoginDate))
	}
	l = len(m.PlatformMap)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.FGQP)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.KAIYUAN600)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.ZILLIONAIRE)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.SSOCHESS)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.FGBY)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.KYQP)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	if m.StartDate != 0 {
		n += 2 + sovImgameapiservice(uint64(m.StartDate))
	}
	if m.EndDate != 0 {
		n += 2 + sovImgameapiservice(uint64(m.EndDate))
	}
	if m.MemberLevelVO != 0 {
		n += 2 + sovImgameapiservice(uint64(m.MemberLevelVO))
	}
	if m.MoneyVO != 0 {
		n += 2 + sovImgameapiservice(uint64(m.MoneyVO))
	}
	if m.MemberLevelVIP != 0 {
		n += 2 + sovImgameapiservice(uint64(m.MemberLevelVIP))
	}
	if m.MemberLevelVIPID != 0 {
		n += 2 + sovImgameapiservice(uint64(m.MemberLevelVIPID))
	}
	l = len(m.MemberLevelVIPName)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	if m.DepositTotalMax != 0 {
		n += 10
	}
	if m.DepositTotalMin != 0 {
		n += 10
	}
	if m.WithdrawTotalMax != 0 {
		n += 10
	}
	if m.WithdrawTotalMin != 0 {
		n += 10
	}
	if m.TotalPayoffMax != 0 {
		n += 10
	}
	if m.TotalPayoffMin != 0 {
		n += 10
	}
	if m.WithdrawNumberMax != 0 {
		n += 2 + sovImgameapiservice(uint64(m.WithdrawNumberMax))
	}
	if m.WithdrawNumberMin != 0 {
		n += 2 + sovImgameapiservice(uint64(m.WithdrawNumberMin))
	}
	if m.DepositNumberMax != 0 {
		n += 2 + sovImgameapiservice(uint64(m.DepositNumberMax))
	}
	if m.DepositNumberMin != 0 {
		n += 2 + sovImgameapiservice(uint64(m.DepositNumberMin))
	}
	l = len(m.Suffix)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.Note)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	if m.DebitType != 0 {
		n += 2 + sovImgameapiservice(uint64(m.DebitType))
	}
	l = len(m.Token)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	if m.IntegralStartDate != 0 {
		n += 2 + sovImgameapiservice(uint64(m.IntegralStartDate))
	}
	if m.IntegralEndDate != 0 {
		n += 2 + sovImgameapiservice(uint64(m.IntegralEndDate))
	}
	if m.BankCardCount != 0 {
		n += 2 + sovImgameapiservice(uint64(m.BankCardCount))
	}
	if m.IsCapital != 0 {
		n += 2 + sovImgameapiservice(uint64(m.IsCapital))
	}
	if m.DamaMultiple != 0 {
		n += 2 + sovImgameapiservice(uint64(m.DamaMultiple))
	}
	if m.NeedDama != 0 {
		n += 2 + sovImgameapiservice(uint64(m.NeedDama))
	}
	if m.InspectionStatus != 0 {
		n += 2 + sovImgameapiservice(uint64(m.InspectionStatus))
	}
	if m.InspectionId != 0 {
		n += 2 + sovImgameapiservice(uint64(m.InspectionId))
	}
	if m.IsHaveSubordinate != 0 {
		n += 2 + sovImgameapiservice(uint64(m.IsHaveSubordinate))
	}
	if m.TeamCounts != 0 {
		n += 2 + sovImgameapiservice(uint64(m.TeamCounts))
	}
	if m.VerifyRedis {
		n += 3
	}
	l = len(m.OrderCode)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	if m.FailId != 0 {
		n += 2 + sovImgameapiservice(uint64(m.FailId))
	}
	return n
}

func (m *ReqLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	return n
}

func (m *ReplyLogin) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovImgameapiservice(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	return n
}

func (m *LoginRespData) Size() (n int) {
	var l int
	_ = l
	if m.CreationTime != 0 {
		n += 1 + sovImgameapiservice(uint64(m.CreationTime))
	}
	l = len(m.CreationBy)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	if m.LastUpdatedTime != 0 {
		n += 1 + sovImgameapiservice(uint64(m.LastUpdatedTime))
	}
	l = len(m.LastUpdatedBy)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.DataSourceKey)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.CurrentUser)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovImgameapiservice(uint64(m.UserId))
	}
	l = len(m.UserSystemId)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.ProxyLinkCode)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.ProxyAccount)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	if m.UserLevelId != 0 {
		n += 1 + sovImgameapiservice(uint64(m.UserLevelId))
	}
	l = len(m.MemberLevelName)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.UserAccount)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.UserPassword)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.OldUserPassword)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.RegisterIp)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.RegisterSource)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.RegisterSourceName)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.RegisterMethodId)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.Sex)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.Birthday)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.Telephone)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.UserQq)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.UserWx)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	if m.IsFrist != 0 {
		n += 2 + sovImgameapiservice(uint64(m.IsFrist))
	}
	if m.IsOwner != 0 {
		n += 2 + sovImgameapiservice(uint64(m.IsOwner))
	}
	if m.IsEnable != 0 {
		n += 2 + sovImgameapiservice(uint64(m.IsEnable))
	}
	if m.IsFrozen != 0 {
		n += 2 + sovImgameapiservice(uint64(m.IsFrozen))
	}
	l = len(m.BundleVersionId)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.AppUuid)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.ValidCode)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	if m.Balance != 0 {
		n += 6
	}
	if m.Recharge != 0 {
		n += 6
	}
	l = len(m.CompanyInfo)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.WithdrawPassword)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.OldWithdrawPassword)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.LoginIp)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.LoginRealAddress)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	if m.LoginDate != 0 {
		n += 2 + sovImgameapiservice(uint64(m.LoginDate))
	}
	l = len(m.FGQP)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.KAIYUAN600)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.ZILLIONAIRE)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.SSOCHESS)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.FGBY)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.KYQP)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.StartDate)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.EndDate)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.MemberLevelVIP)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.MemberLevelVIPID)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.MemberLevelVIPName)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.DepositTotalMax)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.DepositTotalMin)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.WithdrawTotalMax)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.WithdrawTotalMin)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.TotalPayoffMax)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.TotalPayoffMin)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.WithdrawNumberMax)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.WithdrawNumberMin)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.DepositNumberMax)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.DepositNumberMin)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.Suffix)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.Note)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.DebitType)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.IntegralStartDate)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.IntegralEndDate)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	if m.BankCardCount != 0 {
		n += 2 + sovImgameapiservice(uint64(m.BankCardCount))
	}
	l = len(m.IsCapital)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.DamaMultiple)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.NeedDama)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.InspectionStatus)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.InspectionId)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.IsHaveSubordinate)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.TeamCounts)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	if m.VerifyRedis {
		n += 3
	}
	l = len(m.OrderCode)
	if l > 0 {
		n += 2 + l + sovImgameapiservice(uint64(l))
	}
	return n
}

func (m *ReqMemberBalance) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.Cookie)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	l = len(m.UpdateBlanceFlag)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	return n
}

func (m *ReplyMemberBalance) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovImgameapiservice(uint64(m.Status))
	}
	if m.Data != 0 {
		n += 5
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovImgameapiservice(uint64(l))
	}
	return n
}

func sovImgameapiservice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozImgameapiservice(x uint64) (n int) {
	return sovImgameapiservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetAccountTokenMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImgameapiservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountTokenMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountTokenMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImgameapiservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountTokenMsgReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImgameapiservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountTokenMsgReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountTokenMsgReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= (GameApiServiceResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImgameapiservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyAccountTokenMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImgameapiservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyAccountTokenMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyAccountTokenMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImgameapiservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyAccountTokenMsgReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImgameapiservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyAccountTokenMsgReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyAccountTokenMsgReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= (GameApiServiceResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImgameapiservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImgameapiservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmPwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmPwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserQq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserQq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserWx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserWx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Telephone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Telephone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleVersionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleVersionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterSourceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisterSourceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyLinkCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyLinkCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterMethodId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisterMethodId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImgameapiservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImgameapiservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &RegisterRespData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImgameapiservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImgameapiservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			m.CreationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreationBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedTime", wireType)
			}
			m.LastUpdatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdatedTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastUpdatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSourceKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSourceKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserSystemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserSystemId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyLinkCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyLinkCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLevelId", wireType)
			}
			m.UserLevelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserLevelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberLevelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberLevelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldUserPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldUserPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisterIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisterSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterSourceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisterSourceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterMethodId", wireType)
			}
			m.RegisterMethodId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegisterMethodId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadPortrait", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadPortrait = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Telephone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Telephone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserQq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserQq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserWx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserWx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFrist", wireType)
			}
			m.IsFrist = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFrist |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOwner", wireType)
			}
			m.IsOwner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsOwner |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnable", wireType)
			}
			m.IsEnable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsEnable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFrozen", wireType)
			}
			m.IsFrozen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFrozen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleVersionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleVersionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Balance = float64(math.Float64frombits(v))
		case 38:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recharge", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Recharge = float64(math.Float64frombits(v))
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldWithdrawPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldWithdrawPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginRealAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginRealAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginSourceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginSourceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginDate", wireType)
			}
			m.LoginDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformMap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformMap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FGQP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FGQP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KAIYUAN600", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KAIYUAN600 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZILLIONAIRE", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZILLIONAIRE = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SSOCHESS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SSOCHESS = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FGBY", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FGBY = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KYQP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KYQP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			m.StartDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			m.EndDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberLevelVO", wireType)
			}
			m.MemberLevelVO = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberLevelVO |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoneyVO", wireType)
			}
			m.MoneyVO = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MoneyVO |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberLevelVIP", wireType)
			}
			m.MemberLevelVIP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberLevelVIP |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberLevelVIPID", wireType)
			}
			m.MemberLevelVIPID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberLevelVIPID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberLevelVIPName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberLevelVIPName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 61:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositTotalMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DepositTotalMax = float64(math.Float64frombits(v))
		case 62:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositTotalMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DepositTotalMin = float64(math.Float64frombits(v))
		case 63:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawTotalMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.WithdrawTotalMax = float64(math.Float64frombits(v))
		case 64:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawTotalMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.WithdrawTotalMin = float64(math.Float64frombits(v))
		case 65:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPayoffMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TotalPayoffMax = float64(math.Float64frombits(v))
		case 66:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPayoffMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TotalPayoffMin = float64(math.Float64frombits(v))
		case 67:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawNumberMax", wireType)
			}
			m.WithdrawNumberMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawNumberMax |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawNumberMin", wireType)
			}
			m.WithdrawNumberMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawNumberMin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 69:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositNumberMax", wireType)
			}
			m.DepositNumberMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositNumberMax |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 70:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositNumberMin", wireType)
			}
			m.DepositNumberMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositNumberMin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 73:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebitType", wireType)
			}
			m.DebitType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebitType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 75:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegralStartDate", wireType)
			}
			m.IntegralStartDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntegralStartDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 76:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegralEndDate", wireType)
			}
			m.IntegralEndDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntegralEndDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 77:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankCardCount", wireType)
			}
			m.BankCardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BankCardCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 78:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCapital", wireType)
			}
			m.IsCapital = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsCapital |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 79:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamaMultiple", wireType)
			}
			m.DamaMultiple = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DamaMultiple |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 80:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedDama", wireType)
			}
			m.NeedDama = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NeedDama |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 81:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InspectionStatus", wireType)
			}
			m.InspectionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InspectionStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 82:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InspectionId", wireType)
			}
			m.InspectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InspectionId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 83:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHaveSubordinate", wireType)
			}
			m.IsHaveSubordinate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsHaveSubordinate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 84:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamCounts", wireType)
			}
			m.TeamCounts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamCounts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 85:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyRedis", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VerifyRedis = bool(v != 0)
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 87:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailId", wireType)
			}
			m.FailId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImgameapiservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImgameapiservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImgameapiservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImgameapiservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LoginRespData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImgameapiservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImgameapiservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			m.CreationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreationBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedTime", wireType)
			}
			m.LastUpdatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdatedTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastUpdatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSourceKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSourceKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserSystemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserSystemId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyLinkCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyLinkCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLevelId", wireType)
			}
			m.UserLevelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserLevelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberLevelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberLevelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldUserPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldUserPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisterIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisterSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterSourceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisterSourceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterMethodId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisterMethodId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Birthday = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Telephone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Telephone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserQq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserQq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserWx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserWx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFrist", wireType)
			}
			m.IsFrist = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFrist |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOwner", wireType)
			}
			m.IsOwner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsOwner |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnable", wireType)
			}
			m.IsEnable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsEnable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFrozen", wireType)
			}
			m.IsFrozen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFrozen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleVersionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleVersionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Balance = float32(math.Float32frombits(v))
		case 38:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recharge", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Recharge = float32(math.Float32frombits(v))
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldWithdrawPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldWithdrawPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginRealAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginRealAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginDate", wireType)
			}
			m.LoginDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FGQP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FGQP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KAIYUAN600", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KAIYUAN600 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZILLIONAIRE", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZILLIONAIRE = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SSOCHESS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SSOCHESS = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FGBY", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FGBY = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KYQP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KYQP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberLevelVIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberLevelVIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberLevelVIPID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberLevelVIPID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberLevelVIPName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberLevelVIPName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositTotalMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositTotalMax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositTotalMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositTotalMin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawTotalMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawTotalMax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawTotalMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawTotalMin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPayoffMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalPayoffMax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPayoffMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalPayoffMin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawNumberMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawNumberMax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawNumberMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawNumberMin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositNumberMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositNumberMax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositNumberMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositNumberMin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 69:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebitType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DebitType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegralStartDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntegralStartDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegralEndDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntegralEndDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 73:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankCardCount", wireType)
			}
			m.BankCardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BankCardCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCapital", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsCapital = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamaMultiple", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DamaMultiple = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 76:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedDama", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NeedDama = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InspectionStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InspectionStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InspectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InspectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 79:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHaveSubordinate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsHaveSubordinate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamCounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamCounts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 81:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyRedis", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VerifyRedis = bool(v != 0)
		case 82:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImgameapiservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqMemberBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImgameapiservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMemberBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMemberBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookie = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateBlanceFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateBlanceFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImgameapiservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyMemberBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImgameapiservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyMemberBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyMemberBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Data = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImgameapiservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImgameapiservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImgameapiservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImgameapiservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImgameapiservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthImgameapiservice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowImgameapiservice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipImgameapiservice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthImgameapiservice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImgameapiservice   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/imgameapiservice/imgameapiservice.proto", fileDescriptorImgameapiservice)
}

var fileDescriptorImgameapiservice = []byte{
	// 2575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0x4d, 0x77, 0xdb, 0xc6,
	0xd5, 0x36, 0x25, 0x4b, 0xb2, 0xc6, 0x96, 0x2d, 0x21, 0xb1, 0x33, 0xaf, 0xde, 0x44, 0x51, 0x19,
	0x37, 0x51, 0x1c, 0x45, 0x76, 0xec, 0xd6, 0xf9, 0x6a, 0x92, 0x8a, 0xa4, 0x64, 0x23, 0x26, 0x45,
	0x1a, 0x24, 0xa5, 0xe3, 0x6e, 0x74, 0x46, 0xc4, 0x48, 0x9a, 0x23, 0x10, 0x80, 0x01, 0xd0, 0x16,
	0xbb, 0xea, 0xbe, 0xa7, 0xff, 0xa4, 0xff, 0xa1, 0xdb, 0x76, 0xd7, 0x7d, 0x37, 0x3d, 0xde, 0xf5,
	0xe3, 0x47, 0xf4, 0xdc, 0xb9, 0xf8, 0x98, 0x19, 0x80, 0x8d, 0x17, 0xdd, 0xe8, 0xe0, 0x3e, 0x73,
	0x39, 0x1f, 0x77, 0xee, 0xdc, 0x79, 0x1e, 0x0d, 0x69, 0x9f, 0x89, 0xc4, 0x63, 0x27, 0x3b, 0xa3,
	0x73, 0x96, 0xc4, 0x3c, 0x7a, 0xc5, 0xa3, 0x1d, 0x31, 0xbe, 0x2f, 0xfc, 0x84, 0x47, 0xa7, 0x6c,
	0xc4, 0xc3, 0x28, 0x38, 0x99, 0x9c, 0xde, 0x17, 0xe3, 0x33, 0x36, 0xe6, 0x2c, 0x14, 0xe0, 0x22,
	0x46, 0xbc, 0x04, 0xec, 0x84, 0x51, 0x90, 0x04, 0xd6, 0xaa, 0x89, 0xd7, 0xb7, 0x89, 0xf5, 0x84,
	0x27, 0xbb, 0xa3, 0x51, 0x30, 0xf1, 0x93, 0x41, 0x70, 0xc1, 0xfd, 0x4e, 0x7c, 0x66, 0xdd, 0x21,
	0x8b, 0xc3, 0x98, 0x47, 0xb6, 0x4b, 0x6b, 0x9b, 0xb5, 0xad, 0x05, 0x27, 0xb5, 0xea, 0x7f, 0xa8,
	0x91, 0xf7, 0xca, 0xee, 0x0e, 0x0f, 0xbd, 0xa9, 0xf5, 0x23, 0x21, 0x0e, 0x8f, 0x27, 0x5e, 0xd2,
	0x0c, 0x5c, 0x2e, 0x7f, 0x77, 0xf3, 0xe1, 0xbd, 0x9d, 0xd2, 0x44, 0x9e, 0xb0, 0x31, 0xdf, 0x0d,
	0x45, 0x1f, 0xcd, 0xe2, 0x17, 0x8e, 0xf2, 0x6b, 0xeb, 0x5d, 0xb2, 0x20, 0x3b, 0xa7, 0x73, 0x9b,
	0xb5, 0xad, 0x65, 0x07, 0x0d, 0x6b, 0x95, 0xcc, 0x0f, 0x9d, 0x36, 0x9d, 0x97, 0x18, 0x7c, 0xd6,
	0xf7, 0xc8, 0xed, 0x43, 0x1e, 0x89, 0xd3, 0xe9, 0x5b, 0x2e, 0xa0, 0xba, 0xe3, 0xfa, 0xef, 0x6a,
	0x64, 0xbd, 0xb2, 0x9f, 0xff, 0xfd, 0xca, 0x8a, 0x89, 0xcd, 0x69, 0x91, 0xfd, 0xfd, 0x55, 0x72,
	0xdd, 0xe1, 0x2f, 0x1d, 0x7e, 0x26, 0xe2, 0x84, 0x47, 0xd6, 0x26, 0xb9, 0x3e, 0x89, 0x79, 0x94,
	0xce, 0x47, 0x0e, 0xba, 0xec, 0xa8, 0x90, 0x55, 0x27, 0x37, 0xc0, 0xec, 0xb1, 0x38, 0x7e, 0x1d,
	0x44, 0x6e, 0xba, 0x22, 0x0d, 0xb3, 0x36, 0x08, 0x19, 0x05, 0xfe, 0xa9, 0x88, 0xc6, 0xbd, 0xd7,
	0x6e, 0x1a, 0x38, 0x05, 0xb1, 0xd6, 0xc9, 0x35, 0xf0, 0x3f, 0x60, 0x63, 0x4e, 0xaf, 0xca, 0xd6,
	0xdc, 0xb6, 0xde, 0x27, 0xcb, 0xaf, 0x98, 0x27, 0x5c, 0xb9, 0xe8, 0x05, 0xd9, 0x58, 0x00, 0x10,
	0x48, 0x3e, 0x66, 0xc2, 0xa3, 0x8b, 0x18, 0x48, 0x69, 0xc0, 0xea, 0xe0, 0xf7, 0xcf, 0x5f, 0xd2,
	0x25, 0x09, 0xa7, 0x56, 0x86, 0x1f, 0x5d, 0xd2, 0x6b, 0x05, 0x7e, 0x74, 0x09, 0x63, 0x24, 0xdc,
	0xe3, 0xe1, 0x79, 0xe0, 0x73, 0xba, 0x8c, 0x63, 0xe4, 0x00, 0xb4, 0xca, 0x0f, 0x39, 0x03, 0x82,
	0xad, 0x39, 0x60, 0x6d, 0x91, 0x5b, 0x27, 0x13, 0xdf, 0xf5, 0xf8, 0x21, 0x8f, 0x62, 0x11, 0xf8,
	0xb6, 0x4b, 0xaf, 0x4b, 0x1f, 0x13, 0x86, 0xb9, 0x26, 0x72, 0xd3, 0x6f, 0xe0, 0x5c, 0xa5, 0x61,
	0xed, 0x10, 0x2b, 0x4a, 0xa3, 0xdd, 0x0f, 0x26, 0xd1, 0x88, 0xcb, 0x28, 0xac, 0x48, 0x97, 0x8a,
	0x16, 0x8b, 0x92, 0x25, 0x16, 0x86, 0xc3, 0x89, 0x70, 0xe9, 0x4d, 0xe9, 0x94, 0x99, 0xd6, 0x5d,
	0xb2, 0x12, 0x46, 0xc1, 0xe5, 0xb4, 0x2d, 0xfc, 0x0b, 0x39, 0xd7, 0x5b, 0xb2, 0x5d, 0x07, 0xad,
	0x7b, 0x64, 0x35, 0xeb, 0xb5, 0xc3, 0x93, 0xf3, 0xc0, 0xb5, 0x5d, 0xba, 0x2a, 0x1d, 0x4b, 0x78,
	0xfd, 0x25, 0x59, 0x91, 0xa9, 0x97, 0xa7, 0xc3, 0x1d, 0xb2, 0x18, 0x27, 0x2c, 0x99, 0xc4, 0x59,
	0x3e, 0xa3, 0x05, 0x47, 0x62, 0x1c, 0x9f, 0xa5, 0x7b, 0x0f, 0x9f, 0xd6, 0x63, 0x72, 0xd5, 0x65,
	0x09, 0x93, 0x9b, 0x7d, 0xfd, 0x61, 0xbd, 0x9c, 0xa6, 0x59, 0x9f, 0x0e, 0x8f, 0xc3, 0x16, 0x4b,
	0x98, 0x23, 0xfd, 0xeb, 0x7f, 0x7c, 0x8f, 0xac, 0x9a, 0x4d, 0x90, 0x63, 0xa3, 0x88, 0xb3, 0x44,
	0x04, 0xfe, 0x40, 0x8c, 0x31, 0xf7, 0xe7, 0x1d, 0x0d, 0x93, 0x39, 0x96, 0xda, 0x8d, 0x69, 0x3a,
	0x13, 0x05, 0x81, 0x7d, 0xf2, 0x58, 0x9c, 0x0c, 0x43, 0x97, 0x25, 0xdc, 0x95, 0xdd, 0xcc, 0xcb,
	0x6e, 0x4c, 0x18, 0xe2, 0xa8, 0x40, 0x8d, 0x69, 0x9a, 0x92, 0x3a, 0x08, 0x5e, 0x30, 0x61, 0xdc,
	0x99, 0x67, 0x7c, 0x9a, 0xe6, 0xa6, 0x0e, 0xc2, 0xf9, 0x19, 0x4d, 0xa2, 0x88, 0xfb, 0x09, 0x1c,
	0xb0, 0x34, 0x4b, 0x55, 0x28, 0xcb, 0x49, 0xdb, 0x95, 0xb9, 0xba, 0xe0, 0xa4, 0x56, 0x76, 0xae,
	0xfa, 0xd3, 0x38, 0xe1, 0x63, 0xdb, 0x4d, 0x33, 0x56, 0xc3, 0xca, 0x3b, 0xbe, 0x5c, 0xb5, 0xe3,
	0xeb, 0xe4, 0x5a, 0xc8, 0x60, 0x3c, 0xdb, 0x95, 0xe9, 0xbb, 0xe0, 0xe4, 0x36, 0x8c, 0x22, 0x9d,
	0xb3, 0x03, 0x8e, 0xa9, 0xab, 0x61, 0x59, 0x0d, 0x68, 0xf3, 0x57, 0xdc, 0xb3, 0x5d, 0x99, 0xbd,
	0x0b, 0x8e, 0x0a, 0x41, 0x6c, 0xc7, 0x7c, 0x7c, 0x92, 0x02, 0x4a, 0x02, 0x9b, 0xb0, 0x59, 0x4f,
	0x6e, 0xfe, 0x74, 0x3d, 0xb9, 0x55, 0x51, 0x4f, 0xb6, 0xc8, 0xad, 0xc0, 0x73, 0x87, 0xaa, 0x1b,
	0xa6, 0xb0, 0x09, 0x43, 0x56, 0x64, 0x59, 0x6d, 0x87, 0x74, 0x0d, 0xb3, 0xa2, 0x40, 0xac, 0x8f,
	0xc9, 0x4d, 0xfd, 0x8c, 0x51, 0x4b, 0xfa, 0x18, 0xe8, 0x8c, 0x53, 0xfa, 0xce, 0xcc, 0x53, 0x5a,
	0x75, 0xca, 0xde, 0x95, 0x81, 0x2b, 0xe1, 0x70, 0x78, 0x62, 0x7e, 0x49, 0x6f, 0xcb, 0x66, 0xf8,
	0x84, 0x1d, 0x3b, 0x11, 0x51, 0x72, 0xee, 0xb2, 0x29, 0xbd, 0x83, 0x3b, 0x96, 0xd9, 0xd0, 0xe6,
	0x8b, 0xd1, 0x85, 0x1c, 0xff, 0x3d, 0xac, 0x95, 0x99, 0x5d, 0x54, 0x43, 0xaa, 0x56, 0xc3, 0x3a,
	0xb9, 0x71, 0xce, 0x99, 0xdb, 0x0b, 0xa2, 0x24, 0x62, 0x22, 0xa1, 0xff, 0x87, 0x11, 0x55, 0x31,
	0xad, 0x02, 0xaf, 0x97, 0x2b, 0x70, 0x51, 0x1d, 0xff, 0xdf, 0xac, 0x8e, 0x45, 0xad, 0x7d, 0x7f,
	0x46, 0xad, 0xfd, 0x40, 0xab, 0xb5, 0x94, 0x2c, 0x89, 0x78, 0x3f, 0x12, 0x71, 0x42, 0x37, 0xe4,
	0xd2, 0x32, 0x13, 0x5b, 0xba, 0xaf, 0x7d, 0x1e, 0xd1, 0x0f, 0xb3, 0x16, 0x69, 0xc2, 0xec, 0x44,
	0xbc, 0xe7, 0xb3, 0x13, 0x8f, 0xd3, 0x4d, 0x8c, 0x47, 0x66, 0x63, 0xdb, 0x7e, 0x14, 0xfc, 0x96,
	0xfb, 0xf4, 0x67, 0x59, 0x1b, 0xda, 0x55, 0xb5, 0xb9, 0x5e, 0x5d, 0x9b, 0x95, 0xaa, 0xfa, 0x91,
	0x5e, 0x55, 0xb5, 0xfb, 0xe7, 0xae, 0x79, 0xff, 0x50, 0xb2, 0x74, 0xc2, 0x3c, 0xe6, 0x8f, 0x38,
	0xfd, 0xf9, 0x66, 0x6d, 0xab, 0xe6, 0x64, 0x26, 0xcc, 0x2b, 0xe2, 0xa3, 0x73, 0x16, 0x9d, 0x71,
	0xfa, 0xb1, 0x6c, 0xca, 0x6d, 0x59, 0x15, 0x82, 0x71, 0xc8, 0xfc, 0xa9, 0xed, 0x9f, 0x06, 0xf4,
	0x93, 0xb4, 0x2a, 0x14, 0x10, 0xe4, 0xcf, 0x6b, 0x91, 0x9c, 0xbb, 0x11, 0x7b, 0x9d, 0xa7, 0xf8,
	0x16, 0x56, 0x69, 0x13, 0xb7, 0x1e, 0x90, 0x77, 0x02, 0xcf, 0x3d, 0x32, 0xdd, 0x3f, 0x95, 0xee,
	0x55, 0x4d, 0x30, 0x6b, 0x2f, 0x38, 0x13, 0xbe, 0x1d, 0xd2, 0x7b, 0xb8, 0xda, 0xd4, 0x84, 0x71,
	0xe5, 0xa7, 0xc3, 0x99, 0xb7, 0xeb, 0xba, 0x11, 0x8f, 0x63, 0xfa, 0x19, 0x8e, 0x6b, 0xe2, 0xb0,
	0x0a, 0x89, 0xa5, 0x07, 0x67, 0x1b, 0x57, 0xa1, 0x40, 0xb2, 0xe6, 0x16, 0xa6, 0x4c, 0xae, 0xcf,
	0x31, 0xfe, 0x06, 0x0c, 0x51, 0x96, 0x50, 0x8b, 0x25, 0x9c, 0xee, 0xc8, 0xba, 0x5c, 0x00, 0x30,
	0x52, 0xe8, 0xb1, 0xe4, 0x34, 0x88, 0xc6, 0x1d, 0x16, 0xd2, 0xfb, 0x38, 0x92, 0x02, 0x59, 0x16,
	0xb9, 0xba, 0xff, 0xe4, 0x79, 0x8f, 0x3e, 0x90, 0x4d, 0xf2, 0x1b, 0xce, 0xfe, 0xb3, 0x5d, 0xfb,
	0xc5, 0x70, 0xf7, 0xe0, 0xf1, 0x83, 0x07, 0xf4, 0x0b, 0x3c, 0xfb, 0x05, 0x02, 0xbd, 0xfe, 0xc6,
	0x6e, 0xb7, 0xed, 0xee, 0xc1, 0xae, 0xed, 0xec, 0xd1, 0x87, 0xd8, 0xab, 0x02, 0xc1, 0x1e, 0xf6,
	0xfb, 0xdd, 0xe6, 0xd3, 0xbd, 0x7e, 0x9f, 0x3e, 0xc2, 0x53, 0x91, 0xd9, 0x38, 0x62, 0xe3, 0x05,
	0xfd, 0x45, 0x36, 0x62, 0xe3, 0x05, 0x60, 0xcf, 0x5e, 0x3c, 0xef, 0xd1, 0x5f, 0x22, 0x06, 0xdf,
	0xb0, 0xb2, 0x38, 0x61, 0x51, 0x22, 0x57, 0xf6, 0x58, 0x26, 0x68, 0x01, 0xc0, 0x4e, 0x70, 0xdf,
	0x95, 0x6d, 0x5f, 0x62, 0xce, 0xa7, 0x26, 0xd4, 0x76, 0xa5, 0x78, 0x1e, 0x76, 0xe9, 0x57, 0xb2,
	0x5d, 0x07, 0xe1, 0xf7, 0xe3, 0xc0, 0xe7, 0xd3, 0xc3, 0x2e, 0xfd, 0x1a, 0x7f, 0x9f, 0x9a, 0x50,
	0xd9, 0x54, 0x57, 0xbb, 0x47, 0xbf, 0x91, 0x0e, 0x06, 0x0a, 0x3b, 0xae, 0x23, 0x76, 0x8b, 0x7e,
	0x8b, 0x95, 0xca, 0xc4, 0xa1, 0x0a, 0xea, 0x98, 0xdc, 0xd2, 0x5f, 0x61, 0x15, 0x2c, 0xb7, 0xc0,
	0xfe, 0xbb, 0x3c, 0x0c, 0x62, 0x91, 0x0c, 0x82, 0x84, 0x79, 0x1d, 0x76, 0x49, 0xbf, 0x93, 0x47,
	0xc1, 0x84, 0x4b, 0x9e, 0xc2, 0xa7, 0xdf, 0x57, 0x78, 0x0a, 0x5f, 0x3d, 0x19, 0x79, 0xa7, 0x3f,
	0x48, 0xd7, 0x12, 0x5e, 0xf6, 0x15, 0x3e, 0xfd, 0x75, 0x95, 0xaf, 0xf0, 0x21, 0x5e, 0x09, 0x7c,
	0xf7, 0xd8, 0x34, 0x38, 0x3d, 0x85, 0x5e, 0x77, 0xa5, 0xa7, 0x81, 0x9a, 0x7e, 0xc2, 0xa7, 0x8d,
	0xb2, 0x9f, 0xf0, 0xad, 0x6d, 0xb2, 0x96, 0x8d, 0x71, 0x30, 0x81, 0xc8, 0x40, 0x97, 0x4d, 0x19,
	0xd8, 0x72, 0x43, 0x85, 0xb7, 0xf0, 0x69, 0xab, 0xd2, 0x1b, 0x63, 0x90, 0x86, 0xa5, 0xe8, 0x7a,
	0x0f, 0xf7, 0xcc, 0xc4, 0xcb, 0xbe, 0xc2, 0xa7, 0xfb, 0x55, 0xbe, 0xc2, 0x97, 0xf4, 0x6e, 0x72,
	0x7a, 0x2a, 0x2e, 0xe9, 0x13, 0xac, 0xd9, 0x68, 0x41, 0x5e, 0xfb, 0x41, 0xc2, 0xe9, 0x53, 0xcc,
	0x6b, 0xf8, 0x86, 0xbc, 0x76, 0xf9, 0x89, 0x48, 0x06, 0xd3, 0x90, 0x53, 0x1b, 0xf3, 0x3a, 0x07,
	0x0a, 0xae, 0xfb, 0xa3, 0xca, 0x75, 0xb7, 0xc9, 0x1a, 0x48, 0xc6, 0xb3, 0x88, 0x79, 0xfd, 0xfc,
	0x4c, 0x3c, 0xc3, 0x55, 0x96, 0x1a, 0x20, 0x27, 0x32, 0x70, 0x2f, 0x3d, 0x23, 0x6d, 0xe9, 0x6b,
	0xc2, 0x70, 0x56, 0x4e, 0x98, 0x7f, 0xd1, 0x64, 0x91, 0xdb, 0x94, 0xbc, 0xa2, 0x83, 0x67, 0x45,
	0x03, 0x61, 0xc6, 0x22, 0x6e, 0xb2, 0x50, 0x24, 0xcc, 0xa3, 0x07, 0x38, 0xe3, 0x1c, 0x80, 0x5b,
	0xd2, 0x65, 0x63, 0xd6, 0x99, 0x78, 0x89, 0x08, 0x3d, 0x4e, 0xbb, 0xd2, 0x41, 0xc3, 0xe4, 0xdd,
	0xcb, 0xb9, 0xdb, 0x62, 0x63, 0x46, 0x7b, 0x78, 0xd7, 0x64, 0x36, 0xc4, 0x59, 0xf8, 0x71, 0xc8,
	0x47, 0xc0, 0x37, 0xfb, 0x48, 0x92, 0x9f, 0x63, 0x9c, 0x4d, 0x1c, 0xc6, 0x2a, 0x30, 0xdb, 0xa5,
	0x0e, 0x8e, 0xa5, 0x62, 0x32, 0x56, 0xf1, 0x53, 0xf6, 0x8a, 0xf7, 0x27, 0x27, 0x41, 0xe4, 0x0a,
	0x1f, 0xd6, 0xdf, 0x4f, 0x63, 0x65, 0x36, 0x40, 0xad, 0x4b, 0x38, 0x1b, 0xcb, 0x85, 0xc6, 0x74,
	0x20, 0xdd, 0x14, 0x04, 0x6a, 0xdd, 0x2b, 0xa9, 0x2c, 0x1d, 0xee, 0x8a, 0x98, 0x0e, 0x37, 0x6b,
	0x5b, 0xd7, 0x1c, 0x15, 0x82, 0xe8, 0x04, 0x91, 0xcb, 0x23, 0x79, 0xcf, 0x1d, 0xe2, 0x3d, 0x97,
	0x03, 0x90, 0x19, 0xa7, 0x4c, 0x00, 0xfd, 0x3b, 0x42, 0x96, 0x8a, 0x56, 0xdd, 0x21, 0xd7, 0x1c,
	0xfe, 0xb2, 0x0d, 0x95, 0x3a, 0xe3, 0x10, 0x3e, 0x4b, 0x19, 0x7a, 0xca, 0x21, 0xc0, 0x46, 0x0e,
	0xaa, 0x29, 0xc4, 0xdc, 0xb6, 0x6e, 0x92, 0x39, 0x11, 0xa6, 0xaa, 0x70, 0x4e, 0x84, 0xf5, 0x0b,
	0xd0, 0xb9, 0xa1, 0x37, 0xc5, 0x5e, 0xef, 0x90, 0xc5, 0xbe, 0x26, 0x39, 0xfa, 0xb9, 0xe4, 0xe8,
	0x14, 0x92, 0x03, 0xc4, 0xf6, 0x23, 0x72, 0xb5, 0x55, 0x48, 0x8e, 0x0f, 0xcb, 0x92, 0xa3, 0x8d,
	0x37, 0x58, 0xa6, 0x37, 0xe0, 0x6f, 0xfd, 0x4f, 0xb7, 0xc9, 0x8a, 0x86, 0xc3, 0xe6, 0x34, 0x2b,
	0xc4, 0x46, 0xd3, 0x10, 0x1b, 0xcd, 0x92, 0xd8, 0x68, 0x6a, 0x62, 0xa3, 0x5d, 0x2d, 0x36, 0xda,
	0x65, 0xb1, 0xd1, 0xae, 0x12, 0x1b, 0x6d, 0x53, 0x6c, 0xb4, 0xaa, 0xc4, 0x46, 0xcb, 0x14, 0x1b,
	0xcd, 0xb2, 0xd8, 0x68, 0xea, 0x62, 0x63, 0xa8, 0x89, 0x8d, 0x61, 0x2e, 0x36, 0x86, 0x15, 0x62,
	0x63, 0x68, 0x88, 0x8d, 0x5e, 0x95, 0xd8, 0xe8, 0x99, 0x62, 0xa3, 0x97, 0x89, 0x0d, 0x14, 0x13,
	0xb9, 0x0d, 0xa3, 0xf4, 0x54, 0xb1, 0x81, 0x3a, 0x58, 0xc3, 0x60, 0x0d, 0x43, 0x45, 0x6c, 0xac,
	0xa0, 0xd8, 0x18, 0xea, 0x62, 0xa3, 0x63, 0x88, 0x0d, 0x94, 0x11, 0x26, 0x9c, 0xf5, 0x95, 0x0d,
	0x87, 0x4a, 0x42, 0x85, 0xb2, 0x75, 0x1b, 0x2a, 0x42, 0xc3, 0x60, 0xbc, 0xae, 0x21, 0x36, 0x50,
	0x47, 0x98, 0x30, 0x64, 0x85, 0x53, 0x88, 0x0d, 0x14, 0x12, 0x0a, 0x02, 0x57, 0x87, 0xa3, 0x8b,
	0x0d, 0x14, 0x10, 0x06, 0x0a, 0xd7, 0xac, 0x53, 0x16, 0x1b, 0xef, 0xe2, 0x35, 0xeb, 0x54, 0x8a,
	0x0d, 0xc7, 0x14, 0x1b, 0xb7, 0x91, 0xb4, 0x39, 0x15, 0x62, 0xa3, 0xcf, 0x2f, 0xa5, 0xaa, 0x58,
	0x76, 0xe0, 0x13, 0x76, 0xac, 0x91, 0x89, 0x8d, 0x54, 0x50, 0x34, 0x14, 0xb1, 0x71, 0x90, 0x89,
	0x0d, 0xd4, 0x14, 0xb9, 0x0d, 0x25, 0x7e, 0x4f, 0x8a, 0x0d, 0xd4, 0x13, 0x68, 0xc0, 0x2f, 0x86,
	0x86, 0x90, 0x18, 0x2a, 0x42, 0x62, 0x60, 0x0a, 0x89, 0x81, 0x2a, 0x24, 0x86, 0x9a, 0x90, 0x18,
	0xe6, 0x42, 0x62, 0xa8, 0x09, 0x89, 0x61, 0x2e, 0x24, 0x6c, 0x5d, 0x48, 0xd8, 0x85, 0x90, 0xb0,
	0x75, 0x21, 0x61, 0x17, 0x42, 0xc2, 0x36, 0x84, 0x84, 0xad, 0x08, 0x09, 0xdb, 0x10, 0x12, 0xb6,
	0x22, 0x24, 0x1a, 0xd5, 0x42, 0xa2, 0x51, 0x16, 0x12, 0xbb, 0xba, 0x90, 0xd8, 0x2d, 0x84, 0xc4,
	0xa1, 0x29, 0x24, 0x0e, 0x55, 0x21, 0xd1, 0x50, 0x84, 0xc4, 0x9c, 0x93, 0x99, 0x30, 0x2f, 0x47,
	0x15, 0x12, 0x73, 0x4e, 0x6e, 0xcb, 0x13, 0x5f, 0x16, 0x12, 0x4d, 0x5d, 0x48, 0x1c, 0xcd, 0x10,
	0x12, 0x47, 0x15, 0x42, 0xa2, 0x3b, 0x5b, 0x48, 0x74, 0xab, 0x85, 0x44, 0x5b, 0x17, 0x12, 0xed,
	0x42, 0x48, 0xb4, 0x67, 0x08, 0x09, 0x13, 0x87, 0xc8, 0xb4, 0x73, 0xf2, 0xbf, 0x8d, 0xe4, 0x3f,
	0x07, 0x72, 0x6a, 0xff, 0xf9, 0x4c, 0x6a, 0xbf, 0xf3, 0x53, 0xd4, 0xfe, 0xfe, 0x7f, 0xa7, 0xf6,
	0x0f, 0x66, 0x50, 0xfb, 0x2f, 0x2a, 0xa8, 0xfd, 0x43, 0x9d, 0xda, 0x17, 0x34, 0x06, 0xf5, 0x41,
	0x01, 0x40, 0x6c, 0x32, 0xda, 0x82, 0x1a, 0x21, 0x33, 0xa1, 0x0e, 0x74, 0x74, 0x6a, 0x8e, 0x82,
	0xc1, 0x40, 0x21, 0x86, 0x1d, 0x93, 0x9a, 0x3f, 0xc6, 0x18, 0x76, 0x2a, 0xa8, 0x79, 0xa7, 0x4c,
	0xcd, 0xbf, 0xc4, 0x9a, 0xd1, 0xa9, 0xa4, 0xe6, 0x2d, 0x83, 0x9a, 0x7f, 0x85, 0x19, 0xdd, 0x2a,
	0x53, 0xf3, 0x96, 0x41, 0xcd, 0xbf, 0xae, 0xf0, 0x44, 0x5a, 0x7a, 0x64, 0x52, 0xf3, 0x6f, 0xf4,
	0x5c, 0x53, 0xa9, 0xf9, 0x91, 0x49, 0xcd, 0xbf, 0xad, 0xf2, 0x45, 0x6a, 0x3e, 0xd0, 0xa9, 0xf9,
	0x77, 0x18, 0xaf, 0x41, 0x89, 0x9a, 0x0f, 0x74, 0x6a, 0xfe, 0x7d, 0xd9, 0x0f, 0xa9, 0xf9, 0x51,
	0x89, 0x9a, 0xff, 0x20, 0x5d, 0xcb, 0x0d, 0x15, 0xde, 0xa9, 0x8a, 0x28, 0x7b, 0x63, 0x0c, 0x5a,
	0x26, 0x35, 0xdf, 0xc5, 0x75, 0xb5, 0x2a, 0xa8, 0x79, 0xcb, 0xa4, 0xe6, 0x8d, 0x2a, 0xdf, 0x94,
	0x06, 0x21, 0x35, 0x6f, 0x62, 0x15, 0xec, 0xe7, 0xd4, 0xfc, 0x00, 0xa8, 0x79, 0x0b, 0xf3, 0xf2,
	0x20, 0xa5, 0xe6, 0xad, 0x9c, 0x9a, 0xef, 0x61, 0x5e, 0xb6, 0x54, 0x6a, 0x8e, 0x6f, 0x0f, 0xfb,
	0xea, 0xa3, 0xc6, 0x36, 0x59, 0xb3, 0x4b, 0xd4, 0x1c, 0x55, 0x40, 0xb9, 0x01, 0x72, 0xc2, 0x36,
	0xa8, 0x39, 0x6a, 0x03, 0x13, 0x06, 0xd6, 0xd0, 0xd0, 0xa8, 0x39, 0x4a, 0x05, 0x1d, 0x84, 0x19,
	0xdb, 0x39, 0x35, 0x47, 0xc9, 0x50, 0x00, 0x70, 0x4b, 0xb7, 0x54, 0x6a, 0xfe, 0x0c, 0x6f, 0xe9,
	0x96, 0x41, 0xcd, 0x0f, 0x32, 0x6a, 0xde, 0x4e, 0x6f, 0x2a, 0x85, 0x9a, 0xdb, 0x26, 0x35, 0xef,
	0x60, 0x9c, 0xed, 0x0a, 0x6a, 0x6e, 0xab, 0xd4, 0xfc, 0x00, 0xc7, 0xb2, 0x0d, 0x6a, 0x6e, 0x97,
	0xa8, 0x79, 0x37, 0x8d, 0x55, 0x15, 0x35, 0x1f, 0x14, 0xd4, 0xbc, 0x87, 0xb5, 0x6a, 0xa0, 0x51,
	0xf3, 0x43, 0x85, 0x9a, 0x3f, 0x47, 0x6a, 0x7e, 0xa8, 0x53, 0xf3, 0x6e, 0x4e, 0xcd, 0x1d, 0x8c,
	0x4e, 0x0e, 0xd4, 0x3d, 0xb8, 0xfd, 0x5f, 0xe2, 0x11, 0xcf, 0xee, 0x8c, 0x5c, 0x7e, 0xd5, 0x54,
	0xf9, 0x75, 0x87, 0x2c, 0x8e, 0x82, 0xe0, 0x42, 0xf0, 0x94, 0xb1, 0xa6, 0x16, 0xc4, 0x67, 0x22,
	0xa9, 0x66, 0x43, 0xfe, 0x7a, 0xdf, 0x63, 0x67, 0x29, 0x1d, 0x2f, 0xe1, 0x75, 0x07, 0xb8, 0x49,
	0xe8, 0x4d, 0xf5, 0xf1, 0x66, 0xbd, 0x0b, 0x58, 0xe9, 0x2b, 0xc0, 0x9c, 0xbc, 0xb7, 0xe4, 0x77,
	0xf6, 0x56, 0x30, 0x9f, 0xbf, 0x15, 0xdc, 0xfb, 0x4b, 0x8d, 0xd0, 0x59, 0xaf, 0x56, 0xd6, 0x1a,
	0x59, 0x29, 0xac, 0xe3, 0xee, 0xc5, 0xea, 0x15, 0xeb, 0x03, 0x42, 0x15, 0x48, 0xe6, 0xef, 0xb1,
	0xed, 0xcb, 0x7f, 0xca, 0xad, 0xfe, 0x63, 0xc9, 0xfa, 0x88, 0x6c, 0x28, 0xcd, 0x3d, 0x16, 0xb1,
	0x31, 0x4f, 0x78, 0x74, 0xbc, 0x77, 0x39, 0xe2, 0x21, 0x6c, 0xe1, 0xea, 0x3f, 0x97, 0xac, 0x4f,
	0xc9, 0x5d, 0xc5, 0xc9, 0xee, 0x1c, 0xf7, 0x85, 0xcb, 0x8f, 0xd3, 0xe1, 0x15, 0xd7, 0x7f, 0x2d,
	0x59, 0x9f, 0x91, 0x8f, 0x15, 0x57, 0x98, 0xe8, 0x2c, 0xe7, 0x7f, 0x2f, 0x3d, 0xfc, 0xdb, 0x3c,
	0x59, 0xb5, 0xc7, 0xfa, 0x6a, 0xac, 0x36, 0x5c, 0xe1, 0xe9, 0x13, 0xca, 0x07, 0x55, 0x4f, 0x21,
	0xf9, 0x83, 0xdb, 0xfa, 0x87, 0x55, 0xcd, 0xca, 0x13, 0x4c, 0xfd, 0x8a, 0xd5, 0x24, 0x0b, 0xa9,
	0xe0, 0xaa, 0xec, 0x4a, 0xb6, 0xad, 0xbf, 0x3f, 0xa3, 0x1f, 0xd9, 0x5a, 0xbf, 0x62, 0x1d, 0x93,
	0xb5, 0x7d, 0xe1, 0xbb, 0xfa, 0x36, 0x56, 0x3e, 0xd3, 0xe8, 0xa9, 0xb5, 0x7e, 0x77, 0x46, 0xc7,
	0x9a, 0x57, 0xfd, 0x8a, 0xe5, 0x92, 0x5b, 0xc6, 0x13, 0xad, 0x55, 0xf1, 0xd3, 0xf2, 0x2b, 0xee,
	0xfa, 0xa7, 0x6f, 0xe3, 0x25, 0x87, 0xac, 0x5f, 0xb1, 0xc6, 0xc4, 0x2a, 0xbf, 0x98, 0x5a, 0x9f,
	0x94, 0xbb, 0xa8, 0x7c, 0x57, 0x5d, 0xdf, 0x7e, 0x4b, 0xc7, 0x74, 0xb8, 0xc6, 0x8d, 0x3f, 0xbf,
	0xd9, 0xa8, 0xfd, 0xf5, 0xcd, 0x46, 0xed, 0xef, 0x6f, 0x36, 0x6a, 0x27, 0x8b, 0xf2, 0x35, 0xfb,
	0xd1, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x00, 0x0d, 0x58, 0xb1, 0x1d, 0x1f, 0x00, 0x00,
}
