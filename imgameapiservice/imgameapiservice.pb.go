// protoc --gogofast_out=plugins=grpc:. *.proto
// sudo protoc --gogofast_out=plugins=grpc:. gitlab.chatserver.im/interfaceprobuf/imgameapiservice/imgameapiservice.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: imgameapiservice.proto

package imgameapiservice

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameApiServiceResultCode int32

const (
	GameApiServiceResultCode_ResultCode_Ok                          GameApiServiceResultCode = 0    // ok
	GameApiServiceResultCode_ResultCode_Token_Invalid               GameApiServiceResultCode = 1001 // token无效
	GameApiServiceResultCode_ResultCode_Parameter_Exception         GameApiServiceResultCode = 1002 // 参数异常
	GameApiServiceResultCode_ResultCode_IM_Side_Service_Exception   GameApiServiceResultCode = 1003 // IM侧服务异常
	GameApiServiceResultCode_ResultCode_Game_Side_Service_Exception GameApiServiceResultCode = 1004 // 游戏侧服务异常
)

// Enum value maps for GameApiServiceResultCode.
var (
	GameApiServiceResultCode_name = map[int32]string{
		0:    "ResultCode_Ok",
		1001: "ResultCode_Token_Invalid",
		1002: "ResultCode_Parameter_Exception",
		1003: "ResultCode_IM_Side_Service_Exception",
		1004: "ResultCode_Game_Side_Service_Exception",
	}
	GameApiServiceResultCode_value = map[string]int32{
		"ResultCode_Ok":                          0,
		"ResultCode_Token_Invalid":               1001,
		"ResultCode_Parameter_Exception":         1002,
		"ResultCode_IM_Side_Service_Exception":   1003,
		"ResultCode_Game_Side_Service_Exception": 1004,
	}
)

func (x GameApiServiceResultCode) Enum() *GameApiServiceResultCode {
	p := new(GameApiServiceResultCode)
	*p = x
	return p
}

func (x GameApiServiceResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameApiServiceResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imgameapiservice_proto_enumTypes[0].Descriptor()
}

func (GameApiServiceResultCode) Type() protoreflect.EnumType {
	return &file_imgameapiservice_proto_enumTypes[0]
}

func (x GameApiServiceResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameApiServiceResultCode.Descriptor instead.
func (GameApiServiceResultCode) EnumDescriptor() ([]byte, []int) {
	return file_imgameapiservice_proto_rawDescGZIP(), []int{0}
}

// ---------------------------------- 以下为原服务协议, 暂时保留 ----------------------------------
// 获取帐户token消息请求参数
type GetAccountTokenMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *GetAccountTokenMsg) Reset() {
	*x = GetAccountTokenMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgameapiservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountTokenMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountTokenMsg) ProtoMessage() {}

func (x *GetAccountTokenMsg) ProtoReflect() protoreflect.Message {
	mi := &file_imgameapiservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountTokenMsg.ProtoReflect.Descriptor instead.
func (*GetAccountTokenMsg) Descriptor() ([]byte, []int) {
	return file_imgameapiservice_proto_rawDescGZIP(), []int{0}
}

func (x *GetAccountTokenMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 获取帐户token消息响应参数
type GetAccountTokenMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultCode GameApiServiceResultCode `protobuf:"varint,1,opt,name=ResultCode,proto3,enum=imgameapiservice.GameApiServiceResultCode" json:"ResultCode,omitempty"`
	Token      string                   `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	URL        string                   `protobuf:"bytes,3,opt,name=URL,proto3" json:"URL,omitempty"`
}

func (x *GetAccountTokenMsgReply) Reset() {
	*x = GetAccountTokenMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgameapiservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountTokenMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountTokenMsgReply) ProtoMessage() {}

func (x *GetAccountTokenMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_imgameapiservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountTokenMsgReply.ProtoReflect.Descriptor instead.
func (*GetAccountTokenMsgReply) Descriptor() ([]byte, []int) {
	return file_imgameapiservice_proto_rawDescGZIP(), []int{1}
}

func (x *GetAccountTokenMsgReply) GetResultCode() GameApiServiceResultCode {
	if x != nil {
		return x.ResultCode
	}
	return GameApiServiceResultCode_ResultCode_Ok
}

func (x *GetAccountTokenMsgReply) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetAccountTokenMsgReply) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

// 验证帐户token消息请求参数
type VerifyAccountTokenMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *VerifyAccountTokenMsg) Reset() {
	*x = VerifyAccountTokenMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgameapiservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyAccountTokenMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAccountTokenMsg) ProtoMessage() {}

func (x *VerifyAccountTokenMsg) ProtoReflect() protoreflect.Message {
	mi := &file_imgameapiservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAccountTokenMsg.ProtoReflect.Descriptor instead.
func (*VerifyAccountTokenMsg) Descriptor() ([]byte, []int) {
	return file_imgameapiservice_proto_rawDescGZIP(), []int{2}
}

func (x *VerifyAccountTokenMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VerifyAccountTokenMsg) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// 验证帐户token消息响应参数
type VerifyAccountTokenMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultCode GameApiServiceResultCode `protobuf:"varint,1,opt,name=ResultCode,proto3,enum=imgameapiservice.GameApiServiceResultCode" json:"ResultCode,omitempty"`
	UserId     int32                    `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *VerifyAccountTokenMsgReply) Reset() {
	*x = VerifyAccountTokenMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgameapiservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyAccountTokenMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAccountTokenMsgReply) ProtoMessage() {}

func (x *VerifyAccountTokenMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_imgameapiservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAccountTokenMsgReply.ProtoReflect.Descriptor instead.
func (*VerifyAccountTokenMsgReply) Descriptor() ([]byte, []int) {
	return file_imgameapiservice_proto_rawDescGZIP(), []int{3}
}

func (x *VerifyAccountTokenMsgReply) GetResultCode() GameApiServiceResultCode {
	if x != nil {
		return x.ResultCode
	}
	return GameApiServiceResultCode_ResultCode_Ok
}

func (x *VerifyAccountTokenMsgReply) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 注册请求
type ReqRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAccount        string `protobuf:"bytes,1,opt,name=userAccount,proto3" json:"userAccount,omitempty"`                // 用户账号, 是否必填(Y)
	UserPassword       string `protobuf:"bytes,2,opt,name=userPassword,proto3" json:"userPassword,omitempty"`              // 用户密码, 是否必填(Y)
	ConfirmPwd         string `protobuf:"bytes,3,opt,name=confirmPwd,proto3" json:"confirmPwd,omitempty"`                  // 确认密码, 是否必填(Y)
	UserName           string `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`                      // 用户姓名, 是否必填(N)
	ValidCode          string `protobuf:"bytes,5,opt,name=validCode,proto3" json:"validCode,omitempty"`                    // 验证码, 是否必填(Y)
	Email              string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`                            // 用户邮箱, 是否必填(N)
	UserQq             string `protobuf:"bytes,7,opt,name=userQq,proto3" json:"userQq,omitempty"`                          // 用户QQ, 是否必填(N)
	UserWx             string `protobuf:"bytes,8,opt,name=userWx,proto3" json:"userWx,omitempty"`                          // 用户微信, 是否必填(N)
	Telephone          string `protobuf:"bytes,9,opt,name=telephone,proto3" json:"telephone,omitempty"`                    // 用户手机, 是否必填(N)
	PhoneCode          string `protobuf:"bytes,10,opt,name=phoneCode,proto3" json:"phoneCode,omitempty"`                   // 短信验证码, 是否必填(N)
	BundleVersionId    string `protobuf:"bytes,11,opt,name=bundleVersionId,proto3" json:"bundleVersionId,omitempty"`       // APP版本标识, 是否必填(Y)
	Token              string `protobuf:"bytes,12,opt,name=token,proto3" json:"token,omitempty"`                           // 令牌, 是否必填(Y)
	RegisterSourceName string `protobuf:"bytes,13,opt,name=registerSourceName,proto3" json:"registerSourceName,omitempty"` // 注册来源, 是否必填(Y)
	AppUuid            string `protobuf:"bytes,14,opt,name=appUuid,proto3" json:"appUuid,omitempty"`                       // 应用UUID, 是否必填(N)
	ProxyLinkCode      string `protobuf:"bytes,15,opt,name=proxyLinkCode,proto3" json:"proxyLinkCode,omitempty"`           // 邀请码, 是否必填(N)
	RegisterMethodId   string `protobuf:"bytes,16,opt,name=registerMethodId,proto3" json:"registerMethodId,omitempty"`     // 注册来源方法id, 是否必填(Y)
}

func (x *ReqRegister) Reset() {
	*x = ReqRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgameapiservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqRegister) ProtoMessage() {}

func (x *ReqRegister) ProtoReflect() protoreflect.Message {
	mi := &file_imgameapiservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqRegister.ProtoReflect.Descriptor instead.
func (*ReqRegister) Descriptor() ([]byte, []int) {
	return file_imgameapiservice_proto_rawDescGZIP(), []int{4}
}

func (x *ReqRegister) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

func (x *ReqRegister) GetUserPassword() string {
	if x != nil {
		return x.UserPassword
	}
	return ""
}

func (x *ReqRegister) GetConfirmPwd() string {
	if x != nil {
		return x.ConfirmPwd
	}
	return ""
}

func (x *ReqRegister) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ReqRegister) GetValidCode() string {
	if x != nil {
		return x.ValidCode
	}
	return ""
}

func (x *ReqRegister) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ReqRegister) GetUserQq() string {
	if x != nil {
		return x.UserQq
	}
	return ""
}

func (x *ReqRegister) GetUserWx() string {
	if x != nil {
		return x.UserWx
	}
	return ""
}

func (x *ReqRegister) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *ReqRegister) GetPhoneCode() string {
	if x != nil {
		return x.PhoneCode
	}
	return ""
}

func (x *ReqRegister) GetBundleVersionId() string {
	if x != nil {
		return x.BundleVersionId
	}
	return ""
}

func (x *ReqRegister) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ReqRegister) GetRegisterSourceName() string {
	if x != nil {
		return x.RegisterSourceName
	}
	return ""
}

func (x *ReqRegister) GetAppUuid() string {
	if x != nil {
		return x.AppUuid
	}
	return ""
}

func (x *ReqRegister) GetProxyLinkCode() string {
	if x != nil {
		return x.ProxyLinkCode
	}
	return ""
}

func (x *ReqRegister) GetRegisterMethodId() string {
	if x != nil {
		return x.RegisterMethodId
	}
	return ""
}

// 注册响应
type ReplyRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32             `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // 状态值：1 成功, 其他数值代表失败
	Msg    string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`        // 接口请求的状态信息
	Data   *RegisterRespData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReplyRegister) Reset() {
	*x = ReplyRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgameapiservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyRegister) ProtoMessage() {}

func (x *ReplyRegister) ProtoReflect() protoreflect.Message {
	mi := &file_imgameapiservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyRegister.ProtoReflect.Descriptor instead.
func (*ReplyRegister) Descriptor() ([]byte, []int) {
	return file_imgameapiservice_proto_rawDescGZIP(), []int{5}
}

func (x *ReplyRegister) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ReplyRegister) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ReplyRegister) GetData() *RegisterRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 注册响应数据
type RegisterRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationTime        int64   `protobuf:"varint,1,opt,name=creationTime,proto3" json:"creationTime,omitempty"`               // 创建时间
	CreationBy          string  `protobuf:"bytes,2,opt,name=creationBy,proto3" json:"creationBy,omitempty"`                    // 创建人
	LastUpdatedTime     int64   `protobuf:"varint,3,opt,name=lastUpdatedTime,proto3" json:"lastUpdatedTime,omitempty"`         // 更新时间
	LastUpdatedBy       string  `protobuf:"bytes,4,opt,name=lastUpdatedBy,proto3" json:"lastUpdatedBy,omitempty"`              // 更新人
	DataSourceKey       string  `protobuf:"bytes,5,opt,name=dataSourceKey,proto3" json:"dataSourceKey,omitempty"`              // 分库键
	CurrentUser         string  `protobuf:"bytes,6,opt,name=currentUser,proto3" json:"currentUser,omitempty"`                  // 当前登录用户
	UserId              int32   `protobuf:"varint,7,opt,name=userId,proto3" json:"userId,omitempty"`                           // 用户id
	UserSystemId        string  `protobuf:"bytes,8,opt,name=userSystemId,proto3" json:"userSystemId,omitempty"`                // 系统生成的用户唯一标识(分库键+用户名)
	ProxyLinkCode       string  `protobuf:"bytes,9,opt,name=proxyLinkCode,proto3" json:"proxyLinkCode,omitempty"`              // 代理链
	ParentId            int32   `protobuf:"varint,10,opt,name=parentId,proto3" json:"parentId,omitempty"`                      // 上级id
	ProxyAccount        string  `protobuf:"bytes,11,opt,name=proxyAccount,proto3" json:"proxyAccount,omitempty"`               // 父级代理信息
	UserLevelId         int32   `protobuf:"varint,12,opt,name=userLevelId,proto3" json:"userLevelId,omitempty"`                // 会员层级
	MemberLevelName     string  `protobuf:"bytes,13,opt,name=memberLevelName,proto3" json:"memberLevelName,omitempty"`         // 会员层级名称
	UserAccount         string  `protobuf:"bytes,14,opt,name=userAccount,proto3" json:"userAccount,omitempty"`                 // 用户账号
	UserPassword        string  `protobuf:"bytes,15,opt,name=userPassword,proto3" json:"userPassword,omitempty"`               // 密码
	OldUserPassword     string  `protobuf:"bytes,16,opt,name=oldUserPassword,proto3" json:"oldUserPassword,omitempty"`         // 旧的用户秘密
	RegisterIp          string  `protobuf:"bytes,17,opt,name=registerIp,proto3" json:"registerIp,omitempty"`                   // 注册ip
	RegisterSource      string  `protobuf:"bytes,18,opt,name=registerSource,proto3" json:"registerSource,omitempty"`           // 注册来源【1:PC 2:IOS 3:安卓 4.H5】
	RegisterSourceName  string  `protobuf:"bytes,19,opt,name=registerSourceName,proto3" json:"registerSourceName,omitempty"`   // 来源名称 APPNAME(App Id) 或PC DOMAIN
	RegisterMethodId    int32   `protobuf:"varint,20,opt,name=registerMethodId,proto3" json:"registerMethodId,omitempty"`      // 注册方式
	Sex                 int32   `protobuf:"varint,21,opt,name=sex,proto3" json:"sex,omitempty"`                                // 性别【1男0女】
	Birthday            int32   `protobuf:"varint,22,opt,name=birthday,proto3" json:"birthday,omitempty"`                      // 生日
	NickName            string  `protobuf:"bytes,23,opt,name=nickName,proto3" json:"nickName,omitempty"`                       // 昵称
	Email               string  `protobuf:"bytes,24,opt,name=email,proto3" json:"email,omitempty"`                             // 电子邮件
	HeadPortrait        string  `protobuf:"bytes,25,opt,name=headPortrait,proto3" json:"headPortrait,omitempty"`               // 头像
	UserName            string  `protobuf:"bytes,26,opt,name=userName,proto3" json:"userName,omitempty"`                       // 姓名
	Telephone           string  `protobuf:"bytes,27,opt,name=telephone,proto3" json:"telephone,omitempty"`                     // 电话
	UserQq              string  `protobuf:"bytes,28,opt,name=userQq,proto3" json:"userQq,omitempty"`                           // Qq
	UserWx              string  `protobuf:"bytes,29,opt,name=userWx,proto3" json:"userWx,omitempty"`                           // 微信
	IsFrist             int32   `protobuf:"varint,30,opt,name=isFrist,proto3" json:"isFrist,omitempty"`                        // 是否首充【0否1是】
	IsOwner             int32   `protobuf:"varint,31,opt,name=isOwner,proto3" json:"isOwner,omitempty"`                        // 是否内部会员【0否1是】
	IsEnable            int32   `protobuf:"varint,32,opt,name=isEnable,proto3" json:"isEnable,omitempty"`                      // 是否启用【0否1是】
	IsFrozen            int32   `protobuf:"varint,33,opt,name=isFrozen,proto3" json:"isFrozen,omitempty"`                      // 是否冻结【0否1是】
	BundleVersionId     string  `protobuf:"bytes,34,opt,name=bundleVersionId,proto3" json:"bundleVersionId,omitempty"`         // App版本id
	AppUuid             string  `protobuf:"bytes,35,opt,name=appUuid,proto3" json:"appUuid,omitempty"`                         // App序号
	ValidCode           string  `protobuf:"bytes,36,opt,name=validCode,proto3" json:"validCode,omitempty"`                     // 验证码
	Balance             float64 `protobuf:"fixed64,37,opt,name=balance,proto3" json:"balance,omitempty"`                       // 余额
	Recharge            float64 `protobuf:"fixed64,38,opt,name=recharge,proto3" json:"recharge,omitempty"`                     // 充值
	CompanyInfo         string  `protobuf:"bytes,39,opt,name=companyInfo,proto3" json:"companyInfo,omitempty"`                 // 公司信息
	WithdrawPassword    string  `protobuf:"bytes,40,opt,name=withdrawPassword,proto3" json:"withdrawPassword,omitempty"`       // 取款密码
	OldWithdrawPassword string  `protobuf:"bytes,41,opt,name=oldWithdrawPassword,proto3" json:"oldWithdrawPassword,omitempty"` // 旧的取款密码
	LoginIp             string  `protobuf:"bytes,42,opt,name=loginIp,proto3" json:"loginIp,omitempty"`                         // 登录ip
	LoginRealAddress    string  `protobuf:"bytes,43,opt,name=loginRealAddress,proto3" json:"loginRealAddress,omitempty"`       // 登录真实地址
	LoginSource         string  `protobuf:"bytes,44,opt,name=loginSource,proto3" json:"loginSource,omitempty"`                 // 登录源? 文档中没有
	LoginSourceName     string  `protobuf:"bytes,45,opt,name=loginSourceName,proto3" json:"loginSourceName,omitempty"`         // 登录源名? 文档中没有
	LoginDate           int64   `protobuf:"varint,46,opt,name=loginDate,proto3" json:"loginDate,omitempty"`                    // 登录时间
	PlatformMap         string  `protobuf:"bytes,47,opt,name=platformMap,proto3" json:"platformMap,omitempty"`                 // 平台地图? 文档中没有
	FGQP                string  `protobuf:"bytes,48,opt,name=FGQP,proto3" json:"FGQP,omitempty"`                               // 平台编码, 文档中有测试接口没有, 保留
	KAIYUAN600          string  `protobuf:"bytes,49,opt,name=KAIYUAN600,proto3" json:"KAIYUAN600,omitempty"`                   // 平台编码, 文档中有测试接口没有, 保留
	ZILLIONAIRE         string  `protobuf:"bytes,50,opt,name=ZILLIONAIRE,proto3" json:"ZILLIONAIRE,omitempty"`                 // 平台编码, 文档中有测试接口没有, 保留
	SSOCHESS            string  `protobuf:"bytes,51,opt,name=SSOCHESS,proto3" json:"SSOCHESS,omitempty"`                       // 平台编码, 文档中有测试接口没有, 保留
	FGBY                string  `protobuf:"bytes,52,opt,name=FGBY,proto3" json:"FGBY,omitempty"`                               // 平台编码, 文档中有测试接口没有, 保留
	KYQP                string  `protobuf:"bytes,53,opt,name=KYQP,proto3" json:"KYQP,omitempty"`                               // 平台编码, 文档中有测试接口没有, 保留
	StartDate           int32   `protobuf:"varint,54,opt,name=startDate,proto3" json:"startDate,omitempty"`                    // 开始日期
	EndDate             int32   `protobuf:"varint,55,opt,name=endDate,proto3" json:"endDate,omitempty"`                        // 结束日期
	MemberLevelVO       int32   `protobuf:"varint,56,opt,name=memberLevelVO,proto3" json:"memberLevelVO,omitempty"`            // ? 文档中没有
	MoneyVO             int32   `protobuf:"varint,57,opt,name=moneyVO,proto3" json:"moneyVO,omitempty"`                        // ? 文档中没有
	MemberLevelVIP      int32   `protobuf:"varint,58,opt,name=memberLevelVIP,proto3" json:"memberLevelVIP,omitempty"`          // 会员vip等级
	MemberLevelVIPID    int32   `protobuf:"varint,59,opt,name=memberLevelVIPID,proto3" json:"memberLevelVIPID,omitempty"`      // 会员vip等级id
	MemberLevelVIPName  string  `protobuf:"bytes,60,opt,name=memberLevelVIPName,proto3" json:"memberLevelVIPName,omitempty"`   // 会员vip等级名称
	DepositTotalMax     float64 `protobuf:"fixed64,61,opt,name=depositTotalMax,proto3" json:"depositTotalMax,omitempty"`       // 最大总存款
	DepositTotalMin     float64 `protobuf:"fixed64,62,opt,name=depositTotalMin,proto3" json:"depositTotalMin,omitempty"`       // 最小总存款
	WithdrawTotalMax    float64 `protobuf:"fixed64,63,opt,name=withdrawTotalMax,proto3" json:"withdrawTotalMax,omitempty"`     // 最大总提款
	WithdrawTotalMin    float64 `protobuf:"fixed64,64,opt,name=withdrawTotalMin,proto3" json:"withdrawTotalMin,omitempty"`     // 最小总提款
	TotalPayoffMax      float64 `protobuf:"fixed64,65,opt,name=totalPayoffMax,proto3" json:"totalPayoffMax,omitempty"`         // 最大总盈利
	TotalPayoffMin      float64 `protobuf:"fixed64,66,opt,name=totalPayoffMin,proto3" json:"totalPayoffMin,omitempty"`         // 最小总盈利
	WithdrawNumberMax   int32   `protobuf:"varint,67,opt,name=withdrawNumberMax,proto3" json:"withdrawNumberMax,omitempty"`    // 最大提款次数
	WithdrawNumberMin   int32   `protobuf:"varint,68,opt,name=withdrawNumberMin,proto3" json:"withdrawNumberMin,omitempty"`    // 最小提款次数
	DepositNumberMax    int32   `protobuf:"varint,69,opt,name=depositNumberMax,proto3" json:"depositNumberMax,omitempty"`      // 最大存款次数
	DepositNumberMin    int32   `protobuf:"varint,70,opt,name=depositNumberMin,proto3" json:"depositNumberMin,omitempty"`      // 最小存款次数
	Suffix              string  `protobuf:"bytes,71,opt,name=suffix,proto3" json:"suffix,omitempty"`                           // 表后缀
	Note                string  `protobuf:"bytes,72,opt,name=note,proto3" json:"note,omitempty"`                               // 备注
	DebitType           int32   `protobuf:"varint,73,opt,name=debitType,proto3" json:"debitType,omitempty"`                    // 借方类型, 文档中没有注释
	Token               string  `protobuf:"bytes,74,opt,name=token,proto3" json:"token,omitempty"`                             // 认证信息
	IntegralStartDate   int32   `protobuf:"varint,75,opt,name=integralStartDate,proto3" json:"integralStartDate,omitempty"`    // 打码量开始日期
	IntegralEndDate     int32   `protobuf:"varint,76,opt,name=integralEndDate,proto3" json:"integralEndDate,omitempty"`        // 打码量结束日期
	BankCardCount       int32   `protobuf:"varint,77,opt,name=bankCardCount,proto3" json:"bankCardCount,omitempty"`            // 绑定银行卡数量
	IsCapital           int32   `protobuf:"varint,78,opt,name=isCapital,proto3" json:"isCapital,omitempty"`                    // 是否包含本金【0不包含1包含】
	DamaMultiple        int32   `protobuf:"varint,79,opt,name=damaMultiple,proto3" json:"damaMultiple,omitempty"`              // 打码倍数
	NeedDama            int32   `protobuf:"varint,80,opt,name=needDama,proto3" json:"needDama,omitempty"`                      // 更改需求打码
	InspectionStatus    int32   `protobuf:"varint,81,opt,name=inspectionStatus,proto3" json:"inspectionStatus,omitempty"`      // 稽查状态【0：未稽查1：稽查通过2：稽查未通过】
	InspectionId        int32   `protobuf:"varint,82,opt,name=inspectionId,proto3" json:"inspectionId,omitempty"`              // 打码主键
	IsHaveSubordinate   int32   `protobuf:"varint,83,opt,name=isHaveSubordinate,proto3" json:"isHaveSubordinate,omitempty"`    // 直属成员数量
	TeamCounts          int32   `protobuf:"varint,84,opt,name=teamCounts,proto3" json:"teamCounts,omitempty"`                  // 下级成员数量
	VerifyRedis         bool    `protobuf:"varint,85,opt,name=verifyRedis,proto3" json:"verifyRedis,omitempty"`                // 判断是否是直接开户验证码校验
	OrderCode           string  `protobuf:"bytes,86,opt,name=orderCode,proto3" json:"orderCode,omitempty"`                     // 会员订单号
	FailId              int32   `protobuf:"varint,87,opt,name=failId,proto3" json:"failId,omitempty"`                          // 失败标识? 文档中没有
}

func (x *RegisterRespData) Reset() {
	*x = RegisterRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgameapiservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRespData) ProtoMessage() {}

func (x *RegisterRespData) ProtoReflect() protoreflect.Message {
	mi := &file_imgameapiservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRespData.ProtoReflect.Descriptor instead.
func (*RegisterRespData) Descriptor() ([]byte, []int) {
	return file_imgameapiservice_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterRespData) GetCreationTime() int64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *RegisterRespData) GetCreationBy() string {
	if x != nil {
		return x.CreationBy
	}
	return ""
}

func (x *RegisterRespData) GetLastUpdatedTime() int64 {
	if x != nil {
		return x.LastUpdatedTime
	}
	return 0
}

func (x *RegisterRespData) GetLastUpdatedBy() string {
	if x != nil {
		return x.LastUpdatedBy
	}
	return ""
}

func (x *RegisterRespData) GetDataSourceKey() string {
	if x != nil {
		return x.DataSourceKey
	}
	return ""
}

func (x *RegisterRespData) GetCurrentUser() string {
	if x != nil {
		return x.CurrentUser
	}
	return ""
}

func (x *RegisterRespData) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RegisterRespData) GetUserSystemId() string {
	if x != nil {
		return x.UserSystemId
	}
	return ""
}

func (x *RegisterRespData) GetProxyLinkCode() string {
	if x != nil {
		return x.ProxyLinkCode
	}
	return ""
}

func (x *RegisterRespData) GetParentId() int32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *RegisterRespData) GetProxyAccount() string {
	if x != nil {
		return x.ProxyAccount
	}
	return ""
}

func (x *RegisterRespData) GetUserLevelId() int32 {
	if x != nil {
		return x.UserLevelId
	}
	return 0
}

func (x *RegisterRespData) GetMemberLevelName() string {
	if x != nil {
		return x.MemberLevelName
	}
	return ""
}

func (x *RegisterRespData) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

func (x *RegisterRespData) GetUserPassword() string {
	if x != nil {
		return x.UserPassword
	}
	return ""
}

func (x *RegisterRespData) GetOldUserPassword() string {
	if x != nil {
		return x.OldUserPassword
	}
	return ""
}

func (x *RegisterRespData) GetRegisterIp() string {
	if x != nil {
		return x.RegisterIp
	}
	return ""
}

func (x *RegisterRespData) GetRegisterSource() string {
	if x != nil {
		return x.RegisterSource
	}
	return ""
}

func (x *RegisterRespData) GetRegisterSourceName() string {
	if x != nil {
		return x.RegisterSourceName
	}
	return ""
}

func (x *RegisterRespData) GetRegisterMethodId() int32 {
	if x != nil {
		return x.RegisterMethodId
	}
	return 0
}

func (x *RegisterRespData) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *RegisterRespData) GetBirthday() int32 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

func (x *RegisterRespData) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *RegisterRespData) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RegisterRespData) GetHeadPortrait() string {
	if x != nil {
		return x.HeadPortrait
	}
	return ""
}

func (x *RegisterRespData) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RegisterRespData) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *RegisterRespData) GetUserQq() string {
	if x != nil {
		return x.UserQq
	}
	return ""
}

func (x *RegisterRespData) GetUserWx() string {
	if x != nil {
		return x.UserWx
	}
	return ""
}

func (x *RegisterRespData) GetIsFrist() int32 {
	if x != nil {
		return x.IsFrist
	}
	return 0
}

func (x *RegisterRespData) GetIsOwner() int32 {
	if x != nil {
		return x.IsOwner
	}
	return 0
}

func (x *RegisterRespData) GetIsEnable() int32 {
	if x != nil {
		return x.IsEnable
	}
	return 0
}

func (x *RegisterRespData) GetIsFrozen() int32 {
	if x != nil {
		return x.IsFrozen
	}
	return 0
}

func (x *RegisterRespData) GetBundleVersionId() string {
	if x != nil {
		return x.BundleVersionId
	}
	return ""
}

func (x *RegisterRespData) GetAppUuid() string {
	if x != nil {
		return x.AppUuid
	}
	return ""
}

func (x *RegisterRespData) GetValidCode() string {
	if x != nil {
		return x.ValidCode
	}
	return ""
}

func (x *RegisterRespData) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *RegisterRespData) GetRecharge() float64 {
	if x != nil {
		return x.Recharge
	}
	return 0
}

func (x *RegisterRespData) GetCompanyInfo() string {
	if x != nil {
		return x.CompanyInfo
	}
	return ""
}

func (x *RegisterRespData) GetWithdrawPassword() string {
	if x != nil {
		return x.WithdrawPassword
	}
	return ""
}

func (x *RegisterRespData) GetOldWithdrawPassword() string {
	if x != nil {
		return x.OldWithdrawPassword
	}
	return ""
}

func (x *RegisterRespData) GetLoginIp() string {
	if x != nil {
		return x.LoginIp
	}
	return ""
}

func (x *RegisterRespData) GetLoginRealAddress() string {
	if x != nil {
		return x.LoginRealAddress
	}
	return ""
}

func (x *RegisterRespData) GetLoginSource() string {
	if x != nil {
		return x.LoginSource
	}
	return ""
}

func (x *RegisterRespData) GetLoginSourceName() string {
	if x != nil {
		return x.LoginSourceName
	}
	return ""
}

func (x *RegisterRespData) GetLoginDate() int64 {
	if x != nil {
		return x.LoginDate
	}
	return 0
}

func (x *RegisterRespData) GetPlatformMap() string {
	if x != nil {
		return x.PlatformMap
	}
	return ""
}

func (x *RegisterRespData) GetFGQP() string {
	if x != nil {
		return x.FGQP
	}
	return ""
}

func (x *RegisterRespData) GetKAIYUAN600() string {
	if x != nil {
		return x.KAIYUAN600
	}
	return ""
}

func (x *RegisterRespData) GetZILLIONAIRE() string {
	if x != nil {
		return x.ZILLIONAIRE
	}
	return ""
}

func (x *RegisterRespData) GetSSOCHESS() string {
	if x != nil {
		return x.SSOCHESS
	}
	return ""
}

func (x *RegisterRespData) GetFGBY() string {
	if x != nil {
		return x.FGBY
	}
	return ""
}

func (x *RegisterRespData) GetKYQP() string {
	if x != nil {
		return x.KYQP
	}
	return ""
}

func (x *RegisterRespData) GetStartDate() int32 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *RegisterRespData) GetEndDate() int32 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *RegisterRespData) GetMemberLevelVO() int32 {
	if x != nil {
		return x.MemberLevelVO
	}
	return 0
}

func (x *RegisterRespData) GetMoneyVO() int32 {
	if x != nil {
		return x.MoneyVO
	}
	return 0
}

func (x *RegisterRespData) GetMemberLevelVIP() int32 {
	if x != nil {
		return x.MemberLevelVIP
	}
	return 0
}

func (x *RegisterRespData) GetMemberLevelVIPID() int32 {
	if x != nil {
		return x.MemberLevelVIPID
	}
	return 0
}

func (x *RegisterRespData) GetMemberLevelVIPName() string {
	if x != nil {
		return x.MemberLevelVIPName
	}
	return ""
}

func (x *RegisterRespData) GetDepositTotalMax() float64 {
	if x != nil {
		return x.DepositTotalMax
	}
	return 0
}

func (x *RegisterRespData) GetDepositTotalMin() float64 {
	if x != nil {
		return x.DepositTotalMin
	}
	return 0
}

func (x *RegisterRespData) GetWithdrawTotalMax() float64 {
	if x != nil {
		return x.WithdrawTotalMax
	}
	return 0
}

func (x *RegisterRespData) GetWithdrawTotalMin() float64 {
	if x != nil {
		return x.WithdrawTotalMin
	}
	return 0
}

func (x *RegisterRespData) GetTotalPayoffMax() float64 {
	if x != nil {
		return x.TotalPayoffMax
	}
	return 0
}

func (x *RegisterRespData) GetTotalPayoffMin() float64 {
	if x != nil {
		return x.TotalPayoffMin
	}
	return 0
}

func (x *RegisterRespData) GetWithdrawNumberMax() int32 {
	if x != nil {
		return x.WithdrawNumberMax
	}
	return 0
}

func (x *RegisterRespData) GetWithdrawNumberMin() int32 {
	if x != nil {
		return x.WithdrawNumberMin
	}
	return 0
}

func (x *RegisterRespData) GetDepositNumberMax() int32 {
	if x != nil {
		return x.DepositNumberMax
	}
	return 0
}

func (x *RegisterRespData) GetDepositNumberMin() int32 {
	if x != nil {
		return x.DepositNumberMin
	}
	return 0
}

func (x *RegisterRespData) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *RegisterRespData) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *RegisterRespData) GetDebitType() int32 {
	if x != nil {
		return x.DebitType
	}
	return 0
}

func (x *RegisterRespData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RegisterRespData) GetIntegralStartDate() int32 {
	if x != nil {
		return x.IntegralStartDate
	}
	return 0
}

func (x *RegisterRespData) GetIntegralEndDate() int32 {
	if x != nil {
		return x.IntegralEndDate
	}
	return 0
}

func (x *RegisterRespData) GetBankCardCount() int32 {
	if x != nil {
		return x.BankCardCount
	}
	return 0
}

func (x *RegisterRespData) GetIsCapital() int32 {
	if x != nil {
		return x.IsCapital
	}
	return 0
}

func (x *RegisterRespData) GetDamaMultiple() int32 {
	if x != nil {
		return x.DamaMultiple
	}
	return 0
}

func (x *RegisterRespData) GetNeedDama() int32 {
	if x != nil {
		return x.NeedDama
	}
	return 0
}

func (x *RegisterRespData) GetInspectionStatus() int32 {
	if x != nil {
		return x.InspectionStatus
	}
	return 0
}

func (x *RegisterRespData) GetInspectionId() int32 {
	if x != nil {
		return x.InspectionId
	}
	return 0
}

func (x *RegisterRespData) GetIsHaveSubordinate() int32 {
	if x != nil {
		return x.IsHaveSubordinate
	}
	return 0
}

func (x *RegisterRespData) GetTeamCounts() int32 {
	if x != nil {
		return x.TeamCounts
	}
	return 0
}

func (x *RegisterRespData) GetVerifyRedis() bool {
	if x != nil {
		return x.VerifyRedis
	}
	return false
}

func (x *RegisterRespData) GetOrderCode() string {
	if x != nil {
		return x.OrderCode
	}
	return ""
}

func (x *RegisterRespData) GetFailId() int32 {
	if x != nil {
		return x.FailId
	}
	return 0
}

type ReqLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"` // 用户名
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"` // 密码
	Ip       string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`             // 登录ip
}

func (x *ReqLogin) Reset() {
	*x = ReqLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgameapiservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLogin) ProtoMessage() {}

func (x *ReqLogin) ProtoReflect() protoreflect.Message {
	mi := &file_imgameapiservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLogin.ProtoReflect.Descriptor instead.
func (*ReqLogin) Descriptor() ([]byte, []int) {
	return file_imgameapiservice_proto_rawDescGZIP(), []int{7}
}

func (x *ReqLogin) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ReqLogin) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ReqLogin) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type ReplyLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32          `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"` //状态值：1 成功，其他数值代表失败	1
	Msg    string         `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`        //接口请求的状态信息	SUCCESS
	Data   *LoginRespData `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ReplyLogin) Reset() {
	*x = ReplyLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgameapiservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyLogin) ProtoMessage() {}

func (x *ReplyLogin) ProtoReflect() protoreflect.Message {
	mi := &file_imgameapiservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyLogin.ProtoReflect.Descriptor instead.
func (*ReplyLogin) Descriptor() ([]byte, []int) {
	return file_imgameapiservice_proto_rawDescGZIP(), []int{8}
}

func (x *ReplyLogin) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ReplyLogin) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ReplyLogin) GetData() *LoginRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type LoginRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationTime        int64   `protobuf:"varint,1,opt,name=creationTime,proto3" json:"creationTime,omitempty"`               //创建时间	2011-11-11 11:11:11
	CreationBy          string  `protobuf:"bytes,2,opt,name=creationBy,proto3" json:"creationBy,omitempty"`                    //创建人
	LastUpdatedTime     int64   `protobuf:"varint,3,opt,name=lastUpdatedTime,proto3" json:"lastUpdatedTime,omitempty"`         //新时间	2011-11-11 11:11:11
	LastUpdatedBy       string  `protobuf:"bytes,4,opt,name=lastUpdatedBy,proto3" json:"lastUpdatedBy,omitempty"`              //更新人	Test1
	DataSourceKey       string  `protobuf:"bytes,5,opt,name=dataSourceKey,proto3" json:"dataSourceKey,omitempty"`              //分库键	8bet
	CurrentUser         string  `protobuf:"bytes,6,opt,name=currentUser,proto3" json:"currentUser,omitempty"`                  //当前登录用户	Test1
	UserId              int64   `protobuf:"varint,7,opt,name=userId,proto3" json:"userId,omitempty"`                           //用户id	3423
	UserSystemId        string  `protobuf:"bytes,8,opt,name=userSystemId,proto3" json:"userSystemId,omitempty"`                //系统生成的用户唯一标识(分库键+用户名)	8bet_423424
	ProxyLinkCode       string  `protobuf:"bytes,9,opt,name=proxyLinkCode,proto3" json:"proxyLinkCode,omitempty"`              //代理链	_342423_423423
	ParentId            string  `protobuf:"bytes,10,opt,name=parentId,proto3" json:"parentId,omitempty"`                       //上级id	53453
	ProxyAccount        string  `protobuf:"bytes,11,opt,name=proxyAccount,proto3" json:"proxyAccount,omitempty"`               //父级代理信息
	UserLevelId         int32   `protobuf:"varint,12,opt,name=userLevelId,proto3" json:"userLevelId,omitempty"`                //会员层级	1
	MemberLevelName     string  `protobuf:"bytes,13,opt,name=memberLevelName,proto3" json:"memberLevelName,omitempty"`         //会员层级名称
	UserAccount         string  `protobuf:"bytes,14,opt,name=userAccount,proto3" json:"userAccount,omitempty"`                 //用户账号	Test1
	UserPassword        string  `protobuf:"bytes,15,opt,name=userPassword,proto3" json:"userPassword,omitempty"`               //密码
	OldUserPassword     string  `protobuf:"bytes,16,opt,name=oldUserPassword,proto3" json:"oldUserPassword,omitempty"`         //旧的用户秘密
	RegisterIp          string  `protobuf:"bytes,17,opt,name=registerIp,proto3" json:"registerIp,omitempty"`                   //注册ip	0.0.0.0
	RegisterSource      string  `protobuf:"bytes,18,opt,name=registerSource,proto3" json:"registerSource,omitempty"`           //注册来源1:PC 2:IOS 3:安卓 4.H5	1
	RegisterSourceName  string  `protobuf:"bytes,19,opt,name=registerSourceName,proto3" json:"registerSourceName,omitempty"`   //来源名称 APPNAME(App Id) 或PC DOMAIN 	DOMAIN
	RegisterMethodId    string  `protobuf:"bytes,20,opt,name=registerMethodId,proto3" json:"registerMethodId,omitempty"`       //注册方式	1
	Sex                 string  `protobuf:"bytes,21,opt,name=sex,proto3" json:"sex,omitempty"`                                 //性别【1男0女】	1
	Birthday            string  `protobuf:"bytes,22,opt,name=birthday,proto3" json:"birthday,omitempty"`                       //生日	19990909
	NickName            string  `protobuf:"bytes,23,opt,name=nickName,proto3" json:"nickName,omitempty"`                       //昵称	放松
	Email               string  `protobuf:"bytes,24,opt,name=email,proto3" json:"email,omitempty"`                             //电子邮件	131231@163.com
	HeadPortrait        string  `protobuf:"bytes,25,opt,name=headPortrait,proto3" json:"headPortrait,omitempty"`               //头像
	UserName            string  `protobuf:"bytes,26,opt,name=userName,proto3" json:"userName,omitempty"`                       //姓名	张三
	Telephone           string  `protobuf:"bytes,27,opt,name=telephone,proto3" json:"telephone,omitempty"`                     //电话	132312312
	UserQq              string  `protobuf:"bytes,28,opt,name=userQq,proto3" json:"userQq,omitempty"`                           //Qq	423423423
	UserWx              string  `protobuf:"bytes,29,opt,name=userWx,proto3" json:"userWx,omitempty"`                           //微信	23423423
	IsFrist             int32   `protobuf:"varint,30,opt,name=isFrist,proto3" json:"isFrist,omitempty"`                        //是否首充【0否1是】	1
	IsOwner             int32   `protobuf:"varint,31,opt,name=isOwner,proto3" json:"isOwner,omitempty"`                        //是否内部会员【0否1是】	1
	IsEnable            int32   `protobuf:"varint,32,opt,name=isEnable,proto3" json:"isEnable,omitempty"`                      //是否启用【0否1是】	1
	IsFrozen            int32   `protobuf:"varint,33,opt,name=isFrozen,proto3" json:"isFrozen,omitempty"`                      //是否冻结【0否1是】	1
	BundleVersionId     string  `protobuf:"bytes,34,opt,name=bundleVersionId,proto3" json:"bundleVersionId,omitempty"`         //App版本id	42342
	AppUuid             string  `protobuf:"bytes,35,opt,name=appUuid,proto3" json:"appUuid,omitempty"`                         //App序号	42342
	ValidCode           string  `protobuf:"bytes,36,opt,name=validCode,proto3" json:"validCode,omitempty"`                     //验证码	23423
	Balance             float32 `protobuf:"fixed32,37,opt,name=balance,proto3" json:"balance,omitempty"`                       //余额	100
	Recharge            float32 `protobuf:"fixed32,38,opt,name=recharge,proto3" json:"recharge,omitempty"`                     //充值	100             // 返回 null
	CompanyInfo         string  `protobuf:"bytes,39,opt,name=companyInfo,proto3" json:"companyInfo,omitempty"`                 //公司信息
	WithdrawPassword    string  `protobuf:"bytes,40,opt,name=withdrawPassword,proto3" json:"withdrawPassword,omitempty"`       //取款密码
	OldWithdrawPassword string  `protobuf:"bytes,41,opt,name=oldWithdrawPassword,proto3" json:"oldWithdrawPassword,omitempty"` //旧的取款密码
	LoginIp             string  `protobuf:"bytes,42,opt,name=loginIp,proto3" json:"loginIp,omitempty"`                         //登录ip	0.0.0.0
	LoginRealAddress    string  `protobuf:"bytes,43,opt,name=loginRealAddress,proto3" json:"loginRealAddress,omitempty"`       //登录真实地址	菲律宾
	LoginSource         string  `protobuf:"bytes,44,opt,name=loginSource,proto3" json:"loginSource,omitempty"`                 //
	LoginSourceName     string  `protobuf:"bytes,45,opt,name=loginSourceName,proto3" json:"loginSourceName,omitempty"`         //
	LoginDate           int64   `protobuf:"varint,46,opt,name=loginDate,proto3" json:"loginDate,omitempty"`                    //登录时间
	PlatformMap         string  `protobuf:"bytes,47,opt,name=platformMap,proto3" json:"platformMap,omitempty"`                 //
	StartDate           string  `protobuf:"bytes,48,opt,name=startDate,proto3" json:"startDate,omitempty"`                     //开始日期	2011-11-11 11:11:11
	EndDate             string  `protobuf:"bytes,49,opt,name=endDate,proto3" json:"endDate,omitempty"`                         //结束日期	2011-11-11 11:11:11
	MemberLevelVO       string  `protobuf:"bytes,50,opt,name=memberLevelVO,proto3" json:"memberLevelVO,omitempty"`             //
	MoneyVO             string  `protobuf:"bytes,51,opt,name=moneyVO,proto3" json:"moneyVO,omitempty"`                         //
	MemberLevelVIP      string  `protobuf:"bytes,52,opt,name=memberLevelVIP,proto3" json:"memberLevelVIP,omitempty"`           //会员vip等级	1
	MemberLevelVIPID    string  `protobuf:"bytes,53,opt,name=memberLevelVIPID,proto3" json:"memberLevelVIPID,omitempty"`       //会员vip等级id	13123
	MemberLevelVIPName  string  `protobuf:"bytes,54,opt,name=memberLevelVIPName,proto3" json:"memberLevelVIPName,omitempty"`   //会员vip等级名称	VIP5
	DepositTotalMax     string  `protobuf:"bytes,55,opt,name=depositTotalMax,proto3" json:"depositTotalMax,omitempty"`         //最大总存款	1
	DepositTotalMin     string  `protobuf:"bytes,56,opt,name=depositTotalMin,proto3" json:"depositTotalMin,omitempty"`         //最小总存款	1
	WithdrawTotalMax    string  `protobuf:"bytes,57,opt,name=withdrawTotalMax,proto3" json:"withdrawTotalMax,omitempty"`       //最大总提款	1
	WithdrawTotalMin    string  `protobuf:"bytes,58,opt,name=withdrawTotalMin,proto3" json:"withdrawTotalMin,omitempty"`       //最小总提款	1
	TotalPayoffMax      string  `protobuf:"bytes,59,opt,name=totalPayoffMax,proto3" json:"totalPayoffMax,omitempty"`           //最大总盈利	1
	TotalPayoffMin      string  `protobuf:"bytes,60,opt,name=totalPayoffMin,proto3" json:"totalPayoffMin,omitempty"`           //最小总盈利	1
	WithdrawNumberMax   string  `protobuf:"bytes,61,opt,name=withdrawNumberMax,proto3" json:"withdrawNumberMax,omitempty"`     //最大提款次数	1
	WithdrawNumberMin   string  `protobuf:"bytes,62,opt,name=withdrawNumberMin,proto3" json:"withdrawNumberMin,omitempty"`     //最小提款次数	1
	DepositNumberMax    string  `protobuf:"bytes,63,opt,name=depositNumberMax,proto3" json:"depositNumberMax,omitempty"`       //最大存款次数	1
	DepositNumberMin    string  `protobuf:"bytes,64,opt,name=depositNumberMin,proto3" json:"depositNumberMin,omitempty"`       //最小存款次数	1
	Suffix              string  `protobuf:"bytes,65,opt,name=suffix,proto3" json:"suffix,omitempty"`                           //表后缀	0909
	Note                string  `protobuf:"bytes,66,opt,name=note,proto3" json:"note,omitempty"`                               //备注	备注
	DebitType           string  `protobuf:"bytes,67,opt,name=debitType,proto3" json:"debitType,omitempty"`                     //
	Token               string  `protobuf:"bytes,68,opt,name=token,proto3" json:"token,omitempty"`                             //认证信息	aedc4ff7-f2e5-460b-b3de-9ad258b33a7f
	IntegralStartDate   string  `protobuf:"bytes,69,opt,name=integralStartDate,proto3" json:"integralStartDate,omitempty"`     //打码量开始日期	2011-11-11 11:11:11
	IntegralEndDate     string  `protobuf:"bytes,70,opt,name=integralEndDate,proto3" json:"integralEndDate,omitempty"`         //打码量结束日期	2011-11-11 11:11:11
	BankCardCount       int32   `protobuf:"varint,71,opt,name=bankCardCount,proto3" json:"bankCardCount,omitempty"`            //绑定银行卡数量	3
	IsCapital           string  `protobuf:"bytes,72,opt,name=isCapital,proto3" json:"isCapital,omitempty"`                     //是否包含本金【0不包含1包含】	1
	DamaMultiple        string  `protobuf:"bytes,73,opt,name=damaMultiple,proto3" json:"damaMultiple,omitempty"`               //打码倍数	1
	NeedDama            string  `protobuf:"bytes,74,opt,name=needDama,proto3" json:"needDama,omitempty"`                       //更改需求打码	100
	InspectionStatus    string  `protobuf:"bytes,75,opt,name=inspectionStatus,proto3" json:"inspectionStatus,omitempty"`       //稽查状态【0：未稽查1：稽查通过2：稽查未通过】
	InspectionId        string  `protobuf:"bytes,76,opt,name=inspectionId,proto3" json:"inspectionId,omitempty"`               //打码主键	111
	IsHaveSubordinate   string  `protobuf:"bytes,77,opt,name=isHaveSubordinate,proto3" json:"isHaveSubordinate,omitempty"`     //直属成员数量	1
	TeamCounts          string  `protobuf:"bytes,78,opt,name=teamCounts,proto3" json:"teamCounts,omitempty"`                   //下级成员数量	1
	VerifyRedis         bool    `protobuf:"varint,79,opt,name=verifyRedis,proto3" json:"verifyRedis,omitempty"`                //判断是否是直接开户验证码校验	false
	OrderCode           string  `protobuf:"bytes,80,opt,name=orderCode,proto3" json:"orderCode,omitempty"`                     //会员订单号	3123123
	FailId              string  `protobuf:"bytes,81,opt,name=failId,proto3" json:"failId,omitempty"`                           //
	FGQP                string  `protobuf:"bytes,82,opt,name=FGQP,proto3" json:"FGQP,omitempty"`                               //平台编码	T48BETFGQP3A116623
	KAIYUAN600          string  `protobuf:"bytes,83,opt,name=KAIYUAN600,proto3" json:"KAIYUAN600,omitempty"`                   //平台编码	600w3A116623
	ZILLIONAIRE         string  `protobuf:"bytes,84,opt,name=ZILLIONAIRE,proto3" json:"ZILLIONAIRE,omitempty"`                 //平台编码	8000233A116623
	SSOCHESS            string  `protobuf:"bytes,85,opt,name=SSOCHESS,proto3" json:"SSOCHESS,omitempty"`                       //平台编码	2003223A116623
	FGBY                string  `protobuf:"bytes,86,opt,name=FGBY,proto3" json:"FGBY,omitempty"`                               //平台编码	T48BETFGBY3A116623
	KYQP                string  `protobuf:"bytes,87,opt,name=KYQP,proto3" json:"KYQP,omitempty"`                               //平台编码	713623A116623
}

func (x *LoginRespData) Reset() {
	*x = LoginRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgameapiservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRespData) ProtoMessage() {}

func (x *LoginRespData) ProtoReflect() protoreflect.Message {
	mi := &file_imgameapiservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRespData.ProtoReflect.Descriptor instead.
func (*LoginRespData) Descriptor() ([]byte, []int) {
	return file_imgameapiservice_proto_rawDescGZIP(), []int{9}
}

func (x *LoginRespData) GetCreationTime() int64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *LoginRespData) GetCreationBy() string {
	if x != nil {
		return x.CreationBy
	}
	return ""
}

func (x *LoginRespData) GetLastUpdatedTime() int64 {
	if x != nil {
		return x.LastUpdatedTime
	}
	return 0
}

func (x *LoginRespData) GetLastUpdatedBy() string {
	if x != nil {
		return x.LastUpdatedBy
	}
	return ""
}

func (x *LoginRespData) GetDataSourceKey() string {
	if x != nil {
		return x.DataSourceKey
	}
	return ""
}

func (x *LoginRespData) GetCurrentUser() string {
	if x != nil {
		return x.CurrentUser
	}
	return ""
}

func (x *LoginRespData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LoginRespData) GetUserSystemId() string {
	if x != nil {
		return x.UserSystemId
	}
	return ""
}

func (x *LoginRespData) GetProxyLinkCode() string {
	if x != nil {
		return x.ProxyLinkCode
	}
	return ""
}

func (x *LoginRespData) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *LoginRespData) GetProxyAccount() string {
	if x != nil {
		return x.ProxyAccount
	}
	return ""
}

func (x *LoginRespData) GetUserLevelId() int32 {
	if x != nil {
		return x.UserLevelId
	}
	return 0
}

func (x *LoginRespData) GetMemberLevelName() string {
	if x != nil {
		return x.MemberLevelName
	}
	return ""
}

func (x *LoginRespData) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

func (x *LoginRespData) GetUserPassword() string {
	if x != nil {
		return x.UserPassword
	}
	return ""
}

func (x *LoginRespData) GetOldUserPassword() string {
	if x != nil {
		return x.OldUserPassword
	}
	return ""
}

func (x *LoginRespData) GetRegisterIp() string {
	if x != nil {
		return x.RegisterIp
	}
	return ""
}

func (x *LoginRespData) GetRegisterSource() string {
	if x != nil {
		return x.RegisterSource
	}
	return ""
}

func (x *LoginRespData) GetRegisterSourceName() string {
	if x != nil {
		return x.RegisterSourceName
	}
	return ""
}

func (x *LoginRespData) GetRegisterMethodId() string {
	if x != nil {
		return x.RegisterMethodId
	}
	return ""
}

func (x *LoginRespData) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *LoginRespData) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *LoginRespData) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *LoginRespData) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginRespData) GetHeadPortrait() string {
	if x != nil {
		return x.HeadPortrait
	}
	return ""
}

func (x *LoginRespData) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *LoginRespData) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *LoginRespData) GetUserQq() string {
	if x != nil {
		return x.UserQq
	}
	return ""
}

func (x *LoginRespData) GetUserWx() string {
	if x != nil {
		return x.UserWx
	}
	return ""
}

func (x *LoginRespData) GetIsFrist() int32 {
	if x != nil {
		return x.IsFrist
	}
	return 0
}

func (x *LoginRespData) GetIsOwner() int32 {
	if x != nil {
		return x.IsOwner
	}
	return 0
}

func (x *LoginRespData) GetIsEnable() int32 {
	if x != nil {
		return x.IsEnable
	}
	return 0
}

func (x *LoginRespData) GetIsFrozen() int32 {
	if x != nil {
		return x.IsFrozen
	}
	return 0
}

func (x *LoginRespData) GetBundleVersionId() string {
	if x != nil {
		return x.BundleVersionId
	}
	return ""
}

func (x *LoginRespData) GetAppUuid() string {
	if x != nil {
		return x.AppUuid
	}
	return ""
}

func (x *LoginRespData) GetValidCode() string {
	if x != nil {
		return x.ValidCode
	}
	return ""
}

func (x *LoginRespData) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *LoginRespData) GetRecharge() float32 {
	if x != nil {
		return x.Recharge
	}
	return 0
}

func (x *LoginRespData) GetCompanyInfo() string {
	if x != nil {
		return x.CompanyInfo
	}
	return ""
}

func (x *LoginRespData) GetWithdrawPassword() string {
	if x != nil {
		return x.WithdrawPassword
	}
	return ""
}

func (x *LoginRespData) GetOldWithdrawPassword() string {
	if x != nil {
		return x.OldWithdrawPassword
	}
	return ""
}

func (x *LoginRespData) GetLoginIp() string {
	if x != nil {
		return x.LoginIp
	}
	return ""
}

func (x *LoginRespData) GetLoginRealAddress() string {
	if x != nil {
		return x.LoginRealAddress
	}
	return ""
}

func (x *LoginRespData) GetLoginSource() string {
	if x != nil {
		return x.LoginSource
	}
	return ""
}

func (x *LoginRespData) GetLoginSourceName() string {
	if x != nil {
		return x.LoginSourceName
	}
	return ""
}

func (x *LoginRespData) GetLoginDate() int64 {
	if x != nil {
		return x.LoginDate
	}
	return 0
}

func (x *LoginRespData) GetPlatformMap() string {
	if x != nil {
		return x.PlatformMap
	}
	return ""
}

func (x *LoginRespData) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *LoginRespData) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *LoginRespData) GetMemberLevelVO() string {
	if x != nil {
		return x.MemberLevelVO
	}
	return ""
}

func (x *LoginRespData) GetMoneyVO() string {
	if x != nil {
		return x.MoneyVO
	}
	return ""
}

func (x *LoginRespData) GetMemberLevelVIP() string {
	if x != nil {
		return x.MemberLevelVIP
	}
	return ""
}

func (x *LoginRespData) GetMemberLevelVIPID() string {
	if x != nil {
		return x.MemberLevelVIPID
	}
	return ""
}

func (x *LoginRespData) GetMemberLevelVIPName() string {
	if x != nil {
		return x.MemberLevelVIPName
	}
	return ""
}

func (x *LoginRespData) GetDepositTotalMax() string {
	if x != nil {
		return x.DepositTotalMax
	}
	return ""
}

func (x *LoginRespData) GetDepositTotalMin() string {
	if x != nil {
		return x.DepositTotalMin
	}
	return ""
}

func (x *LoginRespData) GetWithdrawTotalMax() string {
	if x != nil {
		return x.WithdrawTotalMax
	}
	return ""
}

func (x *LoginRespData) GetWithdrawTotalMin() string {
	if x != nil {
		return x.WithdrawTotalMin
	}
	return ""
}

func (x *LoginRespData) GetTotalPayoffMax() string {
	if x != nil {
		return x.TotalPayoffMax
	}
	return ""
}

func (x *LoginRespData) GetTotalPayoffMin() string {
	if x != nil {
		return x.TotalPayoffMin
	}
	return ""
}

func (x *LoginRespData) GetWithdrawNumberMax() string {
	if x != nil {
		return x.WithdrawNumberMax
	}
	return ""
}

func (x *LoginRespData) GetWithdrawNumberMin() string {
	if x != nil {
		return x.WithdrawNumberMin
	}
	return ""
}

func (x *LoginRespData) GetDepositNumberMax() string {
	if x != nil {
		return x.DepositNumberMax
	}
	return ""
}

func (x *LoginRespData) GetDepositNumberMin() string {
	if x != nil {
		return x.DepositNumberMin
	}
	return ""
}

func (x *LoginRespData) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *LoginRespData) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *LoginRespData) GetDebitType() string {
	if x != nil {
		return x.DebitType
	}
	return ""
}

func (x *LoginRespData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginRespData) GetIntegralStartDate() string {
	if x != nil {
		return x.IntegralStartDate
	}
	return ""
}

func (x *LoginRespData) GetIntegralEndDate() string {
	if x != nil {
		return x.IntegralEndDate
	}
	return ""
}

func (x *LoginRespData) GetBankCardCount() int32 {
	if x != nil {
		return x.BankCardCount
	}
	return 0
}

func (x *LoginRespData) GetIsCapital() string {
	if x != nil {
		return x.IsCapital
	}
	return ""
}

func (x *LoginRespData) GetDamaMultiple() string {
	if x != nil {
		return x.DamaMultiple
	}
	return ""
}

func (x *LoginRespData) GetNeedDama() string {
	if x != nil {
		return x.NeedDama
	}
	return ""
}

func (x *LoginRespData) GetInspectionStatus() string {
	if x != nil {
		return x.InspectionStatus
	}
	return ""
}

func (x *LoginRespData) GetInspectionId() string {
	if x != nil {
		return x.InspectionId
	}
	return ""
}

func (x *LoginRespData) GetIsHaveSubordinate() string {
	if x != nil {
		return x.IsHaveSubordinate
	}
	return ""
}

func (x *LoginRespData) GetTeamCounts() string {
	if x != nil {
		return x.TeamCounts
	}
	return ""
}

func (x *LoginRespData) GetVerifyRedis() bool {
	if x != nil {
		return x.VerifyRedis
	}
	return false
}

func (x *LoginRespData) GetOrderCode() string {
	if x != nil {
		return x.OrderCode
	}
	return ""
}

func (x *LoginRespData) GetFailId() string {
	if x != nil {
		return x.FailId
	}
	return ""
}

func (x *LoginRespData) GetFGQP() string {
	if x != nil {
		return x.FGQP
	}
	return ""
}

func (x *LoginRespData) GetKAIYUAN600() string {
	if x != nil {
		return x.KAIYUAN600
	}
	return ""
}

func (x *LoginRespData) GetZILLIONAIRE() string {
	if x != nil {
		return x.ZILLIONAIRE
	}
	return ""
}

func (x *LoginRespData) GetSSOCHESS() string {
	if x != nil {
		return x.SSOCHESS
	}
	return ""
}

func (x *LoginRespData) GetFGBY() string {
	if x != nil {
		return x.FGBY
	}
	return ""
}

func (x *LoginRespData) GetKYQP() string {
	if x != nil {
		return x.KYQP
	}
	return ""
}

type ReqMemberBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token            string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`                       // 用户的token
	Cookie           string `protobuf:"bytes,2,opt,name=cookie,proto3" json:"cookie,omitempty"`                     // 用户cookie
	UpdateBlanceFlag string `protobuf:"bytes,3,opt,name=updateBlanceFlag,proto3" json:"updateBlanceFlag,omitempty"` // 参数updateBlanceFlag为'0'代表不用同步平台余额，其它情况则同步平台余额
}

func (x *ReqMemberBalance) Reset() {
	*x = ReqMemberBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgameapiservice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqMemberBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqMemberBalance) ProtoMessage() {}

func (x *ReqMemberBalance) ProtoReflect() protoreflect.Message {
	mi := &file_imgameapiservice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqMemberBalance.ProtoReflect.Descriptor instead.
func (*ReqMemberBalance) Descriptor() ([]byte, []int) {
	return file_imgameapiservice_proto_rawDescGZIP(), []int{10}
}

func (x *ReqMemberBalance) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ReqMemberBalance) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *ReqMemberBalance) GetUpdateBlanceFlag() string {
	if x != nil {
		return x.UpdateBlanceFlag
	}
	return ""
}

type ReplyMemberBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // 状态值：1 成功，其他数值代表失败
	Data   float32 `protobuf:"fixed32,2,opt,name=data,proto3" json:"data,omitempty"`    //  会员余额
	Msg    string  `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`        //  返回的SUCCESS
}

func (x *ReplyMemberBalance) Reset() {
	*x = ReplyMemberBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgameapiservice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyMemberBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyMemberBalance) ProtoMessage() {}

func (x *ReplyMemberBalance) ProtoReflect() protoreflect.Message {
	mi := &file_imgameapiservice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyMemberBalance.ProtoReflect.Descriptor instead.
func (*ReplyMemberBalance) Descriptor() ([]byte, []int) {
	return file_imgameapiservice_proto_rawDescGZIP(), []int{11}
}

func (x *ReplyMemberBalance) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ReplyMemberBalance) GetData() float32 {
	if x != nil {
		return x.Data
	}
	return 0
}

func (x *ReplyMemberBalance) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_imgameapiservice_proto protoreflect.FileDescriptor

var file_imgameapiservice_proto_rawDesc = []byte{
	0x0a, 0x16, 0x69, 0x6d, 0x67, 0x61, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x69, 0x6d, 0x67, 0x61, 0x6d, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x2c, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x73, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x4a, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x69, 0x6d, 0x67, 0x61, 0x6d,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x41, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x22, 0x45, 0x0a, 0x15, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x73,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x80, 0x01, 0x0a, 0x1a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4a,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x69, 0x6d, 0x67, 0x61, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x70, 0x69, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x8b, 0x04, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x50, 0x77, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x77, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x51, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x51, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x57, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x57, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x55, 0x75, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x4c, 0x69, 0x6e, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64,
	0x22, 0x71, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6d, 0x67, 0x61,
	0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xac, 0x17, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x4c, 0x69,
	0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x70,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x65,
	0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x51, 0x71, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x51, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x57, 0x78, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x57, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x46, 0x72, 0x69, 0x73, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x46, 0x72, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70,
	0x70, 0x55, 0x75, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x6c, 0x64, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x6c, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x49, 0x70, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x49, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x61, 0x70, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x47,
	0x51, 0x50, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x47, 0x51, 0x50, 0x12, 0x1e,
	0x0a, 0x0a, 0x4b, 0x41, 0x49, 0x59, 0x55, 0x41, 0x4e, 0x36, 0x30, 0x30, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x4b, 0x41, 0x49, 0x59, 0x55, 0x41, 0x4e, 0x36, 0x30, 0x30, 0x12, 0x20,
	0x0a, 0x0b, 0x5a, 0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x41, 0x49, 0x52, 0x45, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x5a, 0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x41, 0x49, 0x52, 0x45,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x53, 0x4f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x53, 0x53, 0x4f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x12, 0x12, 0x0a, 0x04,
	0x46, 0x47, 0x42, 0x59, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x47, 0x42, 0x59,
	0x12, 0x12, 0x0a, 0x04, 0x4b, 0x59, 0x51, 0x50, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4b, 0x59, 0x51, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x4f, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x56, 0x4f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x4f, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x4f, 0x12, 0x26, 0x0a, 0x0e,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x49, 0x50, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x56, 0x49, 0x50, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x56, 0x49, 0x50, 0x49, 0x44, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x49, 0x50, 0x49, 0x44,
	0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56,
	0x49, 0x50, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x49, 0x50, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4d, 0x61, 0x78, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x78,
	0x12, 0x2a, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x69, 0x6e, 0x18, 0x40, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x66, 0x66, 0x4d, 0x61, 0x78, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x66,
	0x66, 0x4d, 0x61, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x6f, 0x66, 0x66, 0x4d, 0x69, 0x6e, 0x18, 0x42, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x66, 0x66, 0x4d, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61,
	0x78, 0x18, 0x43, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x18,
	0x44, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x65, 0x62, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x64, 0x65, 0x62, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x6c, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6b,
	0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x4e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x73, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x61, 0x6d, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x44, 0x61, 0x6d, 0x61, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x44, 0x61, 0x6d, 0x61, 0x12, 0x2a, 0x0a, 0x10,
	0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x51, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x52, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x69, 0x73, 0x48, 0x61, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x73, 0x48, 0x61, 0x76, 0x65, 0x53,
	0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x54, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x64, 0x69, 0x73, 0x18, 0x55, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x64, 0x69, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61,
	0x69, 0x6c, 0x49, 0x64, 0x18, 0x57, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c,
	0x49, 0x64, 0x22, 0x52, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x6b, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x33,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69,
	0x6d, 0x67, 0x61, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xa9, 0x17, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x70, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x70, 0x12,
	0x26, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x51, 0x71, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x51, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x57, 0x78, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x57,
	0x78, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x46, 0x72, 0x69, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x46, 0x72, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x28, 0x0a,
	0x0f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x6c, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x6f, 0x6c, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x12,
	0x2a, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x4d, 0x61, 0x70, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x4f,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x56, 0x4f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x4f,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x4f, 0x12,
	0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x49,
	0x50, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x56, 0x49, 0x50, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x49, 0x50, 0x49, 0x44, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x49,
	0x50, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x56, 0x49, 0x50, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x49, 0x50, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x12, 0x28, 0x0a,
	0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x66, 0x66, 0x4d, 0x61,
	0x78, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x79, 0x6f, 0x66, 0x66, 0x4d, 0x61, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x79, 0x6f, 0x66, 0x66, 0x4d, 0x69, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x66, 0x66, 0x4d, 0x69, 0x6e, 0x12,
	0x2c, 0x0a, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4d, 0x61, 0x78, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x2c, 0x0a,
	0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d,
	0x69, 0x6e, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x40, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4d, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x65, 0x62, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x62, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x45, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62,
	0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x48,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x44, 0x61, 0x6d, 0x61, 0x18,
	0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x44, 0x61, 0x6d, 0x61, 0x12,
	0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x11, 0x69, 0x73, 0x48, 0x61, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x73, 0x48, 0x61,
	0x76, 0x65, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x4e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x64, 0x69, 0x73, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x64, 0x69, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x47, 0x51, 0x50, 0x18, 0x52, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x47, 0x51, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x41, 0x49,
	0x59, 0x55, 0x41, 0x4e, 0x36, 0x30, 0x30, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b,
	0x41, 0x49, 0x59, 0x55, 0x41, 0x4e, 0x36, 0x30, 0x30, 0x12, 0x20, 0x0a, 0x0b, 0x5a, 0x49, 0x4c,
	0x4c, 0x49, 0x4f, 0x4e, 0x41, 0x49, 0x52, 0x45, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x5a, 0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x41, 0x49, 0x52, 0x45, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x53, 0x4f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x53, 0x4f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x47, 0x42, 0x59, 0x18,
	0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x47, 0x42, 0x59, 0x12, 0x12, 0x0a, 0x04, 0x4b,
	0x59, 0x51, 0x50, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4b, 0x59, 0x51, 0x50, 0x22,
	0x6c, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x52, 0x0a,
	0x12, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x2a, 0xc9, 0x01, 0x0a, 0x18, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x70, 0x69, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4f, 0x6b, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0xe9, 0x07,
	0x12, 0x23, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0xea, 0x07, 0x12, 0x29, 0x0a, 0x24, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4d, 0x5f, 0x53, 0x69, 0x64, 0x65, 0x5f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xeb, 0x07,
	0x12, 0x2b, 0x0a, 0x26, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x5f, 0x53, 0x69, 0x64, 0x65, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xec, 0x07, 0x32, 0xdb, 0x03,
	0x0a, 0x10, 0x49, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4c, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d,
	0x2e, 0x69, 0x6d, 0x67, 0x61, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x71, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x1f, 0x2e,
	0x69, 0x6d, 0x67, 0x61, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x2e, 0x69, 0x6d, 0x67, 0x61,
	0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x1c, 0x2e, 0x69, 0x6d, 0x67, 0x61, 0x6d, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x69, 0x6d, 0x67,
	0x61, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x24,
	0x2e, 0x69, 0x6d, 0x67, 0x61, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x2e, 0x69, 0x6d, 0x67, 0x61,
	0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x73, 0x67, 0x1a,
	0x29, 0x2e, 0x69, 0x6d, 0x67, 0x61, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x12,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x27, 0x2e, 0x69, 0x6d, 0x67, 0x61, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x2c, 0x2e, 0x69, 0x6d,
	0x67, 0x61, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x22, 0x5a, 0x20, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69,
	0x6d, 0x67, 0x61, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_imgameapiservice_proto_rawDescOnce sync.Once
	file_imgameapiservice_proto_rawDescData = file_imgameapiservice_proto_rawDesc
)

func file_imgameapiservice_proto_rawDescGZIP() []byte {
	file_imgameapiservice_proto_rawDescOnce.Do(func() {
		file_imgameapiservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_imgameapiservice_proto_rawDescData)
	})
	return file_imgameapiservice_proto_rawDescData
}

var file_imgameapiservice_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_imgameapiservice_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_imgameapiservice_proto_goTypes = []interface{}{
	(GameApiServiceResultCode)(0),      // 0: imgameapiservice.GameApiServiceResultCode
	(*GetAccountTokenMsg)(nil),         // 1: imgameapiservice.GetAccountTokenMsg
	(*GetAccountTokenMsgReply)(nil),    // 2: imgameapiservice.GetAccountTokenMsgReply
	(*VerifyAccountTokenMsg)(nil),      // 3: imgameapiservice.VerifyAccountTokenMsg
	(*VerifyAccountTokenMsgReply)(nil), // 4: imgameapiservice.VerifyAccountTokenMsgReply
	(*ReqRegister)(nil),                // 5: imgameapiservice.ReqRegister
	(*ReplyRegister)(nil),              // 6: imgameapiservice.ReplyRegister
	(*RegisterRespData)(nil),           // 7: imgameapiservice.RegisterRespData
	(*ReqLogin)(nil),                   // 8: imgameapiservice.ReqLogin
	(*ReplyLogin)(nil),                 // 9: imgameapiservice.ReplyLogin
	(*LoginRespData)(nil),              // 10: imgameapiservice.LoginRespData
	(*ReqMemberBalance)(nil),           // 11: imgameapiservice.ReqMemberBalance
	(*ReplyMemberBalance)(nil),         // 12: imgameapiservice.ReplyMemberBalance
}
var file_imgameapiservice_proto_depIdxs = []int32{
	0,  // 0: imgameapiservice.GetAccountTokenMsgReply.ResultCode:type_name -> imgameapiservice.GameApiServiceResultCode
	0,  // 1: imgameapiservice.VerifyAccountTokenMsgReply.ResultCode:type_name -> imgameapiservice.GameApiServiceResultCode
	7,  // 2: imgameapiservice.ReplyRegister.data:type_name -> imgameapiservice.RegisterRespData
	10, // 3: imgameapiservice.ReplyLogin.Data:type_name -> imgameapiservice.LoginRespData
	5,  // 4: imgameapiservice.ImGameApiService.Register:input_type -> imgameapiservice.ReqRegister
	8,  // 5: imgameapiservice.ImGameApiService.Login:input_type -> imgameapiservice.ReqLogin
	11, // 6: imgameapiservice.ImGameApiService.FindMemberBalance:input_type -> imgameapiservice.ReqMemberBalance
	1,  // 7: imgameapiservice.ImGameApiService.GetAccountToken:input_type -> imgameapiservice.GetAccountTokenMsg
	3,  // 8: imgameapiservice.ImGameApiService.VerifyAccountToken:input_type -> imgameapiservice.VerifyAccountTokenMsg
	6,  // 9: imgameapiservice.ImGameApiService.Register:output_type -> imgameapiservice.ReplyRegister
	9,  // 10: imgameapiservice.ImGameApiService.Login:output_type -> imgameapiservice.ReplyLogin
	12, // 11: imgameapiservice.ImGameApiService.FindMemberBalance:output_type -> imgameapiservice.ReplyMemberBalance
	2,  // 12: imgameapiservice.ImGameApiService.GetAccountToken:output_type -> imgameapiservice.GetAccountTokenMsgReply
	4,  // 13: imgameapiservice.ImGameApiService.VerifyAccountToken:output_type -> imgameapiservice.VerifyAccountTokenMsgReply
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_imgameapiservice_proto_init() }
func file_imgameapiservice_proto_init() {
	if File_imgameapiservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_imgameapiservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountTokenMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgameapiservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountTokenMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgameapiservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyAccountTokenMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgameapiservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyAccountTokenMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgameapiservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgameapiservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgameapiservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgameapiservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgameapiservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgameapiservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgameapiservice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqMemberBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgameapiservice_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyMemberBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_imgameapiservice_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_imgameapiservice_proto_goTypes,
		DependencyIndexes: file_imgameapiservice_proto_depIdxs,
		EnumInfos:         file_imgameapiservice_proto_enumTypes,
		MessageInfos:      file_imgameapiservice_proto_msgTypes,
	}.Build()
	File_imgameapiservice_proto = out.File
	file_imgameapiservice_proto_rawDesc = nil
	file_imgameapiservice_proto_goTypes = nil
	file_imgameapiservice_proto_depIdxs = nil
}
