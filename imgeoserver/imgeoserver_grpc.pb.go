// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imgeoserver.proto

package imgeoserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerServiceClient is the client API for ServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerServiceClient interface {
	// 超找附近的人或者群的操作
	GetNearContactAndChannel(ctx context.Context, in *GetNearContactAndChannelReq, opts ...grpc.CallOption) (*GetNearContactAndChannelResp, error)
	// 管理段设置群地理位置
	SetChnlGeo(ctx context.Context, in *SetChnlGeoReq, opts ...grpc.CallOption) (*SetChnlGeoRsp, error)
	// 管理端设置用户地理位置
	SetUserGeo(ctx context.Context, in *SetUserGeoReq, opts ...grpc.CallOption) (*SetUserGeoRsp, error)
	// 查询
	QueryNearbyVenues(ctx context.Context, in *QueryNearbyVenuesReq, opts ...grpc.CallOption) (*QueryNearbyVenuesRsp, error)
	// 存储
	StoreNearbyVenues(ctx context.Context, in *StoreNearbyVenuesReq, opts ...grpc.CallOption) (*StoreNearbyVenuesRsp, error)
}

type serverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerServiceClient(cc grpc.ClientConnInterface) ServerServiceClient {
	return &serverServiceClient{cc}
}

func (c *serverServiceClient) GetNearContactAndChannel(ctx context.Context, in *GetNearContactAndChannelReq, opts ...grpc.CallOption) (*GetNearContactAndChannelResp, error) {
	out := new(GetNearContactAndChannelResp)
	err := c.cc.Invoke(ctx, "/imgeoserver.ServerService/GetNearContactAndChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) SetChnlGeo(ctx context.Context, in *SetChnlGeoReq, opts ...grpc.CallOption) (*SetChnlGeoRsp, error) {
	out := new(SetChnlGeoRsp)
	err := c.cc.Invoke(ctx, "/imgeoserver.ServerService/SetChnlGeo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) SetUserGeo(ctx context.Context, in *SetUserGeoReq, opts ...grpc.CallOption) (*SetUserGeoRsp, error) {
	out := new(SetUserGeoRsp)
	err := c.cc.Invoke(ctx, "/imgeoserver.ServerService/SetUserGeo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) QueryNearbyVenues(ctx context.Context, in *QueryNearbyVenuesReq, opts ...grpc.CallOption) (*QueryNearbyVenuesRsp, error) {
	out := new(QueryNearbyVenuesRsp)
	err := c.cc.Invoke(ctx, "/imgeoserver.ServerService/QueryNearbyVenues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) StoreNearbyVenues(ctx context.Context, in *StoreNearbyVenuesReq, opts ...grpc.CallOption) (*StoreNearbyVenuesRsp, error) {
	out := new(StoreNearbyVenuesRsp)
	err := c.cc.Invoke(ctx, "/imgeoserver.ServerService/StoreNearbyVenues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServiceServer is the server API for ServerService service.
// All implementations must embed UnimplementedServerServiceServer
// for forward compatibility
type ServerServiceServer interface {
	// 超找附近的人或者群的操作
	GetNearContactAndChannel(context.Context, *GetNearContactAndChannelReq) (*GetNearContactAndChannelResp, error)
	// 管理段设置群地理位置
	SetChnlGeo(context.Context, *SetChnlGeoReq) (*SetChnlGeoRsp, error)
	// 管理端设置用户地理位置
	SetUserGeo(context.Context, *SetUserGeoReq) (*SetUserGeoRsp, error)
	// 查询
	QueryNearbyVenues(context.Context, *QueryNearbyVenuesReq) (*QueryNearbyVenuesRsp, error)
	// 存储
	StoreNearbyVenues(context.Context, *StoreNearbyVenuesReq) (*StoreNearbyVenuesRsp, error)
	mustEmbedUnimplementedServerServiceServer()
}

// UnimplementedServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerServiceServer struct {
}

func (UnimplementedServerServiceServer) GetNearContactAndChannel(context.Context, *GetNearContactAndChannelReq) (*GetNearContactAndChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNearContactAndChannel not implemented")
}
func (UnimplementedServerServiceServer) SetChnlGeo(context.Context, *SetChnlGeoReq) (*SetChnlGeoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChnlGeo not implemented")
}
func (UnimplementedServerServiceServer) SetUserGeo(context.Context, *SetUserGeoReq) (*SetUserGeoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserGeo not implemented")
}
func (UnimplementedServerServiceServer) QueryNearbyVenues(context.Context, *QueryNearbyVenuesReq) (*QueryNearbyVenuesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNearbyVenues not implemented")
}
func (UnimplementedServerServiceServer) StoreNearbyVenues(context.Context, *StoreNearbyVenuesReq) (*StoreNearbyVenuesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreNearbyVenues not implemented")
}
func (UnimplementedServerServiceServer) mustEmbedUnimplementedServerServiceServer() {}

// UnsafeServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServiceServer will
// result in compilation errors.
type UnsafeServerServiceServer interface {
	mustEmbedUnimplementedServerServiceServer()
}

func RegisterServerServiceServer(s grpc.ServiceRegistrar, srv ServerServiceServer) {
	s.RegisterService(&ServerService_ServiceDesc, srv)
}

func _ServerService_GetNearContactAndChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNearContactAndChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetNearContactAndChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imgeoserver.ServerService/GetNearContactAndChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetNearContactAndChannel(ctx, req.(*GetNearContactAndChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_SetChnlGeo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChnlGeoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).SetChnlGeo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imgeoserver.ServerService/SetChnlGeo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).SetChnlGeo(ctx, req.(*SetChnlGeoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_SetUserGeo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserGeoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).SetUserGeo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imgeoserver.ServerService/SetUserGeo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).SetUserGeo(ctx, req.(*SetUserGeoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_QueryNearbyVenues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNearbyVenuesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).QueryNearbyVenues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imgeoserver.ServerService/QueryNearbyVenues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).QueryNearbyVenues(ctx, req.(*QueryNearbyVenuesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_StoreNearbyVenues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreNearbyVenuesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).StoreNearbyVenues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imgeoserver.ServerService/StoreNearbyVenues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).StoreNearbyVenues(ctx, req.(*StoreNearbyVenuesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerService_ServiceDesc is the grpc.ServiceDesc for ServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imgeoserver.ServerService",
	HandlerType: (*ServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNearContactAndChannel",
			Handler:    _ServerService_GetNearContactAndChannel_Handler,
		},
		{
			MethodName: "SetChnlGeo",
			Handler:    _ServerService_SetChnlGeo_Handler,
		},
		{
			MethodName: "SetUserGeo",
			Handler:    _ServerService_SetUserGeo_Handler,
		},
		{
			MethodName: "QueryNearbyVenues",
			Handler:    _ServerService_QueryNearbyVenues_Handler,
		},
		{
			MethodName: "StoreNearbyVenues",
			Handler:    _ServerService_StoreNearbyVenues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imgeoserver.proto",
}
