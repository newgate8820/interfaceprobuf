// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: imgeoserver.proto

package imgeoserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pbcomm "interfaceprobuf/pbcomm"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GeoResCode int32

const (
	GeoResCode_Successful GeoResCode = 0 // 成功
	GeoResCode_UnknownErr GeoResCode = 1 // 未知错误
	GeoResCode_InParamErr GeoResCode = 2 // 传入参数错误
	GeoResCode_ModelOpErr GeoResCode = 3 // model operation error
	GeoResCode_CacheOpErr GeoResCode = 4 // cache operation error
)

// Enum value maps for GeoResCode.
var (
	GeoResCode_name = map[int32]string{
		0: "Successful",
		1: "UnknownErr",
		2: "InParamErr",
		3: "ModelOpErr",
		4: "CacheOpErr",
	}
	GeoResCode_value = map[string]int32{
		"Successful": 0,
		"UnknownErr": 1,
		"InParamErr": 2,
		"ModelOpErr": 3,
		"CacheOpErr": 4,
	}
)

func (x GeoResCode) Enum() *GeoResCode {
	p := new(GeoResCode)
	*p = x
	return p
}

func (x GeoResCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeoResCode) Descriptor() protoreflect.EnumDescriptor {
	return file_imgeoserver_proto_enumTypes[0].Descriptor()
}

func (GeoResCode) Type() protoreflect.EnumType {
	return &file_imgeoserver_proto_enumTypes[0]
}

func (x GeoResCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeoResCode.Descriptor instead.
func (GeoResCode) EnumDescriptor() ([]byte, []int) {
	return file_imgeoserver_proto_rawDescGZIP(), []int{0}
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lng float64 `protobuf:"fixed64,1,opt,name=lng,proto3" json:"lng,omitempty"` // longitude
	Lat float64 `protobuf:"fixed64,2,opt,name=lat,proto3" json:"lat,omitempty"` // latitude
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgeoserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_imgeoserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_imgeoserver_proto_rawDescGZIP(), []int{0}
}

func (x *Location) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *Location) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

type GetNearContactAndChannelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Respbyts []byte `protobuf:"bytes,1,opt,name=respbyts,proto3" json:"respbyts,omitempty"`
}

func (x *GetNearContactAndChannelResp) Reset() {
	*x = GetNearContactAndChannelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgeoserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNearContactAndChannelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNearContactAndChannelResp) ProtoMessage() {}

func (x *GetNearContactAndChannelResp) ProtoReflect() protoreflect.Message {
	mi := &file_imgeoserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNearContactAndChannelResp.ProtoReflect.Descriptor instead.
func (*GetNearContactAndChannelResp) Descriptor() ([]byte, []int) {
	return file_imgeoserver_proto_rawDescGZIP(), []int{1}
}

func (x *GetNearContactAndChannelResp) GetRespbyts() []byte {
	if x != nil {
		return x.Respbyts
	}
	return nil
}

type GetNearContactAndChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId           int64         `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	ReqMessageId    int64         `protobuf:"varint,3,opt,name=reqMessageId,proto3" json:"reqMessageId,omitempty"`       //请求的msgId
	ReqBytes        []byte        `protobuf:"bytes,4,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`                //请求结构的二进制
	IsAllowedChgGeo bool          `protobuf:"varint,5,opt,name=IsAllowedChgGeo,proto3" json:"IsAllowedChgGeo,omitempty"` //是否允许修改地理位置
	ReqDebug        *pbcomm.Debug `protobuf:"bytes,6,opt,name=ReqDebug,proto3" json:"ReqDebug,omitempty"`
}

func (x *GetNearContactAndChannelReq) Reset() {
	*x = GetNearContactAndChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgeoserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNearContactAndChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNearContactAndChannelReq) ProtoMessage() {}

func (x *GetNearContactAndChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_imgeoserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNearContactAndChannelReq.ProtoReflect.Descriptor instead.
func (*GetNearContactAndChannelReq) Descriptor() ([]byte, []int) {
	return file_imgeoserver_proto_rawDescGZIP(), []int{2}
}

func (x *GetNearContactAndChannelReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetNearContactAndChannelReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *GetNearContactAndChannelReq) GetReqMessageId() int64 {
	if x != nil {
		return x.ReqMessageId
	}
	return 0
}

func (x *GetNearContactAndChannelReq) GetReqBytes() []byte {
	if x != nil {
		return x.ReqBytes
	}
	return nil
}

func (x *GetNearContactAndChannelReq) GetIsAllowedChgGeo() bool {
	if x != nil {
		return x.IsAllowedChgGeo
	}
	return false
}

func (x *GetNearContactAndChannelReq) GetReqDebug() *pbcomm.Debug {
	if x != nil {
		return x.ReqDebug
	}
	return nil
}

// 设置群地理信息
type SetChnlGeoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChnlId  int32   `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`
	GeoLng  float64 `protobuf:"fixed64,2,opt,name=Geo_lng,json=GeoLng,proto3" json:"Geo_lng,omitempty"`
	GeoLat  float64 `protobuf:"fixed64,3,opt,name=Geo_lat,json=GeoLat,proto3" json:"Geo_lat,omitempty"`
	GeoAddr string  `protobuf:"bytes,4,opt,name=GeoAddr,proto3" json:"GeoAddr,omitempty"`
}

func (x *SetChnlGeoReq) Reset() {
	*x = SetChnlGeoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgeoserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChnlGeoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChnlGeoReq) ProtoMessage() {}

func (x *SetChnlGeoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imgeoserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChnlGeoReq.ProtoReflect.Descriptor instead.
func (*SetChnlGeoReq) Descriptor() ([]byte, []int) {
	return file_imgeoserver_proto_rawDescGZIP(), []int{3}
}

func (x *SetChnlGeoReq) GetChnlId() int32 {
	if x != nil {
		return x.ChnlId
	}
	return 0
}

func (x *SetChnlGeoReq) GetGeoLng() float64 {
	if x != nil {
		return x.GeoLng
	}
	return 0
}

func (x *SetChnlGeoReq) GetGeoLat() float64 {
	if x != nil {
		return x.GeoLat
	}
	return 0
}

func (x *SetChnlGeoReq) GetGeoAddr() string {
	if x != nil {
		return x.GeoAddr
	}
	return ""
}

type SetChnlGeoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode GeoResCode `protobuf:"varint,1,opt,name=ErrCode,proto3,enum=imgeoserver.GeoResCode" json:"ErrCode,omitempty"`
	ErrInfo string     `protobuf:"bytes,2,opt,name=ErrInfo,proto3" json:"ErrInfo,omitempty"`
}

func (x *SetChnlGeoRsp) Reset() {
	*x = SetChnlGeoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgeoserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChnlGeoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChnlGeoRsp) ProtoMessage() {}

func (x *SetChnlGeoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imgeoserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChnlGeoRsp.ProtoReflect.Descriptor instead.
func (*SetChnlGeoRsp) Descriptor() ([]byte, []int) {
	return file_imgeoserver_proto_rawDescGZIP(), []int{4}
}

func (x *SetChnlGeoRsp) GetErrCode() GeoResCode {
	if x != nil {
		return x.ErrCode
	}
	return GeoResCode_Successful
}

func (x *SetChnlGeoRsp) GetErrInfo() string {
	if x != nil {
		return x.ErrInfo
	}
	return ""
}

// 设置用户地理信息
type SetUserGeoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32         `protobuf:"varint,1,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	UserKey  int64         `protobuf:"varint,2,opt,name=UserKey,proto3" json:"UserKey,omitempty"`              // user key id.
	GeoLng   float64       `protobuf:"fixed64,3,opt,name=Geo_lng,json=GeoLng,proto3" json:"Geo_lng,omitempty"` // longitude.
	GeoLat   float64       `protobuf:"fixed64,4,opt,name=Geo_lat,json=GeoLat,proto3" json:"Geo_lat,omitempty"` // latitude.
	ReqDebug *pbcomm.Debug `protobuf:"bytes,5,opt,name=ReqDebug,proto3" json:"ReqDebug,omitempty"`
}

func (x *SetUserGeoReq) Reset() {
	*x = SetUserGeoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgeoserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserGeoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserGeoReq) ProtoMessage() {}

func (x *SetUserGeoReq) ProtoReflect() protoreflect.Message {
	mi := &file_imgeoserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserGeoReq.ProtoReflect.Descriptor instead.
func (*SetUserGeoReq) Descriptor() ([]byte, []int) {
	return file_imgeoserver_proto_rawDescGZIP(), []int{5}
}

func (x *SetUserGeoReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetUserGeoReq) GetUserKey() int64 {
	if x != nil {
		return x.UserKey
	}
	return 0
}

func (x *SetUserGeoReq) GetGeoLng() float64 {
	if x != nil {
		return x.GeoLng
	}
	return 0
}

func (x *SetUserGeoReq) GetGeoLat() float64 {
	if x != nil {
		return x.GeoLat
	}
	return 0
}

func (x *SetUserGeoReq) GetReqDebug() *pbcomm.Debug {
	if x != nil {
		return x.ReqDebug
	}
	return nil
}

type SetUserGeoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode GeoResCode `protobuf:"varint,1,opt,name=ErrCode,proto3,enum=imgeoserver.GeoResCode" json:"ErrCode,omitempty"`
	ErrInfo string     `protobuf:"bytes,2,opt,name=ErrInfo,proto3" json:"ErrInfo,omitempty"`
}

func (x *SetUserGeoRsp) Reset() {
	*x = SetUserGeoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgeoserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserGeoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserGeoRsp) ProtoMessage() {}

func (x *SetUserGeoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imgeoserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserGeoRsp.ProtoReflect.Descriptor instead.
func (*SetUserGeoRsp) Descriptor() ([]byte, []int) {
	return file_imgeoserver_proto_rawDescGZIP(), []int{6}
}

func (x *SetUserGeoRsp) GetErrCode() GeoResCode {
	if x != nil {
		return x.ErrCode
	}
	return GeoResCode_Successful
}

func (x *SetUserGeoRsp) GetErrInfo() string {
	if x != nil {
		return x.ErrInfo
	}
	return ""
}

type QueryNearbyVenuesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32   `protobuf:"varint,1,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	HashId  int64   `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`
	GeoLng  float64 `protobuf:"fixed64,3,opt,name=Geo_lng,json=GeoLng,proto3" json:"Geo_lng,omitempty"`
	GeoLat  float64 `protobuf:"fixed64,4,opt,name=Geo_lat,json=GeoLat,proto3" json:"Geo_lat,omitempty"`
	Keyword string  `protobuf:"bytes,5,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
}

func (x *QueryNearbyVenuesReq) Reset() {
	*x = QueryNearbyVenuesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgeoserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNearbyVenuesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNearbyVenuesReq) ProtoMessage() {}

func (x *QueryNearbyVenuesReq) ProtoReflect() protoreflect.Message {
	mi := &file_imgeoserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNearbyVenuesReq.ProtoReflect.Descriptor instead.
func (*QueryNearbyVenuesReq) Descriptor() ([]byte, []int) {
	return file_imgeoserver_proto_rawDescGZIP(), []int{7}
}

func (x *QueryNearbyVenuesReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QueryNearbyVenuesReq) GetHashId() int64 {
	if x != nil {
		return x.HashId
	}
	return 0
}

func (x *QueryNearbyVenuesReq) GetGeoLng() float64 {
	if x != nil {
		return x.GeoLng
	}
	return 0
}

func (x *QueryNearbyVenuesReq) GetGeoLat() float64 {
	if x != nil {
		return x.GeoLat
	}
	return 0
}

func (x *QueryNearbyVenuesReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type QueryNearbyVenuesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode GeoResCode   `protobuf:"varint,1,opt,name=ErrCode,proto3,enum=imgeoserver.GeoResCode" json:"ErrCode,omitempty"`
	ErrInfo string       `protobuf:"bytes,2,opt,name=ErrInfo,proto3" json:"ErrInfo,omitempty"`
	Venues  []*VenueInfo `protobuf:"bytes,3,rep,name=Venues,proto3" json:"Venues,omitempty"`
}

func (x *QueryNearbyVenuesRsp) Reset() {
	*x = QueryNearbyVenuesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgeoserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNearbyVenuesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNearbyVenuesRsp) ProtoMessage() {}

func (x *QueryNearbyVenuesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imgeoserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNearbyVenuesRsp.ProtoReflect.Descriptor instead.
func (*QueryNearbyVenuesRsp) Descriptor() ([]byte, []int) {
	return file_imgeoserver_proto_rawDescGZIP(), []int{8}
}

func (x *QueryNearbyVenuesRsp) GetErrCode() GeoResCode {
	if x != nil {
		return x.ErrCode
	}
	return GeoResCode_Successful
}

func (x *QueryNearbyVenuesRsp) GetErrInfo() string {
	if x != nil {
		return x.ErrInfo
	}
	return ""
}

func (x *QueryNearbyVenuesRsp) GetVenues() []*VenueInfo {
	if x != nil {
		return x.Venues
	}
	return nil
}

type VenueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VenueId   string  `protobuf:"bytes,1,opt,name=VenueId,proto3" json:"VenueId,omitempty"`
	VenueName string  `protobuf:"bytes,2,opt,name=VenueName,proto3" json:"VenueName,omitempty"`
	VenueType string  `protobuf:"bytes,3,opt,name=VenueType,proto3" json:"VenueType,omitempty"`
	GeoLat    float64 `protobuf:"fixed64,4,opt,name=GeoLat,proto3" json:"GeoLat,omitempty"`
	GeoLng    float64 `protobuf:"fixed64,5,opt,name=GeoLng,proto3" json:"GeoLng,omitempty"`
	Region    string  `protobuf:"bytes,6,opt,name=Region,proto3" json:"Region,omitempty"`
	Street    string  `protobuf:"bytes,7,opt,name=Street,proto3" json:"Street,omitempty"`
	Address   string  `protobuf:"bytes,8,opt,name=Address,proto3" json:"Address,omitempty"`
	Country   string  `protobuf:"bytes,9,opt,name=Country,proto3" json:"Country,omitempty"`
	Locality  string  `protobuf:"bytes,10,opt,name=Locality,proto3" json:"Locality,omitempty"`
	PostTown  string  `protobuf:"bytes,11,opt,name=PostTown,proto3" json:"PostTown,omitempty"`
	Timezone  string  `protobuf:"bytes,12,opt,name=Timezone,proto3" json:"Timezone,omitempty"`
}

func (x *VenueInfo) Reset() {
	*x = VenueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgeoserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VenueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VenueInfo) ProtoMessage() {}

func (x *VenueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_imgeoserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VenueInfo.ProtoReflect.Descriptor instead.
func (*VenueInfo) Descriptor() ([]byte, []int) {
	return file_imgeoserver_proto_rawDescGZIP(), []int{9}
}

func (x *VenueInfo) GetVenueId() string {
	if x != nil {
		return x.VenueId
	}
	return ""
}

func (x *VenueInfo) GetVenueName() string {
	if x != nil {
		return x.VenueName
	}
	return ""
}

func (x *VenueInfo) GetVenueType() string {
	if x != nil {
		return x.VenueType
	}
	return ""
}

func (x *VenueInfo) GetGeoLat() float64 {
	if x != nil {
		return x.GeoLat
	}
	return 0
}

func (x *VenueInfo) GetGeoLng() float64 {
	if x != nil {
		return x.GeoLng
	}
	return 0
}

func (x *VenueInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *VenueInfo) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *VenueInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *VenueInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *VenueInfo) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *VenueInfo) GetPostTown() string {
	if x != nil {
		return x.PostTown
	}
	return ""
}

func (x *VenueInfo) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

// store venue information.
type StoreNearbyVenuesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Venues []*VenueInfo `protobuf:"bytes,1,rep,name=Venues,proto3" json:"Venues,omitempty"`
}

func (x *StoreNearbyVenuesReq) Reset() {
	*x = StoreNearbyVenuesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgeoserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreNearbyVenuesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreNearbyVenuesReq) ProtoMessage() {}

func (x *StoreNearbyVenuesReq) ProtoReflect() protoreflect.Message {
	mi := &file_imgeoserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreNearbyVenuesReq.ProtoReflect.Descriptor instead.
func (*StoreNearbyVenuesReq) Descriptor() ([]byte, []int) {
	return file_imgeoserver_proto_rawDescGZIP(), []int{10}
}

func (x *StoreNearbyVenuesReq) GetVenues() []*VenueInfo {
	if x != nil {
		return x.Venues
	}
	return nil
}

type StoreNearbyVenuesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode GeoResCode `protobuf:"varint,1,opt,name=ErrCode,proto3,enum=imgeoserver.GeoResCode" json:"ErrCode,omitempty"`
	ErrInfo string     `protobuf:"bytes,2,opt,name=ErrInfo,proto3" json:"ErrInfo,omitempty"`
}

func (x *StoreNearbyVenuesRsp) Reset() {
	*x = StoreNearbyVenuesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imgeoserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreNearbyVenuesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreNearbyVenuesRsp) ProtoMessage() {}

func (x *StoreNearbyVenuesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imgeoserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreNearbyVenuesRsp.ProtoReflect.Descriptor instead.
func (*StoreNearbyVenuesRsp) Descriptor() ([]byte, []int) {
	return file_imgeoserver_proto_rawDescGZIP(), []int{11}
}

func (x *StoreNearbyVenuesRsp) GetErrCode() GeoResCode {
	if x != nil {
		return x.ErrCode
	}
	return GeoResCode_Successful
}

func (x *StoreNearbyVenuesRsp) GetErrInfo() string {
	if x != nil {
		return x.ErrInfo
	}
	return ""
}

var File_imgeoserver_proto protoreflect.FileDescriptor

var file_imgeoserver_proto_rawDesc = []byte{
	0x0a, 0x11, 0x69, 0x6d, 0x67, 0x65, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x69, 0x6d, 0x67, 0x65, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x1a, 0x13, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6c, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x6c, 0x61, 0x74, 0x22, 0x3a, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x61, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x62, 0x79, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x62, 0x79, 0x74,
	0x73, 0x22, 0xe2, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x71, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x68,
	0x67, 0x47, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x49, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x68, 0x67, 0x47, 0x65, 0x6f, 0x12, 0x29, 0x0a, 0x08, 0x52,
	0x65, 0x71, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x08, 0x52, 0x65,
	0x71, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x74, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x43, 0x68, 0x6e,
	0x6c, 0x47, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x43, 0x68, 0x6e, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x68, 0x6e, 0x6c, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x47, 0x65, 0x6f, 0x5f, 0x6c, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x47, 0x65, 0x6f, 0x4c, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x47, 0x65, 0x6f,
	0x5f, 0x6c, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x47, 0x65, 0x6f, 0x4c,
	0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x65, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x65, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x22, 0x5c, 0x0a, 0x0d,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x6e, 0x6c, 0x47, 0x65, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x31, 0x0a,
	0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x69, 0x6d, 0x67, 0x65, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6f,
	0x52, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x45, 0x72, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x55, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x47, 0x65, 0x6f, 0x5f, 0x6c, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x47, 0x65, 0x6f, 0x4c, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x47, 0x65, 0x6f, 0x5f,
	0x6c, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x47, 0x65, 0x6f, 0x4c, 0x61,
	0x74, 0x12, 0x29, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x08, 0x52, 0x65, 0x71, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x5c, 0x0a, 0x0d,
	0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x31, 0x0a,
	0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x69, 0x6d, 0x67, 0x65, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6f,
	0x52, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x45, 0x72, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x48, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48,
	0x61, 0x73, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x47, 0x65, 0x6f, 0x5f, 0x6c, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x47, 0x65, 0x6f, 0x4c, 0x6e, 0x67, 0x12, 0x17,
	0x0a, 0x07, 0x47, 0x65, 0x6f, 0x5f, 0x6c, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x47, 0x65, 0x6f, 0x4c, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x93, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x61, 0x72, 0x62,
	0x79, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x07, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d,
	0x67, 0x65, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6f, 0x52, 0x65, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x45, 0x72, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x45, 0x72, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x06, 0x56, 0x65, 0x6e, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x67, 0x65, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x09, 0x56, 0x65, 0x6e, 0x75,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47,
	0x65, 0x6f, 0x4c, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x47, 0x65, 0x6f,
	0x4c, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x6f, 0x4c, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x47, 0x65, 0x6f, 0x4c, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x6f, 0x73, 0x74, 0x54, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x6f, 0x73, 0x74, 0x54, 0x6f, 0x77, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x22, 0x46, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x65, 0x61, 0x72,
	0x62, 0x79, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x06, 0x56,
	0x65, 0x6e, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d,
	0x67, 0x65, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x14, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x73,
	0x52, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x67, 0x65, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x45,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x72, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2a, 0x5c, 0x0a, 0x0a, 0x47, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x72, 0x72, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x45, 0x72, 0x72, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4f, 0x70, 0x45, 0x72, 0x72, 0x10, 0x04, 0x32, 0xcc,
	0x03, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x71, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x2e, 0x69,
	0x6d, 0x67, 0x65, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x69, 0x6d, 0x67, 0x65, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x43, 0x68, 0x6e, 0x6c, 0x47, 0x65,
	0x6f, 0x12, 0x1a, 0x2e, 0x69, 0x6d, 0x67, 0x65, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x6e, 0x6c, 0x47, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x69, 0x6d, 0x67, 0x65, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x43,
	0x68, 0x6e, 0x6c, 0x47, 0x65, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0a, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x6f, 0x12, 0x1a, 0x2e, 0x69, 0x6d, 0x67, 0x65,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x65, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x69, 0x6d, 0x67, 0x65, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x6f, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x61, 0x72,
	0x62, 0x79, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x69, 0x6d, 0x67, 0x65, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x61, 0x72,
	0x62, 0x79, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6d,
	0x67, 0x65, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e,
	0x65, 0x61, 0x72, 0x62, 0x79, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x56,
	0x65, 0x6e, 0x75, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x69, 0x6d, 0x67, 0x65, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x56,
	0x65, 0x6e, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x67, 0x65, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x65, 0x61, 0x72,
	0x62, 0x79, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x1d, 0x5a,
	0x1b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x69, 0x6d, 0x67, 0x65, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_imgeoserver_proto_rawDescOnce sync.Once
	file_imgeoserver_proto_rawDescData = file_imgeoserver_proto_rawDesc
)

func file_imgeoserver_proto_rawDescGZIP() []byte {
	file_imgeoserver_proto_rawDescOnce.Do(func() {
		file_imgeoserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_imgeoserver_proto_rawDescData)
	})
	return file_imgeoserver_proto_rawDescData
}

var file_imgeoserver_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_imgeoserver_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_imgeoserver_proto_goTypes = []interface{}{
	(GeoResCode)(0),                      // 0: imgeoserver.GeoResCode
	(*Location)(nil),                     // 1: imgeoserver.Location
	(*GetNearContactAndChannelResp)(nil), // 2: imgeoserver.GetNearContactAndChannelResp
	(*GetNearContactAndChannelReq)(nil),  // 3: imgeoserver.GetNearContactAndChannelReq
	(*SetChnlGeoReq)(nil),                // 4: imgeoserver.SetChnlGeoReq
	(*SetChnlGeoRsp)(nil),                // 5: imgeoserver.SetChnlGeoRsp
	(*SetUserGeoReq)(nil),                // 6: imgeoserver.SetUserGeoReq
	(*SetUserGeoRsp)(nil),                // 7: imgeoserver.SetUserGeoRsp
	(*QueryNearbyVenuesReq)(nil),         // 8: imgeoserver.QueryNearbyVenuesReq
	(*QueryNearbyVenuesRsp)(nil),         // 9: imgeoserver.QueryNearbyVenuesRsp
	(*VenueInfo)(nil),                    // 10: imgeoserver.VenueInfo
	(*StoreNearbyVenuesReq)(nil),         // 11: imgeoserver.StoreNearbyVenuesReq
	(*StoreNearbyVenuesRsp)(nil),         // 12: imgeoserver.StoreNearbyVenuesRsp
	(*pbcomm.Debug)(nil),                 // 13: pbcomm.Debug
}
var file_imgeoserver_proto_depIdxs = []int32{
	13, // 0: imgeoserver.GetNearContactAndChannelReq.ReqDebug:type_name -> pbcomm.Debug
	0,  // 1: imgeoserver.SetChnlGeoRsp.ErrCode:type_name -> imgeoserver.GeoResCode
	13, // 2: imgeoserver.SetUserGeoReq.ReqDebug:type_name -> pbcomm.Debug
	0,  // 3: imgeoserver.SetUserGeoRsp.ErrCode:type_name -> imgeoserver.GeoResCode
	0,  // 4: imgeoserver.QueryNearbyVenuesRsp.ErrCode:type_name -> imgeoserver.GeoResCode
	10, // 5: imgeoserver.QueryNearbyVenuesRsp.Venues:type_name -> imgeoserver.VenueInfo
	10, // 6: imgeoserver.StoreNearbyVenuesReq.Venues:type_name -> imgeoserver.VenueInfo
	0,  // 7: imgeoserver.StoreNearbyVenuesRsp.ErrCode:type_name -> imgeoserver.GeoResCode
	3,  // 8: imgeoserver.ServerService.GetNearContactAndChannel:input_type -> imgeoserver.GetNearContactAndChannelReq
	4,  // 9: imgeoserver.ServerService.SetChnlGeo:input_type -> imgeoserver.SetChnlGeoReq
	6,  // 10: imgeoserver.ServerService.SetUserGeo:input_type -> imgeoserver.SetUserGeoReq
	8,  // 11: imgeoserver.ServerService.QueryNearbyVenues:input_type -> imgeoserver.QueryNearbyVenuesReq
	11, // 12: imgeoserver.ServerService.StoreNearbyVenues:input_type -> imgeoserver.StoreNearbyVenuesReq
	2,  // 13: imgeoserver.ServerService.GetNearContactAndChannel:output_type -> imgeoserver.GetNearContactAndChannelResp
	5,  // 14: imgeoserver.ServerService.SetChnlGeo:output_type -> imgeoserver.SetChnlGeoRsp
	7,  // 15: imgeoserver.ServerService.SetUserGeo:output_type -> imgeoserver.SetUserGeoRsp
	9,  // 16: imgeoserver.ServerService.QueryNearbyVenues:output_type -> imgeoserver.QueryNearbyVenuesRsp
	12, // 17: imgeoserver.ServerService.StoreNearbyVenues:output_type -> imgeoserver.StoreNearbyVenuesRsp
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_imgeoserver_proto_init() }
func file_imgeoserver_proto_init() {
	if File_imgeoserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_imgeoserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgeoserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNearContactAndChannelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgeoserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNearContactAndChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgeoserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChnlGeoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgeoserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChnlGeoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgeoserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserGeoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgeoserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserGeoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgeoserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNearbyVenuesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgeoserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNearbyVenuesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgeoserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VenueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgeoserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreNearbyVenuesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imgeoserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreNearbyVenuesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_imgeoserver_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_imgeoserver_proto_goTypes,
		DependencyIndexes: file_imgeoserver_proto_depIdxs,
		EnumInfos:         file_imgeoserver_proto_enumTypes,
		MessageInfos:      file_imgeoserver_proto_msgTypes,
	}.Build()
	File_imgeoserver_proto = out.File
	file_imgeoserver_proto_rawDesc = nil
	file_imgeoserver_proto_goTypes = nil
	file_imgeoserver_proto_depIdxs = nil
}
