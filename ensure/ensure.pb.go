// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ensure.proto

/*
Package ensure is a generated protocol buffer package.

It is generated from these files:

	ensure.proto

It has these top-level messages:

	DialogConsumer
*/
package ensure

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Consumer Topic
type ConsumerTopic int32

const (
	ConsumerTopic_TOPIC_HANDLE_DIALOG ConsumerTopic = 0
	ConsumerTopic_TOPIC_DEFAULT       ConsumerTopic = 1
)

var ConsumerTopic_name = map[int32]string{
	0: "TOPIC_HANDLE_DIALOG",
	1: "TOPIC_DEFAULT",
}
var ConsumerTopic_value = map[string]int32{
	"TOPIC_HANDLE_DIALOG": 0,
	"TOPIC_DEFAULT":       1,
}

func (x ConsumerTopic) String() string {
	return proto.EnumName(ConsumerTopic_name, int32(x))
}
func (ConsumerTopic) EnumDescriptor() ([]byte, []int) { return fileDescriptorEnsure, []int{0} }

// Consumer Key
type ConsumerKey int32

const (
	ConsumerKey_KEY_HANDLE_DIALOG ConsumerKey = 0
	ConsumerKey_KEY_DEFAULT       ConsumerKey = 1
)

var ConsumerKey_name = map[int32]string{
	0: "KEY_HANDLE_DIALOG",
	1: "KEY_DEFAULT",
}
var ConsumerKey_value = map[string]int32{
	"KEY_HANDLE_DIALOG": 0,
	"KEY_DEFAULT":       1,
}

func (x ConsumerKey) String() string {
	return proto.EnumName(ConsumerKey_name, int32(x))
}
func (ConsumerKey) EnumDescriptor() ([]byte, []int) { return fileDescriptorEnsure, []int{1} }

type DialogConsumer struct {
	UserID  int32 `protobuf:"varint,1,opt,name=UserID,json=userID,proto3" json:"UserID,omitempty"`
	KeepLen int32 `protobuf:"varint,2,opt,name=KeepLen,json=keepLen,proto3" json:"KeepLen,omitempty"`
}

func (m *DialogConsumer) Reset()                    { *m = DialogConsumer{} }
func (m *DialogConsumer) String() string            { return proto.CompactTextString(m) }
func (*DialogConsumer) ProtoMessage()               {}
func (*DialogConsumer) Descriptor() ([]byte, []int) { return fileDescriptorEnsure, []int{0} }

func (m *DialogConsumer) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *DialogConsumer) GetKeepLen() int32 {
	if m != nil {
		return m.KeepLen
	}
	return 0
}

func init() {
	proto.RegisterType((*DialogConsumer)(nil), "ensure.DialogConsumer")
	proto.RegisterEnum("ensure.ConsumerTopic", ConsumerTopic_name, ConsumerTopic_value)
	proto.RegisterEnum("ensure.ConsumerKey", ConsumerKey_name, ConsumerKey_value)
}
func (m *DialogConsumer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialogConsumer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEnsure(dAtA, i, uint64(m.UserID))
	}
	if m.KeepLen != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEnsure(dAtA, i, uint64(m.KeepLen))
	}
	return i, nil
}

func encodeVarintEnsure(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DialogConsumer) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovEnsure(uint64(m.UserID))
	}
	if m.KeepLen != 0 {
		n += 1 + sovEnsure(uint64(m.KeepLen))
	}
	return n
}

func sovEnsure(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEnsure(x uint64) (n int) {
	return sovEnsure(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DialogConsumer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnsure
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialogConsumer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialogConsumer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnsure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepLen", wireType)
			}
			m.KeepLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnsure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeepLen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEnsure(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEnsure
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEnsure(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEnsure
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnsure
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnsure
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEnsure
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEnsure
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEnsure(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEnsure = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEnsure   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ensure.proto", fileDescriptorEnsure) }

var fileDescriptorEnsure = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xcd, 0x2b, 0x2e,
	0x2d, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x9c, 0xb8, 0xf8,
	0x5c, 0x32, 0x13, 0x73, 0xf2, 0xd3, 0x9d, 0xf3, 0xf3, 0x8a, 0x4b, 0x73, 0x53, 0x8b, 0x84, 0xc4,
	0xb8, 0xd8, 0x42, 0x8b, 0x53, 0x8b, 0x3c, 0x5d, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0xd8,
	0x4a, 0xc1, 0x3c, 0x21, 0x09, 0x2e, 0x76, 0xef, 0xd4, 0xd4, 0x02, 0x9f, 0xd4, 0x3c, 0x09, 0x26,
	0xb0, 0x04, 0x7b, 0x36, 0x84, 0xab, 0x65, 0xcd, 0xc5, 0x0b, 0xd3, 0x1d, 0x92, 0x5f, 0x90, 0x99,
	0x2c, 0x24, 0xce, 0x25, 0x1c, 0xe2, 0x1f, 0xe0, 0xe9, 0x1c, 0xef, 0xe1, 0xe8, 0xe7, 0xe2, 0xe3,
	0x1a, 0xef, 0xe2, 0xe9, 0xe8, 0xe3, 0xef, 0x2e, 0xc0, 0x20, 0x24, 0xc8, 0xc5, 0x0b, 0x91, 0x70,
	0x71, 0x75, 0x73, 0x0c, 0xf5, 0x09, 0x11, 0x60, 0xd4, 0x32, 0xe5, 0xe2, 0x86, 0x69, 0xf6, 0x4e,
	0xad, 0x14, 0x12, 0xe5, 0x12, 0xf4, 0x76, 0x8d, 0xc4, 0xd0, 0xc8, 0xcf, 0xc5, 0x0d, 0x12, 0x86,
	0x6b, 0x73, 0xe2, 0x39, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18,
	0x93, 0xd8, 0xc0, 0x9e, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xe6, 0x49, 0xae, 0xe4,
	0x00, 0x00, 0x00,
}
