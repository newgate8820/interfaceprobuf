// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imserver.proto

package imserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MTProtoServerClient is the client API for MTProtoServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MTProtoServerClient interface {
	HandleMTP(ctx context.Context, opts ...grpc.CallOption) (MTProtoServer_HandleMTPClient, error)
}

type mTProtoServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMTProtoServerClient(cc grpc.ClientConnInterface) MTProtoServerClient {
	return &mTProtoServerClient{cc}
}

func (c *mTProtoServerClient) HandleMTP(ctx context.Context, opts ...grpc.CallOption) (MTProtoServer_HandleMTPClient, error) {
	stream, err := c.cc.NewStream(ctx, &MTProtoServer_ServiceDesc.Streams[0], "/imserver.MTProtoServer/HandleMTP", opts...)
	if err != nil {
		return nil, err
	}
	x := &mTProtoServerHandleMTPClient{stream}
	return x, nil
}

type MTProtoServer_HandleMTPClient interface {
	Send(*HandleMTPRequest) error
	Recv() (*HandleMTPReply, error)
	grpc.ClientStream
}

type mTProtoServerHandleMTPClient struct {
	grpc.ClientStream
}

func (x *mTProtoServerHandleMTPClient) Send(m *HandleMTPRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mTProtoServerHandleMTPClient) Recv() (*HandleMTPReply, error) {
	m := new(HandleMTPReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MTProtoServerServer is the server API for MTProtoServer service.
// All implementations must embed UnimplementedMTProtoServerServer
// for forward compatibility
type MTProtoServerServer interface {
	HandleMTP(MTProtoServer_HandleMTPServer) error
	mustEmbedUnimplementedMTProtoServerServer()
}

// UnimplementedMTProtoServerServer must be embedded to have forward compatible implementations.
type UnimplementedMTProtoServerServer struct {
}

func (UnimplementedMTProtoServerServer) HandleMTP(MTProtoServer_HandleMTPServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleMTP not implemented")
}
func (UnimplementedMTProtoServerServer) mustEmbedUnimplementedMTProtoServerServer() {}

// UnsafeMTProtoServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MTProtoServerServer will
// result in compilation errors.
type UnsafeMTProtoServerServer interface {
	mustEmbedUnimplementedMTProtoServerServer()
}

func RegisterMTProtoServerServer(s grpc.ServiceRegistrar, srv MTProtoServerServer) {
	s.RegisterService(&MTProtoServer_ServiceDesc, srv)
}

func _MTProtoServer_HandleMTP_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MTProtoServerServer).HandleMTP(&mTProtoServerHandleMTPServer{stream})
}

type MTProtoServer_HandleMTPServer interface {
	Send(*HandleMTPReply) error
	Recv() (*HandleMTPRequest, error)
	grpc.ServerStream
}

type mTProtoServerHandleMTPServer struct {
	grpc.ServerStream
}

func (x *mTProtoServerHandleMTPServer) Send(m *HandleMTPReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mTProtoServerHandleMTPServer) Recv() (*HandleMTPRequest, error) {
	m := new(HandleMTPRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MTProtoServer_ServiceDesc is the grpc.ServiceDesc for MTProtoServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MTProtoServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imserver.MTProtoServer",
	HandlerType: (*MTProtoServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HandleMTP",
			Handler:       _MTProtoServer_HandleMTP_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "imserver.proto",
}
