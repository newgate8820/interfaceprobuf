// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: imserver.proto

package imserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HandleMTPRequest_Flag int32

const (
	HandleMTPRequest_IsProxy       HandleMTPRequest_Flag = 0
	HandleMTPRequest_FirstLogin    HandleMTPRequest_Flag = 1
	HandleMTPRequest_IsMainSession HandleMTPRequest_Flag = 2
	HandleMTPRequest_IsHttp        HandleMTPRequest_Flag = 3
	HandleMTPRequest_IsMediaConn   HandleMTPRequest_Flag = 4
	HandleMTPRequest_UserIdChecked HandleMTPRequest_Flag = 5
	HandleMTPRequest_WithAuthKey   HandleMTPRequest_Flag = 6
)

// Enum value maps for HandleMTPRequest_Flag.
var (
	HandleMTPRequest_Flag_name = map[int32]string{
		0: "IsProxy",
		1: "FirstLogin",
		2: "IsMainSession",
		3: "IsHttp",
		4: "IsMediaConn",
		5: "UserIdChecked",
		6: "WithAuthKey",
	}
	HandleMTPRequest_Flag_value = map[string]int32{
		"IsProxy":       0,
		"FirstLogin":    1,
		"IsMainSession": 2,
		"IsHttp":        3,
		"IsMediaConn":   4,
		"UserIdChecked": 5,
		"WithAuthKey":   6,
	}
)

func (x HandleMTPRequest_Flag) Enum() *HandleMTPRequest_Flag {
	p := new(HandleMTPRequest_Flag)
	*p = x
	return p
}

func (x HandleMTPRequest_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandleMTPRequest_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_imserver_proto_enumTypes[0].Descriptor()
}

func (HandleMTPRequest_Flag) Type() protoreflect.EnumType {
	return &file_imserver_proto_enumTypes[0]
}

func (x HandleMTPRequest_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HandleMTPRequest_Flag.Descriptor instead.
func (HandleMTPRequest_Flag) EnumDescriptor() ([]byte, []int) {
	return file_imserver_proto_rawDescGZIP(), []int{0, 0}
}

type HandleMTPReply_Flag int32

const (
	HandleMTPReply_SetUserId        HandleMTPReply_Flag = 0
	HandleMTPReply_SetPhoneNumber   HandleMTPReply_Flag = 1
	HandleMTPReply_SetAuthKey       HandleMTPReply_Flag = 2
	HandleMTPReply_SetApiId         HandleMTPReply_Flag = 3
	HandleMTPReply_SetAppVersion    HandleMTPReply_Flag = 4
	HandleMTPReply_SetDeviceModel   HandleMTPReply_Flag = 5
	HandleMTPReply_SetLangCode      HandleMTPReply_Flag = 6
	HandleMTPReply_SetSystemVersion HandleMTPReply_Flag = 7
	HandleMTPReply_SetLayer         HandleMTPReply_Flag = 8
	HandleMTPReply_SetOSType        HandleMTPReply_Flag = 9
	HandleMTPReply_SetUserIdChecked HandleMTPReply_Flag = 10
	HandleMTPReply_SetQuickIsACK    HandleMTPReply_Flag = 11
	HandleMTPReply_SetGroupID       HandleMTPReply_Flag = 12
)

// Enum value maps for HandleMTPReply_Flag.
var (
	HandleMTPReply_Flag_name = map[int32]string{
		0:  "SetUserId",
		1:  "SetPhoneNumber",
		2:  "SetAuthKey",
		3:  "SetApiId",
		4:  "SetAppVersion",
		5:  "SetDeviceModel",
		6:  "SetLangCode",
		7:  "SetSystemVersion",
		8:  "SetLayer",
		9:  "SetOSType",
		10: "SetUserIdChecked",
		11: "SetQuickIsACK",
		12: "SetGroupID",
	}
	HandleMTPReply_Flag_value = map[string]int32{
		"SetUserId":        0,
		"SetPhoneNumber":   1,
		"SetAuthKey":       2,
		"SetApiId":         3,
		"SetAppVersion":    4,
		"SetDeviceModel":   5,
		"SetLangCode":      6,
		"SetSystemVersion": 7,
		"SetLayer":         8,
		"SetOSType":        9,
		"SetUserIdChecked": 10,
		"SetQuickIsACK":    11,
		"SetGroupID":       12,
	}
)

func (x HandleMTPReply_Flag) Enum() *HandleMTPReply_Flag {
	p := new(HandleMTPReply_Flag)
	*p = x
	return p
}

func (x HandleMTPReply_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandleMTPReply_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_imserver_proto_enumTypes[1].Descriptor()
}

func (HandleMTPReply_Flag) Type() protoreflect.EnumType {
	return &file_imserver_proto_enumTypes[1]
}

func (x HandleMTPReply_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HandleMTPReply_Flag.Descriptor instead.
func (HandleMTPReply_Flag) EnumDescriptor() ([]byte, []int) {
	return file_imserver_proto_rawDescGZIP(), []int{1, 0}
}

type Update_OpType int32

const (
	Update_UserAll                  Update_OpType = 0 // 用户所有端
	Update_UserOneClient            Update_OpType = 1 // 用户指定的端
	Update_UserExcludeOneClient     Update_OpType = 2 // 排除用户指定端
	Update_InternalUserAll          Update_OpType = 3
	Update_InternalOneClient        Update_OpType = 4
	Update_InternalExcludeOneClient Update_OpType = 5
)

// Enum value maps for Update_OpType.
var (
	Update_OpType_name = map[int32]string{
		0: "UserAll",
		1: "UserOneClient",
		2: "UserExcludeOneClient",
		3: "InternalUserAll",
		4: "InternalOneClient",
		5: "InternalExcludeOneClient",
	}
	Update_OpType_value = map[string]int32{
		"UserAll":                  0,
		"UserOneClient":            1,
		"UserExcludeOneClient":     2,
		"InternalUserAll":          3,
		"InternalOneClient":        4,
		"InternalExcludeOneClient": 5,
	}
)

func (x Update_OpType) Enum() *Update_OpType {
	p := new(Update_OpType)
	*p = x
	return p
}

func (x Update_OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Update_OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_imserver_proto_enumTypes[2].Descriptor()
}

func (Update_OpType) Type() protoreflect.EnumType {
	return &file_imserver_proto_enumTypes[2]
}

func (x Update_OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Update_OpType.Descriptor instead.
func (Update_OpType) EnumDescriptor() ([]byte, []int) {
	return file_imserver_proto_rawDescGZIP(), []int{3, 0}
}

type HandleMTPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientAddr    string                `protobuf:"bytes,1,opt,name=client_addr,json=clientAddr,proto3" json:"client_addr,omitempty"`           // 客户端ip地址
	ApiId         int32                 `protobuf:"varint,2,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`                         // 客户端类型id
	DeviceModel   string                `protobuf:"bytes,3,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`        // 客户端机器型号
	SystemVersion string                `protobuf:"bytes,4,opt,name=system_version,json=systemVersion,proto3" json:"system_version,omitempty"`  // 客户端系统
	AppVersion    string                `protobuf:"bytes,5,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`           // 客户端版本号
	MtLayer       int32                 `protobuf:"varint,6,opt,name=mt_layer,json=mtLayer,proto3" json:"mt_layer,omitempty"`                   // 客户端协议版本
	AppName       string                `protobuf:"bytes,7,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`                    //
	ProxyAddr     string                `protobuf:"bytes,8,opt,name=proxy_addr,json=proxyAddr,proto3" json:"proxy_addr,omitempty"`              // 代理ip地址
	LangCode      string                `protobuf:"bytes,9,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`                 // 客户端语言
	UserId        int32                 `protobuf:"varint,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                     // 请求者id
	PhoneNumber   string                `protobuf:"bytes,11,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`       // 请求者当前号码
	AuthKeyId     uint64                `protobuf:"varint,12,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`          // 客户端标识
	ServerSalt    uint64                `protobuf:"varint,13,opt,name=server_salt,json=serverSalt,proto3" json:"server_salt,omitempty"`         // 服务器盐
	SessionId     uint64                `protobuf:"varint,14,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`            // 请求session标识
	MessageId     uint64                `protobuf:"varint,15,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`            // 消息id
	MessageSeqNo  uint32                `protobuf:"varint,16,opt,name=message_seq_no,json=messageSeqNo,proto3" json:"message_seq_no,omitempty"` // 客户端seq计数
	IsAck         bool                  `protobuf:"varint,17,opt,name=is_ack,json=isAck,proto3" json:"is_ack,omitempty"`
	MessageObj    []byte                `protobuf:"bytes,18,opt,name=message_obj,json=messageObj,proto3" json:"message_obj,omitempty"` // 消息体
	FlagIn        HandleMTPRequest_Flag `protobuf:"varint,19,opt,name=flag_in,json=flagIn,proto3,enum=imserver.HandleMTPRequest_Flag" json:"flag_in,omitempty"`
	Crc           uint32                `protobuf:"varint,20,opt,name=crc,proto3" json:"crc,omitempty"`                       // crc32
	AuthKey       []byte                `protobuf:"bytes,21,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"` //
}

func (x *HandleMTPRequest) Reset() {
	*x = HandleMTPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleMTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleMTPRequest) ProtoMessage() {}

func (x *HandleMTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleMTPRequest.ProtoReflect.Descriptor instead.
func (*HandleMTPRequest) Descriptor() ([]byte, []int) {
	return file_imserver_proto_rawDescGZIP(), []int{0}
}

func (x *HandleMTPRequest) GetClientAddr() string {
	if x != nil {
		return x.ClientAddr
	}
	return ""
}

func (x *HandleMTPRequest) GetApiId() int32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *HandleMTPRequest) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *HandleMTPRequest) GetSystemVersion() string {
	if x != nil {
		return x.SystemVersion
	}
	return ""
}

func (x *HandleMTPRequest) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *HandleMTPRequest) GetMtLayer() int32 {
	if x != nil {
		return x.MtLayer
	}
	return 0
}

func (x *HandleMTPRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *HandleMTPRequest) GetProxyAddr() string {
	if x != nil {
		return x.ProxyAddr
	}
	return ""
}

func (x *HandleMTPRequest) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *HandleMTPRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *HandleMTPRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *HandleMTPRequest) GetAuthKeyId() uint64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *HandleMTPRequest) GetServerSalt() uint64 {
	if x != nil {
		return x.ServerSalt
	}
	return 0
}

func (x *HandleMTPRequest) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *HandleMTPRequest) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleMTPRequest) GetMessageSeqNo() uint32 {
	if x != nil {
		return x.MessageSeqNo
	}
	return 0
}

func (x *HandleMTPRequest) GetIsAck() bool {
	if x != nil {
		return x.IsAck
	}
	return false
}

func (x *HandleMTPRequest) GetMessageObj() []byte {
	if x != nil {
		return x.MessageObj
	}
	return nil
}

func (x *HandleMTPRequest) GetFlagIn() HandleMTPRequest_Flag {
	if x != nil {
		return x.FlagIn
	}
	return HandleMTPRequest_IsProxy
}

func (x *HandleMTPRequest) GetCrc() uint32 {
	if x != nil {
		return x.Crc
	}
	return 0
}

func (x *HandleMTPRequest) GetAuthKey() []byte {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

type HandleMTPReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcResult     []byte              `protobuf:"bytes,1,opt,name=rpc_result,json=rpcResult,proto3" json:"rpc_result,omitempty"` // mt rpc result
	FlagOut       HandleMTPReply_Flag `protobuf:"varint,2,opt,name=flag_out,json=flagOut,proto3,enum=imserver.HandleMTPReply_Flag" json:"flag_out,omitempty"`
	UserId        int32               `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PhoneNumber   string              `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	AuthKey       []byte              `protobuf:"bytes,5,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	ApiId         int32               `protobuf:"varint,6,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	AppVersion    string              `protobuf:"bytes,7,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	DeviceModel   string              `protobuf:"bytes,8,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	LangCode      string              `protobuf:"bytes,9,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	SystemVersion string              `protobuf:"bytes,10,opt,name=system_version,json=systemVersion,proto3" json:"system_version,omitempty"`
	MtLayer       int32               `protobuf:"varint,11,opt,name=mt_layer,json=mtLayer,proto3" json:"mt_layer,omitempty"`
	OsType        int32               `protobuf:"varint,12,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`
	GroupId       int32               `protobuf:"varint,13,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *HandleMTPReply) Reset() {
	*x = HandleMTPReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleMTPReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleMTPReply) ProtoMessage() {}

func (x *HandleMTPReply) ProtoReflect() protoreflect.Message {
	mi := &file_imserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleMTPReply.ProtoReflect.Descriptor instead.
func (*HandleMTPReply) Descriptor() ([]byte, []int) {
	return file_imserver_proto_rawDescGZIP(), []int{1}
}

func (x *HandleMTPReply) GetRpcResult() []byte {
	if x != nil {
		return x.RpcResult
	}
	return nil
}

func (x *HandleMTPReply) GetFlagOut() HandleMTPReply_Flag {
	if x != nil {
		return x.FlagOut
	}
	return HandleMTPReply_SetUserId
}

func (x *HandleMTPReply) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *HandleMTPReply) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *HandleMTPReply) GetAuthKey() []byte {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *HandleMTPReply) GetApiId() int32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *HandleMTPReply) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *HandleMTPReply) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *HandleMTPReply) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *HandleMTPReply) GetSystemVersion() string {
	if x != nil {
		return x.SystemVersion
	}
	return ""
}

func (x *HandleMTPReply) GetMtLayer() int32 {
	if x != nil {
		return x.MtLayer
	}
	return 0
}

func (x *HandleMTPReply) GetOsType() int32 {
	if x != nil {
		return x.OsType
	}
	return 0
}

func (x *HandleMTPReply) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type RegisterGatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayId int32 `protobuf:"varint,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"` // 网关id
}

func (x *RegisterGatewayRequest) Reset() {
	*x = RegisterGatewayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterGatewayRequest) ProtoMessage() {}

func (x *RegisterGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterGatewayRequest.ProtoReflect.Descriptor instead.
func (*RegisterGatewayRequest) Descriptor() ([]byte, []int) {
	return file_imserver_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterGatewayRequest) GetGatewayId() int32 {
	if x != nil {
		return x.GatewayId
	}
	return 0
}

type Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendOp      Update_OpType `protobuf:"varint,1,opt,name=send_op,json=sendOp,proto3,enum=imserver.Update_OpType" json:"send_op,omitempty"` // 发送类型
	UserIdSlice []int32       `protobuf:"varint,2,rep,packed,name=user_id_slice,json=userIdSlice,proto3" json:"user_id_slice,omitempty"`     // 用户id列表
	AuthKeyId   uint64        `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`                  // 指定的客户端
}

func (x *Update) Reset() {
	*x = Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update) ProtoMessage() {}

func (x *Update) ProtoReflect() protoreflect.Message {
	mi := &file_imserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update.ProtoReflect.Descriptor instead.
func (*Update) Descriptor() ([]byte, []int) {
	return file_imserver_proto_rawDescGZIP(), []int{3}
}

func (x *Update) GetSendOp() Update_OpType {
	if x != nil {
		return x.SendOp
	}
	return Update_UserAll
}

func (x *Update) GetUserIdSlice() []int32 {
	if x != nil {
		return x.UserIdSlice
	}
	return nil
}

func (x *Update) GetAuthKeyId() uint64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

var File_imserver_proto protoreflect.FileDescriptor

var file_imserver_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x69, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x69, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xa0, 0x06, 0x0a, 0x10, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x61, 0x6c,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e,
	0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x6b, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x12, 0x38, 0x0a,
	0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x69, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52,
	0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x72, 0x63, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x72, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x75, 0x74,
	0x68, 0x4b, 0x65, 0x79, 0x22, 0x77, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x73, 0x4d,
	0x61, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x73, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b,
	0x57, 0x69, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x10, 0x06, 0x22, 0x9c, 0x05,
	0x0a, 0x0e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x38, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x4f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6d, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xeb,
	0x01, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x65,
	0x74, 0x41, 0x70, 0x69, 0x49, 0x64, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x10, 0x05, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x06,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x4f, 0x53, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65, 0x74,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x49, 0x73, 0x41, 0x43, 0x4b, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x10, 0x0c, 0x22, 0x37, 0x0a, 0x16,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x49, 0x64, 0x22, 0x8d, 0x02, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x30, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x4f, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x4f, 0x6e, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x10, 0x05, 0x32, 0x58, 0x0a, 0x0d, 0x4d, 0x54, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x4d, 0x54, 0x50, 0x12, 0x1a, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x69, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x4d, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x1a, 0x5a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x69, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_imserver_proto_rawDescOnce sync.Once
	file_imserver_proto_rawDescData = file_imserver_proto_rawDesc
)

func file_imserver_proto_rawDescGZIP() []byte {
	file_imserver_proto_rawDescOnce.Do(func() {
		file_imserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_imserver_proto_rawDescData)
	})
	return file_imserver_proto_rawDescData
}

var file_imserver_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_imserver_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_imserver_proto_goTypes = []interface{}{
	(HandleMTPRequest_Flag)(0),     // 0: imserver.HandleMTPRequest.Flag
	(HandleMTPReply_Flag)(0),       // 1: imserver.HandleMTPReply.Flag
	(Update_OpType)(0),             // 2: imserver.Update.OpType
	(*HandleMTPRequest)(nil),       // 3: imserver.HandleMTPRequest
	(*HandleMTPReply)(nil),         // 4: imserver.HandleMTPReply
	(*RegisterGatewayRequest)(nil), // 5: imserver.RegisterGatewayRequest
	(*Update)(nil),                 // 6: imserver.Update
}
var file_imserver_proto_depIdxs = []int32{
	0, // 0: imserver.HandleMTPRequest.flag_in:type_name -> imserver.HandleMTPRequest.Flag
	1, // 1: imserver.HandleMTPReply.flag_out:type_name -> imserver.HandleMTPReply.Flag
	2, // 2: imserver.Update.send_op:type_name -> imserver.Update.OpType
	3, // 3: imserver.MTProtoServer.HandleMTP:input_type -> imserver.HandleMTPRequest
	4, // 4: imserver.MTProtoServer.HandleMTP:output_type -> imserver.HandleMTPReply
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_imserver_proto_init() }
func file_imserver_proto_init() {
	if File_imserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_imserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleMTPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleMTPReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterGatewayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_imserver_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_imserver_proto_goTypes,
		DependencyIndexes: file_imserver_proto_depIdxs,
		EnumInfos:         file_imserver_proto_enumTypes,
		MessageInfos:      file_imserver_proto_msgTypes,
	}.Build()
	File_imserver_proto = out.File
	file_imserver_proto_rawDesc = nil
	file_imserver_proto_goTypes = nil
	file_imserver_proto_depIdxs = nil
}
