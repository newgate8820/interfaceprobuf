// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: sequencer.proto

package sequencer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SequenceServiceClient is the client API for SequenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SequenceServiceClient interface {
	// IncreaseMsgID 自增
	IncreaseMsgID(ctx context.Context, in *IncreaseMsgIDReq, opts ...grpc.CallOption) (*IncreaseMsgIDReply, error)
	// GetCurMsgID 获取当前自增序列值
	GetCurMsgID(ctx context.Context, in *GetCurMsgIDReq, opts ...grpc.CallOption) (*GetCurMsgIDReply, error)
	// 获取用户路由表，返回用户对应的机器im、hostname etc
	GetRouterMessage(ctx context.Context, in *GetRouterMessageReq, opts ...grpc.CallOption) (*GetRouterMessageReply, error)
}

type sequenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSequenceServiceClient(cc grpc.ClientConnInterface) SequenceServiceClient {
	return &sequenceServiceClient{cc}
}

func (c *sequenceServiceClient) IncreaseMsgID(ctx context.Context, in *IncreaseMsgIDReq, opts ...grpc.CallOption) (*IncreaseMsgIDReply, error) {
	out := new(IncreaseMsgIDReply)
	err := c.cc.Invoke(ctx, "/sequencer.SequenceService/IncreaseMsgID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceServiceClient) GetCurMsgID(ctx context.Context, in *GetCurMsgIDReq, opts ...grpc.CallOption) (*GetCurMsgIDReply, error) {
	out := new(GetCurMsgIDReply)
	err := c.cc.Invoke(ctx, "/sequencer.SequenceService/GetCurMsgID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceServiceClient) GetRouterMessage(ctx context.Context, in *GetRouterMessageReq, opts ...grpc.CallOption) (*GetRouterMessageReply, error) {
	out := new(GetRouterMessageReply)
	err := c.cc.Invoke(ctx, "/sequencer.SequenceService/GetRouterMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequenceServiceServer is the server API for SequenceService service.
// All implementations must embed UnimplementedSequenceServiceServer
// for forward compatibility
type SequenceServiceServer interface {
	// IncreaseMsgID 自增
	IncreaseMsgID(context.Context, *IncreaseMsgIDReq) (*IncreaseMsgIDReply, error)
	// GetCurMsgID 获取当前自增序列值
	GetCurMsgID(context.Context, *GetCurMsgIDReq) (*GetCurMsgIDReply, error)
	// 获取用户路由表，返回用户对应的机器im、hostname etc
	GetRouterMessage(context.Context, *GetRouterMessageReq) (*GetRouterMessageReply, error)
	mustEmbedUnimplementedSequenceServiceServer()
}

// UnimplementedSequenceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSequenceServiceServer struct {
}

func (UnimplementedSequenceServiceServer) IncreaseMsgID(context.Context, *IncreaseMsgIDReq) (*IncreaseMsgIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseMsgID not implemented")
}
func (UnimplementedSequenceServiceServer) GetCurMsgID(context.Context, *GetCurMsgIDReq) (*GetCurMsgIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurMsgID not implemented")
}
func (UnimplementedSequenceServiceServer) GetRouterMessage(context.Context, *GetRouterMessageReq) (*GetRouterMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouterMessage not implemented")
}
func (UnimplementedSequenceServiceServer) mustEmbedUnimplementedSequenceServiceServer() {}

// UnsafeSequenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SequenceServiceServer will
// result in compilation errors.
type UnsafeSequenceServiceServer interface {
	mustEmbedUnimplementedSequenceServiceServer()
}

func RegisterSequenceServiceServer(s grpc.ServiceRegistrar, srv SequenceServiceServer) {
	s.RegisterService(&SequenceService_ServiceDesc, srv)
}

func _SequenceService_IncreaseMsgID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseMsgIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceServiceServer).IncreaseMsgID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sequencer.SequenceService/IncreaseMsgID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceServiceServer).IncreaseMsgID(ctx, req.(*IncreaseMsgIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceService_GetCurMsgID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurMsgIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceServiceServer).GetCurMsgID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sequencer.SequenceService/GetCurMsgID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceServiceServer).GetCurMsgID(ctx, req.(*GetCurMsgIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceService_GetRouterMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouterMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceServiceServer).GetRouterMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sequencer.SequenceService/GetRouterMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceServiceServer).GetRouterMessage(ctx, req.(*GetRouterMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SequenceService_ServiceDesc is the grpc.ServiceDesc for SequenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SequenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sequencer.SequenceService",
	HandlerType: (*SequenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncreaseMsgID",
			Handler:    _SequenceService_IncreaseMsgID_Handler,
		},
		{
			MethodName: "GetCurMsgID",
			Handler:    _SequenceService_GetCurMsgID_Handler,
		},
		{
			MethodName: "GetRouterMessage",
			Handler:    _SequenceService_GetRouterMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sequencer.proto",
}
