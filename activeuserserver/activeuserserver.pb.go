// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/activeuserserver/activeuserserver.proto

/*
Package activeuserserver is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/activeuserserver/activeuserserver.proto

It has these top-level messages:

	UserNameBase
	InviteLinkBase
	ChatChannel
	ChannelParticipants
	ChannelKickedLeft
	ActivateUserReq
	ActivateUserReply
	LogoutUserUserReq
	LogoutUserUserReply
	GetActiveUsersReq
	GetActiveUsersReply
	GetAllChannelUsersReq
	GetAllChannelUsersReply
	SetChannelParticipantReq
	SetChannelParticipantReply
	GetChannelParticipantReq
	GetChannelParticipantReply
	DelChannelParticipantReq
	DelChannelParticipantReply
	DelAllChannelParticipantReq
	DelAllChannelParticipantReply
	UpdateFirstnameLastnameReq
	UpdateFirstnameLastnameReply
	UpdateUsernameReq
	UpdateUsernameReply
	GetUsernameReq
	GetUsernameReply
	SearchUsernameReq
	SearchUsernameReply
	UpdateInviteLinkReq
	UpdateInviteLinkReply
	GetInviteLinkReq
	GetInviteLinkReply
	SearchSelfGroupReq
	SearchSelfGroupReply
	GetTwoUserChatsCountReq
	GetTwoUserChatsCountReply
	GetTwoUserChatsReq
	GetTwoUserChatsReply
	SearchChannelParticipantReq
	SearchChannelParticipantReply
	SearchKickedParticipantReq
	SearchKickedParticipantReply
	GetChannelKickedByLimitReq
	GetChannelKickedByLimitReply
	GetChannelKeckedLeftReq
	GetChannelKeckedLeftReply
	CheckOnlineUsersReq
	CheckOnlineUsersReply
	SearchUsersByStrReq
	SearchUsersByStrReply
	AddLeftParticipantReq
	AddLeftParticipantReply
	DelLeftParticipantReq
	DelLeftParticipantReply
	DelAllLeftChatParticipantReq
	DelAllLeftChatParticipantReply
	ResetChannelParticipantReq
	ResetChannelParticipantReply
	UserNameInfo
	LoadGroupUserNameInfoReq
	LoadGroupUserNameInfoRsp
	GetChsOnlineUserCountReq
	ChanOnlineUser
	GetChsOnlineUserCountRsp
*/
package activeuserserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 返回错误码
type ActiveErrorCode int32

const (
	ActiveErrorCode_Active_OK       ActiveErrorCode = 0
	ActiveErrorCode_Active_SYSERR   ActiveErrorCode = 1001
	ActiveErrorCode_Active_NOT_FIND ActiveErrorCode = 1002
)

var ActiveErrorCode_name = map[int32]string{
	0:    "Active_OK",
	1001: "Active_SYSERR",
	1002: "Active_NOT_FIND",
}
var ActiveErrorCode_value = map[string]int32{
	"Active_OK":       0,
	"Active_SYSERR":   1001,
	"Active_NOT_FIND": 1002,
}

func (x ActiveErrorCode) String() string {
	return proto.EnumName(ActiveErrorCode_name, int32(x))
}
func (ActiveErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{0}
}

// username和邀请链接对应的对象类型
type PeerType int32

const (
	PeerType_PeerUser      PeerType = 0
	PeerType_PeerChat      PeerType = 1
	PeerType_PeerChannel   PeerType = 2
	PeerType_PeerSuperChat PeerType = 3
)

var PeerType_name = map[int32]string{
	0: "PeerUser",
	1: "PeerChat",
	2: "PeerChannel",
	3: "PeerSuperChat",
}
var PeerType_value = map[string]int32{
	"PeerUser":      0,
	"PeerChat":      1,
	"PeerChannel":   2,
	"PeerSuperChat": 3,
}

func (x PeerType) String() string {
	return proto.EnumName(PeerType_name, int32(x))
}
func (PeerType) EnumDescriptor() ([]byte, []int) { return fileDescriptorActiveuserserver, []int{1} }

// 群成员搜索类型
type ChannelSearchType int32

const (
	ChannelSearchType_SearchAll    ChannelSearchType = 0
	ChannelSearchType_SearchAdmin  ChannelSearchType = 1
	ChannelSearchType_SearchBanned ChannelSearchType = 2
	ChannelSearchType_SearchBot    ChannelSearchType = 3
	ChannelSearchType_SearchKicked ChannelSearchType = 4
)

var ChannelSearchType_name = map[int32]string{
	0: "SearchAll",
	1: "SearchAdmin",
	2: "SearchBanned",
	3: "SearchBot",
	4: "SearchKicked",
}
var ChannelSearchType_value = map[string]int32{
	"SearchAll":    0,
	"SearchAdmin":  1,
	"SearchBanned": 2,
	"SearchBot":    3,
	"SearchKicked": 4,
}

func (x ChannelSearchType) String() string {
	return proto.EnumName(ChannelSearchType_name, int32(x))
}
func (ChannelSearchType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{2}
}

// username存储结构
type UserNameBase struct {
	Username string   `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
	Id       int32    `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Type     PeerType `protobuf:"varint,3,opt,name=Type,proto3,enum=activeuserserver.PeerType" json:"Type,omitempty"`
}

func (m *UserNameBase) Reset()                    { *m = UserNameBase{} }
func (m *UserNameBase) String() string            { return proto.CompactTextString(m) }
func (*UserNameBase) ProtoMessage()               {}
func (*UserNameBase) Descriptor() ([]byte, []int) { return fileDescriptorActiveuserserver, []int{0} }

func (m *UserNameBase) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserNameBase) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserNameBase) GetType() PeerType {
	if m != nil {
		return m.Type
	}
	return PeerType_PeerUser
}

// 邀请链接存储结构
type InviteLinkBase struct {
	InviteLink string   `protobuf:"bytes,1,opt,name=InviteLink,proto3" json:"InviteLink,omitempty"`
	GroupId    int32    `protobuf:"varint,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	UserId     int32    `protobuf:"varint,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Type       PeerType `protobuf:"varint,4,opt,name=Type,proto3,enum=activeuserserver.PeerType" json:"Type,omitempty"`
}

func (m *InviteLinkBase) Reset()                    { *m = InviteLinkBase{} }
func (m *InviteLinkBase) String() string            { return proto.CompactTextString(m) }
func (*InviteLinkBase) ProtoMessage()               {}
func (*InviteLinkBase) Descriptor() ([]byte, []int) { return fileDescriptorActiveuserserver, []int{1} }

func (m *InviteLinkBase) GetInviteLink() string {
	if m != nil {
		return m.InviteLink
	}
	return ""
}

func (m *InviteLinkBase) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *InviteLinkBase) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *InviteLinkBase) GetType() PeerType {
	if m != nil {
		return m.Type
	}
	return PeerType_PeerUser
}

// 超级群信息
type ChatChannel struct {
	ChannelId            int32  `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	AccessHash           int64  `protobuf:"varint,2,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"`
	Encry                bool   `protobuf:"varint,3,opt,name=Encry,proto3" json:"Encry,omitempty"`
	BroadcastOrMegagroup bool   `protobuf:"varint,4,opt,name=Broadcast_or_megagroup,json=BroadcastOrMegagroup,proto3" json:"Broadcast_or_megagroup,omitempty"`
	Verified             bool   `protobuf:"varint,5,opt,name=Verified,proto3" json:"Verified,omitempty"`
	Restricted           bool   `protobuf:"varint,6,opt,name=Restricted,proto3" json:"Restricted,omitempty"`
	Democracy            bool   `protobuf:"varint,7,opt,name=Democracy,proto3" json:"Democracy,omitempty"`
	Signatures           bool   `protobuf:"varint,8,opt,name=Signatures,proto3" json:"Signatures,omitempty"`
	Min                  bool   `protobuf:"varint,9,opt,name=Min,proto3" json:"Min,omitempty"`
	Title                string `protobuf:"bytes,10,opt,name=Title,proto3" json:"Title,omitempty"`
	UserName             string `protobuf:"bytes,11,opt,name=User_name,json=UserName,proto3" json:"User_name,omitempty"`
	About                string `protobuf:"bytes,12,opt,name=About,proto3" json:"About,omitempty"`
	Photo                string `protobuf:"bytes,13,opt,name=Photo,proto3" json:"Photo,omitempty"`
	Date                 int32  `protobuf:"varint,14,opt,name=Date,proto3" json:"Date,omitempty"`
	Version              int32  `protobuf:"varint,15,opt,name=Version,proto3" json:"Version,omitempty"`
	RestrictionReason    string `protobuf:"bytes,16,opt,name=Restriction_reason,json=RestrictionReason,proto3" json:"Restriction_reason,omitempty"`
	ParticipantsCount    int32  `protobuf:"varint,17,opt,name=Participants_count,json=ParticipantsCount,proto3" json:"Participants_count,omitempty"`
	AdminsCount          int32  `protobuf:"varint,18,opt,name=Admins_count,json=AdminsCount,proto3" json:"Admins_count,omitempty"`
	KickedCount          int32  `protobuf:"varint,19,opt,name=Kicked_count,json=KickedCount,proto3" json:"Kicked_count,omitempty"`
	BannedCount          int32  `protobuf:"varint,20,opt,name=Banned_count,json=BannedCount,proto3" json:"Banned_count,omitempty"`
	ExportedInviteLink   string `protobuf:"bytes,21,opt,name=Exported_invite_link,json=ExportedInviteLink,proto3" json:"Exported_invite_link,omitempty"`
	BotCount             int32  `protobuf:"varint,22,opt,name=Bot_count,json=BotCount,proto3" json:"Bot_count,omitempty"`
	MigratedFromMaxId    int32  `protobuf:"varint,23,opt,name=Migrated_from_max_id,json=MigratedFromMaxId,proto3" json:"Migrated_from_max_id,omitempty"`
	MigratedFromChatId   int32  `protobuf:"varint,24,opt,name=Migrated_from_chat_id,json=MigratedFromChatId,proto3" json:"Migrated_from_chat_id,omitempty"`
	PinnedMsgId          int32  `protobuf:"varint,25,opt,name=Pinned_msg_id,json=PinnedMsgId,proto3" json:"Pinned_msg_id,omitempty"`
	Cluster              int32  `protobuf:"varint,26,opt,name=Cluster,proto3" json:"Cluster,omitempty"`
	Invite_Rule          int32  `protobuf:"varint,27,opt,name=Invite_Rule,json=InviteRule,proto3" json:"Invite_Rule,omitempty"`
	Creator              int32  `protobuf:"varint,28,opt,name=Creator,proto3" json:"Creator,omitempty"`
	EveryoneQuiet        bool   `protobuf:"varint,29,opt,name=Everyone_quiet,json=EveryoneQuiet,proto3" json:"Everyone_quiet,omitempty"`
	PrivateChat          bool   `protobuf:"varint,30,opt,name=Private_chat,json=PrivateChat,proto3" json:"Private_chat,omitempty"`
	Id                   int32  `protobuf:"varint,31,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *ChatChannel) Reset()                    { *m = ChatChannel{} }
func (m *ChatChannel) String() string            { return proto.CompactTextString(m) }
func (*ChatChannel) ProtoMessage()               {}
func (*ChatChannel) Descriptor() ([]byte, []int) { return fileDescriptorActiveuserserver, []int{2} }

func (m *ChatChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChatChannel) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ChatChannel) GetEncry() bool {
	if m != nil {
		return m.Encry
	}
	return false
}

func (m *ChatChannel) GetBroadcastOrMegagroup() bool {
	if m != nil {
		return m.BroadcastOrMegagroup
	}
	return false
}

func (m *ChatChannel) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *ChatChannel) GetRestricted() bool {
	if m != nil {
		return m.Restricted
	}
	return false
}

func (m *ChatChannel) GetDemocracy() bool {
	if m != nil {
		return m.Democracy
	}
	return false
}

func (m *ChatChannel) GetSignatures() bool {
	if m != nil {
		return m.Signatures
	}
	return false
}

func (m *ChatChannel) GetMin() bool {
	if m != nil {
		return m.Min
	}
	return false
}

func (m *ChatChannel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChatChannel) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ChatChannel) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *ChatChannel) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *ChatChannel) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ChatChannel) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ChatChannel) GetRestrictionReason() string {
	if m != nil {
		return m.RestrictionReason
	}
	return ""
}

func (m *ChatChannel) GetParticipantsCount() int32 {
	if m != nil {
		return m.ParticipantsCount
	}
	return 0
}

func (m *ChatChannel) GetAdminsCount() int32 {
	if m != nil {
		return m.AdminsCount
	}
	return 0
}

func (m *ChatChannel) GetKickedCount() int32 {
	if m != nil {
		return m.KickedCount
	}
	return 0
}

func (m *ChatChannel) GetBannedCount() int32 {
	if m != nil {
		return m.BannedCount
	}
	return 0
}

func (m *ChatChannel) GetExportedInviteLink() string {
	if m != nil {
		return m.ExportedInviteLink
	}
	return ""
}

func (m *ChatChannel) GetBotCount() int32 {
	if m != nil {
		return m.BotCount
	}
	return 0
}

func (m *ChatChannel) GetMigratedFromMaxId() int32 {
	if m != nil {
		return m.MigratedFromMaxId
	}
	return 0
}

func (m *ChatChannel) GetMigratedFromChatId() int32 {
	if m != nil {
		return m.MigratedFromChatId
	}
	return 0
}

func (m *ChatChannel) GetPinnedMsgId() int32 {
	if m != nil {
		return m.PinnedMsgId
	}
	return 0
}

func (m *ChatChannel) GetCluster() int32 {
	if m != nil {
		return m.Cluster
	}
	return 0
}

func (m *ChatChannel) GetInvite_Rule() int32 {
	if m != nil {
		return m.Invite_Rule
	}
	return 0
}

func (m *ChatChannel) GetCreator() int32 {
	if m != nil {
		return m.Creator
	}
	return 0
}

func (m *ChatChannel) GetEveryoneQuiet() bool {
	if m != nil {
		return m.EveryoneQuiet
	}
	return false
}

func (m *ChatChannel) GetPrivateChat() bool {
	if m != nil {
		return m.PrivateChat
	}
	return false
}

func (m *ChatChannel) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 超级群用户信息   60个字节
type ChannelParticipants struct {
	ChannelId           int32  `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	UserId              int32  `protobuf:"varint,2,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	IsBot               bool   `protobuf:"varint,3,opt,name=Is_bot,json=IsBot,proto3" json:"Is_bot,omitempty"`
	InviteId            int32  `protobuf:"varint,4,opt,name=Invite_id,json=InviteId,proto3" json:"Invite_id,omitempty"`
	CanSetUsername      bool   `protobuf:"varint,5,opt,name=Can_set_username,json=CanSetUsername,proto3" json:"Can_set_username,omitempty"`
	CanViewParticipants bool   `protobuf:"varint,6,opt,name=Can_view_participants,json=CanViewParticipants,proto3" json:"Can_view_participants,omitempty"`
	IsCreator           bool   `protobuf:"varint,7,opt,name=Is_creator,json=IsCreator,proto3" json:"Is_creator,omitempty"`
	IsAdmin             bool   `protobuf:"varint,8,opt,name=Is_admin,json=IsAdmin,proto3" json:"Is_admin,omitempty"`
	IsBan               bool   `protobuf:"varint,9,opt,name=Is_ban,json=IsBan,proto3" json:"Is_ban,omitempty"`
	PromotedBy          int32  `protobuf:"varint,10,opt,name=Promoted_by,json=PromotedBy,proto3" json:"Promoted_by,omitempty"`
	ChangeGroupInfo     bool   `protobuf:"varint,11,opt,name=Change_group_info,json=ChangeGroupInfo,proto3" json:"Change_group_info,omitempty"`
	DeleteMessages      bool   `protobuf:"varint,12,opt,name=Delete_messages,json=DeleteMessages,proto3" json:"Delete_messages,omitempty"`
	BanUsers            bool   `protobuf:"varint,13,opt,name=Ban_users,json=BanUsers,proto3" json:"Ban_users,omitempty"`
	PinMessages         bool   `protobuf:"varint,14,opt,name=Pin_messages,json=PinMessages,proto3" json:"Pin_messages,omitempty"`
	AddNewAdmin         bool   `protobuf:"varint,15,opt,name=Add_new_admin,json=AddNewAdmin,proto3" json:"Add_new_admin,omitempty"`
	CanReadMessages     bool   `protobuf:"varint,16,opt,name=Can_read_messages,json=CanReadMessages,proto3" json:"Can_read_messages,omitempty"`
	CanSendMessage      bool   `protobuf:"varint,17,opt,name=Can_send_message,json=CanSendMessage,proto3" json:"Can_send_message,omitempty"`
	CanSendMedia        bool   `protobuf:"varint,18,opt,name=Can_send_media,json=CanSendMedia,proto3" json:"Can_send_media,omitempty"`
	CanSendSticker      bool   `protobuf:"varint,19,opt,name=Can_send_sticker,json=CanSendSticker,proto3" json:"Can_send_sticker,omitempty"`
	CanSendGifs         bool   `protobuf:"varint,21,opt,name=Can_send_gifs,json=CanSendGifs,proto3" json:"Can_send_gifs,omitempty"`
	CanSendGames        bool   `protobuf:"varint,22,opt,name=Can_send_games,json=CanSendGames,proto3" json:"Can_send_games,omitempty"`
	CanSendInline       bool   `protobuf:"varint,23,opt,name=Can_send_inline,json=CanSendInline,proto3" json:"Can_send_inline,omitempty"`
	CanEmbedLinks       bool   `protobuf:"varint,24,opt,name=Can_embed_links,json=CanEmbedLinks,proto3" json:"Can_embed_links,omitempty"`
	CanSendPolls        bool   `protobuf:"varint,25,opt,name=Can_send_polls,json=CanSendPolls,proto3" json:"Can_send_polls,omitempty"`
	KickedBy            int32  `protobuf:"varint,26,opt,name=Kicked_by,json=KickedBy,proto3" json:"Kicked_by,omitempty"`
	UntilDate           int32  `protobuf:"varint,27,opt,name=Until_date,json=UntilDate,proto3" json:"Until_date,omitempty"`
	JoinTime            int32  `protobuf:"varint,28,opt,name=Join_time,json=JoinTime,proto3" json:"Join_time,omitempty"`
	PostMessages        bool   `protobuf:"varint,29,opt,name=Post_messages,json=PostMessages,proto3" json:"Post_messages,omitempty"`
	Edit_Messages       bool   `protobuf:"varint,30,opt,name=Edit_Messages,json=EditMessages,proto3" json:"Edit_Messages,omitempty"`
	InviteUsers         bool   `protobuf:"varint,31,opt,name=Invite_users,json=InviteUsers,proto3" json:"Invite_users,omitempty"`
	InviteLink          bool   `protobuf:"varint,32,opt,name=Invite_link,json=InviteLink,proto3" json:"Invite_link,omitempty"`
	ExportInviteLink    string `protobuf:"bytes,33,opt,name=Export_invite_link,json=ExportInviteLink,proto3" json:"Export_invite_link,omitempty"`
	Id                  int32  `protobuf:"varint,34,opt,name=Id,proto3" json:"Id,omitempty"`
	StartMsgid          int32  `protobuf:"varint,35,opt,name=Start_msgid,json=StartMsgid,proto3" json:"Start_msgid,omitempty"`
}

func (m *ChannelParticipants) Reset()         { *m = ChannelParticipants{} }
func (m *ChannelParticipants) String() string { return proto.CompactTextString(m) }
func (*ChannelParticipants) ProtoMessage()    {}
func (*ChannelParticipants) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{3}
}

func (m *ChannelParticipants) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelParticipants) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChannelParticipants) GetIsBot() bool {
	if m != nil {
		return m.IsBot
	}
	return false
}

func (m *ChannelParticipants) GetInviteId() int32 {
	if m != nil {
		return m.InviteId
	}
	return 0
}

func (m *ChannelParticipants) GetCanSetUsername() bool {
	if m != nil {
		return m.CanSetUsername
	}
	return false
}

func (m *ChannelParticipants) GetCanViewParticipants() bool {
	if m != nil {
		return m.CanViewParticipants
	}
	return false
}

func (m *ChannelParticipants) GetIsCreator() bool {
	if m != nil {
		return m.IsCreator
	}
	return false
}

func (m *ChannelParticipants) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *ChannelParticipants) GetIsBan() bool {
	if m != nil {
		return m.IsBan
	}
	return false
}

func (m *ChannelParticipants) GetPromotedBy() int32 {
	if m != nil {
		return m.PromotedBy
	}
	return 0
}

func (m *ChannelParticipants) GetChangeGroupInfo() bool {
	if m != nil {
		return m.ChangeGroupInfo
	}
	return false
}

func (m *ChannelParticipants) GetDeleteMessages() bool {
	if m != nil {
		return m.DeleteMessages
	}
	return false
}

func (m *ChannelParticipants) GetBanUsers() bool {
	if m != nil {
		return m.BanUsers
	}
	return false
}

func (m *ChannelParticipants) GetPinMessages() bool {
	if m != nil {
		return m.PinMessages
	}
	return false
}

func (m *ChannelParticipants) GetAddNewAdmin() bool {
	if m != nil {
		return m.AddNewAdmin
	}
	return false
}

func (m *ChannelParticipants) GetCanReadMessages() bool {
	if m != nil {
		return m.CanReadMessages
	}
	return false
}

func (m *ChannelParticipants) GetCanSendMessage() bool {
	if m != nil {
		return m.CanSendMessage
	}
	return false
}

func (m *ChannelParticipants) GetCanSendMedia() bool {
	if m != nil {
		return m.CanSendMedia
	}
	return false
}

func (m *ChannelParticipants) GetCanSendSticker() bool {
	if m != nil {
		return m.CanSendSticker
	}
	return false
}

func (m *ChannelParticipants) GetCanSendGifs() bool {
	if m != nil {
		return m.CanSendGifs
	}
	return false
}

func (m *ChannelParticipants) GetCanSendGames() bool {
	if m != nil {
		return m.CanSendGames
	}
	return false
}

func (m *ChannelParticipants) GetCanSendInline() bool {
	if m != nil {
		return m.CanSendInline
	}
	return false
}

func (m *ChannelParticipants) GetCanEmbedLinks() bool {
	if m != nil {
		return m.CanEmbedLinks
	}
	return false
}

func (m *ChannelParticipants) GetCanSendPolls() bool {
	if m != nil {
		return m.CanSendPolls
	}
	return false
}

func (m *ChannelParticipants) GetKickedBy() int32 {
	if m != nil {
		return m.KickedBy
	}
	return 0
}

func (m *ChannelParticipants) GetUntilDate() int32 {
	if m != nil {
		return m.UntilDate
	}
	return 0
}

func (m *ChannelParticipants) GetJoinTime() int32 {
	if m != nil {
		return m.JoinTime
	}
	return 0
}

func (m *ChannelParticipants) GetPostMessages() bool {
	if m != nil {
		return m.PostMessages
	}
	return false
}

func (m *ChannelParticipants) GetEdit_Messages() bool {
	if m != nil {
		return m.Edit_Messages
	}
	return false
}

func (m *ChannelParticipants) GetInviteUsers() bool {
	if m != nil {
		return m.InviteUsers
	}
	return false
}

func (m *ChannelParticipants) GetInviteLink() bool {
	if m != nil {
		return m.InviteLink
	}
	return false
}

func (m *ChannelParticipants) GetExportInviteLink() string {
	if m != nil {
		return m.ExportInviteLink
	}
	return ""
}

func (m *ChannelParticipants) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChannelParticipants) GetStartMsgid() int32 {
	if m != nil {
		return m.StartMsgid
	}
	return 0
}

// 被踢用户信息
type ChannelKickedLeft struct {
	ChannelId       int32 `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	UserId          int32 `protobuf:"varint,2,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	KickedOrLeft    bool  `protobuf:"varint,3,opt,name=Kicked_or_left,json=KickedOrLeft,proto3" json:"Kicked_or_left,omitempty"`
	KickedBy        int32 `protobuf:"varint,4,opt,name=Kicked_by,json=KickedBy,proto3" json:"Kicked_by,omitempty"`
	Date            int32 `protobuf:"varint,5,opt,name=Date,proto3" json:"Date,omitempty"`
	LastDate        int32 `protobuf:"varint,6,opt,name=Last_date,json=LastDate,proto3" json:"Last_date,omitempty"`
	IsBan           bool  `protobuf:"varint,7,opt,name=Is_ban,json=IsBan,proto3" json:"Is_ban,omitempty"`
	CanReadMessages bool  `protobuf:"varint,8,opt,name=Can_read_messages,json=CanReadMessages,proto3" json:"Can_read_messages,omitempty"`
	CanSendMessage  bool  `protobuf:"varint,9,opt,name=Can_send_message,json=CanSendMessage,proto3" json:"Can_send_message,omitempty"`
	CanSendMedia    bool  `protobuf:"varint,10,opt,name=Can_send_media,json=CanSendMedia,proto3" json:"Can_send_media,omitempty"`
	CanSendInline   bool  `protobuf:"varint,11,opt,name=Can_send_inline,json=CanSendInline,proto3" json:"Can_send_inline,omitempty"`
	CanSendGames    bool  `protobuf:"varint,12,opt,name=Can_send_games,json=CanSendGames,proto3" json:"Can_send_games,omitempty"`
	CanSendGifs     bool  `protobuf:"varint,13,opt,name=Can_send_gifs,json=CanSendGifs,proto3" json:"Can_send_gifs,omitempty"`
	CanSendSticker  bool  `protobuf:"varint,14,opt,name=Can_send_sticker,json=CanSendSticker,proto3" json:"Can_send_sticker,omitempty"`
	CanEmbedLinks   bool  `protobuf:"varint,15,opt,name=Can_embed_links,json=CanEmbedLinks,proto3" json:"Can_embed_links,omitempty"`
	CanSendPolls    bool  `protobuf:"varint,16,opt,name=Can_send_polls,json=CanSendPolls,proto3" json:"Can_send_polls,omitempty"`
	Id              int32 `protobuf:"varint,17,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *ChannelKickedLeft) Reset()         { *m = ChannelKickedLeft{} }
func (m *ChannelKickedLeft) String() string { return proto.CompactTextString(m) }
func (*ChannelKickedLeft) ProtoMessage()    {}
func (*ChannelKickedLeft) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{4}
}

func (m *ChannelKickedLeft) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelKickedLeft) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChannelKickedLeft) GetKickedOrLeft() bool {
	if m != nil {
		return m.KickedOrLeft
	}
	return false
}

func (m *ChannelKickedLeft) GetKickedBy() int32 {
	if m != nil {
		return m.KickedBy
	}
	return 0
}

func (m *ChannelKickedLeft) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ChannelKickedLeft) GetLastDate() int32 {
	if m != nil {
		return m.LastDate
	}
	return 0
}

func (m *ChannelKickedLeft) GetIsBan() bool {
	if m != nil {
		return m.IsBan
	}
	return false
}

func (m *ChannelKickedLeft) GetCanReadMessages() bool {
	if m != nil {
		return m.CanReadMessages
	}
	return false
}

func (m *ChannelKickedLeft) GetCanSendMessage() bool {
	if m != nil {
		return m.CanSendMessage
	}
	return false
}

func (m *ChannelKickedLeft) GetCanSendMedia() bool {
	if m != nil {
		return m.CanSendMedia
	}
	return false
}

func (m *ChannelKickedLeft) GetCanSendInline() bool {
	if m != nil {
		return m.CanSendInline
	}
	return false
}

func (m *ChannelKickedLeft) GetCanSendGames() bool {
	if m != nil {
		return m.CanSendGames
	}
	return false
}

func (m *ChannelKickedLeft) GetCanSendGifs() bool {
	if m != nil {
		return m.CanSendGifs
	}
	return false
}

func (m *ChannelKickedLeft) GetCanSendSticker() bool {
	if m != nil {
		return m.CanSendSticker
	}
	return false
}

func (m *ChannelKickedLeft) GetCanEmbedLinks() bool {
	if m != nil {
		return m.CanEmbedLinks
	}
	return false
}

func (m *ChannelKickedLeft) GetCanSendPolls() bool {
	if m != nil {
		return m.CanSendPolls
	}
	return false
}

func (m *ChannelKickedLeft) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 激活用户
type ActivateUserReq struct {
	KeyId  int64 `protobuf:"varint,1,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
	UserId int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *ActivateUserReq) Reset()                    { *m = ActivateUserReq{} }
func (m *ActivateUserReq) String() string            { return proto.CompactTextString(m) }
func (*ActivateUserReq) ProtoMessage()               {}
func (*ActivateUserReq) Descriptor() ([]byte, []int) { return fileDescriptorActiveuserserver, []int{5} }

func (m *ActivateUserReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ActivateUserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type ActivateUserReply struct {
	ErrorCode ActiveErrorCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *ActivateUserReply) Reset()         { *m = ActivateUserReply{} }
func (m *ActivateUserReply) String() string { return proto.CompactTextString(m) }
func (*ActivateUserReply) ProtoMessage()    {}
func (*ActivateUserReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{6}
}

func (m *ActivateUserReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 将用户设置为不活跃状态
type LogoutUserUserReq struct {
	KeyId  int64 `protobuf:"varint,1,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
	UserId int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *LogoutUserUserReq) Reset()         { *m = LogoutUserUserReq{} }
func (m *LogoutUserUserReq) String() string { return proto.CompactTextString(m) }
func (*LogoutUserUserReq) ProtoMessage()    {}
func (*LogoutUserUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{7}
}

func (m *LogoutUserUserReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *LogoutUserUserReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type LogoutUserUserReply struct {
	ErrorCode ActiveErrorCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *LogoutUserUserReply) Reset()         { *m = LogoutUserUserReply{} }
func (m *LogoutUserUserReply) String() string { return proto.CompactTextString(m) }
func (*LogoutUserUserReply) ProtoMessage()    {}
func (*LogoutUserUserReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{8}
}

func (m *LogoutUserUserReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 获取超级群活跃用户ID
type GetActiveUsersReq struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
}

func (m *GetActiveUsersReq) Reset()         { *m = GetActiveUsersReq{} }
func (m *GetActiveUsersReq) String() string { return proto.CompactTextString(m) }
func (*GetActiveUsersReq) ProtoMessage()    {}
func (*GetActiveUsersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{9}
}

func (m *GetActiveUsersReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

type GetActiveUsersReply struct {
	ActiveIds []int32         `protobuf:"varint,1,rep,packed,name=ActiveIds" json:"ActiveIds,omitempty"`
	ErrorCode ActiveErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *GetActiveUsersReply) Reset()         { *m = GetActiveUsersReply{} }
func (m *GetActiveUsersReply) String() string { return proto.CompactTextString(m) }
func (*GetActiveUsersReply) ProtoMessage()    {}
func (*GetActiveUsersReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{10}
}

func (m *GetActiveUsersReply) GetActiveIds() []int32 {
	if m != nil {
		return m.ActiveIds
	}
	return nil
}

func (m *GetActiveUsersReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 获取超级群所有用户信息
type GetAllChannelUsersReq struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
}

func (m *GetAllChannelUsersReq) Reset()         { *m = GetAllChannelUsersReq{} }
func (m *GetAllChannelUsersReq) String() string { return proto.CompactTextString(m) }
func (*GetAllChannelUsersReq) ProtoMessage()    {}
func (*GetAllChannelUsersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{11}
}

func (m *GetAllChannelUsersReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

type GetAllChannelUsersReply struct {
	AllIds    []int32                `protobuf:"varint,1,rep,packed,name=AllIds" json:"AllIds,omitempty"`
	ActiveIds []int32                `protobuf:"varint,2,rep,packed,name=ActiveIds" json:"ActiveIds,omitempty"`
	Infos     []*ChannelParticipants `protobuf:"bytes,3,rep,name=Infos" json:"Infos,omitempty"`
	Admins    []*ChannelParticipants `protobuf:"bytes,4,rep,name=admins" json:"admins,omitempty"`
	Banners   []*ChannelParticipants `protobuf:"bytes,5,rep,name=banners" json:"banners,omitempty"`
	Bots      []*ChannelParticipants `protobuf:"bytes,6,rep,name=bots" json:"bots,omitempty"`
	ErrorCode ActiveErrorCode        `protobuf:"varint,7,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *GetAllChannelUsersReply) Reset()         { *m = GetAllChannelUsersReply{} }
func (m *GetAllChannelUsersReply) String() string { return proto.CompactTextString(m) }
func (*GetAllChannelUsersReply) ProtoMessage()    {}
func (*GetAllChannelUsersReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{12}
}

func (m *GetAllChannelUsersReply) GetAllIds() []int32 {
	if m != nil {
		return m.AllIds
	}
	return nil
}

func (m *GetAllChannelUsersReply) GetActiveIds() []int32 {
	if m != nil {
		return m.ActiveIds
	}
	return nil
}

func (m *GetAllChannelUsersReply) GetInfos() []*ChannelParticipants {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (m *GetAllChannelUsersReply) GetAdmins() []*ChannelParticipants {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *GetAllChannelUsersReply) GetBanners() []*ChannelParticipants {
	if m != nil {
		return m.Banners
	}
	return nil
}

func (m *GetAllChannelUsersReply) GetBots() []*ChannelParticipants {
	if m != nil {
		return m.Bots
	}
	return nil
}

func (m *GetAllChannelUsersReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 新增修改超级群用户信息
type SetChannelParticipantReq struct {
	UserInfo *ChannelParticipants `protobuf:"bytes,1,opt,name=UserInfo" json:"UserInfo,omitempty"`
}

func (m *SetChannelParticipantReq) Reset()         { *m = SetChannelParticipantReq{} }
func (m *SetChannelParticipantReq) String() string { return proto.CompactTextString(m) }
func (*SetChannelParticipantReq) ProtoMessage()    {}
func (*SetChannelParticipantReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{13}
}

func (m *SetChannelParticipantReq) GetUserInfo() *ChannelParticipants {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type SetChannelParticipantReply struct {
	ErrorCode ActiveErrorCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *SetChannelParticipantReply) Reset()         { *m = SetChannelParticipantReply{} }
func (m *SetChannelParticipantReply) String() string { return proto.CompactTextString(m) }
func (*SetChannelParticipantReply) ProtoMessage()    {}
func (*SetChannelParticipantReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{14}
}

func (m *SetChannelParticipantReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 获取一个超级群用户信息
type GetChannelParticipantReq struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserId    int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *GetChannelParticipantReq) Reset()         { *m = GetChannelParticipantReq{} }
func (m *GetChannelParticipantReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelParticipantReq) ProtoMessage()    {}
func (*GetChannelParticipantReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{15}
}

func (m *GetChannelParticipantReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelParticipantReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetChannelParticipantReply struct {
	UserInfo  *ChannelParticipants `protobuf:"bytes,1,opt,name=UserInfo" json:"UserInfo,omitempty"`
	ErrorCode ActiveErrorCode      `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *GetChannelParticipantReply) Reset()         { *m = GetChannelParticipantReply{} }
func (m *GetChannelParticipantReply) String() string { return proto.CompactTextString(m) }
func (*GetChannelParticipantReply) ProtoMessage()    {}
func (*GetChannelParticipantReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{16}
}

func (m *GetChannelParticipantReply) GetUserInfo() *ChannelParticipants {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *GetChannelParticipantReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 删除一个超级群用户信息
type DelChannelParticipantReq struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserId    int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *DelChannelParticipantReq) Reset()         { *m = DelChannelParticipantReq{} }
func (m *DelChannelParticipantReq) String() string { return proto.CompactTextString(m) }
func (*DelChannelParticipantReq) ProtoMessage()    {}
func (*DelChannelParticipantReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{17}
}

func (m *DelChannelParticipantReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *DelChannelParticipantReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type DelChannelParticipantReply struct {
	ErrorCode ActiveErrorCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *DelChannelParticipantReply) Reset()         { *m = DelChannelParticipantReply{} }
func (m *DelChannelParticipantReply) String() string { return proto.CompactTextString(m) }
func (*DelChannelParticipantReply) ProtoMessage()    {}
func (*DelChannelParticipantReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{18}
}

func (m *DelChannelParticipantReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 删除一个群内的所有用户
type DelAllChannelParticipantReq struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
}

func (m *DelAllChannelParticipantReq) Reset()         { *m = DelAllChannelParticipantReq{} }
func (m *DelAllChannelParticipantReq) String() string { return proto.CompactTextString(m) }
func (*DelAllChannelParticipantReq) ProtoMessage()    {}
func (*DelAllChannelParticipantReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{19}
}

func (m *DelAllChannelParticipantReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

type DelAllChannelParticipantReply struct {
	ErrorCode ActiveErrorCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *DelAllChannelParticipantReply) Reset()         { *m = DelAllChannelParticipantReply{} }
func (m *DelAllChannelParticipantReply) String() string { return proto.CompactTextString(m) }
func (*DelAllChannelParticipantReply) ProtoMessage()    {}
func (*DelAllChannelParticipantReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{20}
}

func (m *DelAllChannelParticipantReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 更新用户Firstname Lastname
type UpdateFirstnameLastnameReq struct {
	UserId    int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Firstname string `protobuf:"bytes,2,opt,name=Firstname,proto3" json:"Firstname,omitempty"`
	Lastname  string `protobuf:"bytes,3,opt,name=Lastname,proto3" json:"Lastname,omitempty"`
}

func (m *UpdateFirstnameLastnameReq) Reset()         { *m = UpdateFirstnameLastnameReq{} }
func (m *UpdateFirstnameLastnameReq) String() string { return proto.CompactTextString(m) }
func (*UpdateFirstnameLastnameReq) ProtoMessage()    {}
func (*UpdateFirstnameLastnameReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{21}
}

func (m *UpdateFirstnameLastnameReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateFirstnameLastnameReq) GetFirstname() string {
	if m != nil {
		return m.Firstname
	}
	return ""
}

func (m *UpdateFirstnameLastnameReq) GetLastname() string {
	if m != nil {
		return m.Lastname
	}
	return ""
}

type UpdateFirstnameLastnameReply struct {
	ErrorCode ActiveErrorCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *UpdateFirstnameLastnameReply) Reset()         { *m = UpdateFirstnameLastnameReply{} }
func (m *UpdateFirstnameLastnameReply) String() string { return proto.CompactTextString(m) }
func (*UpdateFirstnameLastnameReply) ProtoMessage()    {}
func (*UpdateFirstnameLastnameReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{22}
}

func (m *UpdateFirstnameLastnameReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 更新Username信息
type UpdateUsernameReq struct {
	NewInfo     *UserNameBase `protobuf:"bytes,1,opt,name=NewInfo" json:"NewInfo,omitempty"`
	OldUsername string        `protobuf:"bytes,2,opt,name=OldUsername,proto3" json:"OldUsername,omitempty"`
}

func (m *UpdateUsernameReq) Reset()         { *m = UpdateUsernameReq{} }
func (m *UpdateUsernameReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUsernameReq) ProtoMessage()    {}
func (*UpdateUsernameReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{23}
}

func (m *UpdateUsernameReq) GetNewInfo() *UserNameBase {
	if m != nil {
		return m.NewInfo
	}
	return nil
}

func (m *UpdateUsernameReq) GetOldUsername() string {
	if m != nil {
		return m.OldUsername
	}
	return ""
}

type UpdateUsernameReply struct {
	ErrorCode ActiveErrorCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *UpdateUsernameReply) Reset()         { *m = UpdateUsernameReply{} }
func (m *UpdateUsernameReply) String() string { return proto.CompactTextString(m) }
func (*UpdateUsernameReply) ProtoMessage()    {}
func (*UpdateUsernameReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{24}
}

func (m *UpdateUsernameReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 完全匹配username
type GetUsernameReq struct {
	Username string `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
}

func (m *GetUsernameReq) Reset()                    { *m = GetUsernameReq{} }
func (m *GetUsernameReq) String() string            { return proto.CompactTextString(m) }
func (*GetUsernameReq) ProtoMessage()               {}
func (*GetUsernameReq) Descriptor() ([]byte, []int) { return fileDescriptorActiveuserserver, []int{25} }

func (m *GetUsernameReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type GetUsernameReply struct {
	Info      *UserNameBase   `protobuf:"bytes,1,opt,name=Info" json:"Info,omitempty"`
	ErrorCode ActiveErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *GetUsernameReply) Reset()         { *m = GetUsernameReply{} }
func (m *GetUsernameReply) String() string { return proto.CompactTextString(m) }
func (*GetUsernameReply) ProtoMessage()    {}
func (*GetUsernameReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{26}
}

func (m *GetUsernameReply) GetInfo() *UserNameBase {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *GetUsernameReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 模糊搜索username
type SearchUsernameReq struct {
	SearchStr string `protobuf:"bytes,1,opt,name=SearchStr,proto3" json:"SearchStr,omitempty"`
	UserId    int32  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Limit     int32  `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *SearchUsernameReq) Reset()         { *m = SearchUsernameReq{} }
func (m *SearchUsernameReq) String() string { return proto.CompactTextString(m) }
func (*SearchUsernameReq) ProtoMessage()    {}
func (*SearchUsernameReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{27}
}

func (m *SearchUsernameReq) GetSearchStr() string {
	if m != nil {
		return m.SearchStr
	}
	return ""
}

func (m *SearchUsernameReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SearchUsernameReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type SearchUsernameReply struct {
	Info      []*UserNameBase `protobuf:"bytes,1,rep,name=Info" json:"Info,omitempty"`
	ErrorCode ActiveErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *SearchUsernameReply) Reset()         { *m = SearchUsernameReply{} }
func (m *SearchUsernameReply) String() string { return proto.CompactTextString(m) }
func (*SearchUsernameReply) ProtoMessage()    {}
func (*SearchUsernameReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{28}
}

func (m *SearchUsernameReply) GetInfo() []*UserNameBase {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *SearchUsernameReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 更新邀请链接
type UpdateInviteLinkReq struct {
	NewInfo       *InviteLinkBase `protobuf:"bytes,1,opt,name=NewInfo" json:"NewInfo,omitempty"`
	OldInviteLink string          `protobuf:"bytes,2,opt,name=OldInviteLink,proto3" json:"OldInviteLink,omitempty"`
}

func (m *UpdateInviteLinkReq) Reset()         { *m = UpdateInviteLinkReq{} }
func (m *UpdateInviteLinkReq) String() string { return proto.CompactTextString(m) }
func (*UpdateInviteLinkReq) ProtoMessage()    {}
func (*UpdateInviteLinkReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{29}
}

func (m *UpdateInviteLinkReq) GetNewInfo() *InviteLinkBase {
	if m != nil {
		return m.NewInfo
	}
	return nil
}

func (m *UpdateInviteLinkReq) GetOldInviteLink() string {
	if m != nil {
		return m.OldInviteLink
	}
	return ""
}

type UpdateInviteLinkReply struct {
	ErrorCode ActiveErrorCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *UpdateInviteLinkReply) Reset()         { *m = UpdateInviteLinkReply{} }
func (m *UpdateInviteLinkReply) String() string { return proto.CompactTextString(m) }
func (*UpdateInviteLinkReply) ProtoMessage()    {}
func (*UpdateInviteLinkReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{30}
}

func (m *UpdateInviteLinkReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 完全匹配邀请链接
type GetInviteLinkReq struct {
	InviteLink string `protobuf:"bytes,1,opt,name=InviteLink,proto3" json:"InviteLink,omitempty"`
}

func (m *GetInviteLinkReq) Reset()         { *m = GetInviteLinkReq{} }
func (m *GetInviteLinkReq) String() string { return proto.CompactTextString(m) }
func (*GetInviteLinkReq) ProtoMessage()    {}
func (*GetInviteLinkReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{31}
}

func (m *GetInviteLinkReq) GetInviteLink() string {
	if m != nil {
		return m.InviteLink
	}
	return ""
}

type GetInviteLinkReply struct {
	Info      *InviteLinkBase `protobuf:"bytes,1,opt,name=Info" json:"Info,omitempty"`
	ErrorCode ActiveErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *GetInviteLinkReply) Reset()         { *m = GetInviteLinkReply{} }
func (m *GetInviteLinkReply) String() string { return proto.CompactTextString(m) }
func (*GetInviteLinkReply) ProtoMessage()    {}
func (*GetInviteLinkReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{32}
}

func (m *GetInviteLinkReply) GetInfo() *InviteLinkBase {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *GetInviteLinkReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 根据群名称搜索自己所在的群
type SearchSelfGroupReq struct {
	Title  string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	UserId int32  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *SearchSelfGroupReq) Reset()         { *m = SearchSelfGroupReq{} }
func (m *SearchSelfGroupReq) String() string { return proto.CompactTextString(m) }
func (*SearchSelfGroupReq) ProtoMessage()    {}
func (*SearchSelfGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{33}
}

func (m *SearchSelfGroupReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SearchSelfGroupReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type SearchSelfGroupReply struct {
	ChatIds    []int32         `protobuf:"varint,1,rep,packed,name=ChatIds" json:"ChatIds,omitempty"`
	ChannelIds []int32         `protobuf:"varint,2,rep,packed,name=ChannelIds" json:"ChannelIds,omitempty"`
	ErrorCode  ActiveErrorCode `protobuf:"varint,3,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *SearchSelfGroupReply) Reset()         { *m = SearchSelfGroupReply{} }
func (m *SearchSelfGroupReply) String() string { return proto.CompactTextString(m) }
func (*SearchSelfGroupReply) ProtoMessage()    {}
func (*SearchSelfGroupReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{34}
}

func (m *SearchSelfGroupReply) GetChatIds() []int32 {
	if m != nil {
		return m.ChatIds
	}
	return nil
}

func (m *SearchSelfGroupReply) GetChannelIds() []int32 {
	if m != nil {
		return m.ChannelIds
	}
	return nil
}

func (m *SearchSelfGroupReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 获取两个用户相同的群数量
type GetTwoUserChatsCountReq struct {
	UserOne int32 `protobuf:"varint,1,opt,name=UserOne,proto3" json:"UserOne,omitempty"`
	UserTwo int32 `protobuf:"varint,2,opt,name=UserTwo,proto3" json:"UserTwo,omitempty"`
}

func (m *GetTwoUserChatsCountReq) Reset()         { *m = GetTwoUserChatsCountReq{} }
func (m *GetTwoUserChatsCountReq) String() string { return proto.CompactTextString(m) }
func (*GetTwoUserChatsCountReq) ProtoMessage()    {}
func (*GetTwoUserChatsCountReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{35}
}

func (m *GetTwoUserChatsCountReq) GetUserOne() int32 {
	if m != nil {
		return m.UserOne
	}
	return 0
}

func (m *GetTwoUserChatsCountReq) GetUserTwo() int32 {
	if m != nil {
		return m.UserTwo
	}
	return 0
}

type GetTwoUserChatsCountReply struct {
	Count     int32           `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	ErrorCode ActiveErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *GetTwoUserChatsCountReply) Reset()         { *m = GetTwoUserChatsCountReply{} }
func (m *GetTwoUserChatsCountReply) String() string { return proto.CompactTextString(m) }
func (*GetTwoUserChatsCountReply) ProtoMessage()    {}
func (*GetTwoUserChatsCountReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{36}
}

func (m *GetTwoUserChatsCountReply) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetTwoUserChatsCountReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 获取两个用户相同的群
type GetTwoUserChatsReq struct {
	UserOne int32 `protobuf:"varint,1,opt,name=UserOne,proto3" json:"UserOne,omitempty"`
	UserTwo int32 `protobuf:"varint,2,opt,name=UserTwo,proto3" json:"UserTwo,omitempty"`
}

func (m *GetTwoUserChatsReq) Reset()         { *m = GetTwoUserChatsReq{} }
func (m *GetTwoUserChatsReq) String() string { return proto.CompactTextString(m) }
func (*GetTwoUserChatsReq) ProtoMessage()    {}
func (*GetTwoUserChatsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{37}
}

func (m *GetTwoUserChatsReq) GetUserOne() int32 {
	if m != nil {
		return m.UserOne
	}
	return 0
}

func (m *GetTwoUserChatsReq) GetUserTwo() int32 {
	if m != nil {
		return m.UserTwo
	}
	return 0
}

type GetTwoUserChatsReply struct {
	ChatIds    []int32         `protobuf:"varint,1,rep,packed,name=ChatIds" json:"ChatIds,omitempty"`
	ChannelIds []int32         `protobuf:"varint,2,rep,packed,name=ChannelIds" json:"ChannelIds,omitempty"`
	ErrorCode  ActiveErrorCode `protobuf:"varint,3,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *GetTwoUserChatsReply) Reset()         { *m = GetTwoUserChatsReply{} }
func (m *GetTwoUserChatsReply) String() string { return proto.CompactTextString(m) }
func (*GetTwoUserChatsReply) ProtoMessage()    {}
func (*GetTwoUserChatsReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{38}
}

func (m *GetTwoUserChatsReply) GetChatIds() []int32 {
	if m != nil {
		return m.ChatIds
	}
	return nil
}

func (m *GetTwoUserChatsReply) GetChannelIds() []int32 {
	if m != nil {
		return m.ChannelIds
	}
	return nil
}

func (m *GetTwoUserChatsReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 搜索群成员
type SearchChannelParticipantReq struct {
	ChannelId  int32             `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	SearchStr  string            `protobuf:"bytes,2,opt,name=SearchStr,proto3" json:"SearchStr,omitempty"`
	SearchType ChannelSearchType `protobuf:"varint,3,opt,name=SearchType,proto3,enum=activeuserserver.ChannelSearchType" json:"SearchType,omitempty"`
	Limit      int32             `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *SearchChannelParticipantReq) Reset()         { *m = SearchChannelParticipantReq{} }
func (m *SearchChannelParticipantReq) String() string { return proto.CompactTextString(m) }
func (*SearchChannelParticipantReq) ProtoMessage()    {}
func (*SearchChannelParticipantReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{39}
}

func (m *SearchChannelParticipantReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *SearchChannelParticipantReq) GetSearchStr() string {
	if m != nil {
		return m.SearchStr
	}
	return ""
}

func (m *SearchChannelParticipantReq) GetSearchType() ChannelSearchType {
	if m != nil {
		return m.SearchType
	}
	return ChannelSearchType_SearchAll
}

func (m *SearchChannelParticipantReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type SearchChannelParticipantReply struct {
	Users     []*ChannelParticipants `protobuf:"bytes,1,rep,name=Users" json:"Users,omitempty"`
	ErrorCode ActiveErrorCode        `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *SearchChannelParticipantReply) Reset()         { *m = SearchChannelParticipantReply{} }
func (m *SearchChannelParticipantReply) String() string { return proto.CompactTextString(m) }
func (*SearchChannelParticipantReply) ProtoMessage()    {}
func (*SearchChannelParticipantReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{40}
}

func (m *SearchChannelParticipantReply) GetUsers() []*ChannelParticipants {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *SearchChannelParticipantReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 搜索被踢群成员
type SearchKickedParticipantReq struct {
	ChannelId int32  `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	SearchStr string `protobuf:"bytes,2,opt,name=SearchStr,proto3" json:"SearchStr,omitempty"`
	Limit     int32  `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *SearchKickedParticipantReq) Reset()         { *m = SearchKickedParticipantReq{} }
func (m *SearchKickedParticipantReq) String() string { return proto.CompactTextString(m) }
func (*SearchKickedParticipantReq) ProtoMessage()    {}
func (*SearchKickedParticipantReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{41}
}

func (m *SearchKickedParticipantReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *SearchKickedParticipantReq) GetSearchStr() string {
	if m != nil {
		return m.SearchStr
	}
	return ""
}

func (m *SearchKickedParticipantReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type SearchKickedParticipantReply struct {
	Users     []*ChannelParticipants `protobuf:"bytes,1,rep,name=Users" json:"Users,omitempty"`
	ErrorCode ActiveErrorCode        `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *SearchKickedParticipantReply) Reset()         { *m = SearchKickedParticipantReply{} }
func (m *SearchKickedParticipantReply) String() string { return proto.CompactTextString(m) }
func (*SearchKickedParticipantReply) ProtoMessage()    {}
func (*SearchKickedParticipantReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{42}
}

func (m *SearchKickedParticipantReply) GetUsers() []*ChannelParticipants {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *SearchKickedParticipantReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 分页获取被踢用户
type GetChannelKickedByLimitReq struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Offset    int32 `protobuf:"varint,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit     int32 `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *GetChannelKickedByLimitReq) Reset()         { *m = GetChannelKickedByLimitReq{} }
func (m *GetChannelKickedByLimitReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelKickedByLimitReq) ProtoMessage()    {}
func (*GetChannelKickedByLimitReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{43}
}

func (m *GetChannelKickedByLimitReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelKickedByLimitReq) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetChannelKickedByLimitReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetChannelKickedByLimitReply struct {
	Users     []*ChannelKickedLeft `protobuf:"bytes,1,rep,name=Users" json:"Users,omitempty"`
	ErrorCode ActiveErrorCode      `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *GetChannelKickedByLimitReply) Reset()         { *m = GetChannelKickedByLimitReply{} }
func (m *GetChannelKickedByLimitReply) String() string { return proto.CompactTextString(m) }
func (*GetChannelKickedByLimitReply) ProtoMessage()    {}
func (*GetChannelKickedByLimitReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{44}
}

func (m *GetChannelKickedByLimitReply) GetUsers() []*ChannelKickedLeft {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GetChannelKickedByLimitReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 获取单个被踢用户
type GetChannelKeckedLeftReq struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserId    int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *GetChannelKeckedLeftReq) Reset()         { *m = GetChannelKeckedLeftReq{} }
func (m *GetChannelKeckedLeftReq) String() string { return proto.CompactTextString(m) }
func (*GetChannelKeckedLeftReq) ProtoMessage()    {}
func (*GetChannelKeckedLeftReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{45}
}

func (m *GetChannelKeckedLeftReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelKeckedLeftReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetChannelKeckedLeftReply struct {
	UserInfo  *ChannelKickedLeft `protobuf:"bytes,1,opt,name=UserInfo" json:"UserInfo,omitempty"`
	ErrorCode ActiveErrorCode    `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *GetChannelKeckedLeftReply) Reset()         { *m = GetChannelKeckedLeftReply{} }
func (m *GetChannelKeckedLeftReply) String() string { return proto.CompactTextString(m) }
func (*GetChannelKeckedLeftReply) ProtoMessage()    {}
func (*GetChannelKeckedLeftReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{46}
}

func (m *GetChannelKeckedLeftReply) GetUserInfo() *ChannelKickedLeft {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *GetChannelKeckedLeftReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 判断哪些用户在线
type CheckOnlineUsersReq struct {
	UserIds []int32 `protobuf:"varint,1,rep,packed,name=UserIds" json:"UserIds,omitempty"`
}

func (m *CheckOnlineUsersReq) Reset()         { *m = CheckOnlineUsersReq{} }
func (m *CheckOnlineUsersReq) String() string { return proto.CompactTextString(m) }
func (*CheckOnlineUsersReq) ProtoMessage()    {}
func (*CheckOnlineUsersReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{47}
}

func (m *CheckOnlineUsersReq) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type CheckOnlineUsersReply struct {
	UserIds   []int32         `protobuf:"varint,1,rep,packed,name=UserIds" json:"UserIds,omitempty"`
	ErrorCode ActiveErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *CheckOnlineUsersReply) Reset()         { *m = CheckOnlineUsersReply{} }
func (m *CheckOnlineUsersReply) String() string { return proto.CompactTextString(m) }
func (*CheckOnlineUsersReply) ProtoMessage()    {}
func (*CheckOnlineUsersReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{48}
}

func (m *CheckOnlineUsersReply) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *CheckOnlineUsersReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 根据传入ID搜索用户
type SearchUsersByStrReq struct {
	UserIds []int32 `protobuf:"varint,1,rep,packed,name=UserIds" json:"UserIds,omitempty"`
	Str     string  `protobuf:"bytes,2,opt,name=str,proto3" json:"str,omitempty"`
}

func (m *SearchUsersByStrReq) Reset()         { *m = SearchUsersByStrReq{} }
func (m *SearchUsersByStrReq) String() string { return proto.CompactTextString(m) }
func (*SearchUsersByStrReq) ProtoMessage()    {}
func (*SearchUsersByStrReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{49}
}

func (m *SearchUsersByStrReq) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *SearchUsersByStrReq) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

type SearchUsersByStrReply struct {
	UserIds   []int32         `protobuf:"varint,1,rep,packed,name=UserIds" json:"UserIds,omitempty"`
	ErrorCode ActiveErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *SearchUsersByStrReply) Reset()         { *m = SearchUsersByStrReply{} }
func (m *SearchUsersByStrReply) String() string { return proto.CompactTextString(m) }
func (*SearchUsersByStrReply) ProtoMessage()    {}
func (*SearchUsersByStrReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{50}
}

func (m *SearchUsersByStrReply) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *SearchUsersByStrReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 设置被踢用户信息到缓存 以存在的直接替换
type AddLeftParticipantReq struct {
	UserInfo *ChannelKickedLeft `protobuf:"bytes,1,opt,name=UserInfo" json:"UserInfo,omitempty"`
}

func (m *AddLeftParticipantReq) Reset()         { *m = AddLeftParticipantReq{} }
func (m *AddLeftParticipantReq) String() string { return proto.CompactTextString(m) }
func (*AddLeftParticipantReq) ProtoMessage()    {}
func (*AddLeftParticipantReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{51}
}

func (m *AddLeftParticipantReq) GetUserInfo() *ChannelKickedLeft {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type AddLeftParticipantReply struct {
	ErrorCode ActiveErrorCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *AddLeftParticipantReply) Reset()         { *m = AddLeftParticipantReply{} }
func (m *AddLeftParticipantReply) String() string { return proto.CompactTextString(m) }
func (*AddLeftParticipantReply) ProtoMessage()    {}
func (*AddLeftParticipantReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{52}
}

func (m *AddLeftParticipantReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 删除缓存中的被踢用户信息
type DelLeftParticipantReq struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserId    int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *DelLeftParticipantReq) Reset()         { *m = DelLeftParticipantReq{} }
func (m *DelLeftParticipantReq) String() string { return proto.CompactTextString(m) }
func (*DelLeftParticipantReq) ProtoMessage()    {}
func (*DelLeftParticipantReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{53}
}

func (m *DelLeftParticipantReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *DelLeftParticipantReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type DelLeftParticipantReply struct {
	ErrorCode ActiveErrorCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *DelLeftParticipantReply) Reset()         { *m = DelLeftParticipantReply{} }
func (m *DelLeftParticipantReply) String() string { return proto.CompactTextString(m) }
func (*DelLeftParticipantReply) ProtoMessage()    {}
func (*DelLeftParticipantReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{54}
}

func (m *DelLeftParticipantReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 删除缓存中的群Id对应的所有被踢用户信息
type DelAllLeftChatParticipantReq struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
}

func (m *DelAllLeftChatParticipantReq) Reset()         { *m = DelAllLeftChatParticipantReq{} }
func (m *DelAllLeftChatParticipantReq) String() string { return proto.CompactTextString(m) }
func (*DelAllLeftChatParticipantReq) ProtoMessage()    {}
func (*DelAllLeftChatParticipantReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{55}
}

func (m *DelAllLeftChatParticipantReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

type DelAllLeftChatParticipantReply struct {
	ErrorCode ActiveErrorCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *DelAllLeftChatParticipantReply) Reset()         { *m = DelAllLeftChatParticipantReply{} }
func (m *DelAllLeftChatParticipantReply) String() string { return proto.CompactTextString(m) }
func (*DelAllLeftChatParticipantReply) ProtoMessage()    {}
func (*DelAllLeftChatParticipantReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{56}
}

func (m *DelAllLeftChatParticipantReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// 重置一个超级群所有信息
type ResetChannelParticipantReq struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
}

func (m *ResetChannelParticipantReq) Reset()         { *m = ResetChannelParticipantReq{} }
func (m *ResetChannelParticipantReq) String() string { return proto.CompactTextString(m) }
func (*ResetChannelParticipantReq) ProtoMessage()    {}
func (*ResetChannelParticipantReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{57}
}

func (m *ResetChannelParticipantReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

type ResetChannelParticipantReply struct {
	ErrorCode ActiveErrorCode `protobuf:"varint,1,opt,name=ErrorCode,proto3,enum=activeuserserver.ActiveErrorCode" json:"ErrorCode,omitempty"`
}

func (m *ResetChannelParticipantReply) Reset()         { *m = ResetChannelParticipantReply{} }
func (m *ResetChannelParticipantReply) String() string { return proto.CompactTextString(m) }
func (*ResetChannelParticipantReply) ProtoMessage()    {}
func (*ResetChannelParticipantReply) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{58}
}

func (m *ResetChannelParticipantReply) GetErrorCode() ActiveErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ActiveErrorCode_Active_OK
}

// add by qingsong at 2020.03.03 for load group all user info.
type UserNameInfo struct {
	UserId    int32  `protobuf:"varint,1,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	IsKick    bool   `protobuf:"varint,2,opt,name=Is_kick,json=IsKick,proto3" json:"Is_kick,omitempty"`
	FirstName string `protobuf:"bytes,3,opt,name=First_name,json=FirstName,proto3" json:"First_name,omitempty"`
	LastName  string `protobuf:"bytes,4,opt,name=Last_name,json=LastName,proto3" json:"Last_name,omitempty"`
}

func (m *UserNameInfo) Reset()                    { *m = UserNameInfo{} }
func (m *UserNameInfo) String() string            { return proto.CompactTextString(m) }
func (*UserNameInfo) ProtoMessage()               {}
func (*UserNameInfo) Descriptor() ([]byte, []int) { return fileDescriptorActiveuserserver, []int{59} }

func (m *UserNameInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserNameInfo) GetIsKick() bool {
	if m != nil {
		return m.IsKick
	}
	return false
}

func (m *UserNameInfo) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UserNameInfo) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

type LoadGroupUserNameInfoReq struct {
	GroupId int32 `protobuf:"varint,1,opt,name=Group_id,json=GroupId,proto3" json:"Group_id,omitempty"`
	Version int32 `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (m *LoadGroupUserNameInfoReq) Reset()         { *m = LoadGroupUserNameInfoReq{} }
func (m *LoadGroupUserNameInfoReq) String() string { return proto.CompactTextString(m) }
func (*LoadGroupUserNameInfoReq) ProtoMessage()    {}
func (*LoadGroupUserNameInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{60}
}

func (m *LoadGroupUserNameInfoReq) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *LoadGroupUserNameInfoReq) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type LoadGroupUserNameInfoRsp struct {
	GroupId int32           `protobuf:"varint,1,opt,name=Group_id,json=GroupId,proto3" json:"Group_id,omitempty"`
	Version int32           `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	Members []*UserNameInfo `protobuf:"bytes,3,rep,name=Members" json:"Members,omitempty"`
}

func (m *LoadGroupUserNameInfoRsp) Reset()         { *m = LoadGroupUserNameInfoRsp{} }
func (m *LoadGroupUserNameInfoRsp) String() string { return proto.CompactTextString(m) }
func (*LoadGroupUserNameInfoRsp) ProtoMessage()    {}
func (*LoadGroupUserNameInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{61}
}

func (m *LoadGroupUserNameInfoRsp) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *LoadGroupUserNameInfoRsp) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *LoadGroupUserNameInfoRsp) GetMembers() []*UserNameInfo {
	if m != nil {
		return m.Members
	}
	return nil
}

// add by qingsong at 2020.06.17 for load group online information.
// rpc GetChsOnlineUserCount(GetChsOnlineUserCountReq) returns (GetChsOnlineUserCountRsp) {};
type GetChsOnlineUserCountReq struct {
	Ids []int32 `protobuf:"varint,1,rep,packed,name=Ids" json:"Ids,omitempty"`
}

func (m *GetChsOnlineUserCountReq) Reset()         { *m = GetChsOnlineUserCountReq{} }
func (m *GetChsOnlineUserCountReq) String() string { return proto.CompactTextString(m) }
func (*GetChsOnlineUserCountReq) ProtoMessage()    {}
func (*GetChsOnlineUserCountReq) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{62}
}

func (m *GetChsOnlineUserCountReq) GetIds() []int32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type ChanOnlineUser struct {
	ChannelId   int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	MemberCount int32 `protobuf:"varint,2,opt,name=MemberCount,proto3" json:"MemberCount,omitempty"`
	OnlineCount int32 `protobuf:"varint,3,opt,name=OnlineCount,proto3" json:"OnlineCount,omitempty"`
}

func (m *ChanOnlineUser) Reset()                    { *m = ChanOnlineUser{} }
func (m *ChanOnlineUser) String() string            { return proto.CompactTextString(m) }
func (*ChanOnlineUser) ProtoMessage()               {}
func (*ChanOnlineUser) Descriptor() ([]byte, []int) { return fileDescriptorActiveuserserver, []int{63} }

func (m *ChanOnlineUser) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChanOnlineUser) GetMemberCount() int32 {
	if m != nil {
		return m.MemberCount
	}
	return 0
}

func (m *ChanOnlineUser) GetOnlineCount() int32 {
	if m != nil {
		return m.OnlineCount
	}
	return 0
}

type GetChsOnlineUserCountRsp struct {
	ReplyData []*ChanOnlineUser `protobuf:"bytes,1,rep,name=ReplyData" json:"ReplyData,omitempty"`
}

func (m *GetChsOnlineUserCountRsp) Reset()         { *m = GetChsOnlineUserCountRsp{} }
func (m *GetChsOnlineUserCountRsp) String() string { return proto.CompactTextString(m) }
func (*GetChsOnlineUserCountRsp) ProtoMessage()    {}
func (*GetChsOnlineUserCountRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorActiveuserserver, []int{64}
}

func (m *GetChsOnlineUserCountRsp) GetReplyData() []*ChanOnlineUser {
	if m != nil {
		return m.ReplyData
	}
	return nil
}

func init() {
	proto.RegisterType((*UserNameBase)(nil), "activeuserserver.UserNameBase")
	proto.RegisterType((*InviteLinkBase)(nil), "activeuserserver.InviteLinkBase")
	proto.RegisterType((*ChatChannel)(nil), "activeuserserver.ChatChannel")
	proto.RegisterType((*ChannelParticipants)(nil), "activeuserserver.ChannelParticipants")
	proto.RegisterType((*ChannelKickedLeft)(nil), "activeuserserver.ChannelKickedLeft")
	proto.RegisterType((*ActivateUserReq)(nil), "activeuserserver.ActivateUserReq")
	proto.RegisterType((*ActivateUserReply)(nil), "activeuserserver.ActivateUserReply")
	proto.RegisterType((*LogoutUserUserReq)(nil), "activeuserserver.LogoutUserUserReq")
	proto.RegisterType((*LogoutUserUserReply)(nil), "activeuserserver.LogoutUserUserReply")
	proto.RegisterType((*GetActiveUsersReq)(nil), "activeuserserver.GetActiveUsersReq")
	proto.RegisterType((*GetActiveUsersReply)(nil), "activeuserserver.GetActiveUsersReply")
	proto.RegisterType((*GetAllChannelUsersReq)(nil), "activeuserserver.GetAllChannelUsersReq")
	proto.RegisterType((*GetAllChannelUsersReply)(nil), "activeuserserver.GetAllChannelUsersReply")
	proto.RegisterType((*SetChannelParticipantReq)(nil), "activeuserserver.SetChannelParticipantReq")
	proto.RegisterType((*SetChannelParticipantReply)(nil), "activeuserserver.SetChannelParticipantReply")
	proto.RegisterType((*GetChannelParticipantReq)(nil), "activeuserserver.GetChannelParticipantReq")
	proto.RegisterType((*GetChannelParticipantReply)(nil), "activeuserserver.GetChannelParticipantReply")
	proto.RegisterType((*DelChannelParticipantReq)(nil), "activeuserserver.DelChannelParticipantReq")
	proto.RegisterType((*DelChannelParticipantReply)(nil), "activeuserserver.DelChannelParticipantReply")
	proto.RegisterType((*DelAllChannelParticipantReq)(nil), "activeuserserver.DelAllChannelParticipantReq")
	proto.RegisterType((*DelAllChannelParticipantReply)(nil), "activeuserserver.DelAllChannelParticipantReply")
	proto.RegisterType((*UpdateFirstnameLastnameReq)(nil), "activeuserserver.UpdateFirstnameLastnameReq")
	proto.RegisterType((*UpdateFirstnameLastnameReply)(nil), "activeuserserver.UpdateFirstnameLastnameReply")
	proto.RegisterType((*UpdateUsernameReq)(nil), "activeuserserver.UpdateUsernameReq")
	proto.RegisterType((*UpdateUsernameReply)(nil), "activeuserserver.UpdateUsernameReply")
	proto.RegisterType((*GetUsernameReq)(nil), "activeuserserver.GetUsernameReq")
	proto.RegisterType((*GetUsernameReply)(nil), "activeuserserver.GetUsernameReply")
	proto.RegisterType((*SearchUsernameReq)(nil), "activeuserserver.SearchUsernameReq")
	proto.RegisterType((*SearchUsernameReply)(nil), "activeuserserver.SearchUsernameReply")
	proto.RegisterType((*UpdateInviteLinkReq)(nil), "activeuserserver.UpdateInviteLinkReq")
	proto.RegisterType((*UpdateInviteLinkReply)(nil), "activeuserserver.UpdateInviteLinkReply")
	proto.RegisterType((*GetInviteLinkReq)(nil), "activeuserserver.GetInviteLinkReq")
	proto.RegisterType((*GetInviteLinkReply)(nil), "activeuserserver.GetInviteLinkReply")
	proto.RegisterType((*SearchSelfGroupReq)(nil), "activeuserserver.SearchSelfGroupReq")
	proto.RegisterType((*SearchSelfGroupReply)(nil), "activeuserserver.SearchSelfGroupReply")
	proto.RegisterType((*GetTwoUserChatsCountReq)(nil), "activeuserserver.GetTwoUserChatsCountReq")
	proto.RegisterType((*GetTwoUserChatsCountReply)(nil), "activeuserserver.GetTwoUserChatsCountReply")
	proto.RegisterType((*GetTwoUserChatsReq)(nil), "activeuserserver.GetTwoUserChatsReq")
	proto.RegisterType((*GetTwoUserChatsReply)(nil), "activeuserserver.GetTwoUserChatsReply")
	proto.RegisterType((*SearchChannelParticipantReq)(nil), "activeuserserver.SearchChannelParticipantReq")
	proto.RegisterType((*SearchChannelParticipantReply)(nil), "activeuserserver.SearchChannelParticipantReply")
	proto.RegisterType((*SearchKickedParticipantReq)(nil), "activeuserserver.SearchKickedParticipantReq")
	proto.RegisterType((*SearchKickedParticipantReply)(nil), "activeuserserver.SearchKickedParticipantReply")
	proto.RegisterType((*GetChannelKickedByLimitReq)(nil), "activeuserserver.GetChannelKickedByLimitReq")
	proto.RegisterType((*GetChannelKickedByLimitReply)(nil), "activeuserserver.GetChannelKickedByLimitReply")
	proto.RegisterType((*GetChannelKeckedLeftReq)(nil), "activeuserserver.GetChannelKeckedLeftReq")
	proto.RegisterType((*GetChannelKeckedLeftReply)(nil), "activeuserserver.GetChannelKeckedLeftReply")
	proto.RegisterType((*CheckOnlineUsersReq)(nil), "activeuserserver.CheckOnlineUsersReq")
	proto.RegisterType((*CheckOnlineUsersReply)(nil), "activeuserserver.CheckOnlineUsersReply")
	proto.RegisterType((*SearchUsersByStrReq)(nil), "activeuserserver.SearchUsersByStrReq")
	proto.RegisterType((*SearchUsersByStrReply)(nil), "activeuserserver.SearchUsersByStrReply")
	proto.RegisterType((*AddLeftParticipantReq)(nil), "activeuserserver.AddLeftParticipantReq")
	proto.RegisterType((*AddLeftParticipantReply)(nil), "activeuserserver.AddLeftParticipantReply")
	proto.RegisterType((*DelLeftParticipantReq)(nil), "activeuserserver.DelLeftParticipantReq")
	proto.RegisterType((*DelLeftParticipantReply)(nil), "activeuserserver.DelLeftParticipantReply")
	proto.RegisterType((*DelAllLeftChatParticipantReq)(nil), "activeuserserver.DelAllLeftChatParticipantReq")
	proto.RegisterType((*DelAllLeftChatParticipantReply)(nil), "activeuserserver.DelAllLeftChatParticipantReply")
	proto.RegisterType((*ResetChannelParticipantReq)(nil), "activeuserserver.ResetChannelParticipantReq")
	proto.RegisterType((*ResetChannelParticipantReply)(nil), "activeuserserver.ResetChannelParticipantReply")
	proto.RegisterType((*UserNameInfo)(nil), "activeuserserver.UserNameInfo")
	proto.RegisterType((*LoadGroupUserNameInfoReq)(nil), "activeuserserver.LoadGroupUserNameInfoReq")
	proto.RegisterType((*LoadGroupUserNameInfoRsp)(nil), "activeuserserver.LoadGroupUserNameInfoRsp")
	proto.RegisterType((*GetChsOnlineUserCountReq)(nil), "activeuserserver.GetChsOnlineUserCountReq")
	proto.RegisterType((*ChanOnlineUser)(nil), "activeuserserver.ChanOnlineUser")
	proto.RegisterType((*GetChsOnlineUserCountRsp)(nil), "activeuserserver.GetChsOnlineUserCountRsp")
	proto.RegisterEnum("activeuserserver.ActiveErrorCode", ActiveErrorCode_name, ActiveErrorCode_value)
	proto.RegisterEnum("activeuserserver.PeerType", PeerType_name, PeerType_value)
	proto.RegisterEnum("activeuserserver.ChannelSearchType", ChannelSearchType_name, ChannelSearchType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ActiveUserService service

type ActiveUserServiceClient interface {
	// 将用户设置为不活跃状态
	LogoutUser(ctx context.Context, in *LogoutUserUserReq, opts ...grpc.CallOption) (*LogoutUserUserReply, error)
	// 获取超级群活跃用户ID
	GetActiveUsers(ctx context.Context, in *GetActiveUsersReq, opts ...grpc.CallOption) (*GetActiveUsersReply, error)
	// 获取超级群所有用户信息
	GetAllChannelUsers(ctx context.Context, in *GetAllChannelUsersReq, opts ...grpc.CallOption) (*GetAllChannelUsersReply, error)
	// 新增修改超级群用户信息
	SetChannelParticipant(ctx context.Context, in *SetChannelParticipantReq, opts ...grpc.CallOption) (*SetChannelParticipantReply, error)
	// 获取一个超级群用户信息
	GetChannelParticipant(ctx context.Context, in *GetChannelParticipantReq, opts ...grpc.CallOption) (*GetChannelParticipantReply, error)
	// 删除一个超级群用户信息
	DelChannelParticipant(ctx context.Context, in *DelChannelParticipantReq, opts ...grpc.CallOption) (*DelChannelParticipantReply, error)
	// 删除一个群内的所有用户
	DelAllChannelParticipant(ctx context.Context, in *DelAllChannelParticipantReq, opts ...grpc.CallOption) (*DelAllChannelParticipantReply, error)
	// 重置一个超级群所有信息
	ResetChannel(ctx context.Context, in *ResetChannelParticipantReq, opts ...grpc.CallOption) (*ResetChannelParticipantReply, error)
	// 更新用户Firstname Lastname
	UpdateFirstnameLastname(ctx context.Context, in *UpdateFirstnameLastnameReq, opts ...grpc.CallOption) (*UpdateFirstnameLastnameReply, error)
	// 更新Username信息
	UpdateUsername(ctx context.Context, in *UpdateUsernameReq, opts ...grpc.CallOption) (*UpdateUsernameReply, error)
	// 完全匹配username
	GetUsername(ctx context.Context, in *GetUsernameReq, opts ...grpc.CallOption) (*GetUsernameReply, error)
	// 模糊搜索username 和 自己所在的群
	SearchUsername(ctx context.Context, in *SearchUsernameReq, opts ...grpc.CallOption) (*SearchUsernameReply, error)
	// 更新邀请链接
	UpdateInviteLink(ctx context.Context, in *UpdateInviteLinkReq, opts ...grpc.CallOption) (*UpdateInviteLinkReply, error)
	// 完全匹配邀请链接
	GetInviteLink(ctx context.Context, in *GetInviteLinkReq, opts ...grpc.CallOption) (*GetInviteLinkReply, error)
	// 激活用户
	ActivateUser(ctx context.Context, in *ActivateUserReq, opts ...grpc.CallOption) (*ActivateUserReply, error)
	// 获取两个用户相同的群数量
	GetTwoUserChatsCount(ctx context.Context, in *GetTwoUserChatsCountReq, opts ...grpc.CallOption) (*GetTwoUserChatsCountReply, error)
	// 获取两个用户相同的群
	GetTwoUserChats(ctx context.Context, in *GetTwoUserChatsReq, opts ...grpc.CallOption) (*GetTwoUserChatsReply, error)
	// 根据群名称搜索自己所在的群
	SearchSelfGroup(ctx context.Context, in *SearchSelfGroupReq, opts ...grpc.CallOption) (*SearchSelfGroupReply, error)
	// 判断传入的哪些用户在线
	CheckOnlineUsers(ctx context.Context, in *CheckOnlineUsersReq, opts ...grpc.CallOption) (*CheckOnlineUsersReply, error)
	// 根据传入ID搜索用户
	SearchUsersByStr(ctx context.Context, in *SearchUsersByStrReq, opts ...grpc.CallOption) (*SearchUsersByStrReply, error)
	// 搜索被提出群成员
	SearchKickedParticipant(ctx context.Context, in *SearchKickedParticipantReq, opts ...grpc.CallOption) (*SearchKickedParticipantReply, error)
	// 搜索群成员
	SearchChannelParticipant(ctx context.Context, in *SearchChannelParticipantReq, opts ...grpc.CallOption) (*SearchChannelParticipantReply, error)
	// 分页获取被踢用户
	GetChannelKickedByLimit(ctx context.Context, in *GetChannelKickedByLimitReq, opts ...grpc.CallOption) (*GetChannelKickedByLimitReply, error)
	// 获取单个被踢用户
	GetChannelKeckedLeft(ctx context.Context, in *GetChannelKeckedLeftReq, opts ...grpc.CallOption) (*GetChannelKeckedLeftReply, error)
	// 设置被踢用户信息到缓存 以存在的直接替换
	AddLeftParticipant(ctx context.Context, in *AddLeftParticipantReq, opts ...grpc.CallOption) (*AddLeftParticipantReply, error)
	// 删除缓存中的被踢用户信息
	DelLeftParticipant(ctx context.Context, in *DelLeftParticipantReq, opts ...grpc.CallOption) (*DelLeftParticipantReply, error)
	// 删除缓存中的群Id对应的所有被踢用户信息
	DelAllLeftChatParticipant(ctx context.Context, in *DelAllLeftChatParticipantReq, opts ...grpc.CallOption) (*DelAllLeftChatParticipantReply, error)
	// add by qingsong at 2020.03.03 for 获取群组所有成员的昵称信息
	LoadGroupUserNameInfo(ctx context.Context, in *LoadGroupUserNameInfoReq, opts ...grpc.CallOption) (*LoadGroupUserNameInfoRsp, error)
	// add by qingsong at 2020.06.17 for load group online information.
	GetChsOnlineUserCount(ctx context.Context, in *GetChsOnlineUserCountReq, opts ...grpc.CallOption) (*GetChsOnlineUserCountRsp, error)
}

type activeUserServiceClient struct {
	cc *grpc.ClientConn
}

func NewActiveUserServiceClient(cc *grpc.ClientConn) ActiveUserServiceClient {
	return &activeUserServiceClient{cc}
}

func (c *activeUserServiceClient) LogoutUser(ctx context.Context, in *LogoutUserUserReq, opts ...grpc.CallOption) (*LogoutUserUserReply, error) {
	out := new(LogoutUserUserReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/LogoutUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) GetActiveUsers(ctx context.Context, in *GetActiveUsersReq, opts ...grpc.CallOption) (*GetActiveUsersReply, error) {
	out := new(GetActiveUsersReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/GetActiveUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) GetAllChannelUsers(ctx context.Context, in *GetAllChannelUsersReq, opts ...grpc.CallOption) (*GetAllChannelUsersReply, error) {
	out := new(GetAllChannelUsersReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/GetAllChannelUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) SetChannelParticipant(ctx context.Context, in *SetChannelParticipantReq, opts ...grpc.CallOption) (*SetChannelParticipantReply, error) {
	out := new(SetChannelParticipantReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/SetChannelParticipant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) GetChannelParticipant(ctx context.Context, in *GetChannelParticipantReq, opts ...grpc.CallOption) (*GetChannelParticipantReply, error) {
	out := new(GetChannelParticipantReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/GetChannelParticipant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) DelChannelParticipant(ctx context.Context, in *DelChannelParticipantReq, opts ...grpc.CallOption) (*DelChannelParticipantReply, error) {
	out := new(DelChannelParticipantReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/DelChannelParticipant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) DelAllChannelParticipant(ctx context.Context, in *DelAllChannelParticipantReq, opts ...grpc.CallOption) (*DelAllChannelParticipantReply, error) {
	out := new(DelAllChannelParticipantReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/DelAllChannelParticipant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) ResetChannel(ctx context.Context, in *ResetChannelParticipantReq, opts ...grpc.CallOption) (*ResetChannelParticipantReply, error) {
	out := new(ResetChannelParticipantReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/ResetChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) UpdateFirstnameLastname(ctx context.Context, in *UpdateFirstnameLastnameReq, opts ...grpc.CallOption) (*UpdateFirstnameLastnameReply, error) {
	out := new(UpdateFirstnameLastnameReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/UpdateFirstnameLastname", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) UpdateUsername(ctx context.Context, in *UpdateUsernameReq, opts ...grpc.CallOption) (*UpdateUsernameReply, error) {
	out := new(UpdateUsernameReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/UpdateUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) GetUsername(ctx context.Context, in *GetUsernameReq, opts ...grpc.CallOption) (*GetUsernameReply, error) {
	out := new(GetUsernameReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/GetUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) SearchUsername(ctx context.Context, in *SearchUsernameReq, opts ...grpc.CallOption) (*SearchUsernameReply, error) {
	out := new(SearchUsernameReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/SearchUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) UpdateInviteLink(ctx context.Context, in *UpdateInviteLinkReq, opts ...grpc.CallOption) (*UpdateInviteLinkReply, error) {
	out := new(UpdateInviteLinkReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/UpdateInviteLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) GetInviteLink(ctx context.Context, in *GetInviteLinkReq, opts ...grpc.CallOption) (*GetInviteLinkReply, error) {
	out := new(GetInviteLinkReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/GetInviteLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) ActivateUser(ctx context.Context, in *ActivateUserReq, opts ...grpc.CallOption) (*ActivateUserReply, error) {
	out := new(ActivateUserReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/ActivateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) GetTwoUserChatsCount(ctx context.Context, in *GetTwoUserChatsCountReq, opts ...grpc.CallOption) (*GetTwoUserChatsCountReply, error) {
	out := new(GetTwoUserChatsCountReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/GetTwoUserChatsCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) GetTwoUserChats(ctx context.Context, in *GetTwoUserChatsReq, opts ...grpc.CallOption) (*GetTwoUserChatsReply, error) {
	out := new(GetTwoUserChatsReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/GetTwoUserChats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) SearchSelfGroup(ctx context.Context, in *SearchSelfGroupReq, opts ...grpc.CallOption) (*SearchSelfGroupReply, error) {
	out := new(SearchSelfGroupReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/SearchSelfGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) CheckOnlineUsers(ctx context.Context, in *CheckOnlineUsersReq, opts ...grpc.CallOption) (*CheckOnlineUsersReply, error) {
	out := new(CheckOnlineUsersReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/CheckOnlineUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) SearchUsersByStr(ctx context.Context, in *SearchUsersByStrReq, opts ...grpc.CallOption) (*SearchUsersByStrReply, error) {
	out := new(SearchUsersByStrReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/SearchUsersByStr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) SearchKickedParticipant(ctx context.Context, in *SearchKickedParticipantReq, opts ...grpc.CallOption) (*SearchKickedParticipantReply, error) {
	out := new(SearchKickedParticipantReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/SearchKickedParticipant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) SearchChannelParticipant(ctx context.Context, in *SearchChannelParticipantReq, opts ...grpc.CallOption) (*SearchChannelParticipantReply, error) {
	out := new(SearchChannelParticipantReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/SearchChannelParticipant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) GetChannelKickedByLimit(ctx context.Context, in *GetChannelKickedByLimitReq, opts ...grpc.CallOption) (*GetChannelKickedByLimitReply, error) {
	out := new(GetChannelKickedByLimitReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/GetChannelKickedByLimit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) GetChannelKeckedLeft(ctx context.Context, in *GetChannelKeckedLeftReq, opts ...grpc.CallOption) (*GetChannelKeckedLeftReply, error) {
	out := new(GetChannelKeckedLeftReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/GetChannelKeckedLeft", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) AddLeftParticipant(ctx context.Context, in *AddLeftParticipantReq, opts ...grpc.CallOption) (*AddLeftParticipantReply, error) {
	out := new(AddLeftParticipantReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/AddLeftParticipant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) DelLeftParticipant(ctx context.Context, in *DelLeftParticipantReq, opts ...grpc.CallOption) (*DelLeftParticipantReply, error) {
	out := new(DelLeftParticipantReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/DelLeftParticipant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) DelAllLeftChatParticipant(ctx context.Context, in *DelAllLeftChatParticipantReq, opts ...grpc.CallOption) (*DelAllLeftChatParticipantReply, error) {
	out := new(DelAllLeftChatParticipantReply)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/DelAllLeftChatParticipant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) LoadGroupUserNameInfo(ctx context.Context, in *LoadGroupUserNameInfoReq, opts ...grpc.CallOption) (*LoadGroupUserNameInfoRsp, error) {
	out := new(LoadGroupUserNameInfoRsp)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/LoadGroupUserNameInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeUserServiceClient) GetChsOnlineUserCount(ctx context.Context, in *GetChsOnlineUserCountReq, opts ...grpc.CallOption) (*GetChsOnlineUserCountRsp, error) {
	out := new(GetChsOnlineUserCountRsp)
	err := grpc.Invoke(ctx, "/activeuserserver.ActiveUserService/GetChsOnlineUserCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ActiveUserService service

type ActiveUserServiceServer interface {
	// 将用户设置为不活跃状态
	LogoutUser(context.Context, *LogoutUserUserReq) (*LogoutUserUserReply, error)
	// 获取超级群活跃用户ID
	GetActiveUsers(context.Context, *GetActiveUsersReq) (*GetActiveUsersReply, error)
	// 获取超级群所有用户信息
	GetAllChannelUsers(context.Context, *GetAllChannelUsersReq) (*GetAllChannelUsersReply, error)
	// 新增修改超级群用户信息
	SetChannelParticipant(context.Context, *SetChannelParticipantReq) (*SetChannelParticipantReply, error)
	// 获取一个超级群用户信息
	GetChannelParticipant(context.Context, *GetChannelParticipantReq) (*GetChannelParticipantReply, error)
	// 删除一个超级群用户信息
	DelChannelParticipant(context.Context, *DelChannelParticipantReq) (*DelChannelParticipantReply, error)
	// 删除一个群内的所有用户
	DelAllChannelParticipant(context.Context, *DelAllChannelParticipantReq) (*DelAllChannelParticipantReply, error)
	// 重置一个超级群所有信息
	ResetChannel(context.Context, *ResetChannelParticipantReq) (*ResetChannelParticipantReply, error)
	// 更新用户Firstname Lastname
	UpdateFirstnameLastname(context.Context, *UpdateFirstnameLastnameReq) (*UpdateFirstnameLastnameReply, error)
	// 更新Username信息
	UpdateUsername(context.Context, *UpdateUsernameReq) (*UpdateUsernameReply, error)
	// 完全匹配username
	GetUsername(context.Context, *GetUsernameReq) (*GetUsernameReply, error)
	// 模糊搜索username 和 自己所在的群
	SearchUsername(context.Context, *SearchUsernameReq) (*SearchUsernameReply, error)
	// 更新邀请链接
	UpdateInviteLink(context.Context, *UpdateInviteLinkReq) (*UpdateInviteLinkReply, error)
	// 完全匹配邀请链接
	GetInviteLink(context.Context, *GetInviteLinkReq) (*GetInviteLinkReply, error)
	// 激活用户
	ActivateUser(context.Context, *ActivateUserReq) (*ActivateUserReply, error)
	// 获取两个用户相同的群数量
	GetTwoUserChatsCount(context.Context, *GetTwoUserChatsCountReq) (*GetTwoUserChatsCountReply, error)
	// 获取两个用户相同的群
	GetTwoUserChats(context.Context, *GetTwoUserChatsReq) (*GetTwoUserChatsReply, error)
	// 根据群名称搜索自己所在的群
	SearchSelfGroup(context.Context, *SearchSelfGroupReq) (*SearchSelfGroupReply, error)
	// 判断传入的哪些用户在线
	CheckOnlineUsers(context.Context, *CheckOnlineUsersReq) (*CheckOnlineUsersReply, error)
	// 根据传入ID搜索用户
	SearchUsersByStr(context.Context, *SearchUsersByStrReq) (*SearchUsersByStrReply, error)
	// 搜索被提出群成员
	SearchKickedParticipant(context.Context, *SearchKickedParticipantReq) (*SearchKickedParticipantReply, error)
	// 搜索群成员
	SearchChannelParticipant(context.Context, *SearchChannelParticipantReq) (*SearchChannelParticipantReply, error)
	// 分页获取被踢用户
	GetChannelKickedByLimit(context.Context, *GetChannelKickedByLimitReq) (*GetChannelKickedByLimitReply, error)
	// 获取单个被踢用户
	GetChannelKeckedLeft(context.Context, *GetChannelKeckedLeftReq) (*GetChannelKeckedLeftReply, error)
	// 设置被踢用户信息到缓存 以存在的直接替换
	AddLeftParticipant(context.Context, *AddLeftParticipantReq) (*AddLeftParticipantReply, error)
	// 删除缓存中的被踢用户信息
	DelLeftParticipant(context.Context, *DelLeftParticipantReq) (*DelLeftParticipantReply, error)
	// 删除缓存中的群Id对应的所有被踢用户信息
	DelAllLeftChatParticipant(context.Context, *DelAllLeftChatParticipantReq) (*DelAllLeftChatParticipantReply, error)
	// add by qingsong at 2020.03.03 for 获取群组所有成员的昵称信息
	LoadGroupUserNameInfo(context.Context, *LoadGroupUserNameInfoReq) (*LoadGroupUserNameInfoRsp, error)
	// add by qingsong at 2020.06.17 for load group online information.
	GetChsOnlineUserCount(context.Context, *GetChsOnlineUserCountReq) (*GetChsOnlineUserCountRsp, error)
}

func RegisterActiveUserServiceServer(s *grpc.Server, srv ActiveUserServiceServer) {
	s.RegisterService(&_ActiveUserService_serviceDesc, srv)
}

func _ActiveUserService_LogoutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutUserUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).LogoutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/LogoutUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).LogoutUser(ctx, req.(*LogoutUserUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_GetActiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).GetActiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/GetActiveUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).GetActiveUsers(ctx, req.(*GetActiveUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_GetAllChannelUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllChannelUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).GetAllChannelUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/GetAllChannelUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).GetAllChannelUsers(ctx, req.(*GetAllChannelUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_SetChannelParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChannelParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).SetChannelParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/SetChannelParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).SetChannelParticipant(ctx, req.(*SetChannelParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_GetChannelParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).GetChannelParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/GetChannelParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).GetChannelParticipant(ctx, req.(*GetChannelParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_DelChannelParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelChannelParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).DelChannelParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/DelChannelParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).DelChannelParticipant(ctx, req.(*DelChannelParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_DelAllChannelParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAllChannelParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).DelAllChannelParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/DelAllChannelParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).DelAllChannelParticipant(ctx, req.(*DelAllChannelParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_ResetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetChannelParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).ResetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/ResetChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).ResetChannel(ctx, req.(*ResetChannelParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_UpdateFirstnameLastname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFirstnameLastnameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).UpdateFirstnameLastname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/UpdateFirstnameLastname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).UpdateFirstnameLastname(ctx, req.(*UpdateFirstnameLastnameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_UpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).UpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/UpdateUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).UpdateUsername(ctx, req.(*UpdateUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_GetUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).GetUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/GetUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).GetUsername(ctx, req.(*GetUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_SearchUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).SearchUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/SearchUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).SearchUsername(ctx, req.(*SearchUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_UpdateInviteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInviteLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).UpdateInviteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/UpdateInviteLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).UpdateInviteLink(ctx, req.(*UpdateInviteLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_GetInviteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInviteLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).GetInviteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/GetInviteLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).GetInviteLink(ctx, req.(*GetInviteLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_ActivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).ActivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/ActivateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).ActivateUser(ctx, req.(*ActivateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_GetTwoUserChatsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTwoUserChatsCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).GetTwoUserChatsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/GetTwoUserChatsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).GetTwoUserChatsCount(ctx, req.(*GetTwoUserChatsCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_GetTwoUserChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTwoUserChatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).GetTwoUserChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/GetTwoUserChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).GetTwoUserChats(ctx, req.(*GetTwoUserChatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_SearchSelfGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSelfGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).SearchSelfGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/SearchSelfGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).SearchSelfGroup(ctx, req.(*SearchSelfGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_CheckOnlineUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOnlineUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).CheckOnlineUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/CheckOnlineUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).CheckOnlineUsers(ctx, req.(*CheckOnlineUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_SearchUsersByStr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersByStrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).SearchUsersByStr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/SearchUsersByStr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).SearchUsersByStr(ctx, req.(*SearchUsersByStrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_SearchKickedParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchKickedParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).SearchKickedParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/SearchKickedParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).SearchKickedParticipant(ctx, req.(*SearchKickedParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_SearchChannelParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchChannelParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).SearchChannelParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/SearchChannelParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).SearchChannelParticipant(ctx, req.(*SearchChannelParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_GetChannelKickedByLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelKickedByLimitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).GetChannelKickedByLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/GetChannelKickedByLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).GetChannelKickedByLimit(ctx, req.(*GetChannelKickedByLimitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_GetChannelKeckedLeft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelKeckedLeftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).GetChannelKeckedLeft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/GetChannelKeckedLeft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).GetChannelKeckedLeft(ctx, req.(*GetChannelKeckedLeftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_AddLeftParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLeftParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).AddLeftParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/AddLeftParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).AddLeftParticipant(ctx, req.(*AddLeftParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_DelLeftParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelLeftParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).DelLeftParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/DelLeftParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).DelLeftParticipant(ctx, req.(*DelLeftParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_DelAllLeftChatParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAllLeftChatParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).DelAllLeftChatParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/DelAllLeftChatParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).DelAllLeftChatParticipant(ctx, req.(*DelAllLeftChatParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_LoadGroupUserNameInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadGroupUserNameInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).LoadGroupUserNameInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/LoadGroupUserNameInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).LoadGroupUserNameInfo(ctx, req.(*LoadGroupUserNameInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveUserService_GetChsOnlineUserCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChsOnlineUserCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServiceServer).GetChsOnlineUserCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activeuserserver.ActiveUserService/GetChsOnlineUserCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServiceServer).GetChsOnlineUserCount(ctx, req.(*GetChsOnlineUserCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ActiveUserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "activeuserserver.ActiveUserService",
	HandlerType: (*ActiveUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogoutUser",
			Handler:    _ActiveUserService_LogoutUser_Handler,
		},
		{
			MethodName: "GetActiveUsers",
			Handler:    _ActiveUserService_GetActiveUsers_Handler,
		},
		{
			MethodName: "GetAllChannelUsers",
			Handler:    _ActiveUserService_GetAllChannelUsers_Handler,
		},
		{
			MethodName: "SetChannelParticipant",
			Handler:    _ActiveUserService_SetChannelParticipant_Handler,
		},
		{
			MethodName: "GetChannelParticipant",
			Handler:    _ActiveUserService_GetChannelParticipant_Handler,
		},
		{
			MethodName: "DelChannelParticipant",
			Handler:    _ActiveUserService_DelChannelParticipant_Handler,
		},
		{
			MethodName: "DelAllChannelParticipant",
			Handler:    _ActiveUserService_DelAllChannelParticipant_Handler,
		},
		{
			MethodName: "ResetChannel",
			Handler:    _ActiveUserService_ResetChannel_Handler,
		},
		{
			MethodName: "UpdateFirstnameLastname",
			Handler:    _ActiveUserService_UpdateFirstnameLastname_Handler,
		},
		{
			MethodName: "UpdateUsername",
			Handler:    _ActiveUserService_UpdateUsername_Handler,
		},
		{
			MethodName: "GetUsername",
			Handler:    _ActiveUserService_GetUsername_Handler,
		},
		{
			MethodName: "SearchUsername",
			Handler:    _ActiveUserService_SearchUsername_Handler,
		},
		{
			MethodName: "UpdateInviteLink",
			Handler:    _ActiveUserService_UpdateInviteLink_Handler,
		},
		{
			MethodName: "GetInviteLink",
			Handler:    _ActiveUserService_GetInviteLink_Handler,
		},
		{
			MethodName: "ActivateUser",
			Handler:    _ActiveUserService_ActivateUser_Handler,
		},
		{
			MethodName: "GetTwoUserChatsCount",
			Handler:    _ActiveUserService_GetTwoUserChatsCount_Handler,
		},
		{
			MethodName: "GetTwoUserChats",
			Handler:    _ActiveUserService_GetTwoUserChats_Handler,
		},
		{
			MethodName: "SearchSelfGroup",
			Handler:    _ActiveUserService_SearchSelfGroup_Handler,
		},
		{
			MethodName: "CheckOnlineUsers",
			Handler:    _ActiveUserService_CheckOnlineUsers_Handler,
		},
		{
			MethodName: "SearchUsersByStr",
			Handler:    _ActiveUserService_SearchUsersByStr_Handler,
		},
		{
			MethodName: "SearchKickedParticipant",
			Handler:    _ActiveUserService_SearchKickedParticipant_Handler,
		},
		{
			MethodName: "SearchChannelParticipant",
			Handler:    _ActiveUserService_SearchChannelParticipant_Handler,
		},
		{
			MethodName: "GetChannelKickedByLimit",
			Handler:    _ActiveUserService_GetChannelKickedByLimit_Handler,
		},
		{
			MethodName: "GetChannelKeckedLeft",
			Handler:    _ActiveUserService_GetChannelKeckedLeft_Handler,
		},
		{
			MethodName: "AddLeftParticipant",
			Handler:    _ActiveUserService_AddLeftParticipant_Handler,
		},
		{
			MethodName: "DelLeftParticipant",
			Handler:    _ActiveUserService_DelLeftParticipant_Handler,
		},
		{
			MethodName: "DelAllLeftChatParticipant",
			Handler:    _ActiveUserService_DelAllLeftChatParticipant_Handler,
		},
		{
			MethodName: "LoadGroupUserNameInfo",
			Handler:    _ActiveUserService_LoadGroupUserNameInfo_Handler,
		},
		{
			MethodName: "GetChsOnlineUserCount",
			Handler:    _ActiveUserService_GetChsOnlineUserCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/activeuserserver/activeuserserver.proto",
}

func (m *UserNameBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserNameBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Id))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *InviteLinkBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteLinkBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InviteLink) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.InviteLink)))
		i += copy(dAtA[i:], m.InviteLink)
	}
	if m.GroupId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.GroupId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *ChatChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Encry {
		dAtA[i] = 0x18
		i++
		if m.Encry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BroadcastOrMegagroup {
		dAtA[i] = 0x20
		i++
		if m.BroadcastOrMegagroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Verified {
		dAtA[i] = 0x28
		i++
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Restricted {
		dAtA[i] = 0x30
		i++
		if m.Restricted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Democracy {
		dAtA[i] = 0x38
		i++
		if m.Democracy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Signatures {
		dAtA[i] = 0x40
		i++
		if m.Signatures {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Min {
		dAtA[i] = 0x48
		i++
		if m.Min {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Date != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Date))
	}
	if m.Version != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Version))
	}
	if len(m.RestrictionReason) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.RestrictionReason)))
		i += copy(dAtA[i:], m.RestrictionReason)
	}
	if m.ParticipantsCount != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ParticipantsCount))
	}
	if m.AdminsCount != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.AdminsCount))
	}
	if m.KickedCount != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.KickedCount))
	}
	if m.BannedCount != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.BannedCount))
	}
	if len(m.ExportedInviteLink) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.ExportedInviteLink)))
		i += copy(dAtA[i:], m.ExportedInviteLink)
	}
	if m.BotCount != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.BotCount))
	}
	if m.MigratedFromMaxId != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.MigratedFromMaxId))
	}
	if m.MigratedFromChatId != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.MigratedFromChatId))
	}
	if m.PinnedMsgId != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.PinnedMsgId))
	}
	if m.Cluster != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Cluster))
	}
	if m.Invite_Rule != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Invite_Rule))
	}
	if m.Creator != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Creator))
	}
	if m.EveryoneQuiet {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		if m.EveryoneQuiet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PrivateChat {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		if m.PrivateChat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Id != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *ChannelParticipants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelParticipants) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserId))
	}
	if m.IsBot {
		dAtA[i] = 0x18
		i++
		if m.IsBot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InviteId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.InviteId))
	}
	if m.CanSetUsername {
		dAtA[i] = 0x28
		i++
		if m.CanSetUsername {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanViewParticipants {
		dAtA[i] = 0x30
		i++
		if m.CanViewParticipants {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsCreator {
		dAtA[i] = 0x38
		i++
		if m.IsCreator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsAdmin {
		dAtA[i] = 0x40
		i++
		if m.IsAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsBan {
		dAtA[i] = 0x48
		i++
		if m.IsBan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PromotedBy != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.PromotedBy))
	}
	if m.ChangeGroupInfo {
		dAtA[i] = 0x58
		i++
		if m.ChangeGroupInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DeleteMessages {
		dAtA[i] = 0x60
		i++
		if m.DeleteMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BanUsers {
		dAtA[i] = 0x68
		i++
		if m.BanUsers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PinMessages {
		dAtA[i] = 0x70
		i++
		if m.PinMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AddNewAdmin {
		dAtA[i] = 0x78
		i++
		if m.AddNewAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanReadMessages {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.CanReadMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendMessage {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.CanSendMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendMedia {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.CanSendMedia {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendSticker {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.CanSendSticker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendGifs {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.CanSendGifs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendGames {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		if m.CanSendGames {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendInline {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		if m.CanSendInline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanEmbedLinks {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		if m.CanEmbedLinks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendPolls {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		if m.CanSendPolls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.KickedBy != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.KickedBy))
	}
	if m.UntilDate != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UntilDate))
	}
	if m.JoinTime != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.JoinTime))
	}
	if m.PostMessages {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		if m.PostMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Edit_Messages {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		if m.Edit_Messages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InviteUsers {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		if m.InviteUsers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InviteLink {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		if m.InviteLink {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ExportInviteLink) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.ExportInviteLink)))
		i += copy(dAtA[i:], m.ExportInviteLink)
	}
	if m.Id != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Id))
	}
	if m.StartMsgid != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.StartMsgid))
	}
	return i, nil
}

func (m *ChannelKickedLeft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelKickedLeft) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserId))
	}
	if m.KickedOrLeft {
		dAtA[i] = 0x18
		i++
		if m.KickedOrLeft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.KickedBy != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.KickedBy))
	}
	if m.Date != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Date))
	}
	if m.LastDate != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.LastDate))
	}
	if m.IsBan {
		dAtA[i] = 0x38
		i++
		if m.IsBan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanReadMessages {
		dAtA[i] = 0x40
		i++
		if m.CanReadMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendMessage {
		dAtA[i] = 0x48
		i++
		if m.CanSendMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendMedia {
		dAtA[i] = 0x50
		i++
		if m.CanSendMedia {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendInline {
		dAtA[i] = 0x58
		i++
		if m.CanSendInline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendGames {
		dAtA[i] = 0x60
		i++
		if m.CanSendGames {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendGifs {
		dAtA[i] = 0x68
		i++
		if m.CanSendGifs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendSticker {
		dAtA[i] = 0x70
		i++
		if m.CanSendSticker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanEmbedLinks {
		dAtA[i] = 0x78
		i++
		if m.CanEmbedLinks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanSendPolls {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.CanSendPolls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Id != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *ActivateUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivateUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *ActivateUserReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivateUserReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *LogoutUserUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogoutUserUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *LogoutUserUserReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogoutUserUserReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetActiveUsersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveUsersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ChannelId))
	}
	return i, nil
}

func (m *GetActiveUsersReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveUsersReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ActiveIds) > 0 {
		dAtA2 := make([]byte, len(m.ActiveIds)*10)
		var j1 int
		for _, num1 := range m.ActiveIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetAllChannelUsersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllChannelUsersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ChannelId))
	}
	return i, nil
}

func (m *GetAllChannelUsersReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllChannelUsersReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AllIds) > 0 {
		dAtA4 := make([]byte, len(m.AllIds)*10)
		var j3 int
		for _, num1 := range m.AllIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.ActiveIds) > 0 {
		dAtA6 := make([]byte, len(m.ActiveIds)*10)
		var j5 int
		for _, num1 := range m.ActiveIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if len(m.Infos) > 0 {
		for _, msg := range m.Infos {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintActiveuserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Admins) > 0 {
		for _, msg := range m.Admins {
			dAtA[i] = 0x22
			i++
			i = encodeVarintActiveuserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Banners) > 0 {
		for _, msg := range m.Banners {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintActiveuserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Bots) > 0 {
		for _, msg := range m.Bots {
			dAtA[i] = 0x32
			i++
			i = encodeVarintActiveuserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *SetChannelParticipantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetChannelParticipantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserInfo.Size()))
		n7, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *SetChannelParticipantReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetChannelParticipantReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetChannelParticipantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelParticipantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetChannelParticipantReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelParticipantReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserInfo.Size()))
		n8, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *DelChannelParticipantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelChannelParticipantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *DelChannelParticipantReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelChannelParticipantReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *DelAllChannelParticipantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelAllChannelParticipantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ChannelId))
	}
	return i, nil
}

func (m *DelAllChannelParticipantReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelAllChannelParticipantReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *UpdateFirstnameLastnameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateFirstnameLastnameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Firstname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.Firstname)))
		i += copy(dAtA[i:], m.Firstname)
	}
	if len(m.Lastname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.Lastname)))
		i += copy(dAtA[i:], m.Lastname)
	}
	return i, nil
}

func (m *UpdateFirstnameLastnameReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateFirstnameLastnameReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *UpdateUsernameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUsernameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.NewInfo.Size()))
		n9, err := m.NewInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.OldUsername) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.OldUsername)))
		i += copy(dAtA[i:], m.OldUsername)
	}
	return i, nil
}

func (m *UpdateUsernameReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUsernameReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetUsernameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsernameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	return i, nil
}

func (m *GetUsernameReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsernameReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Info.Size()))
		n10, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *SearchUsernameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchUsernameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SearchStr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.SearchStr)))
		i += copy(dAtA[i:], m.SearchStr)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *SearchUsernameReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchUsernameReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintActiveuserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *UpdateInviteLinkReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateInviteLinkReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.NewInfo.Size()))
		n11, err := m.NewInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.OldInviteLink) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.OldInviteLink)))
		i += copy(dAtA[i:], m.OldInviteLink)
	}
	return i, nil
}

func (m *UpdateInviteLinkReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateInviteLinkReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetInviteLinkReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInviteLinkReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InviteLink) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.InviteLink)))
		i += copy(dAtA[i:], m.InviteLink)
	}
	return i, nil
}

func (m *GetInviteLinkReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInviteLinkReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Info.Size()))
		n12, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *SearchSelfGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchSelfGroupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *SearchSelfGroupReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchSelfGroupReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChatIds) > 0 {
		dAtA14 := make([]byte, len(m.ChatIds)*10)
		var j13 int
		for _, num1 := range m.ChatIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(j13))
		i += copy(dAtA[i:], dAtA14[:j13])
	}
	if len(m.ChannelIds) > 0 {
		dAtA16 := make([]byte, len(m.ChannelIds)*10)
		var j15 int
		for _, num1 := range m.ChannelIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(j15))
		i += copy(dAtA[i:], dAtA16[:j15])
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetTwoUserChatsCountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTwoUserChatsCountReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserOne != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserOne))
	}
	if m.UserTwo != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserTwo))
	}
	return i, nil
}

func (m *GetTwoUserChatsCountReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTwoUserChatsCountReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Count))
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetTwoUserChatsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTwoUserChatsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserOne != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserOne))
	}
	if m.UserTwo != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserTwo))
	}
	return i, nil
}

func (m *GetTwoUserChatsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTwoUserChatsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChatIds) > 0 {
		dAtA18 := make([]byte, len(m.ChatIds)*10)
		var j17 int
		for _, num1 := range m.ChatIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(j17))
		i += copy(dAtA[i:], dAtA18[:j17])
	}
	if len(m.ChannelIds) > 0 {
		dAtA20 := make([]byte, len(m.ChannelIds)*10)
		var j19 int
		for _, num1 := range m.ChannelIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(j19))
		i += copy(dAtA[i:], dAtA20[:j19])
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *SearchChannelParticipantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchChannelParticipantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.SearchStr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.SearchStr)))
		i += copy(dAtA[i:], m.SearchStr)
	}
	if m.SearchType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.SearchType))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *SearchChannelParticipantReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchChannelParticipantReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintActiveuserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *SearchKickedParticipantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchKickedParticipantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.SearchStr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.SearchStr)))
		i += copy(dAtA[i:], m.SearchStr)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *SearchKickedParticipantReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchKickedParticipantReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintActiveuserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetChannelKickedByLimitReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelKickedByLimitReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Offset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *GetChannelKickedByLimitReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelKickedByLimitReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintActiveuserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetChannelKeckedLeftReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelKeckedLeftReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetChannelKeckedLeftReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelKeckedLeftReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserInfo.Size()))
		n21, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *CheckOnlineUsersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckOnlineUsersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		dAtA23 := make([]byte, len(m.UserIds)*10)
		var j22 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(j22))
		i += copy(dAtA[i:], dAtA23[:j22])
	}
	return i, nil
}

func (m *CheckOnlineUsersReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckOnlineUsersReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		dAtA25 := make([]byte, len(m.UserIds)*10)
		var j24 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(j24))
		i += copy(dAtA[i:], dAtA25[:j24])
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *SearchUsersByStrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchUsersByStrReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		dAtA27 := make([]byte, len(m.UserIds)*10)
		var j26 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA27[j26] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j26++
			}
			dAtA27[j26] = uint8(num)
			j26++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(j26))
		i += copy(dAtA[i:], dAtA27[:j26])
	}
	if len(m.Str) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.Str)))
		i += copy(dAtA[i:], m.Str)
	}
	return i, nil
}

func (m *SearchUsersByStrReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchUsersByStrReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		dAtA29 := make([]byte, len(m.UserIds)*10)
		var j28 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA29[j28] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j28++
			}
			dAtA29[j28] = uint8(num)
			j28++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(j28))
		i += copy(dAtA[i:], dAtA29[:j28])
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *AddLeftParticipantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddLeftParticipantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserInfo.Size()))
		n30, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}

func (m *AddLeftParticipantReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddLeftParticipantReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *DelLeftParticipantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelLeftParticipantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *DelLeftParticipantReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelLeftParticipantReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *DelAllLeftChatParticipantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelAllLeftChatParticipantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ChannelId))
	}
	return i, nil
}

func (m *DelAllLeftChatParticipantReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelAllLeftChatParticipantReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ResetChannelParticipantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetChannelParticipantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ChannelId))
	}
	return i, nil
}

func (m *ResetChannelParticipantReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetChannelParticipantReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *UserNameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserNameInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.UserId))
	}
	if m.IsKick {
		dAtA[i] = 0x10
		i++
		if m.IsKick {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	return i, nil
}

func (m *LoadGroupUserNameInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadGroupUserNameInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.GroupId))
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *LoadGroupUserNameInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadGroupUserNameInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.GroupId))
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.Version))
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintActiveuserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetChsOnlineUserCountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChsOnlineUserCountReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA32 := make([]byte, len(m.Ids)*10)
		var j31 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(j31))
		i += copy(dAtA[i:], dAtA32[:j31])
	}
	return i, nil
}

func (m *ChanOnlineUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChanOnlineUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.MemberCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.MemberCount))
	}
	if m.OnlineCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActiveuserserver(dAtA, i, uint64(m.OnlineCount))
	}
	return i, nil
}

func (m *GetChsOnlineUserCountRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChsOnlineUserCountRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ReplyData) > 0 {
		for _, msg := range m.ReplyData {
			dAtA[i] = 0xa
			i++
			i = encodeVarintActiveuserserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintActiveuserserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserNameBase) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovActiveuserserver(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovActiveuserserver(uint64(m.Type))
	}
	return n
}

func (m *InviteLinkBase) Size() (n int) {
	var l int
	_ = l
	l = len(m.InviteLink)
	if l > 0 {
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	if m.GroupId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.GroupId))
	}
	if m.UserId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.UserId))
	}
	if m.Type != 0 {
		n += 1 + sovActiveuserserver(uint64(m.Type))
	}
	return n
}

func (m *ChatChannel) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovActiveuserserver(uint64(m.AccessHash))
	}
	if m.Encry {
		n += 2
	}
	if m.BroadcastOrMegagroup {
		n += 2
	}
	if m.Verified {
		n += 2
	}
	if m.Restricted {
		n += 2
	}
	if m.Democracy {
		n += 2
	}
	if m.Signatures {
		n += 2
	}
	if m.Min {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovActiveuserserver(uint64(m.Date))
	}
	if m.Version != 0 {
		n += 1 + sovActiveuserserver(uint64(m.Version))
	}
	l = len(m.RestrictionReason)
	if l > 0 {
		n += 2 + l + sovActiveuserserver(uint64(l))
	}
	if m.ParticipantsCount != 0 {
		n += 2 + sovActiveuserserver(uint64(m.ParticipantsCount))
	}
	if m.AdminsCount != 0 {
		n += 2 + sovActiveuserserver(uint64(m.AdminsCount))
	}
	if m.KickedCount != 0 {
		n += 2 + sovActiveuserserver(uint64(m.KickedCount))
	}
	if m.BannedCount != 0 {
		n += 2 + sovActiveuserserver(uint64(m.BannedCount))
	}
	l = len(m.ExportedInviteLink)
	if l > 0 {
		n += 2 + l + sovActiveuserserver(uint64(l))
	}
	if m.BotCount != 0 {
		n += 2 + sovActiveuserserver(uint64(m.BotCount))
	}
	if m.MigratedFromMaxId != 0 {
		n += 2 + sovActiveuserserver(uint64(m.MigratedFromMaxId))
	}
	if m.MigratedFromChatId != 0 {
		n += 2 + sovActiveuserserver(uint64(m.MigratedFromChatId))
	}
	if m.PinnedMsgId != 0 {
		n += 2 + sovActiveuserserver(uint64(m.PinnedMsgId))
	}
	if m.Cluster != 0 {
		n += 2 + sovActiveuserserver(uint64(m.Cluster))
	}
	if m.Invite_Rule != 0 {
		n += 2 + sovActiveuserserver(uint64(m.Invite_Rule))
	}
	if m.Creator != 0 {
		n += 2 + sovActiveuserserver(uint64(m.Creator))
	}
	if m.EveryoneQuiet {
		n += 3
	}
	if m.PrivateChat {
		n += 3
	}
	if m.Id != 0 {
		n += 2 + sovActiveuserserver(uint64(m.Id))
	}
	return n
}

func (m *ChannelParticipants) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.UserId))
	}
	if m.IsBot {
		n += 2
	}
	if m.InviteId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.InviteId))
	}
	if m.CanSetUsername {
		n += 2
	}
	if m.CanViewParticipants {
		n += 2
	}
	if m.IsCreator {
		n += 2
	}
	if m.IsAdmin {
		n += 2
	}
	if m.IsBan {
		n += 2
	}
	if m.PromotedBy != 0 {
		n += 1 + sovActiveuserserver(uint64(m.PromotedBy))
	}
	if m.ChangeGroupInfo {
		n += 2
	}
	if m.DeleteMessages {
		n += 2
	}
	if m.BanUsers {
		n += 2
	}
	if m.PinMessages {
		n += 2
	}
	if m.AddNewAdmin {
		n += 2
	}
	if m.CanReadMessages {
		n += 3
	}
	if m.CanSendMessage {
		n += 3
	}
	if m.CanSendMedia {
		n += 3
	}
	if m.CanSendSticker {
		n += 3
	}
	if m.CanSendGifs {
		n += 3
	}
	if m.CanSendGames {
		n += 3
	}
	if m.CanSendInline {
		n += 3
	}
	if m.CanEmbedLinks {
		n += 3
	}
	if m.CanSendPolls {
		n += 3
	}
	if m.KickedBy != 0 {
		n += 2 + sovActiveuserserver(uint64(m.KickedBy))
	}
	if m.UntilDate != 0 {
		n += 2 + sovActiveuserserver(uint64(m.UntilDate))
	}
	if m.JoinTime != 0 {
		n += 2 + sovActiveuserserver(uint64(m.JoinTime))
	}
	if m.PostMessages {
		n += 3
	}
	if m.Edit_Messages {
		n += 3
	}
	if m.InviteUsers {
		n += 3
	}
	if m.InviteLink {
		n += 3
	}
	l = len(m.ExportInviteLink)
	if l > 0 {
		n += 2 + l + sovActiveuserserver(uint64(l))
	}
	if m.Id != 0 {
		n += 2 + sovActiveuserserver(uint64(m.Id))
	}
	if m.StartMsgid != 0 {
		n += 2 + sovActiveuserserver(uint64(m.StartMsgid))
	}
	return n
}

func (m *ChannelKickedLeft) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.UserId))
	}
	if m.KickedOrLeft {
		n += 2
	}
	if m.KickedBy != 0 {
		n += 1 + sovActiveuserserver(uint64(m.KickedBy))
	}
	if m.Date != 0 {
		n += 1 + sovActiveuserserver(uint64(m.Date))
	}
	if m.LastDate != 0 {
		n += 1 + sovActiveuserserver(uint64(m.LastDate))
	}
	if m.IsBan {
		n += 2
	}
	if m.CanReadMessages {
		n += 2
	}
	if m.CanSendMessage {
		n += 2
	}
	if m.CanSendMedia {
		n += 2
	}
	if m.CanSendInline {
		n += 2
	}
	if m.CanSendGames {
		n += 2
	}
	if m.CanSendGifs {
		n += 2
	}
	if m.CanSendSticker {
		n += 2
	}
	if m.CanEmbedLinks {
		n += 2
	}
	if m.CanSendPolls {
		n += 3
	}
	if m.Id != 0 {
		n += 2 + sovActiveuserserver(uint64(m.Id))
	}
	return n
}

func (m *ActivateUserReq) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.UserId))
	}
	return n
}

func (m *ActivateUserReply) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *LogoutUserUserReq) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.UserId))
	}
	return n
}

func (m *LogoutUserUserReply) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetActiveUsersReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ChannelId))
	}
	return n
}

func (m *GetActiveUsersReply) Size() (n int) {
	var l int
	_ = l
	if len(m.ActiveIds) > 0 {
		l = 0
		for _, e := range m.ActiveIds {
			l += sovActiveuserserver(uint64(e))
		}
		n += 1 + sovActiveuserserver(uint64(l)) + l
	}
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetAllChannelUsersReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ChannelId))
	}
	return n
}

func (m *GetAllChannelUsersReply) Size() (n int) {
	var l int
	_ = l
	if len(m.AllIds) > 0 {
		l = 0
		for _, e := range m.AllIds {
			l += sovActiveuserserver(uint64(e))
		}
		n += 1 + sovActiveuserserver(uint64(l)) + l
	}
	if len(m.ActiveIds) > 0 {
		l = 0
		for _, e := range m.ActiveIds {
			l += sovActiveuserserver(uint64(e))
		}
		n += 1 + sovActiveuserserver(uint64(l)) + l
	}
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovActiveuserserver(uint64(l))
		}
	}
	if len(m.Admins) > 0 {
		for _, e := range m.Admins {
			l = e.Size()
			n += 1 + l + sovActiveuserserver(uint64(l))
		}
	}
	if len(m.Banners) > 0 {
		for _, e := range m.Banners {
			l = e.Size()
			n += 1 + l + sovActiveuserserver(uint64(l))
		}
	}
	if len(m.Bots) > 0 {
		for _, e := range m.Bots {
			l = e.Size()
			n += 1 + l + sovActiveuserserver(uint64(l))
		}
	}
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *SetChannelParticipantReq) Size() (n int) {
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	return n
}

func (m *SetChannelParticipantReply) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetChannelParticipantReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.UserId))
	}
	return n
}

func (m *GetChannelParticipantReply) Size() (n int) {
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *DelChannelParticipantReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.UserId))
	}
	return n
}

func (m *DelChannelParticipantReply) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *DelAllChannelParticipantReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ChannelId))
	}
	return n
}

func (m *DelAllChannelParticipantReply) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *UpdateFirstnameLastnameReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.UserId))
	}
	l = len(m.Firstname)
	if l > 0 {
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	l = len(m.Lastname)
	if l > 0 {
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	return n
}

func (m *UpdateFirstnameLastnameReply) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *UpdateUsernameReq) Size() (n int) {
	var l int
	_ = l
	if m.NewInfo != nil {
		l = m.NewInfo.Size()
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	l = len(m.OldUsername)
	if l > 0 {
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	return n
}

func (m *UpdateUsernameReply) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetUsernameReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	return n
}

func (m *GetUsernameReply) Size() (n int) {
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *SearchUsernameReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.SearchStr)
	if l > 0 {
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.UserId))
	}
	if m.Limit != 0 {
		n += 1 + sovActiveuserserver(uint64(m.Limit))
	}
	return n
}

func (m *SearchUsernameReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovActiveuserserver(uint64(l))
		}
	}
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *UpdateInviteLinkReq) Size() (n int) {
	var l int
	_ = l
	if m.NewInfo != nil {
		l = m.NewInfo.Size()
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	l = len(m.OldInviteLink)
	if l > 0 {
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	return n
}

func (m *UpdateInviteLinkReply) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetInviteLinkReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.InviteLink)
	if l > 0 {
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	return n
}

func (m *GetInviteLinkReply) Size() (n int) {
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *SearchSelfGroupReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.UserId))
	}
	return n
}

func (m *SearchSelfGroupReply) Size() (n int) {
	var l int
	_ = l
	if len(m.ChatIds) > 0 {
		l = 0
		for _, e := range m.ChatIds {
			l += sovActiveuserserver(uint64(e))
		}
		n += 1 + sovActiveuserserver(uint64(l)) + l
	}
	if len(m.ChannelIds) > 0 {
		l = 0
		for _, e := range m.ChannelIds {
			l += sovActiveuserserver(uint64(e))
		}
		n += 1 + sovActiveuserserver(uint64(l)) + l
	}
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetTwoUserChatsCountReq) Size() (n int) {
	var l int
	_ = l
	if m.UserOne != 0 {
		n += 1 + sovActiveuserserver(uint64(m.UserOne))
	}
	if m.UserTwo != 0 {
		n += 1 + sovActiveuserserver(uint64(m.UserTwo))
	}
	return n
}

func (m *GetTwoUserChatsCountReply) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovActiveuserserver(uint64(m.Count))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetTwoUserChatsReq) Size() (n int) {
	var l int
	_ = l
	if m.UserOne != 0 {
		n += 1 + sovActiveuserserver(uint64(m.UserOne))
	}
	if m.UserTwo != 0 {
		n += 1 + sovActiveuserserver(uint64(m.UserTwo))
	}
	return n
}

func (m *GetTwoUserChatsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.ChatIds) > 0 {
		l = 0
		for _, e := range m.ChatIds {
			l += sovActiveuserserver(uint64(e))
		}
		n += 1 + sovActiveuserserver(uint64(l)) + l
	}
	if len(m.ChannelIds) > 0 {
		l = 0
		for _, e := range m.ChannelIds {
			l += sovActiveuserserver(uint64(e))
		}
		n += 1 + sovActiveuserserver(uint64(l)) + l
	}
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *SearchChannelParticipantReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ChannelId))
	}
	l = len(m.SearchStr)
	if l > 0 {
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	if m.SearchType != 0 {
		n += 1 + sovActiveuserserver(uint64(m.SearchType))
	}
	if m.Limit != 0 {
		n += 1 + sovActiveuserserver(uint64(m.Limit))
	}
	return n
}

func (m *SearchChannelParticipantReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovActiveuserserver(uint64(l))
		}
	}
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *SearchKickedParticipantReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ChannelId))
	}
	l = len(m.SearchStr)
	if l > 0 {
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovActiveuserserver(uint64(m.Limit))
	}
	return n
}

func (m *SearchKickedParticipantReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovActiveuserserver(uint64(l))
		}
	}
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetChannelKickedByLimitReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ChannelId))
	}
	if m.Offset != 0 {
		n += 1 + sovActiveuserserver(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovActiveuserserver(uint64(m.Limit))
	}
	return n
}

func (m *GetChannelKickedByLimitReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovActiveuserserver(uint64(l))
		}
	}
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetChannelKeckedLeftReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.UserId))
	}
	return n
}

func (m *GetChannelKeckedLeftReply) Size() (n int) {
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *CheckOnlineUsersReq) Size() (n int) {
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovActiveuserserver(uint64(e))
		}
		n += 1 + sovActiveuserserver(uint64(l)) + l
	}
	return n
}

func (m *CheckOnlineUsersReply) Size() (n int) {
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovActiveuserserver(uint64(e))
		}
		n += 1 + sovActiveuserserver(uint64(l)) + l
	}
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *SearchUsersByStrReq) Size() (n int) {
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovActiveuserserver(uint64(e))
		}
		n += 1 + sovActiveuserserver(uint64(l)) + l
	}
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	return n
}

func (m *SearchUsersByStrReply) Size() (n int) {
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovActiveuserserver(uint64(e))
		}
		n += 1 + sovActiveuserserver(uint64(l)) + l
	}
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *AddLeftParticipantReq) Size() (n int) {
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	return n
}

func (m *AddLeftParticipantReply) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *DelLeftParticipantReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.UserId))
	}
	return n
}

func (m *DelLeftParticipantReply) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *DelAllLeftChatParticipantReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ChannelId))
	}
	return n
}

func (m *DelAllLeftChatParticipantReply) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ResetChannelParticipantReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ChannelId))
	}
	return n
}

func (m *ResetChannelParticipantReply) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *UserNameInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.UserId))
	}
	if m.IsKick {
		n += 2
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovActiveuserserver(uint64(l))
	}
	return n
}

func (m *LoadGroupUserNameInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.GroupId))
	}
	if m.Version != 0 {
		n += 1 + sovActiveuserserver(uint64(m.Version))
	}
	return n
}

func (m *LoadGroupUserNameInfoRsp) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.GroupId))
	}
	if m.Version != 0 {
		n += 1 + sovActiveuserserver(uint64(m.Version))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovActiveuserserver(uint64(l))
		}
	}
	return n
}

func (m *GetChsOnlineUserCountReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovActiveuserserver(uint64(e))
		}
		n += 1 + sovActiveuserserver(uint64(l)) + l
	}
	return n
}

func (m *ChanOnlineUser) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovActiveuserserver(uint64(m.ChannelId))
	}
	if m.MemberCount != 0 {
		n += 1 + sovActiveuserserver(uint64(m.MemberCount))
	}
	if m.OnlineCount != 0 {
		n += 1 + sovActiveuserserver(uint64(m.OnlineCount))
	}
	return n
}

func (m *GetChsOnlineUserCountRsp) Size() (n int) {
	var l int
	_ = l
	if len(m.ReplyData) > 0 {
		for _, e := range m.ReplyData {
			l = e.Size()
			n += 1 + l + sovActiveuserserver(uint64(l))
		}
	}
	return n
}

func sovActiveuserserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozActiveuserserver(x uint64) (n int) {
	return sovActiveuserserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserNameBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserNameBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserNameBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PeerType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteLinkBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteLinkBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteLinkBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PeerType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encry = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastOrMegagroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BroadcastOrMegagroup = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restricted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Restricted = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Democracy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Democracy = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Signatures = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Min = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictionReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestrictionReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantsCount", wireType)
			}
			m.ParticipantsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminsCount", wireType)
			}
			m.AdminsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedCount", wireType)
			}
			m.KickedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedCount", wireType)
			}
			m.BannedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BannedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedInviteLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportedInviteLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotCount", wireType)
			}
			m.BotCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigratedFromMaxId", wireType)
			}
			m.MigratedFromMaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigratedFromMaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigratedFromChatId", wireType)
			}
			m.MigratedFromChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigratedFromChatId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinnedMsgId", wireType)
			}
			m.PinnedMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PinnedMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			m.Cluster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cluster |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invite_Rule", wireType)
			}
			m.Invite_Rule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Invite_Rule |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			m.Creator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Creator |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EveryoneQuiet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EveryoneQuiet = bool(v != 0)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateChat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrivateChat = bool(v != 0)
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelParticipants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelParticipants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelParticipants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBot = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteId", wireType)
			}
			m.InviteId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSetUsername", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSetUsername = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanViewParticipants", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanViewParticipants = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCreator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCreator = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdmin = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBan = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotedBy", wireType)
			}
			m.PromotedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromotedBy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeGroupInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeGroupInfo = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteMessages = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanUsers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BanUsers = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PinMessages = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddNewAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddNewAdmin = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanReadMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanReadMessages = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendMessage = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendMedia", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendMedia = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendSticker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendSticker = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendGifs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendGifs = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendGames", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendGames = bool(v != 0)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendInline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendInline = bool(v != 0)
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanEmbedLinks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanEmbedLinks = bool(v != 0)
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendPolls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendPolls = bool(v != 0)
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedBy", wireType)
			}
			m.KickedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedBy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UntilDate", wireType)
			}
			m.UntilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UntilDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinTime", wireType)
			}
			m.JoinTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PostMessages = bool(v != 0)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edit_Messages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Edit_Messages = bool(v != 0)
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteUsers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InviteUsers = bool(v != 0)
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteLink", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InviteLink = bool(v != 0)
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportInviteLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportInviteLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartMsgid", wireType)
			}
			m.StartMsgid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartMsgid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelKickedLeft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelKickedLeft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelKickedLeft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedOrLeft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KickedOrLeft = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedBy", wireType)
			}
			m.KickedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedBy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDate", wireType)
			}
			m.LastDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBan = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanReadMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanReadMessages = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendMessage = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendMedia", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendMedia = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendInline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendInline = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendGames", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendGames = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendGifs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendGifs = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendSticker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendSticker = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanEmbedLinks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanEmbedLinks = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSendPolls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSendPolls = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivateUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivateUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivateUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivateUserReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivateUserReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivateUserReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogoutUserUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutUserUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutUserUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogoutUserUserReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutUserUserReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutUserUserReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveUsersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveUsersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveUsersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveUsersReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveUsersReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveUsersReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ActiveIds = append(m.ActiveIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActiveuserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActiveuserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ActiveIds = append(m.ActiveIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllChannelUsersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllChannelUsersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllChannelUsersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllChannelUsersReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllChannelUsersReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllChannelUsersReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllIds = append(m.AllIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActiveuserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActiveuserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllIds = append(m.AllIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllIds", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ActiveIds = append(m.ActiveIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActiveuserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActiveuserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ActiveIds = append(m.ActiveIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveIds", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &ChannelParticipants{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, &ChannelParticipants{})
			if err := m.Admins[len(m.Admins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Banners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Banners = append(m.Banners, &ChannelParticipants{})
			if err := m.Banners[len(m.Banners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bots = append(m.Bots, &ChannelParticipants{})
			if err := m.Bots[len(m.Bots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetChannelParticipantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetChannelParticipantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetChannelParticipantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &ChannelParticipants{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetChannelParticipantReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetChannelParticipantReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetChannelParticipantReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelParticipantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelParticipantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelParticipantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelParticipantReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelParticipantReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelParticipantReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &ChannelParticipants{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelChannelParticipantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelChannelParticipantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelChannelParticipantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelChannelParticipantReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelChannelParticipantReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelChannelParticipantReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelAllChannelParticipantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelAllChannelParticipantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelAllChannelParticipantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelAllChannelParticipantReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelAllChannelParticipantReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelAllChannelParticipantReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFirstnameLastnameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateFirstnameLastnameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateFirstnameLastnameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Firstname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Firstname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lastname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lastname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFirstnameLastnameReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateFirstnameLastnameReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateFirstnameLastnameReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUsernameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUsernameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUsernameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewInfo == nil {
				m.NewInfo = &UserNameBase{}
			}
			if err := m.NewInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUsernameReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUsernameReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUsernameReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsernameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsernameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsernameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsernameReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsernameReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsernameReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &UserNameBase{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchUsernameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchUsernameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchUsernameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchUsernameReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchUsernameReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchUsernameReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &UserNameBase{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateInviteLinkReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateInviteLinkReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateInviteLinkReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewInfo == nil {
				m.NewInfo = &InviteLinkBase{}
			}
			if err := m.NewInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldInviteLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldInviteLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateInviteLinkReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateInviteLinkReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateInviteLinkReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInviteLinkReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInviteLinkReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInviteLinkReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInviteLinkReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInviteLinkReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInviteLinkReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &InviteLinkBase{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchSelfGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchSelfGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchSelfGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchSelfGroupReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchSelfGroupReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchSelfGroupReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChatIds = append(m.ChatIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActiveuserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActiveuserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChatIds = append(m.ChatIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatIds", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChannelIds = append(m.ChannelIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActiveuserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActiveuserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChannelIds = append(m.ChannelIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIds", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTwoUserChatsCountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTwoUserChatsCountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTwoUserChatsCountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserOne", wireType)
			}
			m.UserOne = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserOne |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTwo", wireType)
			}
			m.UserTwo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserTwo |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTwoUserChatsCountReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTwoUserChatsCountReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTwoUserChatsCountReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTwoUserChatsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTwoUserChatsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTwoUserChatsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserOne", wireType)
			}
			m.UserOne = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserOne |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTwo", wireType)
			}
			m.UserTwo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserTwo |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTwoUserChatsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTwoUserChatsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTwoUserChatsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChatIds = append(m.ChatIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActiveuserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActiveuserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChatIds = append(m.ChatIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatIds", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChannelIds = append(m.ChannelIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActiveuserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActiveuserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChannelIds = append(m.ChannelIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIds", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchChannelParticipantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchChannelParticipantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchChannelParticipantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchType", wireType)
			}
			m.SearchType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SearchType |= (ChannelSearchType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchChannelParticipantReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchChannelParticipantReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchChannelParticipantReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &ChannelParticipants{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchKickedParticipantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchKickedParticipantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchKickedParticipantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchKickedParticipantReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchKickedParticipantReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchKickedParticipantReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &ChannelParticipants{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelKickedByLimitReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelKickedByLimitReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelKickedByLimitReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelKickedByLimitReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelKickedByLimitReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelKickedByLimitReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &ChannelKickedLeft{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelKeckedLeftReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelKeckedLeftReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelKeckedLeftReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelKeckedLeftReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelKeckedLeftReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelKeckedLeftReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &ChannelKickedLeft{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckOnlineUsersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckOnlineUsersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckOnlineUsersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActiveuserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActiveuserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckOnlineUsersReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckOnlineUsersReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckOnlineUsersReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActiveuserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActiveuserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchUsersByStrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchUsersByStrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchUsersByStrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActiveuserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActiveuserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchUsersByStrReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchUsersByStrReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchUsersByStrReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActiveuserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActiveuserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddLeftParticipantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddLeftParticipantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddLeftParticipantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &ChannelKickedLeft{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddLeftParticipantReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddLeftParticipantReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddLeftParticipantReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelLeftParticipantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelLeftParticipantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelLeftParticipantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelLeftParticipantReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelLeftParticipantReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelLeftParticipantReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelAllLeftChatParticipantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelAllLeftChatParticipantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelAllLeftChatParticipantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelAllLeftChatParticipantReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelAllLeftChatParticipantReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelAllLeftChatParticipantReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetChannelParticipantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetChannelParticipantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetChannelParticipantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetChannelParticipantReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetChannelParticipantReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetChannelParticipantReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (ActiveErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserNameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserNameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserNameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsKick", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsKick = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadGroupUserNameInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadGroupUserNameInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadGroupUserNameInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadGroupUserNameInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadGroupUserNameInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadGroupUserNameInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &UserNameInfo{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChsOnlineUserCountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChsOnlineUserCountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChsOnlineUserCountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActiveuserserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActiveuserserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChanOnlineUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChanOnlineUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChanOnlineUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberCount", wireType)
			}
			m.MemberCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineCount", wireType)
			}
			m.OnlineCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChsOnlineUserCountRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChsOnlineUserCountRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChsOnlineUserCountRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyData = append(m.ReplyData, &ChanOnlineUser{})
			if err := m.ReplyData[len(m.ReplyData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuserserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuserserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActiveuserserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActiveuserserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActiveuserserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthActiveuserserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowActiveuserserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipActiveuserserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthActiveuserserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActiveuserserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/activeuserserver/activeuserserver.proto", fileDescriptorActiveuserserver)
}

var fileDescriptorActiveuserserver = []byte{
	// 3175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5b, 0xdd, 0x52, 0x1c, 0xc7,
	0xf5, 0x67, 0x59, 0x3e, 0x76, 0x0f, 0xec, 0xb2, 0x34, 0x20, 0x46, 0x0b, 0x42, 0x68, 0x24, 0xdb,
	0xfa, 0xeb, 0x2f, 0x23, 0x9b, 0x38, 0x55, 0xb1, 0x9d, 0xc4, 0xc5, 0x02, 0xc6, 0x6b, 0x83, 0x20,
	0x03, 0x52, 0x39, 0x4a, 0x39, 0x93, 0x61, 0xa7, 0x17, 0xc6, 0x9a, 0x9d, 0x59, 0xcf, 0x0c, 0xe0,
	0xad, 0x72, 0x55, 0x2e, 0xf3, 0x75, 0x95, 0x5c, 0xa6, 0xe2, 0xaa, 0x3c, 0x44, 0x2a, 0xcf, 0x90,
	0x8b, 0x5c, 0xe4, 0x11, 0x5c, 0xbe, 0x4b, 0x5e, 0x22, 0xa9, 0xd3, 0xdd, 0xf3, 0xb5, 0xd3, 0x03,
	0x0b, 0xda, 0xc4, 0x57, 0xa2, 0x4f, 0x9f, 0x3e, 0x1f, 0xdd, 0xe7, 0xfc, 0xba, 0xcf, 0x99, 0x15,
	0xec, 0x9e, 0x58, 0x81, 0x6d, 0x1c, 0xaf, 0xb5, 0x4e, 0x8d, 0xc0, 0xa7, 0xde, 0x39, 0xf5, 0xd6,
	0xac, 0xce, 0x13, 0xcb, 0x09, 0xa8, 0xd7, 0x36, 0x5a, 0xb4, 0xeb, 0xb9, 0xc7, 0x67, 0xed, 0x27,
	0x46, 0x2b, 0xb0, 0xce, 0xe9, 0x99, 0x4f, 0x3d, 0xce, 0x93, 0x21, 0xac, 0x75, 0x3d, 0x37, 0x70,
	0x49, 0xad, 0x9f, 0xae, 0x7e, 0x0e, 0xd3, 0xcf, 0x7c, 0xea, 0x3d, 0x35, 0x3a, 0xb4, 0x61, 0xf8,
	0x94, 0xd4, 0xa1, 0x84, 0x63, 0xc7, 0xe8, 0x50, 0xa5, 0xb0, 0x5a, 0x78, 0x58, 0xd6, 0xa2, 0x31,
	0xa9, 0xc2, 0x68, 0xd3, 0x54, 0x46, 0x57, 0x0b, 0x0f, 0xc7, 0xb5, 0xd1, 0xa6, 0x49, 0xd6, 0x60,
	0xec, 0xa8, 0xd7, 0xa5, 0x4a, 0x71, 0xb5, 0xf0, 0xb0, 0xba, 0x5e, 0x5f, 0xcb, 0x28, 0x3d, 0xa0,
	0xd4, 0x43, 0x0e, 0x8d, 0xf1, 0xa9, 0x7f, 0x28, 0x40, 0xb5, 0xe9, 0x9c, 0x5b, 0x01, 0xdd, 0xb5,
	0x9c, 0x97, 0x4c, 0xdd, 0x0a, 0x40, 0x4c, 0x11, 0x0a, 0x13, 0x14, 0xa2, 0xc0, 0xe4, 0x8e, 0xe7,
	0x9e, 0x75, 0x23, 0xbd, 0xe1, 0x90, 0xdc, 0x82, 0x09, 0x34, 0xac, 0x69, 0x32, 0xf5, 0xe3, 0x9a,
	0x18, 0x45, 0x46, 0x8d, 0x0d, 0x68, 0xd4, 0xbf, 0x27, 0x61, 0x6a, 0xf3, 0xd4, 0x08, 0x36, 0x4f,
	0x0d, 0xc7, 0xa1, 0x36, 0xb9, 0x03, 0x20, 0xfe, 0xd4, 0x2d, 0x93, 0x59, 0x34, 0xae, 0x95, 0x05,
	0xa5, 0x69, 0x92, 0xbb, 0x30, 0xb5, 0xd1, 0x6a, 0x51, 0xdf, 0xd7, 0x4f, 0x0d, 0xff, 0x94, 0x19,
	0x55, 0xd4, 0x80, 0x93, 0x3e, 0x32, 0xfc, 0x53, 0x32, 0x0f, 0xe3, 0xdb, 0x4e, 0xcb, 0xeb, 0x31,
	0xb3, 0x4a, 0x1a, 0x1f, 0x90, 0x77, 0xe0, 0x56, 0xc3, 0x73, 0x0d, 0xb3, 0x65, 0xf8, 0x81, 0xee,
	0x7a, 0x7a, 0x87, 0x9e, 0x18, 0x27, 0xe8, 0x09, 0xb3, 0xb3, 0xa4, 0xcd, 0x47, 0xb3, 0xfb, 0xde,
	0x5e, 0x38, 0x87, 0x87, 0xf1, 0x9c, 0x7a, 0x56, 0xdb, 0xa2, 0xa6, 0x32, 0xce, 0xf8, 0xa2, 0x31,
	0xee, 0x9c, 0x46, 0xfd, 0xc0, 0xb3, 0x5a, 0x01, 0x35, 0x95, 0x09, 0x36, 0x9b, 0xa0, 0x90, 0x65,
	0x28, 0x6f, 0xd1, 0x8e, 0xdb, 0xf2, 0x8c, 0x56, 0x4f, 0x99, 0x64, 0xd3, 0x31, 0x01, 0x57, 0x1f,
	0x5a, 0x27, 0x8e, 0x11, 0x9c, 0x79, 0xd4, 0x57, 0x4a, 0x7c, 0x75, 0x4c, 0x21, 0x35, 0x28, 0xee,
	0x59, 0x8e, 0x52, 0x66, 0x13, 0xf8, 0x27, 0xfa, 0x75, 0x64, 0x05, 0x36, 0x55, 0x80, 0x1d, 0x12,
	0x1f, 0x90, 0x25, 0x28, 0xe3, 0xbe, 0xeb, 0x2c, 0x5e, 0xa6, 0xe2, 0x78, 0xc1, 0x78, 0xc2, 0x25,
	0x1b, 0xc7, 0xee, 0x59, 0xa0, 0x4c, 0xf3, 0x25, 0x6c, 0x80, 0xd4, 0x83, 0x53, 0x37, 0x70, 0x95,
	0x0a, 0xa7, 0xb2, 0x01, 0x21, 0x30, 0xb6, 0x65, 0x04, 0x54, 0xa9, 0xb2, 0x0d, 0x67, 0x7f, 0xe3,
	0xe1, 0x3f, 0xa7, 0x9e, 0x6f, 0xb9, 0x8e, 0x32, 0xc3, 0x0f, 0x5f, 0x0c, 0xc9, 0x9b, 0x40, 0x42,
	0x57, 0x2d, 0xd7, 0xd1, 0x3d, 0x6a, 0xf8, 0xae, 0xa3, 0xd4, 0x98, 0xc0, 0xd9, 0xc4, 0x8c, 0xc6,
	0x26, 0x90, 0xfd, 0xc0, 0xf0, 0x02, 0xab, 0x65, 0x75, 0x0d, 0x27, 0xf0, 0xf5, 0x96, 0x7b, 0xe6,
	0x04, 0xca, 0x2c, 0x93, 0x39, 0x9b, 0x9c, 0xd9, 0xc4, 0x09, 0x72, 0x0f, 0xa6, 0x37, 0xcc, 0x8e,
	0xe5, 0x84, 0x8c, 0x84, 0x31, 0x4e, 0x71, 0x5a, 0xc4, 0xf2, 0x89, 0xd5, 0x7a, 0x49, 0x4d, 0xc1,
	0x32, 0xc7, 0x59, 0x38, 0x2d, 0x62, 0x69, 0x60, 0xd4, 0x84, 0x2c, 0xf3, 0x9c, 0x85, 0xd3, 0x38,
	0xcb, 0x5b, 0x30, 0xbf, 0xfd, 0x65, 0xd7, 0xf5, 0x02, 0x6a, 0xea, 0x16, 0x0b, 0x7a, 0xdd, 0xc6,
	0x3c, 0x58, 0x60, 0x8e, 0x90, 0x70, 0x2e, 0x91, 0x0f, 0x4b, 0x50, 0x6e, 0xb8, 0x81, 0x90, 0x78,
	0x8b, 0x49, 0x2c, 0x35, 0xdc, 0x80, 0x8b, 0x7b, 0x02, 0xf3, 0x7b, 0xd6, 0x89, 0x67, 0xa0, 0xb8,
	0xb6, 0xe7, 0x76, 0xf4, 0x8e, 0xf1, 0x25, 0x06, 0xf1, 0x22, 0x77, 0x34, 0x9c, 0xfb, 0xd0, 0x73,
	0x3b, 0x7b, 0xc6, 0x97, 0x4d, 0x93, 0xbc, 0x0d, 0x0b, 0xe9, 0x05, 0x88, 0x32, 0xb8, 0x42, 0x61,
	0x2b, 0x48, 0x72, 0x05, 0xe6, 0x48, 0xd3, 0x24, 0x2a, 0x54, 0x0e, 0x2c, 0xe6, 0x55, 0xc7, 0x3f,
	0x41, 0xd6, 0xdb, 0xdc, 0x2d, 0x4e, 0xdc, 0xf3, 0x4f, 0x9a, 0x26, 0x9e, 0xdb, 0xa6, 0x7d, 0xe6,
	0x07, 0xd4, 0x53, 0xea, 0xfc, 0xdc, 0xc4, 0x10, 0xb3, 0x87, 0x3b, 0xa3, 0x6b, 0x67, 0x36, 0x55,
	0x96, 0xd8, 0xac, 0xc8, 0x77, 0xa4, 0xb0, 0xa5, 0x1e, 0x35, 0x02, 0xd7, 0x53, 0x96, 0xc5, 0x52,
	0x3e, 0x24, 0xaf, 0x41, 0x75, 0xfb, 0x9c, 0x7a, 0x3d, 0xd7, 0xa1, 0xfa, 0x17, 0x67, 0x16, 0x0d,
	0x94, 0x3b, 0x2c, 0x38, 0x2b, 0x21, 0xf5, 0x27, 0x48, 0xc4, 0x5d, 0x3f, 0xf0, 0xac, 0x73, 0x23,
	0xa0, 0xcc, 0x19, 0x65, 0x85, 0x31, 0x4d, 0x09, 0x1a, 0x3a, 0x21, 0x60, 0xec, 0x6e, 0x08, 0x63,
	0xea, 0x5f, 0xcb, 0x30, 0x27, 0x12, 0x3c, 0x19, 0x0b, 0x57, 0x21, 0xc1, 0x22, 0x4c, 0xb2, 0xd0,
	0xb7, 0x42, 0x68, 0x0a, 0x11, 0x68, 0x01, 0x26, 0x9a, 0xbe, 0x7e, 0xec, 0x06, 0x21, 0x04, 0x34,
	0xfd, 0x86, 0x1b, 0xe0, 0xd1, 0x09, 0xdf, 0x2d, 0x93, 0x65, 0xfd, 0xb8, 0x56, 0xe2, 0x84, 0xa6,
	0x49, 0x1e, 0x42, 0x6d, 0xd3, 0x70, 0x74, 0x9f, 0x06, 0xfa, 0x59, 0x08, 0xbf, 0x3c, 0xe3, 0xab,
	0x9b, 0x86, 0x73, 0x48, 0x83, 0x08, 0x84, 0xd7, 0x61, 0x01, 0x39, 0xcf, 0x2d, 0x7a, 0xa1, 0x77,
	0x13, 0xe6, 0x0a, 0x08, 0x98, 0xdb, 0x34, 0x9c, 0xe7, 0x16, 0xbd, 0xe8, 0xf7, 0xa4, 0xe9, 0xeb,
	0x2d, 0xb1, 0xb1, 0x02, 0x0c, 0x9a, 0x7e, 0xb8, 0xb5, 0xb7, 0xa1, 0xd4, 0xf4, 0x75, 0x03, 0xc3,
	0x5b, 0x40, 0xc1, 0x64, 0xd3, 0x67, 0xd1, 0x1e, 0xfa, 0x62, 0x84, 0x50, 0x80, 0xbe, 0x18, 0x0e,
	0x9e, 0xe3, 0x81, 0xe7, 0x76, 0x5c, 0x0c, 0x9c, 0xe3, 0x1e, 0x83, 0x84, 0x71, 0x0d, 0x42, 0x52,
	0xa3, 0x47, 0x1e, 0xc1, 0x2c, 0xee, 0xd4, 0x09, 0xd5, 0x19, 0x92, 0xe9, 0x96, 0xd3, 0x76, 0x19,
	0x3e, 0x94, 0xb4, 0x19, 0x3e, 0xc1, 0x71, 0xdc, 0x69, 0xbb, 0xe4, 0x0d, 0x98, 0xd9, 0xa2, 0x36,
	0x0d, 0xa8, 0xde, 0xa1, 0xbe, 0x6f, 0x9c, 0x50, 0x9f, 0x01, 0x46, 0x49, 0xab, 0x72, 0xf2, 0x9e,
	0xa0, 0xb2, 0xe0, 0x37, 0x1c, 0xb6, 0x41, 0x3e, 0x43, 0x8f, 0x92, 0x56, 0x6a, 0x18, 0x0e, 0x6e,
	0x8d, 0xcf, 0x0e, 0xde, 0x72, 0x62, 0x11, 0x55, 0x71, 0xf0, 0x96, 0x13, 0xad, 0x57, 0xa1, 0xb2,
	0x61, 0x9a, 0xba, 0x43, 0x2f, 0x84, 0xb3, 0x33, 0x9c, 0x67, 0xc3, 0x34, 0x9f, 0xd2, 0x0b, 0xee,
	0x30, 0x1a, 0x6e, 0x30, 0x44, 0x31, 0x63, 0x59, 0x35, 0x61, 0xb8, 0x81, 0x80, 0x62, 0x46, 0xf2,
	0xa2, 0x43, 0x73, 0x22, 0x5e, 0x06, 0x2a, 0xe1, 0xa1, 0x39, 0x21, 0x2b, 0x79, 0x00, 0xd5, 0x04,
	0xa7, 0x69, 0x19, 0x0c, 0x53, 0x4a, 0xda, 0x74, 0xc4, 0x67, 0x5a, 0x46, 0x4a, 0x9e, 0x1f, 0x20,
	0x94, 0x78, 0x0c, 0x58, 0x62, 0x79, 0x87, 0x9c, 0x8a, 0x9e, 0x44, 0x9c, 0x27, 0x56, 0xdb, 0x67,
	0x88, 0x51, 0xd2, 0xa6, 0x04, 0xdb, 0x8e, 0xd5, 0xf6, 0x53, 0x3a, 0x4f, 0x8c, 0x0e, 0xf5, 0x19,
	0x5e, 0xc4, 0x3a, 0x77, 0x90, 0x46, 0x5e, 0x87, 0x99, 0x88, 0xcb, 0x72, 0x6c, 0xcb, 0xa1, 0x0c,
	0x2e, 0x4a, 0x5a, 0x45, 0xb0, 0x35, 0x19, 0x31, 0xe4, 0xa3, 0x9d, 0x63, 0x6a, 0x32, 0x90, 0xf2,
	0x19, 0x48, 0x70, 0xbe, 0x6d, 0xa4, 0x22, 0x3e, 0xa5, 0xb5, 0x76, 0x5d, 0xdb, 0xf6, 0x19, 0x40,
	0xc4, 0x5a, 0x0f, 0x90, 0x86, 0x27, 0x29, 0xe0, 0xf3, 0xb8, 0x27, 0x30, 0xa2, 0xc4, 0x09, 0x8d,
	0x1e, 0x46, 0xeb, 0x33, 0x27, 0xb0, 0x6c, 0xdd, 0xc4, 0x0b, 0x81, 0x63, 0x44, 0x99, 0x51, 0xd8,
	0xad, 0xb0, 0x04, 0xe5, 0x8f, 0x5d, 0xcb, 0xd1, 0x03, 0xab, 0x43, 0x05, 0x48, 0x94, 0x90, 0x70,
	0x64, 0x75, 0x28, 0xb9, 0x0f, 0x95, 0x03, 0xd7, 0x0f, 0xe2, 0xa3, 0xe3, 0x20, 0x31, 0x8d, 0xc4,
	0xe8, 0xdc, 0xee, 0x43, 0x65, 0xdb, 0xb4, 0x02, 0x3d, 0x24, 0x08, 0x90, 0x98, 0x46, 0x62, 0xc4,
	0x74, 0x0f, 0xa6, 0x45, 0xba, 0xf2, 0x78, 0xbb, 0xcb, 0x77, 0x98, 0xd3, 0x78, 0xc8, 0xc5, 0x68,
	0xc6, 0x50, 0x7b, 0x95, 0xdf, 0xa2, 0x09, 0xb4, 0x7e, 0x0c, 0x02, 0xc3, 0x53, 0xe8, 0x7e, 0x8f,
	0xa1, 0x7b, 0x8d, 0xcf, 0x24, 0xb8, 0x39, 0x2e, 0xa9, 0xd1, 0xf3, 0xea, 0x2e, 0x4c, 0x1d, 0x06,
	0x86, 0x17, 0x20, 0xd2, 0x5a, 0xa6, 0x72, 0x9f, 0x27, 0x19, 0x23, 0xed, 0x21, 0x45, 0xfd, 0xfb,
	0x18, 0xcf, 0x32, 0x87, 0xda, 0x7c, 0xf3, 0x76, 0x69, 0x3b, 0xb8, 0x31, 0x6c, 0x3d, 0x80, 0xaa,
	0x38, 0x13, 0xd7, 0xd3, 0x6d, 0xda, 0x0e, 0xe1, 0x4b, 0x5c, 0x74, 0xfb, 0x1e, 0x93, 0x9e, 0x3a,
	0xb9, 0xb1, 0xbe, 0x93, 0x0b, 0x2f, 0xf1, 0xf1, 0xc4, 0x25, 0xbe, 0x04, 0xe5, 0x5d, 0x7c, 0xf4,
	0xb0, 0xc3, 0x9c, 0xe0, 0x0b, 0x90, 0xc0, 0x26, 0x63, 0x78, 0x99, 0x4c, 0xc2, 0x8b, 0x34, 0x09,
	0x4b, 0x83, 0x27, 0x61, 0x79, 0xc0, 0x24, 0x04, 0x49, 0x12, 0x4a, 0x12, 0x62, 0x4a, 0x96, 0x10,
	0xd9, 0xf4, 0x9a, 0x96, 0xa4, 0x57, 0x26, 0x51, 0x2b, 0xd9, 0x44, 0x95, 0xa5, 0x7d, 0x55, 0x9a,
	0xf6, 0x92, 0x24, 0x9c, 0x19, 0x2c, 0x09, 0x6b, 0x92, 0x24, 0xe4, 0xf1, 0x36, 0x1b, 0xdd, 0x83,
	0x1f, 0xc0, 0xcc, 0x06, 0x3e, 0x96, 0x0d, 0x1e, 0xdf, 0x1a, 0xfd, 0x02, 0xdf, 0x6a, 0x9f, 0xd0,
	0x5e, 0x93, 0x87, 0x51, 0x51, 0xe3, 0x83, 0xc4, 0xd3, 0x3b, 0x15, 0x41, 0xea, 0x11, 0xcc, 0xa6,
	0x05, 0x74, 0xed, 0x1e, 0xf9, 0x00, 0xca, 0xdb, 0x9e, 0xe7, 0x7a, 0x9b, 0xae, 0xc9, 0x2b, 0x8a,
	0xea, 0xfa, 0xbd, 0xec, 0xa3, 0x9c, 0xad, 0xa3, 0x11, 0xa3, 0x16, 0xaf, 0x51, 0x37, 0x60, 0x76,
	0xd7, 0x3d, 0x71, 0xcf, 0xd8, 0x15, 0x78, 0x33, 0xc3, 0x9e, 0xc3, 0x5c, 0xbf, 0x88, 0xa1, 0x98,
	0xf6, 0x36, 0xcc, 0xee, 0xd0, 0x80, 0x33, 0x30, 0x48, 0x40, 0xd3, 0x96, 0x21, 0xce, 0xb6, 0x4c,
	0xfa, 0xa9, 0x01, 0xcc, 0xf5, 0x2f, 0x41, 0x53, 0x96, 0xa1, 0xcc, 0x69, 0x4d, 0xd3, 0x57, 0x0a,
	0xab, 0x45, 0x5c, 0x14, 0x11, 0xd2, 0x86, 0x8e, 0xde, 0xc0, 0xd0, 0xef, 0xc3, 0x02, 0x6a, 0xb5,
	0x6d, 0x61, 0xc8, 0x80, 0xc6, 0xfe, 0xba, 0x08, 0x8b, 0xb2, 0x75, 0x68, 0xf1, 0x2d, 0x98, 0xd8,
	0xb0, 0xed, 0xd8, 0x5c, 0x31, 0x4a, 0x7b, 0x32, 0xda, 0xef, 0xc9, 0xfb, 0x30, 0x8e, 0x77, 0xbe,
	0xaf, 0x14, 0x57, 0x8b, 0x0f, 0xa7, 0xd6, 0x5f, 0xcb, 0x7a, 0x21, 0x79, 0x89, 0x69, 0x7c, 0x0d,
	0xf9, 0x11, 0x4c, 0xb0, 0x7b, 0xdb, 0x57, 0xc6, 0xae, 0xb3, 0x5a, 0x2c, 0x22, 0x1f, 0xc0, 0xe4,
	0x31, 0xce, 0x7a, 0xbe, 0x32, 0x7e, 0x9d, 0xf5, 0xe1, 0x2a, 0xf2, 0x2e, 0x8c, 0x1d, 0xbb, 0xec,
	0xa5, 0x75, 0x8d, 0xd5, 0x6c, 0x49, 0xfa, 0x04, 0x27, 0x6f, 0x70, 0x82, 0x9f, 0x81, 0x72, 0x48,
	0x83, 0xac, 0x02, 0x3c, 0xc4, 0x0d, 0x5e, 0xb3, 0xe3, 0x26, 0xb1, 0x33, 0x1c, 0xd8, 0xb6, 0x68,
	0x99, 0xfa, 0x19, 0xd4, 0x73, 0xc4, 0x0f, 0x25, 0x51, 0x0e, 0x40, 0xd9, 0xc9, 0xb3, 0xfe, 0xd2,
	0x10, 0xcc, 0x4d, 0xe9, 0x3f, 0x17, 0xa0, 0xbe, 0x93, 0x6f, 0xf1, 0xab, 0x6f, 0xc9, 0xab, 0x27,
	0xdd, 0x01, 0x28, 0x5b, 0xd4, 0x1e, 0xa6, 0xd3, 0x9f, 0x41, 0x3d, 0x47, 0xe2, 0x50, 0x4e, 0xe9,
	0x7d, 0x58, 0xda, 0xa2, 0x76, 0x9c, 0xed, 0xd7, 0xb1, 0x59, 0xfd, 0x05, 0xdc, 0xc9, 0x5f, 0x3c,
	0x14, 0xf3, 0x1c, 0xa8, 0x3f, 0xeb, 0xe2, 0x33, 0xe2, 0x43, 0xcb, 0xf3, 0x03, 0x2c, 0x86, 0xf0,
	0x1d, 0x81, 0xff, 0xa2, 0x75, 0xf1, 0x9e, 0x15, 0x52, 0xcf, 0x9a, 0x65, 0x28, 0x47, 0xfc, 0x6c,
	0x3b, 0xcb, 0x5a, 0x4c, 0x20, 0x75, 0x28, 0x85, 0x42, 0xd8, 0x73, 0xa7, 0xac, 0x45, 0x63, 0x55,
	0x87, 0xe5, 0x5c, 0x7d, 0x43, 0x71, 0xc8, 0x85, 0x59, 0xae, 0x20, 0x2c, 0xee, 0xd0, 0x8f, 0x1f,
	0xc0, 0xe4, 0x53, 0x7a, 0x91, 0x08, 0xdc, 0x95, 0xac, 0xcc, 0x64, 0xc7, 0x4e, 0x0b, 0xd9, 0xc9,
	0x2a, 0x4c, 0xed, 0xdb, 0x66, 0xd4, 0xbd, 0xe3, 0xbe, 0x26, 0x49, 0x78, 0x0f, 0xf6, 0x2b, 0x1c,
	0x8a, 0x23, 0x8f, 0xa1, 0xba, 0x13, 0x97, 0xa8, 0xe8, 0xc5, 0x25, 0x6d, 0x44, 0xf5, 0x57, 0x05,
	0xa8, 0xa5, 0xd8, 0xd1, 0x86, 0x75, 0x18, 0xbb, 0x86, 0xcf, 0x63, 0xc3, 0xc9, 0x50, 0x1d, 0x66,
	0x0f, 0xa9, 0xe1, 0xb5, 0x4e, 0x93, 0xa6, 0x2f, 0x43, 0x99, 0x13, 0x0f, 0x03, 0x4f, 0xd8, 0x1e,
	0x13, 0xf2, 0x52, 0x13, 0x1f, 0x24, 0xbb, 0x56, 0xc7, 0x0a, 0x44, 0x37, 0x92, 0x0f, 0xd4, 0xdf,
	0x16, 0x60, 0xae, 0x5f, 0x43, 0xda, 0xdb, 0xe2, 0xff, 0xce, 0xdb, 0x8b, 0xf0, 0xf4, 0xe3, 0x9a,
	0x03, 0xfd, 0x7d, 0xaf, 0x3f, 0xe0, 0x56, 0xb3, 0x52, 0xd3, 0x5d, 0xdb, 0x38, 0xe4, 0x1e, 0x40,
	0x65, 0xdf, 0x4e, 0xf4, 0xa7, 0x44, 0xd0, 0xa5, 0x89, 0xea, 0xa7, 0xb0, 0x90, 0x55, 0x3c, 0x94,
	0xc0, 0x5b, 0x67, 0x91, 0x94, 0xf6, 0xe7, 0x8a, 0x96, 0xb2, 0xfa, 0xbb, 0x02, 0x90, 0xbe, 0x45,
	0x68, 0xcb, 0x3b, 0xa9, 0x00, 0xbc, 0x7a, 0x0f, 0x86, 0x74, 0x28, 0x0d, 0x20, 0x22, 0xb8, 0xa8,
	0xdd, 0x66, 0x3d, 0x11, 0xf1, 0xbc, 0xe5, 0xcd, 0xd6, 0x42, 0xb2, 0xd9, 0x9a, 0x77, 0x2d, 0xfc,
	0xbe, 0x00, 0xf3, 0x19, 0x21, 0xe8, 0x93, 0x02, 0x93, 0xbc, 0x6d, 0x17, 0x3e, 0xd2, 0xc2, 0x21,
	0x6e, 0x52, 0x04, 0xdd, 0xe1, 0x33, 0x2d, 0x41, 0x49, 0xfb, 0x55, 0xbc, 0x81, 0x5f, 0x7b, 0xec,
	0xe5, 0x78, 0x74, 0xe1, 0xa2, 0x8d, 0xa8, 0x95, 0x37, 0x4e, 0xd1, 0x39, 0x85, 0x57, 0xa0, 0xfb,
	0x0e, 0x15, 0x50, 0x1d, 0x0e, 0xc3, 0x99, 0xa3, 0x0b, 0x37, 0xec, 0xf6, 0x8b, 0xa1, 0xea, 0xc1,
	0x6d, 0xb9, 0x38, 0x74, 0x73, 0x1e, 0xc6, 0xd9, 0x48, 0x88, 0xe3, 0x83, 0x57, 0x3f, 0x9a, 0x8f,
	0x58, 0x9c, 0x24, 0x75, 0xde, 0xd4, 0x7a, 0x3c, 0xa0, 0x8c, 0xa8, 0xef, 0xf8, 0x80, 0xfe, 0x52,
	0x80, 0x25, 0x1e, 0x34, 0x37, 0x79, 0xa1, 0xa4, 0x40, 0x72, 0xb4, 0x1f, 0x24, 0x37, 0x01, 0xf8,
	0x20, 0xf1, 0x79, 0xe8, 0x7e, 0xee, 0xfb, 0x2b, 0x66, 0xd5, 0x12, 0xcb, 0x62, 0x44, 0x1d, 0x4b,
	0x22, 0xea, 0xd7, 0x05, 0xb8, 0x93, 0x6f, 0x36, 0xee, 0xe9, 0xfb, 0x30, 0xce, 0xca, 0x14, 0x01,
	0xae, 0x83, 0x96, 0x18, 0xbc, 0xa5, 0xf3, 0xca, 0x41, 0xe3, 0xe0, 0x43, 0x1a, 0xcd, 0xe3, 0x4d,
	0x91, 0x21, 0x6e, 0xaa, 0xfc, 0x86, 0xf9, 0x53, 0x01, 0x96, 0x73, 0x15, 0x7e, 0xf7, 0xdb, 0x71,
	0x9a, 0x7c, 0xa5, 0x87, 0x7d, 0x22, 0x66, 0xf9, 0x40, 0xaf, 0xe0, 0xfd, 0x76, 0xdb, 0xa7, 0x41,
	0x08, 0x77, 0x7c, 0x94, 0xb3, 0x11, 0x7f, 0x2c, 0xc0, 0x72, 0xae, 0x2a, 0xdc, 0x88, 0x77, 0xd3,
	0x1b, 0x91, 0x1f, 0x8f, 0x71, 0x2f, 0x6d, 0x68, 0xdb, 0xb0, 0xcf, 0xd0, 0x30, 0x94, 0x4f, 0x23,
	0xf9, 0x37, 0xae, 0x04, 0xbe, 0x2e, 0x30, 0x40, 0x94, 0x48, 0xe4, 0xf7, 0x6a, 0x7f, 0xf5, 0x33,
	0x90, 0xb7, 0x43, 0xac, 0x7d, 0x9e, 0xc0, 0xdc, 0xe6, 0x29, 0x6d, 0xbd, 0xdc, 0x67, 0xcd, 0xb2,
	0xa8, 0xdd, 0x20, 0x20, 0x32, 0x81, 0x77, 0x62, 0xa8, 0x7a, 0xb0, 0x90, 0x5d, 0x20, 0x20, 0x52,
	0xbe, 0xe4, 0xd5, 0x8d, 0xdc, 0x48, 0x3e, 0xce, 0xfc, 0x46, 0xef, 0x30, 0xf0, 0x2e, 0x35, 0x92,
	0xd4, 0xa0, 0xe8, 0x47, 0xa9, 0x89, 0x7f, 0xa2, 0xd9, 0x59, 0x11, 0xff, 0x65, 0xb3, 0x3f, 0x85,
	0x85, 0x0d, 0x93, 0x9d, 0x58, 0x1f, 0xba, 0xbc, 0xea, 0xb1, 0xab, 0x2f, 0x60, 0x51, 0x26, 0x79,
	0x28, 0x4f, 0xb5, 0x3d, 0x58, 0xd8, 0xa2, 0xb6, 0xc4, 0xea, 0x9b, 0x25, 0xc0, 0x0b, 0x58, 0x94,
	0x89, 0x1b, 0x8a, 0xa9, 0x3f, 0x84, 0x65, 0x5e, 0xca, 0xa2, 0x78, 0xbc, 0x90, 0xaf, 0x55, 0x08,
	0x1b, 0xb0, 0x72, 0xc9, 0xea, 0xa1, 0x18, 0xf8, 0x1e, 0xd4, 0x35, 0xea, 0xdf, 0xa8, 0xa1, 0x82,
	0x55, 0x6d, 0xee, 0xda, 0xa1, 0x18, 0xf7, 0x55, 0xfc, 0x8b, 0x12, 0x86, 0x25, 0x89, 0x0f, 0x0e,
	0xe9, 0xca, 0x7c, 0x11, 0x26, 0x9b, 0xbe, 0xfe, 0xd2, 0x6a, 0xf1, 0xb2, 0xa1, 0xa4, 0x4d, 0x34,
	0x7d, 0x0c, 0x4b, 0x72, 0x07, 0x80, 0x95, 0xdc, 0x7a, 0xa2, 0x2c, 0xe7, 0x35, 0x3b, 0xfb, 0x59,
	0x41, 0xf8, 0x45, 0x81, 0xcd, 0x8e, 0xc5, 0x45, 0x3b, 0x4e, 0xaa, 0xfb, 0xa0, 0xec, 0xba, 0x86,
	0xc9, 0x1e, 0xc1, 0x49, 0x33, 0x70, 0x63, 0x6e, 0x43, 0x69, 0x87, 0x7f, 0x8d, 0x0c, 0x4d, 0x89,
	0x7e, 0x4d, 0x92, 0xf8, 0xa9, 0xc1, 0x68, 0xea, 0xa7, 0x06, 0xea, 0x6f, 0x0a, 0x79, 0x12, 0xfd,
	0xee, 0x8d, 0x24, 0x62, 0x85, 0xbf, 0x47, 0x3b, 0xc7, 0x78, 0x15, 0x15, 0xaf, 0xaa, 0xff, 0x98,
	0xa2, 0x90, 0x5d, 0x7d, 0x2c, 0xda, 0x68, 0x7e, 0x8c, 0x92, 0xd1, 0xab, 0xba, 0x06, 0xc5, 0x18,
	0x6c, 0x8a, 0x1c, 0x52, 0xab, 0x78, 0xc8, 0x31, 0xef, 0x15, 0xa9, 0xb6, 0x0a, 0x53, 0x5c, 0x11,
	0x7f, 0x4c, 0x73, 0xab, 0x93, 0x24, 0xd6, 0x61, 0x60, 0xd2, 0x38, 0x07, 0xbf, 0x7f, 0x93, 0x24,
	0xf5, 0x45, 0x9e, 0x85, 0x7e, 0x97, 0xfc, 0x18, 0xca, 0x2c, 0xc4, 0xb6, 0x8c, 0xc0, 0x10, 0x97,
	0xf0, 0xaa, 0x1c, 0x9f, 0xe2, 0xc5, 0x5a, 0xbc, 0xe4, 0xd1, 0xc7, 0xe2, 0xfb, 0x44, 0x1c, 0x76,
	0xa4, 0x12, 0x36, 0x9b, 0xf5, 0xfd, 0x4f, 0x6a, 0x23, 0x84, 0x40, 0x45, 0x0c, 0x0f, 0x7f, 0x7a,
	0xb8, 0xad, 0x69, 0xb5, 0x7f, 0x4e, 0x92, 0xf9, 0x70, 0x95, 0xfe, 0x74, 0xff, 0x48, 0xff, 0xb0,
	0xf9, 0x74, 0xab, 0xf6, 0xaf, 0xc9, 0x47, 0x1f, 0x43, 0x29, 0xfc, 0x1d, 0x10, 0x99, 0xe6, 0x7f,
	0xa3, 0xba, 0xda, 0x48, 0x38, 0xc2, 0xc4, 0xad, 0x15, 0xc8, 0x0c, 0x4c, 0x89, 0x11, 0x6e, 0x52,
	0x6d, 0x94, 0xcc, 0x42, 0x05, 0x09, 0x87, 0x67, 0x5d, 0xc1, 0x53, 0x7c, 0xd4, 0x8e, 0xbe, 0xc2,
	0x25, 0x5e, 0xaf, 0x95, 0xf0, 0x2d, 0xb7, 0x61, 0xdb, 0xb5, 0x11, 0x94, 0x23, 0x86, 0x66, 0xc7,
	0x72, 0x6a, 0x05, 0x52, 0x83, 0x69, 0x4e, 0xe0, 0xbf, 0x07, 0xa9, 0x8d, 0xc6, 0x2b, 0x1a, 0x6e,
	0x50, 0x2b, 0xc6, 0x0c, 0x1c, 0xa9, 0x6b, 0x63, 0xeb, 0xdf, 0x28, 0xe2, 0xfb, 0x0a, 0xdb, 0x99,
	0x43, 0xea, 0x9d, 0x5b, 0x2d, 0x4a, 0x5e, 0x00, 0xc4, 0xdf, 0x36, 0x88, 0x04, 0xf0, 0x33, 0x1f,
	0x4f, 0xea, 0xaf, 0x5d, 0xcd, 0xd4, 0xb5, 0x7b, 0xea, 0x08, 0xf9, 0x39, 0xeb, 0xeb, 0x24, 0x3e,
	0x56, 0xc8, 0xe4, 0x67, 0xbe, 0x80, 0xc8, 0xe4, 0x4b, 0xbe, 0x79, 0xa8, 0x23, 0xe4, 0x73, 0x56,
	0x61, 0xf5, 0x7d, 0x5e, 0x20, 0x6f, 0xc8, 0x97, 0x67, 0x3e, 0x5e, 0xd4, 0xff, 0x6f, 0x30, 0x46,
	0xae, 0xcb, 0xc7, 0x9b, 0x5a, 0x82, 0x7a, 0xe4, 0x51, 0x56, 0x4a, 0x5e, 0xa7, 0xbd, 0xfe, 0x78,
	0x60, 0xde, 0x48, 0xe9, 0xce, 0xa0, 0x4a, 0x77, 0xae, 0xa1, 0x74, 0xe7, 0x0a, 0xa5, 0xd2, 0x2e,
	0xb1, 0x4c, 0x69, 0x5e, 0x83, 0x5a, 0xa6, 0x34, 0xbf, 0xf5, 0xac, 0x8e, 0x90, 0xaf, 0x58, 0xb3,
	0x5b, 0xda, 0xfe, 0x25, 0x6f, 0x4a, 0x65, 0xe5, 0xf5, 0x99, 0xeb, 0x4f, 0xae, 0xc3, 0xce, 0xb5,
	0x3b, 0x30, 0x9d, 0xbc, 0xd4, 0x88, 0xc4, 0xfa, 0xfc, 0x0b, 0xb3, 0xbe, 0x76, 0x0d, 0x6e, 0xae,
	0xaf, 0x07, 0x8b, 0x39, 0xad, 0x61, 0x99, 0xea, 0xfc, 0xae, 0xb5, 0x4c, 0xf5, 0x65, 0x3d, 0x67,
	0x9e, 0x93, 0xe9, 0x1e, 0xae, 0x2c, 0x27, 0x33, 0x6d, 0x65, 0x59, 0x4e, 0x4a, 0x5a, 0xc1, 0xea,
	0x08, 0x79, 0x06, 0x53, 0x89, 0xe6, 0x2c, 0x59, 0x95, 0x06, 0x5f, 0x52, 0xb2, 0x7a, 0x05, 0x47,
	0x64, 0x76, 0xba, 0x11, 0x2a, 0x33, 0x3b, 0xd3, 0x8c, 0x95, 0x99, 0x2d, 0xe9, 0xa7, 0xaa, 0x23,
	0xc4, 0x84, 0x5a, 0x7f, 0x8f, 0x91, 0xe4, 0xfa, 0x9c, 0x6a, 0x18, 0xd6, 0xdf, 0x18, 0x84, 0x8d,
	0x6b, 0xf9, 0x19, 0x54, 0x52, 0xad, 0x43, 0x22, 0x77, 0x3e, 0x2d, 0xff, 0xc1, 0x95, 0x3c, 0x5c,
	0xf8, 0xa7, 0x30, 0x9d, 0xfc, 0x7c, 0x4e, 0xf2, 0x9e, 0x5d, 0xf1, 0xf7, 0xf9, 0xfa, 0xfd, 0xab,
	0x58, 0xb8, 0xe4, 0x6e, 0xa6, 0xfd, 0xc4, 0xef, 0x73, 0x39, 0x80, 0xca, 0x9a, 0x76, 0xf5, 0xff,
	0x1f, 0x94, 0x95, 0x6b, 0x34, 0x60, 0xa6, 0x6f, 0x9a, 0x3c, 0xb8, 0x52, 0x02, 0xea, 0x79, 0x7d,
	0x00, 0xae, 0x48, 0x45, 0x5f, 0xd3, 0x53, 0xa6, 0x22, 0xdb, 0x5c, 0x95, 0xa9, 0x90, 0x75, 0x4f,
	0x79, 0x50, 0xf5, 0x17, 0xa5, 0x44, 0xda, 0x40, 0xc9, 0x54, 0xba, 0xb2, 0xa0, 0x92, 0xd6, 0xb7,
	0x5c, 0x4b, 0x7f, 0x0d, 0x49, 0x2e, 0x8d, 0xfb, 0xa8, 0x54, 0x95, 0x69, 0x91, 0x96, 0xa3, 0x1c,
	0xb2, 0x72, 0xfa, 0x44, 0xe4, 0x71, 0x9e, 0x14, 0x59, 0x0f, 0x4b, 0x06, 0x59, 0x97, 0x35, 0xa0,
	0xf8, 0xdd, 0x90, 0xd7, 0xb2, 0x93, 0xdd, 0x0d, 0x97, 0x74, 0x25, 0x65, 0x77, 0xc3, 0xa5, 0xdd,
	0x40, 0xee, 0x78, 0x4e, 0x5f, 0x88, 0x5c, 0x7a, 0xb3, 0xf6, 0x77, 0xab, 0x64, 0x8e, 0x5f, 0xd6,
	0x70, 0x8a, 0xf2, 0x2e, 0xd3, 0xa4, 0xc9, 0xc9, 0x3b, 0x59, 0x7b, 0x28, 0x27, 0xef, 0xe4, 0x7d,
	0x1f, 0xfe, 0xa2, 0xca, 0x56, 0xf0, 0xb2, 0x17, 0x95, 0xb4, 0x83, 0x20, 0x7b, 0x51, 0xe5, 0x34,
	0x04, 0xb8, 0xae, 0x6c, 0x09, 0x2e, 0xd3, 0x25, 0xad, 0xfb, 0x65, 0xba, 0x72, 0x2a, 0x7a, 0x75,
	0x84, 0xfc, 0x12, 0x6e, 0xe7, 0x16, 0xd5, 0x64, 0x2d, 0xef, 0xc1, 0x20, 0xaf, 0xdf, 0xeb, 0x6f,
	0x5d, 0x8b, 0x9f, 0x1b, 0xf0, 0x05, 0x2c, 0x48, 0xab, 0x40, 0xd9, 0xa3, 0x2a, 0xaf, 0x00, 0xad,
	0x0f, 0xcc, 0xeb, 0x77, 0xb9, 0x4a, 0x69, 0x2d, 0x95, 0xfb, 0x78, 0x94, 0x94, 0x85, 0xf5, 0x81,
	0x79, 0x51, 0x65, 0x63, 0xfa, 0x6f, 0xdf, 0xae, 0x14, 0xfe, 0xf1, 0xed, 0x4a, 0xe1, 0x9b, 0x6f,
	0x57, 0x0a, 0xc7, 0x13, 0xec, 0x3f, 0x8d, 0x7c, 0xef, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa9,
	0x79, 0x02, 0x45, 0x84, 0x32, 0x00, 0x00,
}
