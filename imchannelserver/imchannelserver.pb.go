// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: imchannelserver.proto

// protoc --gogofast_out=plugins=grpc:. gitlab.chatserver.im/interfaceprobuf/imchannelserver/*.proto

package imchannelserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pbcomm "interfaceprobuf/pbcomm"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SendGameRdpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromKeyId int64         `protobuf:"varint,1,opt,name=FromKeyId,proto3" json:"FromKeyId,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	Req       []byte        `protobuf:"bytes,4,opt,name=Req,proto3" json:"Req,omitempty"`
	RdpRsp    []byte        `protobuf:"bytes,5,opt,name=RdpRsp,proto3" json:"RdpRsp,omitempty"`
	Dbg       *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dbg,proto3" json:"Dbg,omitempty"`
}

func (x *SendGameRdpReq) Reset() {
	*x = SendGameRdpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendGameRdpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendGameRdpReq) ProtoMessage() {}

func (x *SendGameRdpReq) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendGameRdpReq.ProtoReflect.Descriptor instead.
func (*SendGameRdpReq) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{0}
}

func (x *SendGameRdpReq) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *SendGameRdpReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *SendGameRdpReq) GetReq() []byte {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *SendGameRdpReq) GetRdpRsp() []byte {
	if x != nil {
		return x.RdpRsp
	}
	return nil
}

func (x *SendGameRdpReq) GetDbg() *pbcomm.Debug {
	if x != nil {
		return x.Dbg
	}
	return nil
}

type RcvGameRdpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromKeyId int64         `protobuf:"varint,1,opt,name=FromKeyId,proto3" json:"FromKeyId,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	Req       []byte        `protobuf:"bytes,4,opt,name=Req,proto3" json:"Req,omitempty"`
	RdpRsp    []byte        `protobuf:"bytes,5,opt,name=RdpRsp,proto3" json:"RdpRsp,omitempty"`
	Dbg       *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dbg,proto3" json:"Dbg,omitempty"`
}

func (x *RcvGameRdpReq) Reset() {
	*x = RcvGameRdpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RcvGameRdpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RcvGameRdpReq) ProtoMessage() {}

func (x *RcvGameRdpReq) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RcvGameRdpReq.ProtoReflect.Descriptor instead.
func (*RcvGameRdpReq) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{1}
}

func (x *RcvGameRdpReq) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *RcvGameRdpReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *RcvGameRdpReq) GetReq() []byte {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *RcvGameRdpReq) GetRdpRsp() []byte {
	if x != nil {
		return x.RdpRsp
	}
	return nil
}

func (x *RcvGameRdpReq) GetDbg() *pbcomm.Debug {
	if x != nil {
		return x.Dbg
	}
	return nil
}

type CheckGameRdpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromKeyId int64         `protobuf:"varint,1,opt,name=FromKeyId,proto3" json:"FromKeyId,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	Req       []byte        `protobuf:"bytes,4,opt,name=Req,proto3" json:"Req,omitempty"`
	RdpRsp    []byte        `protobuf:"bytes,5,opt,name=RdpRsp,proto3" json:"RdpRsp,omitempty"`
	Dbg       *pbcomm.Debug `protobuf:"bytes,6,opt,name=Dbg,proto3" json:"Dbg,omitempty"`
}

func (x *CheckGameRdpReq) Reset() {
	*x = CheckGameRdpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckGameRdpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckGameRdpReq) ProtoMessage() {}

func (x *CheckGameRdpReq) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckGameRdpReq.ProtoReflect.Descriptor instead.
func (*CheckGameRdpReq) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{2}
}

func (x *CheckGameRdpReq) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *CheckGameRdpReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *CheckGameRdpReq) GetReq() []byte {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *CheckGameRdpReq) GetRdpRsp() []byte {
	if x != nil {
		return x.RdpRsp
	}
	return nil
}

func (x *CheckGameRdpReq) GetDbg() *pbcomm.Debug {
	if x != nil {
		return x.Dbg
	}
	return nil
}

type QryGameRdpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromKeyId int64         `protobuf:"varint,1,opt,name=FromKeyId,proto3" json:"FromKeyId,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	Req       []byte        `protobuf:"bytes,4,opt,name=Req,proto3" json:"Req,omitempty"`
	Dbg       *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dbg,proto3" json:"Dbg,omitempty"`
}

func (x *QryGameRdpReq) Reset() {
	*x = QryGameRdpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QryGameRdpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QryGameRdpReq) ProtoMessage() {}

func (x *QryGameRdpReq) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QryGameRdpReq.ProtoReflect.Descriptor instead.
func (*QryGameRdpReq) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{3}
}

func (x *QryGameRdpReq) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *QryGameRdpReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *QryGameRdpReq) GetReq() []byte {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *QryGameRdpReq) GetDbg() *pbcomm.Debug {
	if x != nil {
		return x.Dbg
	}
	return nil
}

type QryGameHisRdpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromKeyId int64         `protobuf:"varint,1,opt,name=FromKeyId,proto3" json:"FromKeyId,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	Req       []byte        `protobuf:"bytes,4,opt,name=Req,proto3" json:"Req,omitempty"`
	Dbg       *pbcomm.Debug `protobuf:"bytes,5,opt,name=Dbg,proto3" json:"Dbg,omitempty"`
}

func (x *QryGameHisRdpReq) Reset() {
	*x = QryGameHisRdpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QryGameHisRdpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QryGameHisRdpReq) ProtoMessage() {}

func (x *QryGameHisRdpReq) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QryGameHisRdpReq.ProtoReflect.Descriptor instead.
func (*QryGameHisRdpReq) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{4}
}

func (x *QryGameHisRdpReq) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *QryGameHisRdpReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *QryGameHisRdpReq) GetReq() []byte {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *QryGameHisRdpReq) GetDbg() *pbcomm.Debug {
	if x != nil {
		return x.Dbg
	}
	return nil
}

type ChatMsgsMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopMsg int32 `protobuf:"varint,1,opt,name=topMsg,proto3" json:"topMsg,omitempty"`
	TopPts int32 `protobuf:"varint,2,opt,name=topPts,proto3" json:"topPts,omitempty"`
	ToDate int32 `protobuf:"varint,3,opt,name=toDate,proto3" json:"toDate,omitempty"`
}

func (x *ChatMsgsMeta) Reset() {
	*x = ChatMsgsMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMsgsMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMsgsMeta) ProtoMessage() {}

func (x *ChatMsgsMeta) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMsgsMeta.ProtoReflect.Descriptor instead.
func (*ChatMsgsMeta) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{5}
}

func (x *ChatMsgsMeta) GetTopMsg() int32 {
	if x != nil {
		return x.TopMsg
	}
	return 0
}

func (x *ChatMsgsMeta) GetTopPts() int32 {
	if x != nil {
		return x.TopPts
	}
	return 0
}

func (x *ChatMsgsMeta) GetToDate() int32 {
	if x != nil {
		return x.ToDate
	}
	return 0
}

type GameRdpRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte        `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	Code   int32         `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Msg    string        `protobuf:"bytes,3,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Meta   *ChatMsgsMeta `protobuf:"bytes,4,opt,name=Meta,proto3" json:"Meta,omitempty"`
}

func (x *GameRdpRsp) Reset() {
	*x = GameRdpRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameRdpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRdpRsp) ProtoMessage() {}

func (x *GameRdpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRdpRsp.ProtoReflect.Descriptor instead.
func (*GameRdpRsp) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{6}
}

func (x *GameRdpRsp) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GameRdpRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GameRdpRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GameRdpRsp) GetMeta() *ChatMsgsMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// 超级群协议请求
type HandleLogicChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId   uint64 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	KeyId       uint64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId      int32  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CrcId       uint32 `protobuf:"varint,4,opt,name=crc_id,json=crcId,proto3" json:"crc_id,omitempty"`
	ObjBin      []byte `protobuf:"bytes,5,opt,name=obj_bin,json=objBin,proto3" json:"obj_bin,omitempty"`
	Phone       string `protobuf:"bytes,6,opt,name=Phone,proto3" json:"Phone,omitempty"`
	Layer       int32  `protobuf:"varint,7,opt,name=layer,proto3" json:"layer,omitempty"`
	AppVersion  string `protobuf:"bytes,8,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	ClientIp    string `protobuf:"bytes,9,opt,name=ClientIp,proto3" json:"ClientIp,omitempty"`
	Ostype      uint32 `protobuf:"varint,10,opt,name=ostype,proto3" json:"ostype,omitempty"`
	SessionId   uint64 `protobuf:"varint,11,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	API         int32  `protobuf:"varint,12,opt,name=API,proto3" json:"API,omitempty"`
	OsTypeStr   string `protobuf:"bytes,13,opt,name=OsTypeStr,proto3" json:"OsTypeStr,omitempty"`
	DeviceModel string `protobuf:"bytes,14,opt,name=DeviceModel,proto3" json:"DeviceModel,omitempty"`
}

func (x *HandleLogicChannelReq) Reset() {
	*x = HandleLogicChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicChannelReq) ProtoMessage() {}

func (x *HandleLogicChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicChannelReq.ProtoReflect.Descriptor instead.
func (*HandleLogicChannelReq) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{7}
}

func (x *HandleLogicChannelReq) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *HandleLogicChannelReq) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HandleLogicChannelReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *HandleLogicChannelReq) GetCrcId() uint32 {
	if x != nil {
		return x.CrcId
	}
	return 0
}

func (x *HandleLogicChannelReq) GetObjBin() []byte {
	if x != nil {
		return x.ObjBin
	}
	return nil
}

func (x *HandleLogicChannelReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *HandleLogicChannelReq) GetLayer() int32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *HandleLogicChannelReq) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *HandleLogicChannelReq) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *HandleLogicChannelReq) GetOstype() uint32 {
	if x != nil {
		return x.Ostype
	}
	return 0
}

func (x *HandleLogicChannelReq) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *HandleLogicChannelReq) GetAPI() int32 {
	if x != nil {
		return x.API
	}
	return 0
}

func (x *HandleLogicChannelReq) GetOsTypeStr() string {
	if x != nil {
		return x.OsTypeStr
	}
	return ""
}

func (x *HandleLogicChannelReq) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

// 超级群协议响应
type HandleLogicChannelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *HandleLogicChannelResp) Reset() {
	*x = HandleLogicChannelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleLogicChannelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleLogicChannelResp) ProtoMessage() {}

func (x *HandleLogicChannelResp) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleLogicChannelResp.ProtoReflect.Descriptor instead.
func (*HandleLogicChannelResp) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{8}
}

func (x *HandleLogicChannelResp) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

// 发送消息请求
type SendChannelMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid       int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`                        // 发送方id
	NoWebpage    bool          `protobuf:"varint,2,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"` // 是否有网页
	Silent       bool          `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`                        // 是否无声音e
	Background   bool          `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool          `protobuf:"varint,5,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`           // 是否清除草稿
	Peer         []byte        `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`                                          // 发送对象
	ReplyToMsgId int32         `protobuf:"varint,7,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"` // 回复消息
	Message      string        `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`                                    // 文本内容
	RandomId     int64         `protobuf:"varint,9,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`                 // 随机id
	ReplyMarkup  []byte        `protobuf:"bytes,10,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`        // 小键盘
	Entities     [][]byte      `protobuf:"bytes,11,rep,name=entities,proto3" json:"entities,omitempty"`                                 // 高亮
	FromkeyId    uint64        `protobuf:"varint,13,opt,name=fromkey_id,json=fromkeyId,proto3" json:"fromkey_id,omitempty"`             // 发送方的key_id
	Debug        *pbcomm.Debug `protobuf:"bytes,15,opt,name=debug,proto3" json:"debug,omitempty"`
	IncludeChat  bool          `protobuf:"varint,16,opt,name=include_chat,json=includeChat,proto3" json:"include_chat,omitempty"`
	ViaBotId     int32         `protobuf:"varint,17,opt,name=via_bot_id,json=viaBotId,proto3" json:"via_bot_id,omitempty"` //via_bot_id
}

func (x *SendChannelMessageReq) Reset() {
	*x = SendChannelMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChannelMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChannelMessageReq) ProtoMessage() {}

func (x *SendChannelMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChannelMessageReq.ProtoReflect.Descriptor instead.
func (*SendChannelMessageReq) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{9}
}

func (x *SendChannelMessageReq) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *SendChannelMessageReq) GetNoWebpage() bool {
	if x != nil {
		return x.NoWebpage
	}
	return false
}

func (x *SendChannelMessageReq) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *SendChannelMessageReq) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

func (x *SendChannelMessageReq) GetClearDraft() bool {
	if x != nil {
		return x.ClearDraft
	}
	return false
}

func (x *SendChannelMessageReq) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *SendChannelMessageReq) GetReplyToMsgId() int32 {
	if x != nil {
		return x.ReplyToMsgId
	}
	return 0
}

func (x *SendChannelMessageReq) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SendChannelMessageReq) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *SendChannelMessageReq) GetReplyMarkup() []byte {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *SendChannelMessageReq) GetEntities() [][]byte {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *SendChannelMessageReq) GetFromkeyId() uint64 {
	if x != nil {
		return x.FromkeyId
	}
	return 0
}

func (x *SendChannelMessageReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SendChannelMessageReq) GetIncludeChat() bool {
	if x != nil {
		return x.IncludeChat
	}
	return false
}

func (x *SendChannelMessageReq) GetViaBotId() int32 {
	if x != nil {
		return x.ViaBotId
	}
	return 0
}

// 发送媒体
type SendChannelMediaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid       int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 发送方id
	Flags        int32         `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Silent       bool          `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Background   bool          `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool          `protobuf:"varint,5,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Peer         []byte        `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyToMsgId int32         `protobuf:"varint,7,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Media        []byte        `protobuf:"bytes,8,opt,name=media,proto3" json:"media,omitempty"`
	MultiMedia   [][]byte      `protobuf:"bytes,9,rep,name=multi_media,json=multiMedia,proto3" json:"multi_media,omitempty"`
	RandomId     int64         `protobuf:"varint,10,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ReplyMarkup  []byte        `protobuf:"bytes,11,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Newfileid    int64         `protobuf:"varint,12,opt,name=newfileid,proto3" json:"newfileid,omitempty"`
	FromkeyId    uint64        `protobuf:"varint,13,opt,name=fromkey_id,json=fromkeyId,proto3" json:"fromkey_id,omitempty"` // 发送方的key_id
	Chatmeber    []int32       `protobuf:"varint,14,rep,packed,name=chatmeber,proto3" json:"chatmeber,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,15,opt,name=debug,proto3" json:"debug,omitempty"`
	ViaBotId     int32         `protobuf:"varint,16,opt,name=via_bot_id,json=viaBotId,proto3" json:"via_bot_id,omitempty"` //via_bot_id
}

func (x *SendChannelMediaReq) Reset() {
	*x = SendChannelMediaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChannelMediaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChannelMediaReq) ProtoMessage() {}

func (x *SendChannelMediaReq) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChannelMediaReq.ProtoReflect.Descriptor instead.
func (*SendChannelMediaReq) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{10}
}

func (x *SendChannelMediaReq) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *SendChannelMediaReq) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SendChannelMediaReq) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *SendChannelMediaReq) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

func (x *SendChannelMediaReq) GetClearDraft() bool {
	if x != nil {
		return x.ClearDraft
	}
	return false
}

func (x *SendChannelMediaReq) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *SendChannelMediaReq) GetReplyToMsgId() int32 {
	if x != nil {
		return x.ReplyToMsgId
	}
	return 0
}

func (x *SendChannelMediaReq) GetMedia() []byte {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *SendChannelMediaReq) GetMultiMedia() [][]byte {
	if x != nil {
		return x.MultiMedia
	}
	return nil
}

func (x *SendChannelMediaReq) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *SendChannelMediaReq) GetReplyMarkup() []byte {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *SendChannelMediaReq) GetNewfileid() int64 {
	if x != nil {
		return x.Newfileid
	}
	return 0
}

func (x *SendChannelMediaReq) GetFromkeyId() uint64 {
	if x != nil {
		return x.FromkeyId
	}
	return 0
}

func (x *SendChannelMediaReq) GetChatmeber() []int32 {
	if x != nil {
		return x.Chatmeber
	}
	return nil
}

func (x *SendChannelMediaReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SendChannelMediaReq) GetViaBotId() int32 {
	if x != nil {
		return x.ViaBotId
	}
	return 0
}

// 状态返回
type SendChannelMessageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` //1: 无法获取 2: 数据过去超时 3: 崩溃 4: 发起id为0
}

func (x *SendChannelMessageResp) Reset() {
	*x = SendChannelMessageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChannelMessageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChannelMessageResp) ProtoMessage() {}

func (x *SendChannelMessageResp) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChannelMessageResp.ProtoReflect.Descriptor instead.
func (*SendChannelMessageResp) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{11}
}

func (x *SendChannelMessageResp) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SendChannelMessageResp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 编辑消息
type EditChannelMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormId      int32         `protobuf:"varint,1,opt,name=form_id,json=formId,proto3" json:"form_id,omitempty"` // 编辑方id
	FromKeyid   uint64        `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Flags       int32         `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`                                  // 标识
	NoWebpage   bool          `protobuf:"varint,4,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"`         // 是否是网页
	StopGeoLive bool          `protobuf:"varint,5,opt,name=Stop_geo_live,json=StopGeoLive,proto3" json:"Stop_geo_live,omitempty"` // stop update gep live
	Peer        []byte        `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`                                     // 框
	Id          int32         `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`                                        // id
	Message     string        `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`                               // 消息内容
	ReplyMarkup []byte        `protobuf:"bytes,9,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities    [][]byte      `protobuf:"bytes,10,rep,name=entities,proto3" json:"entities,omitempty"`                 // 高亮
	GeoPoint    []byte        `protobuf:"bytes,11,opt,name=Geo_point,json=GeoPoint,proto3" json:"Geo_point,omitempty"` // live GetPoint
	ViaBotId    int32         `protobuf:"varint,12,opt,name=ViaBotId,proto3" json:"ViaBotId,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,13,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *EditChannelMessageReq) Reset() {
	*x = EditChannelMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditChannelMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditChannelMessageReq) ProtoMessage() {}

func (x *EditChannelMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditChannelMessageReq.ProtoReflect.Descriptor instead.
func (*EditChannelMessageReq) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{12}
}

func (x *EditChannelMessageReq) GetFormId() int32 {
	if x != nil {
		return x.FormId
	}
	return 0
}

func (x *EditChannelMessageReq) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *EditChannelMessageReq) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *EditChannelMessageReq) GetNoWebpage() bool {
	if x != nil {
		return x.NoWebpage
	}
	return false
}

func (x *EditChannelMessageReq) GetStopGeoLive() bool {
	if x != nil {
		return x.StopGeoLive
	}
	return false
}

func (x *EditChannelMessageReq) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *EditChannelMessageReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EditChannelMessageReq) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EditChannelMessageReq) GetReplyMarkup() []byte {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *EditChannelMessageReq) GetEntities() [][]byte {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *EditChannelMessageReq) GetGeoPoint() []byte {
	if x != nil {
		return x.GeoPoint
	}
	return nil
}

func (x *EditChannelMessageReq) GetViaBotId() int32 {
	if x != nil {
		return x.ViaBotId
	}
	return 0
}

func (x *EditChannelMessageReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回participants
type ReplyParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates   []byte `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyParticipants) Reset() {
	*x = ReplyParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyParticipants) ProtoMessage() {}

func (x *ReplyParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyParticipants.ProtoReflect.Descriptor instead.
func (*ReplyParticipants) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{13}
}

func (x *ReplyParticipants) GetUpdates() []byte {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *ReplyParticipants) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 邀请操作的ACK
type ReplyJoinChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyJoinChannel) Reset() {
	*x = ReplyJoinChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyJoinChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyJoinChannel) ProtoMessage() {}

func (x *ReplyJoinChannel) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyJoinChannel.ProtoReflect.Descriptor instead.
func (*ReplyJoinChannel) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{14}
}

func (x *ReplyJoinChannel) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyJoinChannel) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 推出超级群返回
type ReplyLeaveChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyLeaveChannel) Reset() {
	*x = ReplyLeaveChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyLeaveChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyLeaveChannel) ProtoMessage() {}

func (x *ReplyLeaveChannel) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyLeaveChannel.ProtoReflect.Descriptor instead.
func (*ReplyLeaveChannel) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{15}
}

func (x *ReplyLeaveChannel) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyLeaveChannel) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// ################################ 升级超级群 #######################
type ReqMigrateChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid int32 `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 邀请者id
	Chatid int32 `protobuf:"varint,2,opt,name=chatid,proto3" json:"chatid,omitempty"` //等待升级的普通群ID
	//    int32 channelid = 3; //升级后的超级群ID
	//    string title = 4; // 群标题
	//    repeated int32 members = 5; //现有用户
	//    string Phone = 6; //电话
	Fromkeyid uint64 `protobuf:"varint,3,opt,name=fromkeyid,proto3" json:"fromkeyid,omitempty"` //邀请者的KEYID
	//    bool isBroadCast = 8; //超级群还是频道
	Debug *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqMigrateChat) Reset() {
	*x = ReqMigrateChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqMigrateChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqMigrateChat) ProtoMessage() {}

func (x *ReqMigrateChat) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqMigrateChat.ProtoReflect.Descriptor instead.
func (*ReqMigrateChat) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{16}
}

func (x *ReqMigrateChat) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqMigrateChat) GetChatid() int32 {
	if x != nil {
		return x.Chatid
	}
	return 0
}

func (x *ReqMigrateChat) GetFromkeyid() uint64 {
	if x != nil {
		return x.Fromkeyid
	}
	return 0
}

func (x *ReqMigrateChat) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyMigrateChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//    int32 msgid = 1; // 消息id
	//    int64 randomid = 2; // 消息随机id
	//    int32 date = 3; // 消息时间
	//    int32 pts = 4; // 消息pts
	//    int32 channelmsgid = 5; //频道的消息ID
	//    int32 channelpts = 6; //频道的PTS
	Result []byte `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	Error  int32  `protobuf:"varint,8,opt,name=error,proto3" json:"error,omitempty"`  // 1. 普通群处理失败 2. 超级群处理失败 3. 其他错误
}

func (x *ReplyMigrateChat) Reset() {
	*x = ReplyMigrateChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyMigrateChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyMigrateChat) ProtoMessage() {}

func (x *ReplyMigrateChat) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyMigrateChat.ProtoReflect.Descriptor instead.
func (*ReplyMigrateChat) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{17}
}

func (x *ReplyMigrateChat) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyMigrateChat) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 返回get channles
type ReplyGetChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyGetChannels) Reset() {
	*x = ReplyGetChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannels) ProtoMessage() {}

func (x *ReplyGetChannels) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannels.ProtoReflect.Descriptor instead.
func (*ReplyGetChannels) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{18}
}

func (x *ReplyGetChannels) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyGetChannels) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type GetChannelInactiveUsersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Limit     int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Userid    int32 `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (x *GetChannelInactiveUsersReq) Reset() {
	*x = GetChannelInactiveUsersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelInactiveUsersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelInactiveUsersReq) ProtoMessage() {}

func (x *GetChannelInactiveUsersReq) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelInactiveUsersReq.ProtoReflect.Descriptor instead.
func (*GetChannelInactiveUsersReq) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{19}
}

func (x *GetChannelInactiveUsersReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelInactiveUsersReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetChannelInactiveUsersReq) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

type ReplyBanChannelUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates   []byte `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyBanChannelUser) Reset() {
	*x = ReplyBanChannelUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyBanChannelUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyBanChannelUser) ProtoMessage() {}

func (x *ReplyBanChannelUser) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyBanChannelUser.ProtoReflect.Descriptor instead.
func (*ReplyBanChannelUser) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{20}
}

func (x *ReplyBanChannelUser) GetUpdates() []byte {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *ReplyBanChannelUser) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 获取participants
type ReqGetParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffSet    int32         `protobuf:"varint,1,opt,name=offSet,proto3" json:"offSet,omitempty"`
	Limit     int32         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	PartiType int32         `protobuf:"varint,3,opt,name=partiType,proto3" json:"partiType,omitempty"`
	ChannelId int32         `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId    int32         `protobuf:"varint,5,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Q         string        `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	Hash      int32         `protobuf:"varint,7,opt,name=Hash,proto3" json:"Hash,omitempty"` // 校验唯一的， 如果不为0 则要进行唯一判断
	Debug     *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetParticipants) Reset() {
	*x = ReqGetParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetParticipants) ProtoMessage() {}

func (x *ReqGetParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetParticipants.ProtoReflect.Descriptor instead.
func (*ReqGetParticipants) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{21}
}

func (x *ReqGetParticipants) GetOffSet() int32 {
	if x != nil {
		return x.OffSet
	}
	return 0
}

func (x *ReqGetParticipants) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetParticipants) GetPartiType() int32 {
	if x != nil {
		return x.PartiType
	}
	return 0
}

func (x *ReqGetParticipants) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetParticipants) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetParticipants) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ReqGetParticipants) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *ReqGetParticipants) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 邀请用户进入超级群
type ReqJoinChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`                  //超级群ID
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`                        // 自己的ID
	FromKeyid  int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"` //自己的KEYID
	AccessHash int64         `protobuf:"varint,6,opt,name=accessHash,proto3" json:"accessHash,omitempty"`                //超级群的哈希
	ByLink     bool          `protobuf:"varint,7,opt,name=byLink,proto3" json:"byLink,omitempty"`                        //是否通过链接加入
	Invitor    int32         `protobuf:"varint,8,opt,name=invitor,proto3" json:"invitor,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,9,opt,name=debug,proto3" json:"debug,omitempty"`
	InviteType int32         `protobuf:"varint,10,opt,name=invite_type,json=inviteType,proto3" json:"invite_type,omitempty"` //邀请类型 1-二维码邀请
}

func (x *ReqJoinChannel) Reset() {
	*x = ReqJoinChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqJoinChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqJoinChannel) ProtoMessage() {}

func (x *ReqJoinChannel) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqJoinChannel.ProtoReflect.Descriptor instead.
func (*ReqJoinChannel) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{22}
}

func (x *ReqJoinChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqJoinChannel) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqJoinChannel) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqJoinChannel) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqJoinChannel) GetByLink() bool {
	if x != nil {
		return x.ByLink
	}
	return false
}

func (x *ReqJoinChannel) GetInvitor() int32 {
	if x != nil {
		return x.Invitor
	}
	return 0
}

func (x *ReqJoinChannel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ReqJoinChannel) GetInviteType() int32 {
	if x != nil {
		return x.InviteType
	}
	return 0
}

// 踢人
type ReqKickFromChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Kicker    int32         `protobuf:"varint,2,opt,name=kicker,proto3" json:"kicker,omitempty"`                          //谁踢人
	Kickee    int32         `protobuf:"varint,3,opt,name=kickee,proto3" json:"kickee,omitempty"`                          //谁被踢
	IsBotUser bool          `protobuf:"varint,4,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"` //被邀请者是不是机器人
	IsKicked  bool          `protobuf:"varint,5,opt,name=is_kicked,json=isKicked,proto3" json:"is_kicked,omitempty"`      // 是否是离开超级群\频道
	KickedId  int32         `protobuf:"varint,6,opt,name=Kicked_id,json=KickedId,proto3" json:"Kicked_id,omitempty"`      //如果是超级群被踢的话将，此用户保存到被踢列表中
	FromKeyid int64         `protobuf:"varint,7,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`   //踢人者的KEYID
	Debug     *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqKickFromChannel) Reset() {
	*x = ReqKickFromChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqKickFromChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqKickFromChannel) ProtoMessage() {}

func (x *ReqKickFromChannel) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqKickFromChannel.ProtoReflect.Descriptor instead.
func (*ReqKickFromChannel) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{23}
}

func (x *ReqKickFromChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqKickFromChannel) GetKicker() int32 {
	if x != nil {
		return x.Kicker
	}
	return 0
}

func (x *ReqKickFromChannel) GetKickee() int32 {
	if x != nil {
		return x.Kickee
	}
	return 0
}

func (x *ReqKickFromChannel) GetIsBotUser() bool {
	if x != nil {
		return x.IsBotUser
	}
	return false
}

func (x *ReqKickFromChannel) GetIsKicked() bool {
	if x != nil {
		return x.IsKicked
	}
	return false
}

func (x *ReqKickFromChannel) GetKickedId() int32 {
	if x != nil {
		return x.KickedId
	}
	return 0
}

func (x *ReqKickFromChannel) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqKickFromChannel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 退出超级群
type ReqLeaveChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`                  //退出的超级群ID
	UserId    int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`                        // 退出的用户
	FromKeyid int64         `protobuf:"varint,3,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"` //退出用户的KEYID
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqLeaveChannel) Reset() {
	*x = ReqLeaveChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLeaveChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLeaveChannel) ProtoMessage() {}

func (x *ReqLeaveChannel) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLeaveChannel.ProtoReflect.Descriptor instead.
func (*ReqLeaveChannel) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{24}
}

func (x *ReqLeaveChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqLeaveChannel) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqLeaveChannel) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqLeaveChannel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 请求给定channel
type ReqGetChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelIds []int32       `protobuf:"varint,1,rep,packed,name=channelIds,proto3" json:"channelIds,omitempty"`
	FromId     int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChannels) Reset() {
	*x = ReqGetChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannels) ProtoMessage() {}

func (x *ReqGetChannels) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannels.ProtoReflect.Descriptor instead.
func (*ReqGetChannels) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{25}
}

func (x *ReqGetChannels) GetChannelIds() []int32 {
	if x != nil {
		return x.ChannelIds
	}
	return nil
}

func (x *ReqGetChannels) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetChannels) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqEditBanChannelUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId              int32                `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId           int64                `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId           int32                `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	BannedUserId        int32                `protobuf:"varint,4,opt,name=bannedUserId,proto3" json:"bannedUserId,omitempty"`
	AccessHash          int64                `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	UtilDate            int32                `protobuf:"varint,6,opt,name=util_date,json=utilDate,proto3" json:"util_date,omitempty"`
	ChannelBannedRights *ChannelBannedRights `protobuf:"bytes,7,opt,name=channelBannedRights,proto3" json:"channelBannedRights,omitempty"`
	Debug               *pbcomm.Debug        `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditBanChannelUser) Reset() {
	*x = ReqEditBanChannelUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditBanChannelUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditBanChannelUser) ProtoMessage() {}

func (x *ReqEditBanChannelUser) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditBanChannelUser.ProtoReflect.Descriptor instead.
func (*ReqEditBanChannelUser) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{26}
}

func (x *ReqEditBanChannelUser) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqEditBanChannelUser) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqEditBanChannelUser) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqEditBanChannelUser) GetBannedUserId() int32 {
	if x != nil {
		return x.BannedUserId
	}
	return 0
}

func (x *ReqEditBanChannelUser) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqEditBanChannelUser) GetUtilDate() int32 {
	if x != nil {
		return x.UtilDate
	}
	return 0
}

func (x *ReqEditBanChannelUser) GetChannelBannedRights() *ChannelBannedRights {
	if x != nil {
		return x.ChannelBannedRights
	}
	return nil
}

func (x *ReqEditBanChannelUser) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ChannelBannedRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags        int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	ViewMessages bool  `protobuf:"varint,2,opt,name=view_messages,json=viewMessages,proto3" json:"view_messages,omitempty"`
	SendMessages bool  `protobuf:"varint,3,opt,name=send_messages,json=sendMessages,proto3" json:"send_messages,omitempty"`
	SendMedia    bool  `protobuf:"varint,4,opt,name=send_media,json=sendMedia,proto3" json:"send_media,omitempty"`
	SendStickers bool  `protobuf:"varint,5,opt,name=send_stickers,json=sendStickers,proto3" json:"send_stickers,omitempty"`
	SendGifs     bool  `protobuf:"varint,6,opt,name=send_gifs,json=sendGifs,proto3" json:"send_gifs,omitempty"`
	SendGames    bool  `protobuf:"varint,7,opt,name=send_games,json=sendGames,proto3" json:"send_games,omitempty"`
	SendInline   bool  `protobuf:"varint,8,opt,name=send_inline,json=sendInline,proto3" json:"send_inline,omitempty"`
	EmbedLinks   bool  `protobuf:"varint,9,opt,name=embed_links,json=embedLinks,proto3" json:"embed_links,omitempty"`
	UntilDate    int32 `protobuf:"varint,10,opt,name=until_date,json=untilDate,proto3" json:"until_date,omitempty"`
}

func (x *ChannelBannedRights) Reset() {
	*x = ChannelBannedRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelBannedRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelBannedRights) ProtoMessage() {}

func (x *ChannelBannedRights) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelBannedRights.ProtoReflect.Descriptor instead.
func (*ChannelBannedRights) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{27}
}

func (x *ChannelBannedRights) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ChannelBannedRights) GetViewMessages() bool {
	if x != nil {
		return x.ViewMessages
	}
	return false
}

func (x *ChannelBannedRights) GetSendMessages() bool {
	if x != nil {
		return x.SendMessages
	}
	return false
}

func (x *ChannelBannedRights) GetSendMedia() bool {
	if x != nil {
		return x.SendMedia
	}
	return false
}

func (x *ChannelBannedRights) GetSendStickers() bool {
	if x != nil {
		return x.SendStickers
	}
	return false
}

func (x *ChannelBannedRights) GetSendGifs() bool {
	if x != nil {
		return x.SendGifs
	}
	return false
}

func (x *ChannelBannedRights) GetSendGames() bool {
	if x != nil {
		return x.SendGames
	}
	return false
}

func (x *ChannelBannedRights) GetSendInline() bool {
	if x != nil {
		return x.SendInline
	}
	return false
}

func (x *ChannelBannedRights) GetEmbedLinks() bool {
	if x != nil {
		return x.EmbedLinks
	}
	return false
}

func (x *ChannelBannedRights) GetUntilDate() int32 {
	if x != nil {
		return x.UntilDate
	}
	return 0
}

type GetChannelInactiveUsersResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*ChannelInactiveUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Count int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"` //群当前总人数
}

func (x *GetChannelInactiveUsersResult) Reset() {
	*x = GetChannelInactiveUsersResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelInactiveUsersResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelInactiveUsersResult) ProtoMessage() {}

func (x *GetChannelInactiveUsersResult) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelInactiveUsersResult.ProtoReflect.Descriptor instead.
func (*GetChannelInactiveUsersResult) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{28}
}

func (x *GetChannelInactiveUsersResult) GetUsers() []*ChannelInactiveUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetChannelInactiveUsersResult) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ChannelInactiveUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`          //用户ID
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`       //用户名
	Time    int32  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`      //活跃时间
	TimeStr string `protobuf:"bytes,4,opt,name=timeStr,proto3" json:"timeStr,omitempty"` //活跃时间格式化字符串
}

func (x *ChannelInactiveUser) Reset() {
	*x = ChannelInactiveUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInactiveUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInactiveUser) ProtoMessage() {}

func (x *ChannelInactiveUser) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInactiveUser.ProtoReflect.Descriptor instead.
func (*ChannelInactiveUser) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{29}
}

func (x *ChannelInactiveUser) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelInactiveUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelInactiveUser) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ChannelInactiveUser) GetTimeStr() string {
	if x != nil {
		return x.TimeStr
	}
	return ""
}

// 获取fullchannel
type ReqGetFullChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChannelId  int32         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetFullChannel) Reset() {
	*x = ReqGetFullChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetFullChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetFullChannel) ProtoMessage() {}

func (x *ReqGetFullChannel) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetFullChannel.ProtoReflect.Descriptor instead.
func (*ReqGetFullChannel) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{30}
}

func (x *ReqGetFullChannel) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetFullChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetFullChannel) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqGetFullChannel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回fullchannel
type ReplyFullChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates   []byte `protobuf:"bytes,1,opt,name=Updates,proto3" json:"Updates,omitempty"` // 二进制，真实类型是mtproto.tl_updates_layer62
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyFullChannel) Reset() {
	*x = ReplyFullChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyFullChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyFullChannel) ProtoMessage() {}

func (x *ReplyFullChannel) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyFullChannel.ProtoReflect.Descriptor instead.
func (*ReplyFullChannel) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{31}
}

func (x *ReplyFullChannel) GetUpdates() []byte {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *ReplyFullChannel) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// add by Qingsong at 2019-11-06 for call channel server to handler toggle slow mode
type HandleToggleSlowModeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChnlId  int32 `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`
	HashId  int64 `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`
	UserId  int32 `protobuf:"varint,3,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"` // 用于鉴权
	Seconds int32 `protobuf:"varint,4,opt,name=Seconds,proto3" json:"Seconds,omitempty"`
}

func (x *HandleToggleSlowModeReq) Reset() {
	*x = HandleToggleSlowModeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleToggleSlowModeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleToggleSlowModeReq) ProtoMessage() {}

func (x *HandleToggleSlowModeReq) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleToggleSlowModeReq.ProtoReflect.Descriptor instead.
func (*HandleToggleSlowModeReq) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{32}
}

func (x *HandleToggleSlowModeReq) GetChnlId() int32 {
	if x != nil {
		return x.ChnlId
	}
	return 0
}

func (x *HandleToggleSlowModeReq) GetHashId() int64 {
	if x != nil {
		return x.HashId
	}
	return 0
}

func (x *HandleToggleSlowModeReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *HandleToggleSlowModeReq) GetSeconds() int32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

type HandleToggleSlowModeRsq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results bool `protobuf:"varint,1,opt,name=Results,proto3" json:"Results,omitempty"` // 返回给IM成功或失败
}

func (x *HandleToggleSlowModeRsq) Reset() {
	*x = HandleToggleSlowModeRsq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleToggleSlowModeRsq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleToggleSlowModeRsq) ProtoMessage() {}

func (x *HandleToggleSlowModeRsq) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleToggleSlowModeRsq.ProtoReflect.Descriptor instead.
func (*HandleToggleSlowModeRsq) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{33}
}

func (x *HandleToggleSlowModeRsq) GetResults() bool {
	if x != nil {
		return x.Results
	}
	return false
}

// @ add by Qingsong at 2019-11-21 for channel toggle signatures
type HandleToggleSignaturesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChnlId  int32 `protobuf:"varint,1,opt,name=chnl_id,json=chnlId,proto3" json:"chnl_id,omitempty"`
	HashId  int64 `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`
	Is_Sign bool  `protobuf:"varint,3,opt,name=Is_Sign,json=IsSign,proto3" json:"Is_Sign,omitempty"`
}

func (x *HandleToggleSignaturesReq) Reset() {
	*x = HandleToggleSignaturesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleToggleSignaturesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleToggleSignaturesReq) ProtoMessage() {}

func (x *HandleToggleSignaturesReq) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleToggleSignaturesReq.ProtoReflect.Descriptor instead.
func (*HandleToggleSignaturesReq) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{34}
}

func (x *HandleToggleSignaturesReq) GetChnlId() int32 {
	if x != nil {
		return x.ChnlId
	}
	return 0
}

func (x *HandleToggleSignaturesReq) GetHashId() int64 {
	if x != nil {
		return x.HashId
	}
	return 0
}

func (x *HandleToggleSignaturesReq) GetIs_Sign() bool {
	if x != nil {
		return x.Is_Sign
	}
	return false
}

type HandleToggleSignaturesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results bool `protobuf:"varint,1,opt,name=Results,proto3" json:"Results,omitempty"` // 返回给IM成功或失败
}

func (x *HandleToggleSignaturesRsp) Reset() {
	*x = HandleToggleSignaturesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleToggleSignaturesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleToggleSignaturesRsp) ProtoMessage() {}

func (x *HandleToggleSignaturesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleToggleSignaturesRsp.ProtoReflect.Descriptor instead.
func (*HandleToggleSignaturesRsp) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{35}
}

func (x *HandleToggleSignaturesRsp) GetResults() bool {
	if x != nil {
		return x.Results
	}
	return false
}

// @ add by Qingsong at 2019-12-02 for im call channel server to toggle channel's history hidden.
type ChannelToggleHistoryHiddenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChnlId int32 `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`
	HashId int64 `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`
	FromId int32 `protobuf:"varint,3,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`
	UserId int32 `protobuf:"varint,4,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	IsHide bool  `protobuf:"varint,5,opt,name=Is_hide,json=IsHide,proto3" json:"Is_hide,omitempty"`
}

func (x *ChannelToggleHistoryHiddenReq) Reset() {
	*x = ChannelToggleHistoryHiddenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelToggleHistoryHiddenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelToggleHistoryHiddenReq) ProtoMessage() {}

func (x *ChannelToggleHistoryHiddenReq) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelToggleHistoryHiddenReq.ProtoReflect.Descriptor instead.
func (*ChannelToggleHistoryHiddenReq) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{36}
}

func (x *ChannelToggleHistoryHiddenReq) GetChnlId() int32 {
	if x != nil {
		return x.ChnlId
	}
	return 0
}

func (x *ChannelToggleHistoryHiddenReq) GetHashId() int64 {
	if x != nil {
		return x.HashId
	}
	return 0
}

func (x *ChannelToggleHistoryHiddenReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ChannelToggleHistoryHiddenReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChannelToggleHistoryHiddenReq) GetIsHide() bool {
	if x != nil {
		return x.IsHide
	}
	return false
}

type ChannelToggleHistoryHiddenRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results   bool   `protobuf:"varint,1,opt,name=Results,proto3" json:"Results,omitempty"`    // handler success or failed.
	ReplyByte []byte `protobuf:"bytes,2,opt,name=ReplyByte,proto3" json:"ReplyByte,omitempty"` // mtproto.TL_updates_layer62
}

func (x *ChannelToggleHistoryHiddenRsp) Reset() {
	*x = ChannelToggleHistoryHiddenRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelToggleHistoryHiddenRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelToggleHistoryHiddenRsp) ProtoMessage() {}

func (x *ChannelToggleHistoryHiddenRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelToggleHistoryHiddenRsp.ProtoReflect.Descriptor instead.
func (*ChannelToggleHistoryHiddenRsp) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{37}
}

func (x *ChannelToggleHistoryHiddenRsp) GetResults() bool {
	if x != nil {
		return x.Results
	}
	return false
}

func (x *ChannelToggleHistoryHiddenRsp) GetReplyByte() []byte {
	if x != nil {
		return x.ReplyByte
	}
	return nil
}

// @ add by qingsong at 2019-12-23 for im call channel server to set channel ban mode.
type SetChannelBanModeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChnlId  int32 `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`    // channel id
	HashId  int64 `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`    // access hash
	FromId  int32 `protobuf:"varint,3,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`    // form id
	BanMode bool  `protobuf:"varint,4,opt,name=Ban_mode,json=BanMode,proto3" json:"Ban_mode,omitempty"` // ban mode
}

func (x *SetChannelBanModeReq) Reset() {
	*x = SetChannelBanModeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChannelBanModeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChannelBanModeReq) ProtoMessage() {}

func (x *SetChannelBanModeReq) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChannelBanModeReq.ProtoReflect.Descriptor instead.
func (*SetChannelBanModeReq) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{38}
}

func (x *SetChannelBanModeReq) GetChnlId() int32 {
	if x != nil {
		return x.ChnlId
	}
	return 0
}

func (x *SetChannelBanModeReq) GetHashId() int64 {
	if x != nil {
		return x.HashId
	}
	return 0
}

func (x *SetChannelBanModeReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *SetChannelBanModeReq) GetBanMode() bool {
	if x != nil {
		return x.BanMode
	}
	return false
}

type SetChannelBanModeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyCode int32  `protobuf:"varint,1,opt,name=Reply_code,json=ReplyCode,proto3" json:"Reply_code,omitempty"` // reply code
	ReplyBuff []byte `protobuf:"bytes,2,opt,name=Reply_buff,json=ReplyBuff,proto3" json:"Reply_buff,omitempty"`  // reply buff
}

func (x *SetChannelBanModeRsp) Reset() {
	*x = SetChannelBanModeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChannelBanModeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChannelBanModeRsp) ProtoMessage() {}

func (x *SetChannelBanModeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChannelBanModeRsp.ProtoReflect.Descriptor instead.
func (*SetChannelBanModeRsp) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{39}
}

func (x *SetChannelBanModeRsp) GetReplyCode() int32 {
	if x != nil {
		return x.ReplyCode
	}
	return 0
}

func (x *SetChannelBanModeRsp) GetReplyBuff() []byte {
	if x != nil {
		return x.ReplyBuff
	}
	return nil
}

type RestrictChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32  `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	Platfrom  string `protobuf:"bytes,2,opt,name=Platfrom,proto3" json:"Platfrom,omitempty"`
	Reason    string `protobuf:"bytes,3,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Text      string `protobuf:"bytes,4,opt,name=Text,proto3" json:"Text,omitempty"`
}

func (x *RestrictChannelReq) Reset() {
	*x = RestrictChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestrictChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestrictChannelReq) ProtoMessage() {}

func (x *RestrictChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestrictChannelReq.ProtoReflect.Descriptor instead.
func (*RestrictChannelReq) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{40}
}

func (x *RestrictChannelReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *RestrictChannelReq) GetPlatfrom() string {
	if x != nil {
		return x.Platfrom
	}
	return ""
}

func (x *RestrictChannelReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RestrictChannelReq) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type RestrictChannelRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyCode int32  `protobuf:"varint,1,opt,name=Reply_code,json=ReplyCode,proto3" json:"Reply_code,omitempty"`
	ReplyInfo string `protobuf:"bytes,2,opt,name=Reply_info,json=ReplyInfo,proto3" json:"Reply_info,omitempty"`
}

func (x *RestrictChannelRsp) Reset() {
	*x = RestrictChannelRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestrictChannelRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestrictChannelRsp) ProtoMessage() {}

func (x *RestrictChannelRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestrictChannelRsp.ProtoReflect.Descriptor instead.
func (*RestrictChannelRsp) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{41}
}

func (x *RestrictChannelRsp) GetReplyCode() int32 {
	if x != nil {
		return x.ReplyCode
	}
	return 0
}

func (x *RestrictChannelRsp) GetReplyInfo() string {
	if x != nil {
		return x.ReplyInfo
	}
	return ""
}

// add by qingsong at 2020-05-11 for receive game rdp
type RecvGameRDPReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32         `protobuf:"varint,1,opt,name=FromId,proto3" json:"FromId,omitempty"`
	FromKeyId  int64         `protobuf:"varint,2,opt,name=FromKeyId,proto3" json:"FromKeyId,omitempty"`
	ChannelId  int32         `protobuf:"varint,3,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	MessageId  int32         `protobuf:"varint,5,opt,name=MessageId,proto3" json:"MessageId,omitempty"`
	DataJson   []byte        `protobuf:"bytes,6,opt,name=DataJson,proto3" json:"DataJson,omitempty"`
	Dbg        *pbcomm.Debug `protobuf:"bytes,7,opt,name=dbg,proto3" json:"dbg,omitempty"`
}

func (x *RecvGameRDPReq) Reset() {
	*x = RecvGameRDPReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecvGameRDPReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvGameRDPReq) ProtoMessage() {}

func (x *RecvGameRDPReq) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvGameRDPReq.ProtoReflect.Descriptor instead.
func (*RecvGameRDPReq) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{42}
}

func (x *RecvGameRDPReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *RecvGameRDPReq) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *RecvGameRDPReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *RecvGameRDPReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *RecvGameRDPReq) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *RecvGameRDPReq) GetDataJson() []byte {
	if x != nil {
		return x.DataJson
	}
	return nil
}

func (x *RecvGameRDPReq) GetDbg() *pbcomm.Debug {
	if x != nil {
		return x.Dbg
	}
	return nil
}

type RecvGameRDPRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  []byte `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ErrCode int32  `protobuf:"varint,2,opt,name=Err_code,json=ErrCode,proto3" json:"Err_code,omitempty"`
	ErrInfo string `protobuf:"bytes,3,opt,name=Err_info,json=ErrInfo,proto3" json:"Err_info,omitempty"`
}

func (x *RecvGameRDPRsp) Reset() {
	*x = RecvGameRDPRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imchannelserver_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecvGameRDPRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvGameRDPRsp) ProtoMessage() {}

func (x *RecvGameRDPRsp) ProtoReflect() protoreflect.Message {
	mi := &file_imchannelserver_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvGameRDPRsp.ProtoReflect.Descriptor instead.
func (*RecvGameRDPRsp) Descriptor() ([]byte, []int) {
	return file_imchannelserver_proto_rawDescGZIP(), []int{43}
}

func (x *RecvGameRDPRsp) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RecvGameRDPRsp) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *RecvGameRDPRsp) GetErrInfo() string {
	if x != nil {
		return x.ErrInfo
	}
	return ""
}

var File_imchannelserver_proto protoreflect.FileDescriptor

var file_imchannelserver_proto_rawDesc = []byte{
	0x0a, 0x15, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x13, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2f, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01,
	0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x64, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x71, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x64, 0x70, 0x52,
	0x73, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x52, 0x64, 0x70, 0x52, 0x73, 0x70,
	0x12, 0x1f, 0x0a, 0x03, 0x44, 0x62, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x03, 0x44, 0x62,
	0x67, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x52, 0x63, 0x76, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x64, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x71,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x64, 0x70, 0x52, 0x73, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x52, 0x64, 0x70,
	0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x03, 0x44, 0x62, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x03, 0x44, 0x62, 0x67, 0x22, 0x92, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x64, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x72, 0x6f,
	0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x52, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x64, 0x70, 0x52, 0x73, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x52, 0x64, 0x70, 0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x03, 0x44, 0x62, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x03, 0x44, 0x62, 0x67, 0x22, 0x78, 0x0a, 0x0d, 0x51, 0x72, 0x79,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x64, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72,
	0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46,
	0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x03, 0x44, 0x62, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x03,
	0x44, 0x62, 0x67, 0x22, 0x7b, 0x0a, 0x10, 0x51, 0x72, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69,
	0x73, 0x52, 0x64, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x52, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x03, 0x44, 0x62, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x03, 0x44, 0x62, 0x67,
	0x22, 0x56, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x73, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x50,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x50, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x22, 0x7d, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x64, 0x70, 0x52, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4d, 0x73, 0x67, 0x12, 0x31, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x87, 0x03, 0x0a, 0x15, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x63, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x72, 0x63, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x62,
	0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x42, 0x69, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x73, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x41, 0x50, 0x49, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x41, 0x50,
	0x49, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x22, 0x30, 0x0a, 0x16, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xdd, 0x03, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66,
	0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x77, 0x65, 0x62, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x57, 0x65, 0x62,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x12, 0x25, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b,
	0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x76, 0x69, 0x61, 0x5f, 0x62, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x69, 0x61, 0x42, 0x6f,
	0x74, 0x49, 0x64, 0x22, 0xec, 0x03, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x74, 0x6f, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x75,
	0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61,
	0x72, 0x6b, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x66, 0x69, 0x6c, 0x65, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x66, 0x69, 0x6c, 0x65,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x6d, 0x65, 0x62, 0x65, 0x72, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x6d, 0x65, 0x62, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x12, 0x1c, 0x0a, 0x0a, 0x76, 0x69, 0x61, 0x5f, 0x62, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x69, 0x61, 0x42, 0x6f, 0x74,
	0x49, 0x64, 0x22, 0x4f, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x83, 0x03, 0x0a, 0x15, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b,
	0x65, 0x79, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d,
	0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x6f, 0x5f, 0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6e, 0x6f, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x53, 0x74,
	0x6f, 0x70, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x47, 0x65, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x47,
	0x65, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x69, 0x61, 0x42,
	0x6f, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x56, 0x69, 0x61, 0x42,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4c, 0x0a, 0x11, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x47, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x48, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0e, 0x52,
	0x65, 0x71, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66,
	0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x40, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x47, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x68, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x61,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x0c,
	0x0a, 0x01, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xfd, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x4a, 0x6f, 0x69,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62,
	0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x4b, 0x69, 0x63,
	0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6b, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x4b, 0x69, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4b, 0x69, 0x63, 0x6b,
	0x65, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65,
	0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x6d, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xc9, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69,
	0x74, 0x42, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x74, 0x69, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x74, 0x69, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0xd6, 0x02, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x69, 0x66, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x73, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x22, 0x71, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x67, 0x0a,
	0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4b, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x7e, 0x0a, 0x17, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x43, 0x68, 0x6e, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x43, 0x68, 0x6e, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x61, 0x73, 0x68, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0x33, 0x0a, 0x17, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x66, 0x0a, 0x19, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x6e, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6e, 0x6c, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x48, 0x61, 0x73, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x49, 0x73, 0x5f, 0x53,
	0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x53, 0x69, 0x67,
	0x6e, 0x22, 0x35, 0x0a, 0x19, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x1d, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x43, 0x68,
	0x6e, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x68, 0x6e,
	0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x61, 0x73, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x46, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46,
	0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x49, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x49, 0x73, 0x48, 0x69, 0x64, 0x65, 0x22, 0x57, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x74, 0x65,
	0x22, 0x7c, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x43, 0x68, 0x6e, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x68, 0x6e, 0x6c, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x48, 0x61, 0x73, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x46, 0x72,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x42, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x54,
	0x0a, 0x14, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x42, 0x75, 0x66, 0x66, 0x22, 0x7b, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78,
	0x74, 0x22, 0x52, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xdf, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x76, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x44, 0x50, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61,
	0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x44, 0x61,
	0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x03, 0x64, 0x62, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x03, 0x64, 0x62, 0x67, 0x22, 0x5e, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x76, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x44, 0x50, 0x52, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x45, 0x72, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x45, 0x72, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xf8, 0x2d, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x14, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x4b,
	0x69, 0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x26,
	0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x66, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27,
	0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x45, 0x64, 0x69, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x69, 0x6d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x63,
	0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x45, 0x64, 0x69, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x45, 0x64, 0x69, 0x74,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x45, 0x64, 0x69, 0x74, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6d, 0x0a,
	0x18, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x10,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x69,
	0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x26, 0x2e, 0x69,
	0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x45, 0x64, 0x69, 0x74, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x47, 0x65,
	0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x26, 0x2e, 0x69,
	0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x22, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x46, 0x75, 0x6c,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x13, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x69,
	0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x66, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69,
	0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x26, 0x2e,
	0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x65, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69,
	0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x45, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x69, 0x65, 0x74, 0x12, 0x26, 0x2e,
	0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x6b, 0x0a, 0x16, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x65, 0x0a,
	0x10, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x2e, 0x69, 0x6d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x68,
	0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x18, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69,
	0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x47, 0x65, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x17, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27,
	0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x10, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x24, 0x2e,
	0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6a,
	0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x45, 0x64,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x17, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x45, 0x64, 0x69, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26,
	0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x66, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x69,
	0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x1a, 0x22, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x4a, 0x6f, 0x69, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4a,
	0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0c,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x2e, 0x69,
	0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x22,
	0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x00, 0x12, 0x78,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x2e, 0x69, 0x6d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x12, 0x45, 0x64, 0x69, 0x74,
	0x42, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26,
	0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x42, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x61,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x62,
	0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x70, 0x6d, 0x12,
	0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x70, 0x6d, 0x56, 0x32, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x70, 0x6d, 0x12, 0x26, 0x2e, 0x69, 0x6d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x66,
	0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x70,
	0x6d, 0x56, 0x32, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53,
	0x65, 0x6e, 0x64, 0x52, 0x70, 0x6d, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27,
	0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x70, 0x6d, 0x56, 0x32, 0x12, 0x26, 0x2e, 0x69, 0x6d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6d,
	0x0a, 0x15, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x6c,
	0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x28, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x53, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x71, 0x22, 0x00, 0x12, 0x72, 0x0a,
	0x16, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x63, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x64, 0x70, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x64, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x64, 0x70, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x52, 0x63, 0x76, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x64, 0x70, 0x12, 0x1e, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x63, 0x76, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x64, 0x70, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x64, 0x70, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x64,
	0x70, 0x12, 0x20, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x64, 0x70,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x64, 0x70, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x51, 0x72, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x64, 0x70,
	0x12, 0x1e, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x51, 0x72, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x64, 0x70, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x64, 0x70, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x51, 0x0a, 0x0d, 0x51, 0x72, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x52, 0x64, 0x70,
	0x12, 0x21, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x51, 0x72, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x52, 0x64, 0x70,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x64, 0x70, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x42, 0x21, 0x5a, 0x1f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70,
	0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_imchannelserver_proto_rawDescOnce sync.Once
	file_imchannelserver_proto_rawDescData = file_imchannelserver_proto_rawDesc
)

func file_imchannelserver_proto_rawDescGZIP() []byte {
	file_imchannelserver_proto_rawDescOnce.Do(func() {
		file_imchannelserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_imchannelserver_proto_rawDescData)
	})
	return file_imchannelserver_proto_rawDescData
}

var file_imchannelserver_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_imchannelserver_proto_goTypes = []interface{}{
	(*SendGameRdpReq)(nil),                // 0: imchannelserver.SendGameRdpReq
	(*RcvGameRdpReq)(nil),                 // 1: imchannelserver.RcvGameRdpReq
	(*CheckGameRdpReq)(nil),               // 2: imchannelserver.CheckGameRdpReq
	(*QryGameRdpReq)(nil),                 // 3: imchannelserver.QryGameRdpReq
	(*QryGameHisRdpReq)(nil),              // 4: imchannelserver.QryGameHisRdpReq
	(*ChatMsgsMeta)(nil),                  // 5: imchannelserver.ChatMsgsMeta
	(*GameRdpRsp)(nil),                    // 6: imchannelserver.GameRdpRsp
	(*HandleLogicChannelReq)(nil),         // 7: imchannelserver.HandleLogicChannelReq
	(*HandleLogicChannelResp)(nil),        // 8: imchannelserver.HandleLogicChannelResp
	(*SendChannelMessageReq)(nil),         // 9: imchannelserver.SendChannelMessageReq
	(*SendChannelMediaReq)(nil),           // 10: imchannelserver.SendChannelMediaReq
	(*SendChannelMessageResp)(nil),        // 11: imchannelserver.SendChannelMessageResp
	(*EditChannelMessageReq)(nil),         // 12: imchannelserver.EditChannelMessageReq
	(*ReplyParticipants)(nil),             // 13: imchannelserver.ReplyParticipants
	(*ReplyJoinChannel)(nil),              // 14: imchannelserver.ReplyJoinChannel
	(*ReplyLeaveChannel)(nil),             // 15: imchannelserver.ReplyLeaveChannel
	(*ReqMigrateChat)(nil),                // 16: imchannelserver.ReqMigrateChat
	(*ReplyMigrateChat)(nil),              // 17: imchannelserver.ReplyMigrateChat
	(*ReplyGetChannels)(nil),              // 18: imchannelserver.ReplyGetChannels
	(*GetChannelInactiveUsersReq)(nil),    // 19: imchannelserver.GetChannelInactiveUsersReq
	(*ReplyBanChannelUser)(nil),           // 20: imchannelserver.ReplyBanChannelUser
	(*ReqGetParticipants)(nil),            // 21: imchannelserver.ReqGetParticipants
	(*ReqJoinChannel)(nil),                // 22: imchannelserver.ReqJoinChannel
	(*ReqKickFromChannel)(nil),            // 23: imchannelserver.ReqKickFromChannel
	(*ReqLeaveChannel)(nil),               // 24: imchannelserver.ReqLeaveChannel
	(*ReqGetChannels)(nil),                // 25: imchannelserver.ReqGetChannels
	(*ReqEditBanChannelUser)(nil),         // 26: imchannelserver.ReqEditBanChannelUser
	(*ChannelBannedRights)(nil),           // 27: imchannelserver.ChannelBannedRights
	(*GetChannelInactiveUsersResult)(nil), // 28: imchannelserver.GetChannelInactiveUsersResult
	(*ChannelInactiveUser)(nil),           // 29: imchannelserver.ChannelInactiveUser
	(*ReqGetFullChannel)(nil),             // 30: imchannelserver.ReqGetFullChannel
	(*ReplyFullChannel)(nil),              // 31: imchannelserver.ReplyFullChannel
	(*HandleToggleSlowModeReq)(nil),       // 32: imchannelserver.HandleToggleSlowModeReq
	(*HandleToggleSlowModeRsq)(nil),       // 33: imchannelserver.HandleToggleSlowModeRsq
	(*HandleToggleSignaturesReq)(nil),     // 34: imchannelserver.HandleToggleSignaturesReq
	(*HandleToggleSignaturesRsp)(nil),     // 35: imchannelserver.HandleToggleSignaturesRsp
	(*ChannelToggleHistoryHiddenReq)(nil), // 36: imchannelserver.ChannelToggleHistoryHiddenReq
	(*ChannelToggleHistoryHiddenRsp)(nil), // 37: imchannelserver.ChannelToggleHistoryHiddenRsp
	(*SetChannelBanModeReq)(nil),          // 38: imchannelserver.SetChannelBanModeReq
	(*SetChannelBanModeRsp)(nil),          // 39: imchannelserver.SetChannelBanModeRsp
	(*RestrictChannelReq)(nil),            // 40: imchannelserver.RestrictChannelReq
	(*RestrictChannelRsp)(nil),            // 41: imchannelserver.RestrictChannelRsp
	(*RecvGameRDPReq)(nil),                // 42: imchannelserver.RecvGameRDPReq
	(*RecvGameRDPRsp)(nil),                // 43: imchannelserver.RecvGameRDPRsp
	(*pbcomm.Debug)(nil),                  // 44: pbcomm.Debug
}
var file_imchannelserver_proto_depIdxs = []int32{
	44, // 0: imchannelserver.SendGameRdpReq.Dbg:type_name -> pbcomm.Debug
	44, // 1: imchannelserver.RcvGameRdpReq.Dbg:type_name -> pbcomm.Debug
	44, // 2: imchannelserver.CheckGameRdpReq.Dbg:type_name -> pbcomm.Debug
	44, // 3: imchannelserver.QryGameRdpReq.Dbg:type_name -> pbcomm.Debug
	44, // 4: imchannelserver.QryGameHisRdpReq.Dbg:type_name -> pbcomm.Debug
	5,  // 5: imchannelserver.GameRdpRsp.Meta:type_name -> imchannelserver.ChatMsgsMeta
	44, // 6: imchannelserver.SendChannelMessageReq.debug:type_name -> pbcomm.Debug
	44, // 7: imchannelserver.SendChannelMediaReq.debug:type_name -> pbcomm.Debug
	44, // 8: imchannelserver.EditChannelMessageReq.debug:type_name -> pbcomm.Debug
	44, // 9: imchannelserver.ReqMigrateChat.debug:type_name -> pbcomm.Debug
	44, // 10: imchannelserver.ReqGetParticipants.debug:type_name -> pbcomm.Debug
	44, // 11: imchannelserver.ReqJoinChannel.debug:type_name -> pbcomm.Debug
	44, // 12: imchannelserver.ReqKickFromChannel.debug:type_name -> pbcomm.Debug
	44, // 13: imchannelserver.ReqLeaveChannel.debug:type_name -> pbcomm.Debug
	44, // 14: imchannelserver.ReqGetChannels.debug:type_name -> pbcomm.Debug
	27, // 15: imchannelserver.ReqEditBanChannelUser.channelBannedRights:type_name -> imchannelserver.ChannelBannedRights
	44, // 16: imchannelserver.ReqEditBanChannelUser.debug:type_name -> pbcomm.Debug
	29, // 17: imchannelserver.GetChannelInactiveUsersResult.users:type_name -> imchannelserver.ChannelInactiveUser
	44, // 18: imchannelserver.ReqGetFullChannel.debug:type_name -> pbcomm.Debug
	44, // 19: imchannelserver.RecvGameRDPReq.dbg:type_name -> pbcomm.Debug
	7,  // 20: imchannelserver.ServerService.LogicCheckUserName:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 21: imchannelserver.ServerService.LogicCreateChannel:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 22: imchannelserver.ServerService.LogicInviteToChannel:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 23: imchannelserver.ServerService.LogicKickFromChannel:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 24: imchannelserver.ServerService.LogicLeaveChannel:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 25: imchannelserver.ServerService.LogicEditTitle:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 26: imchannelserver.ServerService.LogicEditAdmin:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 27: imchannelserver.ServerService.LogicEditPhoto:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 28: imchannelserver.ServerService.LogicEditAbout:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 29: imchannelserver.ServerService.LogicUpdatePinnedMessage:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 30: imchannelserver.ServerService.LogicJoinChannel:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 31: imchannelserver.ServerService.LogicImportChatInvite:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 32: imchannelserver.ServerService.LogicDeleteChannel:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 33: imchannelserver.ServerService.LogicGetAdminLog:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 34: imchannelserver.ServerService.LogicEditBanned:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 35: imchannelserver.ServerService.LogicGetFullChannel:input_type -> imchannelserver.HandleLogicChannelReq
	30, // 36: imchannelserver.ServerService.GetFullChannel:input_type -> imchannelserver.ReqGetFullChannel
	7,  // 37: imchannelserver.ServerService.LogicGetParticipant:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 38: imchannelserver.ServerService.LogicGetParticipants:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 39: imchannelserver.ServerService.LogicExportInvite:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 40: imchannelserver.ServerService.LogicToggleInvites:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 41: imchannelserver.ServerService.LogicGetChannels:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 42: imchannelserver.ServerService.LogicEveryoneQuiet:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 43: imchannelserver.ServerService.LogicExportMessageLink:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 44: imchannelserver.ServerService.LogicPrivateChat:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 45: imchannelserver.ServerService.LogicUpdateUsername:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 46: imchannelserver.ServerService.LogicDeleteMessages:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 47: imchannelserver.ServerService.LogicReadMessageContents:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 48: imchannelserver.ServerService.LogicGetLeftChannels:input_type -> imchannelserver.HandleLogicChannelReq
	9,  // 49: imchannelserver.ServerService.SendChannelMessage:input_type -> imchannelserver.SendChannelMessageReq
	7,  // 50: imchannelserver.ServerService.LogicSendChannelMessage:input_type -> imchannelserver.HandleLogicChannelReq
	10, // 51: imchannelserver.ServerService.SendChannelMedia:input_type -> imchannelserver.SendChannelMediaReq
	7,  // 52: imchannelserver.ServerService.LogicSendChannelMedia:input_type -> imchannelserver.HandleLogicChannelReq
	12, // 53: imchannelserver.ServerService.EditChannelMessage:input_type -> imchannelserver.EditChannelMessageReq
	7,  // 54: imchannelserver.ServerService.LogicEditChannelMessage:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 55: imchannelserver.ServerService.MessagesMigrateChat:input_type -> imchannelserver.HandleLogicChannelReq
	21, // 56: imchannelserver.ServerService.GetParticipants:input_type -> imchannelserver.ReqGetParticipants
	22, // 57: imchannelserver.ServerService.JoinChannel:input_type -> imchannelserver.ReqJoinChannel
	24, // 58: imchannelserver.ServerService.LeaveChannel:input_type -> imchannelserver.ReqLeaveChannel
	16, // 59: imchannelserver.ServerService.MigrateChat:input_type -> imchannelserver.ReqMigrateChat
	25, // 60: imchannelserver.ServerService.Getchannels:input_type -> imchannelserver.ReqGetChannels
	19, // 61: imchannelserver.ServerService.GetChannelInactiveUsers:input_type -> imchannelserver.GetChannelInactiveUsersReq
	26, // 62: imchannelserver.ServerService.EditBanChannelUser:input_type -> imchannelserver.ReqEditBanChannelUser
	7,  // 63: imchannelserver.ServerService.LogicCheckRpm:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 64: imchannelserver.ServerService.LogicCheckRpmV2:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 65: imchannelserver.ServerService.LogicReceiveRpm:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 66: imchannelserver.ServerService.LogicReceiveRpmV2:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 67: imchannelserver.ServerService.LogicSendRpm:input_type -> imchannelserver.HandleLogicChannelReq
	7,  // 68: imchannelserver.ServerService.LogicSendRpmV2:input_type -> imchannelserver.HandleLogicChannelReq
	32, // 69: imchannelserver.ServerService.HandleToggleSlowModel:input_type -> imchannelserver.HandleToggleSlowModeReq
	34, // 70: imchannelserver.ServerService.HandleToggleSignatures:input_type -> imchannelserver.HandleToggleSignaturesReq
	38, // 71: imchannelserver.ServerService.SetChannelBanMode:input_type -> imchannelserver.SetChannelBanModeReq
	40, // 72: imchannelserver.ServerService.RestrictChannel:input_type -> imchannelserver.RestrictChannelReq
	0,  // 73: imchannelserver.ServerService.SendGameRdp:input_type -> imchannelserver.SendGameRdpReq
	1,  // 74: imchannelserver.ServerService.RcvGameRdp:input_type -> imchannelserver.RcvGameRdpReq
	2,  // 75: imchannelserver.ServerService.CheckGameRdp:input_type -> imchannelserver.CheckGameRdpReq
	3,  // 76: imchannelserver.ServerService.QryGameRdp:input_type -> imchannelserver.QryGameRdpReq
	4,  // 77: imchannelserver.ServerService.QryGameHisRdp:input_type -> imchannelserver.QryGameHisRdpReq
	8,  // 78: imchannelserver.ServerService.LogicCheckUserName:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 79: imchannelserver.ServerService.LogicCreateChannel:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 80: imchannelserver.ServerService.LogicInviteToChannel:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 81: imchannelserver.ServerService.LogicKickFromChannel:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 82: imchannelserver.ServerService.LogicLeaveChannel:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 83: imchannelserver.ServerService.LogicEditTitle:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 84: imchannelserver.ServerService.LogicEditAdmin:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 85: imchannelserver.ServerService.LogicEditPhoto:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 86: imchannelserver.ServerService.LogicEditAbout:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 87: imchannelserver.ServerService.LogicUpdatePinnedMessage:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 88: imchannelserver.ServerService.LogicJoinChannel:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 89: imchannelserver.ServerService.LogicImportChatInvite:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 90: imchannelserver.ServerService.LogicDeleteChannel:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 91: imchannelserver.ServerService.LogicGetAdminLog:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 92: imchannelserver.ServerService.LogicEditBanned:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 93: imchannelserver.ServerService.LogicGetFullChannel:output_type -> imchannelserver.HandleLogicChannelResp
	31, // 94: imchannelserver.ServerService.GetFullChannel:output_type -> imchannelserver.ReplyFullChannel
	8,  // 95: imchannelserver.ServerService.LogicGetParticipant:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 96: imchannelserver.ServerService.LogicGetParticipants:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 97: imchannelserver.ServerService.LogicExportInvite:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 98: imchannelserver.ServerService.LogicToggleInvites:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 99: imchannelserver.ServerService.LogicGetChannels:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 100: imchannelserver.ServerService.LogicEveryoneQuiet:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 101: imchannelserver.ServerService.LogicExportMessageLink:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 102: imchannelserver.ServerService.LogicPrivateChat:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 103: imchannelserver.ServerService.LogicUpdateUsername:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 104: imchannelserver.ServerService.LogicDeleteMessages:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 105: imchannelserver.ServerService.LogicReadMessageContents:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 106: imchannelserver.ServerService.LogicGetLeftChannels:output_type -> imchannelserver.HandleLogicChannelResp
	11, // 107: imchannelserver.ServerService.SendChannelMessage:output_type -> imchannelserver.SendChannelMessageResp
	8,  // 108: imchannelserver.ServerService.LogicSendChannelMessage:output_type -> imchannelserver.HandleLogicChannelResp
	11, // 109: imchannelserver.ServerService.SendChannelMedia:output_type -> imchannelserver.SendChannelMessageResp
	8,  // 110: imchannelserver.ServerService.LogicSendChannelMedia:output_type -> imchannelserver.HandleLogicChannelResp
	11, // 111: imchannelserver.ServerService.EditChannelMessage:output_type -> imchannelserver.SendChannelMessageResp
	8,  // 112: imchannelserver.ServerService.LogicEditChannelMessage:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 113: imchannelserver.ServerService.MessagesMigrateChat:output_type -> imchannelserver.HandleLogicChannelResp
	13, // 114: imchannelserver.ServerService.GetParticipants:output_type -> imchannelserver.ReplyParticipants
	14, // 115: imchannelserver.ServerService.JoinChannel:output_type -> imchannelserver.ReplyJoinChannel
	15, // 116: imchannelserver.ServerService.LeaveChannel:output_type -> imchannelserver.ReplyLeaveChannel
	17, // 117: imchannelserver.ServerService.MigrateChat:output_type -> imchannelserver.ReplyMigrateChat
	18, // 118: imchannelserver.ServerService.Getchannels:output_type -> imchannelserver.ReplyGetChannels
	28, // 119: imchannelserver.ServerService.GetChannelInactiveUsers:output_type -> imchannelserver.GetChannelInactiveUsersResult
	20, // 120: imchannelserver.ServerService.EditBanChannelUser:output_type -> imchannelserver.ReplyBanChannelUser
	8,  // 121: imchannelserver.ServerService.LogicCheckRpm:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 122: imchannelserver.ServerService.LogicCheckRpmV2:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 123: imchannelserver.ServerService.LogicReceiveRpm:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 124: imchannelserver.ServerService.LogicReceiveRpmV2:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 125: imchannelserver.ServerService.LogicSendRpm:output_type -> imchannelserver.HandleLogicChannelResp
	8,  // 126: imchannelserver.ServerService.LogicSendRpmV2:output_type -> imchannelserver.HandleLogicChannelResp
	33, // 127: imchannelserver.ServerService.HandleToggleSlowModel:output_type -> imchannelserver.HandleToggleSlowModeRsq
	35, // 128: imchannelserver.ServerService.HandleToggleSignatures:output_type -> imchannelserver.HandleToggleSignaturesRsp
	39, // 129: imchannelserver.ServerService.SetChannelBanMode:output_type -> imchannelserver.SetChannelBanModeRsp
	41, // 130: imchannelserver.ServerService.RestrictChannel:output_type -> imchannelserver.RestrictChannelRsp
	6,  // 131: imchannelserver.ServerService.SendGameRdp:output_type -> imchannelserver.GameRdpRsp
	6,  // 132: imchannelserver.ServerService.RcvGameRdp:output_type -> imchannelserver.GameRdpRsp
	6,  // 133: imchannelserver.ServerService.CheckGameRdp:output_type -> imchannelserver.GameRdpRsp
	6,  // 134: imchannelserver.ServerService.QryGameRdp:output_type -> imchannelserver.GameRdpRsp
	6,  // 135: imchannelserver.ServerService.QryGameHisRdp:output_type -> imchannelserver.GameRdpRsp
	78, // [78:136] is the sub-list for method output_type
	20, // [20:78] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_imchannelserver_proto_init() }
func file_imchannelserver_proto_init() {
	if File_imchannelserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_imchannelserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendGameRdpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RcvGameRdpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckGameRdpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QryGameRdpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QryGameHisRdpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMsgsMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameRdpRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleLogicChannelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendChannelMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendChannelMediaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendChannelMessageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditChannelMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyJoinChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyLeaveChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqMigrateChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyMigrateChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelInactiveUsersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyBanChannelUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqJoinChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqKickFromChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLeaveChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditBanChannelUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelBannedRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelInactiveUsersResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInactiveUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetFullChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyFullChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleToggleSlowModeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleToggleSlowModeRsq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleToggleSignaturesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleToggleSignaturesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelToggleHistoryHiddenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelToggleHistoryHiddenRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChannelBanModeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChannelBanModeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestrictChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestrictChannelRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecvGameRDPReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imchannelserver_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecvGameRDPRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_imchannelserver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_imchannelserver_proto_goTypes,
		DependencyIndexes: file_imchannelserver_proto_depIdxs,
		MessageInfos:      file_imchannelserver_proto_msgTypes,
	}.Build()
	File_imchannelserver_proto = out.File
	file_imchannelserver_proto_rawDesc = nil
	file_imchannelserver_proto_goTypes = nil
	file_imchannelserver_proto_depIdxs = nil
}
