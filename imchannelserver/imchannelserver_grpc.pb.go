// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imchannelserver.proto

package imchannelserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerServiceClient is the client API for ServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerServiceClient interface {
	//检查userName是否可用
	LogicCheckUserName(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//创建频道
	LogicCreateChannel(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//邀请用户进入超级群或者频道
	LogicInviteToChannel(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//踢人出超级群或者频道
	LogicKickFromChannel(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//离开超级群或者频道
	LogicLeaveChannel(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//编辑超级群标题
	LogicEditTitle(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//编辑超级群管理员权限
	LogicEditAdmin(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//修改超级群头像信息
	LogicEditPhoto(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//修改超级群描述信息
	LogicEditAbout(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//置顶超级群消息
	LogicUpdatePinnedMessage(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//通过username加入超级群
	LogicJoinChannel(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//通过邀请链接加入超级群
	LogicImportChatInvite(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//删除超级群或频道
	LogicDeleteChannel(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//获取操作日志
	LogicGetAdminLog(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//超级群踢人或解除该禁止
	LogicEditBanned(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//获取超级群完整信息
	LogicGetFullChannel(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	GetFullChannel(ctx context.Context, in *ReqGetFullChannel, opts ...grpc.CallOption) (*ReplyFullChannel, error)
	//获取单个超级群用户信息
	LogicGetParticipant(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//获取多个超级群用户信息（群获取最近成员、管理员、被踢用户、机器人、被禁权用户、群成员搜索、被踢用户搜索）
	LogicGetParticipants(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//创建超级群连接
	LogicExportInvite(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//设置所有人 邀请权限
	LogicToggleInvites(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//获取多个超级群的群信息
	LogicGetChannels(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//修改超级群全体禁言
	LogicEveryoneQuiet(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//获取公开超级群消息链接
	LogicExportMessageLink(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//修改超级群禁止私聊
	LogicPrivateChat(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//更新超级群Username
	LogicUpdateUsername(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//删除超级群消息
	LogicDeleteMessages(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//读取超级群消息内容
	LogicReadMessageContents(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//
	LogicGetLeftChannels(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//发送消息
	SendChannelMessage(ctx context.Context, in *SendChannelMessageReq, opts ...grpc.CallOption) (*SendChannelMessageResp, error)
	LogicSendChannelMessage(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//发送媒体
	SendChannelMedia(ctx context.Context, in *SendChannelMediaReq, opts ...grpc.CallOption) (*SendChannelMessageResp, error)
	LogicSendChannelMedia(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	// 编辑消息
	EditChannelMessage(ctx context.Context, in *EditChannelMessageReq, opts ...grpc.CallOption) (*SendChannelMessageResp, error)
	LogicEditChannelMessage(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	// 升级超级群
	MessagesMigrateChat(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	//获取participants
	GetParticipants(ctx context.Context, in *ReqGetParticipants, opts ...grpc.CallOption) (*ReplyParticipants, error)
	//主动加入超级群或者频道
	JoinChannel(ctx context.Context, in *ReqJoinChannel, opts ...grpc.CallOption) (*ReplyJoinChannel, error)
	//离开超级群或者频道
	LeaveChannel(ctx context.Context, in *ReqLeaveChannel, opts ...grpc.CallOption) (*ReplyLeaveChannel, error)
	// 普通群升级超级群
	MigrateChat(ctx context.Context, in *ReqMigrateChat, opts ...grpc.CallOption) (*ReplyMigrateChat, error)
	//获取给定channel
	Getchannels(ctx context.Context, in *ReqGetChannels, opts ...grpc.CallOption) (*ReplyGetChannels, error)
	GetChannelInactiveUsers(ctx context.Context, in *GetChannelInactiveUsersReq, opts ...grpc.CallOption) (*GetChannelInactiveUsersResult, error)
	//踢人并进组其再次加入超级群或者频道，或者解除该禁止
	EditBanChannelUser(ctx context.Context, in *ReqEditBanChannelUser, opts ...grpc.CallOption) (*ReplyBanChannelUser, error)
	// 超级群红包
	LogicCheckRpm(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	LogicCheckRpmV2(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	LogicReceiveRpm(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	LogicReceiveRpmV2(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	LogicSendRpm(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	LogicSendRpmV2(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error)
	// @ add by Qingsong at 2019-11-06 for call channel server to handler toggle slow model
	HandleToggleSlowModel(ctx context.Context, in *HandleToggleSlowModeReq, opts ...grpc.CallOption) (*HandleToggleSlowModeRsq, error)
	// @ add by Qingsong at 2019-11-21 for channel toggle signatures
	HandleToggleSignatures(ctx context.Context, in *HandleToggleSignaturesReq, opts ...grpc.CallOption) (*HandleToggleSignaturesRsp, error)
	// @ add by qingsong at 2019-12-23 for im call channel server to set channel ban mode.
	SetChannelBanMode(ctx context.Context, in *SetChannelBanModeReq, opts ...grpc.CallOption) (*SetChannelBanModeRsp, error)
	// @ add by qingsong at 2020-04-21 for im call channel server to Restrict channel.
	RestrictChannel(ctx context.Context, in *RestrictChannelReq, opts ...grpc.CallOption) (*RestrictChannelRsp, error)
	//发送游戏红包
	SendGameRdp(ctx context.Context, in *SendGameRdpReq, opts ...grpc.CallOption) (*GameRdpRsp, error)
	//领取游戏红包
	RcvGameRdp(ctx context.Context, in *RcvGameRdpReq, opts ...grpc.CallOption) (*GameRdpRsp, error)
	// 查看游戏红包
	CheckGameRdp(ctx context.Context, in *CheckGameRdpReq, opts ...grpc.CallOption) (*GameRdpRsp, error)
	//查询游戏红包详情
	QryGameRdp(ctx context.Context, in *QryGameRdpReq, opts ...grpc.CallOption) (*GameRdpRsp, error)
	//发送游戏红包历史记录
	QryGameHisRdp(ctx context.Context, in *QryGameHisRdpReq, opts ...grpc.CallOption) (*GameRdpRsp, error)
}

type serverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerServiceClient(cc grpc.ClientConnInterface) ServerServiceClient {
	return &serverServiceClient{cc}
}

func (c *serverServiceClient) LogicCheckUserName(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicCheckUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicCreateChannel(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicCreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicInviteToChannel(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicInviteToChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicKickFromChannel(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicKickFromChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicLeaveChannel(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicLeaveChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicEditTitle(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicEditTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicEditAdmin(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicEditAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicEditPhoto(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicEditPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicEditAbout(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicEditAbout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicUpdatePinnedMessage(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicUpdatePinnedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicJoinChannel(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicJoinChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicImportChatInvite(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicImportChatInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicDeleteChannel(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicDeleteChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicGetAdminLog(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicGetAdminLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicEditBanned(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicEditBanned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicGetFullChannel(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicGetFullChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetFullChannel(ctx context.Context, in *ReqGetFullChannel, opts ...grpc.CallOption) (*ReplyFullChannel, error) {
	out := new(ReplyFullChannel)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/GetFullChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicGetParticipant(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicGetParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicGetParticipants(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicGetParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicExportInvite(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicExportInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicToggleInvites(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicToggleInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicGetChannels(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicGetChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicEveryoneQuiet(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicEveryoneQuiet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicExportMessageLink(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicExportMessageLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicPrivateChat(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicPrivateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicUpdateUsername(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicUpdateUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicDeleteMessages(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicDeleteMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicReadMessageContents(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicReadMessageContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicGetLeftChannels(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicGetLeftChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) SendChannelMessage(ctx context.Context, in *SendChannelMessageReq, opts ...grpc.CallOption) (*SendChannelMessageResp, error) {
	out := new(SendChannelMessageResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/SendChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicSendChannelMessage(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicSendChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) SendChannelMedia(ctx context.Context, in *SendChannelMediaReq, opts ...grpc.CallOption) (*SendChannelMessageResp, error) {
	out := new(SendChannelMessageResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/SendChannelMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicSendChannelMedia(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicSendChannelMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) EditChannelMessage(ctx context.Context, in *EditChannelMessageReq, opts ...grpc.CallOption) (*SendChannelMessageResp, error) {
	out := new(SendChannelMessageResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/EditChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicEditChannelMessage(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicEditChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) MessagesMigrateChat(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/MessagesMigrateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetParticipants(ctx context.Context, in *ReqGetParticipants, opts ...grpc.CallOption) (*ReplyParticipants, error) {
	out := new(ReplyParticipants)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/GetParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) JoinChannel(ctx context.Context, in *ReqJoinChannel, opts ...grpc.CallOption) (*ReplyJoinChannel, error) {
	out := new(ReplyJoinChannel)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/JoinChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LeaveChannel(ctx context.Context, in *ReqLeaveChannel, opts ...grpc.CallOption) (*ReplyLeaveChannel, error) {
	out := new(ReplyLeaveChannel)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LeaveChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) MigrateChat(ctx context.Context, in *ReqMigrateChat, opts ...grpc.CallOption) (*ReplyMigrateChat, error) {
	out := new(ReplyMigrateChat)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/MigrateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) Getchannels(ctx context.Context, in *ReqGetChannels, opts ...grpc.CallOption) (*ReplyGetChannels, error) {
	out := new(ReplyGetChannels)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/Getchannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetChannelInactiveUsers(ctx context.Context, in *GetChannelInactiveUsersReq, opts ...grpc.CallOption) (*GetChannelInactiveUsersResult, error) {
	out := new(GetChannelInactiveUsersResult)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/GetChannelInactiveUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) EditBanChannelUser(ctx context.Context, in *ReqEditBanChannelUser, opts ...grpc.CallOption) (*ReplyBanChannelUser, error) {
	out := new(ReplyBanChannelUser)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/EditBanChannelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicCheckRpm(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicCheckRpm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicCheckRpmV2(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicCheckRpmV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicReceiveRpm(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicReceiveRpm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicReceiveRpmV2(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicReceiveRpmV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicSendRpm(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicSendRpm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) LogicSendRpmV2(ctx context.Context, in *HandleLogicChannelReq, opts ...grpc.CallOption) (*HandleLogicChannelResp, error) {
	out := new(HandleLogicChannelResp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/LogicSendRpmV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) HandleToggleSlowModel(ctx context.Context, in *HandleToggleSlowModeReq, opts ...grpc.CallOption) (*HandleToggleSlowModeRsq, error) {
	out := new(HandleToggleSlowModeRsq)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/HandleToggleSlowModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) HandleToggleSignatures(ctx context.Context, in *HandleToggleSignaturesReq, opts ...grpc.CallOption) (*HandleToggleSignaturesRsp, error) {
	out := new(HandleToggleSignaturesRsp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/HandleToggleSignatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) SetChannelBanMode(ctx context.Context, in *SetChannelBanModeReq, opts ...grpc.CallOption) (*SetChannelBanModeRsp, error) {
	out := new(SetChannelBanModeRsp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/SetChannelBanMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) RestrictChannel(ctx context.Context, in *RestrictChannelReq, opts ...grpc.CallOption) (*RestrictChannelRsp, error) {
	out := new(RestrictChannelRsp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/RestrictChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) SendGameRdp(ctx context.Context, in *SendGameRdpReq, opts ...grpc.CallOption) (*GameRdpRsp, error) {
	out := new(GameRdpRsp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/SendGameRdp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) RcvGameRdp(ctx context.Context, in *RcvGameRdpReq, opts ...grpc.CallOption) (*GameRdpRsp, error) {
	out := new(GameRdpRsp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/RcvGameRdp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) CheckGameRdp(ctx context.Context, in *CheckGameRdpReq, opts ...grpc.CallOption) (*GameRdpRsp, error) {
	out := new(GameRdpRsp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/CheckGameRdp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) QryGameRdp(ctx context.Context, in *QryGameRdpReq, opts ...grpc.CallOption) (*GameRdpRsp, error) {
	out := new(GameRdpRsp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/QryGameRdp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) QryGameHisRdp(ctx context.Context, in *QryGameHisRdpReq, opts ...grpc.CallOption) (*GameRdpRsp, error) {
	out := new(GameRdpRsp)
	err := c.cc.Invoke(ctx, "/imchannelserver.ServerService/QryGameHisRdp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServiceServer is the server API for ServerService service.
// All implementations must embed UnimplementedServerServiceServer
// for forward compatibility
type ServerServiceServer interface {
	//检查userName是否可用
	LogicCheckUserName(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//创建频道
	LogicCreateChannel(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//邀请用户进入超级群或者频道
	LogicInviteToChannel(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//踢人出超级群或者频道
	LogicKickFromChannel(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//离开超级群或者频道
	LogicLeaveChannel(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//编辑超级群标题
	LogicEditTitle(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//编辑超级群管理员权限
	LogicEditAdmin(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//修改超级群头像信息
	LogicEditPhoto(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//修改超级群描述信息
	LogicEditAbout(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//置顶超级群消息
	LogicUpdatePinnedMessage(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//通过username加入超级群
	LogicJoinChannel(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//通过邀请链接加入超级群
	LogicImportChatInvite(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//删除超级群或频道
	LogicDeleteChannel(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//获取操作日志
	LogicGetAdminLog(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//超级群踢人或解除该禁止
	LogicEditBanned(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//获取超级群完整信息
	LogicGetFullChannel(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	GetFullChannel(context.Context, *ReqGetFullChannel) (*ReplyFullChannel, error)
	//获取单个超级群用户信息
	LogicGetParticipant(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//获取多个超级群用户信息（群获取最近成员、管理员、被踢用户、机器人、被禁权用户、群成员搜索、被踢用户搜索）
	LogicGetParticipants(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//创建超级群连接
	LogicExportInvite(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//设置所有人 邀请权限
	LogicToggleInvites(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//获取多个超级群的群信息
	LogicGetChannels(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//修改超级群全体禁言
	LogicEveryoneQuiet(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//获取公开超级群消息链接
	LogicExportMessageLink(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//修改超级群禁止私聊
	LogicPrivateChat(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//更新超级群Username
	LogicUpdateUsername(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//删除超级群消息
	LogicDeleteMessages(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//读取超级群消息内容
	LogicReadMessageContents(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//
	LogicGetLeftChannels(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//发送消息
	SendChannelMessage(context.Context, *SendChannelMessageReq) (*SendChannelMessageResp, error)
	LogicSendChannelMessage(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//发送媒体
	SendChannelMedia(context.Context, *SendChannelMediaReq) (*SendChannelMessageResp, error)
	LogicSendChannelMedia(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	// 编辑消息
	EditChannelMessage(context.Context, *EditChannelMessageReq) (*SendChannelMessageResp, error)
	LogicEditChannelMessage(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	// 升级超级群
	MessagesMigrateChat(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	//获取participants
	GetParticipants(context.Context, *ReqGetParticipants) (*ReplyParticipants, error)
	//主动加入超级群或者频道
	JoinChannel(context.Context, *ReqJoinChannel) (*ReplyJoinChannel, error)
	//离开超级群或者频道
	LeaveChannel(context.Context, *ReqLeaveChannel) (*ReplyLeaveChannel, error)
	// 普通群升级超级群
	MigrateChat(context.Context, *ReqMigrateChat) (*ReplyMigrateChat, error)
	//获取给定channel
	Getchannels(context.Context, *ReqGetChannels) (*ReplyGetChannels, error)
	GetChannelInactiveUsers(context.Context, *GetChannelInactiveUsersReq) (*GetChannelInactiveUsersResult, error)
	//踢人并进组其再次加入超级群或者频道，或者解除该禁止
	EditBanChannelUser(context.Context, *ReqEditBanChannelUser) (*ReplyBanChannelUser, error)
	// 超级群红包
	LogicCheckRpm(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	LogicCheckRpmV2(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	LogicReceiveRpm(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	LogicReceiveRpmV2(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	LogicSendRpm(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	LogicSendRpmV2(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error)
	// @ add by Qingsong at 2019-11-06 for call channel server to handler toggle slow model
	HandleToggleSlowModel(context.Context, *HandleToggleSlowModeReq) (*HandleToggleSlowModeRsq, error)
	// @ add by Qingsong at 2019-11-21 for channel toggle signatures
	HandleToggleSignatures(context.Context, *HandleToggleSignaturesReq) (*HandleToggleSignaturesRsp, error)
	// @ add by qingsong at 2019-12-23 for im call channel server to set channel ban mode.
	SetChannelBanMode(context.Context, *SetChannelBanModeReq) (*SetChannelBanModeRsp, error)
	// @ add by qingsong at 2020-04-21 for im call channel server to Restrict channel.
	RestrictChannel(context.Context, *RestrictChannelReq) (*RestrictChannelRsp, error)
	//发送游戏红包
	SendGameRdp(context.Context, *SendGameRdpReq) (*GameRdpRsp, error)
	//领取游戏红包
	RcvGameRdp(context.Context, *RcvGameRdpReq) (*GameRdpRsp, error)
	// 查看游戏红包
	CheckGameRdp(context.Context, *CheckGameRdpReq) (*GameRdpRsp, error)
	//查询游戏红包详情
	QryGameRdp(context.Context, *QryGameRdpReq) (*GameRdpRsp, error)
	//发送游戏红包历史记录
	QryGameHisRdp(context.Context, *QryGameHisRdpReq) (*GameRdpRsp, error)
	mustEmbedUnimplementedServerServiceServer()
}

// UnimplementedServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerServiceServer struct {
}

func (UnimplementedServerServiceServer) LogicCheckUserName(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicCheckUserName not implemented")
}
func (UnimplementedServerServiceServer) LogicCreateChannel(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicCreateChannel not implemented")
}
func (UnimplementedServerServiceServer) LogicInviteToChannel(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicInviteToChannel not implemented")
}
func (UnimplementedServerServiceServer) LogicKickFromChannel(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicKickFromChannel not implemented")
}
func (UnimplementedServerServiceServer) LogicLeaveChannel(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicLeaveChannel not implemented")
}
func (UnimplementedServerServiceServer) LogicEditTitle(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicEditTitle not implemented")
}
func (UnimplementedServerServiceServer) LogicEditAdmin(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicEditAdmin not implemented")
}
func (UnimplementedServerServiceServer) LogicEditPhoto(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicEditPhoto not implemented")
}
func (UnimplementedServerServiceServer) LogicEditAbout(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicEditAbout not implemented")
}
func (UnimplementedServerServiceServer) LogicUpdatePinnedMessage(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicUpdatePinnedMessage not implemented")
}
func (UnimplementedServerServiceServer) LogicJoinChannel(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicJoinChannel not implemented")
}
func (UnimplementedServerServiceServer) LogicImportChatInvite(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicImportChatInvite not implemented")
}
func (UnimplementedServerServiceServer) LogicDeleteChannel(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicDeleteChannel not implemented")
}
func (UnimplementedServerServiceServer) LogicGetAdminLog(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicGetAdminLog not implemented")
}
func (UnimplementedServerServiceServer) LogicEditBanned(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicEditBanned not implemented")
}
func (UnimplementedServerServiceServer) LogicGetFullChannel(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicGetFullChannel not implemented")
}
func (UnimplementedServerServiceServer) GetFullChannel(context.Context, *ReqGetFullChannel) (*ReplyFullChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullChannel not implemented")
}
func (UnimplementedServerServiceServer) LogicGetParticipant(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicGetParticipant not implemented")
}
func (UnimplementedServerServiceServer) LogicGetParticipants(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicGetParticipants not implemented")
}
func (UnimplementedServerServiceServer) LogicExportInvite(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicExportInvite not implemented")
}
func (UnimplementedServerServiceServer) LogicToggleInvites(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicToggleInvites not implemented")
}
func (UnimplementedServerServiceServer) LogicGetChannels(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicGetChannels not implemented")
}
func (UnimplementedServerServiceServer) LogicEveryoneQuiet(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicEveryoneQuiet not implemented")
}
func (UnimplementedServerServiceServer) LogicExportMessageLink(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicExportMessageLink not implemented")
}
func (UnimplementedServerServiceServer) LogicPrivateChat(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicPrivateChat not implemented")
}
func (UnimplementedServerServiceServer) LogicUpdateUsername(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicUpdateUsername not implemented")
}
func (UnimplementedServerServiceServer) LogicDeleteMessages(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicDeleteMessages not implemented")
}
func (UnimplementedServerServiceServer) LogicReadMessageContents(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicReadMessageContents not implemented")
}
func (UnimplementedServerServiceServer) LogicGetLeftChannels(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicGetLeftChannels not implemented")
}
func (UnimplementedServerServiceServer) SendChannelMessage(context.Context, *SendChannelMessageReq) (*SendChannelMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChannelMessage not implemented")
}
func (UnimplementedServerServiceServer) LogicSendChannelMessage(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicSendChannelMessage not implemented")
}
func (UnimplementedServerServiceServer) SendChannelMedia(context.Context, *SendChannelMediaReq) (*SendChannelMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChannelMedia not implemented")
}
func (UnimplementedServerServiceServer) LogicSendChannelMedia(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicSendChannelMedia not implemented")
}
func (UnimplementedServerServiceServer) EditChannelMessage(context.Context, *EditChannelMessageReq) (*SendChannelMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelMessage not implemented")
}
func (UnimplementedServerServiceServer) LogicEditChannelMessage(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicEditChannelMessage not implemented")
}
func (UnimplementedServerServiceServer) MessagesMigrateChat(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesMigrateChat not implemented")
}
func (UnimplementedServerServiceServer) GetParticipants(context.Context, *ReqGetParticipants) (*ReplyParticipants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipants not implemented")
}
func (UnimplementedServerServiceServer) JoinChannel(context.Context, *ReqJoinChannel) (*ReplyJoinChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChannel not implemented")
}
func (UnimplementedServerServiceServer) LeaveChannel(context.Context, *ReqLeaveChannel) (*ReplyLeaveChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChannel not implemented")
}
func (UnimplementedServerServiceServer) MigrateChat(context.Context, *ReqMigrateChat) (*ReplyMigrateChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateChat not implemented")
}
func (UnimplementedServerServiceServer) Getchannels(context.Context, *ReqGetChannels) (*ReplyGetChannels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getchannels not implemented")
}
func (UnimplementedServerServiceServer) GetChannelInactiveUsers(context.Context, *GetChannelInactiveUsersReq) (*GetChannelInactiveUsersResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelInactiveUsers not implemented")
}
func (UnimplementedServerServiceServer) EditBanChannelUser(context.Context, *ReqEditBanChannelUser) (*ReplyBanChannelUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBanChannelUser not implemented")
}
func (UnimplementedServerServiceServer) LogicCheckRpm(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicCheckRpm not implemented")
}
func (UnimplementedServerServiceServer) LogicCheckRpmV2(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicCheckRpmV2 not implemented")
}
func (UnimplementedServerServiceServer) LogicReceiveRpm(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicReceiveRpm not implemented")
}
func (UnimplementedServerServiceServer) LogicReceiveRpmV2(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicReceiveRpmV2 not implemented")
}
func (UnimplementedServerServiceServer) LogicSendRpm(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicSendRpm not implemented")
}
func (UnimplementedServerServiceServer) LogicSendRpmV2(context.Context, *HandleLogicChannelReq) (*HandleLogicChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicSendRpmV2 not implemented")
}
func (UnimplementedServerServiceServer) HandleToggleSlowModel(context.Context, *HandleToggleSlowModeReq) (*HandleToggleSlowModeRsq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleToggleSlowModel not implemented")
}
func (UnimplementedServerServiceServer) HandleToggleSignatures(context.Context, *HandleToggleSignaturesReq) (*HandleToggleSignaturesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleToggleSignatures not implemented")
}
func (UnimplementedServerServiceServer) SetChannelBanMode(context.Context, *SetChannelBanModeReq) (*SetChannelBanModeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChannelBanMode not implemented")
}
func (UnimplementedServerServiceServer) RestrictChannel(context.Context, *RestrictChannelReq) (*RestrictChannelRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestrictChannel not implemented")
}
func (UnimplementedServerServiceServer) SendGameRdp(context.Context, *SendGameRdpReq) (*GameRdpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGameRdp not implemented")
}
func (UnimplementedServerServiceServer) RcvGameRdp(context.Context, *RcvGameRdpReq) (*GameRdpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RcvGameRdp not implemented")
}
func (UnimplementedServerServiceServer) CheckGameRdp(context.Context, *CheckGameRdpReq) (*GameRdpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckGameRdp not implemented")
}
func (UnimplementedServerServiceServer) QryGameRdp(context.Context, *QryGameRdpReq) (*GameRdpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QryGameRdp not implemented")
}
func (UnimplementedServerServiceServer) QryGameHisRdp(context.Context, *QryGameHisRdpReq) (*GameRdpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QryGameHisRdp not implemented")
}
func (UnimplementedServerServiceServer) mustEmbedUnimplementedServerServiceServer() {}

// UnsafeServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServiceServer will
// result in compilation errors.
type UnsafeServerServiceServer interface {
	mustEmbedUnimplementedServerServiceServer()
}

func RegisterServerServiceServer(s grpc.ServiceRegistrar, srv ServerServiceServer) {
	s.RegisterService(&ServerService_ServiceDesc, srv)
}

func _ServerService_LogicCheckUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicCheckUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicCheckUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicCheckUserName(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicCreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicCreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicCreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicCreateChannel(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicInviteToChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicInviteToChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicInviteToChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicInviteToChannel(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicKickFromChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicKickFromChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicKickFromChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicKickFromChannel(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicLeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicLeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicLeaveChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicLeaveChannel(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicEditTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicEditTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicEditTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicEditTitle(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicEditAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicEditAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicEditAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicEditAdmin(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicEditPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicEditPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicEditPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicEditPhoto(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicEditAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicEditAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicEditAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicEditAbout(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicUpdatePinnedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicUpdatePinnedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicUpdatePinnedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicUpdatePinnedMessage(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicJoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicJoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicJoinChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicJoinChannel(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicImportChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicImportChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicImportChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicImportChatInvite(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicDeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicDeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicDeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicDeleteChannel(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicGetAdminLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicGetAdminLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicGetAdminLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicGetAdminLog(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicEditBanned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicEditBanned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicEditBanned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicEditBanned(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicGetFullChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicGetFullChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicGetFullChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicGetFullChannel(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetFullChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetFullChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetFullChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/GetFullChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetFullChannel(ctx, req.(*ReqGetFullChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicGetParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicGetParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicGetParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicGetParticipant(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicGetParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicGetParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicGetParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicGetParticipants(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicExportInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicExportInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicExportInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicExportInvite(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicToggleInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicToggleInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicToggleInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicToggleInvites(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicGetChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicGetChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicGetChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicGetChannels(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicEveryoneQuiet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicEveryoneQuiet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicEveryoneQuiet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicEveryoneQuiet(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicExportMessageLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicExportMessageLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicExportMessageLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicExportMessageLink(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicPrivateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicPrivateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicPrivateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicPrivateChat(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicUpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicUpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicUpdateUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicUpdateUsername(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicDeleteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicDeleteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicDeleteMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicDeleteMessages(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicReadMessageContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicReadMessageContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicReadMessageContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicReadMessageContents(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicGetLeftChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicGetLeftChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicGetLeftChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicGetLeftChannels(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_SendChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChannelMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).SendChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/SendChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).SendChannelMessage(ctx, req.(*SendChannelMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicSendChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicSendChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicSendChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicSendChannelMessage(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_SendChannelMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChannelMediaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).SendChannelMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/SendChannelMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).SendChannelMedia(ctx, req.(*SendChannelMediaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicSendChannelMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicSendChannelMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicSendChannelMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicSendChannelMedia(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_EditChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditChannelMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).EditChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/EditChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).EditChannelMessage(ctx, req.(*EditChannelMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicEditChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicEditChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicEditChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicEditChannelMessage(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_MessagesMigrateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).MessagesMigrateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/MessagesMigrateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).MessagesMigrateChat(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/GetParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetParticipants(ctx, req.(*ReqGetParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_JoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqJoinChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).JoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/JoinChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).JoinChannel(ctx, req.(*ReqJoinChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLeaveChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LeaveChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LeaveChannel(ctx, req.(*ReqLeaveChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_MigrateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMigrateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).MigrateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/MigrateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).MigrateChat(ctx, req.(*ReqMigrateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_Getchannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).Getchannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/Getchannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).Getchannels(ctx, req.(*ReqGetChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetChannelInactiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelInactiveUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetChannelInactiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/GetChannelInactiveUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetChannelInactiveUsers(ctx, req.(*GetChannelInactiveUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_EditBanChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditBanChannelUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).EditBanChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/EditBanChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).EditBanChannelUser(ctx, req.(*ReqEditBanChannelUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicCheckRpm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicCheckRpm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicCheckRpm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicCheckRpm(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicCheckRpmV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicCheckRpmV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicCheckRpmV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicCheckRpmV2(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicReceiveRpm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicReceiveRpm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicReceiveRpm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicReceiveRpm(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicReceiveRpmV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicReceiveRpmV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicReceiveRpmV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicReceiveRpmV2(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicSendRpm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicSendRpm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicSendRpm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicSendRpm(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_LogicSendRpmV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleLogicChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).LogicSendRpmV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/LogicSendRpmV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).LogicSendRpmV2(ctx, req.(*HandleLogicChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_HandleToggleSlowModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleToggleSlowModeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).HandleToggleSlowModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/HandleToggleSlowModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).HandleToggleSlowModel(ctx, req.(*HandleToggleSlowModeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_HandleToggleSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleToggleSignaturesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).HandleToggleSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/HandleToggleSignatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).HandleToggleSignatures(ctx, req.(*HandleToggleSignaturesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_SetChannelBanMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChannelBanModeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).SetChannelBanMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/SetChannelBanMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).SetChannelBanMode(ctx, req.(*SetChannelBanModeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_RestrictChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestrictChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).RestrictChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/RestrictChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).RestrictChannel(ctx, req.(*RestrictChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_SendGameRdp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGameRdpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).SendGameRdp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/SendGameRdp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).SendGameRdp(ctx, req.(*SendGameRdpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_RcvGameRdp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RcvGameRdpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).RcvGameRdp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/RcvGameRdp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).RcvGameRdp(ctx, req.(*RcvGameRdpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_CheckGameRdp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckGameRdpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CheckGameRdp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/CheckGameRdp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CheckGameRdp(ctx, req.(*CheckGameRdpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_QryGameRdp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryGameRdpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).QryGameRdp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/QryGameRdp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).QryGameRdp(ctx, req.(*QryGameRdpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_QryGameHisRdp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QryGameHisRdpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).QryGameHisRdp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelserver.ServerService/QryGameHisRdp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).QryGameHisRdp(ctx, req.(*QryGameHisRdpReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerService_ServiceDesc is the grpc.ServiceDesc for ServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imchannelserver.ServerService",
	HandlerType: (*ServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogicCheckUserName",
			Handler:    _ServerService_LogicCheckUserName_Handler,
		},
		{
			MethodName: "LogicCreateChannel",
			Handler:    _ServerService_LogicCreateChannel_Handler,
		},
		{
			MethodName: "LogicInviteToChannel",
			Handler:    _ServerService_LogicInviteToChannel_Handler,
		},
		{
			MethodName: "LogicKickFromChannel",
			Handler:    _ServerService_LogicKickFromChannel_Handler,
		},
		{
			MethodName: "LogicLeaveChannel",
			Handler:    _ServerService_LogicLeaveChannel_Handler,
		},
		{
			MethodName: "LogicEditTitle",
			Handler:    _ServerService_LogicEditTitle_Handler,
		},
		{
			MethodName: "LogicEditAdmin",
			Handler:    _ServerService_LogicEditAdmin_Handler,
		},
		{
			MethodName: "LogicEditPhoto",
			Handler:    _ServerService_LogicEditPhoto_Handler,
		},
		{
			MethodName: "LogicEditAbout",
			Handler:    _ServerService_LogicEditAbout_Handler,
		},
		{
			MethodName: "LogicUpdatePinnedMessage",
			Handler:    _ServerService_LogicUpdatePinnedMessage_Handler,
		},
		{
			MethodName: "LogicJoinChannel",
			Handler:    _ServerService_LogicJoinChannel_Handler,
		},
		{
			MethodName: "LogicImportChatInvite",
			Handler:    _ServerService_LogicImportChatInvite_Handler,
		},
		{
			MethodName: "LogicDeleteChannel",
			Handler:    _ServerService_LogicDeleteChannel_Handler,
		},
		{
			MethodName: "LogicGetAdminLog",
			Handler:    _ServerService_LogicGetAdminLog_Handler,
		},
		{
			MethodName: "LogicEditBanned",
			Handler:    _ServerService_LogicEditBanned_Handler,
		},
		{
			MethodName: "LogicGetFullChannel",
			Handler:    _ServerService_LogicGetFullChannel_Handler,
		},
		{
			MethodName: "GetFullChannel",
			Handler:    _ServerService_GetFullChannel_Handler,
		},
		{
			MethodName: "LogicGetParticipant",
			Handler:    _ServerService_LogicGetParticipant_Handler,
		},
		{
			MethodName: "LogicGetParticipants",
			Handler:    _ServerService_LogicGetParticipants_Handler,
		},
		{
			MethodName: "LogicExportInvite",
			Handler:    _ServerService_LogicExportInvite_Handler,
		},
		{
			MethodName: "LogicToggleInvites",
			Handler:    _ServerService_LogicToggleInvites_Handler,
		},
		{
			MethodName: "LogicGetChannels",
			Handler:    _ServerService_LogicGetChannels_Handler,
		},
		{
			MethodName: "LogicEveryoneQuiet",
			Handler:    _ServerService_LogicEveryoneQuiet_Handler,
		},
		{
			MethodName: "LogicExportMessageLink",
			Handler:    _ServerService_LogicExportMessageLink_Handler,
		},
		{
			MethodName: "LogicPrivateChat",
			Handler:    _ServerService_LogicPrivateChat_Handler,
		},
		{
			MethodName: "LogicUpdateUsername",
			Handler:    _ServerService_LogicUpdateUsername_Handler,
		},
		{
			MethodName: "LogicDeleteMessages",
			Handler:    _ServerService_LogicDeleteMessages_Handler,
		},
		{
			MethodName: "LogicReadMessageContents",
			Handler:    _ServerService_LogicReadMessageContents_Handler,
		},
		{
			MethodName: "LogicGetLeftChannels",
			Handler:    _ServerService_LogicGetLeftChannels_Handler,
		},
		{
			MethodName: "SendChannelMessage",
			Handler:    _ServerService_SendChannelMessage_Handler,
		},
		{
			MethodName: "LogicSendChannelMessage",
			Handler:    _ServerService_LogicSendChannelMessage_Handler,
		},
		{
			MethodName: "SendChannelMedia",
			Handler:    _ServerService_SendChannelMedia_Handler,
		},
		{
			MethodName: "LogicSendChannelMedia",
			Handler:    _ServerService_LogicSendChannelMedia_Handler,
		},
		{
			MethodName: "EditChannelMessage",
			Handler:    _ServerService_EditChannelMessage_Handler,
		},
		{
			MethodName: "LogicEditChannelMessage",
			Handler:    _ServerService_LogicEditChannelMessage_Handler,
		},
		{
			MethodName: "MessagesMigrateChat",
			Handler:    _ServerService_MessagesMigrateChat_Handler,
		},
		{
			MethodName: "GetParticipants",
			Handler:    _ServerService_GetParticipants_Handler,
		},
		{
			MethodName: "JoinChannel",
			Handler:    _ServerService_JoinChannel_Handler,
		},
		{
			MethodName: "LeaveChannel",
			Handler:    _ServerService_LeaveChannel_Handler,
		},
		{
			MethodName: "MigrateChat",
			Handler:    _ServerService_MigrateChat_Handler,
		},
		{
			MethodName: "Getchannels",
			Handler:    _ServerService_Getchannels_Handler,
		},
		{
			MethodName: "GetChannelInactiveUsers",
			Handler:    _ServerService_GetChannelInactiveUsers_Handler,
		},
		{
			MethodName: "EditBanChannelUser",
			Handler:    _ServerService_EditBanChannelUser_Handler,
		},
		{
			MethodName: "LogicCheckRpm",
			Handler:    _ServerService_LogicCheckRpm_Handler,
		},
		{
			MethodName: "LogicCheckRpmV2",
			Handler:    _ServerService_LogicCheckRpmV2_Handler,
		},
		{
			MethodName: "LogicReceiveRpm",
			Handler:    _ServerService_LogicReceiveRpm_Handler,
		},
		{
			MethodName: "LogicReceiveRpmV2",
			Handler:    _ServerService_LogicReceiveRpmV2_Handler,
		},
		{
			MethodName: "LogicSendRpm",
			Handler:    _ServerService_LogicSendRpm_Handler,
		},
		{
			MethodName: "LogicSendRpmV2",
			Handler:    _ServerService_LogicSendRpmV2_Handler,
		},
		{
			MethodName: "HandleToggleSlowModel",
			Handler:    _ServerService_HandleToggleSlowModel_Handler,
		},
		{
			MethodName: "HandleToggleSignatures",
			Handler:    _ServerService_HandleToggleSignatures_Handler,
		},
		{
			MethodName: "SetChannelBanMode",
			Handler:    _ServerService_SetChannelBanMode_Handler,
		},
		{
			MethodName: "RestrictChannel",
			Handler:    _ServerService_RestrictChannel_Handler,
		},
		{
			MethodName: "SendGameRdp",
			Handler:    _ServerService_SendGameRdp_Handler,
		},
		{
			MethodName: "RcvGameRdp",
			Handler:    _ServerService_RcvGameRdp_Handler,
		},
		{
			MethodName: "CheckGameRdp",
			Handler:    _ServerService_CheckGameRdp_Handler,
		},
		{
			MethodName: "QryGameRdp",
			Handler:    _ServerService_QryGameRdp_Handler,
		},
		{
			MethodName: "QryGameHisRdp",
			Handler:    _ServerService_QryGameHisRdp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imchannelserver.proto",
}
