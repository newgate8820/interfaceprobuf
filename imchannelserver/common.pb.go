// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/imchannelserver/common.proto

/*
Package imchannelserver is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/imchannelserver/common.proto
	gitlab.chatserver.im/interfaceprobuf/imchannelserver/imchannelserver.proto

It has these top-level messages:

	ReplyChannelData
	ReqCreateChannel
	ReqInviteChannelMember
	ReqDeleteChannel
	ReqDeleteChannelMsg
	ReqEditChannelAbout
	ReqEditChannelAdmin
	ReqEditChannelPhoto
	ReqEditChannelTitle
	ReqEditEveryoneQuiet
	ReqExportChannelLink
	ReqGetChannelMessageExportLink
	ReqEditPrivateChat
	ReqChannelsReadMessageContents
	ReqChannelToggleInvite
	ReqUpdatePinnedChannelMessage
	ReqUpdateChannelUserName
	ReqGetChannelAdminLog
	ChannelAdminLogEventFilter
	ReqGetParticipant
	ChatMsgMeta
	ReqSendRpm
	ReplySendRpm
	ReqEditRpm
	ReqEditRpmV2
	ReqEditPayment
	ReplyEditRpm
	ReqRecvRpm
	ReplyRecvRpm
	SendGameRdpReq
	RcvGameRdpReq
	CheckGameRdpReq
	QryGameRdpReq
	QryGameHisRdpReq
	ChatMsgsMeta
	GameRdpRsp
	HandleLogicChannelReq
	HandleLogicChannelResp
	SendChannelMessageReq
	SendChannelMediaReq
	SendChannelMessageResp
	EditChannelMessageReq
	ReplyParticipants
	ReplyJoinChannel
	ReplyLeaveChannel
	ReqMigrateChat
	ReplyMigrateChat
	ReplyGetChannels
	GetChannelInactiveUsersReq
	ReplyBanChannelUser
	ReqGetParticipants
	ReqJoinChannel
	ReqKickFromChannel
	ReqLeaveChannel
	ReqGetChannels
	ReqEditBanChannelUser
	ChannelBannedRights
	GetChannelInactiveUsersResult
	ChannelInactiveUser
	ReqGetFullChannel
	ReplyFullChannel
	HandleToggleSlowModeReq
	HandleToggleSlowModeRsq
	HandleToggleSignaturesReq
	HandleToggleSignaturesRsp
	ChannelToggleHistoryHiddenReq
	ChannelToggleHistoryHiddenRsp
	SetChannelBanModeReq
	SetChannelBanModeRsp
	RestrictChannelReq
	RestrictChannelRsp
	RecvGameRDPReq
	RecvGameRDPRsp
*/
package imchannelserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pbcomm "gitlab.chatserver.im/interfaceprobuf/pbcomm"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 返回channel
type ReplyChannelData struct {
	Reply     []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyChannelData) Reset()                    { *m = ReplyChannelData{} }
func (m *ReplyChannelData) String() string            { return proto.CompactTextString(m) }
func (*ReplyChannelData) ProtoMessage()               {}
func (*ReplyChannelData) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{0} }

func (m *ReplyChannelData) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyChannelData) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqCreateChannel struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Title      string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	About      string        `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
	FromKeyid  int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	BroadCast  bool          `protobuf:"varint,6,opt,name=broadCast,proto3" json:"broadCast,omitempty"`
	Megagroup  bool          `protobuf:"varint,7,opt,name=megagroup,proto3" json:"megagroup,omitempty"`
	ReplyMsgId uint64        `protobuf:"varint,8,opt,name=replyMsgId,proto3" json:"replyMsgId,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,9,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqCreateChannel) Reset()                    { *m = ReqCreateChannel{} }
func (m *ReqCreateChannel) String() string            { return proto.CompactTextString(m) }
func (*ReqCreateChannel) ProtoMessage()               {}
func (*ReqCreateChannel) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{1} }

func (m *ReqCreateChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqCreateChannel) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqCreateChannel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqCreateChannel) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *ReqCreateChannel) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqCreateChannel) GetBroadCast() bool {
	if m != nil {
		return m.BroadCast
	}
	return false
}

func (m *ReqCreateChannel) GetMegagroup() bool {
	if m != nil {
		return m.Megagroup
	}
	return false
}

func (m *ReqCreateChannel) GetReplyMsgId() uint64 {
	if m != nil {
		return m.ReplyMsgId
	}
	return 0
}

func (m *ReqCreateChannel) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 邀请用户进入超级群
type ReqInviteChannelMember struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Title      string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	PeerId     []int32       `protobuf:"varint,4,rep,packed,name=peerId" json:"peerId,omitempty"`
	FromKeyid  int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	AccessHash int64         `protobuf:"varint,6,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqInviteChannelMember) Reset()                    { *m = ReqInviteChannelMember{} }
func (m *ReqInviteChannelMember) String() string            { return proto.CompactTextString(m) }
func (*ReqInviteChannelMember) ProtoMessage()               {}
func (*ReqInviteChannelMember) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{2} }

func (m *ReqInviteChannelMember) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqInviteChannelMember) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqInviteChannelMember) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqInviteChannelMember) GetPeerId() []int32 {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *ReqInviteChannelMember) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqInviteChannelMember) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqInviteChannelMember) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// deletechannel 请求参数
type ReqDeleteChannel struct {
	FromId     int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId  int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId  int32         `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqDeleteChannel) Reset()                    { *m = ReqDeleteChannel{} }
func (m *ReqDeleteChannel) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteChannel) ProtoMessage()               {}
func (*ReqDeleteChannel) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{3} }

func (m *ReqDeleteChannel) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqDeleteChannel) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqDeleteChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqDeleteChannel) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqDeleteChannel) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 请求参数
type ReqDeleteChannelMsg struct {
	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	FromKeyid uint64        `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Flags     int32         `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	Revoke    bool          `protobuf:"varint,4,opt,name=revoke,proto3" json:"revoke,omitempty"`
	Id        []int32       `protobuf:"varint,5,rep,packed,name=id" json:"id,omitempty"`
	Channelid int32         `protobuf:"varint,6,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqDeleteChannelMsg) Reset()                    { *m = ReqDeleteChannelMsg{} }
func (m *ReqDeleteChannelMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteChannelMsg) ProtoMessage()               {}
func (*ReqDeleteChannelMsg) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{4} }

func (m *ReqDeleteChannelMsg) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqDeleteChannelMsg) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqDeleteChannelMsg) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqDeleteChannelMsg) GetRevoke() bool {
	if m != nil {
		return m.Revoke
	}
	return false
}

func (m *ReqDeleteChannelMsg) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReqDeleteChannelMsg) GetChannelid() int32 {
	if m != nil {
		return m.Channelid
	}
	return 0
}

func (m *ReqDeleteChannelMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 请求参数
type ReqEditChannelAbout struct {
	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	FromKeyId  int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId  int32         `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	About      string        `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
	AccessHash int64         `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditChannelAbout) Reset()                    { *m = ReqEditChannelAbout{} }
func (m *ReqEditChannelAbout) String() string            { return proto.CompactTextString(m) }
func (*ReqEditChannelAbout) ProtoMessage()               {}
func (*ReqEditChannelAbout) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{5} }

func (m *ReqEditChannelAbout) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqEditChannelAbout) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqEditChannelAbout) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditChannelAbout) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *ReqEditChannelAbout) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqEditChannelAbout) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 请求参数
type ReqEditChannelAdmin struct {
	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ChannelId  int32         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyId  int64         `protobuf:"varint,4,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Role       []byte        `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	KeyId      uint64        `protobuf:"varint,6,opt,name=keyId,proto3" json:"keyId,omitempty"`
	AccessHash int64         `protobuf:"varint,7,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditChannelAdmin) Reset()                    { *m = ReqEditChannelAdmin{} }
func (m *ReqEditChannelAdmin) String() string            { return proto.CompactTextString(m) }
func (*ReqEditChannelAdmin) ProtoMessage()               {}
func (*ReqEditChannelAdmin) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{6} }

func (m *ReqEditChannelAdmin) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqEditChannelAdmin) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditChannelAdmin) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqEditChannelAdmin) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqEditChannelAdmin) GetRole() []byte {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *ReqEditChannelAdmin) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReqEditChannelAdmin) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqEditChannelAdmin) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// edit photo
type ReqEditChannelPhoto struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Photo     []byte        `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	FromKeyid int64         `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditChannelPhoto) Reset()                    { *m = ReqEditChannelPhoto{} }
func (m *ReqEditChannelPhoto) String() string            { return proto.CompactTextString(m) }
func (*ReqEditChannelPhoto) ProtoMessage()               {}
func (*ReqEditChannelPhoto) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{7} }

func (m *ReqEditChannelPhoto) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditChannelPhoto) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqEditChannelPhoto) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *ReqEditChannelPhoto) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqEditChannelPhoto) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// edit title
type ReqEditChannelTitle struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Title     string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	UserId    int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyid int64         `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditChannelTitle) Reset()                    { *m = ReqEditChannelTitle{} }
func (m *ReqEditChannelTitle) String() string            { return proto.CompactTextString(m) }
func (*ReqEditChannelTitle) ProtoMessage()               {}
func (*ReqEditChannelTitle) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{8} }

func (m *ReqEditChannelTitle) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditChannelTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqEditChannelTitle) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqEditChannelTitle) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqEditChannelTitle) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqEditEveryoneQuiet struct {
	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChannelId int32         `protobuf:"varint,2,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Quiet     bool          `protobuf:"varint,3,opt,name=quiet,proto3" json:"quiet,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditEveryoneQuiet) Reset()                    { *m = ReqEditEveryoneQuiet{} }
func (m *ReqEditEveryoneQuiet) String() string            { return proto.CompactTextString(m) }
func (*ReqEditEveryoneQuiet) ProtoMessage()               {}
func (*ReqEditEveryoneQuiet) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{9} }

func (m *ReqEditEveryoneQuiet) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqEditEveryoneQuiet) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditEveryoneQuiet) GetQuiet() bool {
	if m != nil {
		return m.Quiet
	}
	return false
}

func (m *ReqEditEveryoneQuiet) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 创建超级群的邀请链接
type ReqExportChannelLink struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqExportChannelLink) Reset()                    { *m = ReqExportChannelLink{} }
func (m *ReqExportChannelLink) String() string            { return proto.CompactTextString(m) }
func (*ReqExportChannelLink) ProtoMessage()               {}
func (*ReqExportChannelLink) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{10} }

func (m *ReqExportChannelLink) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqExportChannelLink) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqExportChannelLink) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetChannelMessageExportLink struct {
	Result []byte        `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetChannelMessageExportLink) Reset()         { *m = ReqGetChannelMessageExportLink{} }
func (m *ReqGetChannelMessageExportLink) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelMessageExportLink) ProtoMessage()    {}
func (*ReqGetChannelMessageExportLink) Descriptor() ([]byte, []int) {
	return fileDescriptorCommon, []int{11}
}

func (m *ReqGetChannelMessageExportLink) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReqGetChannelMessageExportLink) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqEditPrivateChat struct {
	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChannelId int32         `protobuf:"varint,2,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Ok        bool          `protobuf:"varint,3,opt,name=ok,proto3" json:"ok,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditPrivateChat) Reset()                    { *m = ReqEditPrivateChat{} }
func (m *ReqEditPrivateChat) String() string            { return proto.CompactTextString(m) }
func (*ReqEditPrivateChat) ProtoMessage()               {}
func (*ReqEditPrivateChat) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{12} }

func (m *ReqEditPrivateChat) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqEditPrivateChat) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditPrivateChat) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ReqEditPrivateChat) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqChannelsReadMessageContents struct {
	Keyid  uint64        `protobuf:"varint,1,opt,name=keyid,proto3" json:"keyid,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Result []byte        `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqChannelsReadMessageContents) Reset()         { *m = ReqChannelsReadMessageContents{} }
func (m *ReqChannelsReadMessageContents) String() string { return proto.CompactTextString(m) }
func (*ReqChannelsReadMessageContents) ProtoMessage()    {}
func (*ReqChannelsReadMessageContents) Descriptor() ([]byte, []int) {
	return fileDescriptorCommon, []int{13}
}

func (m *ReqChannelsReadMessageContents) GetKeyid() uint64 {
	if m != nil {
		return m.Keyid
	}
	return 0
}

func (m *ReqChannelsReadMessageContents) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqChannelsReadMessageContents) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReqChannelsReadMessageContents) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 是否允许普通成员邀请人
type ReqChannelToggleInvite struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Enabled    bool          `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqChannelToggleInvite) Reset()                    { *m = ReqChannelToggleInvite{} }
func (m *ReqChannelToggleInvite) String() string            { return proto.CompactTextString(m) }
func (*ReqChannelToggleInvite) ProtoMessage()               {}
func (*ReqChannelToggleInvite) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{14} }

func (m *ReqChannelToggleInvite) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqChannelToggleInvite) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqChannelToggleInvite) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *ReqChannelToggleInvite) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqChannelToggleInvite) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 请求参数
type ReqUpdatePinnedChannelMessage struct {
	FromId int32 `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Flags  int32 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Silent bool  `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	//    InputChannel channel = 4;
	ChannelId int32         `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Id        int32         `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	FromKeyid int64         `protobuf:"varint,6,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqUpdatePinnedChannelMessage) Reset()         { *m = ReqUpdatePinnedChannelMessage{} }
func (m *ReqUpdatePinnedChannelMessage) String() string { return proto.CompactTextString(m) }
func (*ReqUpdatePinnedChannelMessage) ProtoMessage()    {}
func (*ReqUpdatePinnedChannelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorCommon, []int{15}
}

func (m *ReqUpdatePinnedChannelMessage) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *ReqUpdatePinnedChannelMessage) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 修改channel user name
type ReqUpdateChannelUserName struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	FromId     int32         `protobuf:"varint,3,opt,name=fromId,proto3" json:"fromId,omitempty"`
	UserName   string        `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqUpdateChannelUserName) Reset()                    { *m = ReqUpdateChannelUserName{} }
func (m *ReqUpdateChannelUserName) String() string            { return proto.CompactTextString(m) }
func (*ReqUpdateChannelUserName) ProtoMessage()               {}
func (*ReqUpdateChannelUserName) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{16} }

func (m *ReqUpdateChannelUserName) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqUpdateChannelUserName) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqUpdateChannelUserName) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqUpdateChannelUserName) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ReqUpdateChannelUserName) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetChannelAdminLog struct {
	ChannelId   int32                       `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId      int32                       `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId   int64                       `protobuf:"varint,3,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	AccessHash  int64                       `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Q           string                      `protobuf:"bytes,5,opt,name=q,proto3" json:"q,omitempty"`
	EventFilter *ChannelAdminLogEventFilter `protobuf:"bytes,6,opt,name=eventFilter" json:"eventFilter,omitempty"`
	Admins      []int32                     `protobuf:"varint,7,rep,packed,name=admins" json:"admins,omitempty"`
	MaxId       int32                       `protobuf:"varint,8,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId       int32                       `protobuf:"varint,9,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	Limit       int32                       `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
	Debug       *pbcomm.Debug               `protobuf:"bytes,11,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetChannelAdminLog) Reset()                    { *m = ReqGetChannelAdminLog{} }
func (m *ReqGetChannelAdminLog) String() string            { return proto.CompactTextString(m) }
func (*ReqGetChannelAdminLog) ProtoMessage()               {}
func (*ReqGetChannelAdminLog) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{17} }

func (m *ReqGetChannelAdminLog) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelAdminLog) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetChannelAdminLog) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqGetChannelAdminLog) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqGetChannelAdminLog) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *ReqGetChannelAdminLog) GetEventFilter() *ChannelAdminLogEventFilter {
	if m != nil {
		return m.EventFilter
	}
	return nil
}

func (m *ReqGetChannelAdminLog) GetAdmins() []int32 {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *ReqGetChannelAdminLog) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ReqGetChannelAdminLog) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *ReqGetChannelAdminLog) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetChannelAdminLog) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ChannelAdminLogEventFilter struct {
	Flags   int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Join    bool  `protobuf:"varint,2,opt,name=join,proto3" json:"join,omitempty"`
	Leave   bool  `protobuf:"varint,3,opt,name=leave,proto3" json:"leave,omitempty"`
	Invite  bool  `protobuf:"varint,4,opt,name=invite,proto3" json:"invite,omitempty"`
	Ban     bool  `protobuf:"varint,5,opt,name=ban,proto3" json:"ban,omitempty"`
	Unban   bool  `protobuf:"varint,6,opt,name=unban,proto3" json:"unban,omitempty"`
	Kick    bool  `protobuf:"varint,7,opt,name=kick,proto3" json:"kick,omitempty"`
	Unkick  bool  `protobuf:"varint,8,opt,name=unkick,proto3" json:"unkick,omitempty"`
	Promote bool  `protobuf:"varint,9,opt,name=promote,proto3" json:"promote,omitempty"`
	Demote  bool  `protobuf:"varint,10,opt,name=demote,proto3" json:"demote,omitempty"`
	Info    bool  `protobuf:"varint,11,opt,name=info,proto3" json:"info,omitempty"`
	Setting bool  `protobuf:"varint,12,opt,name=setting,proto3" json:"setting,omitempty"`
	Pinned  bool  `protobuf:"varint,13,opt,name=pinned,proto3" json:"pinned,omitempty"`
	Edit    bool  `protobuf:"varint,14,opt,name=edit,proto3" json:"edit,omitempty"`
	Delete  bool  `protobuf:"varint,15,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (m *ChannelAdminLogEventFilter) Reset()         { *m = ChannelAdminLogEventFilter{} }
func (m *ChannelAdminLogEventFilter) String() string { return proto.CompactTextString(m) }
func (*ChannelAdminLogEventFilter) ProtoMessage()    {}
func (*ChannelAdminLogEventFilter) Descriptor() ([]byte, []int) {
	return fileDescriptorCommon, []int{18}
}

func (m *ChannelAdminLogEventFilter) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ChannelAdminLogEventFilter) GetJoin() bool {
	if m != nil {
		return m.Join
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetLeave() bool {
	if m != nil {
		return m.Leave
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetInvite() bool {
	if m != nil {
		return m.Invite
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetBan() bool {
	if m != nil {
		return m.Ban
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetUnban() bool {
	if m != nil {
		return m.Unban
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetKick() bool {
	if m != nil {
		return m.Kick
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetUnkick() bool {
	if m != nil {
		return m.Unkick
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetPromote() bool {
	if m != nil {
		return m.Promote
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetDemote() bool {
	if m != nil {
		return m.Demote
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetInfo() bool {
	if m != nil {
		return m.Info
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetSetting() bool {
	if m != nil {
		return m.Setting
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetPinned() bool {
	if m != nil {
		return m.Pinned
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetEdit() bool {
	if m != nil {
		return m.Edit
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetDelete() bool {
	if m != nil {
		return m.Delete
	}
	return false
}

// 获取participant
type ReqGetParticipant struct {
	Channelid  int32         `protobuf:"varint,1,opt,name=channelid,proto3" json:"channelid,omitempty"`
	FromId     int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetParticipant) Reset()                    { *m = ReqGetParticipant{} }
func (m *ReqGetParticipant) String() string            { return proto.CompactTextString(m) }
func (*ReqGetParticipant) ProtoMessage()               {}
func (*ReqGetParticipant) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{19} }

func (m *ReqGetParticipant) GetChannelid() int32 {
	if m != nil {
		return m.Channelid
	}
	return 0
}

func (m *ReqGetParticipant) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetParticipant) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetParticipant) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqGetParticipant) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 升级超级群之前的普通群消息元数据
type ChatMsgMeta struct {
	TopMsg int32 `protobuf:"varint,1,opt,name=topMsg,proto3" json:"topMsg,omitempty"`
	TopPts int32 `protobuf:"varint,2,opt,name=topPts,proto3" json:"topPts,omitempty"`
	ToDate int32 `protobuf:"varint,3,opt,name=toDate,proto3" json:"toDate,omitempty"`
}

func (m *ChatMsgMeta) Reset()                    { *m = ChatMsgMeta{} }
func (m *ChatMsgMeta) String() string            { return proto.CompactTextString(m) }
func (*ChatMsgMeta) ProtoMessage()               {}
func (*ChatMsgMeta) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{20} }

func (m *ChatMsgMeta) GetTopMsg() int32 {
	if m != nil {
		return m.TopMsg
	}
	return 0
}

func (m *ChatMsgMeta) GetTopPts() int32 {
	if m != nil {
		return m.TopPts
	}
	return 0
}

func (m *ChatMsgMeta) GetToDate() int32 {
	if m != nil {
		return m.ToDate
	}
	return 0
}

// 超级群发送数字钱包红包
type ReqSendRpm struct {
	FromKeyId int64         `protobuf:"varint,1,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Req       []byte        `protobuf:"bytes,3,opt,name=req,proto3" json:"req,omitempty"`
	RpmResp   []byte        `protobuf:"bytes,4,opt,name=rpmResp,proto3" json:"rpmResp,omitempty"`
	Dbg       *pbcomm.Debug `protobuf:"bytes,5,opt,name=dbg" json:"dbg,omitempty"`
}

func (m *ReqSendRpm) Reset()                    { *m = ReqSendRpm{} }
func (m *ReqSendRpm) String() string            { return proto.CompactTextString(m) }
func (*ReqSendRpm) ProtoMessage()               {}
func (*ReqSendRpm) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{21} }

func (m *ReqSendRpm) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqSendRpm) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqSendRpm) GetReq() []byte {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *ReqSendRpm) GetRpmResp() []byte {
	if m != nil {
		return m.RpmResp
	}
	return nil
}

func (m *ReqSendRpm) GetDbg() *pbcomm.Debug {
	if m != nil {
		return m.Dbg
	}
	return nil
}

// 超级群发送数字钱包红包返回结果
type ReplySendRpm struct {
	Result  []byte       `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	Meta    *ChatMsgMeta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	ErrCode int32        `protobuf:"varint,3,opt,name=errCode,proto3" json:"errCode,omitempty"`
	Error   string       `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplySendRpm) Reset()                    { *m = ReplySendRpm{} }
func (m *ReplySendRpm) String() string            { return proto.CompactTextString(m) }
func (*ReplySendRpm) ProtoMessage()               {}
func (*ReplySendRpm) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{22} }

func (m *ReplySendRpm) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplySendRpm) GetMeta() *ChatMsgMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ReplySendRpm) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ReplySendRpm) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ReqEditRpm struct {
	FromKeyId     int64         `protobuf:"varint,1,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	FromId        int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChanId        int32         `protobuf:"varint,3,opt,name=chanId,proto3" json:"chanId,omitempty"`
	MsgId         int32         `protobuf:"varint,4,opt,name=msgId,proto3" json:"msgId,omitempty"`
	ChanAccHash   int64         `protobuf:"varint,5,opt,name=chanAccHash,proto3" json:"chanAccHash,omitempty"`
	RpmResultCode int32         `protobuf:"varint,6,opt,name=rpmResultCode,proto3" json:"rpmResultCode,omitempty"`
	Dbg           *pbcomm.Debug `protobuf:"bytes,7,opt,name=dbg" json:"dbg,omitempty"`
}

func (m *ReqEditRpm) Reset()                    { *m = ReqEditRpm{} }
func (m *ReqEditRpm) String() string            { return proto.CompactTextString(m) }
func (*ReqEditRpm) ProtoMessage()               {}
func (*ReqEditRpm) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{23} }

func (m *ReqEditRpm) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqEditRpm) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqEditRpm) GetChanId() int32 {
	if m != nil {
		return m.ChanId
	}
	return 0
}

func (m *ReqEditRpm) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqEditRpm) GetChanAccHash() int64 {
	if m != nil {
		return m.ChanAccHash
	}
	return 0
}

func (m *ReqEditRpm) GetRpmResultCode() int32 {
	if m != nil {
		return m.RpmResultCode
	}
	return 0
}

func (m *ReqEditRpm) GetDbg() *pbcomm.Debug {
	if m != nil {
		return m.Dbg
	}
	return nil
}

type ReqEditRpmV2 struct {
	FromKeyId   int64         `protobuf:"varint,1,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	FromId      int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChanId      int32         `protobuf:"varint,3,opt,name=chanId,proto3" json:"chanId,omitempty"`
	MsgId       int32         `protobuf:"varint,4,opt,name=msgId,proto3" json:"msgId,omitempty"`
	ChanAccHash int64         `protobuf:"varint,5,opt,name=chanAccHash,proto3" json:"chanAccHash,omitempty"`
	RpmResult   []byte        `protobuf:"bytes,6,opt,name=rpmResult,proto3" json:"rpmResult,omitempty"`
	Dbg         *pbcomm.Debug `protobuf:"bytes,7,opt,name=dbg" json:"dbg,omitempty"`
}

func (m *ReqEditRpmV2) Reset()                    { *m = ReqEditRpmV2{} }
func (m *ReqEditRpmV2) String() string            { return proto.CompactTextString(m) }
func (*ReqEditRpmV2) ProtoMessage()               {}
func (*ReqEditRpmV2) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{24} }

func (m *ReqEditRpmV2) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqEditRpmV2) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqEditRpmV2) GetChanId() int32 {
	if m != nil {
		return m.ChanId
	}
	return 0
}

func (m *ReqEditRpmV2) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqEditRpmV2) GetChanAccHash() int64 {
	if m != nil {
		return m.ChanAccHash
	}
	return 0
}

func (m *ReqEditRpmV2) GetRpmResult() []byte {
	if m != nil {
		return m.RpmResult
	}
	return nil
}

func (m *ReqEditRpmV2) GetDbg() *pbcomm.Debug {
	if m != nil {
		return m.Dbg
	}
	return nil
}

type ReqEditPayment struct {
	FromKeyId   int64         `protobuf:"varint,1,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	FromId      int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChanId      int32         `protobuf:"varint,3,opt,name=chanId,proto3" json:"chanId,omitempty"`
	MsgId       int32         `protobuf:"varint,4,opt,name=msgId,proto3" json:"msgId,omitempty"`
	Flags       int32         `protobuf:"varint,5,opt,name=flags,proto3" json:"flags,omitempty"`
	ChanAccHash int64         `protobuf:"varint,6,opt,name=chanAccHash,proto3" json:"chanAccHash,omitempty"`
	RpmResult   []byte        `protobuf:"bytes,7,opt,name=rpmResult,proto3" json:"rpmResult,omitempty"`
	Options     []byte        `protobuf:"bytes,8,opt,name=options,proto3" json:"options,omitempty"`
	Dbg         *pbcomm.Debug `protobuf:"bytes,9,opt,name=dbg" json:"dbg,omitempty"`
}

func (m *ReqEditPayment) Reset()                    { *m = ReqEditPayment{} }
func (m *ReqEditPayment) String() string            { return proto.CompactTextString(m) }
func (*ReqEditPayment) ProtoMessage()               {}
func (*ReqEditPayment) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{25} }

func (m *ReqEditPayment) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqEditPayment) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqEditPayment) GetChanId() int32 {
	if m != nil {
		return m.ChanId
	}
	return 0
}

func (m *ReqEditPayment) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqEditPayment) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqEditPayment) GetChanAccHash() int64 {
	if m != nil {
		return m.ChanAccHash
	}
	return 0
}

func (m *ReqEditPayment) GetRpmResult() []byte {
	if m != nil {
		return m.RpmResult
	}
	return nil
}

func (m *ReqEditPayment) GetOptions() []byte {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ReqEditPayment) GetDbg() *pbcomm.Debug {
	if m != nil {
		return m.Dbg
	}
	return nil
}

type ReplyEditRpm struct {
	Result  []byte `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ErrCode int32  `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyEditRpm) Reset()                    { *m = ReplyEditRpm{} }
func (m *ReplyEditRpm) String() string            { return proto.CompactTextString(m) }
func (*ReplyEditRpm) ProtoMessage()               {}
func (*ReplyEditRpm) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{26} }

func (m *ReplyEditRpm) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyEditRpm) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ReplyEditRpm) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// 领取超级群红包请求
type ReqRecvRpm struct {
	FromKeyId int64         `protobuf:"varint,1,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Req       []byte        `protobuf:"bytes,3,opt,name=req,proto3" json:"req,omitempty"`
	MetaData  []byte        `protobuf:"bytes,4,opt,name=metaData,proto3" json:"metaData,omitempty"`
	Dbg       *pbcomm.Debug `protobuf:"bytes,5,opt,name=dbg" json:"dbg,omitempty"`
}

func (m *ReqRecvRpm) Reset()                    { *m = ReqRecvRpm{} }
func (m *ReqRecvRpm) String() string            { return proto.CompactTextString(m) }
func (*ReqRecvRpm) ProtoMessage()               {}
func (*ReqRecvRpm) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{27} }

func (m *ReqRecvRpm) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqRecvRpm) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqRecvRpm) GetReq() []byte {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *ReqRecvRpm) GetMetaData() []byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *ReqRecvRpm) GetDbg() *pbcomm.Debug {
	if m != nil {
		return m.Dbg
	}
	return nil
}

type ReplyRecvRpm struct {
	Result  []byte `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ErrCode int32  `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyRecvRpm) Reset()                    { *m = ReplyRecvRpm{} }
func (m *ReplyRecvRpm) String() string            { return proto.CompactTextString(m) }
func (*ReplyRecvRpm) ProtoMessage()               {}
func (*ReplyRecvRpm) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{28} }

func (m *ReplyRecvRpm) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyRecvRpm) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ReplyRecvRpm) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*ReplyChannelData)(nil), "imchannelserver.ReplyChannelData")
	proto.RegisterType((*ReqCreateChannel)(nil), "imchannelserver.ReqCreateChannel")
	proto.RegisterType((*ReqInviteChannelMember)(nil), "imchannelserver.ReqInviteChannelMember")
	proto.RegisterType((*ReqDeleteChannel)(nil), "imchannelserver.ReqDeleteChannel")
	proto.RegisterType((*ReqDeleteChannelMsg)(nil), "imchannelserver.ReqDeleteChannelMsg")
	proto.RegisterType((*ReqEditChannelAbout)(nil), "imchannelserver.ReqEditChannelAbout")
	proto.RegisterType((*ReqEditChannelAdmin)(nil), "imchannelserver.ReqEditChannelAdmin")
	proto.RegisterType((*ReqEditChannelPhoto)(nil), "imchannelserver.ReqEditChannelPhoto")
	proto.RegisterType((*ReqEditChannelTitle)(nil), "imchannelserver.ReqEditChannelTitle")
	proto.RegisterType((*ReqEditEveryoneQuiet)(nil), "imchannelserver.ReqEditEveryoneQuiet")
	proto.RegisterType((*ReqExportChannelLink)(nil), "imchannelserver.ReqExportChannelLink")
	proto.RegisterType((*ReqGetChannelMessageExportLink)(nil), "imchannelserver.ReqGetChannelMessageExportLink")
	proto.RegisterType((*ReqEditPrivateChat)(nil), "imchannelserver.ReqEditPrivateChat")
	proto.RegisterType((*ReqChannelsReadMessageContents)(nil), "imchannelserver.ReqChannelsReadMessageContents")
	proto.RegisterType((*ReqChannelToggleInvite)(nil), "imchannelserver.ReqChannelToggleInvite")
	proto.RegisterType((*ReqUpdatePinnedChannelMessage)(nil), "imchannelserver.ReqUpdatePinnedChannelMessage")
	proto.RegisterType((*ReqUpdateChannelUserName)(nil), "imchannelserver.ReqUpdateChannelUserName")
	proto.RegisterType((*ReqGetChannelAdminLog)(nil), "imchannelserver.ReqGetChannelAdminLog")
	proto.RegisterType((*ChannelAdminLogEventFilter)(nil), "imchannelserver.ChannelAdminLogEventFilter")
	proto.RegisterType((*ReqGetParticipant)(nil), "imchannelserver.ReqGetParticipant")
	proto.RegisterType((*ChatMsgMeta)(nil), "imchannelserver.ChatMsgMeta")
	proto.RegisterType((*ReqSendRpm)(nil), "imchannelserver.ReqSendRpm")
	proto.RegisterType((*ReplySendRpm)(nil), "imchannelserver.ReplySendRpm")
	proto.RegisterType((*ReqEditRpm)(nil), "imchannelserver.ReqEditRpm")
	proto.RegisterType((*ReqEditRpmV2)(nil), "imchannelserver.ReqEditRpmV2")
	proto.RegisterType((*ReqEditPayment)(nil), "imchannelserver.ReqEditPayment")
	proto.RegisterType((*ReplyEditRpm)(nil), "imchannelserver.ReplyEditRpm")
	proto.RegisterType((*ReqRecvRpm)(nil), "imchannelserver.ReqRecvRpm")
	proto.RegisterType((*ReplyRecvRpm)(nil), "imchannelserver.ReplyRecvRpm")
}
func (m *ReplyChannelData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannelData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqCreateChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.UserId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromKeyid))
	}
	if m.BroadCast {
		dAtA[i] = 0x30
		i++
		if m.BroadCast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Megagroup {
		dAtA[i] = 0x38
		i++
		if m.Megagroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ReplyMsgId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ReplyMsgId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Debug.Size()))
		n1, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ReqInviteChannelMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqInviteChannelMember) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.UserId))
	}
	if len(m.PeerId) > 0 {
		dAtA3 := make([]byte, len(m.PeerId)*10)
		var j2 int
		for _, num1 := range m.PeerId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromKeyid))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Debug.Size()))
		n4, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ReqDeleteChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Debug.Size()))
		n5, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *ReqDeleteChannelMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteChannelMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Flags))
	}
	if m.Revoke {
		dAtA[i] = 0x20
		i++
		if m.Revoke {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Id) > 0 {
		dAtA7 := make([]byte, len(m.Id)*10)
		var j6 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if m.Channelid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Channelid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Debug.Size()))
		n8, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *ReqEditChannelAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChannelAbout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Debug.Size()))
		n9, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *ReqEditChannelAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChannelAdmin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.UserId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromKeyId))
	}
	if len(m.Role) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Role)))
		i += copy(dAtA[i:], m.Role)
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.KeyId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Debug.Size()))
		n10, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *ReqEditChannelPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChannelPhoto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.UserId))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Debug.Size()))
		n11, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *ReqEditChannelTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChannelTitle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Debug.Size()))
		n12, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *ReqEditEveryoneQuiet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditEveryoneQuiet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChannelId))
	}
	if m.Quiet {
		dAtA[i] = 0x18
		i++
		if m.Quiet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Debug.Size()))
		n13, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *ReqExportChannelLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqExportChannelLink) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Debug.Size()))
		n14, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *ReqGetChannelMessageExportLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMessageExportLink) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Debug.Size()))
		n15, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *ReqEditPrivateChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditPrivateChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChannelId))
	}
	if m.Ok {
		dAtA[i] = 0x18
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Debug.Size()))
		n16, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *ReqChannelsReadMessageContents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChannelsReadMessageContents) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Keyid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Keyid))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.UserId))
	}
	if len(m.Result) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Debug.Size()))
		n17, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *ReqChannelToggleInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChannelToggleInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.UserId))
	}
	if m.Enabled {
		dAtA[i] = 0x18
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Debug.Size()))
		n18, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *ReqUpdatePinnedChannelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdatePinnedChannelMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromId))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Flags))
	}
	if m.Silent {
		dAtA[i] = 0x18
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChannelId))
	}
	if m.Id != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Id))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Debug.Size()))
		n19, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *ReqUpdateChannelUserName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateChannelUserName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.AccessHash))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromId))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Debug.Size()))
		n20, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *ReqGetChannelAdminLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelAdminLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromKeyId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.Q) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	if m.EventFilter != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.EventFilter.Size()))
		n21, err := m.EventFilter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if len(m.Admins) > 0 {
		dAtA23 := make([]byte, len(m.Admins)*10)
		var j22 int
		for _, num1 := range m.Admins {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(j22))
		i += copy(dAtA[i:], dAtA23[:j22])
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.MaxId))
	}
	if m.MinId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.MinId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Debug.Size()))
		n24, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *ChannelAdminLogEventFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelAdminLogEventFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Flags))
	}
	if m.Join {
		dAtA[i] = 0x10
		i++
		if m.Join {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Leave {
		dAtA[i] = 0x18
		i++
		if m.Leave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Invite {
		dAtA[i] = 0x20
		i++
		if m.Invite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ban {
		dAtA[i] = 0x28
		i++
		if m.Ban {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Unban {
		dAtA[i] = 0x30
		i++
		if m.Unban {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Kick {
		dAtA[i] = 0x38
		i++
		if m.Kick {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Unkick {
		dAtA[i] = 0x40
		i++
		if m.Unkick {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Promote {
		dAtA[i] = 0x48
		i++
		if m.Promote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Demote {
		dAtA[i] = 0x50
		i++
		if m.Demote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Info {
		dAtA[i] = 0x58
		i++
		if m.Info {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Setting {
		dAtA[i] = 0x60
		i++
		if m.Setting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Pinned {
		dAtA[i] = 0x68
		i++
		if m.Pinned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Edit {
		dAtA[i] = 0x70
		i++
		if m.Edit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Delete {
		dAtA[i] = 0x78
		i++
		if m.Delete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReqGetParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetParticipant) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channelid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Channelid))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Debug.Size()))
		n25, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func (m *ChatMsgMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatMsgMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopMsg != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.TopMsg))
	}
	if m.TopPts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.TopPts))
	}
	if m.ToDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ToDate))
	}
	return i, nil
}

func (m *ReqSendRpm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendRpm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromKeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromId))
	}
	if len(m.Req) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Req)))
		i += copy(dAtA[i:], m.Req)
	}
	if len(m.RpmResp) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.RpmResp)))
		i += copy(dAtA[i:], m.RpmResp)
	}
	if m.Dbg != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Dbg.Size()))
		n26, err := m.Dbg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}

func (m *ReplySendRpm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplySendRpm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Meta != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Meta.Size()))
		n27, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.ErrCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *ReqEditRpm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditRpm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromKeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromId))
	}
	if m.ChanId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChanId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.MsgId))
	}
	if m.ChanAccHash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChanAccHash))
	}
	if m.RpmResultCode != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.RpmResultCode))
	}
	if m.Dbg != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Dbg.Size()))
		n28, err := m.Dbg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *ReqEditRpmV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditRpmV2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromKeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromId))
	}
	if m.ChanId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChanId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.MsgId))
	}
	if m.ChanAccHash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChanAccHash))
	}
	if len(m.RpmResult) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.RpmResult)))
		i += copy(dAtA[i:], m.RpmResult)
	}
	if m.Dbg != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Dbg.Size()))
		n29, err := m.Dbg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *ReqEditPayment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditPayment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromKeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromId))
	}
	if m.ChanId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChanId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.MsgId))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Flags))
	}
	if m.ChanAccHash != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ChanAccHash))
	}
	if len(m.RpmResult) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.RpmResult)))
		i += copy(dAtA[i:], m.RpmResult)
	}
	if len(m.Options) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Options)))
		i += copy(dAtA[i:], m.Options)
	}
	if m.Dbg != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Dbg.Size()))
		n30, err := m.Dbg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}

func (m *ReplyEditRpm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyEditRpm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.ErrCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *ReqRecvRpm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRecvRpm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromKeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.FromId))
	}
	if len(m.Req) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Req)))
		i += copy(dAtA[i:], m.Req)
	}
	if len(m.MetaData) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.MetaData)))
		i += copy(dAtA[i:], m.MetaData)
	}
	if m.Dbg != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Dbg.Size()))
		n31, err := m.Dbg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *ReplyRecvRpm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyRecvRpm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.ErrCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReplyChannelData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovCommon(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqCreateChannel) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovCommon(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovCommon(uint64(m.UserId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovCommon(uint64(m.FromKeyid))
	}
	if m.BroadCast {
		n += 2
	}
	if m.Megagroup {
		n += 2
	}
	if m.ReplyMsgId != 0 {
		n += 1 + sovCommon(uint64(m.ReplyMsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqInviteChannelMember) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovCommon(uint64(m.ChannelId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovCommon(uint64(m.UserId))
	}
	if len(m.PeerId) > 0 {
		l = 0
		for _, e := range m.PeerId {
			l += sovCommon(uint64(e))
		}
		n += 1 + sovCommon(uint64(l)) + l
	}
	if m.FromKeyid != 0 {
		n += 1 + sovCommon(uint64(m.FromKeyid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovCommon(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqDeleteChannel) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovCommon(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovCommon(uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovCommon(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovCommon(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqDeleteChannelMsg) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovCommon(uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovCommon(uint64(m.FromKeyid))
	}
	if m.Flags != 0 {
		n += 1 + sovCommon(uint64(m.Flags))
	}
	if m.Revoke {
		n += 2
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovCommon(uint64(e))
		}
		n += 1 + sovCommon(uint64(l)) + l
	}
	if m.Channelid != 0 {
		n += 1 + sovCommon(uint64(m.Channelid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqEditChannelAbout) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovCommon(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovCommon(uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovCommon(uint64(m.ChannelId))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.AccessHash != 0 {
		n += 1 + sovCommon(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqEditChannelAdmin) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovCommon(uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovCommon(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovCommon(uint64(m.UserId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovCommon(uint64(m.FromKeyId))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovCommon(uint64(m.KeyId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovCommon(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqEditChannelPhoto) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovCommon(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovCommon(uint64(m.UserId))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovCommon(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqEditChannelTitle) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovCommon(uint64(m.ChannelId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovCommon(uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovCommon(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqEditEveryoneQuiet) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovCommon(uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovCommon(uint64(m.ChannelId))
	}
	if m.Quiet {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqExportChannelLink) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovCommon(uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		n += 1 + sovCommon(uint64(m.FromId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqGetChannelMessageExportLink) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqEditPrivateChat) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovCommon(uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovCommon(uint64(m.ChannelId))
	}
	if m.Ok {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqChannelsReadMessageContents) Size() (n int) {
	var l int
	_ = l
	if m.Keyid != 0 {
		n += 1 + sovCommon(uint64(m.Keyid))
	}
	if m.UserId != 0 {
		n += 1 + sovCommon(uint64(m.UserId))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqChannelToggleInvite) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovCommon(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovCommon(uint64(m.UserId))
	}
	if m.Enabled {
		n += 2
	}
	if m.AccessHash != 0 {
		n += 1 + sovCommon(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqUpdatePinnedChannelMessage) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovCommon(uint64(m.FromId))
	}
	if m.Flags != 0 {
		n += 1 + sovCommon(uint64(m.Flags))
	}
	if m.Silent {
		n += 2
	}
	if m.ChannelId != 0 {
		n += 1 + sovCommon(uint64(m.ChannelId))
	}
	if m.Id != 0 {
		n += 1 + sovCommon(uint64(m.Id))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovCommon(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqUpdateChannelUserName) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovCommon(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovCommon(uint64(m.AccessHash))
	}
	if m.FromId != 0 {
		n += 1 + sovCommon(uint64(m.FromId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqGetChannelAdminLog) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovCommon(uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		n += 1 + sovCommon(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovCommon(uint64(m.FromKeyId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovCommon(uint64(m.AccessHash))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.EventFilter != nil {
		l = m.EventFilter.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Admins) > 0 {
		l = 0
		for _, e := range m.Admins {
			l += sovCommon(uint64(e))
		}
		n += 1 + sovCommon(uint64(l)) + l
	}
	if m.MaxId != 0 {
		n += 1 + sovCommon(uint64(m.MaxId))
	}
	if m.MinId != 0 {
		n += 1 + sovCommon(uint64(m.MinId))
	}
	if m.Limit != 0 {
		n += 1 + sovCommon(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ChannelAdminLogEventFilter) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovCommon(uint64(m.Flags))
	}
	if m.Join {
		n += 2
	}
	if m.Leave {
		n += 2
	}
	if m.Invite {
		n += 2
	}
	if m.Ban {
		n += 2
	}
	if m.Unban {
		n += 2
	}
	if m.Kick {
		n += 2
	}
	if m.Unkick {
		n += 2
	}
	if m.Promote {
		n += 2
	}
	if m.Demote {
		n += 2
	}
	if m.Info {
		n += 2
	}
	if m.Setting {
		n += 2
	}
	if m.Pinned {
		n += 2
	}
	if m.Edit {
		n += 2
	}
	if m.Delete {
		n += 2
	}
	return n
}

func (m *ReqGetParticipant) Size() (n int) {
	var l int
	_ = l
	if m.Channelid != 0 {
		n += 1 + sovCommon(uint64(m.Channelid))
	}
	if m.FromId != 0 {
		n += 1 + sovCommon(uint64(m.FromId))
	}
	if m.UserId != 0 {
		n += 1 + sovCommon(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovCommon(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ChatMsgMeta) Size() (n int) {
	var l int
	_ = l
	if m.TopMsg != 0 {
		n += 1 + sovCommon(uint64(m.TopMsg))
	}
	if m.TopPts != 0 {
		n += 1 + sovCommon(uint64(m.TopPts))
	}
	if m.ToDate != 0 {
		n += 1 + sovCommon(uint64(m.ToDate))
	}
	return n
}

func (m *ReqSendRpm) Size() (n int) {
	var l int
	_ = l
	if m.FromKeyId != 0 {
		n += 1 + sovCommon(uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		n += 1 + sovCommon(uint64(m.FromId))
	}
	l = len(m.Req)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.RpmResp)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Dbg != nil {
		l = m.Dbg.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReplySendRpm) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ErrCode != 0 {
		n += 1 + sovCommon(uint64(m.ErrCode))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqEditRpm) Size() (n int) {
	var l int
	_ = l
	if m.FromKeyId != 0 {
		n += 1 + sovCommon(uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		n += 1 + sovCommon(uint64(m.FromId))
	}
	if m.ChanId != 0 {
		n += 1 + sovCommon(uint64(m.ChanId))
	}
	if m.MsgId != 0 {
		n += 1 + sovCommon(uint64(m.MsgId))
	}
	if m.ChanAccHash != 0 {
		n += 1 + sovCommon(uint64(m.ChanAccHash))
	}
	if m.RpmResultCode != 0 {
		n += 1 + sovCommon(uint64(m.RpmResultCode))
	}
	if m.Dbg != nil {
		l = m.Dbg.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqEditRpmV2) Size() (n int) {
	var l int
	_ = l
	if m.FromKeyId != 0 {
		n += 1 + sovCommon(uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		n += 1 + sovCommon(uint64(m.FromId))
	}
	if m.ChanId != 0 {
		n += 1 + sovCommon(uint64(m.ChanId))
	}
	if m.MsgId != 0 {
		n += 1 + sovCommon(uint64(m.MsgId))
	}
	if m.ChanAccHash != 0 {
		n += 1 + sovCommon(uint64(m.ChanAccHash))
	}
	l = len(m.RpmResult)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Dbg != nil {
		l = m.Dbg.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqEditPayment) Size() (n int) {
	var l int
	_ = l
	if m.FromKeyId != 0 {
		n += 1 + sovCommon(uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		n += 1 + sovCommon(uint64(m.FromId))
	}
	if m.ChanId != 0 {
		n += 1 + sovCommon(uint64(m.ChanId))
	}
	if m.MsgId != 0 {
		n += 1 + sovCommon(uint64(m.MsgId))
	}
	if m.Flags != 0 {
		n += 1 + sovCommon(uint64(m.Flags))
	}
	if m.ChanAccHash != 0 {
		n += 1 + sovCommon(uint64(m.ChanAccHash))
	}
	l = len(m.RpmResult)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Options)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Dbg != nil {
		l = m.Dbg.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReplyEditRpm) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ErrCode != 0 {
		n += 1 + sovCommon(uint64(m.ErrCode))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReqRecvRpm) Size() (n int) {
	var l int
	_ = l
	if m.FromKeyId != 0 {
		n += 1 + sovCommon(uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		n += 1 + sovCommon(uint64(m.FromId))
	}
	l = len(m.Req)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.MetaData)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Dbg != nil {
		l = m.Dbg.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ReplyRecvRpm) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ErrCode != 0 {
		n += 1 + sovCommon(uint64(m.ErrCode))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func sovCommon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReplyChannelData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannelData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannelData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadCast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BroadCast = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Megagroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Megagroup = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMsgId", wireType)
			}
			m.ReplyMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyMsgId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqInviteChannelMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqInviteChannelMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqInviteChannelMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PeerId = append(m.PeerId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommon
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PeerId = append(m.PeerId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteChannelMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteChannelMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteChannelMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoke", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Revoke = bool(v != 0)
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommon
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
			m.Channelid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channelid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChannelAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChannelAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChannelAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChannelAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChannelAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChannelAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = append(m.Role[:0], dAtA[iNdEx:postIndex]...)
			if m.Role == nil {
				m.Role = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChannelPhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChannelPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChannelPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo[:0], dAtA[iNdEx:postIndex]...)
			if m.Photo == nil {
				m.Photo = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChannelTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChannelTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChannelTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditEveryoneQuiet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditEveryoneQuiet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditEveryoneQuiet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quiet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Quiet = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqExportChannelLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqExportChannelLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqExportChannelLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMessageExportLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMessageExportLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMessageExportLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditPrivateChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditPrivateChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditPrivateChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChannelsReadMessageContents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChannelsReadMessageContents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChannelsReadMessageContents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyid", wireType)
			}
			m.Keyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChannelToggleInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChannelToggleInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChannelToggleInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdatePinnedChannelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdatePinnedChannelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdatePinnedChannelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateChannelUserName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateChannelUserName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateChannelUserName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelAdminLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelAdminLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelAdminLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventFilter == nil {
				m.EventFilter = &ChannelAdminLogEventFilter{}
			}
			if err := m.EventFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Admins = append(m.Admins, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommon
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Admins = append(m.Admins, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelAdminLogEventFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelAdminLogEventFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelAdminLogEventFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Join", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Join = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Leave = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Invite = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ban", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ban = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unban", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unban = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kick", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kick = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unkick", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unkick = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Promote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Promote = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Demote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Demote = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Info = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Setting = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pinned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pinned = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Edit = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Delete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
			m.Channelid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channelid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatMsgMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatMsgMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatMsgMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMsg", wireType)
			}
			m.TopMsg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMsg |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopPts", wireType)
			}
			m.TopPts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopPts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToDate", wireType)
			}
			m.ToDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendRpm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendRpm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendRpm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Req = append(m.Req[:0], dAtA[iNdEx:postIndex]...)
			if m.Req == nil {
				m.Req = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpmResp", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpmResp = append(m.RpmResp[:0], dAtA[iNdEx:postIndex]...)
			if m.RpmResp == nil {
				m.RpmResp = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dbg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dbg == nil {
				m.Dbg = &pbcomm.Debug{}
			}
			if err := m.Dbg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplySendRpm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplySendRpm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplySendRpm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ChatMsgMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditRpm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditRpm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditRpm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanId", wireType)
			}
			m.ChanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChanId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanAccHash", wireType)
			}
			m.ChanAccHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChanAccHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpmResultCode", wireType)
			}
			m.RpmResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RpmResultCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dbg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dbg == nil {
				m.Dbg = &pbcomm.Debug{}
			}
			if err := m.Dbg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditRpmV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditRpmV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditRpmV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanId", wireType)
			}
			m.ChanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChanId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanAccHash", wireType)
			}
			m.ChanAccHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChanAccHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpmResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpmResult = append(m.RpmResult[:0], dAtA[iNdEx:postIndex]...)
			if m.RpmResult == nil {
				m.RpmResult = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dbg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dbg == nil {
				m.Dbg = &pbcomm.Debug{}
			}
			if err := m.Dbg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditPayment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditPayment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditPayment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanId", wireType)
			}
			m.ChanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChanId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanAccHash", wireType)
			}
			m.ChanAccHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChanAccHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpmResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpmResult = append(m.RpmResult[:0], dAtA[iNdEx:postIndex]...)
			if m.RpmResult == nil {
				m.RpmResult = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options[:0], dAtA[iNdEx:postIndex]...)
			if m.Options == nil {
				m.Options = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dbg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dbg == nil {
				m.Dbg = &pbcomm.Debug{}
			}
			if err := m.Dbg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyEditRpm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyEditRpm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyEditRpm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRecvRpm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRecvRpm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRecvRpm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Req = append(m.Req[:0], dAtA[iNdEx:postIndex]...)
			if m.Req == nil {
				m.Req = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaData = append(m.MetaData[:0], dAtA[iNdEx:postIndex]...)
			if m.MetaData == nil {
				m.MetaData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dbg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dbg == nil {
				m.Dbg = &pbcomm.Debug{}
			}
			if err := m.Dbg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyRecvRpm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyRecvRpm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyRecvRpm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/imchannelserver/common.proto", fileDescriptorCommon)
}

var fileDescriptorCommon = []byte{
	// 1527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4f, 0x6f, 0xdc, 0x44,
	0x14, 0x97, 0xbd, 0xff, 0x27, 0xdb, 0xb4, 0x98, 0x36, 0x58, 0x51, 0x1b, 0x56, 0x81, 0x43, 0x24,
	0xa4, 0x14, 0x95, 0x0b, 0xd7, 0x92, 0x94, 0x12, 0xd1, 0x45, 0x61, 0x20, 0xbd, 0xa1, 0x6a, 0x76,
	0xfd, 0xe2, 0x0c, 0x6b, 0x7b, 0xbc, 0xf6, 0xec, 0xaa, 0x39, 0x71, 0x42, 0x20, 0x71, 0x40, 0x48,
	0x7c, 0x05, 0xb8, 0x20, 0x0e, 0x7c, 0x08, 0x24, 0x2e, 0x48, 0x48, 0x5c, 0xe0, 0x56, 0xf5, 0x86,
	0xc4, 0x85, 0x6f, 0x80, 0xe6, 0xcd, 0x78, 0xfd, 0x27, 0xf5, 0x6e, 0x14, 0x2d, 0x12, 0xa7, 0xf8,
	0xf7, 0xbc, 0x7e, 0xf3, 0x7e, 0xbf, 0x79, 0x7f, 0x66, 0x42, 0xee, 0xfb, 0x5c, 0x06, 0x6c, 0xb4,
	0x3f, 0x3e, 0x63, 0x32, 0x85, 0x64, 0x0e, 0xc9, 0x3e, 0x0f, 0xef, 0xf2, 0x48, 0x42, 0x72, 0xca,
	0xc6, 0x10, 0x27, 0x62, 0x34, 0x3b, 0xbd, 0xcb, 0xc3, 0xf1, 0x19, 0x8b, 0x22, 0x08, 0xf4, 0x4f,
	0xee, 0x8e, 0x45, 0x18, 0x8a, 0x68, 0x3f, 0x4e, 0x84, 0x14, 0xce, 0xf5, 0xca, 0xdb, 0xed, 0xb7,
	0x2f, 0xe5, 0x33, 0x1e, 0x29, 0x2f, 0xe6, 0x8f, 0x76, 0xb5, 0xfb, 0x90, 0xdc, 0xa0, 0x10, 0x07,
	0xe7, 0x07, 0xda, 0xdf, 0x21, 0x93, 0xcc, 0xb9, 0x49, 0x5a, 0x89, 0xb2, 0xb9, 0xd6, 0xc0, 0xda,
	0xeb, 0x53, 0x0d, 0x9c, 0x3b, 0x84, 0x40, 0x92, 0x88, 0xe4, 0xc9, 0x58, 0x78, 0xe0, 0xda, 0x03,
	0x6b, 0xaf, 0x45, 0x7b, 0x68, 0x39, 0x10, 0x1e, 0xec, 0x7e, 0x6b, 0x2b, 0x4f, 0xd3, 0x83, 0x04,
	0x98, 0x04, 0xe3, 0xcd, 0xb9, 0x4d, 0x7a, 0x26, 0xd0, 0x23, 0x0f, 0xbd, 0xb5, 0x68, 0x6e, 0x70,
	0xb6, 0x48, 0x7b, 0x96, 0x42, 0x72, 0xe4, 0x19, 0x6f, 0x06, 0xa9, 0xf5, 0x25, 0x97, 0x01, 0xb8,
	0x8d, 0x81, 0xb5, 0xd7, 0xa3, 0x1a, 0x28, 0x2b, 0x1b, 0x89, 0x99, 0x74, 0x9b, 0xda, 0x8a, 0x40,
	0x45, 0x75, 0x9a, 0x88, 0xf0, 0xc9, 0x04, 0xce, 0xb9, 0xe7, 0xb6, 0x06, 0xd6, 0x5e, 0x83, 0xf6,
	0x94, 0xe5, 0x7d, 0x65, 0x50, 0x01, 0x8c, 0x12, 0xc1, 0xbc, 0x03, 0x96, 0x4a, 0xb7, 0x3d, 0xb0,
	0xf6, 0xba, 0x34, 0x37, 0xa8, 0xb7, 0x21, 0xf8, 0xcc, 0x4f, 0xc4, 0x2c, 0x76, 0x3b, 0xfa, 0xed,
	0xc2, 0xe0, 0xec, 0x10, 0x82, 0xcc, 0x87, 0xa9, 0x7f, 0xe4, 0xb9, 0xdd, 0x81, 0xb5, 0xd7, 0xa4,
	0x05, 0x8b, 0xf3, 0x1a, 0x69, 0x79, 0x30, 0x9a, 0xf9, 0x6e, 0x6f, 0x60, 0xed, 0x6d, 0xdc, 0xbb,
	0xb6, 0x6f, 0x84, 0x3d, 0x54, 0x46, 0xaa, 0xdf, 0xed, 0x3e, 0xb3, 0xc8, 0x16, 0x85, 0xe9, 0x51,
	0x34, 0xe7, 0x0b, 0x59, 0x86, 0x10, 0x8e, 0x20, 0x59, 0x21, 0xce, 0x42, 0x04, 0xbb, 0x28, 0x42,
	0x2e, 0x59, 0xa3, 0x24, 0xd9, 0x16, 0x69, 0xc7, 0x80, 0xf6, 0xe6, 0xa0, 0xa1, 0xec, 0x1a, 0xad,
	0x92, 0x67, 0x87, 0x10, 0x36, 0x1e, 0x43, 0x9a, 0xbe, 0xc7, 0xd2, 0x33, 0xd4, 0xa7, 0x41, 0x0b,
	0x96, 0x9c, 0x62, 0x67, 0x09, 0xc5, 0x1f, 0x2c, 0xdc, 0xf9, 0x43, 0x08, 0x20, 0xdf, 0xf9, 0x2d,
	0xd2, 0x56, 0xcb, 0x2c, 0x98, 0x19, 0xa4, 0x48, 0x9b, 0xe5, 0xcd, 0xb6, 0xe7, 0xf1, 0xe8, 0xb7,
	0xb9, 0x24, 0x8d, 0xaa, 0x24, 0xe5, 0x68, 0x9b, 0xf5, 0xd1, 0xb6, 0x96, 0x44, 0xfb, 0xab, 0x45,
	0x5e, 0xae, 0x46, 0x3b, 0x4c, 0xfd, 0x2c, 0x60, 0x5e, 0x0a, 0x98, 0x57, 0x15, 0xb4, 0x31, 0x0b,
	0x0a, 0x0a, 0xde, 0x24, 0xad, 0xd3, 0x80, 0xf9, 0xa9, 0x89, 0x56, 0x03, 0xe5, 0x2c, 0x81, 0xb9,
	0x98, 0x00, 0x46, 0xd9, 0xa5, 0x06, 0x39, 0x9b, 0xc4, 0xc6, 0x6d, 0x50, 0x5b, 0x64, 0xf3, 0x22,
	0x5f, 0xee, 0xa1, 0xfc, 0x39, 0x5f, 0x5e, 0x48, 0xb0, 0xee, 0x12, 0x3e, 0x3f, 0x6b, 0x3e, 0x0f,
	0x3c, 0x2e, 0x0d, 0x9b, 0xfb, 0x58, 0x18, 0xaf, 0x90, 0x0e, 0xc6, 0xcd, 0xd7, 0xb9, 0x03, 0x2f,
	0xae, 0xc1, 0xf2, 0xbe, 0xb4, 0xea, 0xf7, 0xa5, 0xbd, 0x84, 0xc7, 0x3f, 0x17, 0x79, 0x78, 0x21,
	0x8f, 0x96, 0xf2, 0xc8, 0x23, 0xb5, 0xeb, 0x7b, 0x4b, 0xb9, 0x50, 0x4a, 0xec, 0x9b, 0x55, 0xf6,
	0x0e, 0x69, 0x26, 0x22, 0x00, 0xe4, 0xd0, 0xa7, 0xf8, 0xac, 0x38, 0x4f, 0xf0, 0xd7, 0x6d, 0xdc,
	0x7b, 0x0d, 0x2a, 0x9c, 0x3b, 0xf5, 0x9c, 0x97, 0xed, 0xdd, 0x77, 0x17, 0x38, 0x1f, 0x9f, 0xa9,
	0xfe, 0x7e, 0xe5, 0xb6, 0x19, 0xab, 0xcf, 0x91, 0x71, 0x9f, 0x6a, 0x50, 0xc9, 0xdf, 0x66, 0xb5,
	0x03, 0x5c, 0xaa, 0x66, 0x2e, 0xc6, 0xf9, 0x31, 0x76, 0xa3, 0x75, 0x76, 0xb0, 0x75, 0xc4, 0xf9,
	0x85, 0x45, 0x6e, 0x9a, 0x38, 0x1f, 0xcc, 0x21, 0x39, 0x17, 0x11, 0x7c, 0x38, 0xe3, 0x20, 0xd5,
	0xa2, 0x27, 0x7a, 0x51, 0x93, 0x43, 0x27, 0x8b, 0x6c, 0x38, 0xa8, 0xe6, 0xd0, 0x41, 0x91, 0xc0,
	0x54, 0x7d, 0x8e, 0x91, 0x76, 0xa9, 0x06, 0x79, 0x24, 0xcd, 0x25, 0x91, 0x4c, 0x75, 0x20, 0x4f,
	0x63, 0x91, 0x64, 0x92, 0x3d, 0xe2, 0xd1, 0x64, 0xf5, 0xce, 0x9a, 0xa6, 0x69, 0x97, 0x52, 0xfd,
	0x52, 0x4b, 0x7e, 0x42, 0x76, 0x28, 0x4c, 0x1f, 0x82, 0x5c, 0x4c, 0x99, 0x34, 0x65, 0x3e, 0xe8,
	0x18, 0x70, 0x71, 0xec, 0x4a, 0xe9, 0x2c, 0x90, 0x66, 0xb0, 0x1b, 0x94, 0xbb, 0xb7, 0x97, 0xb8,
	0xff, 0x8c, 0x38, 0x46, 0xda, 0xe3, 0x84, 0xcf, 0xf5, 0x8c, 0xbf, 0xaa, 0xb0, 0x9b, 0xc4, 0x16,
	0x13, 0xa3, 0xaa, 0x2d, 0x26, 0x97, 0xe3, 0xf7, 0x95, 0x85, 0x04, 0x8d, 0x97, 0x94, 0x02, 0xf3,
	0x0c, 0xc5, 0x03, 0x11, 0x49, 0x88, 0x64, 0x6a, 0x4a, 0xd5, 0x74, 0x0a, 0x5d, 0xaa, 0xdc, 0x2b,
	0xc4, 0x68, 0x97, 0x62, 0xcc, 0xe5, 0x68, 0xbc, 0x58, 0x8e, 0x65, 0xd1, 0xfc, 0xa8, 0xe7, 0x7a,
	0x56, 0x0e, 0xc2, 0xf7, 0x03, 0xd0, 0x43, 0xfe, 0x8a, 0xd5, 0xeb, 0x92, 0x0e, 0x44, 0x6c, 0x14,
	0x80, 0x67, 0x84, 0xc9, 0xe0, 0x7a, 0xc6, 0xde, 0x1f, 0x16, 0xb9, 0x43, 0x61, 0x7a, 0x12, 0x7b,
	0x4c, 0xc2, 0x31, 0x8f, 0x22, 0xf0, 0xca, 0x79, 0x52, 0xdf, 0x68, 0x17, 0x23, 0xce, 0xae, 0x8c,
	0xb8, 0x94, 0x07, 0x10, 0x65, 0xd5, 0x61, 0x50, 0x99, 0x7d, 0xb3, 0xca, 0x3e, 0x1b, 0x80, 0x96,
	0x19, 0x80, 0xe5, 0xaa, 0x6f, 0xd7, 0x56, 0xfd, 0xb2, 0xf3, 0xc7, 0x4f, 0x16, 0x71, 0x17, 0xd4,
	0x0c, 0x29, 0xb5, 0xc5, 0x1f, 0xb0, 0x70, 0xd5, 0x66, 0x94, 0xa5, 0xb5, 0x2f, 0x48, 0x9b, 0x17,
	0x64, 0xa3, 0x24, 0xc9, 0x36, 0xe9, 0xce, 0xcc, 0x0a, 0x66, 0x14, 0x2e, 0xf0, 0xe5, 0xb6, 0xe3,
	0x2f, 0x9b, 0xdc, 0x2a, 0x55, 0x2b, 0x0e, 0xbb, 0x47, 0xc2, 0xbf, 0x62, 0x87, 0x28, 0x8d, 0xb5,
	0x46, 0x75, 0xac, 0xad, 0xca, 0xa0, 0x3e, 0xb1, 0xa6, 0x18, 0x6e, 0x8f, 0x5a, 0x53, 0x67, 0x48,
	0x36, 0x60, 0x0e, 0x91, 0x7c, 0x97, 0x07, 0x12, 0x12, 0x33, 0xb4, 0xdf, 0xd8, 0xaf, 0xdc, 0x39,
	0xf6, 0x2b, 0x81, 0x3f, 0xc8, 0x3f, 0xa1, 0xc5, 0xef, 0x55, 0xc8, 0x4c, 0xfd, 0x26, 0x75, 0x3b,
	0xfa, 0x68, 0xaa, 0x91, 0x73, 0x8b, 0xb4, 0x43, 0xf6, 0x54, 0xa5, 0x5b, 0x57, 0xe7, 0x55, 0xc8,
	0x9e, 0x1e, 0x79, 0x68, 0xe6, 0x91, 0x32, 0xf7, 0x8c, 0x99, 0x47, 0x3a, 0x09, 0x03, 0x1e, 0x72,
	0xe9, 0x12, 0x6d, 0x45, 0x90, 0x6b, 0xbd, 0xb1, 0x44, 0xeb, 0xbf, 0x6d, 0xb2, 0x5d, 0x1f, 0x6c,
	0x9e, 0xde, 0x56, 0x31, 0xbd, 0x1d, 0xd2, 0xfc, 0x54, 0xf0, 0x08, 0x65, 0xee, 0x52, 0x7c, 0xc6,
	0x18, 0x80, 0xcd, 0x21, 0x9b, 0x07, 0x08, 0x14, 0x3f, 0x8e, 0x85, 0x9f, 0x9d, 0xf5, 0x34, 0x72,
	0x6e, 0x90, 0xc6, 0x88, 0x45, 0x28, 0x6b, 0x97, 0xaa, 0x47, 0xf5, 0xfd, 0x2c, 0x52, 0x36, 0x7d,
	0x11, 0xd1, 0x40, 0xad, 0x34, 0xe1, 0xe3, 0x89, 0xb9, 0x7f, 0xe0, 0x33, 0x36, 0x89, 0x08, 0xad,
	0x5d, 0xed, 0x53, 0x23, 0xd5, 0x24, 0xe2, 0x44, 0x84, 0x42, 0x02, 0xaa, 0xd3, 0xa5, 0x19, 0x54,
	0x5f, 0x78, 0x80, 0x2f, 0x88, 0xfe, 0x42, 0x23, 0xe5, 0x9d, 0x47, 0xa7, 0x02, 0x05, 0xea, 0x52,
	0x7c, 0x56, 0x5e, 0x52, 0x90, 0x92, 0x47, 0xbe, 0xdb, 0xd7, 0x5e, 0x0c, 0xc4, 0x6b, 0x04, 0xf6,
	0x06, 0xf7, 0x9a, 0xf6, 0xa2, 0x91, 0xf2, 0x02, 0x1e, 0x97, 0xee, 0xa6, 0xf6, 0xa2, 0x9e, 0xf5,
	0x8a, 0xea, 0x10, 0xed, 0x5e, 0xcf, 0x56, 0x54, 0x68, 0xf7, 0x7b, 0x8b, 0xbc, 0xa4, 0x53, 0xfb,
	0x98, 0x25, 0x92, 0x8f, 0x79, 0xcc, 0x4a, 0x6d, 0x81, 0x57, 0xd3, 0x9a, 0xd7, 0xa7, 0x75, 0xdd,
	0x61, 0x61, 0x2d, 0x2d, 0xf1, 0x84, 0x6c, 0xa8, 0x19, 0x36, 0x4c, 0xfd, 0x21, 0x48, 0xa6, 0xd6,
	0x92, 0x22, 0x1e, 0xa6, 0x7e, 0xd6, 0xfe, 0x34, 0x32, 0xf6, 0x63, 0x99, 0xf5, 0x3f, 0x83, 0xb4,
	0xfd, 0x90, 0x49, 0xc8, 0x62, 0xd3, 0x68, 0xf7, 0x6b, 0x8b, 0x10, 0x0a, 0xd3, 0x8f, 0x20, 0xf2,
	0x68, 0x1c, 0x96, 0x2b, 0xd3, 0xaa, 0x56, 0x66, 0x1d, 0xf1, 0x1b, 0xa4, 0x91, 0xc0, 0xd4, 0x0c,
	0x26, 0xf5, 0xa8, 0x36, 0x2d, 0x89, 0x43, 0x0a, 0x69, 0x8c, 0x7c, 0xfb, 0x34, 0x83, 0xce, 0xab,
	0xa4, 0xe1, 0x8d, 0x6a, 0xa8, 0xaa, 0x37, 0xbb, 0x5f, 0x5a, 0xa4, 0x8f, 0x97, 0xfc, 0x2c, 0xa6,
	0x2d, 0xd2, 0xa6, 0xa5, 0x83, 0x80, 0x46, 0xce, 0x9b, 0xa4, 0x19, 0x82, 0x64, 0xe6, 0x1c, 0x70,
	0xfb, 0x45, 0x25, 0x9f, 0xc9, 0x45, 0xf1, 0x97, 0x38, 0xb5, 0x12, 0xfc, 0x07, 0x80, 0x51, 0x21,
	0x83, 0x2a, 0xd9, 0xf1, 0x9f, 0x03, 0xd9, 0x55, 0x01, 0xc1, 0xee, 0x9f, 0x5a, 0x1c, 0x75, 0x8c,
	0xb8, 0xba, 0x38, 0x5b, 0xa4, 0xad, 0xe2, 0xca, 0xb3, 0x42, 0x23, 0xb5, 0x64, 0x88, 0x77, 0xf5,
	0xa6, 0xe9, 0x1c, 0x78, 0x4d, 0x1f, 0x90, 0x0d, 0xf5, 0xfe, 0xfe, 0x78, 0x5c, 0xb8, 0x9e, 0x14,
	0x4d, 0xce, 0xeb, 0xe4, 0x9a, 0xd6, 0x72, 0x16, 0x48, 0xa4, 0xa2, 0x6f, 0x62, 0x65, 0x63, 0x26,
	0x73, 0xa7, 0x56, 0xe6, 0xdf, 0x51, 0xe6, 0x8c, 0xdb, 0xe3, 0x7b, 0xff, 0x13, 0x76, 0xb7, 0x49,
	0x6f, 0x41, 0x04, 0x99, 0xf5, 0x69, 0x6e, 0x58, 0xcd, 0xea, 0x73, 0x9b, 0x6c, 0x66, 0x07, 0x3f,
	0x76, 0x1e, 0x9a, 0x11, 0xff, 0x9f, 0xf3, 0x5a, 0x74, 0xe5, 0x56, 0xb1, 0x2b, 0x57, 0xd8, 0xb6,
	0x57, 0xb0, 0xed, 0x54, 0xd9, 0xba, 0xa4, 0x23, 0x62, 0xc9, 0x45, 0x94, 0x62, 0x63, 0xed, 0xd3,
	0x0c, 0x66, 0x3a, 0xf4, 0x6a, 0x75, 0x78, 0x6c, 0x6a, 0x28, 0x4b, 0xdd, 0xba, 0x1a, 0x2a, 0x54,
	0x84, 0x5d, 0x53, 0x11, 0x8d, 0x62, 0x45, 0x7c, 0xa3, 0x2b, 0x82, 0xc2, 0x78, 0xbe, 0xce, 0x76,
	0xb1, 0x4d, 0xba, 0xaa, 0x40, 0x0f, 0x99, 0x64, 0xa6, 0x5f, 0x2c, 0xf0, 0xea, 0x86, 0x91, 0x71,
	0xcd, 0x82, 0x5a, 0x13, 0xd7, 0x77, 0xfa, 0xbf, 0x3c, 0xdf, 0xb1, 0x7e, 0x7b, 0xbe, 0x63, 0x3d,
	0x7b, 0xbe, 0x63, 0x8d, 0xda, 0xf8, 0x1f, 0xc8, 0xb7, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x79,
	0xea, 0xc6, 0xbc, 0x11, 0x15, 0x00, 0x00,
}
