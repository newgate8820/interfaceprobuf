// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internaltokenservice.proto

package implatformmgrservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImPlatformMgrServiceClient is the client API for ImPlatformMgrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImPlatformMgrServiceClient interface {
	// 获取token
	GetToken(ctx context.Context, in *GetTokenMsg, opts ...grpc.CallOption) (*GetTokenMsgReply, error)
	// 用户绑定token
	UserBindToken(ctx context.Context, in *BindTokenMsg, opts ...grpc.CallOption) (*BindTokenMsgReply, error)
	// 验证token
	VerifyToken(ctx context.Context, in *VerifyTokenMsg, opts ...grpc.CallOption) (*VerifyTokenMsgReply, error)
}

type imPlatformMgrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImPlatformMgrServiceClient(cc grpc.ClientConnInterface) ImPlatformMgrServiceClient {
	return &imPlatformMgrServiceClient{cc}
}

func (c *imPlatformMgrServiceClient) GetToken(ctx context.Context, in *GetTokenMsg, opts ...grpc.CallOption) (*GetTokenMsgReply, error) {
	out := new(GetTokenMsgReply)
	err := c.cc.Invoke(ctx, "/implatformmgrservice.ImPlatformMgrService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imPlatformMgrServiceClient) UserBindToken(ctx context.Context, in *BindTokenMsg, opts ...grpc.CallOption) (*BindTokenMsgReply, error) {
	out := new(BindTokenMsgReply)
	err := c.cc.Invoke(ctx, "/implatformmgrservice.ImPlatformMgrService/UserBindToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imPlatformMgrServiceClient) VerifyToken(ctx context.Context, in *VerifyTokenMsg, opts ...grpc.CallOption) (*VerifyTokenMsgReply, error) {
	out := new(VerifyTokenMsgReply)
	err := c.cc.Invoke(ctx, "/implatformmgrservice.ImPlatformMgrService/VerifyToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImPlatformMgrServiceServer is the server API for ImPlatformMgrService service.
// All implementations must embed UnimplementedImPlatformMgrServiceServer
// for forward compatibility
type ImPlatformMgrServiceServer interface {
	// 获取token
	GetToken(context.Context, *GetTokenMsg) (*GetTokenMsgReply, error)
	// 用户绑定token
	UserBindToken(context.Context, *BindTokenMsg) (*BindTokenMsgReply, error)
	// 验证token
	VerifyToken(context.Context, *VerifyTokenMsg) (*VerifyTokenMsgReply, error)
	mustEmbedUnimplementedImPlatformMgrServiceServer()
}

// UnimplementedImPlatformMgrServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImPlatformMgrServiceServer struct {
}

func (UnimplementedImPlatformMgrServiceServer) GetToken(context.Context, *GetTokenMsg) (*GetTokenMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedImPlatformMgrServiceServer) UserBindToken(context.Context, *BindTokenMsg) (*BindTokenMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBindToken not implemented")
}
func (UnimplementedImPlatformMgrServiceServer) VerifyToken(context.Context, *VerifyTokenMsg) (*VerifyTokenMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedImPlatformMgrServiceServer) mustEmbedUnimplementedImPlatformMgrServiceServer() {}

// UnsafeImPlatformMgrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImPlatformMgrServiceServer will
// result in compilation errors.
type UnsafeImPlatformMgrServiceServer interface {
	mustEmbedUnimplementedImPlatformMgrServiceServer()
}

func RegisterImPlatformMgrServiceServer(s grpc.ServiceRegistrar, srv ImPlatformMgrServiceServer) {
	s.RegisterService(&ImPlatformMgrService_ServiceDesc, srv)
}

func _ImPlatformMgrService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImPlatformMgrServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/implatformmgrservice.ImPlatformMgrService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImPlatformMgrServiceServer).GetToken(ctx, req.(*GetTokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImPlatformMgrService_UserBindToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindTokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImPlatformMgrServiceServer).UserBindToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/implatformmgrservice.ImPlatformMgrService/UserBindToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImPlatformMgrServiceServer).UserBindToken(ctx, req.(*BindTokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImPlatformMgrService_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImPlatformMgrServiceServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/implatformmgrservice.ImPlatformMgrService/VerifyToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImPlatformMgrServiceServer).VerifyToken(ctx, req.(*VerifyTokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// ImPlatformMgrService_ServiceDesc is the grpc.ServiceDesc for ImPlatformMgrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImPlatformMgrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "implatformmgrservice.ImPlatformMgrService",
	HandlerType: (*ImPlatformMgrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _ImPlatformMgrService_GetToken_Handler,
		},
		{
			MethodName: "UserBindToken",
			Handler:    _ImPlatformMgrService_UserBindToken_Handler,
		},
		{
			MethodName: "VerifyToken",
			Handler:    _ImPlatformMgrService_VerifyToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internaltokenservice.proto",
}
