// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/implatformmgrservice/internaltokenservice.proto

/*
Package implatformmgrservice is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/implatformmgrservice/internaltokenservice.proto

It has these top-level messages:

	GetTokenMsg
	GetTokenMsgReply
	BindTokenMsg
	BindTokenMsgReply
	VerifyTokenMsg
	VerifyTokenMsgReply
*/
package implatformmgrservice

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PlatformMgrResultCode int32

const (
	PlatformMgrResultCode_ResultCode_Ok                   PlatformMgrResultCode = 0
	PlatformMgrResultCode_ResultCode_Token_Invalid        PlatformMgrResultCode = 1001
	PlatformMgrResultCode_ResultCode_Parameter_Exception  PlatformMgrResultCode = 1002
	PlatformMgrResultCode_ResultCode_Bind_Token_Exception PlatformMgrResultCode = 1003
)

var PlatformMgrResultCode_name = map[int32]string{
	0:    "ResultCode_Ok",
	1001: "ResultCode_Token_Invalid",
	1002: "ResultCode_Parameter_Exception",
	1003: "ResultCode_Bind_Token_Exception",
}
var PlatformMgrResultCode_value = map[string]int32{
	"ResultCode_Ok":                   0,
	"ResultCode_Token_Invalid":        1001,
	"ResultCode_Parameter_Exception":  1002,
	"ResultCode_Bind_Token_Exception": 1003,
}

func (x PlatformMgrResultCode) String() string {
	return proto.EnumName(PlatformMgrResultCode_name, int32(x))
}
func (PlatformMgrResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInternaltokenservice, []int{0}
}

// 获取token消息请求参数
type GetTokenMsg struct {
	KeyId uint64 `protobuf:"varint,1,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
}

func (m *GetTokenMsg) Reset()                    { *m = GetTokenMsg{} }
func (m *GetTokenMsg) String() string            { return proto.CompactTextString(m) }
func (*GetTokenMsg) ProtoMessage()               {}
func (*GetTokenMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternaltokenservice, []int{0} }

func (m *GetTokenMsg) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

// 获取token消息响应参数
type GetTokenMsgReply struct {
	ResultCode PlatformMgrResultCode `protobuf:"varint,1,opt,name=ResultCode,proto3,enum=implatformmgrservice.PlatformMgrResultCode" json:"ResultCode,omitempty"`
	KeyId      uint64                `protobuf:"varint,2,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
	Expire     uint64                `protobuf:"varint,3,opt,name=Expire,proto3" json:"Expire,omitempty"`
	Token      string                `protobuf:"bytes,4,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (m *GetTokenMsgReply) Reset()         { *m = GetTokenMsgReply{} }
func (m *GetTokenMsgReply) String() string { return proto.CompactTextString(m) }
func (*GetTokenMsgReply) ProtoMessage()    {}
func (*GetTokenMsgReply) Descriptor() ([]byte, []int) {
	return fileDescriptorInternaltokenservice, []int{1}
}

func (m *GetTokenMsgReply) GetResultCode() PlatformMgrResultCode {
	if m != nil {
		return m.ResultCode
	}
	return PlatformMgrResultCode_ResultCode_Ok
}

func (m *GetTokenMsgReply) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *GetTokenMsgReply) GetExpire() uint64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *GetTokenMsgReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// 用户绑定token消息请求参数
type BindTokenMsg struct {
	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (m *BindTokenMsg) Reset()         { *m = BindTokenMsg{} }
func (m *BindTokenMsg) String() string { return proto.CompactTextString(m) }
func (*BindTokenMsg) ProtoMessage()    {}
func (*BindTokenMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternaltokenservice, []int{2}
}

func (m *BindTokenMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *BindTokenMsg) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// 用户绑定token消息响应参数
type BindTokenMsgReply struct {
	ResultCode PlatformMgrResultCode `protobuf:"varint,1,opt,name=ResultCode,proto3,enum=implatformmgrservice.PlatformMgrResultCode" json:"ResultCode,omitempty"`
	UserId     int32                 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	KeyId      uint64                `protobuf:"varint,3,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
}

func (m *BindTokenMsgReply) Reset()         { *m = BindTokenMsgReply{} }
func (m *BindTokenMsgReply) String() string { return proto.CompactTextString(m) }
func (*BindTokenMsgReply) ProtoMessage()    {}
func (*BindTokenMsgReply) Descriptor() ([]byte, []int) {
	return fileDescriptorInternaltokenservice, []int{3}
}

func (m *BindTokenMsgReply) GetResultCode() PlatformMgrResultCode {
	if m != nil {
		return m.ResultCode
	}
	return PlatformMgrResultCode_ResultCode_Ok
}

func (m *BindTokenMsgReply) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *BindTokenMsgReply) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

// 验证token消息请求参数
type VerifyTokenMsg struct {
	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (m *VerifyTokenMsg) Reset()         { *m = VerifyTokenMsg{} }
func (m *VerifyTokenMsg) String() string { return proto.CompactTextString(m) }
func (*VerifyTokenMsg) ProtoMessage()    {}
func (*VerifyTokenMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternaltokenservice, []int{4}
}

func (m *VerifyTokenMsg) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// 验证token消息响应参数
type VerifyTokenMsgReply struct {
	ResultCode PlatformMgrResultCode `protobuf:"varint,1,opt,name=ResultCode,proto3,enum=implatformmgrservice.PlatformMgrResultCode" json:"ResultCode,omitempty"`
	KeyId      uint64                `protobuf:"varint,2,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
	UserId     int32                 `protobuf:"varint,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *VerifyTokenMsgReply) Reset()         { *m = VerifyTokenMsgReply{} }
func (m *VerifyTokenMsgReply) String() string { return proto.CompactTextString(m) }
func (*VerifyTokenMsgReply) ProtoMessage()    {}
func (*VerifyTokenMsgReply) Descriptor() ([]byte, []int) {
	return fileDescriptorInternaltokenservice, []int{5}
}

func (m *VerifyTokenMsgReply) GetResultCode() PlatformMgrResultCode {
	if m != nil {
		return m.ResultCode
	}
	return PlatformMgrResultCode_ResultCode_Ok
}

func (m *VerifyTokenMsgReply) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *VerifyTokenMsgReply) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func init() {
	proto.RegisterType((*GetTokenMsg)(nil), "implatformmgrservice.GetTokenMsg")
	proto.RegisterType((*GetTokenMsgReply)(nil), "implatformmgrservice.GetTokenMsgReply")
	proto.RegisterType((*BindTokenMsg)(nil), "implatformmgrservice.BindTokenMsg")
	proto.RegisterType((*BindTokenMsgReply)(nil), "implatformmgrservice.BindTokenMsgReply")
	proto.RegisterType((*VerifyTokenMsg)(nil), "implatformmgrservice.VerifyTokenMsg")
	proto.RegisterType((*VerifyTokenMsgReply)(nil), "implatformmgrservice.VerifyTokenMsgReply")
	proto.RegisterEnum("implatformmgrservice.PlatformMgrResultCode", PlatformMgrResultCode_name, PlatformMgrResultCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ImPlatformMgrService service

type ImPlatformMgrServiceClient interface {
	// 获取token
	GetToken(ctx context.Context, in *GetTokenMsg, opts ...grpc.CallOption) (*GetTokenMsgReply, error)
	// 用户绑定token
	UserBindToken(ctx context.Context, in *BindTokenMsg, opts ...grpc.CallOption) (*BindTokenMsgReply, error)
	// 验证token
	VerifyToken(ctx context.Context, in *VerifyTokenMsg, opts ...grpc.CallOption) (*VerifyTokenMsgReply, error)
}

type imPlatformMgrServiceClient struct {
	cc *grpc.ClientConn
}

func NewImPlatformMgrServiceClient(cc *grpc.ClientConn) ImPlatformMgrServiceClient {
	return &imPlatformMgrServiceClient{cc}
}

func (c *imPlatformMgrServiceClient) GetToken(ctx context.Context, in *GetTokenMsg, opts ...grpc.CallOption) (*GetTokenMsgReply, error) {
	out := new(GetTokenMsgReply)
	err := grpc.Invoke(ctx, "/implatformmgrservice.ImPlatformMgrService/GetToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imPlatformMgrServiceClient) UserBindToken(ctx context.Context, in *BindTokenMsg, opts ...grpc.CallOption) (*BindTokenMsgReply, error) {
	out := new(BindTokenMsgReply)
	err := grpc.Invoke(ctx, "/implatformmgrservice.ImPlatformMgrService/UserBindToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imPlatformMgrServiceClient) VerifyToken(ctx context.Context, in *VerifyTokenMsg, opts ...grpc.CallOption) (*VerifyTokenMsgReply, error) {
	out := new(VerifyTokenMsgReply)
	err := grpc.Invoke(ctx, "/implatformmgrservice.ImPlatformMgrService/VerifyToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImPlatformMgrService service

type ImPlatformMgrServiceServer interface {
	// 获取token
	GetToken(context.Context, *GetTokenMsg) (*GetTokenMsgReply, error)
	// 用户绑定token
	UserBindToken(context.Context, *BindTokenMsg) (*BindTokenMsgReply, error)
	// 验证token
	VerifyToken(context.Context, *VerifyTokenMsg) (*VerifyTokenMsgReply, error)
}

func RegisterImPlatformMgrServiceServer(s *grpc.Server, srv ImPlatformMgrServiceServer) {
	s.RegisterService(&_ImPlatformMgrService_serviceDesc, srv)
}

func _ImPlatformMgrService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImPlatformMgrServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/implatformmgrservice.ImPlatformMgrService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImPlatformMgrServiceServer).GetToken(ctx, req.(*GetTokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImPlatformMgrService_UserBindToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindTokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImPlatformMgrServiceServer).UserBindToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/implatformmgrservice.ImPlatformMgrService/UserBindToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImPlatformMgrServiceServer).UserBindToken(ctx, req.(*BindTokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImPlatformMgrService_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImPlatformMgrServiceServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/implatformmgrservice.ImPlatformMgrService/VerifyToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImPlatformMgrServiceServer).VerifyToken(ctx, req.(*VerifyTokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImPlatformMgrService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "implatformmgrservice.ImPlatformMgrService",
	HandlerType: (*ImPlatformMgrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _ImPlatformMgrService_GetToken_Handler,
		},
		{
			MethodName: "UserBindToken",
			Handler:    _ImPlatformMgrService_UserBindToken_Handler,
		},
		{
			MethodName: "VerifyToken",
			Handler:    _ImPlatformMgrService_VerifyToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/implatformmgrservice/internaltokenservice.proto",
}

func (m *GetTokenMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternaltokenservice(dAtA, i, uint64(m.KeyId))
	}
	return i, nil
}

func (m *GetTokenMsgReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTokenMsgReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResultCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternaltokenservice(dAtA, i, uint64(m.ResultCode))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternaltokenservice(dAtA, i, uint64(m.KeyId))
	}
	if m.Expire != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternaltokenservice(dAtA, i, uint64(m.Expire))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternaltokenservice(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *BindTokenMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternaltokenservice(dAtA, i, uint64(m.UserId))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternaltokenservice(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *BindTokenMsgReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindTokenMsgReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResultCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternaltokenservice(dAtA, i, uint64(m.ResultCode))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternaltokenservice(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternaltokenservice(dAtA, i, uint64(m.KeyId))
	}
	return i, nil
}

func (m *VerifyTokenMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternaltokenservice(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *VerifyTokenMsgReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyTokenMsgReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResultCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternaltokenservice(dAtA, i, uint64(m.ResultCode))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternaltokenservice(dAtA, i, uint64(m.KeyId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternaltokenservice(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func encodeVarintInternaltokenservice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetTokenMsg) Size() (n int) {
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovInternaltokenservice(uint64(m.KeyId))
	}
	return n
}

func (m *GetTokenMsgReply) Size() (n int) {
	var l int
	_ = l
	if m.ResultCode != 0 {
		n += 1 + sovInternaltokenservice(uint64(m.ResultCode))
	}
	if m.KeyId != 0 {
		n += 1 + sovInternaltokenservice(uint64(m.KeyId))
	}
	if m.Expire != 0 {
		n += 1 + sovInternaltokenservice(uint64(m.Expire))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovInternaltokenservice(uint64(l))
	}
	return n
}

func (m *BindTokenMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovInternaltokenservice(uint64(m.UserId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovInternaltokenservice(uint64(l))
	}
	return n
}

func (m *BindTokenMsgReply) Size() (n int) {
	var l int
	_ = l
	if m.ResultCode != 0 {
		n += 1 + sovInternaltokenservice(uint64(m.ResultCode))
	}
	if m.UserId != 0 {
		n += 1 + sovInternaltokenservice(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovInternaltokenservice(uint64(m.KeyId))
	}
	return n
}

func (m *VerifyTokenMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovInternaltokenservice(uint64(l))
	}
	return n
}

func (m *VerifyTokenMsgReply) Size() (n int) {
	var l int
	_ = l
	if m.ResultCode != 0 {
		n += 1 + sovInternaltokenservice(uint64(m.ResultCode))
	}
	if m.KeyId != 0 {
		n += 1 + sovInternaltokenservice(uint64(m.KeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovInternaltokenservice(uint64(m.UserId))
	}
	return n
}

func sovInternaltokenservice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInternaltokenservice(x uint64) (n int) {
	return sovInternaltokenservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetTokenMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternaltokenservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternaltokenservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternaltokenservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternaltokenservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTokenMsgReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternaltokenservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenMsgReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenMsgReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternaltokenservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= (PlatformMgrResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternaltokenservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternaltokenservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternaltokenservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternaltokenservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternaltokenservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternaltokenservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindTokenMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternaltokenservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindTokenMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindTokenMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternaltokenservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternaltokenservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternaltokenservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternaltokenservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternaltokenservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindTokenMsgReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternaltokenservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindTokenMsgReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindTokenMsgReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternaltokenservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= (PlatformMgrResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternaltokenservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternaltokenservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternaltokenservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternaltokenservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyTokenMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternaltokenservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyTokenMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyTokenMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternaltokenservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternaltokenservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternaltokenservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternaltokenservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyTokenMsgReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternaltokenservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyTokenMsgReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyTokenMsgReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternaltokenservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= (PlatformMgrResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternaltokenservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternaltokenservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternaltokenservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternaltokenservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInternaltokenservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInternaltokenservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternaltokenservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternaltokenservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInternaltokenservice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInternaltokenservice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInternaltokenservice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInternaltokenservice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInternaltokenservice   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/implatformmgrservice/internaltokenservice.proto", fileDescriptorInternaltokenservice)
}

var fileDescriptorInternaltokenservice = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xbb, 0x49, 0x9b, 0xc0, 0xf4, 0x43, 0xe9, 0x12, 0xaa, 0x28, 0x12, 0xa6, 0xb8, 0x55,
	0x29, 0x20, 0xb9, 0x52, 0xb9, 0x72, 0x2a, 0xaa, 0x50, 0x54, 0x55, 0x54, 0xa6, 0xc0, 0x8d, 0xb0,
	0xb1, 0xc7, 0x66, 0x55, 0x7f, 0x69, 0xbd, 0xad, 0x9a, 0x97, 0x40, 0x1c, 0x78, 0x03, 0x9e, 0x80,
	0xb7, 0xe0, 0xc8, 0x23, 0xa0, 0xdc, 0x80, 0x97, 0x40, 0xb6, 0xb7, 0xf5, 0x14, 0x59, 0x2a, 0x17,
	0x7a, 0x9c, 0xf1, 0xef, 0xbf, 0x33, 0xff, 0x99, 0x91, 0xe1, 0x38, 0x94, 0x3a, 0x12, 0x13, 0xc7,
	0xfb, 0x20, 0x74, 0x8e, 0xea, 0x0c, 0x95, 0x23, 0xe3, 0x1d, 0x99, 0x68, 0x54, 0x81, 0xf0, 0x30,
	0x53, 0xe9, 0xe4, 0x34, 0xd8, 0x91, 0x71, 0x16, 0x09, 0x1d, 0xa4, 0x2a, 0x8e, 0x43, 0x55, 0x60,
	0xd2, 0xc3, 0x0a, 0x4a, 0x44, 0xa4, 0xd3, 0x13, 0x4c, 0x4c, 0xd2, 0xc9, 0x54, 0xaa, 0x53, 0xde,
	0x6f, 0x12, 0xd8, 0x1b, 0xb0, 0xf8, 0x02, 0xf5, 0x71, 0x81, 0x1f, 0xe6, 0x21, 0xef, 0xc3, 0xc2,
	0x01, 0x4e, 0x47, 0xfe, 0x80, 0xad, 0xb3, 0xed, 0x79, 0xb7, 0x0a, 0xec, 0x2f, 0x0c, 0x7a, 0x84,
	0x72, 0x31, 0x8b, 0xa6, 0xfc, 0x00, 0xc0, 0xc5, 0xfc, 0x34, 0xd2, 0xcf, 0x53, 0x1f, 0x4b, 0x7e,
	0x65, 0xf7, 0x89, 0xd3, 0x54, 0xc4, 0x39, 0x32, 0xa9, 0xc3, 0x50, 0xd5, 0x12, 0x97, 0xc8, 0xeb,
	0xba, 0x2d, 0x52, 0x97, 0xaf, 0x41, 0x67, 0xff, 0x3c, 0x93, 0x0a, 0x07, 0xed, 0x32, 0x6d, 0xa2,
	0x82, 0x2e, 0x7b, 0x19, 0xcc, 0xaf, 0xb3, 0xed, 0xdb, 0x6e, 0x15, 0xd8, 0xcf, 0x60, 0x69, 0x4f,
	0x26, 0xfe, 0xa5, 0x97, 0x35, 0xe8, 0xbc, 0xce, 0x51, 0x19, 0x33, 0x0b, 0xae, 0x89, 0x6a, 0x75,
	0x8b, 0xaa, 0x3f, 0x32, 0x58, 0xa5, 0xf2, 0xff, 0x60, 0xb2, 0x6e, 0xa8, 0xf5, 0x77, 0x43, 0x95,
	0xf9, 0x36, 0x1d, 0xfa, 0x16, 0xac, 0xbc, 0x41, 0x25, 0x83, 0x29, 0x5d, 0x4e, 0xd5, 0x38, 0xa3,
	0x8d, 0x7f, 0x62, 0x70, 0xe7, 0x2a, 0x78, 0x93, 0xfb, 0x31, 0x86, 0xda, 0xd4, 0xd0, 0xe3, 0xcf,
	0x0c, 0xee, 0x36, 0xbe, 0xc9, 0x57, 0x61, 0xb9, 0x8e, 0xc6, 0x2f, 0x4f, 0x7a, 0x73, 0xfc, 0x1e,
	0x0c, 0x48, 0xaa, 0xf4, 0x30, 0x1e, 0x25, 0x67, 0x22, 0x92, 0x7e, 0xef, 0x67, 0x97, 0x6f, 0x80,
	0x45, 0x3e, 0x1f, 0x09, 0x25, 0x62, 0xd4, 0xa8, 0xc6, 0xfb, 0xe7, 0x1e, 0x66, 0x5a, 0xa6, 0x49,
	0xef, 0x57, 0x97, 0x6f, 0xc2, 0x7d, 0x02, 0x15, 0x6b, 0x34, 0x0f, 0xd5, 0xd4, 0xef, 0xee, 0xee,
	0xd7, 0x16, 0xf4, 0x47, 0x31, 0x69, 0xec, 0x55, 0xe5, 0x9f, 0xbf, 0x85, 0x5b, 0x17, 0xe7, 0xcd,
	0x1f, 0x34, 0x8f, 0x88, 0x9c, 0xff, 0x70, 0xeb, 0x5a, 0xa4, 0xdc, 0x80, 0x3d, 0xc7, 0xdf, 0xc1,
	0x72, 0x31, 0x92, 0xcb, 0xbb, 0xe2, 0x76, 0xb3, 0x94, 0x1e, 0xde, 0xf0, 0xe1, 0xf5, 0xcc, 0xc5,
	0xfb, 0xef, 0x61, 0x91, 0xac, 0x9e, 0x6f, 0x36, 0x2b, 0xaf, 0x5e, 0xc7, 0xf0, 0xd1, 0xbf, 0x50,
	0xa6, 0xc2, 0xde, 0xd2, 0xb7, 0x99, 0xc5, 0xbe, 0xcf, 0x2c, 0xf6, 0x63, 0x66, 0xb1, 0x49, 0xa7,
	0xfc, 0x95, 0x3c, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x67, 0x1f, 0xf1, 0x7a, 0xa2, 0x04, 0x00,
	0x00,
}
