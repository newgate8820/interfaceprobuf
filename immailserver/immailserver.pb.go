// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/immailserver/immailserver.proto

/*
Package immailserver is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/immailserver/immailserver.proto

It has these top-level messages:

	SendMailReq
	SendMailResult
	SendMailSSLReq
	SendMailSSLResult
*/
package immailserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SendMailResult_ResultCode int32

const (
	SendMailResult_Success       SendMailResult_ResultCode = 0
	SendMailResult_InternalError SendMailResult_ResultCode = 1
	SendMailResult_SendTooFast   SendMailResult_ResultCode = 2
	SendMailResult_NotFountEmail SendMailResult_ResultCode = 3
)

var SendMailResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
	2: "SendTooFast",
	3: "NotFountEmail",
}
var SendMailResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
	"SendTooFast":   2,
	"NotFountEmail": 3,
}

func (x SendMailResult_ResultCode) String() string {
	return proto.EnumName(SendMailResult_ResultCode_name, int32(x))
}
func (SendMailResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImmailserver, []int{1, 0}
}

type SendMailSSLResult_ResultCode int32

const (
	SendMailSSLResult_Success       SendMailSSLResult_ResultCode = 0
	SendMailSSLResult_InternalError SendMailSSLResult_ResultCode = 1
)

var SendMailSSLResult_ResultCode_name = map[int32]string{
	0: "Success",
	1: "InternalError",
}
var SendMailSSLResult_ResultCode_value = map[string]int32{
	"Success":       0,
	"InternalError": 1,
}

func (x SendMailSSLResult_ResultCode) String() string {
	return proto.EnumName(SendMailSSLResult_ResultCode_name, int32(x))
}
func (SendMailSSLResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImmailserver, []int{3, 0}
}

type SendMailReq struct {
	UserId  int32    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ToAddrs []string `protobuf:"bytes,2,rep,name=toAddrs" json:"toAddrs,omitempty"`
	Subject string   `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	Content []byte   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *SendMailReq) Reset()                    { *m = SendMailReq{} }
func (m *SendMailReq) String() string            { return proto.CompactTextString(m) }
func (*SendMailReq) ProtoMessage()               {}
func (*SendMailReq) Descriptor() ([]byte, []int) { return fileDescriptorImmailserver, []int{0} }

func (m *SendMailReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SendMailReq) GetToAddrs() []string {
	if m != nil {
		return m.ToAddrs
	}
	return nil
}

func (m *SendMailReq) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *SendMailReq) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type SendMailResult struct {
	Code SendMailResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=immailserver.SendMailResult_ResultCode" json:"code,omitempty"`
	Err  string                    `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *SendMailResult) Reset()                    { *m = SendMailResult{} }
func (m *SendMailResult) String() string            { return proto.CompactTextString(m) }
func (*SendMailResult) ProtoMessage()               {}
func (*SendMailResult) Descriptor() ([]byte, []int) { return fileDescriptorImmailserver, []int{1} }

func (m *SendMailResult) GetCode() SendMailResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return SendMailResult_Success
}

func (m *SendMailResult) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type SendMailSSLReq struct {
	ToAddrs []string `protobuf:"bytes,1,rep,name=toAddrs" json:"toAddrs,omitempty"`
	Subject string   `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Content []byte   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *SendMailSSLReq) Reset()                    { *m = SendMailSSLReq{} }
func (m *SendMailSSLReq) String() string            { return proto.CompactTextString(m) }
func (*SendMailSSLReq) ProtoMessage()               {}
func (*SendMailSSLReq) Descriptor() ([]byte, []int) { return fileDescriptorImmailserver, []int{2} }

func (m *SendMailSSLReq) GetToAddrs() []string {
	if m != nil {
		return m.ToAddrs
	}
	return nil
}

func (m *SendMailSSLReq) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *SendMailSSLReq) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type SendMailSSLResult struct {
	Code SendMailSSLResult_ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=immailserver.SendMailSSLResult_ResultCode" json:"code,omitempty"`
	Err  string                       `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *SendMailSSLResult) Reset()                    { *m = SendMailSSLResult{} }
func (m *SendMailSSLResult) String() string            { return proto.CompactTextString(m) }
func (*SendMailSSLResult) ProtoMessage()               {}
func (*SendMailSSLResult) Descriptor() ([]byte, []int) { return fileDescriptorImmailserver, []int{3} }

func (m *SendMailSSLResult) GetCode() SendMailSSLResult_ResultCode {
	if m != nil {
		return m.Code
	}
	return SendMailSSLResult_Success
}

func (m *SendMailSSLResult) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*SendMailReq)(nil), "immailserver.SendMailReq")
	proto.RegisterType((*SendMailResult)(nil), "immailserver.SendMailResult")
	proto.RegisterType((*SendMailSSLReq)(nil), "immailserver.SendMailSSLReq")
	proto.RegisterType((*SendMailSSLResult)(nil), "immailserver.SendMailSSLResult")
	proto.RegisterEnum("immailserver.SendMailResult_ResultCode", SendMailResult_ResultCode_name, SendMailResult_ResultCode_value)
	proto.RegisterEnum("immailserver.SendMailSSLResult_ResultCode", SendMailSSLResult_ResultCode_name, SendMailSSLResult_ResultCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ImMailServer service

type ImMailServerClient interface {
	SendMail(ctx context.Context, in *SendMailReq, opts ...grpc.CallOption) (*SendMailResult, error)
	// 发送邮件
	SendMailSSL(ctx context.Context, in *SendMailSSLReq, opts ...grpc.CallOption) (*SendMailSSLResult, error)
}

type imMailServerClient struct {
	cc *grpc.ClientConn
}

func NewImMailServerClient(cc *grpc.ClientConn) ImMailServerClient {
	return &imMailServerClient{cc}
}

func (c *imMailServerClient) SendMail(ctx context.Context, in *SendMailReq, opts ...grpc.CallOption) (*SendMailResult, error) {
	out := new(SendMailResult)
	err := grpc.Invoke(ctx, "/immailserver.ImMailServer/SendMail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imMailServerClient) SendMailSSL(ctx context.Context, in *SendMailSSLReq, opts ...grpc.CallOption) (*SendMailSSLResult, error) {
	out := new(SendMailSSLResult)
	err := grpc.Invoke(ctx, "/immailserver.ImMailServer/SendMailSSL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImMailServer service

type ImMailServerServer interface {
	SendMail(context.Context, *SendMailReq) (*SendMailResult, error)
	// 发送邮件
	SendMailSSL(context.Context, *SendMailSSLReq) (*SendMailSSLResult, error)
}

func RegisterImMailServerServer(s *grpc.Server, srv ImMailServerServer) {
	s.RegisterService(&_ImMailServer_serviceDesc, srv)
}

func _ImMailServer_SendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImMailServerServer).SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immailserver.ImMailServer/SendMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImMailServerServer).SendMail(ctx, req.(*SendMailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImMailServer_SendMailSSL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMailSSLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImMailServerServer).SendMailSSL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immailserver.ImMailServer/SendMailSSL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImMailServerServer).SendMailSSL(ctx, req.(*SendMailSSLReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImMailServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "immailserver.ImMailServer",
	HandlerType: (*ImMailServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMail",
			Handler:    _ImMailServer_SendMail_Handler,
		},
		{
			MethodName: "SendMailSSL",
			Handler:    _ImMailServer_SendMailSSL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/immailserver/immailserver.proto",
}

func (m *SendMailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMailReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImmailserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.ToAddrs) > 0 {
		for _, s := range m.ToAddrs {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Subject) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImmailserver(dAtA, i, uint64(len(m.Subject)))
		i += copy(dAtA[i:], m.Subject)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImmailserver(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *SendMailResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMailResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImmailserver(dAtA, i, uint64(m.Code))
	}
	if len(m.Err) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImmailserver(dAtA, i, uint64(len(m.Err)))
		i += copy(dAtA[i:], m.Err)
	}
	return i, nil
}

func (m *SendMailSSLReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMailSSLReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ToAddrs) > 0 {
		for _, s := range m.ToAddrs {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Subject) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImmailserver(dAtA, i, uint64(len(m.Subject)))
		i += copy(dAtA[i:], m.Subject)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImmailserver(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *SendMailSSLResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMailSSLResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImmailserver(dAtA, i, uint64(m.Code))
	}
	if len(m.Err) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImmailserver(dAtA, i, uint64(len(m.Err)))
		i += copy(dAtA[i:], m.Err)
	}
	return i, nil
}

func encodeVarintImmailserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SendMailReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImmailserver(uint64(m.UserId))
	}
	if len(m.ToAddrs) > 0 {
		for _, s := range m.ToAddrs {
			l = len(s)
			n += 1 + l + sovImmailserver(uint64(l))
		}
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovImmailserver(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovImmailserver(uint64(l))
	}
	return n
}

func (m *SendMailResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovImmailserver(uint64(m.Code))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovImmailserver(uint64(l))
	}
	return n
}

func (m *SendMailSSLReq) Size() (n int) {
	var l int
	_ = l
	if len(m.ToAddrs) > 0 {
		for _, s := range m.ToAddrs {
			l = len(s)
			n += 1 + l + sovImmailserver(uint64(l))
		}
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovImmailserver(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovImmailserver(uint64(l))
	}
	return n
}

func (m *SendMailSSLResult) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovImmailserver(uint64(m.Code))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovImmailserver(uint64(l))
	}
	return n
}

func sovImmailserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozImmailserver(x uint64) (n int) {
	return sovImmailserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SendMailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImmailserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmailserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmailserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImmailserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddrs = append(m.ToAddrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmailserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImmailserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmailserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImmailserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImmailserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImmailserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMailResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImmailserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMailResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMailResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmailserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (SendMailResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmailserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImmailserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImmailserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImmailserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMailSSLReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImmailserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMailSSLReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMailSSLReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmailserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImmailserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddrs = append(m.ToAddrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmailserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImmailserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmailserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImmailserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImmailserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImmailserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMailSSLResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImmailserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMailSSLResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMailSSLResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmailserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (SendMailSSLResult_ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmailserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImmailserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImmailserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImmailserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImmailserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImmailserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImmailserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImmailserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthImmailserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowImmailserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipImmailserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthImmailserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImmailserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/immailserver/immailserver.proto", fileDescriptorImmailserver)
}

var fileDescriptorImmailserver = []byte{
	// 393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x5d, 0x4e, 0xea, 0x40,
	0x1c, 0xc5, 0x99, 0x96, 0x0b, 0xf7, 0x0e, 0xbd, 0x58, 0xe6, 0xc1, 0x54, 0x42, 0xb0, 0xe9, 0x8b,
	0xc4, 0x98, 0x92, 0xe0, 0xa3, 0x89, 0x89, 0x1f, 0x90, 0x90, 0x20, 0x31, 0xad, 0xcf, 0x26, 0xfd,
	0x18, 0xb4, 0xa6, 0xed, 0xc0, 0xcc, 0xd4, 0x8d, 0xb8, 0x06, 0x17, 0xe0, 0x2e, 0x7c, 0x74, 0x09,
	0x86, 0x95, 0x98, 0x19, 0xc0, 0xd2, 0x44, 0x50, 0x9f, 0xda, 0xd3, 0x73, 0x9a, 0xf3, 0x9f, 0xdf,
	0xfc, 0xe1, 0xe5, 0x5d, 0xc4, 0x63, 0xcf, 0xb7, 0x83, 0x7b, 0x8f, 0x33, 0x4c, 0x1f, 0x31, 0xb5,
	0xa3, 0xa4, 0x1b, 0xa5, 0x1c, 0xd3, 0x89, 0x17, 0xe0, 0x29, 0x25, 0x7e, 0x36, 0xe9, 0x46, 0x49,
	0xe2, 0x45, 0xf1, 0xc2, 0x2f, 0x08, 0x7b, 0x4a, 0x09, 0x27, 0x48, 0x5b, 0xff, 0x66, 0x31, 0x58,
	0x73, 0x71, 0x1a, 0x5e, 0x79, 0x51, 0xec, 0xe0, 0x19, 0xda, 0x85, 0x95, 0x8c, 0x61, 0x3a, 0x0c,
	0x0d, 0x60, 0x82, 0xce, 0x1f, 0x67, 0xa9, 0x90, 0x01, 0xab, 0x9c, 0x9c, 0x85, 0x21, 0x65, 0x86,
	0x62, 0xaa, 0x9d, 0x7f, 0xce, 0x4a, 0x0a, 0x87, 0x65, 0xfe, 0x03, 0x0e, 0xb8, 0xa1, 0x9a, 0x40,
	0x38, 0x4b, 0x29, 0x9c, 0x80, 0xa4, 0x1c, 0xa7, 0xdc, 0x28, 0x9b, 0xa0, 0xa3, 0x39, 0x2b, 0x69,
	0xbd, 0x00, 0x58, 0xcf, 0x5b, 0x59, 0x16, 0x73, 0x74, 0x02, 0xcb, 0x01, 0x09, 0xb1, 0xac, 0xad,
	0xf7, 0x0e, 0xec, 0xc2, 0xe0, 0xc5, 0xac, 0xbd, 0x78, 0x5c, 0x90, 0x10, 0x3b, 0xf2, 0x27, 0xa4,
	0x43, 0x15, 0x53, 0x6a, 0x28, 0xb2, 0x5f, 0xbc, 0x5a, 0xd7, 0x10, 0xe6, 0x29, 0x54, 0x83, 0x55,
	0x37, 0x0b, 0x02, 0xcc, 0x98, 0x5e, 0x42, 0x0d, 0xf8, 0x7f, 0x28, 0x90, 0xa5, 0x5e, 0xdc, 0xa7,
	0x94, 0x50, 0x1d, 0xa0, 0x9d, 0x05, 0x84, 0x1b, 0x42, 0x06, 0x1e, 0xe3, 0xba, 0x22, 0x32, 0x63,
	0xc2, 0x07, 0x24, 0x4b, 0x79, 0x5f, 0xcc, 0xa1, 0xab, 0xd6, 0x6d, 0x3e, 0xb2, 0xeb, 0x8e, 0x04,
	0xab, 0x35, 0x26, 0x60, 0x23, 0x13, 0x65, 0x23, 0x13, 0xb5, 0xc8, 0xe4, 0x09, 0xc0, 0x46, 0xa1,
	0x40, 0x62, 0x39, 0x2d, 0x60, 0x39, 0xfc, 0x1a, 0xcb, 0x67, 0xfc, 0x27, 0x64, 0x8e, 0x7e, 0x43,
	0xa6, 0xf7, 0x0c, 0xa0, 0x36, 0x4c, 0x64, 0x89, 0xec, 0x44, 0x7d, 0xf8, 0x77, 0x55, 0x8b, 0xf6,
	0x36, 0xdd, 0xd2, 0xac, 0xd9, 0xda, 0x76, 0x81, 0x56, 0x09, 0x8d, 0xf3, 0xb5, 0x73, 0xdd, 0x11,
	0x6a, 0x6d, 0x39, 0xd8, 0xac, 0xb9, 0xff, 0xcd, 0xb1, 0xad, 0xd2, 0xb9, 0xf6, 0x3a, 0x6f, 0x83,
	0xb7, 0x79, 0x1b, 0xbc, 0xcf, 0xdb, 0xc0, 0xaf, 0xc8, 0x4d, 0x3f, 0xfe, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x7d, 0x8c, 0x55, 0xdd, 0x31, 0x03, 0x00, 0x00,
}
