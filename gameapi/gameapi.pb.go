// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: gameapi.proto

// protoc --gogofast_out=plugins=grpc:. ./gitlab.chatserver.im/interfaceprobuf/gameapi/gameapi.proto

package gameapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReqLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"` // 用户名
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"` // 密码
	Ip       string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`             // 登录ip
}

func (x *ReqLogin) Reset() {
	*x = ReqLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameapi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLogin) ProtoMessage() {}

func (x *ReqLogin) ProtoReflect() protoreflect.Message {
	mi := &file_gameapi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLogin.ProtoReflect.Descriptor instead.
func (*ReqLogin) Descriptor() ([]byte, []int) {
	return file_gameapi_proto_rawDescGZIP(), []int{0}
}

func (x *ReqLogin) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ReqLogin) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ReqLogin) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type ReplyLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32          `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"` //状态值：1 成功，其他数值代表失败	1
	Msg    string         `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`        //接口请求的状态信息	SUCCESS
	Data   *LoginRespData `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ReplyLogin) Reset() {
	*x = ReplyLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameapi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyLogin) ProtoMessage() {}

func (x *ReplyLogin) ProtoReflect() protoreflect.Message {
	mi := &file_gameapi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyLogin.ProtoReflect.Descriptor instead.
func (*ReplyLogin) Descriptor() ([]byte, []int) {
	return file_gameapi_proto_rawDescGZIP(), []int{1}
}

func (x *ReplyLogin) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ReplyLogin) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ReplyLogin) GetData() *LoginRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type LoginRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationTime        int64   `protobuf:"varint,1,opt,name=CreationTime,proto3" json:"CreationTime,omitempty"`               //创建时间	2011-11-11 11:11:11
	CreationBy          string  `protobuf:"bytes,2,opt,name=CreationBy,proto3" json:"CreationBy,omitempty"`                    //创建人
	LastUpdatedTime     int64   `protobuf:"varint,3,opt,name=LastUpdatedTime,proto3" json:"LastUpdatedTime,omitempty"`         //新时间	2011-11-11 11:11:11
	LastUpdatedBy       string  `protobuf:"bytes,4,opt,name=LastUpdatedBy,proto3" json:"LastUpdatedBy,omitempty"`              //更新人	Test1
	DataSourceKey       string  `protobuf:"bytes,5,opt,name=DataSourceKey,proto3" json:"DataSourceKey,omitempty"`              //分库键	8bet
	CurrentUser         string  `protobuf:"bytes,6,opt,name=CurrentUser,proto3" json:"CurrentUser,omitempty"`                  //当前登录用户	Test1
	UserId              int32   `protobuf:"varint,7,opt,name=UserId,proto3" json:"UserId,omitempty"`                           //用户id	3423
	UserSystemId        string  `protobuf:"bytes,8,opt,name=UserSystemId,proto3" json:"UserSystemId,omitempty"`                //系统生成的用户唯一标识(分库键+用户名)	8bet_423424
	ProxyLinkCode       string  `protobuf:"bytes,9,opt,name=ProxyLinkCode,proto3" json:"ProxyLinkCode,omitempty"`              //代理链	_342423_423423
	ParentId            string  `protobuf:"bytes,11,opt,name=ParentId,proto3" json:"ParentId,omitempty"`                       //上级id	53453
	ProxyAccount        string  `protobuf:"bytes,12,opt,name=ProxyAccount,proto3" json:"ProxyAccount,omitempty"`               //父级代理信息
	UserLevelId         int32   `protobuf:"varint,13,opt,name=UserLevelId,proto3" json:"UserLevelId,omitempty"`                //会员层级	1
	MemberLevelName     string  `protobuf:"bytes,14,opt,name=MemberLevelName,proto3" json:"MemberLevelName,omitempty"`         //会员层级名称
	UserAccount         string  `protobuf:"bytes,15,opt,name=UserAccount,proto3" json:"UserAccount,omitempty"`                 //用户账号	Test1
	UserPassword        string  `protobuf:"bytes,16,opt,name=UserPassword,proto3" json:"UserPassword,omitempty"`               //密码
	OldUserPassword     string  `protobuf:"bytes,17,opt,name=OldUserPassword,proto3" json:"OldUserPassword,omitempty"`         //旧的用户秘密
	RegisterIp          string  `protobuf:"bytes,18,opt,name=RegisterIp,proto3" json:"RegisterIp,omitempty"`                   //注册ip	0.0.0.0
	RegisterSource      string  `protobuf:"bytes,19,opt,name=RegisterSource,proto3" json:"RegisterSource,omitempty"`           //注册来源1:PC 2:IOS 3:安卓 4.H5	1
	RegisterSourceName  string  `protobuf:"bytes,20,opt,name=RegisterSourceName,proto3" json:"RegisterSourceName,omitempty"`   //来源名称 APPNAME(App Id) 或PC DOMAIN 	DOMAIN
	RegisterMethodId    string  `protobuf:"bytes,21,opt,name=RegisterMethodId,proto3" json:"RegisterMethodId,omitempty"`       //注册方式	1
	Sex                 string  `protobuf:"bytes,22,opt,name=Sex,proto3" json:"Sex,omitempty"`                                 //性别【1男0女】	1
	Birthday            string  `protobuf:"bytes,23,opt,name=Birthday,proto3" json:"Birthday,omitempty"`                       //生日	19990909
	NickName            string  `protobuf:"bytes,24,opt,name=NickName,proto3" json:"NickName,omitempty"`                       //昵称	放松
	Email               string  `protobuf:"bytes,25,opt,name=Email,proto3" json:"Email,omitempty"`                             //电子邮件	131231@163.com
	UserName            string  `protobuf:"bytes,26,opt,name=UserName,proto3" json:"UserName,omitempty"`                       //姓名	张三
	Telephone           string  `protobuf:"bytes,27,opt,name=Telephone,proto3" json:"Telephone,omitempty"`                     //电话	132312312
	UserQq              string  `protobuf:"bytes,28,opt,name=UserQq,proto3" json:"UserQq,omitempty"`                           //Qq	423423423
	UserWx              string  `protobuf:"bytes,29,opt,name=UserWx,proto3" json:"UserWx,omitempty"`                           //微信	23423423
	IsFrist             int32   `protobuf:"varint,30,opt,name=IsFrist,proto3" json:"IsFrist,omitempty"`                        //是否首充【0否1是】	1
	IsOwner             int32   `protobuf:"varint,31,opt,name=IsOwner,proto3" json:"IsOwner,omitempty"`                        //是否内部会员【0否1是】	1
	IsEnable            int32   `protobuf:"varint,32,opt,name=IsEnable,proto3" json:"IsEnable,omitempty"`                      //是否启用【0否1是】	1
	IsFrozen            int32   `protobuf:"varint,33,opt,name=IsFrozen,proto3" json:"IsFrozen,omitempty"`                      //是否冻结【0否1是】	1
	BundleVersionId     string  `protobuf:"bytes,34,opt,name=BundleVersionId,proto3" json:"BundleVersionId,omitempty"`         //App版本id	42342
	AppUuid             string  `protobuf:"bytes,35,opt,name=AppUuid,proto3" json:"AppUuid,omitempty"`                         //App序号	42342
	ValidCode           string  `protobuf:"bytes,36,opt,name=ValidCode,proto3" json:"ValidCode,omitempty"`                     //验证码	23423
	Balance             float32 `protobuf:"fixed32,37,opt,name=Balance,proto3" json:"Balance,omitempty"`                       //余额	100
	Recharge            float32 `protobuf:"fixed32,38,opt,name=Recharge,proto3" json:"Recharge,omitempty"`                     //充值	100
	CompanyInfo         string  `protobuf:"bytes,39,opt,name=CompanyInfo,proto3" json:"CompanyInfo,omitempty"`                 //公司信息
	WithdrawPassword    string  `protobuf:"bytes,40,opt,name=WithdrawPassword,proto3" json:"WithdrawPassword,omitempty"`       //取款密码
	OldWithdrawPassword string  `protobuf:"bytes,41,opt,name=OldWithdrawPassword,proto3" json:"OldWithdrawPassword,omitempty"` //旧的取款密码
	LoginIp             string  `protobuf:"bytes,42,opt,name=LoginIp,proto3" json:"LoginIp,omitempty"`                         //登录ip	0.0.0.0
	LoginRealAddress    string  `protobuf:"bytes,43,opt,name=LoginRealAddress,proto3" json:"LoginRealAddress,omitempty"`       //登录真实地址	菲律宾
	LoginDate           int64   `protobuf:"varint,44,opt,name=LoginDate,proto3" json:"LoginDate,omitempty"`                    //登录时间
	FGQP                string  `protobuf:"bytes,45,opt,name=FGQP,proto3" json:"FGQP,omitempty"`                               //平台编码	T48BETFGQP3A116623
	KAIYUAN600          string  `protobuf:"bytes,46,opt,name=KAIYUAN600,proto3" json:"KAIYUAN600,omitempty"`                   //平台编码	600w3A116623
	ZILLIONAIRE         string  `protobuf:"bytes,47,opt,name=ZILLIONAIRE,proto3" json:"ZILLIONAIRE,omitempty"`                 //平台编码	8000233A116623
	SSOCHESS            string  `protobuf:"bytes,48,opt,name=SSOCHESS,proto3" json:"SSOCHESS,omitempty"`                       //平台编码	2003223A116623
	FGBY                string  `protobuf:"bytes,49,opt,name=FGBY,proto3" json:"FGBY,omitempty"`                               //平台编码	T48BETFGBY3A116623
	KYQP                string  `protobuf:"bytes,50,opt,name=KYQP,proto3" json:"KYQP,omitempty"`                               //平台编码	713623A116623
	StartDate           string  `protobuf:"bytes,51,opt,name=StartDate,proto3" json:"StartDate,omitempty"`                     //开始日期	2011-11-11 11:11:11
	EndDate             string  `protobuf:"bytes,52,opt,name=EndDate,proto3" json:"EndDate,omitempty"`                         //结束日期	2011-11-11 11:11:11
	MemberLevelVIP      string  `protobuf:"bytes,53,opt,name=MemberLevelVIP,proto3" json:"MemberLevelVIP,omitempty"`           //会员vip等级	1
	MemberLevelVIPID    string  `protobuf:"bytes,54,opt,name=MemberLevelVIPID,proto3" json:"MemberLevelVIPID,omitempty"`       //会员vip等级id	13123
	MemberLevelVIPName  string  `protobuf:"bytes,55,opt,name=MemberLevelVIPName,proto3" json:"MemberLevelVIPName,omitempty"`   //会员vip等级名称	VIP5
	DepositTotalMax     string  `protobuf:"bytes,56,opt,name=DepositTotalMax,proto3" json:"DepositTotalMax,omitempty"`         //最大总存款	1
	DepositTotalMin     string  `protobuf:"bytes,57,opt,name=DepositTotalMin,proto3" json:"DepositTotalMin,omitempty"`         //最小总存款	1
	WithdrawTotalMax    string  `protobuf:"bytes,58,opt,name=WithdrawTotalMax,proto3" json:"WithdrawTotalMax,omitempty"`       //最大总提款	1
	WithdrawTotalMin    string  `protobuf:"bytes,59,opt,name=WithdrawTotalMin,proto3" json:"WithdrawTotalMin,omitempty"`       //最小总提款	1
	TotalPayoffMax      string  `protobuf:"bytes,61,opt,name=TotalPayoffMax,proto3" json:"TotalPayoffMax,omitempty"`           //最大总盈利	1
	TotalPayoffMin      string  `protobuf:"bytes,62,opt,name=TotalPayoffMin,proto3" json:"TotalPayoffMin,omitempty"`           //最小总盈利	1
	WithdrawNumberMax   string  `protobuf:"bytes,63,opt,name=WithdrawNumberMax,proto3" json:"WithdrawNumberMax,omitempty"`     //最大提款次数	1
	WithdrawNumberMin   string  `protobuf:"bytes,64,opt,name=WithdrawNumberMin,proto3" json:"WithdrawNumberMin,omitempty"`     //最小提款次数	1
	DepositNumberMax    string  `protobuf:"bytes,65,opt,name=DepositNumberMax,proto3" json:"DepositNumberMax,omitempty"`       //最大存款次数	1
	DepositNumberMin    string  `protobuf:"bytes,66,opt,name=DepositNumberMin,proto3" json:"DepositNumberMin,omitempty"`       //最小存款次数	1
	Suffix              string  `protobuf:"bytes,67,opt,name=Suffix,proto3" json:"Suffix,omitempty"`                           //表后缀	0909
	Note                string  `protobuf:"bytes,68,opt,name=Note,proto3" json:"Note,omitempty"`                               //备注	备注
	DebitType           string  `protobuf:"bytes,69,opt,name=DebitType,proto3" json:"DebitType,omitempty"`                     //
	Token               string  `protobuf:"bytes,70,opt,name=Token,proto3" json:"Token,omitempty"`                             //认证信息	aedc4ff7-f2e5-460b-b3de-9ad258b33a7f
	IntegralStartDate   string  `protobuf:"bytes,71,opt,name=IntegralStartDate,proto3" json:"IntegralStartDate,omitempty"`     //打码量开始日期	2011-11-11 11:11:11
	IntegralEndDate     string  `protobuf:"bytes,72,opt,name=IntegralEndDate,proto3" json:"IntegralEndDate,omitempty"`         //打码量结束日期	2011-11-11 11:11:11
	BankCardCount       int32   `protobuf:"varint,73,opt,name=BankCardCount,proto3" json:"BankCardCount,omitempty"`            //绑定银行卡数量	3
	IsCapital           string  `protobuf:"bytes,74,opt,name=IsCapital,proto3" json:"IsCapital,omitempty"`                     //是否包含本金【0不包含1包含】	1
	DamaMultiple        string  `protobuf:"bytes,75,opt,name=DamaMultiple,proto3" json:"DamaMultiple,omitempty"`               //打码倍数	1
	NeedDama            string  `protobuf:"bytes,76,opt,name=NeedDama,proto3" json:"NeedDama,omitempty"`                       //更改需求打码	100
	InspectionStatus    string  `protobuf:"bytes,77,opt,name=InspectionStatus,proto3" json:"InspectionStatus,omitempty"`       //稽查状态【0：未稽查1：稽查通过2：稽查未通过】
	InspectionId        string  `protobuf:"bytes,78,opt,name=InspectionId,proto3" json:"InspectionId,omitempty"`               //打码主键	111
	IsHaveSubordinate   string  `protobuf:"bytes,79,opt,name=IsHaveSubordinate,proto3" json:"IsHaveSubordinate,omitempty"`     //直属成员数量	1
	TeamCounts          string  `protobuf:"bytes,80,opt,name=TeamCounts,proto3" json:"TeamCounts,omitempty"`                   //下级成员数量	1
	VerifyRedis         bool    `protobuf:"varint,81,opt,name=VerifyRedis,proto3" json:"VerifyRedis,omitempty"`                //判断是否是直接开户验证码校验	false
	OrderCode           string  `protobuf:"bytes,82,opt,name=OrderCode,proto3" json:"OrderCode,omitempty"`                     //会员订单号	3123123
}

func (x *LoginRespData) Reset() {
	*x = LoginRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gameapi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRespData) ProtoMessage() {}

func (x *LoginRespData) ProtoReflect() protoreflect.Message {
	mi := &file_gameapi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRespData.ProtoReflect.Descriptor instead.
func (*LoginRespData) Descriptor() ([]byte, []int) {
	return file_gameapi_proto_rawDescGZIP(), []int{2}
}

func (x *LoginRespData) GetCreationTime() int64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *LoginRespData) GetCreationBy() string {
	if x != nil {
		return x.CreationBy
	}
	return ""
}

func (x *LoginRespData) GetLastUpdatedTime() int64 {
	if x != nil {
		return x.LastUpdatedTime
	}
	return 0
}

func (x *LoginRespData) GetLastUpdatedBy() string {
	if x != nil {
		return x.LastUpdatedBy
	}
	return ""
}

func (x *LoginRespData) GetDataSourceKey() string {
	if x != nil {
		return x.DataSourceKey
	}
	return ""
}

func (x *LoginRespData) GetCurrentUser() string {
	if x != nil {
		return x.CurrentUser
	}
	return ""
}

func (x *LoginRespData) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LoginRespData) GetUserSystemId() string {
	if x != nil {
		return x.UserSystemId
	}
	return ""
}

func (x *LoginRespData) GetProxyLinkCode() string {
	if x != nil {
		return x.ProxyLinkCode
	}
	return ""
}

func (x *LoginRespData) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *LoginRespData) GetProxyAccount() string {
	if x != nil {
		return x.ProxyAccount
	}
	return ""
}

func (x *LoginRespData) GetUserLevelId() int32 {
	if x != nil {
		return x.UserLevelId
	}
	return 0
}

func (x *LoginRespData) GetMemberLevelName() string {
	if x != nil {
		return x.MemberLevelName
	}
	return ""
}

func (x *LoginRespData) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

func (x *LoginRespData) GetUserPassword() string {
	if x != nil {
		return x.UserPassword
	}
	return ""
}

func (x *LoginRespData) GetOldUserPassword() string {
	if x != nil {
		return x.OldUserPassword
	}
	return ""
}

func (x *LoginRespData) GetRegisterIp() string {
	if x != nil {
		return x.RegisterIp
	}
	return ""
}

func (x *LoginRespData) GetRegisterSource() string {
	if x != nil {
		return x.RegisterSource
	}
	return ""
}

func (x *LoginRespData) GetRegisterSourceName() string {
	if x != nil {
		return x.RegisterSourceName
	}
	return ""
}

func (x *LoginRespData) GetRegisterMethodId() string {
	if x != nil {
		return x.RegisterMethodId
	}
	return ""
}

func (x *LoginRespData) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *LoginRespData) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *LoginRespData) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *LoginRespData) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginRespData) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *LoginRespData) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *LoginRespData) GetUserQq() string {
	if x != nil {
		return x.UserQq
	}
	return ""
}

func (x *LoginRespData) GetUserWx() string {
	if x != nil {
		return x.UserWx
	}
	return ""
}

func (x *LoginRespData) GetIsFrist() int32 {
	if x != nil {
		return x.IsFrist
	}
	return 0
}

func (x *LoginRespData) GetIsOwner() int32 {
	if x != nil {
		return x.IsOwner
	}
	return 0
}

func (x *LoginRespData) GetIsEnable() int32 {
	if x != nil {
		return x.IsEnable
	}
	return 0
}

func (x *LoginRespData) GetIsFrozen() int32 {
	if x != nil {
		return x.IsFrozen
	}
	return 0
}

func (x *LoginRespData) GetBundleVersionId() string {
	if x != nil {
		return x.BundleVersionId
	}
	return ""
}

func (x *LoginRespData) GetAppUuid() string {
	if x != nil {
		return x.AppUuid
	}
	return ""
}

func (x *LoginRespData) GetValidCode() string {
	if x != nil {
		return x.ValidCode
	}
	return ""
}

func (x *LoginRespData) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *LoginRespData) GetRecharge() float32 {
	if x != nil {
		return x.Recharge
	}
	return 0
}

func (x *LoginRespData) GetCompanyInfo() string {
	if x != nil {
		return x.CompanyInfo
	}
	return ""
}

func (x *LoginRespData) GetWithdrawPassword() string {
	if x != nil {
		return x.WithdrawPassword
	}
	return ""
}

func (x *LoginRespData) GetOldWithdrawPassword() string {
	if x != nil {
		return x.OldWithdrawPassword
	}
	return ""
}

func (x *LoginRespData) GetLoginIp() string {
	if x != nil {
		return x.LoginIp
	}
	return ""
}

func (x *LoginRespData) GetLoginRealAddress() string {
	if x != nil {
		return x.LoginRealAddress
	}
	return ""
}

func (x *LoginRespData) GetLoginDate() int64 {
	if x != nil {
		return x.LoginDate
	}
	return 0
}

func (x *LoginRespData) GetFGQP() string {
	if x != nil {
		return x.FGQP
	}
	return ""
}

func (x *LoginRespData) GetKAIYUAN600() string {
	if x != nil {
		return x.KAIYUAN600
	}
	return ""
}

func (x *LoginRespData) GetZILLIONAIRE() string {
	if x != nil {
		return x.ZILLIONAIRE
	}
	return ""
}

func (x *LoginRespData) GetSSOCHESS() string {
	if x != nil {
		return x.SSOCHESS
	}
	return ""
}

func (x *LoginRespData) GetFGBY() string {
	if x != nil {
		return x.FGBY
	}
	return ""
}

func (x *LoginRespData) GetKYQP() string {
	if x != nil {
		return x.KYQP
	}
	return ""
}

func (x *LoginRespData) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *LoginRespData) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *LoginRespData) GetMemberLevelVIP() string {
	if x != nil {
		return x.MemberLevelVIP
	}
	return ""
}

func (x *LoginRespData) GetMemberLevelVIPID() string {
	if x != nil {
		return x.MemberLevelVIPID
	}
	return ""
}

func (x *LoginRespData) GetMemberLevelVIPName() string {
	if x != nil {
		return x.MemberLevelVIPName
	}
	return ""
}

func (x *LoginRespData) GetDepositTotalMax() string {
	if x != nil {
		return x.DepositTotalMax
	}
	return ""
}

func (x *LoginRespData) GetDepositTotalMin() string {
	if x != nil {
		return x.DepositTotalMin
	}
	return ""
}

func (x *LoginRespData) GetWithdrawTotalMax() string {
	if x != nil {
		return x.WithdrawTotalMax
	}
	return ""
}

func (x *LoginRespData) GetWithdrawTotalMin() string {
	if x != nil {
		return x.WithdrawTotalMin
	}
	return ""
}

func (x *LoginRespData) GetTotalPayoffMax() string {
	if x != nil {
		return x.TotalPayoffMax
	}
	return ""
}

func (x *LoginRespData) GetTotalPayoffMin() string {
	if x != nil {
		return x.TotalPayoffMin
	}
	return ""
}

func (x *LoginRespData) GetWithdrawNumberMax() string {
	if x != nil {
		return x.WithdrawNumberMax
	}
	return ""
}

func (x *LoginRespData) GetWithdrawNumberMin() string {
	if x != nil {
		return x.WithdrawNumberMin
	}
	return ""
}

func (x *LoginRespData) GetDepositNumberMax() string {
	if x != nil {
		return x.DepositNumberMax
	}
	return ""
}

func (x *LoginRespData) GetDepositNumberMin() string {
	if x != nil {
		return x.DepositNumberMin
	}
	return ""
}

func (x *LoginRespData) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *LoginRespData) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *LoginRespData) GetDebitType() string {
	if x != nil {
		return x.DebitType
	}
	return ""
}

func (x *LoginRespData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginRespData) GetIntegralStartDate() string {
	if x != nil {
		return x.IntegralStartDate
	}
	return ""
}

func (x *LoginRespData) GetIntegralEndDate() string {
	if x != nil {
		return x.IntegralEndDate
	}
	return ""
}

func (x *LoginRespData) GetBankCardCount() int32 {
	if x != nil {
		return x.BankCardCount
	}
	return 0
}

func (x *LoginRespData) GetIsCapital() string {
	if x != nil {
		return x.IsCapital
	}
	return ""
}

func (x *LoginRespData) GetDamaMultiple() string {
	if x != nil {
		return x.DamaMultiple
	}
	return ""
}

func (x *LoginRespData) GetNeedDama() string {
	if x != nil {
		return x.NeedDama
	}
	return ""
}

func (x *LoginRespData) GetInspectionStatus() string {
	if x != nil {
		return x.InspectionStatus
	}
	return ""
}

func (x *LoginRespData) GetInspectionId() string {
	if x != nil {
		return x.InspectionId
	}
	return ""
}

func (x *LoginRespData) GetIsHaveSubordinate() string {
	if x != nil {
		return x.IsHaveSubordinate
	}
	return ""
}

func (x *LoginRespData) GetTeamCounts() string {
	if x != nil {
		return x.TeamCounts
	}
	return ""
}

func (x *LoginRespData) GetVerifyRedis() bool {
	if x != nil {
		return x.VerifyRedis
	}
	return false
}

func (x *LoginRespData) GetOrderCode() string {
	if x != nil {
		return x.OrderCode
	}
	return ""
}

var File_gameapi_proto protoreflect.FileDescriptor

var file_gameapi_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x22, 0x52, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x62, 0x0a, 0x0a,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xbf, 0x15, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x6c, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x70, 0x12, 0x26, 0x0a, 0x0e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53,
	0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x51, 0x71, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x51, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x57, 0x78, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x57, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73,
	0x46, 0x72, 0x69, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x73, 0x46,
	0x72, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73,
	0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x73,
	0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x55, 0x75, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x41, 0x70, 0x70, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2a, 0x0a, 0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x4f, 0x6c, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4f, 0x6c, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x47, 0x51, 0x50, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x46, 0x47, 0x51, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x41, 0x49, 0x59, 0x55, 0x41,
	0x4e, 0x36, 0x30, 0x30, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x41, 0x49, 0x59,
	0x55, 0x41, 0x4e, 0x36, 0x30, 0x30, 0x12, 0x20, 0x0a, 0x0b, 0x5a, 0x49, 0x4c, 0x4c, 0x49, 0x4f,
	0x4e, 0x41, 0x49, 0x52, 0x45, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x5a, 0x49, 0x4c,
	0x4c, 0x49, 0x4f, 0x4e, 0x41, 0x49, 0x52, 0x45, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x53, 0x4f, 0x43,
	0x48, 0x45, 0x53, 0x53, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x53, 0x4f, 0x43,
	0x48, 0x45, 0x53, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x47, 0x42, 0x59, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x46, 0x47, 0x42, 0x59, 0x12, 0x12, 0x0a, 0x04, 0x4b, 0x59, 0x51, 0x50,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4b, 0x59, 0x51, 0x50, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x56, 0x49, 0x50, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x49, 0x50, 0x12, 0x2a, 0x0a, 0x10,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x49, 0x50, 0x49, 0x44,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x56, 0x49, 0x50, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x49, 0x50, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x56, 0x49, 0x50, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d,
	0x61, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x78,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x6f, 0x66, 0x66, 0x4d, 0x61, 0x78, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x66, 0x66, 0x4d, 0x61, 0x78, 0x12, 0x26, 0x0a, 0x0e,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x66, 0x66, 0x4d, 0x69, 0x6e, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x66,
	0x66, 0x4d, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d,
	0x61, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x69, 0x6e,
	0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4d, 0x61, 0x78, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x69, 0x6e,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x62, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x65, 0x62, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x6c, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x49, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x43, 0x61, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x73, 0x43, 0x61, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x61, 0x6d, 0x61, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x61, 0x6d, 0x61,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x65, 0x64,
	0x44, 0x61, 0x6d, 0x61, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x65, 0x65, 0x64,
	0x44, 0x61, 0x6d, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x73, 0x48, 0x61, 0x76, 0x65, 0x53, 0x75,
	0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x49, 0x73, 0x48, 0x61, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x18, 0x51, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x32, 0x3c, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x12, 0x31, 0x0a,
	0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x71, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x13, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x00,
	0x42, 0x19, 0x5a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_gameapi_proto_rawDescOnce sync.Once
	file_gameapi_proto_rawDescData = file_gameapi_proto_rawDesc
)

func file_gameapi_proto_rawDescGZIP() []byte {
	file_gameapi_proto_rawDescOnce.Do(func() {
		file_gameapi_proto_rawDescData = protoimpl.X.CompressGZIP(file_gameapi_proto_rawDescData)
	})
	return file_gameapi_proto_rawDescData
}

var file_gameapi_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_gameapi_proto_goTypes = []interface{}{
	(*ReqLogin)(nil),      // 0: gameapi.ReqLogin
	(*ReplyLogin)(nil),    // 1: gameapi.ReplyLogin
	(*LoginRespData)(nil), // 2: gameapi.LoginRespData
}
var file_gameapi_proto_depIdxs = []int32{
	2, // 0: gameapi.ReplyLogin.Data:type_name -> gameapi.LoginRespData
	0, // 1: gameapi.gameapi.Login:input_type -> gameapi.ReqLogin
	1, // 2: gameapi.gameapi.Login:output_type -> gameapi.ReplyLogin
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_gameapi_proto_init() }
func file_gameapi_proto_init() {
	if File_gameapi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gameapi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameapi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gameapi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gameapi_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gameapi_proto_goTypes,
		DependencyIndexes: file_gameapi_proto_depIdxs,
		MessageInfos:      file_gameapi_proto_msgTypes,
	}.Build()
	File_gameapi_proto = out.File
	file_gameapi_proto_rawDesc = nil
	file_gameapi_proto_goTypes = nil
	file_gameapi_proto_depIdxs = nil
}
