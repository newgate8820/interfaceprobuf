// protoc --gogofast_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: messagedb.proto

package pbmessagedb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pbcomm "interfaceprobuf/pbcomm"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type USER_MSG int32

const (
	USER_MSG_UN_ENCRY USER_MSG = 0 // 不加密
	USER_MSG_ENCRY    USER_MSG = 1 // 加密
)

// Enum value maps for USER_MSG.
var (
	USER_MSG_name = map[int32]string{
		0: "UN_ENCRY",
		1: "ENCRY",
	}
	USER_MSG_value = map[string]int32{
		"UN_ENCRY": 0,
		"ENCRY":    1,
	}
)

func (x USER_MSG) Enum() *USER_MSG {
	p := new(USER_MSG)
	*p = x
	return p
}

func (x USER_MSG) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_MSG) Descriptor() protoreflect.EnumDescriptor {
	return file_messagedb_proto_enumTypes[0].Descriptor()
}

func (USER_MSG) Type() protoreflect.EnumType {
	return &file_messagedb_proto_enumTypes[0]
}

func (x USER_MSG) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_MSG.Descriptor instead.
func (USER_MSG) EnumDescriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{0}
}

type ReplyUpdateDialogAddUnreadInt int32

const (
	ReplyUpdateDialogAddUnread_success          ReplyUpdateDialogAddUnreadInt = 0 // 正确
	ReplyUpdateDialogAddUnread_dialog_not_exist ReplyUpdateDialogAddUnreadInt = 1 // dialog 不存在
)

// Enum value maps for ReplyUpdateDialogAddUnreadInt.
var (
	ReplyUpdateDialogAddUnreadInt_name = map[int32]string{
		0: "success",
		1: "dialog_not_exist",
	}
	ReplyUpdateDialogAddUnreadInt_value = map[string]int32{
		"success":          0,
		"dialog_not_exist": 1,
	}
)

func (x ReplyUpdateDialogAddUnreadInt) Enum() *ReplyUpdateDialogAddUnreadInt {
	p := new(ReplyUpdateDialogAddUnreadInt)
	*p = x
	return p
}

func (x ReplyUpdateDialogAddUnreadInt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplyUpdateDialogAddUnreadInt) Descriptor() protoreflect.EnumDescriptor {
	return file_messagedb_proto_enumTypes[1].Descriptor()
}

func (ReplyUpdateDialogAddUnreadInt) Type() protoreflect.EnumType {
	return &file_messagedb_proto_enumTypes[1]
}

func (x ReplyUpdateDialogAddUnreadInt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplyUpdateDialogAddUnreadInt.Descriptor instead.
func (ReplyUpdateDialogAddUnreadInt) EnumDescriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{90, 0}
}

type PtsHandleInt int32

const (
	PtsHandle_COMMON PtsHandleInt = 0
	PtsHandle_ACTION PtsHandleInt = 1
)

// Enum value maps for PtsHandleInt.
var (
	PtsHandleInt_name = map[int32]string{
		0: "COMMON",
		1: "ACTION",
	}
	PtsHandleInt_value = map[string]int32{
		"COMMON": 0,
		"ACTION": 1,
	}
)

func (x PtsHandleInt) Enum() *PtsHandleInt {
	p := new(PtsHandleInt)
	*p = x
	return p
}

func (x PtsHandleInt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PtsHandleInt) Descriptor() protoreflect.EnumDescriptor {
	return file_messagedb_proto_enumTypes[2].Descriptor()
}

func (PtsHandleInt) Type() protoreflect.EnumType {
	return &file_messagedb_proto_enumTypes[2]
}

func (x PtsHandleInt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PtsHandleInt.Descriptor instead.
func (PtsHandleInt) EnumDescriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{218, 0}
}

// 返回空结构体
type ReplyNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplyNull) Reset() {
	*x = ReplyNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyNull) ProtoMessage() {}

func (x *ReplyNull) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyNull.ProtoReflect.Descriptor instead.
func (*ReplyNull) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{0}
}

type ReplyUpdateUserDialogUpdateDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplyUpdateUserDialogUpdateDate) Reset() {
	*x = ReplyUpdateUserDialogUpdateDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUpdateUserDialogUpdateDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUpdateUserDialogUpdateDate) ProtoMessage() {}

func (x *ReplyUpdateUserDialogUpdateDate) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUpdateUserDialogUpdateDate.ProtoReflect.Descriptor instead.
func (*ReplyUpdateUserDialogUpdateDate) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{1}
}

type ReplyUpdateUserDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplyUpdateUserDialog) Reset() {
	*x = ReplyUpdateUserDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUpdateUserDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUpdateUserDialog) ProtoMessage() {}

func (x *ReplyUpdateUserDialog) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUpdateUserDialog.ProtoReflect.Descriptor instead.
func (*ReplyUpdateUserDialog) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{2}
}

type ChannelIdAndLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Limit     int32 `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`         // 查询条数
}

func (x *ChannelIdAndLimit) Reset() {
	*x = ChannelIdAndLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelIdAndLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelIdAndLimit) ProtoMessage() {}

func (x *ChannelIdAndLimit) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelIdAndLimit.ProtoReflect.Descriptor instead.
func (*ChannelIdAndLimit) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{3}
}

func (x *ChannelIdAndLimit) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelIdAndLimit) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ChannelIdAndUserIdAndLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	UserId    int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`       // 用户ID
	Limit     int32 `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`         // 查询条数
}

func (x *ChannelIdAndUserIdAndLimit) Reset() {
	*x = ChannelIdAndUserIdAndLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelIdAndUserIdAndLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelIdAndUserIdAndLimit) ProtoMessage() {}

func (x *ChannelIdAndUserIdAndLimit) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelIdAndUserIdAndLimit.ProtoReflect.Descriptor instead.
func (*ChannelIdAndUserIdAndLimit) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{4}
}

func (x *ChannelIdAndUserIdAndLimit) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelIdAndUserIdAndLimit) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChannelIdAndUserIdAndLimit) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ChannelIdAndAdminUsersAndEventFiltersAndUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId    int32   `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`              // 超级群ID
	UserId       int32   `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`                    // 用户ID
	AdminUsers   []int32 `protobuf:"varint,3,rep,packed,name=AdminUsers,proto3" json:"AdminUsers,omitempty"`     // 管理员用户集合
	EventFilters []int32 `protobuf:"varint,4,rep,packed,name=EventFilters,proto3" json:"EventFilters,omitempty"` // 筛选类型结合 对应 adminlog 中的action_type 字段
	Limit        int32   `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`                      // 查询条数
}

func (x *ChannelIdAndAdminUsersAndEventFiltersAndUserId) Reset() {
	*x = ChannelIdAndAdminUsersAndEventFiltersAndUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelIdAndAdminUsersAndEventFiltersAndUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelIdAndAdminUsersAndEventFiltersAndUserId) ProtoMessage() {}

func (x *ChannelIdAndAdminUsersAndEventFiltersAndUserId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelIdAndAdminUsersAndEventFiltersAndUserId.ProtoReflect.Descriptor instead.
func (*ChannelIdAndAdminUsersAndEventFiltersAndUserId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{5}
}

func (x *ChannelIdAndAdminUsersAndEventFiltersAndUserId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelIdAndAdminUsersAndEventFiltersAndUserId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChannelIdAndAdminUsersAndEventFiltersAndUserId) GetAdminUsers() []int32 {
	if x != nil {
		return x.AdminUsers
	}
	return nil
}

func (x *ChannelIdAndAdminUsersAndEventFiltersAndUserId) GetEventFilters() []int32 {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

func (x *ChannelIdAndAdminUsersAndEventFiltersAndUserId) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ChannelIdAndAdminUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32   `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`          // 超级群ID
	AdminUsers []int32 `protobuf:"varint,2,rep,packed,name=AdminUsers,proto3" json:"AdminUsers,omitempty"` // 管理员用户集合
	Limit      int32   `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`                  // 查询条数
}

func (x *ChannelIdAndAdminUsers) Reset() {
	*x = ChannelIdAndAdminUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelIdAndAdminUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelIdAndAdminUsers) ProtoMessage() {}

func (x *ChannelIdAndAdminUsers) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelIdAndAdminUsers.ProtoReflect.Descriptor instead.
func (*ChannelIdAndAdminUsers) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{6}
}

func (x *ChannelIdAndAdminUsers) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelIdAndAdminUsers) GetAdminUsers() []int32 {
	if x != nil {
		return x.AdminUsers
	}
	return nil
}

func (x *ChannelIdAndAdminUsers) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ChannelIdAndEventFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId    int32   `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`              // 超级群ID
	EventFilters []int32 `protobuf:"varint,2,rep,packed,name=EventFilters,proto3" json:"EventFilters,omitempty"` // 筛选类型结合 对应 adminlog 中的action_type 字段
	Limit        int32   `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`                      // 查询条数
}

func (x *ChannelIdAndEventFilters) Reset() {
	*x = ChannelIdAndEventFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelIdAndEventFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelIdAndEventFilters) ProtoMessage() {}

func (x *ChannelIdAndEventFilters) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelIdAndEventFilters.ProtoReflect.Descriptor instead.
func (*ChannelIdAndEventFilters) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{7}
}

func (x *ChannelIdAndEventFilters) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelIdAndEventFilters) GetEventFilters() []int32 {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

func (x *ChannelIdAndEventFilters) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ChannelIdAndAdminUsersAndEventFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId    int32   `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`              // 超级群ID
	AdminUsers   []int32 `protobuf:"varint,2,rep,packed,name=AdminUsers,proto3" json:"AdminUsers,omitempty"`     // 筛选类型结合 对应 adminlog 中的action_type 字段
	EventFilters []int32 `protobuf:"varint,3,rep,packed,name=EventFilters,proto3" json:"EventFilters,omitempty"` // 筛选类型结合 对应 adminlog 中的action_type 字段
	Limit        int32   `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`                      // 查询条数
}

func (x *ChannelIdAndAdminUsersAndEventFilters) Reset() {
	*x = ChannelIdAndAdminUsersAndEventFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelIdAndAdminUsersAndEventFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelIdAndAdminUsersAndEventFilters) ProtoMessage() {}

func (x *ChannelIdAndAdminUsersAndEventFilters) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelIdAndAdminUsersAndEventFilters.ProtoReflect.Descriptor instead.
func (*ChannelIdAndAdminUsersAndEventFilters) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{8}
}

func (x *ChannelIdAndAdminUsersAndEventFilters) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelIdAndAdminUsersAndEventFilters) GetAdminUsers() []int32 {
	if x != nil {
		return x.AdminUsers
	}
	return nil
}

func (x *ChannelIdAndAdminUsersAndEventFilters) GetEventFilters() []int32 {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

func (x *ChannelIdAndAdminUsersAndEventFilters) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ChannelIdAndEventFiltersAndUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId    int32   `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`              // 超级群ID
	UserId       int32   `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`                    // 被操作用户
	EventFilters []int32 `protobuf:"varint,3,rep,packed,name=EventFilters,proto3" json:"EventFilters,omitempty"` // 筛选类型结合 对应 adminlog 中的action_type 字段
	Limit        int32   `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`                      // 查询条数
}

func (x *ChannelIdAndEventFiltersAndUserId) Reset() {
	*x = ChannelIdAndEventFiltersAndUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelIdAndEventFiltersAndUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelIdAndEventFiltersAndUserId) ProtoMessage() {}

func (x *ChannelIdAndEventFiltersAndUserId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelIdAndEventFiltersAndUserId.ProtoReflect.Descriptor instead.
func (*ChannelIdAndEventFiltersAndUserId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{9}
}

func (x *ChannelIdAndEventFiltersAndUserId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelIdAndEventFiltersAndUserId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChannelIdAndEventFiltersAndUserId) GetEventFilters() []int32 {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

func (x *ChannelIdAndEventFiltersAndUserId) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ChannelMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`               // 唯一键
	ChannelId int32 `protobuf:"varint,2,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	MsgId     int32 `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`         // 超级群消息ID
	Pts       int32 `protobuf:"varint,4,opt,name=Pts,proto3" json:"Pts,omitempty"`             // 超级群PTS
	LastDate  int32 `protobuf:"varint,5,opt,name=LastDate,proto3" json:"LastDate,omitempty"`   // 最后的时间
}

func (x *ChannelMsgId) Reset() {
	*x = ChannelMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMsgId) ProtoMessage() {}

func (x *ChannelMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMsgId.ProtoReflect.Descriptor instead.
func (*ChannelMsgId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{10}
}

func (x *ChannelMsgId) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelMsgId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelMsgId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ChannelMsgId) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ChannelMsgId) GetLastDate() int32 {
	if x != nil {
		return x.LastDate
	}
	return 0
}

type ChannelId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
}

func (x *ChannelId) Reset() {
	*x = ChannelId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelId) ProtoMessage() {}

func (x *ChannelId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelId.ProtoReflect.Descriptor instead.
func (*ChannelId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{11}
}

func (x *ChannelId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

type ChannelIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelIds []int32 `protobuf:"varint,1,rep,packed,name=ChannelIds,proto3" json:"ChannelIds,omitempty"` // 超级群ID集合
}

func (x *ChannelIds) Reset() {
	*x = ChannelIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelIds) ProtoMessage() {}

func (x *ChannelIds) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelIds.ProtoReflect.Descriptor instead.
func (*ChannelIds) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{12}
}

func (x *ChannelIds) GetChannelIds() []int32 {
	if x != nil {
		return x.ChannelIds
	}
	return nil
}

type ChannelIdAndMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	MsgId     int32 `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`         // MSGID
}

func (x *ChannelIdAndMsgId) Reset() {
	*x = ChannelIdAndMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelIdAndMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelIdAndMsgId) ProtoMessage() {}

func (x *ChannelIdAndMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelIdAndMsgId.ProtoReflect.Descriptor instead.
func (*ChannelIdAndMsgId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{13}
}

func (x *ChannelIdAndMsgId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelIdAndMsgId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type ChannelIdAndMsgIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32   `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`  // 超级群ID
	MsgIds    []int32 `protobuf:"varint,2,rep,packed,name=MsgIds,proto3" json:"MsgIds,omitempty"` // 消息ID集合
}

func (x *ChannelIdAndMsgIds) Reset() {
	*x = ChannelIdAndMsgIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelIdAndMsgIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelIdAndMsgIds) ProtoMessage() {}

func (x *ChannelIdAndMsgIds) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelIdAndMsgIds.ProtoReflect.Descriptor instead.
func (*ChannelIdAndMsgIds) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{14}
}

func (x *ChannelIdAndMsgIds) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelIdAndMsgIds) GetMsgIds() []int32 {
	if x != nil {
		return x.MsgIds
	}
	return nil
}

type ChannelIdAndUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	UserId    int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`       // 用户ID
}

func (x *ChannelIdAndUserId) Reset() {
	*x = ChannelIdAndUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelIdAndUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelIdAndUserId) ProtoMessage() {}

func (x *ChannelIdAndUserId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelIdAndUserId.ProtoReflect.Descriptor instead.
func (*ChannelIdAndUserId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{15}
}

func (x *ChannelIdAndUserId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelIdAndUserId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type DialogIsCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DialogIdCreated bool `protobuf:"varint,1,opt,name=DialogIdCreated,proto3" json:"DialogIdCreated,omitempty"` // 是否新建的dialog
}

func (x *DialogIsCreated) Reset() {
	*x = DialogIsCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DialogIsCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialogIsCreated) ProtoMessage() {}

func (x *DialogIsCreated) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialogIsCreated.ProtoReflect.Descriptor instead.
func (*DialogIsCreated) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{16}
}

func (x *DialogIsCreated) GetDialogIdCreated() bool {
	if x != nil {
		return x.DialogIdCreated
	}
	return false
}

type ChannelIdAndNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Number    int32 `protobuf:"varint,2,opt,name=Number,proto3" json:"Number,omitempty"`       // 自增PTS基数
}

func (x *ChannelIdAndNum) Reset() {
	*x = ChannelIdAndNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelIdAndNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelIdAndNum) ProtoMessage() {}

func (x *ChannelIdAndNum) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelIdAndNum.ProtoReflect.Descriptor instead.
func (*ChannelIdAndNum) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{17}
}

func (x *ChannelIdAndNum) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelIdAndNum) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type MsgsAndMaxId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxMsgId int32   `protobuf:"varint,1,opt,name=MaxMsgId,proto3" json:"MaxMsgId,omitempty"` // 最大消息ID
	Msgs     []int32 `protobuf:"varint,2,rep,packed,name=Msgs,proto3" json:"Msgs,omitempty"`  // 消息ID集合
}

func (x *MsgsAndMaxId) Reset() {
	*x = MsgsAndMaxId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgsAndMaxId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgsAndMaxId) ProtoMessage() {}

func (x *MsgsAndMaxId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgsAndMaxId.ProtoReflect.Descriptor instead.
func (*MsgsAndMaxId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{18}
}

func (x *MsgsAndMaxId) GetMaxMsgId() int32 {
	if x != nil {
		return x.MaxMsgId
	}
	return 0
}

func (x *MsgsAndMaxId) GetMsgs() []int32 {
	if x != nil {
		return x.Msgs
	}
	return nil
}

type ChannelDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId   int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`     // 超级群唯一ID
	TopMessage  int32 `protobuf:"varint,2,opt,name=TopMessage,proto3" json:"TopMessage,omitempty"`   // 超级群最新消息ID
	MaxReadInId int32 `protobuf:"varint,3,opt,name=MaxReadInId,proto3" json:"MaxReadInId,omitempty"` // 已读最大ID
	Encry       int32 `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`             // 是否加密
}

func (x *ChannelDialog) Reset() {
	*x = ChannelDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDialog) ProtoMessage() {}

func (x *ChannelDialog) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDialog.ProtoReflect.Descriptor instead.
func (*ChannelDialog) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{19}
}

func (x *ChannelDialog) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelDialog) GetTopMessage() int32 {
	if x != nil {
		return x.TopMessage
	}
	return 0
}

func (x *ChannelDialog) GetMaxReadInId() int32 {
	if x != nil {
		return x.MaxReadInId
	}
	return 0
}

func (x *ChannelDialog) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

type ChannelDialogAndMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelDialog *ChannelDialog `protobuf:"bytes,1,opt,name=ChannelDialog,proto3" json:"ChannelDialog,omitempty"` // 对话框基础信息
	ChannelMsg    *UserMsg       `protobuf:"bytes,2,opt,name=ChannelMsg,proto3" json:"ChannelMsg,omitempty"`       // 对话款最新一条消息
}

func (x *ChannelDialogAndMsg) Reset() {
	*x = ChannelDialogAndMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelDialogAndMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDialogAndMsg) ProtoMessage() {}

func (x *ChannelDialogAndMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDialogAndMsg.ProtoReflect.Descriptor instead.
func (*ChannelDialogAndMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{20}
}

func (x *ChannelDialogAndMsg) GetChannelDialog() *ChannelDialog {
	if x != nil {
		return x.ChannelDialog
	}
	return nil
}

func (x *ChannelDialogAndMsg) GetChannelMsg() *UserMsg {
	if x != nil {
		return x.ChannelMsg
	}
	return nil
}

type ChannelDialogAndMsgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelDialogAndMsgs []*ChannelDialogAndMsg `protobuf:"bytes,1,rep,name=ChannelDialogAndMsgs,proto3" json:"ChannelDialogAndMsgs,omitempty"` // 对话框消息集合
}

func (x *ChannelDialogAndMsgs) Reset() {
	*x = ChannelDialogAndMsgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelDialogAndMsgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDialogAndMsgs) ProtoMessage() {}

func (x *ChannelDialogAndMsgs) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDialogAndMsgs.ProtoReflect.Descriptor instead.
func (*ChannelDialogAndMsgs) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{21}
}

func (x *ChannelDialogAndMsgs) GetChannelDialogAndMsgs() []*ChannelDialogAndMsg {
	if x != nil {
		return x.ChannelDialogAndMsgs
	}
	return nil
}

type ReqForWardUserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 用户ID
	WithId     int32   `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`         // 消息交互方ID
	WithIdType int32   `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"` // 对话框类型
	Encry      int32   `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`           // 是否加密 0: 不加密 1：加密
	MsgIds     []int32 `protobuf:"varint,5,rep,packed,name=MsgIds,proto3" json:"MsgIds,omitempty"`  // 消息ID集合
}

func (x *ReqForWardUserMsg) Reset() {
	*x = ReqForWardUserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqForWardUserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqForWardUserMsg) ProtoMessage() {}

func (x *ReqForWardUserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqForWardUserMsg.ProtoReflect.Descriptor instead.
func (*ReqForWardUserMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{22}
}

func (x *ReqForWardUserMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqForWardUserMsg) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqForWardUserMsg) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *ReqForWardUserMsg) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ReqForWardUserMsg) GetMsgIds() []int32 {
	if x != nil {
		return x.MsgIds
	}
	return nil
}

type ReqUserMsgHis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selfid     int32 `protobuf:"varint,1,opt,name=Selfid,proto3" json:"Selfid,omitempty"`         // 自身用户ID
	Withid     int32 `protobuf:"varint,2,opt,name=Withid,proto3" json:"Withid,omitempty"`         // 消息交互方ID
	Type       int32 `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`             // 对话框类型 1:user 2: chat 3: channel
	OffsetId   int32 `protobuf:"varint,4,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`     // 消息ID， 查询小于OFfsetID limit- addoffset条 如果offsetID 等于0 则取最新的limit条
	OffsetDate int32 `protobuf:"varint,5,opt,name=OffsetDate,proto3" json:"OffsetDate,omitempty"` // 未使用字段
	AddOffset  int32 `protobuf:"varint,6,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`   // 向下取消息条数， 如果不等于0 则取 大于且等于OffsetId addOffset绝对值条
	MinId      int32 `protobuf:"varint,7,opt,name=MinId,proto3" json:"MinId,omitempty"`           // 未使用字段
	MaxId      int32 `protobuf:"varint,8,opt,name=MaxId,proto3" json:"MaxId,omitempty"`           // 未使用字段
	Limit      int32 `protobuf:"varint,9,opt,name=Limit,proto3" json:"Limit,omitempty"`           // 查询条数
	Encry      int32 `protobuf:"varint,10,opt,name=Encry,proto3" json:"Encry,omitempty"`          // ReqUserMsgHis是否加密 0: 不加密 1：加密
}

func (x *ReqUserMsgHis) Reset() {
	*x = ReqUserMsgHis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserMsgHis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserMsgHis) ProtoMessage() {}

func (x *ReqUserMsgHis) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserMsgHis.ProtoReflect.Descriptor instead.
func (*ReqUserMsgHis) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{23}
}

func (x *ReqUserMsgHis) GetSelfid() int32 {
	if x != nil {
		return x.Selfid
	}
	return 0
}

func (x *ReqUserMsgHis) GetWithid() int32 {
	if x != nil {
		return x.Withid
	}
	return 0
}

func (x *ReqUserMsgHis) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReqUserMsgHis) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *ReqUserMsgHis) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *ReqUserMsgHis) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *ReqUserMsgHis) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *ReqUserMsgHis) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *ReqUserMsgHis) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqUserMsgHis) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

type DialogTopMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32 `protobuf:"varint,1,opt,name=FromId,proto3" json:"FromId,omitempty"`         // 消息发送方用户ID
	TopMessage int32 `protobuf:"varint,2,opt,name=TopMessage,proto3" json:"TopMessage,omitempty"` // 最新消息ID
}

func (x *DialogTopMessage) Reset() {
	*x = DialogTopMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DialogTopMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialogTopMessage) ProtoMessage() {}

func (x *DialogTopMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialogTopMessage.ProtoReflect.Descriptor instead.
func (*DialogTopMessage) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{24}
}

func (x *DialogTopMessage) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *DialogTopMessage) GetTopMessage() int32 {
	if x != nil {
		return x.TopMessage
	}
	return 0
}

type ForWardUserMsgList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForWardUserMsg []*ForWardUserMsg `protobuf:"bytes,1,rep,name=ForWardUserMsg,proto3" json:"ForWardUserMsg,omitempty"` // 转发消息集合
}

func (x *ForWardUserMsgList) Reset() {
	*x = ForWardUserMsgList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForWardUserMsgList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForWardUserMsgList) ProtoMessage() {}

func (x *ForWardUserMsgList) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForWardUserMsgList.ProtoReflect.Descriptor instead.
func (*ForWardUserMsgList) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{25}
}

func (x *ForWardUserMsgList) GetForWardUserMsg() []*ForWardUserMsg {
	if x != nil {
		return x.ForWardUserMsg
	}
	return nil
}

type UserMsgList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsgs []*UserMsg `protobuf:"bytes,1,rep,name=UserMsgs,proto3" json:"UserMsgs,omitempty"` // 消息集合
	Pts      int32      `protobuf:"varint,2,opt,name=pts,proto3" json:"pts,omitempty"`          // 当前PTS
}

func (x *UserMsgList) Reset() {
	*x = UserMsgList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMsgList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMsgList) ProtoMessage() {}

func (x *UserMsgList) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMsgList.ProtoReflect.Descriptor instead.
func (*UserMsgList) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{26}
}

func (x *UserMsgList) GetUserMsgs() []*UserMsg {
	if x != nil {
		return x.UserMsgs
	}
	return nil
}

func (x *UserMsgList) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

type UserMsgListAndPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsgs []*UserMsg `protobuf:"bytes,1,rep,name=UserMsgs,proto3" json:"UserMsgs,omitempty"` // 消息集合
	Pts      int32      `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`          // 当前PTS
	Count    int32      `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`      // 超级群中总共有多少消息
}

func (x *UserMsgListAndPts) Reset() {
	*x = UserMsgListAndPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMsgListAndPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMsgListAndPts) ProtoMessage() {}

func (x *UserMsgListAndPts) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMsgListAndPts.ProtoReflect.Descriptor instead.
func (*UserMsgListAndPts) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{27}
}

func (x *UserMsgListAndPts) GetUserMsgs() []*UserMsg {
	if x != nil {
		return x.UserMsgs
	}
	return nil
}

func (x *UserMsgListAndPts) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *UserMsgListAndPts) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type UserDialogList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDialogs []*UserDialog `protobuf:"bytes,1,rep,name=UserDialogs,proto3" json:"UserDialogs,omitempty"` // 对话框基础信息集合
}

func (x *UserDialogList) Reset() {
	*x = UserDialogList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDialogList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDialogList) ProtoMessage() {}

func (x *UserDialogList) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDialogList.ProtoReflect.Descriptor instead.
func (*UserDialogList) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{28}
}

func (x *UserDialogList) GetUserDialogs() []*UserDialog {
	if x != nil {
		return x.UserDialogs
	}
	return nil
}

type UserDialogAndMsgList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDialogAndMsgs []*UserDialogAndMsg `protobuf:"bytes,1,rep,name=UserDialogAndMsgs,proto3" json:"UserDialogAndMsgs,omitempty"` // 对话框信息集合
	Count             int32               `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`                        // 对话框总数
}

func (x *UserDialogAndMsgList) Reset() {
	*x = UserDialogAndMsgList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDialogAndMsgList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDialogAndMsgList) ProtoMessage() {}

func (x *UserDialogAndMsgList) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDialogAndMsgList.ProtoReflect.Descriptor instead.
func (*UserDialogAndMsgList) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{29}
}

func (x *UserDialogAndMsgList) GetUserDialogAndMsgs() []*UserDialogAndMsg {
	if x != nil {
		return x.UserDialogAndMsgs
	}
	return nil
}

func (x *UserDialogAndMsgList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ReplyGetPingedDialogAndMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DialogMsg                  *UserDialogAndMsgList `protobuf:"bytes,1,opt,name=DialogMsg,proto3" json:"DialogMsg,omitempty"`                                                                          // 对话框和消息
	TopPeerId                  int32                 `protobuf:"varint,2,opt,name=TopPeerId,proto3" json:"TopPeerId,omitempty"`                                                                         // 归档顶部对话框
	TopPeerType                int32                 `protobuf:"varint,3,opt,name=TopPeerType,proto3" json:"TopPeerType,omitempty"`                                                                     // 归档顶部对话框类型
	TopMsgId                   int32                 `protobuf:"varint,4,opt,name=TopMsgId,proto3" json:"TopMsgId,omitempty"`                                                                           // 归档顶部对话框消息id
	UnreadMutedPeersCount      int32                 `protobuf:"varint,5,opt,name=Unread_muted_peers_count,json=UnreadMutedPeersCount,proto3" json:"Unread_muted_peers_count,omitempty"`                // 静默未读对话框总个数
	UnreadUnmutedPeersCount    int32                 `protobuf:"varint,6,opt,name=Unread_unmuted_peers_count,json=UnreadUnmutedPeersCount,proto3" json:"Unread_unmuted_peers_count,omitempty"`          // 非静默未读对话框总个数
	UnreadMutedMessagesCount   int32                 `protobuf:"varint,7,opt,name=Unread_muted_messages_count,json=UnreadMutedMessagesCount,proto3" json:"Unread_muted_messages_count,omitempty"`       // 静默未读消息总条数
	UnreadUnmutedMessagesCount int32                 `protobuf:"varint,8,opt,name=Unread_unmuted_messages_count,json=UnreadUnmutedMessagesCount,proto3" json:"Unread_unmuted_messages_count,omitempty"` // 非静默未读消息总条数
}

func (x *ReplyGetPingedDialogAndMsg) Reset() {
	*x = ReplyGetPingedDialogAndMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetPingedDialogAndMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetPingedDialogAndMsg) ProtoMessage() {}

func (x *ReplyGetPingedDialogAndMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetPingedDialogAndMsg.ProtoReflect.Descriptor instead.
func (*ReplyGetPingedDialogAndMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{30}
}

func (x *ReplyGetPingedDialogAndMsg) GetDialogMsg() *UserDialogAndMsgList {
	if x != nil {
		return x.DialogMsg
	}
	return nil
}

func (x *ReplyGetPingedDialogAndMsg) GetTopPeerId() int32 {
	if x != nil {
		return x.TopPeerId
	}
	return 0
}

func (x *ReplyGetPingedDialogAndMsg) GetTopPeerType() int32 {
	if x != nil {
		return x.TopPeerType
	}
	return 0
}

func (x *ReplyGetPingedDialogAndMsg) GetTopMsgId() int32 {
	if x != nil {
		return x.TopMsgId
	}
	return 0
}

func (x *ReplyGetPingedDialogAndMsg) GetUnreadMutedPeersCount() int32 {
	if x != nil {
		return x.UnreadMutedPeersCount
	}
	return 0
}

func (x *ReplyGetPingedDialogAndMsg) GetUnreadUnmutedPeersCount() int32 {
	if x != nil {
		return x.UnreadUnmutedPeersCount
	}
	return 0
}

func (x *ReplyGetPingedDialogAndMsg) GetUnreadMutedMessagesCount() int32 {
	if x != nil {
		return x.UnreadMutedMessagesCount
	}
	return 0
}

func (x *ReplyGetPingedDialogAndMsg) GetUnreadUnmutedMessagesCount() int32 {
	if x != nil {
		return x.UnreadUnmutedMessagesCount
	}
	return 0
}

type UserDialogAndMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDialog *UserDialog `protobuf:"bytes,1,opt,name=UserDialog,proto3" json:"UserDialog,omitempty"` // 对话基础信息
	UserMsg    *UserMsg    `protobuf:"bytes,2,opt,name=UserMsg,proto3" json:"UserMsg,omitempty"`       // 对话最新消息
}

func (x *UserDialogAndMsg) Reset() {
	*x = UserDialogAndMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDialogAndMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDialogAndMsg) ProtoMessage() {}

func (x *UserDialogAndMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDialogAndMsg.ProtoReflect.Descriptor instead.
func (*UserDialogAndMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{31}
}

func (x *UserDialogAndMsg) GetUserDialog() *UserDialog {
	if x != nil {
		return x.UserDialog
	}
	return nil
}

func (x *UserDialogAndMsg) GetUserMsg() *UserMsg {
	if x != nil {
		return x.UserMsg
	}
	return nil
}

type ReqInsertOrUpdateUserMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqInsertOrUpdateUserMsgId) Reset() {
	*x = ReqInsertOrUpdateUserMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqInsertOrUpdateUserMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqInsertOrUpdateUserMsgId) ProtoMessage() {}

func (x *ReqInsertOrUpdateUserMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqInsertOrUpdateUserMsgId.ProtoReflect.Descriptor instead.
func (*ReqInsertOrUpdateUserMsgId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{32}
}

func (x *ReqInsertOrUpdateUserMsgId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqInsertOrUpdateUserMsgId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqIncreaseUserLocalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqIncreaseUserLocalId) Reset() {
	*x = ReqIncreaseUserLocalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqIncreaseUserLocalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqIncreaseUserLocalId) ProtoMessage() {}

func (x *ReqIncreaseUserLocalId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqIncreaseUserLocalId.ProtoReflect.Descriptor instead.
func (*ReqIncreaseUserLocalId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{33}
}

func (x *ReqIncreaseUserLocalId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqIncreaseUserLocalId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyIncreaseUserLocalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserLocalId *UserLocalId `protobuf:"bytes,1,opt,name=UserLocalId,proto3" json:"UserLocalId,omitempty"`
}

func (x *ReplyIncreaseUserLocalId) Reset() {
	*x = ReplyIncreaseUserLocalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyIncreaseUserLocalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyIncreaseUserLocalId) ProtoMessage() {}

func (x *ReplyIncreaseUserLocalId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyIncreaseUserLocalId.ProtoReflect.Descriptor instead.
func (*ReplyIncreaseUserLocalId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{34}
}

func (x *ReplyIncreaseUserLocalId) GetUserLocalId() *UserLocalId {
	if x != nil {
		return x.UserLocalId
	}
	return nil
}

type ReqGetCurrentUserLocalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqGetCurrentUserLocalId) Reset() {
	*x = ReqGetCurrentUserLocalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetCurrentUserLocalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetCurrentUserLocalId) ProtoMessage() {}

func (x *ReqGetCurrentUserLocalId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetCurrentUserLocalId.ProtoReflect.Descriptor instead.
func (*ReqGetCurrentUserLocalId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{35}
}

func (x *ReqGetCurrentUserLocalId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetCurrentUserLocalId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetCurrentUserLocalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserLocalId *UserLocalId `protobuf:"bytes,1,opt,name=UserLocalId,proto3" json:"UserLocalId,omitempty"`
}

func (x *ReplyGetCurrentUserLocalId) Reset() {
	*x = ReplyGetCurrentUserLocalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetCurrentUserLocalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetCurrentUserLocalId) ProtoMessage() {}

func (x *ReplyGetCurrentUserLocalId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetCurrentUserLocalId.ProtoReflect.Descriptor instead.
func (*ReplyGetCurrentUserLocalId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{36}
}

func (x *ReplyGetCurrentUserLocalId) GetUserLocalId() *UserLocalId {
	if x != nil {
		return x.UserLocalId
	}
	return nil
}

type ReqIncreaseChannelLocalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqIncreaseChannelLocalId) Reset() {
	*x = ReqIncreaseChannelLocalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqIncreaseChannelLocalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqIncreaseChannelLocalId) ProtoMessage() {}

func (x *ReqIncreaseChannelLocalId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqIncreaseChannelLocalId.ProtoReflect.Descriptor instead.
func (*ReqIncreaseChannelLocalId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{37}
}

func (x *ReqIncreaseChannelLocalId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqIncreaseChannelLocalId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyIncreaseChannelLocalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelLocalId *ChannelLocalId `protobuf:"bytes,1,opt,name=ChannelLocalId,proto3" json:"ChannelLocalId,omitempty"`
	ReplyErr       *ReplyErr       `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyIncreaseChannelLocalId) Reset() {
	*x = ReplyIncreaseChannelLocalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyIncreaseChannelLocalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyIncreaseChannelLocalId) ProtoMessage() {}

func (x *ReplyIncreaseChannelLocalId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyIncreaseChannelLocalId.ProtoReflect.Descriptor instead.
func (*ReplyIncreaseChannelLocalId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{38}
}

func (x *ReplyIncreaseChannelLocalId) GetChannelLocalId() *ChannelLocalId {
	if x != nil {
		return x.ChannelLocalId
	}
	return nil
}

func (x *ReplyIncreaseChannelLocalId) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetCurrentChannelLocalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqGetCurrentChannelLocalId) Reset() {
	*x = ReqGetCurrentChannelLocalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetCurrentChannelLocalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetCurrentChannelLocalId) ProtoMessage() {}

func (x *ReqGetCurrentChannelLocalId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetCurrentChannelLocalId.ProtoReflect.Descriptor instead.
func (*ReqGetCurrentChannelLocalId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{39}
}

func (x *ReqGetCurrentChannelLocalId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetCurrentChannelLocalId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetCurrentChannelLocalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelLocalId *ChannelLocalId `protobuf:"bytes,1,opt,name=ChannelLocalId,proto3" json:"ChannelLocalId,omitempty"`
	ReplyErr       *ReplyErr       `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyGetCurrentChannelLocalId) Reset() {
	*x = ReplyGetCurrentChannelLocalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetCurrentChannelLocalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetCurrentChannelLocalId) ProtoMessage() {}

func (x *ReplyGetCurrentChannelLocalId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetCurrentChannelLocalId.ProtoReflect.Descriptor instead.
func (*ReplyGetCurrentChannelLocalId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{40}
}

func (x *ReplyGetCurrentChannelLocalId) GetChannelLocalId() *ChannelLocalId {
	if x != nil {
		return x.ChannelLocalId
	}
	return nil
}

func (x *ReplyGetCurrentChannelLocalId) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqIncreaseUserMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 用户ID
	MsgIdDelta int32         `protobuf:"varint,2,opt,name=MsgIdDelta,proto3" json:"MsgIdDelta,omitempty"` // msgId 增量
	PtsDelta   int32         `protobuf:"varint,3,opt,name=PtsDelta,proto3" json:"PtsDelta,omitempty"`     // pts 增量
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`            // 日志前缀信息
}

func (x *ReqIncreaseUserMsgId) Reset() {
	*x = ReqIncreaseUserMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqIncreaseUserMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqIncreaseUserMsgId) ProtoMessage() {}

func (x *ReqIncreaseUserMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqIncreaseUserMsgId.ProtoReflect.Descriptor instead.
func (*ReqIncreaseUserMsgId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{41}
}

func (x *ReqIncreaseUserMsgId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqIncreaseUserMsgId) GetMsgIdDelta() int32 {
	if x != nil {
		return x.MsgIdDelta
	}
	return 0
}

func (x *ReqIncreaseUserMsgId) GetPtsDelta() int32 {
	if x != nil {
		return x.PtsDelta
	}
	return 0
}

func (x *ReqIncreaseUserMsgId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqSetUserMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsgId *UserMsgId    `protobuf:"bytes,1,opt,name=UserMsgId,proto3" json:"UserMsgId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqSetUserMsgId) Reset() {
	*x = ReqSetUserMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSetUserMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSetUserMsgId) ProtoMessage() {}

func (x *ReqSetUserMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSetUserMsgId.ProtoReflect.Descriptor instead.
func (*ReqSetUserMsgId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{42}
}

func (x *ReqSetUserMsgId) GetUserMsgId() *UserMsgId {
	if x != nil {
		return x.UserMsgId
	}
	return nil
}

func (x *ReqSetUserMsgId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqSetMsgIdImported struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgIdImported *MsgIdImported `protobuf:"bytes,1,opt,name=MsgIdImported,proto3" json:"MsgIdImported,omitempty"`
	Debug         *pbcomm.Debug  `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqSetMsgIdImported) Reset() {
	*x = ReqSetMsgIdImported{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSetMsgIdImported) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSetMsgIdImported) ProtoMessage() {}

func (x *ReqSetMsgIdImported) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSetMsgIdImported.ProtoReflect.Descriptor instead.
func (*ReqSetMsgIdImported) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{43}
}

func (x *ReqSetMsgIdImported) GetMsgIdImported() *MsgIdImported {
	if x != nil {
		return x.MsgIdImported
	}
	return nil
}

func (x *ReqSetMsgIdImported) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplySetMsgIdImported struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplySetMsgIdImported) Reset() {
	*x = ReplySetMsgIdImported{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplySetMsgIdImported) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplySetMsgIdImported) ProtoMessage() {}

func (x *ReplySetMsgIdImported) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplySetMsgIdImported.ProtoReflect.Descriptor instead.
func (*ReplySetMsgIdImported) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{44}
}

type ReqCheckMsgIdImported struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdOrChannelId int32         `protobuf:"varint,1,opt,name=UserIdOrChannelId,proto3" json:"UserIdOrChannelId,omitempty"` // 用户ID或者超级群ID
	Debug             *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`                          // 日志前缀信息
}

func (x *ReqCheckMsgIdImported) Reset() {
	*x = ReqCheckMsgIdImported{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCheckMsgIdImported) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCheckMsgIdImported) ProtoMessage() {}

func (x *ReqCheckMsgIdImported) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCheckMsgIdImported.ProtoReflect.Descriptor instead.
func (*ReqCheckMsgIdImported) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{45}
}

func (x *ReqCheckMsgIdImported) GetUserIdOrChannelId() int32 {
	if x != nil {
		return x.UserIdOrChannelId
	}
	return 0
}

func (x *ReqCheckMsgIdImported) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyCheckMsgIdImported struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgIdImported *MsgIdImported `protobuf:"bytes,1,opt,name=MsgIdImported,proto3" json:"MsgIdImported,omitempty"`
}

func (x *ReplyCheckMsgIdImported) Reset() {
	*x = ReplyCheckMsgIdImported{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyCheckMsgIdImported) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyCheckMsgIdImported) ProtoMessage() {}

func (x *ReplyCheckMsgIdImported) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyCheckMsgIdImported.ProtoReflect.Descriptor instead.
func (*ReplyCheckMsgIdImported) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{46}
}

func (x *ReplyCheckMsgIdImported) GetMsgIdImported() *MsgIdImported {
	if x != nil {
		return x.MsgIdImported
	}
	return nil
}

type ReqGetUserMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqGetUserMsgId) Reset() {
	*x = ReqGetUserMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUserMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUserMsgId) ProtoMessage() {}

func (x *ReqGetUserMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUserMsgId.ProtoReflect.Descriptor instead.
func (*ReqGetUserMsgId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{47}
}

func (x *ReqGetUserMsgId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetUserMsgId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqUpdateUserPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqUpdateUserPts) Reset() {
	*x = ReqUpdateUserPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateUserPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateUserPts) ProtoMessage() {}

func (x *ReqUpdateUserPts) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateUserPts.ProtoReflect.Descriptor instead.
func (*ReqUpdateUserPts) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{48}
}

func (x *ReqUpdateUserPts) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUpdateUserPts) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqBatchUpdatUserPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	Number int32         `protobuf:"varint,2,opt,name=Number,proto3" json:"Number,omitempty"` // 更新的次数
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqBatchUpdatUserPts) Reset() {
	*x = ReqBatchUpdatUserPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBatchUpdatUserPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBatchUpdatUserPts) ProtoMessage() {}

func (x *ReqBatchUpdatUserPts) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBatchUpdatUserPts.ProtoReflect.Descriptor instead.
func (*ReqBatchUpdatUserPts) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{49}
}

func (x *ReqBatchUpdatUserPts) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqBatchUpdatUserPts) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ReqBatchUpdatUserPts) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqStorePtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PtsHandle *PtsHandle    `protobuf:"bytes,1,opt,name=PtsHandle,proto3" json:"PtsHandle,omitempty"` // ptsHandle
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`         // 日志前缀信息
}

func (x *ReqStorePtsHandle) Reset() {
	*x = ReqStorePtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStorePtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStorePtsHandle) ProtoMessage() {}

func (x *ReqStorePtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStorePtsHandle.ProtoReflect.Descriptor instead.
func (*ReqStorePtsHandle) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{50}
}

func (x *ReqStorePtsHandle) GetPtsHandle() *PtsHandle {
	if x != nil {
		return x.PtsHandle
	}
	return nil
}

func (x *ReqStorePtsHandle) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetDiffByPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	Pts    int32         `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`       // PTS
	Limit  uint32        `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`   // 查询条数
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqGetDiffByPts) Reset() {
	*x = ReqGetDiffByPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetDiffByPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetDiffByPts) ProtoMessage() {}

func (x *ReqGetDiffByPts) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetDiffByPts.ProtoReflect.Descriptor instead.
func (*ReqGetDiffByPts) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{51}
}

func (x *ReqGetDiffByPts) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetDiffByPts) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReqGetDiffByPts) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetDiffByPts) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetDiffByPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg      [][]byte   `protobuf:"bytes,1,rep,name=Msg,proto3" json:"Msg,omitempty"`           // 消息二进制集合
	LastPts  int32      `protobuf:"varint,2,opt,name=LastPts,proto3" json:"LastPts,omitempty"`  // 返回二进制中最大的PTS
	ToLong   bool       `protobuf:"varint,3,opt,name=ToLong,proto3" json:"ToLong,omitempty"`    // 是否太长， 如果缓存里面没有 则太长 将最后一个pts返回， 如果缓存里能查询到，则不长，直接返回
	UserMsgs []*UserMsg `protobuf:"bytes,4,rep,name=UserMsgs,proto3" json:"UserMsgs,omitempty"` // 消息数组， 如果太长则返回消息数组
	Date     int64      `protobuf:"varint,5,opt,name=Date,proto3" json:"Date,omitempty"`        // 如果pts 对应的消息存在 则返回pts对应的时间 如果不存在 则返回第一个数据的时间
}

func (x *ReplyGetDiffByPts) Reset() {
	*x = ReplyGetDiffByPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetDiffByPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetDiffByPts) ProtoMessage() {}

func (x *ReplyGetDiffByPts) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetDiffByPts.ProtoReflect.Descriptor instead.
func (*ReplyGetDiffByPts) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{52}
}

func (x *ReplyGetDiffByPts) GetMsg() [][]byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *ReplyGetDiffByPts) GetLastPts() int32 {
	if x != nil {
		return x.LastPts
	}
	return 0
}

func (x *ReplyGetDiffByPts) GetToLong() bool {
	if x != nil {
		return x.ToLong
	}
	return false
}

func (x *ReplyGetDiffByPts) GetUserMsgs() []*UserMsg {
	if x != nil {
		return x.UserMsgs
	}
	return nil
}

func (x *ReplyGetDiffByPts) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

type ReqGetActionDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	Pts    int32         `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`       // pts
	Limit  uint32        `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`   // 查询条数
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqGetActionDiff) Reset() {
	*x = ReqGetActionDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetActionDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetActionDiff) ProtoMessage() {}

func (x *ReqGetActionDiff) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetActionDiff.ProtoReflect.Descriptor instead.
func (*ReqGetActionDiff) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{53}
}

func (x *ReqGetActionDiff) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetActionDiff) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReqGetActionDiff) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetActionDiff) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqDeletePtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`        // 用户ID
	PtsSli []int32 `protobuf:"varint,2,rep,packed,name=PtsSli,proto3" json:"PtsSli,omitempty"` // pts 切片
}

func (x *ReqDeletePtsHandle) Reset() {
	*x = ReqDeletePtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeletePtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeletePtsHandle) ProtoMessage() {}

func (x *ReqDeletePtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeletePtsHandle.ProtoReflect.Descriptor instead.
func (*ReqDeletePtsHandle) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{54}
}

func (x *ReqDeletePtsHandle) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqDeletePtsHandle) GetPtsSli() []int32 {
	if x != nil {
		return x.PtsSli
	}
	return nil
}

type ReqClearPtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	MaxPts int32 `protobuf:"varint,2,opt,name=MaxPts,proto3" json:"MaxPts,omitempty"` // 最大的pts ，删除 <= maxpts 的数据
}

func (x *ReqClearPtsHandle) Reset() {
	*x = ReqClearPtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqClearPtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqClearPtsHandle) ProtoMessage() {}

func (x *ReqClearPtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqClearPtsHandle.ProtoReflect.Descriptor instead.
func (*ReqClearPtsHandle) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{55}
}

func (x *ReqClearPtsHandle) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqClearPtsHandle) GetMaxPts() int32 {
	if x != nil {
		return x.MaxPts
	}
	return 0
}

type ReplyClearPtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplyClearPtsHandle) Reset() {
	*x = ReplyClearPtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyClearPtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyClearPtsHandle) ProtoMessage() {}

func (x *ReplyClearPtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyClearPtsHandle.ProtoReflect.Descriptor instead.
func (*ReplyClearPtsHandle) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{56}
}

type ReplyDeletePtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplyDeletePtsHandle) Reset() {
	*x = ReplyDeletePtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDeletePtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDeletePtsHandle) ProtoMessage() {}

func (x *ReplyDeletePtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDeletePtsHandle.ProtoReflect.Descriptor instead.
func (*ReplyDeletePtsHandle) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{57}
}

type ReplyGetActionDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PtsHandles []*PtsHandle `protobuf:"bytes,1,rep,name=PtsHandles,proto3" json:"PtsHandles,omitempty"`
}

func (x *ReplyGetActionDiff) Reset() {
	*x = ReplyGetActionDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetActionDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetActionDiff) ProtoMessage() {}

func (x *ReplyGetActionDiff) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetActionDiff.ProtoReflect.Descriptor instead.
func (*ReplyGetActionDiff) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{58}
}

func (x *ReplyGetActionDiff) GetPtsHandles() []*PtsHandle {
	if x != nil {
		return x.PtsHandles
	}
	return nil
}

type ReqStoreOtherInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherInfoMsg *OtherInfoMsg `protobuf:"bytes,1,opt,name=OtherInfoMsg,proto3" json:"OtherInfoMsg,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqStoreOtherInfoMsg) Reset() {
	*x = ReqStoreOtherInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStoreOtherInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStoreOtherInfoMsg) ProtoMessage() {}

func (x *ReqStoreOtherInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStoreOtherInfoMsg.ProtoReflect.Descriptor instead.
func (*ReqStoreOtherInfoMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{59}
}

func (x *ReqStoreOtherInfoMsg) GetOtherInfoMsg() *OtherInfoMsg {
	if x != nil {
		return x.OtherInfoMsg
	}
	return nil
}

func (x *ReqStoreOtherInfoMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqBatchStoreOtherInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherInfoMsgs []*OtherInfoMsg `protobuf:"bytes,1,rep,name=OtherInfoMsgs,proto3" json:"OtherInfoMsgs,omitempty"` // otherInfoMsg 消息数组
	Debug         *pbcomm.Debug   `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`                 // 日志前缀信息
}

func (x *ReqBatchStoreOtherInfoMsg) Reset() {
	*x = ReqBatchStoreOtherInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBatchStoreOtherInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBatchStoreOtherInfoMsg) ProtoMessage() {}

func (x *ReqBatchStoreOtherInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBatchStoreOtherInfoMsg.ProtoReflect.Descriptor instead.
func (*ReqBatchStoreOtherInfoMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{60}
}

func (x *ReqBatchStoreOtherInfoMsg) GetOtherInfoMsgs() []*OtherInfoMsg {
	if x != nil {
		return x.OtherInfoMsgs
	}
	return nil
}

func (x *ReqBatchStoreOtherInfoMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetOtherInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	Date   int64         `protobuf:"varint,2,opt,name=Date,proto3" json:"Date,omitempty"`     // 时间戳
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqGetOtherInfoMsg) Reset() {
	*x = ReqGetOtherInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetOtherInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetOtherInfoMsg) ProtoMessage() {}

func (x *ReqGetOtherInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetOtherInfoMsg.ProtoReflect.Descriptor instead.
func (*ReqGetOtherInfoMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{61}
}

func (x *ReqGetOtherInfoMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetOtherInfoMsg) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ReqGetOtherInfoMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetOtherInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherInfoMsgs []*OtherInfoMsg `protobuf:"bytes,1,rep,name=OtherInfoMsgs,proto3" json:"OtherInfoMsgs,omitempty"`
}

func (x *ReplyGetOtherInfoMsg) Reset() {
	*x = ReplyGetOtherInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetOtherInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetOtherInfoMsg) ProtoMessage() {}

func (x *ReplyGetOtherInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetOtherInfoMsg.ProtoReflect.Descriptor instead.
func (*ReplyGetOtherInfoMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{62}
}

func (x *ReplyGetOtherInfoMsg) GetOtherInfoMsgs() []*OtherInfoMsg {
	if x != nil {
		return x.OtherInfoMsgs
	}
	return nil
}

type ReqInsertOrUpdateUserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsg *UserMsg      `protobuf:"bytes,1,opt,name=UserMsg,proto3" json:"UserMsg,omitempty"` // 聊天消息
	Debug   *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`     // 日志前缀信息
}

func (x *ReqInsertOrUpdateUserMsg) Reset() {
	*x = ReqInsertOrUpdateUserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqInsertOrUpdateUserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqInsertOrUpdateUserMsg) ProtoMessage() {}

func (x *ReqInsertOrUpdateUserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqInsertOrUpdateUserMsg.ProtoReflect.Descriptor instead.
func (*ReqInsertOrUpdateUserMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{63}
}

func (x *ReqInsertOrUpdateUserMsg) GetUserMsg() *UserMsg {
	if x != nil {
		return x.UserMsg
	}
	return nil
}

func (x *ReqInsertOrUpdateUserMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetForwardUserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 用户ID
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`         // 消息交互方ID
	WithIdType int32         `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"` // 对话框类型
	Encry      int32         `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`           // 是否加密 0: 不加密 1：加密
	MsgIds     []int32       `protobuf:"varint,5,rep,packed,name=MsgIds,proto3" json:"MsgIds,omitempty"`  // 消息ID集合
	Debug      *pbcomm.Debug `protobuf:"bytes,11,opt,name=Debug,proto3" json:"Debug,omitempty"`           // 日志前缀信息
}

func (x *ReqGetForwardUserMsg) Reset() {
	*x = ReqGetForwardUserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetForwardUserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetForwardUserMsg) ProtoMessage() {}

func (x *ReqGetForwardUserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetForwardUserMsg.ProtoReflect.Descriptor instead.
func (*ReqGetForwardUserMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{64}
}

func (x *ReqGetForwardUserMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetForwardUserMsg) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqGetForwardUserMsg) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *ReqGetForwardUserMsg) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ReqGetForwardUserMsg) GetMsgIds() []int32 {
	if x != nil {
		return x.MsgIds
	}
	return nil
}

func (x *ReqGetForwardUserMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetUserMsgHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selfid     int32         `protobuf:"varint,1,opt,name=Selfid,proto3" json:"Selfid,omitempty"`         // 自身用户ID
	Withid     int32         `protobuf:"varint,2,opt,name=Withid,proto3" json:"Withid,omitempty"`         // 消息交互方ID
	Type       int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`             // 对话框类型 1:user 2: chat 3: channel
	OffsetId   int32         `protobuf:"varint,4,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`     // 消息ID， 查询小于OFfsetID limit- addoffset条 如果offsetID 等于0 则取最新的limit条
	OffsetDate int32         `protobuf:"varint,5,opt,name=OffsetDate,proto3" json:"OffsetDate,omitempty"` // 未使用字段
	AddOffset  int32         `protobuf:"varint,6,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`   // 向下取消息条数， 如果不等于0 则取 大于且等于OffsetId addOffset绝对值条
	MinId      int32         `protobuf:"varint,7,opt,name=MinId,proto3" json:"MinId,omitempty"`           // 未使用字段
	MaxId      int32         `protobuf:"varint,8,opt,name=MaxId,proto3" json:"MaxId,omitempty"`           // 未使用字段
	Limit      int32         `protobuf:"varint,9,opt,name=Limit,proto3" json:"Limit,omitempty"`           // 查询条数
	Encry      int32         `protobuf:"varint,10,opt,name=Encry,proto3" json:"Encry,omitempty"`          // ReqUserMsgHis是否加密 0: 不加密 1：加密
	DeletMark  int32         `protobuf:"varint,11,opt,name=DeletMark,proto3" json:"DeletMark,omitempty"`  // 超级群删除历史标记
	Debug      *pbcomm.Debug `protobuf:"bytes,12,opt,name=Debug,proto3" json:"Debug,omitempty"`           // 日志前缀信息
}

func (x *ReqGetUserMsgHistory) Reset() {
	*x = ReqGetUserMsgHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUserMsgHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUserMsgHistory) ProtoMessage() {}

func (x *ReqGetUserMsgHistory) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUserMsgHistory.ProtoReflect.Descriptor instead.
func (*ReqGetUserMsgHistory) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{65}
}

func (x *ReqGetUserMsgHistory) GetSelfid() int32 {
	if x != nil {
		return x.Selfid
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetWithid() int32 {
	if x != nil {
		return x.Withid
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetDeletMark() int32 {
	if x != nil {
		return x.DeletMark
	}
	return 0
}

func (x *ReqGetUserMsgHistory) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetUserMsgUUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	MsgId  int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`   // 消息ID
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqGetUserMsgUUID) Reset() {
	*x = ReqGetUserMsgUUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUserMsgUUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUserMsgUUID) ProtoMessage() {}

func (x *ReqGetUserMsgUUID) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUserMsgUUID.ProtoReflect.Descriptor instead.
func (*ReqGetUserMsgUUID) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{66}
}

func (x *ReqGetUserMsgUUID) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetUserMsgUUID) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqGetUserMsgUUID) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetUserMsgIdByUUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32         `protobuf:"varint,1,opt,name=Userid,proto3" json:"Userid,omitempty"` // 用户ID
	UUID   int64         `protobuf:"varint,2,opt,name=UUID,proto3" json:"UUID,omitempty"`     // 消息UUID
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqGetUserMsgIdByUUID) Reset() {
	*x = ReqGetUserMsgIdByUUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUserMsgIdByUUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUserMsgIdByUUID) ProtoMessage() {}

func (x *ReqGetUserMsgIdByUUID) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUserMsgIdByUUID.ProtoReflect.Descriptor instead.
func (*ReqGetUserMsgIdByUUID) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{67}
}

func (x *ReqGetUserMsgIdByUUID) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqGetUserMsgIdByUUID) GetUUID() int64 {
	if x != nil {
		return x.UUID
	}
	return 0
}

func (x *ReqGetUserMsgIdByUUID) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetUserMsgListByUUIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`      // 用户ID
	UUIDS  []int64       `protobuf:"varint,2,rep,packed,name=UUIDS,proto3" json:"UUIDS,omitempty"` // 消息UUID集合
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`         // 日志前缀信息
}

func (x *ReqGetUserMsgListByUUIDs) Reset() {
	*x = ReqGetUserMsgListByUUIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUserMsgListByUUIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUserMsgListByUUIDs) ProtoMessage() {}

func (x *ReqGetUserMsgListByUUIDs) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUserMsgListByUUIDs.ProtoReflect.Descriptor instead.
func (*ReqGetUserMsgListByUUIDs) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{68}
}

func (x *ReqGetUserMsgListByUUIDs) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReqGetUserMsgListByUUIDs) GetUUIDS() []int64 {
	if x != nil {
		return x.UUIDS
	}
	return nil
}

func (x *ReqGetUserMsgListByUUIDs) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqDeleteUserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	MsgId  int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`   // 消息ID
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqDeleteUserMsg) Reset() {
	*x = ReqDeleteUserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteUserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteUserMsg) ProtoMessage() {}

func (x *ReqDeleteUserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteUserMsg.ProtoReflect.Descriptor instead.
func (*ReqDeleteUserMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{69}
}

func (x *ReqDeleteUserMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqDeleteUserMsg) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqDeleteUserMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqBatchDeleteUserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`        // 用户ID
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`        // 消息交互方ID
	MsgIds []int32       `protobuf:"varint,3,rep,packed,name=MsgIds,proto3" json:"MsgIds,omitempty"` // 消息ID集合
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`           // 日志前缀信息
}

func (x *ReqBatchDeleteUserMsg) Reset() {
	*x = ReqBatchDeleteUserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBatchDeleteUserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBatchDeleteUserMsg) ProtoMessage() {}

func (x *ReqBatchDeleteUserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBatchDeleteUserMsg.ProtoReflect.Descriptor instead.
func (*ReqBatchDeleteUserMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{70}
}

func (x *ReqBatchDeleteUserMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqBatchDeleteUserMsg) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqBatchDeleteUserMsg) GetMsgIds() []int32 {
	if x != nil {
		return x.MsgIds
	}
	return nil
}

func (x *ReqBatchDeleteUserMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetOneUserMsgByUserIdAndMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	MsgId  int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`   // 消息ID
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqGetOneUserMsgByUserIdAndMsgId) Reset() {
	*x = ReqGetOneUserMsgByUserIdAndMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetOneUserMsgByUserIdAndMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetOneUserMsgByUserIdAndMsgId) ProtoMessage() {}

func (x *ReqGetOneUserMsgByUserIdAndMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetOneUserMsgByUserIdAndMsgId.ProtoReflect.Descriptor instead.
func (*ReqGetOneUserMsgByUserIdAndMsgId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{71}
}

func (x *ReqGetOneUserMsgByUserIdAndMsgId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetOneUserMsgByUserIdAndMsgId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqGetOneUserMsgByUserIdAndMsgId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqDeleteUserMsgByUserIdAndWithIdAndEncry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 用户ID
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`         // 消息交互方
	WithIdType int32         `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"` // 对话框类型
	Encry      int32         `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`           // 是否加密 0: 不加密 1：加密
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`            // 日志前缀信息
}

func (x *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) Reset() {
	*x = ReqDeleteUserMsgByUserIdAndWithIdAndEncry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteUserMsgByUserIdAndWithIdAndEncry) ProtoMessage() {}

func (x *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteUserMsgByUserIdAndWithIdAndEncry.ProtoReflect.Descriptor instead.
func (*ReqDeleteUserMsgByUserIdAndWithIdAndEncry) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{72}
}

func (x *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqClearHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 用户ID
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`         // 消息交互方
	WithIdType int32         `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"` // 对话框类型
	Encry      int32         `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`           // 是否加密 0: 不加密 1：加密
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`            // 日志前缀信息
}

func (x *ReqClearHistory) Reset() {
	*x = ReqClearHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqClearHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqClearHistory) ProtoMessage() {}

func (x *ReqClearHistory) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqClearHistory.ProtoReflect.Descriptor instead.
func (*ReqClearHistory) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{73}
}

func (x *ReqClearHistory) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqClearHistory) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqClearHistory) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *ReqClearHistory) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ReqClearHistory) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 查询打电话历史消息记录config 当 withid == withtype == 0 时 只搜索userid
type GetMessageHistoryPageByMediaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`        // 用户ID
	WithId   int32   `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`        // 消息交互方
	WithType int32   `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`    // 对话框类型
	MaxId    int32   `protobuf:"varint,4,opt,name=MaxId,proto3" json:"MaxId,omitempty"`          // 消息Id 如果为0 则从最后一条开始查询
	Encry    int32   `protobuf:"varint,5,opt,name=Encry,proto3" json:"Encry,omitempty"`          // 是否加密
	Medias   []int32 `protobuf:"varint,6,rep,packed,name=Medias,proto3" json:"Medias,omitempty"` // 媒体类型 20 电话
	Limit    int32   `protobuf:"varint,7,opt,name=Limit,proto3" json:"Limit,omitempty"`          // 分页查询条数
}

func (x *GetMessageHistoryPageByMediaConfig) Reset() {
	*x = GetMessageHistoryPageByMediaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessageHistoryPageByMediaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageHistoryPageByMediaConfig) ProtoMessage() {}

func (x *GetMessageHistoryPageByMediaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageHistoryPageByMediaConfig.ProtoReflect.Descriptor instead.
func (*GetMessageHistoryPageByMediaConfig) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{74}
}

func (x *GetMessageHistoryPageByMediaConfig) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetMessageHistoryPageByMediaConfig) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *GetMessageHistoryPageByMediaConfig) GetWithType() int32 {
	if x != nil {
		return x.WithType
	}
	return 0
}

func (x *GetMessageHistoryPageByMediaConfig) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *GetMessageHistoryPageByMediaConfig) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *GetMessageHistoryPageByMediaConfig) GetMedias() []int32 {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *GetMessageHistoryPageByMediaConfig) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ReqGetMessageHistoryPageByMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetMessageHistoryPageByMediaConfig *GetMessageHistoryPageByMediaConfig `protobuf:"bytes,1,opt,name=GetMessageHistoryPageByMediaConfig,proto3" json:"GetMessageHistoryPageByMediaConfig,omitempty"` // 查询打电话历史消息记录config
	Debug                              *pbcomm.Debug                       `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`                                                           // 日志前缀信息
}

func (x *ReqGetMessageHistoryPageByMedia) Reset() {
	*x = ReqGetMessageHistoryPageByMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetMessageHistoryPageByMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetMessageHistoryPageByMedia) ProtoMessage() {}

func (x *ReqGetMessageHistoryPageByMedia) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetMessageHistoryPageByMedia.ProtoReflect.Descriptor instead.
func (*ReqGetMessageHistoryPageByMedia) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{75}
}

func (x *ReqGetMessageHistoryPageByMedia) GetGetMessageHistoryPageByMediaConfig() *GetMessageHistoryPageByMediaConfig {
	if x != nil {
		return x.GetMessageHistoryPageByMediaConfig
	}
	return nil
}

func (x *ReqGetMessageHistoryPageByMedia) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqInsertOrUpdateChannelMessageDeleteMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMessageDeleteMark *ChannelMessageDeleteMark `protobuf:"bytes,1,opt,name=ChannelMessageDeleteMark,proto3" json:"ChannelMessageDeleteMark,omitempty"`
	Debug                    *pbcomm.Debug             `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqInsertOrUpdateChannelMessageDeleteMark) Reset() {
	*x = ReqInsertOrUpdateChannelMessageDeleteMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqInsertOrUpdateChannelMessageDeleteMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqInsertOrUpdateChannelMessageDeleteMark) ProtoMessage() {}

func (x *ReqInsertOrUpdateChannelMessageDeleteMark) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqInsertOrUpdateChannelMessageDeleteMark.ProtoReflect.Descriptor instead.
func (*ReqInsertOrUpdateChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{76}
}

func (x *ReqInsertOrUpdateChannelMessageDeleteMark) GetChannelMessageDeleteMark() *ChannelMessageDeleteMark {
	if x != nil {
		return x.ChannelMessageDeleteMark
	}
	return nil
}

func (x *ReqInsertOrUpdateChannelMessageDeleteMark) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetChannelMessageDeleteMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChannelID int32         `protobuf:"varint,2,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqGetChannelMessageDeleteMark) Reset() {
	*x = ReqGetChannelMessageDeleteMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMessageDeleteMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMessageDeleteMark) ProtoMessage() {}

func (x *ReqGetChannelMessageDeleteMark) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMessageDeleteMark.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{77}
}

func (x *ReqGetChannelMessageDeleteMark) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetChannelMessageDeleteMark) GetChannelID() int32 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *ReqGetChannelMessageDeleteMark) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqUserDialogSetUnreadMetionsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChannelID          int32         `protobuf:"varint,2,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Type               int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	UnreadMetionsCount int32         `protobuf:"varint,4,opt,name=UnreadMetionsCount,proto3" json:"UnreadMetionsCount,omitempty"`
	Debug              *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *ReqUserDialogSetUnreadMetionsCount) Reset() {
	*x = ReqUserDialogSetUnreadMetionsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserDialogSetUnreadMetionsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserDialogSetUnreadMetionsCount) ProtoMessage() {}

func (x *ReqUserDialogSetUnreadMetionsCount) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserDialogSetUnreadMetionsCount.ProtoReflect.Descriptor instead.
func (*ReqUserDialogSetUnreadMetionsCount) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{78}
}

func (x *ReqUserDialogSetUnreadMetionsCount) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUserDialogSetUnreadMetionsCount) GetChannelID() int32 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *ReqUserDialogSetUnreadMetionsCount) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReqUserDialogSetUnreadMetionsCount) GetUnreadMetionsCount() int32 {
	if x != nil {
		return x.UnreadMetionsCount
	}
	return 0
}

func (x *ReqUserDialogSetUnreadMetionsCount) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUserDialogSetUnreadMetionsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`
}

func (x *ReplyUserDialogSetUnreadMetionsCount) Reset() {
	*x = ReplyUserDialogSetUnreadMetionsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUserDialogSetUnreadMetionsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUserDialogSetUnreadMetionsCount) ProtoMessage() {}

func (x *ReplyUserDialogSetUnreadMetionsCount) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUserDialogSetUnreadMetionsCount.ProtoReflect.Descriptor instead.
func (*ReplyUserDialogSetUnreadMetionsCount) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{79}
}

func (x *ReplyUserDialogSetUnreadMetionsCount) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqUserDialogGetUnreadMetionsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChannelID int32         `protobuf:"varint,2,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Type      int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *ReqUserDialogGetUnreadMetionsCount) Reset() {
	*x = ReqUserDialogGetUnreadMetionsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserDialogGetUnreadMetionsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserDialogGetUnreadMetionsCount) ProtoMessage() {}

func (x *ReqUserDialogGetUnreadMetionsCount) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserDialogGetUnreadMetionsCount.ProtoReflect.Descriptor instead.
func (*ReqUserDialogGetUnreadMetionsCount) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{80}
}

func (x *ReqUserDialogGetUnreadMetionsCount) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUserDialogGetUnreadMetionsCount) GetChannelID() int32 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *ReqUserDialogGetUnreadMetionsCount) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReqUserDialogGetUnreadMetionsCount) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUserDialogGetUnreadMetionsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnreadMetionsCount int32     `protobuf:"varint,1,opt,name=UnreadMetionsCount,proto3" json:"UnreadMetionsCount,omitempty"`
	ReplyErr           *ReplyErr `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`
}

func (x *ReplyUserDialogGetUnreadMetionsCount) Reset() {
	*x = ReplyUserDialogGetUnreadMetionsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUserDialogGetUnreadMetionsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUserDialogGetUnreadMetionsCount) ProtoMessage() {}

func (x *ReplyUserDialogGetUnreadMetionsCount) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUserDialogGetUnreadMetionsCount.ProtoReflect.Descriptor instead.
func (*ReplyUserDialogGetUnreadMetionsCount) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{81}
}

func (x *ReplyUserDialogGetUnreadMetionsCount) GetUnreadMetionsCount() int32 {
	if x != nil {
		return x.UnreadMetionsCount
	}
	return 0
}

func (x *ReplyUserDialogGetUnreadMetionsCount) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqUserDialogChangeUnreadMetionsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                        int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChannelID                     int32         `protobuf:"varint,2,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Type                          int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	UnreadMetionsCountChangeValue int32         `protobuf:"varint,4,opt,name=UnreadMetionsCountChangeValue,proto3" json:"UnreadMetionsCountChangeValue,omitempty"` // UnreadMetionsCount变化值
	Debug                         *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *ReqUserDialogChangeUnreadMetionsCount) Reset() {
	*x = ReqUserDialogChangeUnreadMetionsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserDialogChangeUnreadMetionsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserDialogChangeUnreadMetionsCount) ProtoMessage() {}

func (x *ReqUserDialogChangeUnreadMetionsCount) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserDialogChangeUnreadMetionsCount.ProtoReflect.Descriptor instead.
func (*ReqUserDialogChangeUnreadMetionsCount) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{82}
}

func (x *ReqUserDialogChangeUnreadMetionsCount) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUserDialogChangeUnreadMetionsCount) GetChannelID() int32 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *ReqUserDialogChangeUnreadMetionsCount) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReqUserDialogChangeUnreadMetionsCount) GetUnreadMetionsCountChangeValue() int32 {
	if x != nil {
		return x.UnreadMetionsCountChangeValue
	}
	return 0
}

func (x *ReqUserDialogChangeUnreadMetionsCount) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUserDialogChangeUnreadMetionsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`
}

func (x *ReplyUserDialogChangeUnreadMetionsCount) Reset() {
	*x = ReplyUserDialogChangeUnreadMetionsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUserDialogChangeUnreadMetionsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUserDialogChangeUnreadMetionsCount) ProtoMessage() {}

func (x *ReplyUserDialogChangeUnreadMetionsCount) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUserDialogChangeUnreadMetionsCount.ProtoReflect.Descriptor instead.
func (*ReplyUserDialogChangeUnreadMetionsCount) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{83}
}

func (x *ReplyUserDialogChangeUnreadMetionsCount) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetUserMediaMessageStatisticsByMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`     // 用户ID
	WithId   int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`     // 消息接收方ID
	WithType int32         `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"` // 对话框类型
	Media    int32         `protobuf:"varint,4,opt,name=Media,proto3" json:"Media,omitempty"`       // 媒体类型
	Debug    *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`        // 日志前缀信息
}

func (x *ReqGetUserMediaMessageStatisticsByMedia) Reset() {
	*x = ReqGetUserMediaMessageStatisticsByMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUserMediaMessageStatisticsByMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUserMediaMessageStatisticsByMedia) ProtoMessage() {}

func (x *ReqGetUserMediaMessageStatisticsByMedia) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUserMediaMessageStatisticsByMedia.ProtoReflect.Descriptor instead.
func (*ReqGetUserMediaMessageStatisticsByMedia) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{84}
}

func (x *ReqGetUserMediaMessageStatisticsByMedia) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetUserMediaMessageStatisticsByMedia) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqGetUserMediaMessageStatisticsByMedia) GetWithType() int32 {
	if x != nil {
		return x.WithType
	}
	return 0
}

func (x *ReqGetUserMediaMessageStatisticsByMedia) GetMedia() int32 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *ReqGetUserMediaMessageStatisticsByMedia) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetUserMediaMessageStatisticsByMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMediaMessageStatistics *UserMediaMessageStatistics `protobuf:"bytes,1,opt,name=UserMediaMessageStatistics,proto3" json:"UserMediaMessageStatistics,omitempty"` // 媒体消息统计
}

func (x *ReplyGetUserMediaMessageStatisticsByMedia) Reset() {
	*x = ReplyGetUserMediaMessageStatisticsByMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetUserMediaMessageStatisticsByMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetUserMediaMessageStatisticsByMedia) ProtoMessage() {}

func (x *ReplyGetUserMediaMessageStatisticsByMedia) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetUserMediaMessageStatisticsByMedia.ProtoReflect.Descriptor instead.
func (*ReplyGetUserMediaMessageStatisticsByMedia) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{85}
}

func (x *ReplyGetUserMediaMessageStatisticsByMedia) GetUserMediaMessageStatistics() *UserMediaMessageStatistics {
	if x != nil {
		return x.UserMediaMessageStatistics
	}
	return nil
}

type ReplyGetMessageHistoryPageByMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsgs []*UserMsg `protobuf:"bytes,1,rep,name=UserMsgs,proto3" json:"UserMsgs,omitempty"` // 消息集合
}

func (x *ReplyGetMessageHistoryPageByMedia) Reset() {
	*x = ReplyGetMessageHistoryPageByMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetMessageHistoryPageByMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetMessageHistoryPageByMedia) ProtoMessage() {}

func (x *ReplyGetMessageHistoryPageByMedia) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetMessageHistoryPageByMedia.ProtoReflect.Descriptor instead.
func (*ReplyGetMessageHistoryPageByMedia) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{86}
}

func (x *ReplyGetMessageHistoryPageByMedia) GetUserMsgs() []*UserMsg {
	if x != nil {
		return x.UserMsgs
	}
	return nil
}

type ReqInsertOrUpdateUserDialogAndMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDialogAndMsg *UserDialogAndMsg `protobuf:"bytes,1,opt,name=UserDialogAndMsg,proto3" json:"UserDialogAndMsg,omitempty"` // 对话框信息
	UpdateScore      bool              `protobuf:"varint,2,opt,name=UpdateScore,proto3" json:"UpdateScore,omitempty"`          // 是否更新排名
	Debug            *pbcomm.Debug     `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`                       // 日志前缀信息
}

func (x *ReqInsertOrUpdateUserDialogAndMsg) Reset() {
	*x = ReqInsertOrUpdateUserDialogAndMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqInsertOrUpdateUserDialogAndMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqInsertOrUpdateUserDialogAndMsg) ProtoMessage() {}

func (x *ReqInsertOrUpdateUserDialogAndMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqInsertOrUpdateUserDialogAndMsg.ProtoReflect.Descriptor instead.
func (*ReqInsertOrUpdateUserDialogAndMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{87}
}

func (x *ReqInsertOrUpdateUserDialogAndMsg) GetUserDialogAndMsg() *UserDialogAndMsg {
	if x != nil {
		return x.UserDialogAndMsg
	}
	return nil
}

func (x *ReqInsertOrUpdateUserDialogAndMsg) GetUpdateScore() bool {
	if x != nil {
		return x.UpdateScore
	}
	return false
}

func (x *ReqInsertOrUpdateUserDialogAndMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqUpdateSelfDialogAndMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDialogAndMsg *UserDialogAndMsg `protobuf:"bytes,1,opt,name=UserDialogAndMsg,proto3" json:"UserDialogAndMsg,omitempty"` // 对话框信息
	Debug            *pbcomm.Debug     `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`                       // 日志前缀信息
}

func (x *ReqUpdateSelfDialogAndMsg) Reset() {
	*x = ReqUpdateSelfDialogAndMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateSelfDialogAndMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateSelfDialogAndMsg) ProtoMessage() {}

func (x *ReqUpdateSelfDialogAndMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateSelfDialogAndMsg.ProtoReflect.Descriptor instead.
func (*ReqUpdateSelfDialogAndMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{88}
}

func (x *ReqUpdateSelfDialogAndMsg) GetUserDialogAndMsg() *UserDialogAndMsg {
	if x != nil {
		return x.UserDialogAndMsg
	}
	return nil
}

func (x *ReqUpdateSelfDialogAndMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqUpdateDialogAddUnread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`           // 用户ID
	WithId      int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`           // 消息接收者ID
	Type        int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`               // 对话框类型
	UnreadDelta int32         `protobuf:"varint,4,opt,name=UnreadDelta,proto3" json:"UnreadDelta,omitempty"` // 对话框未读增量
	Debug       *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`              // 日志前缀信息
}

func (x *ReqUpdateDialogAddUnread) Reset() {
	*x = ReqUpdateDialogAddUnread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateDialogAddUnread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateDialogAddUnread) ProtoMessage() {}

func (x *ReqUpdateDialogAddUnread) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateDialogAddUnread.ProtoReflect.Descriptor instead.
func (*ReqUpdateDialogAddUnread) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{89}
}

func (x *ReqUpdateDialogAddUnread) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUpdateDialogAddUnread) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqUpdateDialogAddUnread) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReqUpdateDialogAddUnread) GetUnreadDelta() int32 {
	if x != nil {
		return x.UnreadDelta
	}
	return 0
}

func (x *ReqUpdateDialogAddUnread) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUpdateDialogAddUnread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode int32 `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"` // 错误码值 正确为0 dialog不存在是1
}

func (x *ReplyUpdateDialogAddUnread) Reset() {
	*x = ReplyUpdateDialogAddUnread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUpdateDialogAddUnread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUpdateDialogAddUnread) ProtoMessage() {}

func (x *ReplyUpdateDialogAddUnread) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUpdateDialogAddUnread.ProtoReflect.Descriptor instead.
func (*ReplyUpdateDialogAddUnread) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{90}
}

func (x *ReplyUpdateDialogAddUnread) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type ReqUpdateDialogClearDraft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithIdType int32         `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqUpdateDialogClearDraft) Reset() {
	*x = ReqUpdateDialogClearDraft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateDialogClearDraft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateDialogClearDraft) ProtoMessage() {}

func (x *ReqUpdateDialogClearDraft) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateDialogClearDraft.ProtoReflect.Descriptor instead.
func (*ReqUpdateDialogClearDraft) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{91}
}

func (x *ReqUpdateDialogClearDraft) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUpdateDialogClearDraft) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqUpdateDialogClearDraft) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *ReqUpdateDialogClearDraft) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUpdateDialogClearDraft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplyUpdateDialogClearDraft) Reset() {
	*x = ReplyUpdateDialogClearDraft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUpdateDialogClearDraft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUpdateDialogClearDraft) ProtoMessage() {}

func (x *ReplyUpdateDialogClearDraft) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUpdateDialogClearDraft.ProtoReflect.Descriptor instead.
func (*ReplyUpdateDialogClearDraft) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{92}
}

type ReqGetUserDialogAllUnread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqGetUserDialogAllUnread) Reset() {
	*x = ReqGetUserDialogAllUnread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUserDialogAllUnread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUserDialogAllUnread) ProtoMessage() {}

func (x *ReqGetUserDialogAllUnread) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUserDialogAllUnread.ProtoReflect.Descriptor instead.
func (*ReqGetUserDialogAllUnread) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{93}
}

func (x *ReqGetUserDialogAllUnread) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetUserDialogAllUnread) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetUserDialogAllUnread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnreadCount int32 `protobuf:"varint,1,opt,name=UnreadCount,proto3" json:"UnreadCount,omitempty"`
}

func (x *ReplyGetUserDialogAllUnread) Reset() {
	*x = ReplyGetUserDialogAllUnread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetUserDialogAllUnread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetUserDialogAllUnread) ProtoMessage() {}

func (x *ReplyGetUserDialogAllUnread) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetUserDialogAllUnread.ProtoReflect.Descriptor instead.
func (*ReplyGetUserDialogAllUnread) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{94}
}

func (x *ReplyGetUserDialogAllUnread) GetUnreadCount() int32 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

type ReqUpdateReceDialogAndMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDialogAndMsg *UserDialogAndMsg `protobuf:"bytes,1,opt,name=UserDialogAndMsg,proto3" json:"UserDialogAndMsg,omitempty"` // 对话框信息
	Debug            *pbcomm.Debug     `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`                       // 日志前缀信息
}

func (x *ReqUpdateReceDialogAndMsg) Reset() {
	*x = ReqUpdateReceDialogAndMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateReceDialogAndMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateReceDialogAndMsg) ProtoMessage() {}

func (x *ReqUpdateReceDialogAndMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateReceDialogAndMsg.ProtoReflect.Descriptor instead.
func (*ReqUpdateReceDialogAndMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{95}
}

func (x *ReqUpdateReceDialogAndMsg) GetUserDialogAndMsg() *UserDialogAndMsg {
	if x != nil {
		return x.UserDialogAndMsg
	}
	return nil
}

func (x *ReqUpdateReceDialogAndMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetDialogAndMsgByUserIdAndWithIdAndType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"` // 消息交互方ID
	Type   int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`     // 对话框类型
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqGetDialogAndMsgByUserIdAndWithIdAndType) Reset() {
	*x = ReqGetDialogAndMsgByUserIdAndWithIdAndType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetDialogAndMsgByUserIdAndWithIdAndType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetDialogAndMsgByUserIdAndWithIdAndType) ProtoMessage() {}

func (x *ReqGetDialogAndMsgByUserIdAndWithIdAndType) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetDialogAndMsgByUserIdAndWithIdAndType.ProtoReflect.Descriptor instead.
func (*ReqGetDialogAndMsgByUserIdAndWithIdAndType) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{96}
}

func (x *ReqGetDialogAndMsgByUserIdAndWithIdAndType) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetDialogAndMsgByUserIdAndWithIdAndType) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqGetDialogAndMsgByUserIdAndWithIdAndType) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReqGetDialogAndMsgByUserIdAndWithIdAndType) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetDialogAndMsgsByUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqGetDialogAndMsgsByUserId) Reset() {
	*x = ReqGetDialogAndMsgsByUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetDialogAndMsgsByUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetDialogAndMsgsByUserId) ProtoMessage() {}

func (x *ReqGetDialogAndMsgsByUserId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetDialogAndMsgsByUserId.ProtoReflect.Descriptor instead.
func (*ReqGetDialogAndMsgsByUserId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{97}
}

func (x *ReqGetDialogAndMsgsByUserId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetDialogAndMsgsByUserId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetDialogAndMsgsByPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 用户ID
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`         // 消息交互方
	WithIdType int32         `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"` // 对话框类型
	Limit      int32         `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`           // 查询条数
	FolderId   int32         `protobuf:"varint,5,opt,name=FolderId,proto3" json:"FolderId,omitempty"`     // 归档id
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug,proto3" json:"Debug,omitempty"`            // 日志前缀信息
}

func (x *ReqGetDialogAndMsgsByPage) Reset() {
	*x = ReqGetDialogAndMsgsByPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetDialogAndMsgsByPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetDialogAndMsgsByPage) ProtoMessage() {}

func (x *ReqGetDialogAndMsgsByPage) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetDialogAndMsgsByPage.ProtoReflect.Descriptor instead.
func (*ReqGetDialogAndMsgsByPage) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{98}
}

func (x *ReqGetDialogAndMsgsByPage) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetDialogAndMsgsByPage) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqGetDialogAndMsgsByPage) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *ReqGetDialogAndMsgsByPage) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetDialogAndMsgsByPage) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *ReqGetDialogAndMsgsByPage) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqReadSelfDialogAndMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"` // 消息交互方ID
	Type   int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`     // 对话框类型
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqReadSelfDialogAndMsg) Reset() {
	*x = ReqReadSelfDialogAndMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqReadSelfDialogAndMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqReadSelfDialogAndMsg) ProtoMessage() {}

func (x *ReqReadSelfDialogAndMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqReadSelfDialogAndMsg.ProtoReflect.Descriptor instead.
func (*ReqReadSelfDialogAndMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{99}
}

func (x *ReqReadSelfDialogAndMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqReadSelfDialogAndMsg) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqReadSelfDialogAndMsg) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReqReadSelfDialogAndMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqUpdateReadinbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"` // 消息交互方ID
	Type   int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`     // 对话框类型
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqUpdateReadinbox) Reset() {
	*x = ReqUpdateReadinbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateReadinbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateReadinbox) ProtoMessage() {}

func (x *ReqUpdateReadinbox) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateReadinbox.ProtoReflect.Descriptor instead.
func (*ReqUpdateReadinbox) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{100}
}

func (x *ReqUpdateReadinbox) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUpdateReadinbox) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqUpdateReadinbox) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReqUpdateReadinbox) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqUpdateReadoutbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"` // 消息交互方ID
	Type   int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`     // 对话框类型
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqUpdateReadoutbox) Reset() {
	*x = ReqUpdateReadoutbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateReadoutbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateReadoutbox) ProtoMessage() {}

func (x *ReqUpdateReadoutbox) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateReadoutbox.ProtoReflect.Descriptor instead.
func (*ReqUpdateReadoutbox) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{101}
}

func (x *ReqUpdateReadoutbox) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUpdateReadoutbox) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqUpdateReadoutbox) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReqUpdateReadoutbox) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqDeleteUserDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 用户ID
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`         // 消息交互方ID
	Type       int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`             // 对话框类型
	DeleteDate int64         `protobuf:"varint,4,opt,name=DeleteDate,proto3" json:"DeleteDate,omitempty"` // 删除对话框的时间 与 创建dialog 的时间要一致 建议 time.Now().UnixNano()
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`            // 日志前缀信息
}

func (x *ReqDeleteUserDialog) Reset() {
	*x = ReqDeleteUserDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteUserDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteUserDialog) ProtoMessage() {}

func (x *ReqDeleteUserDialog) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteUserDialog.ProtoReflect.Descriptor instead.
func (*ReqDeleteUserDialog) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{102}
}

func (x *ReqDeleteUserDialog) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqDeleteUserDialog) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqDeleteUserDialog) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReqDeleteUserDialog) GetDeleteDate() int64 {
	if x != nil {
		return x.DeleteDate
	}
	return 0
}

func (x *ReqDeleteUserDialog) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqUpdateUserDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateUserDialogParam *UpdateUserDialogParam `protobuf:"bytes,1,opt,name=UpdateUserDialogParam,proto3" json:"UpdateUserDialogParam,omitempty"` //
	Debug                 *pbcomm.Debug          `protobuf:"bytes,11,opt,name=Debug,proto3" json:"Debug,omitempty"`                                // 日志前缀信息
}

func (x *ReqUpdateUserDialog) Reset() {
	*x = ReqUpdateUserDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateUserDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateUserDialog) ProtoMessage() {}

func (x *ReqUpdateUserDialog) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateUserDialog.ProtoReflect.Descriptor instead.
func (*ReqUpdateUserDialog) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{103}
}

func (x *ReqUpdateUserDialog) GetUpdateUserDialogParam() *UpdateUserDialogParam {
	if x != nil {
		return x.UpdateUserDialogParam
	}
	return nil
}

func (x *ReqUpdateUserDialog) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UpdateUserDialogParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`                         // 用户ID
	WithId             int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`                         // 消息交互方ID
	WithType           int32 `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`                     // 对话框类型
	TopMessage         int32 `protobuf:"varint,4,opt,name=TopMessage,proto3" json:"TopMessage,omitempty"`                 // 每次自增 如果是0 则不处理
	ReadInboxMaxId     int32 `protobuf:"varint,5,opt,name=ReadInboxMaxId,proto3" json:"ReadInboxMaxId,omitempty"`         // 每次自增 如果是0 则不处理
	ReadOutboxMaxId    int32 `protobuf:"varint,6,opt,name=ReadOutboxMaxId,proto3" json:"ReadOutboxMaxId,omitempty"`       // 每次自增 如果是0 则不处理
	UnreadMetionsCount int32 `protobuf:"varint,7,opt,name=UnreadMetionsCount,proto3" json:"UnreadMetionsCount,omitempty"` // 每次自增 如果是0 则不处理， 如果是-1 则置为0
	UnreadCount        int32 `protobuf:"varint,8,opt,name=UnreadCount,proto3" json:"UnreadCount,omitempty"`               // 每次自增 如果是0 则不处理， 如果是-1 则置为0
	Pts                int32 `protobuf:"varint,9,opt,name=Pts,proto3" json:"Pts,omitempty"`                               // pts每次自增 如果是0 则不处理
	UpdateDate         int32 `protobuf:"varint,10,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`                // 时间戳
}

func (x *UpdateUserDialogParam) Reset() {
	*x = UpdateUserDialogParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserDialogParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserDialogParam) ProtoMessage() {}

func (x *UpdateUserDialogParam) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserDialogParam.ProtoReflect.Descriptor instead.
func (*UpdateUserDialogParam) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{104}
}

func (x *UpdateUserDialogParam) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserDialogParam) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *UpdateUserDialogParam) GetWithType() int32 {
	if x != nil {
		return x.WithType
	}
	return 0
}

func (x *UpdateUserDialogParam) GetTopMessage() int32 {
	if x != nil {
		return x.TopMessage
	}
	return 0
}

func (x *UpdateUserDialogParam) GetReadInboxMaxId() int32 {
	if x != nil {
		return x.ReadInboxMaxId
	}
	return 0
}

func (x *UpdateUserDialogParam) GetReadOutboxMaxId() int32 {
	if x != nil {
		return x.ReadOutboxMaxId
	}
	return 0
}

func (x *UpdateUserDialogParam) GetUnreadMetionsCount() int32 {
	if x != nil {
		return x.UnreadMetionsCount
	}
	return 0
}

func (x *UpdateUserDialogParam) GetUnreadCount() int32 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

func (x *UpdateUserDialogParam) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *UpdateUserDialogParam) GetUpdateDate() int32 {
	if x != nil {
		return x.UpdateDate
	}
	return 0
}

type ReqUpdateUserDialogUpdateDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 用户ID
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`         // 消息交互方ID
	WithType   int32         `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`     // 对话框类型
	UpdateDate int32         `protobuf:"varint,4,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"` // 更新对话框updateate值
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`            // 日志前缀信息
}

func (x *ReqUpdateUserDialogUpdateDate) Reset() {
	*x = ReqUpdateUserDialogUpdateDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateUserDialogUpdateDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateUserDialogUpdateDate) ProtoMessage() {}

func (x *ReqUpdateUserDialogUpdateDate) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateUserDialogUpdateDate.ProtoReflect.Descriptor instead.
func (*ReqUpdateUserDialogUpdateDate) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{105}
}

func (x *ReqUpdateUserDialogUpdateDate) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUpdateUserDialogUpdateDate) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqUpdateUserDialogUpdateDate) GetWithType() int32 {
	if x != nil {
		return x.WithType
	}
	return 0
}

func (x *ReqUpdateUserDialogUpdateDate) GetUpdateDate() int32 {
	if x != nil {
		return x.UpdateDate
	}
	return 0
}

func (x *ReqUpdateUserDialogUpdateDate) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqUpdateDialogToPinged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 用户ID
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`         // 消息交互方
	WithIdType int32         `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"` // 对话款类型
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`            // 日志前缀信息
}

func (x *ReqUpdateDialogToPinged) Reset() {
	*x = ReqUpdateDialogToPinged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateDialogToPinged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateDialogToPinged) ProtoMessage() {}

func (x *ReqUpdateDialogToPinged) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateDialogToPinged.ProtoReflect.Descriptor instead.
func (*ReqUpdateDialogToPinged) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{106}
}

func (x *ReqUpdateDialogToPinged) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUpdateDialogToPinged) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqUpdateDialogToPinged) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *ReqUpdateDialogToPinged) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqUpdateDialogToFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`                     // 用户ID
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`                     // 消息交互方
	WithIdType int32         `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`             // 对话款类型
	FolderId   int32         `protobuf:"varint,4,opt,name=Folder_id,json=FolderId,proto3" json:"Folder_id,omitempty"` // 归档序列号
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`                        // 日志前缀信息
}

func (x *ReqUpdateDialogToFolder) Reset() {
	*x = ReqUpdateDialogToFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateDialogToFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateDialogToFolder) ProtoMessage() {}

func (x *ReqUpdateDialogToFolder) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateDialogToFolder.ProtoReflect.Descriptor instead.
func (*ReqUpdateDialogToFolder) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{107}
}

func (x *ReqUpdateDialogToFolder) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUpdateDialogToFolder) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqUpdateDialogToFolder) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *ReqUpdateDialogToFolder) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *ReqUpdateDialogToFolder) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqCancelPingedDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 用户ID
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`         // 消息交互方
	WithIdType int32         `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"` // 对话款类型
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`            // 日志前缀信息
}

func (x *ReqCancelPingedDialog) Reset() {
	*x = ReqCancelPingedDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCancelPingedDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCancelPingedDialog) ProtoMessage() {}

func (x *ReqCancelPingedDialog) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCancelPingedDialog.ProtoReflect.Descriptor instead.
func (*ReqCancelPingedDialog) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{108}
}

func (x *ReqCancelPingedDialog) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqCancelPingedDialog) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqCancelPingedDialog) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *ReqCancelPingedDialog) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetPingedDialogAndMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`     // 用户ID
	FolderId int32         `protobuf:"varint,2,opt,name=FolderId,proto3" json:"FolderId,omitempty"` // 归档
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`        // 日志前缀信息
}

func (x *ReqGetPingedDialogAndMsg) Reset() {
	*x = ReqGetPingedDialogAndMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetPingedDialogAndMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetPingedDialogAndMsg) ProtoMessage() {}

func (x *ReqGetPingedDialogAndMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetPingedDialogAndMsg.ProtoReflect.Descriptor instead.
func (*ReqGetPingedDialogAndMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{109}
}

func (x *ReqGetPingedDialogAndMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetPingedDialogAndMsg) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *ReqGetPingedDialogAndMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetLastLimitDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	Limit  int32         `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`   // 查询条数
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqGetLastLimitDialog) Reset() {
	*x = ReqGetLastLimitDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetLastLimitDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetLastLimitDialog) ProtoMessage() {}

func (x *ReqGetLastLimitDialog) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetLastLimitDialog.ProtoReflect.Descriptor instead.
func (*ReqGetLastLimitDialog) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{110}
}

func (x *ReqGetLastLimitDialog) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetLastLimitDialog) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetLastLimitDialog) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type UserRating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`  // 联系人用户ID
	Rating float64 `protobuf:"fixed64,2,opt,name=Rating,proto3" json:"Rating,omitempty"` // 联系人亲密度
}

func (x *UserRating) Reset() {
	*x = UserRating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRating) ProtoMessage() {}

func (x *UserRating) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRating.ProtoReflect.Descriptor instead.
func (*UserRating) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{111}
}

func (x *UserRating) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserRating) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

type ReplyGetLastLimitDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserRatingList []*UserRating `protobuf:"bytes,1,rep,name=UserRatingList,proto3" json:"UserRatingList,omitempty"` // 返回对话框切片
}

func (x *ReplyGetLastLimitDialog) Reset() {
	*x = ReplyGetLastLimitDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetLastLimitDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetLastLimitDialog) ProtoMessage() {}

func (x *ReplyGetLastLimitDialog) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetLastLimitDialog.ProtoReflect.Descriptor instead.
func (*ReplyGetLastLimitDialog) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{112}
}

func (x *ReplyGetLastLimitDialog) GetUserRatingList() []*UserRating {
	if x != nil {
		return x.UserRatingList
	}
	return nil
}

type ReqUpdateReadInBoxMaxId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"` // 消息交互方ID
	Type   int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`     // 对话框类型
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqUpdateReadInBoxMaxId) Reset() {
	*x = ReqUpdateReadInBoxMaxId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateReadInBoxMaxId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateReadInBoxMaxId) ProtoMessage() {}

func (x *ReqUpdateReadInBoxMaxId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateReadInBoxMaxId.ProtoReflect.Descriptor instead.
func (*ReqUpdateReadInBoxMaxId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{113}
}

func (x *ReqUpdateReadInBoxMaxId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUpdateReadInBoxMaxId) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqUpdateReadInBoxMaxId) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReqUpdateReadInBoxMaxId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqUpdateReadOutBoxMaxId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"` // 消息交互方ID
	Type   int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`     // 对话框类型
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqUpdateReadOutBoxMaxId) Reset() {
	*x = ReqUpdateReadOutBoxMaxId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateReadOutBoxMaxId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateReadOutBoxMaxId) ProtoMessage() {}

func (x *ReqUpdateReadOutBoxMaxId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateReadOutBoxMaxId.ProtoReflect.Descriptor instead.
func (*ReqUpdateReadOutBoxMaxId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{114}
}

func (x *ReqUpdateReadOutBoxMaxId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUpdateReadOutBoxMaxId) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqUpdateReadOutBoxMaxId) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReqUpdateReadOutBoxMaxId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqUpdateChannelReadinbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"` // 消息交互方ID
	Type   int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`     // 对话框类型
	ReadIn int32         `protobuf:"varint,4,opt,name=ReadIn,proto3" json:"ReadIn,omitempty"` // 当前已读消息ID
	Debug  *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqUpdateChannelReadinbox) Reset() {
	*x = ReqUpdateChannelReadinbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateChannelReadinbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateChannelReadinbox) ProtoMessage() {}

func (x *ReqUpdateChannelReadinbox) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateChannelReadinbox.ProtoReflect.Descriptor instead.
func (*ReqUpdateChannelReadinbox) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{115}
}

func (x *ReqUpdateChannelReadinbox) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUpdateChannelReadinbox) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqUpdateChannelReadinbox) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReqUpdateChannelReadinbox) GetReadIn() int32 {
	if x != nil {
		return x.ReadIn
	}
	return 0
}

func (x *ReqUpdateChannelReadinbox) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqUpdateChannelReadoutbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`   // 用户ID
	WithId  int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`   // 消息交互方ID
	Type    int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`       // 对话框类型
	ReadOut int32         `protobuf:"varint,4,opt,name=ReadOut,proto3" json:"ReadOut,omitempty"` // 当前双勾消息ID
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`      // 日志前缀信息
}

func (x *ReqUpdateChannelReadoutbox) Reset() {
	*x = ReqUpdateChannelReadoutbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateChannelReadoutbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateChannelReadoutbox) ProtoMessage() {}

func (x *ReqUpdateChannelReadoutbox) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateChannelReadoutbox.ProtoReflect.Descriptor instead.
func (*ReqUpdateChannelReadoutbox) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{116}
}

func (x *ReqUpdateChannelReadoutbox) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUpdateChannelReadoutbox) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqUpdateChannelReadoutbox) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ReqUpdateChannelReadoutbox) GetReadOut() int32 {
	if x != nil {
		return x.ReadOut
	}
	return 0
}

func (x *ReqUpdateChannelReadoutbox) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqDeleteUserDialogByChannelId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithId     int32         `protobuf:"varint,1,opt,name=WithId,proto3" json:"WithId,omitempty"`         // 聊天对话ID
	WithIdType int32         `protobuf:"varint,2,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"` // 对话框类型
	DeleteDate int64         `protobuf:"varint,3,opt,name=DeleteDate,proto3" json:"DeleteDate,omitempty"` // 删除消息时间
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`            // 日志前缀信息
}

func (x *ReqDeleteUserDialogByChannelId) Reset() {
	*x = ReqDeleteUserDialogByChannelId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteUserDialogByChannelId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteUserDialogByChannelId) ProtoMessage() {}

func (x *ReqDeleteUserDialogByChannelId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteUserDialogByChannelId.ProtoReflect.Descriptor instead.
func (*ReqDeleteUserDialogByChannelId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{117}
}

func (x *ReqDeleteUserDialogByChannelId) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqDeleteUserDialogByChannelId) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *ReqDeleteUserDialogByChannelId) GetDeleteDate() int64 {
	if x != nil {
		return x.DeleteDate
	}
	return 0
}

func (x *ReqDeleteUserDialogByChannelId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetUserChannelDialogByUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqGetUserChannelDialogByUserId) Reset() {
	*x = ReqGetUserChannelDialogByUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUserChannelDialogByUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUserChannelDialogByUserId) ProtoMessage() {}

func (x *ReqGetUserChannelDialogByUserId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUserChannelDialogByUserId.ProtoReflect.Descriptor instead.
func (*ReqGetUserChannelDialogByUserId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{118}
}

func (x *ReqGetUserChannelDialogByUserId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetUserChannelDialogByUserId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqStoreUserDialogErlang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDialogErlang *UserDialogErlang `protobuf:"bytes,1,opt,name=UserDialogErlang,proto3" json:"UserDialogErlang,omitempty"` // erlang版本导入数据记录
	Debug            *pbcomm.Debug     `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`                       // 日志前缀信息
}

func (x *ReqStoreUserDialogErlang) Reset() {
	*x = ReqStoreUserDialogErlang{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStoreUserDialogErlang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStoreUserDialogErlang) ProtoMessage() {}

func (x *ReqStoreUserDialogErlang) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStoreUserDialogErlang.ProtoReflect.Descriptor instead.
func (*ReqStoreUserDialogErlang) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{119}
}

func (x *ReqStoreUserDialogErlang) GetUserDialogErlang() *UserDialogErlang {
	if x != nil {
		return x.UserDialogErlang
	}
	return nil
}

func (x *ReqStoreUserDialogErlang) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetUserDialogErlangByUserIdWithIdWithType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`     // 用户ID
	WithId   int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`     // 消息交互方ID
	WithType int32         `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"` // 对话框类型
	Debug    *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`        // 日志前缀信息
}

func (x *ReqGetUserDialogErlangByUserIdWithIdWithType) Reset() {
	*x = ReqGetUserDialogErlangByUserIdWithIdWithType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUserDialogErlangByUserIdWithIdWithType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUserDialogErlangByUserIdWithIdWithType) ProtoMessage() {}

func (x *ReqGetUserDialogErlangByUserIdWithIdWithType) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUserDialogErlangByUserIdWithIdWithType.ProtoReflect.Descriptor instead.
func (*ReqGetUserDialogErlangByUserIdWithIdWithType) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{120}
}

func (x *ReqGetUserDialogErlangByUserIdWithIdWithType) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetUserDialogErlangByUserIdWithIdWithType) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqGetUserDialogErlangByUserIdWithIdWithType) GetWithType() int32 {
	if x != nil {
		return x.WithType
	}
	return 0
}

func (x *ReqGetUserDialogErlangByUserIdWithIdWithType) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetUserDialogErlangByUserIdWithIdWithType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDialogErlang *UserDialogErlang `protobuf:"bytes,1,opt,name=UserDialogErlang,proto3" json:"UserDialogErlang,omitempty"`
}

func (x *ReplyGetUserDialogErlangByUserIdWithIdWithType) Reset() {
	*x = ReplyGetUserDialogErlangByUserIdWithIdWithType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetUserDialogErlangByUserIdWithIdWithType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetUserDialogErlangByUserIdWithIdWithType) ProtoMessage() {}

func (x *ReplyGetUserDialogErlangByUserIdWithIdWithType) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetUserDialogErlangByUserIdWithIdWithType.ProtoReflect.Descriptor instead.
func (*ReplyGetUserDialogErlangByUserIdWithIdWithType) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{121}
}

func (x *ReplyGetUserDialogErlangByUserIdWithIdWithType) GetUserDialogErlang() *UserDialogErlang {
	if x != nil {
		return x.UserDialogErlang
	}
	return nil
}

type ReqInsertRandomStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`     // 用户id
	RandomId int64         `protobuf:"varint,2,opt,name=RandomId,proto3" json:"RandomId,omitempty"` // randomid
	Handle   int32         `protobuf:"varint,3,opt,name=Handle,proto3" json:"Handle,omitempty"`     // 1: put 2: delete
	Debug    *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`        // 日志前缀信息
}

func (x *ReqInsertRandomStatus) Reset() {
	*x = ReqInsertRandomStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqInsertRandomStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqInsertRandomStatus) ProtoMessage() {}

func (x *ReqInsertRandomStatus) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqInsertRandomStatus.ProtoReflect.Descriptor instead.
func (*ReqInsertRandomStatus) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{122}
}

func (x *ReqInsertRandomStatus) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqInsertRandomStatus) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *ReqInsertRandomStatus) GetHandle() int32 {
	if x != nil {
		return x.Handle
	}
	return 0
}

func (x *ReqInsertRandomStatus) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetRandomStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyID    uint64        `protobuf:"varint,1,opt,name=KeyID,proto3" json:"KeyID,omitempty"`       // 用户id
	RandomID int64         `protobuf:"varint,2,opt,name=RandomID,proto3" json:"RandomID,omitempty"` // randomid
	Debug    *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`        // 日志前缀信息
}

func (x *ReqGetRandomStatus) Reset() {
	*x = ReqGetRandomStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetRandomStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetRandomStatus) ProtoMessage() {}

func (x *ReqGetRandomStatus) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetRandomStatus.ProtoReflect.Descriptor instead.
func (*ReqGetRandomStatus) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{123}
}

func (x *ReqGetRandomStatus) GetKeyID() uint64 {
	if x != nil {
		return x.KeyID
	}
	return 0
}

func (x *ReqGetRandomStatus) GetRandomID() int64 {
	if x != nil {
		return x.RandomID
	}
	return 0
}

func (x *ReqGetRandomStatus) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqSetSuperGroupMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date   int64         `protobuf:"varint,1,opt,name=Date,proto3" json:"Date,omitempty"`
	Msg    []byte        `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	UserId int32         `protobuf:"varint,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqSetSuperGroupMsg) Reset() {
	*x = ReqSetSuperGroupMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSetSuperGroupMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSetSuperGroupMsg) ProtoMessage() {}

func (x *ReqSetSuperGroupMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSetSuperGroupMsg.ProtoReflect.Descriptor instead.
func (*ReqSetSuperGroupMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{124}
}

func (x *ReqSetSuperGroupMsg) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ReqSetSuperGroupMsg) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *ReqSetSuperGroupMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqSetSuperGroupMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplySetSuperGroupMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplySetSuperGroupMsg) Reset() {
	*x = ReplySetSuperGroupMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplySetSuperGroupMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplySetSuperGroupMsg) ProtoMessage() {}

func (x *ReplySetSuperGroupMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplySetSuperGroupMsg.ProtoReflect.Descriptor instead.
func (*ReplySetSuperGroupMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{125}
}

type ReqGetSuperGroupMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date   int64         `protobuf:"varint,1,opt,name=Date,proto3" json:"Date,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Limit  int32         `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"` // 分页查询条数
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`  // 日志前缀信息
}

func (x *ReqGetSuperGroupMsg) Reset() {
	*x = ReqGetSuperGroupMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetSuperGroupMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetSuperGroupMsg) ProtoMessage() {}

func (x *ReqGetSuperGroupMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetSuperGroupMsg.ProtoReflect.Descriptor instead.
func (*ReqGetSuperGroupMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{126}
}

func (x *ReqGetSuperGroupMsg) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ReqGetSuperGroupMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetSuperGroupMsg) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetSuperGroupMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetSuperGroupMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    [][]byte `protobuf:"bytes,1,rep,name=Msg,proto3" json:"Msg,omitempty"`
	Date   int64    `protobuf:"varint,2,opt,name=Date,proto3" json:"Date,omitempty"`
	GetAll bool     `protobuf:"varint,3,opt,name=GetAll,proto3" json:"GetAll,omitempty"`
}

func (x *ReplyGetSuperGroupMsg) Reset() {
	*x = ReplyGetSuperGroupMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetSuperGroupMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetSuperGroupMsg) ProtoMessage() {}

func (x *ReplyGetSuperGroupMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetSuperGroupMsg.ProtoReflect.Descriptor instead.
func (*ReplyGetSuperGroupMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{127}
}

func (x *ReplyGetSuperGroupMsg) GetMsg() [][]byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *ReplyGetSuperGroupMsg) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ReplyGetSuperGroupMsg) GetGetAll() bool {
	if x != nil {
		return x.GetAll
	}
	return false
}

// Begin added by MarkLi at 2020-07-17 for 存取MsgId和SerialCode映射数据结构定义
type ReqInsertMsgIdSerialCodeMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId      int32         `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`          // 消息标识
	SerialCode string        `protobuf:"bytes,2,opt,name=SerialCode,proto3" json:"SerialCode,omitempty"` // 红包编号
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`           // 日志前缀信息
}

func (x *ReqInsertMsgIdSerialCodeMap) Reset() {
	*x = ReqInsertMsgIdSerialCodeMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqInsertMsgIdSerialCodeMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqInsertMsgIdSerialCodeMap) ProtoMessage() {}

func (x *ReqInsertMsgIdSerialCodeMap) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqInsertMsgIdSerialCodeMap.ProtoReflect.Descriptor instead.
func (*ReqInsertMsgIdSerialCodeMap) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{128}
}

func (x *ReqInsertMsgIdSerialCodeMap) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqInsertMsgIdSerialCodeMap) GetSerialCode() string {
	if x != nil {
		return x.SerialCode
	}
	return ""
}

func (x *ReqInsertMsgIdSerialCodeMap) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyInsertMsgIdSerialCodeMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId      int32     `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`          // 消息标识
	SerialCode string    `protobuf:"bytes,2,opt,name=SerialCode,proto3" json:"SerialCode,omitempty"` // 红包编号
	ReplyErr   *ReplyErr `protobuf:"bytes,3,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`     // 返回错误描述结构体
}

func (x *ReplyInsertMsgIdSerialCodeMap) Reset() {
	*x = ReplyInsertMsgIdSerialCodeMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyInsertMsgIdSerialCodeMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyInsertMsgIdSerialCodeMap) ProtoMessage() {}

func (x *ReplyInsertMsgIdSerialCodeMap) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyInsertMsgIdSerialCodeMap.ProtoReflect.Descriptor instead.
func (*ReplyInsertMsgIdSerialCodeMap) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{129}
}

func (x *ReplyInsertMsgIdSerialCodeMap) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReplyInsertMsgIdSerialCodeMap) GetSerialCode() string {
	if x != nil {
		return x.SerialCode
	}
	return ""
}

func (x *ReplyInsertMsgIdSerialCodeMap) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetMsgIdSerialCodeMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialCode string        `protobuf:"bytes,1,opt,name=SerialCode,proto3" json:"SerialCode,omitempty"` // 红包编号
	Debug      *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`           // 日志前缀信息
}

func (x *ReqGetMsgIdSerialCodeMap) Reset() {
	*x = ReqGetMsgIdSerialCodeMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetMsgIdSerialCodeMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetMsgIdSerialCodeMap) ProtoMessage() {}

func (x *ReqGetMsgIdSerialCodeMap) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetMsgIdSerialCodeMap.ProtoReflect.Descriptor instead.
func (*ReqGetMsgIdSerialCodeMap) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{130}
}

func (x *ReqGetMsgIdSerialCodeMap) GetSerialCode() string {
	if x != nil {
		return x.SerialCode
	}
	return ""
}

func (x *ReqGetMsgIdSerialCodeMap) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetMsgIdSerialCodeMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId      int32     `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`          // 消息标识
	SerialCode string    `protobuf:"bytes,2,opt,name=SerialCode,proto3" json:"SerialCode,omitempty"` // 红包编号
	ReplyErr   *ReplyErr `protobuf:"bytes,3,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`     // 返回错误描述结构体
}

func (x *ReplyGetMsgIdSerialCodeMap) Reset() {
	*x = ReplyGetMsgIdSerialCodeMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetMsgIdSerialCodeMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetMsgIdSerialCodeMap) ProtoMessage() {}

func (x *ReplyGetMsgIdSerialCodeMap) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetMsgIdSerialCodeMap.ProtoReflect.Descriptor instead.
func (*ReplyGetMsgIdSerialCodeMap) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{131}
}

func (x *ReplyGetMsgIdSerialCodeMap) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReplyGetMsgIdSerialCodeMap) GetSerialCode() string {
	if x != nil {
		return x.SerialCode
	}
	return ""
}

func (x *ReplyGetMsgIdSerialCodeMap) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type MsgIdSerialCodeMapRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                 // 唯一键
	MsgId      int32  `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`           // 消息id
	SerialCode string `protobuf:"bytes,3,opt,name=SerialCode,proto3" json:"SerialCode,omitempty"`  // 红包编号
	InsertDate int32  `protobuf:"varint,4,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"` // 插入时间
}

func (x *MsgIdSerialCodeMapRecord) Reset() {
	*x = MsgIdSerialCodeMapRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgIdSerialCodeMapRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgIdSerialCodeMapRecord) ProtoMessage() {}

func (x *MsgIdSerialCodeMapRecord) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgIdSerialCodeMapRecord.ProtoReflect.Descriptor instead.
func (*MsgIdSerialCodeMapRecord) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{132}
}

func (x *MsgIdSerialCodeMapRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MsgIdSerialCodeMapRecord) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *MsgIdSerialCodeMapRecord) GetSerialCode() string {
	if x != nil {
		return x.SerialCode
	}
	return ""
}

func (x *MsgIdSerialCodeMapRecord) GetInsertDate() int32 {
	if x != nil {
		return x.InsertDate
	}
	return 0
}

// ==================================== channeldb rpc param reply ====================================
type ReqUpdateChannelMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqUpdateChannelMsgId) Reset() {
	*x = ReqUpdateChannelMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateChannelMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateChannelMsgId) ProtoMessage() {}

func (x *ReqUpdateChannelMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateChannelMsgId.ProtoReflect.Descriptor instead.
func (*ReqUpdateChannelMsgId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{133}
}

func (x *ReqUpdateChannelMsgId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqUpdateChannelMsgId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUpdateChannelMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId,proto3" json:"ChannelMsgId,omitempty"` // 最新的ChannelMsgId
	ReplyErr     *ReplyErr     `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`         // 返回错误描述结构体
}

func (x *ReplyUpdateChannelMsgId) Reset() {
	*x = ReplyUpdateChannelMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUpdateChannelMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUpdateChannelMsgId) ProtoMessage() {}

func (x *ReplyUpdateChannelMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUpdateChannelMsgId.ProtoReflect.Descriptor instead.
func (*ReplyUpdateChannelMsgId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{134}
}

func (x *ReplyUpdateChannelMsgId) GetChannelMsgId() *ChannelMsgId {
	if x != nil {
		return x.ChannelMsgId
	}
	return nil
}

func (x *ReplyUpdateChannelMsgId) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqUpdateChannelMsgIdAndPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqUpdateChannelMsgIdAndPts) Reset() {
	*x = ReqUpdateChannelMsgIdAndPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateChannelMsgIdAndPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateChannelMsgIdAndPts) ProtoMessage() {}

func (x *ReqUpdateChannelMsgIdAndPts) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateChannelMsgIdAndPts.ProtoReflect.Descriptor instead.
func (*ReqUpdateChannelMsgIdAndPts) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{135}
}

func (x *ReqUpdateChannelMsgIdAndPts) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqUpdateChannelMsgIdAndPts) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUpdateChannelMsgIdAndPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId,proto3" json:"ChannelMsgId,omitempty"` // 最新的ChannelMsgId
	ReplyErr     *ReplyErr     `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`         // 返回错误描述结构体
}

func (x *ReplyUpdateChannelMsgIdAndPts) Reset() {
	*x = ReplyUpdateChannelMsgIdAndPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUpdateChannelMsgIdAndPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUpdateChannelMsgIdAndPts) ProtoMessage() {}

func (x *ReplyUpdateChannelMsgIdAndPts) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUpdateChannelMsgIdAndPts.ProtoReflect.Descriptor instead.
func (*ReplyUpdateChannelMsgIdAndPts) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{136}
}

func (x *ReplyUpdateChannelMsgIdAndPts) GetChannelMsgId() *ChannelMsgId {
	if x != nil {
		return x.ChannelMsgId
	}
	return nil
}

func (x *ReplyUpdateChannelMsgIdAndPts) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqSetChannelMsgIdAndPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId,proto3" json:"ChannelMsgId,omitempty"` // ChannelMsgId
	Debug        *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`               // 日志前缀信息
}

func (x *ReqSetChannelMsgIdAndPts) Reset() {
	*x = ReqSetChannelMsgIdAndPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSetChannelMsgIdAndPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSetChannelMsgIdAndPts) ProtoMessage() {}

func (x *ReqSetChannelMsgIdAndPts) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSetChannelMsgIdAndPts.ProtoReflect.Descriptor instead.
func (*ReqSetChannelMsgIdAndPts) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{137}
}

func (x *ReqSetChannelMsgIdAndPts) GetChannelMsgId() *ChannelMsgId {
	if x != nil {
		return x.ChannelMsgId
	}
	return nil
}

func (x *ReqSetChannelMsgIdAndPts) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplySetChannelMsgIdAndPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplySetChannelMsgIdAndPts) Reset() {
	*x = ReplySetChannelMsgIdAndPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplySetChannelMsgIdAndPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplySetChannelMsgIdAndPts) ProtoMessage() {}

func (x *ReplySetChannelMsgIdAndPts) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplySetChannelMsgIdAndPts.ProtoReflect.Descriptor instead.
func (*ReplySetChannelMsgIdAndPts) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{138}
}

func (x *ReplySetChannelMsgIdAndPts) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqUpdateChannelPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqUpdateChannelPts) Reset() {
	*x = ReqUpdateChannelPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateChannelPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateChannelPts) ProtoMessage() {}

func (x *ReqUpdateChannelPts) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateChannelPts.ProtoReflect.Descriptor instead.
func (*ReqUpdateChannelPts) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{139}
}

func (x *ReqUpdateChannelPts) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqUpdateChannelPts) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUpdateChannelPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId,proto3" json:"ChannelMsgId,omitempty"` // 最新的ChannelMsgId
	ReplyErr     *ReplyErr     `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`         // 返回错误描述结构体
}

func (x *ReplyUpdateChannelPts) Reset() {
	*x = ReplyUpdateChannelPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUpdateChannelPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUpdateChannelPts) ProtoMessage() {}

func (x *ReplyUpdateChannelPts) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUpdateChannelPts.ProtoReflect.Descriptor instead.
func (*ReplyUpdateChannelPts) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{140}
}

func (x *ReplyUpdateChannelPts) GetChannelMsgId() *ChannelMsgId {
	if x != nil {
		return x.ChannelMsgId
	}
	return nil
}

func (x *ReplyUpdateChannelPts) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqUpdateChannelPtsWithNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Number    int32         `protobuf:"varint,2,opt,name=Number,proto3" json:"Number,omitempty"`       // 自增PTS基数
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqUpdateChannelPtsWithNum) Reset() {
	*x = ReqUpdateChannelPtsWithNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateChannelPtsWithNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateChannelPtsWithNum) ProtoMessage() {}

func (x *ReqUpdateChannelPtsWithNum) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateChannelPtsWithNum.ProtoReflect.Descriptor instead.
func (*ReqUpdateChannelPtsWithNum) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{141}
}

func (x *ReqUpdateChannelPtsWithNum) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqUpdateChannelPtsWithNum) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ReqUpdateChannelPtsWithNum) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUpdateChannelPtsWithNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId,proto3" json:"ChannelMsgId,omitempty"` // 最新的ChannelMsgId
	ReplyErr     *ReplyErr     `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`         // 返回错误描述结构体
}

func (x *ReplyUpdateChannelPtsWithNum) Reset() {
	*x = ReplyUpdateChannelPtsWithNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUpdateChannelPtsWithNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUpdateChannelPtsWithNum) ProtoMessage() {}

func (x *ReplyUpdateChannelPtsWithNum) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUpdateChannelPtsWithNum.ProtoReflect.Descriptor instead.
func (*ReplyUpdateChannelPtsWithNum) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{142}
}

func (x *ReplyUpdateChannelPtsWithNum) GetChannelMsgId() *ChannelMsgId {
	if x != nil {
		return x.ChannelMsgId
	}
	return nil
}

func (x *ReplyUpdateChannelPtsWithNum) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetChannelMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqGetChannelMsgId) Reset() {
	*x = ReqGetChannelMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMsgId) ProtoMessage() {}

func (x *ReqGetChannelMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMsgId.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMsgId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{143}
}

func (x *ReqGetChannelMsgId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelMsgId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId,proto3" json:"ChannelMsgId,omitempty"` // 最新的ChannelMsgId
	ReplyErr     *ReplyErr     `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`         // 返回错误描述结构体
}

func (x *ReplyGetChannelMsgId) Reset() {
	*x = ReplyGetChannelMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelMsgId) ProtoMessage() {}

func (x *ReplyGetChannelMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelMsgId.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelMsgId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{144}
}

func (x *ReplyGetChannelMsgId) GetChannelMsgId() *ChannelMsgId {
	if x != nil {
		return x.ChannelMsgId
	}
	return nil
}

func (x *ReplyGetChannelMsgId) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqStoreChannelPtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelPtsHandle *ChannelPtsHandle `protobuf:"bytes,1,opt,name=ChannelPtsHandle,proto3" json:"ChannelPtsHandle,omitempty"` // ptsHandle 二进制信息
	Debug            *pbcomm.Debug     `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`                       // 日志前缀信息
}

func (x *ReqStoreChannelPtsHandle) Reset() {
	*x = ReqStoreChannelPtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStoreChannelPtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStoreChannelPtsHandle) ProtoMessage() {}

func (x *ReqStoreChannelPtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStoreChannelPtsHandle.ProtoReflect.Descriptor instead.
func (*ReqStoreChannelPtsHandle) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{145}
}

func (x *ReqStoreChannelPtsHandle) GetChannelPtsHandle() *ChannelPtsHandle {
	if x != nil {
		return x.ChannelPtsHandle
	}
	return nil
}

func (x *ReqStoreChannelPtsHandle) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqBatchStoreChannelPtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelPtsHandles []*ChannelPtsHandle `protobuf:"bytes,1,rep,name=ChannelPtsHandles,proto3" json:"ChannelPtsHandles,omitempty"`
	Debug             *pbcomm.Debug       `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqBatchStoreChannelPtsHandle) Reset() {
	*x = ReqBatchStoreChannelPtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBatchStoreChannelPtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBatchStoreChannelPtsHandle) ProtoMessage() {}

func (x *ReqBatchStoreChannelPtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBatchStoreChannelPtsHandle.ProtoReflect.Descriptor instead.
func (*ReqBatchStoreChannelPtsHandle) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{146}
}

func (x *ReqBatchStoreChannelPtsHandle) GetChannelPtsHandles() []*ChannelPtsHandle {
	if x != nil {
		return x.ChannelPtsHandles
	}
	return nil
}

func (x *ReqBatchStoreChannelPtsHandle) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyErr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode uint32 `protobuf:"varint,1,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"` // 錯誤碼 200 成功 201-300 緩存錯誤 301-400 database錯誤
	ErrMsg  string `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`    // 錯誤信息描述
}

func (x *ReplyErr) Reset() {
	*x = ReplyErr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyErr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyErr) ProtoMessage() {}

func (x *ReplyErr) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyErr.ProtoReflect.Descriptor instead.
func (*ReplyErr) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{147}
}

func (x *ReplyErr) GetErrCode() uint32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *ReplyErr) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type ReqGetChannelDiffByPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Pts       int32         `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`             // pts
	Limit     int32         `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`         // 查询条数
	MinId     int32         `protobuf:"varint,4,opt,name=MinId,proto3" json:"MinId,omitempty"`         // 未使用字段
	MaxId     int32         `protobuf:"varint,5,opt,name=MaxId,proto3" json:"MaxId,omitempty"`         // 未使用字段
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqGetChannelDiffByPts) Reset() {
	*x = ReqGetChannelDiffByPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelDiffByPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelDiffByPts) ProtoMessage() {}

func (x *ReqGetChannelDiffByPts) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelDiffByPts.ProtoReflect.Descriptor instead.
func (*ReqGetChannelDiffByPts) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{148}
}

func (x *ReqGetChannelDiffByPts) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelDiffByPts) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReqGetChannelDiffByPts) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetChannelDiffByPts) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *ReqGetChannelDiffByPts) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *ReqGetChannelDiffByPts) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelDiffByPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFianl  bool      `protobuf:"varint,1,opt,name=IsFianl,proto3" json:"IsFianl,omitempty"`   // 是否查询完
	ToLong   bool      `protobuf:"varint,2,opt,name=ToLong,proto3" json:"ToLong,omitempty"`     // 是否太长， 缓存里面没有则是太长
	Pts      int32     `protobuf:"varint,3,opt,name=Pts,proto3" json:"Pts,omitempty"`           // 消息二进制中最大PTS
	TopMsgId int32     `protobuf:"varint,4,opt,name=TopMsgId,proto3" json:"TopMsgId,omitempty"` // 当前超级群中用到的最大的MsgId
	Msgs     [][]byte  `protobuf:"bytes,5,rep,name=Msgs,proto3" json:"Msgs,omitempty"`          // 消息二进制集合
	ReplyErr *ReplyErr `protobuf:"bytes,6,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`  // 返回错误描述结构体
}

func (x *ReplyGetChannelDiffByPts) Reset() {
	*x = ReplyGetChannelDiffByPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelDiffByPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelDiffByPts) ProtoMessage() {}

func (x *ReplyGetChannelDiffByPts) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelDiffByPts.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelDiffByPts) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{149}
}

func (x *ReplyGetChannelDiffByPts) GetIsFianl() bool {
	if x != nil {
		return x.IsFianl
	}
	return false
}

func (x *ReplyGetChannelDiffByPts) GetToLong() bool {
	if x != nil {
		return x.ToLong
	}
	return false
}

func (x *ReplyGetChannelDiffByPts) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReplyGetChannelDiffByPts) GetTopMsgId() int32 {
	if x != nil {
		return x.TopMsgId
	}
	return 0
}

func (x *ReplyGetChannelDiffByPts) GetMsgs() [][]byte {
	if x != nil {
		return x.Msgs
	}
	return nil
}

func (x *ReplyGetChannelDiffByPts) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetUserDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 消息发送者ID
	Date   int64         `protobuf:"varint,2,opt,name=Date,proto3" json:"Date,omitempty"`     // 时间 time.Now().Unix()
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqGetUserDiff) Reset() {
	*x = ReqGetUserDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetUserDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetUserDiff) ProtoMessage() {}

func (x *ReqGetUserDiff) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetUserDiff.ProtoReflect.Descriptor instead.
func (*ReqGetUserDiff) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{150}
}

func (x *ReqGetUserDiff) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetUserDiff) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ReqGetUserDiff) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ChannelPtsDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelID int32 `protobuf:"varint,1,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Pts       int32 `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`
}

func (x *ChannelPtsDiff) Reset() {
	*x = ChannelPtsDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPtsDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPtsDiff) ProtoMessage() {}

func (x *ChannelPtsDiff) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPtsDiff.ProtoReflect.Descriptor instead.
func (*ChannelPtsDiff) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{151}
}

func (x *ChannelPtsDiff) GetChannelID() int32 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *ChannelPtsDiff) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

type ReplyGetUserDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelPtsDiffs []*ChannelPtsDiff `protobuf:"bytes,1,rep,name=ChannelPtsDiffs,proto3" json:"ChannelPtsDiffs,omitempty"` // 用户有那些超级群
	ReplyErr        *ReplyErr         `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`               // 返回错误描述结构体
}

func (x *ReplyGetUserDiff) Reset() {
	*x = ReplyGetUserDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetUserDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetUserDiff) ProtoMessage() {}

func (x *ReplyGetUserDiff) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetUserDiff.ProtoReflect.Descriptor instead.
func (*ReplyGetUserDiff) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{152}
}

func (x *ReplyGetUserDiff) GetChannelPtsDiffs() []*ChannelPtsDiff {
	if x != nil {
		return x.ChannelPtsDiffs
	}
	return nil
}

func (x *ReplyGetUserDiff) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetChannelLastPtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqGetChannelLastPtsHandle) Reset() {
	*x = ReqGetChannelLastPtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelLastPtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelLastPtsHandle) ProtoMessage() {}

func (x *ReqGetChannelLastPtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelLastPtsHandle.ProtoReflect.Descriptor instead.
func (*ReqGetChannelLastPtsHandle) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{153}
}

func (x *ReqGetChannelLastPtsHandle) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelLastPtsHandle) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelLastPtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelPtsHandle *ChannelPtsHandle `protobuf:"bytes,1,opt,name=ChannelPtsHandle,proto3" json:"ChannelPtsHandle,omitempty"`
	ReplyErr         *ReplyErr         `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyGetChannelLastPtsHandle) Reset() {
	*x = ReplyGetChannelLastPtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelLastPtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelLastPtsHandle) ProtoMessage() {}

func (x *ReplyGetChannelLastPtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelLastPtsHandle.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelLastPtsHandle) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{154}
}

func (x *ReplyGetChannelLastPtsHandle) GetChannelPtsHandle() *ChannelPtsHandle {
	if x != nil {
		return x.ChannelPtsHandle
	}
	return nil
}

func (x *ReplyGetChannelLastPtsHandle) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqDeleteChannelPtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Pts       int32         `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqDeleteChannelPtsHandle) Reset() {
	*x = ReqDeleteChannelPtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteChannelPtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteChannelPtsHandle) ProtoMessage() {}

func (x *ReqDeleteChannelPtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteChannelPtsHandle.ProtoReflect.Descriptor instead.
func (*ReqDeleteChannelPtsHandle) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{155}
}

func (x *ReqDeleteChannelPtsHandle) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqDeleteChannelPtsHandle) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReqDeleteChannelPtsHandle) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyDeleteChannelPtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyErr *ReplyErr `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyDeleteChannelPtsHandle) Reset() {
	*x = ReplyDeleteChannelPtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDeleteChannelPtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDeleteChannelPtsHandle) ProtoMessage() {}

func (x *ReplyDeleteChannelPtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDeleteChannelPtsHandle.ProtoReflect.Descriptor instead.
func (*ReplyDeleteChannelPtsHandle) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{156}
}

func (x *ReplyDeleteChannelPtsHandle) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqInsertOrUpdateChannelMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsg *UserMsg      `protobuf:"bytes,1,opt,name=UserMsg,proto3" json:"UserMsg,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqInsertOrUpdateChannelMsg) Reset() {
	*x = ReqInsertOrUpdateChannelMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqInsertOrUpdateChannelMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqInsertOrUpdateChannelMsg) ProtoMessage() {}

func (x *ReqInsertOrUpdateChannelMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqInsertOrUpdateChannelMsg.ProtoReflect.Descriptor instead.
func (*ReqInsertOrUpdateChannelMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{157}
}

func (x *ReqInsertOrUpdateChannelMsg) GetUserMsg() *UserMsg {
	if x != nil {
		return x.UserMsg
	}
	return nil
}

func (x *ReqInsertOrUpdateChannelMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqUpdateChannelMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsg *UserMsg      `protobuf:"bytes,1,opt,name=UserMsg,proto3" json:"UserMsg,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqUpdateChannelMsg) Reset() {
	*x = ReqUpdateChannelMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateChannelMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateChannelMsg) ProtoMessage() {}

func (x *ReqUpdateChannelMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateChannelMsg.ProtoReflect.Descriptor instead.
func (*ReqUpdateChannelMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{158}
}

func (x *ReqUpdateChannelMsg) GetUserMsg() *UserMsg {
	if x != nil {
		return x.UserMsg
	}
	return nil
}

func (x *ReqUpdateChannelMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqBatchInsertOrUpdateChannelMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsgs []*UserMsg    `protobuf:"bytes,1,rep,name=UserMsgs,proto3" json:"UserMsgs,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqBatchInsertOrUpdateChannelMsg) Reset() {
	*x = ReqBatchInsertOrUpdateChannelMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBatchInsertOrUpdateChannelMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBatchInsertOrUpdateChannelMsg) ProtoMessage() {}

func (x *ReqBatchInsertOrUpdateChannelMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBatchInsertOrUpdateChannelMsg.ProtoReflect.Descriptor instead.
func (*ReqBatchInsertOrUpdateChannelMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{159}
}

func (x *ReqBatchInsertOrUpdateChannelMsg) GetUserMsgs() []*UserMsg {
	if x != nil {
		return x.UserMsgs
	}
	return nil
}

func (x *ReqBatchInsertOrUpdateChannelMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqDeleteMsgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`  // 超级群ID
	MsgIds    []int32       `protobuf:"varint,2,rep,packed,name=MsgIds,proto3" json:"MsgIds,omitempty"` // 消息ID集合
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`           // 日志前缀信息
}

func (x *ReqDeleteMsgs) Reset() {
	*x = ReqDeleteMsgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteMsgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteMsgs) ProtoMessage() {}

func (x *ReqDeleteMsgs) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteMsgs.ProtoReflect.Descriptor instead.
func (*ReqDeleteMsgs) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{160}
}

func (x *ReqDeleteMsgs) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqDeleteMsgs) GetMsgIds() []int32 {
	if x != nil {
		return x.MsgIds
	}
	return nil
}

func (x *ReqDeleteMsgs) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyDeleteMsgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurentMsgId int32     `protobuf:"varint,1,opt,name=CurentMsgId,proto3" json:"CurentMsgId,omitempty"` // 最新的ChannelMsgId
	UpdateDate  int32     `protobuf:"varint,2,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`   // topMsg的date字段
	ReplyErr    *ReplyErr `protobuf:"bytes,3,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`        // 返回错误描述结构体
}

func (x *ReplyDeleteMsgs) Reset() {
	*x = ReplyDeleteMsgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDeleteMsgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDeleteMsgs) ProtoMessage() {}

func (x *ReplyDeleteMsgs) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDeleteMsgs.ProtoReflect.Descriptor instead.
func (*ReplyDeleteMsgs) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{161}
}

func (x *ReplyDeleteMsgs) GetCurentMsgId() int32 {
	if x != nil {
		return x.CurentMsgId
	}
	return 0
}

func (x *ReplyDeleteMsgs) GetUpdateDate() int32 {
	if x != nil {
		return x.UpdateDate
	}
	return 0
}

func (x *ReplyDeleteMsgs) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqDeleteUserHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	UserId    int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`       // 用户ID
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqDeleteUserHistory) Reset() {
	*x = ReqDeleteUserHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteUserHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteUserHistory) ProtoMessage() {}

func (x *ReqDeleteUserHistory) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteUserHistory.ProtoReflect.Descriptor instead.
func (*ReqDeleteUserHistory) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{162}
}

func (x *ReqDeleteUserHistory) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqDeleteUserHistory) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqDeleteUserHistory) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyDeleteUserHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgsAndMaxId *MsgsAndMaxId `protobuf:"bytes,1,opt,name=MsgsAndMaxId,proto3" json:"MsgsAndMaxId,omitempty"` // 最大的msgID和msgID集合
	Ptss         []int32       `protobuf:"varint,2,rep,packed,name=Ptss,proto3" json:"Ptss,omitempty"`         // 返回删除消息的pts集合
	UpdateDate   int32         `protobuf:"varint,3,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`    // topMsg的date字段
	ReplyErr     *ReplyErr     `protobuf:"bytes,4,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`         // 返回错误描述结构体
}

func (x *ReplyDeleteUserHistory) Reset() {
	*x = ReplyDeleteUserHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDeleteUserHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDeleteUserHistory) ProtoMessage() {}

func (x *ReplyDeleteUserHistory) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDeleteUserHistory.ProtoReflect.Descriptor instead.
func (*ReplyDeleteUserHistory) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{163}
}

func (x *ReplyDeleteUserHistory) GetMsgsAndMaxId() *MsgsAndMaxId {
	if x != nil {
		return x.MsgsAndMaxId
	}
	return nil
}

func (x *ReplyDeleteUserHistory) GetPtss() []int32 {
	if x != nil {
		return x.Ptss
	}
	return nil
}

func (x *ReplyDeleteUserHistory) GetUpdateDate() int32 {
	if x != nil {
		return x.UpdateDate
	}
	return 0
}

func (x *ReplyDeleteUserHistory) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqDeleteChannelMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqDeleteChannelMsg) Reset() {
	*x = ReqDeleteChannelMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteChannelMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteChannelMsg) ProtoMessage() {}

func (x *ReqDeleteChannelMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteChannelMsg.ProtoReflect.Descriptor instead.
func (*ReqDeleteChannelMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{164}
}

func (x *ReqDeleteChannelMsg) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqDeleteChannelMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqDeleteChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	MsgId     int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`         // MSGID
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqDeleteChannelMessage) Reset() {
	*x = ReqDeleteChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteChannelMessage) ProtoMessage() {}

func (x *ReqDeleteChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteChannelMessage.ProtoReflect.Descriptor instead.
func (*ReqDeleteChannelMessage) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{165}
}

func (x *ReqDeleteChannelMessage) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqDeleteChannelMessage) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqDeleteChannelMessage) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyDeleteChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32     `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`             // 用户ID
	CurrentMsgId int32     `protobuf:"varint,2,opt,name=CurrentMsgId,proto3" json:"CurrentMsgId,omitempty"` // 最新的MSGID
	UpdateDate   int32     `protobuf:"varint,3,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`     // topMsg的date字段
	ReplyErr     *ReplyErr `protobuf:"bytes,4,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`          // 返回错误描述结构体
}

func (x *ReplyDeleteChannelMessage) Reset() {
	*x = ReplyDeleteChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDeleteChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDeleteChannelMessage) ProtoMessage() {}

func (x *ReplyDeleteChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDeleteChannelMessage.ProtoReflect.Descriptor instead.
func (*ReplyDeleteChannelMessage) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{166}
}

func (x *ReplyDeleteChannelMessage) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReplyDeleteChannelMessage) GetCurrentMsgId() int32 {
	if x != nil {
		return x.CurrentMsgId
	}
	return 0
}

func (x *ReplyDeleteChannelMessage) GetUpdateDate() int32 {
	if x != nil {
		return x.UpdateDate
	}
	return 0
}

func (x *ReplyDeleteChannelMessage) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	MsgId     int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`         // MSGID
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqGetChannelMessage) Reset() {
	*x = ReqGetChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMessage) ProtoMessage() {}

func (x *ReqGetChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMessage.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMessage) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{167}
}

func (x *ReqGetChannelMessage) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelMessage) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqGetChannelMessage) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsg  *UserMsg  `protobuf:"bytes,1,opt,name=UserMsg,proto3" json:"UserMsg,omitempty"`   // 消息信息
	ReplyErr *ReplyErr `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyGetChannelMessage) Reset() {
	*x = ReplyGetChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelMessage) ProtoMessage() {}

func (x *ReplyGetChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelMessage.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelMessage) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{168}
}

func (x *ReplyGetChannelMessage) GetUserMsg() *UserMsg {
	if x != nil {
		return x.UserMsg
	}
	return nil
}

func (x *ReplyGetChannelMessage) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetChannelMsgsByMsgIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`  // 超级群ID
	MsgIds    []int32       `protobuf:"varint,2,rep,packed,name=MsgIds,proto3" json:"MsgIds,omitempty"` // MSGID
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`           // 日志前缀信息
}

func (x *ReqGetChannelMsgsByMsgIds) Reset() {
	*x = ReqGetChannelMsgsByMsgIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMsgsByMsgIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMsgsByMsgIds) ProtoMessage() {}

func (x *ReqGetChannelMsgsByMsgIds) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMsgsByMsgIds.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMsgsByMsgIds) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{169}
}

func (x *ReqGetChannelMsgsByMsgIds) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelMsgsByMsgIds) GetMsgIds() []int32 {
	if x != nil {
		return x.MsgIds
	}
	return nil
}

func (x *ReqGetChannelMsgsByMsgIds) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelMsgsByMsgIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsgListAndPts *UserMsgListAndPts `protobuf:"bytes,1,opt,name=UserMsgListAndPts,proto3" json:"UserMsgListAndPts,omitempty"` // 消息集合 当前最大pts
	ReplyErr          *ReplyErr          `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`                   // 返回错误描述结构体
}

func (x *ReplyGetChannelMsgsByMsgIds) Reset() {
	*x = ReplyGetChannelMsgsByMsgIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelMsgsByMsgIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelMsgsByMsgIds) ProtoMessage() {}

func (x *ReplyGetChannelMsgsByMsgIds) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelMsgsByMsgIds.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelMsgsByMsgIds) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{170}
}

func (x *ReplyGetChannelMsgsByMsgIds) GetUserMsgListAndPts() *UserMsgListAndPts {
	if x != nil {
		return x.UserMsgListAndPts
	}
	return nil
}

func (x *ReplyGetChannelMsgsByMsgIds) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetChannelMsgHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`   // 超级群ID
	OffsetId   int32         `protobuf:"varint,2,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`     // 消息ID， 查询小于OFfsetID limit- addoffset条 如果offsetID 等于0 则取最新的limit条
	OffsetDate int32         `protobuf:"varint,3,opt,name=OffsetDate,proto3" json:"OffsetDate,omitempty"` // 未使用字段
	AddOffset  int32         `protobuf:"varint,4,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`   // 向下取消息条数， 如果不等于0 则取 大于且等于OffsetId addOffset绝对值条
	MinId      int32         `protobuf:"varint,5,opt,name=MinId,proto3" json:"MinId,omitempty"`           // 未使用字段
	MaxId      int32         `protobuf:"varint,6,opt,name=MaxId,proto3" json:"MaxId,omitempty"`           // 未使用字段
	Limit      int32         `protobuf:"varint,7,opt,name=Limit,proto3" json:"Limit,omitempty"`           // 查询条数
	Encry      int32         `protobuf:"varint,8,opt,name=Encry,proto3" json:"Encry,omitempty"`           // 是否加密 0: 不加密 1：加密
	DeleteMark int32         `protobuf:"varint,9,opt,name=DeleteMark,proto3" json:"DeleteMark,omitempty"` // 超级群删除消息标记
	Debug      *pbcomm.Debug `protobuf:"bytes,10,opt,name=Debug,proto3" json:"Debug,omitempty"`           // 日志前缀信息
}

func (x *ReqGetChannelMsgHistory) Reset() {
	*x = ReqGetChannelMsgHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMsgHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMsgHistory) ProtoMessage() {}

func (x *ReqGetChannelMsgHistory) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMsgHistory.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMsgHistory) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{171}
}

func (x *ReqGetChannelMsgHistory) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetDeleteMark() int32 {
	if x != nil {
		return x.DeleteMark
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelMsgHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsgListAndPts *UserMsgListAndPts `protobuf:"bytes,1,opt,name=UserMsgListAndPts,proto3" json:"UserMsgListAndPts,omitempty"` // 消息集合 当前最大pts
	ReplyErr          *ReplyErr          `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`                   // 返回错误描述结构体
}

func (x *ReplyGetChannelMsgHistory) Reset() {
	*x = ReplyGetChannelMsgHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelMsgHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelMsgHistory) ProtoMessage() {}

func (x *ReplyGetChannelMsgHistory) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelMsgHistory.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelMsgHistory) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{172}
}

func (x *ReplyGetChannelMsgHistory) GetUserMsgListAndPts() *UserMsgListAndPts {
	if x != nil {
		return x.UserMsgListAndPts
	}
	return nil
}

func (x *ReplyGetChannelMsgHistory) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetChannelTopMst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqGetChannelTopMst) Reset() {
	*x = ReqGetChannelTopMst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelTopMst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelTopMst) ProtoMessage() {}

func (x *ReqGetChannelTopMst) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelTopMst.ProtoReflect.Descriptor instead.
func (*ReqGetChannelTopMst) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{173}
}

func (x *ReqGetChannelTopMst) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelTopMst) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GetChannelMediaMessageHistoryByMediaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32   `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`  // 超级群ID
	UserId    int32   `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`        // 群成员ID
	Medias    []int32 `protobuf:"varint,3,rep,packed,name=Medias,proto3" json:"Medias,omitempty"` // 媒体消息类型
	MaxId     int32   `protobuf:"varint,4,opt,name=MaxId,proto3" json:"MaxId,omitempty"`          // 最大MsgID 如果为0 则查询总数
	Limit     int32   `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`          // 分页查询条数
	Encry     int32   `protobuf:"varint,6,opt,name=encry,proto3" json:"encry,omitempty"`          // 是否加密群
}

func (x *GetChannelMediaMessageHistoryByMediaConfig) Reset() {
	*x = GetChannelMediaMessageHistoryByMediaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelMediaMessageHistoryByMediaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelMediaMessageHistoryByMediaConfig) ProtoMessage() {}

func (x *GetChannelMediaMessageHistoryByMediaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelMediaMessageHistoryByMediaConfig.ProtoReflect.Descriptor instead.
func (*GetChannelMediaMessageHistoryByMediaConfig) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{174}
}

func (x *GetChannelMediaMessageHistoryByMediaConfig) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelMediaMessageHistoryByMediaConfig) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetChannelMediaMessageHistoryByMediaConfig) GetMedias() []int32 {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *GetChannelMediaMessageHistoryByMediaConfig) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *GetChannelMediaMessageHistoryByMediaConfig) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetChannelMediaMessageHistoryByMediaConfig) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

type ReqGetChannelMediaMessageHistoryByMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetChannelMediaMessageHistoryByMediaConfig *GetChannelMediaMessageHistoryByMediaConfig `protobuf:"bytes,1,opt,name=GetChannelMediaMessageHistoryByMediaConfig,proto3" json:"GetChannelMediaMessageHistoryByMediaConfig,omitempty"`
	Debug                                      *pbcomm.Debug                               `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqGetChannelMediaMessageHistoryByMedia) Reset() {
	*x = ReqGetChannelMediaMessageHistoryByMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMediaMessageHistoryByMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMediaMessageHistoryByMedia) ProtoMessage() {}

func (x *ReqGetChannelMediaMessageHistoryByMedia) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMediaMessageHistoryByMedia.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMediaMessageHistoryByMedia) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{175}
}

func (x *ReqGetChannelMediaMessageHistoryByMedia) GetGetChannelMediaMessageHistoryByMediaConfig() *GetChannelMediaMessageHistoryByMediaConfig {
	if x != nil {
		return x.GetChannelMediaMessageHistoryByMediaConfig
	}
	return nil
}

func (x *ReqGetChannelMediaMessageHistoryByMedia) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelMediaMessageHistoryByMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMsgs []*UserMsg `protobuf:"bytes,1,rep,name=ChannelMsgs,proto3" json:"ChannelMsgs,omitempty"` // 消息列表
	ReplyErr    *ReplyErr  `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`       // 返回错误描述结构体
}

func (x *ReplyGetChannelMediaMessageHistoryByMedia) Reset() {
	*x = ReplyGetChannelMediaMessageHistoryByMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelMediaMessageHistoryByMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelMediaMessageHistoryByMedia) ProtoMessage() {}

func (x *ReplyGetChannelMediaMessageHistoryByMedia) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelMediaMessageHistoryByMedia.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelMediaMessageHistoryByMedia) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{176}
}

func (x *ReplyGetChannelMediaMessageHistoryByMedia) GetChannelMsgs() []*UserMsg {
	if x != nil {
		return x.ChannelMsgs
	}
	return nil
}

func (x *ReplyGetChannelMediaMessageHistoryByMedia) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReplyInsertOrUpdateChannelMessageDeleteMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyInsertOrUpdateChannelMessageDeleteMark) Reset() {
	*x = ReplyInsertOrUpdateChannelMessageDeleteMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyInsertOrUpdateChannelMessageDeleteMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyInsertOrUpdateChannelMessageDeleteMark) ProtoMessage() {}

func (x *ReplyInsertOrUpdateChannelMessageDeleteMark) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyInsertOrUpdateChannelMessageDeleteMark.ProtoReflect.Descriptor instead.
func (*ReplyInsertOrUpdateChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{177}
}

func (x *ReplyInsertOrUpdateChannelMessageDeleteMark) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReplyGetChannelMessageDeleteMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMessageDeleteMark *ChannelMessageDeleteMark `protobuf:"bytes,1,opt,name=ChannelMessageDeleteMark,proto3" json:"ChannelMessageDeleteMark,omitempty"`
	ReplyErr                 *ReplyErr                 `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyGetChannelMessageDeleteMark) Reset() {
	*x = ReplyGetChannelMessageDeleteMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelMessageDeleteMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelMessageDeleteMark) ProtoMessage() {}

func (x *ReplyGetChannelMessageDeleteMark) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelMessageDeleteMark.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{178}
}

func (x *ReplyGetChannelMessageDeleteMark) GetChannelMessageDeleteMark() *ChannelMessageDeleteMark {
	if x != nil {
		return x.ChannelMessageDeleteMark
	}
	return nil
}

func (x *ReplyGetChannelMessageDeleteMark) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetChannelMediaMessageStatisticsByMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Media     int32         `protobuf:"varint,2,opt,name=Media,proto3" json:"Media,omitempty"`         // 媒体类型
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqGetChannelMediaMessageStatisticsByMedia) Reset() {
	*x = ReqGetChannelMediaMessageStatisticsByMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMediaMessageStatisticsByMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMediaMessageStatisticsByMedia) ProtoMessage() {}

func (x *ReqGetChannelMediaMessageStatisticsByMedia) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMediaMessageStatisticsByMedia.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMediaMessageStatisticsByMedia) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{179}
}

func (x *ReqGetChannelMediaMessageStatisticsByMedia) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelMediaMessageStatisticsByMedia) GetMedia() int32 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *ReqGetChannelMediaMessageStatisticsByMedia) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelMediaMessageStatisticsByMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMediaMessageStatistics *ChannelMediaMessageStatistics `protobuf:"bytes,1,opt,name=ChannelMediaMessageStatistics,proto3" json:"ChannelMediaMessageStatistics,omitempty"`
	ReplyErr                      *ReplyErr                      `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyGetChannelMediaMessageStatisticsByMedia) Reset() {
	*x = ReplyGetChannelMediaMessageStatisticsByMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelMediaMessageStatisticsByMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelMediaMessageStatisticsByMedia) ProtoMessage() {}

func (x *ReplyGetChannelMediaMessageStatisticsByMedia) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelMediaMessageStatisticsByMedia.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelMediaMessageStatisticsByMedia) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{180}
}

func (x *ReplyGetChannelMediaMessageStatisticsByMedia) GetChannelMediaMessageStatistics() *ChannelMediaMessageStatistics {
	if x != nil {
		return x.ChannelMediaMessageStatistics
	}
	return nil
}

func (x *ReplyGetChannelMediaMessageStatisticsByMedia) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReplyGetChannelTopMst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsg  *UserMsg  `protobuf:"bytes,1,opt,name=UserMsg,proto3" json:"UserMsg,omitempty"`   // 消息
	ReplyErr *ReplyErr `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyGetChannelTopMst) Reset() {
	*x = ReplyGetChannelTopMst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelTopMst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelTopMst) ProtoMessage() {}

func (x *ReplyGetChannelTopMst) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelTopMst.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelTopMst) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{181}
}

func (x *ReplyGetChannelTopMst) GetUserMsg() *UserMsg {
	if x != nil {
		return x.UserMsg
	}
	return nil
}

func (x *ReplyGetChannelTopMst) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqInsertOrUpdateChannelDialogAndMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelDialog *ChannelDialog `protobuf:"bytes,1,opt,name=ChannelDialog,proto3" json:"ChannelDialog,omitempty"` // 对话框基础信息
	ChannelMsg    *UserMsg       `protobuf:"bytes,2,opt,name=ChannelMsg,proto3" json:"ChannelMsg,omitempty"`       // 对话款最新一条消息
	Debug         *pbcomm.Debug  `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`                 // 日志前缀信息
}

func (x *ReqInsertOrUpdateChannelDialogAndMsg) Reset() {
	*x = ReqInsertOrUpdateChannelDialogAndMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqInsertOrUpdateChannelDialogAndMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqInsertOrUpdateChannelDialogAndMsg) ProtoMessage() {}

func (x *ReqInsertOrUpdateChannelDialogAndMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqInsertOrUpdateChannelDialogAndMsg.ProtoReflect.Descriptor instead.
func (*ReqInsertOrUpdateChannelDialogAndMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{182}
}

func (x *ReqInsertOrUpdateChannelDialogAndMsg) GetChannelDialog() *ChannelDialog {
	if x != nil {
		return x.ChannelDialog
	}
	return nil
}

func (x *ReqInsertOrUpdateChannelDialogAndMsg) GetChannelMsg() *UserMsg {
	if x != nil {
		return x.ChannelMsg
	}
	return nil
}

func (x *ReqInsertOrUpdateChannelDialogAndMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetDialogMaxReadInMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqGetDialogMaxReadInMsgId) Reset() {
	*x = ReqGetDialogMaxReadInMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetDialogMaxReadInMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetDialogMaxReadInMsgId) ProtoMessage() {}

func (x *ReqGetDialogMaxReadInMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetDialogMaxReadInMsgId.ProtoReflect.Descriptor instead.
func (*ReqGetDialogMaxReadInMsgId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{183}
}

func (x *ReqGetDialogMaxReadInMsgId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetDialogMaxReadInMsgId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetDialogMaxReadInMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId    int32     `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`      // MsgID
	ReplyErr *ReplyErr `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyGetDialogMaxReadInMsgId) Reset() {
	*x = ReplyGetDialogMaxReadInMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetDialogMaxReadInMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetDialogMaxReadInMsgId) ProtoMessage() {}

func (x *ReplyGetDialogMaxReadInMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetDialogMaxReadInMsgId.ProtoReflect.Descriptor instead.
func (*ReplyGetDialogMaxReadInMsgId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{184}
}

func (x *ReplyGetDialogMaxReadInMsgId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReplyGetDialogMaxReadInMsgId) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqSetDialogMaxReadInMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	MsgId     int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`         // MSGID
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqSetDialogMaxReadInMsgId) Reset() {
	*x = ReqSetDialogMaxReadInMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSetDialogMaxReadInMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSetDialogMaxReadInMsgId) ProtoMessage() {}

func (x *ReqSetDialogMaxReadInMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSetDialogMaxReadInMsgId.ProtoReflect.Descriptor instead.
func (*ReqSetDialogMaxReadInMsgId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{185}
}

func (x *ReqSetDialogMaxReadInMsgId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqSetDialogMaxReadInMsgId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqSetDialogMaxReadInMsgId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetDialogAndMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqGetDialogAndMsg) Reset() {
	*x = ReqGetDialogAndMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetDialogAndMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetDialogAndMsg) ProtoMessage() {}

func (x *ReqGetDialogAndMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetDialogAndMsg.ProtoReflect.Descriptor instead.
func (*ReqGetDialogAndMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{186}
}

func (x *ReqGetDialogAndMsg) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetDialogAndMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetDialogAndMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelDialogAndMsg *ChannelDialogAndMsg `protobuf:"bytes,1,opt,name=ChannelDialogAndMsg,proto3" json:"ChannelDialogAndMsg,omitempty"` // 对话框信息
	ReplyErr            *ReplyErr            `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`                       // 返回错误描述结构体
}

func (x *ReplyGetDialogAndMsg) Reset() {
	*x = ReplyGetDialogAndMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetDialogAndMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetDialogAndMsg) ProtoMessage() {}

func (x *ReplyGetDialogAndMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetDialogAndMsg.ProtoReflect.Descriptor instead.
func (*ReplyGetDialogAndMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{187}
}

func (x *ReplyGetDialogAndMsg) GetChannelDialogAndMsg() *ChannelDialogAndMsg {
	if x != nil {
		return x.ChannelDialogAndMsg
	}
	return nil
}

func (x *ReplyGetDialogAndMsg) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetDialogAndMsgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelIds []int32       `protobuf:"varint,1,rep,packed,name=ChannelIds,proto3" json:"ChannelIds,omitempty"` // 超级群ID集合
	Debug      *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`                   // 日志前缀信息
}

func (x *ReqGetDialogAndMsgs) Reset() {
	*x = ReqGetDialogAndMsgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetDialogAndMsgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetDialogAndMsgs) ProtoMessage() {}

func (x *ReqGetDialogAndMsgs) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetDialogAndMsgs.ProtoReflect.Descriptor instead.
func (*ReqGetDialogAndMsgs) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{188}
}

func (x *ReqGetDialogAndMsgs) GetChannelIds() []int32 {
	if x != nil {
		return x.ChannelIds
	}
	return nil
}

func (x *ReqGetDialogAndMsgs) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetDialogAndMsgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelDialogAndMsgs *ChannelDialogAndMsgs `protobuf:"bytes,1,opt,name=ChannelDialogAndMsgs,proto3" json:"ChannelDialogAndMsgs,omitempty"` // 对话框信息结合
	ReplyErr             *ReplyErr             `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`                         // 返回错误描述结构体
}

func (x *ReplyGetDialogAndMsgs) Reset() {
	*x = ReplyGetDialogAndMsgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetDialogAndMsgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetDialogAndMsgs) ProtoMessage() {}

func (x *ReplyGetDialogAndMsgs) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetDialogAndMsgs.ProtoReflect.Descriptor instead.
func (*ReplyGetDialogAndMsgs) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{189}
}

func (x *ReplyGetDialogAndMsgs) GetChannelDialogAndMsgs() *ChannelDialogAndMsgs {
	if x != nil {
		return x.ChannelDialogAndMsgs
	}
	return nil
}

func (x *ReplyGetDialogAndMsgs) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqStoreAdminLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelAdminLog *ChannelAdminLog `protobuf:"bytes,1,opt,name=ChannelAdminLog,proto3" json:"ChannelAdminLog,omitempty"`
	Debug           *pbcomm.Debug    `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqStoreAdminLog) Reset() {
	*x = ReqStoreAdminLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStoreAdminLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStoreAdminLog) ProtoMessage() {}

func (x *ReqStoreAdminLog) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStoreAdminLog.ProtoReflect.Descriptor instead.
func (*ReqStoreAdminLog) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{190}
}

func (x *ReqStoreAdminLog) GetChannelAdminLog() *ChannelAdminLog {
	if x != nil {
		return x.ChannelAdminLog
	}
	return nil
}

func (x *ReqStoreAdminLog) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Limit     int32         `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`         // 查询条数
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqFindsAdminLogByChannelId) Reset() {
	*x = ReqFindsAdminLogByChannelId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFindsAdminLogByChannelId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFindsAdminLogByChannelId) ProtoMessage() {}

func (x *ReqFindsAdminLogByChannelId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFindsAdminLogByChannelId.ProtoReflect.Descriptor instead.
func (*ReqFindsAdminLogByChannelId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{191}
}

func (x *ReqFindsAdminLogByChannelId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelId) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyFindsAdminLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminLogs []*ChannelAdminLog `protobuf:"bytes,1,rep,name=AdminLogs,proto3" json:"AdminLogs,omitempty"` // 超级群管理员日志结合
	ReplyErr  *ReplyErr          `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`   // 返回错误描述结构体
}

func (x *ReplyFindsAdminLog) Reset() {
	*x = ReplyFindsAdminLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyFindsAdminLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyFindsAdminLog) ProtoMessage() {}

func (x *ReplyFindsAdminLog) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyFindsAdminLog.ProtoReflect.Descriptor instead.
func (*ReplyFindsAdminLog) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{192}
}

func (x *ReplyFindsAdminLog) GetAdminLogs() []*ChannelAdminLog {
	if x != nil {
		return x.AdminLogs
	}
	return nil
}

func (x *ReplyFindsAdminLog) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId    int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`              // 超级群ID
	UserId       int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`                    // 用户ID
	AdminUsers   []int32       `protobuf:"varint,3,rep,packed,name=AdminUsers,proto3" json:"AdminUsers,omitempty"`     // 管理员用户集合
	EventFilters []int32       `protobuf:"varint,4,rep,packed,name=EventFilters,proto3" json:"EventFilters,omitempty"` // 筛选类型结合 对应 adminlog 中的action_type 字段
	Limit        int32         `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`                      // 查询条数
	Debug        *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug,proto3" json:"Debug,omitempty"`                       // 日志前缀信息
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) Reset() {
	*x = ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) ProtoMessage() {}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId.ProtoReflect.Descriptor instead.
func (*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{193}
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetAdminUsers() []int32 {
	if x != nil {
		return x.AdminUsers
	}
	return nil
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetEventFilters() []int32 {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId    int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`              // 超级群ID
	UserId       int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`                    // 被操作用户
	EventFilters []int32       `protobuf:"varint,3,rep,packed,name=EventFilters,proto3" json:"EventFilters,omitempty"` // 筛选类型结合 对应 adminlog 中的action_type 字段
	Limit        int32         `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`                      // 查询条数
	Debug        *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`                       // 日志前缀信息
}

func (x *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) Reset() {
	*x = ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) ProtoMessage() {}

func (x *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId.ProtoReflect.Descriptor instead.
func (*ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{194}
}

func (x *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetEventFilters() []int32 {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

func (x *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	UserId    int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`       // 用户ID
	Limit     int32         `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`         // 查询条数
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqFindsAdminLogByChannelIdAndUserId) Reset() {
	*x = ReqFindsAdminLogByChannelIdAndUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFindsAdminLogByChannelIdAndUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFindsAdminLogByChannelIdAndUserId) ProtoMessage() {}

func (x *ReqFindsAdminLogByChannelIdAndUserId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFindsAdminLogByChannelIdAndUserId.ProtoReflect.Descriptor instead.
func (*ReqFindsAdminLogByChannelIdAndUserId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{195}
}

func (x *ReqFindsAdminLogByChannelIdAndUserId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndUserId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndUserId) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndUserId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId    int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`              // 超级群ID
	AdminUsers   []int32       `protobuf:"varint,2,rep,packed,name=AdminUsers,proto3" json:"AdminUsers,omitempty"`     // 筛选类型结合 对应 adminlog 中的action_type 字段
	EventFilters []int32       `protobuf:"varint,3,rep,packed,name=EventFilters,proto3" json:"EventFilters,omitempty"` // 筛选类型结合 对应 adminlog 中的action_type 字段
	Limit        int32         `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`                      // 查询条数
	Debug        *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`                       // 日志前缀信息
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) Reset() {
	*x = ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) ProtoMessage() {}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters.ProtoReflect.Descriptor instead.
func (*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{196}
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetAdminUsers() []int32 {
	if x != nil {
		return x.AdminUsers
	}
	return nil
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetEventFilters() []int32 {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndEventFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId    int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`              // 超级群ID
	EventFilters []int32       `protobuf:"varint,2,rep,packed,name=EventFilters,proto3" json:"EventFilters,omitempty"` // 筛选类型结合 对应 adminlog 中的action_type 字段
	Limit        int32         `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`                      // 查询条数
	Debug        *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`                       // 日志前缀信息
}

func (x *ReqFindsAdminLogByChannelIdAndEventFilters) Reset() {
	*x = ReqFindsAdminLogByChannelIdAndEventFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFindsAdminLogByChannelIdAndEventFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFindsAdminLogByChannelIdAndEventFilters) ProtoMessage() {}

func (x *ReqFindsAdminLogByChannelIdAndEventFilters) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFindsAdminLogByChannelIdAndEventFilters.ProtoReflect.Descriptor instead.
func (*ReqFindsAdminLogByChannelIdAndEventFilters) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{197}
}

func (x *ReqFindsAdminLogByChannelIdAndEventFilters) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndEventFilters) GetEventFilters() []int32 {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

func (x *ReqFindsAdminLogByChannelIdAndEventFilters) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndEventFilters) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndAdminUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`          // 超级群ID
	AdminUsers []int32       `protobuf:"varint,2,rep,packed,name=AdminUsers,proto3" json:"AdminUsers,omitempty"` // 管理员用户集合
	Limit      int32         `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`                  // 查询条数
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`                   // 日志前缀信息
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsers) Reset() {
	*x = ReqFindsAdminLogByChannelIdAndAdminUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFindsAdminLogByChannelIdAndAdminUsers) ProtoMessage() {}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsers) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFindsAdminLogByChannelIdAndAdminUsers.ProtoReflect.Descriptor instead.
func (*ReqFindsAdminLogByChannelIdAndAdminUsers) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{198}
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsers) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsers) GetAdminUsers() []int32 {
	if x != nil {
		return x.AdminUsers
	}
	return nil
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsers) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsers) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqChannelMessageAtAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId  int32         `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Encry  int32         `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *ReqChannelMessageAtAdd) Reset() {
	*x = ReqChannelMessageAtAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqChannelMessageAtAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqChannelMessageAtAdd) ProtoMessage() {}

func (x *ReqChannelMessageAtAdd) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqChannelMessageAtAdd.ProtoReflect.Descriptor instead.
func (*ReqChannelMessageAtAdd) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{199}
}

func (x *ReqChannelMessageAtAdd) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqChannelMessageAtAdd) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqChannelMessageAtAdd) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqChannelMessageAtAdd) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ReqChannelMessageAtAdd) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyChannelMessageAtAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`
}

func (x *ReplyChannelMessageAtAdd) Reset() {
	*x = ReplyChannelMessageAtAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChannelMessageAtAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChannelMessageAtAdd) ProtoMessage() {}

func (x *ReplyChannelMessageAtAdd) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChannelMessageAtAdd.ProtoReflect.Descriptor instead.
func (*ReplyChannelMessageAtAdd) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{200}
}

func (x *ReplyChannelMessageAtAdd) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqChannelMessageAtGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId    int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId     int32         `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	AddOffset int32         `protobuf:"varint,4,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`
	Limit     int32         `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *ReqChannelMessageAtGet) Reset() {
	*x = ReqChannelMessageAtGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqChannelMessageAtGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqChannelMessageAtGet) ProtoMessage() {}

func (x *ReqChannelMessageAtGet) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqChannelMessageAtGet.ProtoReflect.Descriptor instead.
func (*ReqChannelMessageAtGet) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{201}
}

func (x *ReqChannelMessageAtGet) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqChannelMessageAtGet) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqChannelMessageAtGet) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqChannelMessageAtGet) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *ReqChannelMessageAtGet) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqChannelMessageAtGet) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyChannelMessageAtGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*UserMsg `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
	ReplyErr *ReplyErr  `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`
}

func (x *ReplyChannelMessageAtGet) Reset() {
	*x = ReplyChannelMessageAtGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChannelMessageAtGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChannelMessageAtGet) ProtoMessage() {}

func (x *ReplyChannelMessageAtGet) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChannelMessageAtGet.ProtoReflect.Descriptor instead.
func (*ReplyChannelMessageAtGet) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{202}
}

func (x *ReplyChannelMessageAtGet) GetMessages() []*UserMsg {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ReplyChannelMessageAtGet) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqChannelMessageAtDel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId  int32         `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *ReqChannelMessageAtDel) Reset() {
	*x = ReqChannelMessageAtDel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqChannelMessageAtDel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqChannelMessageAtDel) ProtoMessage() {}

func (x *ReqChannelMessageAtDel) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqChannelMessageAtDel.ProtoReflect.Descriptor instead.
func (*ReqChannelMessageAtDel) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{203}
}

func (x *ReqChannelMessageAtDel) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqChannelMessageAtDel) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqChannelMessageAtDel) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqChannelMessageAtDel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyChannelMessageAtDel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`
}

func (x *ReplyChannelMessageAtDel) Reset() {
	*x = ReplyChannelMessageAtDel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChannelMessageAtDel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChannelMessageAtDel) ProtoMessage() {}

func (x *ReplyChannelMessageAtDel) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChannelMessageAtDel.ProtoReflect.Descriptor instead.
func (*ReplyChannelMessageAtDel) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{204}
}

func (x *ReplyChannelMessageAtDel) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqUserMessageAtAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId  int32         `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Encry  int32         `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *ReqUserMessageAtAdd) Reset() {
	*x = ReqUserMessageAtAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserMessageAtAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserMessageAtAdd) ProtoMessage() {}

func (x *ReqUserMessageAtAdd) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserMessageAtAdd.ProtoReflect.Descriptor instead.
func (*ReqUserMessageAtAdd) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{205}
}

func (x *ReqUserMessageAtAdd) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUserMessageAtAdd) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqUserMessageAtAdd) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqUserMessageAtAdd) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ReqUserMessageAtAdd) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUserMessageAtAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`
}

func (x *ReplyUserMessageAtAdd) Reset() {
	*x = ReplyUserMessageAtAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUserMessageAtAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUserMessageAtAdd) ProtoMessage() {}

func (x *ReplyUserMessageAtAdd) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUserMessageAtAdd.ProtoReflect.Descriptor instead.
func (*ReplyUserMessageAtAdd) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{206}
}

func (x *ReplyUserMessageAtAdd) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqUserMessageAtGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId    int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId     int32         `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	AddOffset int32         `protobuf:"varint,4,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`
	Limit     int32         `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *ReqUserMessageAtGet) Reset() {
	*x = ReqUserMessageAtGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserMessageAtGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserMessageAtGet) ProtoMessage() {}

func (x *ReqUserMessageAtGet) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserMessageAtGet.ProtoReflect.Descriptor instead.
func (*ReqUserMessageAtGet) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{207}
}

func (x *ReqUserMessageAtGet) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUserMessageAtGet) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqUserMessageAtGet) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqUserMessageAtGet) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *ReqUserMessageAtGet) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqUserMessageAtGet) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUserMessageAtGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*UserMsg `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
	ReplyErr *ReplyErr  `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`
}

func (x *ReplyUserMessageAtGet) Reset() {
	*x = ReplyUserMessageAtGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUserMessageAtGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUserMessageAtGet) ProtoMessage() {}

func (x *ReplyUserMessageAtGet) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUserMessageAtGet.ProtoReflect.Descriptor instead.
func (*ReplyUserMessageAtGet) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{208}
}

func (x *ReplyUserMessageAtGet) GetMessages() []*UserMsg {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ReplyUserMessageAtGet) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqUserMessageAtDel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId  int32         `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *ReqUserMessageAtDel) Reset() {
	*x = ReqUserMessageAtDel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserMessageAtDel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserMessageAtDel) ProtoMessage() {}

func (x *ReqUserMessageAtDel) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserMessageAtDel.ProtoReflect.Descriptor instead.
func (*ReqUserMessageAtDel) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{209}
}

func (x *ReqUserMessageAtDel) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUserMessageAtDel) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqUserMessageAtDel) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqUserMessageAtDel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUserMessageAtDel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`
}

func (x *ReplyUserMessageAtDel) Reset() {
	*x = ReplyUserMessageAtDel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUserMessageAtDel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUserMessageAtDel) ProtoMessage() {}

func (x *ReplyUserMessageAtDel) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUserMessageAtDel.ProtoReflect.Descriptor instead.
func (*ReplyUserMessageAtDel) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{210}
}

func (x *ReplyUserMessageAtDel) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

// ==================================== 公用struct ====================================
// @ for channeldb
type ChannelMessageAt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId  int32 `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Encry  int32 `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
}

func (x *ChannelMessageAt) Reset() {
	*x = ChannelMessageAt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMessageAt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMessageAt) ProtoMessage() {}

func (x *ChannelMessageAt) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMessageAt.ProtoReflect.Descriptor instead.
func (*ChannelMessageAt) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{211}
}

func (x *ChannelMessageAt) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChannelMessageAt) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ChannelMessageAt) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ChannelMessageAt) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

// @ for messagedb
type UserMessageAt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId  int32 `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Encry  int32 `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
}

func (x *UserMessageAt) Reset() {
	*x = UserMessageAt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMessageAt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMessageAt) ProtoMessage() {}

func (x *UserMessageAt) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMessageAt.ProtoReflect.Descriptor instead.
func (*UserMessageAt) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{212}
}

func (x *UserMessageAt) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserMessageAt) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *UserMessageAt) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *UserMessageAt) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

// 超级群标记删除记录结构体
type ChannelMessageDeleteMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`       // 用户ID
	ChannelId int32 `protobuf:"varint,2,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	MsgId     int32 `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`         // 标记删除的msgid
}

func (x *ChannelMessageDeleteMark) Reset() {
	*x = ChannelMessageDeleteMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMessageDeleteMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMessageDeleteMark) ProtoMessage() {}

func (x *ChannelMessageDeleteMark) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMessageDeleteMark.ProtoReflect.Descriptor instead.
func (*ChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{213}
}

func (x *ChannelMessageDeleteMark) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChannelMessageDeleteMark) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelMessageDeleteMark) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type MsgIdImported struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdOrChannelId int32 `protobuf:"varint,1,opt,name=UserIdOrChannelId,proto3" json:"UserIdOrChannelId,omitempty"` // 用户ID或者超级群ID
	Imported          bool  `protobuf:"varint,2,opt,name=Imported,proto3" json:"Imported,omitempty"`                   // 是否已经从erlang版本导入过
}

func (x *MsgIdImported) Reset() {
	*x = MsgIdImported{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgIdImported) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgIdImported) ProtoMessage() {}

func (x *MsgIdImported) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgIdImported.ProtoReflect.Descriptor instead.
func (*MsgIdImported) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{214}
}

func (x *MsgIdImported) GetUserIdOrChannelId() int32 {
	if x != nil {
		return x.UserIdOrChannelId
	}
	return 0
}

func (x *MsgIdImported) GetImported() bool {
	if x != nil {
		return x.Imported
	}
	return false
}

type UserMediaMessageStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`     // 用户ID
	WithId   int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`     // 消息接收方ID
	WithType int32 `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"` // 对话框类型
	Media    int32 `protobuf:"varint,4,opt,name=Media,proto3" json:"Media,omitempty"`       // 媒体消息类型
	Count    int32 `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`       // 媒体消息计数
}

func (x *UserMediaMessageStatistics) Reset() {
	*x = UserMediaMessageStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMediaMessageStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMediaMessageStatistics) ProtoMessage() {}

func (x *UserMediaMessageStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMediaMessageStatistics.ProtoReflect.Descriptor instead.
func (*UserMediaMessageStatistics) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{215}
}

func (x *UserMediaMessageStatistics) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserMediaMessageStatistics) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *UserMediaMessageStatistics) GetWithType() int32 {
	if x != nil {
		return x.WithType
	}
	return 0
}

func (x *UserMediaMessageStatistics) GetMedia() int32 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *UserMediaMessageStatistics) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ChannelMediaMessageStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Media     int32 `protobuf:"varint,2,opt,name=Media,proto3" json:"Media,omitempty"`         // 媒体消息类型
	Count     int32 `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`         // 媒体消息计数
}

func (x *ChannelMediaMessageStatistics) Reset() {
	*x = ChannelMediaMessageStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMediaMessageStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMediaMessageStatistics) ProtoMessage() {}

func (x *ChannelMediaMessageStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMediaMessageStatistics.ProtoReflect.Descriptor instead.
func (*ChannelMediaMessageStatistics) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{216}
}

func (x *ChannelMediaMessageStatistics) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelMediaMessageStatistics) GetMedia() int32 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *ChannelMediaMessageStatistics) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type UserDialogErlang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                 // 主键自增
	UserId     int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 用户ID
	WithId     int32 `protobuf:"varint,3,opt,name=WithId,proto3" json:"WithId,omitempty"`         // 消息接收方ID
	WithType   int32 `protobuf:"varint,4,opt,name=WithType,proto3" json:"WithType,omitempty"`     // 对话框类型
	HaveImport bool  `protobuf:"varint,5,opt,name=HaveImport,proto3" json:"HaveImport,omitempty"` // 是否已经导入
	CreateTime int64 `protobuf:"varint,6,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"` // 新增时间
	UpdateTime int64 `protobuf:"varint,7,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"` // 更新时间
}

func (x *UserDialogErlang) Reset() {
	*x = UserDialogErlang{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDialogErlang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDialogErlang) ProtoMessage() {}

func (x *UserDialogErlang) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDialogErlang.ProtoReflect.Descriptor instead.
func (*UserDialogErlang) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{217}
}

func (x *UserDialogErlang) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserDialogErlang) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserDialogErlang) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *UserDialogErlang) GetWithType() int32 {
	if x != nil {
		return x.WithType
	}
	return 0
}

func (x *UserDialogErlang) GetHaveImport() bool {
	if x != nil {
		return x.HaveImport
	}
	return false
}

func (x *UserDialogErlang) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UserDialogErlang) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type PtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	Pts    int32  `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`       // Pts
	Type   int32  `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`     // 二进制类型 0 common 1 action（比如删除消息、更新消息等）
	Msg    []byte `protobuf:"bytes,4,opt,name=Msg,proto3" json:"Msg,omitempty"`        // pts对应消息二进制
	Date   int64  `protobuf:"varint,5,opt,name=Date,proto3" json:"Date,omitempty"`     // 創建時間 默认当前时间 在存储消息的时候初始化
}

func (x *PtsHandle) Reset() {
	*x = PtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PtsHandle) ProtoMessage() {}

func (x *PtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PtsHandle.ProtoReflect.Descriptor instead.
func (*PtsHandle) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{218}
}

func (x *PtsHandle) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PtsHandle) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *PtsHandle) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PtsHandle) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *PtsHandle) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

type OtherInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	Date   int64  `protobuf:"varint,2,opt,name=Date,proto3" json:"Date,omitempty"`     // 时间戳 time.Now.Unix() 长度10位
	Msg    []byte `protobuf:"bytes,3,opt,name=Msg,proto3" json:"Msg,omitempty"`        // 消息二进制
}

func (x *OtherInfoMsg) Reset() {
	*x = OtherInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtherInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherInfoMsg) ProtoMessage() {}

func (x *OtherInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherInfoMsg.ProtoReflect.Descriptor instead.
func (*OtherInfoMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{219}
}

func (x *OtherInfoMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OtherInfoMsg) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *OtherInfoMsg) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

type ChannelPtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32   `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`    // 超级群ID
	UserIds   []int32 `protobuf:"varint,2,rep,packed,name=UserIds,proto3" json:"UserIds,omitempty"` // 消息发送者
	Pts       int32   `protobuf:"varint,3,opt,name=Pts,proto3" json:"Pts,omitempty"`                // pts
	Msg       []byte  `protobuf:"bytes,4,opt,name=Msg,proto3" json:"Msg,omitempty"`                 // pts对应消息二进制
	Date      int64   `protobuf:"varint,5,opt,name=date,proto3" json:"date,omitempty"`              // 时间戳 time.Now.Unix()
}

func (x *ChannelPtsHandle) Reset() {
	*x = ChannelPtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPtsHandle) ProtoMessage() {}

func (x *ChannelPtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPtsHandle.ProtoReflect.Descriptor instead.
func (*ChannelPtsHandle) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{220}
}

func (x *ChannelPtsHandle) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelPtsHandle) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *ChannelPtsHandle) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ChannelPtsHandle) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *ChannelPtsHandle) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

type ChannelAdminLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionId    int64  `protobuf:"varint,1,opt,name=ActionId,proto3" json:"ActionId,omitempty"`       // 事件唯一ID
	ChannelId   int32  `protobuf:"varint,2,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`     // 超级群、频道ID
	AdminUserId int32  `protobuf:"varint,3,opt,name=AdminUserId,proto3" json:"AdminUserId,omitempty"` // 管理员ID
	UserId      int32  `protobuf:"varint,4,opt,name=UserId,proto3" json:"UserId,omitempty"`           // 普通用户ID
	ActionType  int32  `protobuf:"varint,5,opt,name=ActionType,proto3" json:"ActionType,omitempty"`   // 过滤类型
	AdminLog    []byte `protobuf:"bytes,6,opt,name=AdminLog,proto3" json:"AdminLog,omitempty"`        // 消息
	Date        int64  `protobuf:"varint,7,opt,name=Date,proto3" json:"Date,omitempty"`               // 日期 使用 time.Now.Unix()
}

func (x *ChannelAdminLog) Reset() {
	*x = ChannelAdminLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelAdminLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelAdminLog) ProtoMessage() {}

func (x *ChannelAdminLog) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelAdminLog.ProtoReflect.Descriptor instead.
func (*ChannelAdminLog) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{221}
}

func (x *ChannelAdminLog) GetActionId() int64 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

func (x *ChannelAdminLog) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelAdminLog) GetAdminUserId() int32 {
	if x != nil {
		return x.AdminUserId
	}
	return 0
}

func (x *ChannelAdminLog) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChannelAdminLog) GetActionType() int32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *ChannelAdminLog) GetAdminLog() []byte {
	if x != nil {
		return x.AdminLog
	}
	return nil
}

func (x *ChannelAdminLog) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

type UserPingedDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`         // 用户ID
	WithId     int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`         // 消息交互方
	WithIdType int32 `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"` // 对话款类型
	PingedNum  int32 `protobuf:"varint,4,opt,name=PingedNum,proto3" json:"PingedNum,omitempty"`   // 置顶对话框计数变量，越大的排在上面
}

func (x *UserPingedDialog) Reset() {
	*x = UserPingedDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPingedDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPingedDialog) ProtoMessage() {}

func (x *UserPingedDialog) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPingedDialog.ProtoReflect.Descriptor instead.
func (*UserPingedDialog) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{222}
}

func (x *UserPingedDialog) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserPingedDialog) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *UserPingedDialog) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *UserPingedDialog) GetPingedNum() int32 {
	if x != nil {
		return x.PingedNum
	}
	return 0
}

type UserDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                                    // 唯一键
	UserId              int32   `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`                            // 用户ID
	WithId              int32   `protobuf:"varint,3,opt,name=WithId,proto3" json:"WithId,omitempty"`                            // 消息交互方
	Type                int32   `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty"`                                // 对话框类型 1 单聊 2 普通群 3 超级群/channel
	Flags               int32   `protobuf:"varint,5,opt,name=Flags,proto3" json:"Flags,omitempty"`                              // 标识
	Pinged              bool    `protobuf:"varint,6,opt,name=Pinged,proto3" json:"Pinged,omitempty"`                            // 是否置顶
	TopMessage          int32   `protobuf:"varint,7,opt,name=TopMessage,proto3" json:"TopMessage,omitempty"`                    // 顶部消息id
	ReadInboxMaxId      int32   `protobuf:"varint,8,opt,name=ReadInboxMaxId,proto3" json:"ReadInboxMaxId,omitempty"`            // 已读最大id
	ReadOutboxMaxId     int32   `protobuf:"varint,9,opt,name=ReadOutboxMaxId,proto3" json:"ReadOutboxMaxId,omitempty"`          // 双勾最大id
	UnreadMetionsCount  int32   `protobuf:"varint,10,opt,name=UnreadMetionsCount,proto3" json:"UnreadMetionsCount,omitempty"`   // 未读@总数
	UnreadCount         int32   `protobuf:"varint,11,opt,name=UnreadCount,proto3" json:"UnreadCount,omitempty"`                 // 未读总数
	NotifySettingsFlags int32   `protobuf:"varint,12,opt,name=NotifySettingsFlags,proto3" json:"NotifySettingsFlags,omitempty"` // 设置标识
	ShowPreviews        bool    `protobuf:"varint,13,opt,name=ShowPreviews,proto3" json:"ShowPreviews,omitempty"`               // 是否显示完全 推送时
	Silent              bool    `protobuf:"varint,14,opt,name=Silent,proto3" json:"Silent,omitempty"`                           // 是否静音
	MuteUntil           int32   `protobuf:"varint,15,opt,name=MuteUntil,proto3" json:"MuteUntil,omitempty"`                     // 静音时间
	Sound               string  `protobuf:"bytes,16,opt,name=Sound,proto3" json:"Sound,omitempty"`                              // 声音
	Pts                 int32   `protobuf:"varint,17,opt,name=Pts,proto3" json:"Pts,omitempty"`                                 // 当前pts
	Draft               []byte  `protobuf:"bytes,18,opt,name=Draft,proto3" json:"Draft,omitempty"`                              // 草稿
	FolderId            int32   `protobuf:"varint,19,opt,name=FolderId,proto3" json:"FolderId,omitempty"`                       // 归档id
	Readinpts           int32   `protobuf:"varint,20,opt,name=Readinpts,proto3" json:"Readinpts,omitempty"`                     // 最后已读pts
	Readoutpts          int32   `protobuf:"varint,21,opt,name=Readoutpts,proto3" json:"Readoutpts,omitempty"`                   // 最后双勾pts
	LinkUser            []int32 `protobuf:"varint,22,rep,packed,name=LinkUser,proto3" json:"LinkUser,omitempty"`                // 涉及到的用户
	InsertDate          int64   `protobuf:"varint,23,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`                   // 插入时间
	UpdateDate          int64   `protobuf:"varint,24,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`                   // 更新时间
	Encry               int32   `protobuf:"varint,25,opt,name=Encry,proto3" json:"Encry,omitempty"`                             // 是否加密 0: 不加密 1：加密
	Revoke              bool    `protobuf:"varint,26,opt,name=Revoke,proto3" json:"Revoke,omitempty"`                           // 如果unread为0 是否是回退为0/已读为0
}

func (x *UserDialog) Reset() {
	*x = UserDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDialog) ProtoMessage() {}

func (x *UserDialog) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDialog.ProtoReflect.Descriptor instead.
func (*UserDialog) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{223}
}

func (x *UserDialog) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserDialog) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserDialog) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *UserDialog) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UserDialog) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *UserDialog) GetPinged() bool {
	if x != nil {
		return x.Pinged
	}
	return false
}

func (x *UserDialog) GetTopMessage() int32 {
	if x != nil {
		return x.TopMessage
	}
	return 0
}

func (x *UserDialog) GetReadInboxMaxId() int32 {
	if x != nil {
		return x.ReadInboxMaxId
	}
	return 0
}

func (x *UserDialog) GetReadOutboxMaxId() int32 {
	if x != nil {
		return x.ReadOutboxMaxId
	}
	return 0
}

func (x *UserDialog) GetUnreadMetionsCount() int32 {
	if x != nil {
		return x.UnreadMetionsCount
	}
	return 0
}

func (x *UserDialog) GetUnreadCount() int32 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

func (x *UserDialog) GetNotifySettingsFlags() int32 {
	if x != nil {
		return x.NotifySettingsFlags
	}
	return 0
}

func (x *UserDialog) GetShowPreviews() bool {
	if x != nil {
		return x.ShowPreviews
	}
	return false
}

func (x *UserDialog) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *UserDialog) GetMuteUntil() int32 {
	if x != nil {
		return x.MuteUntil
	}
	return 0
}

func (x *UserDialog) GetSound() string {
	if x != nil {
		return x.Sound
	}
	return ""
}

func (x *UserDialog) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *UserDialog) GetDraft() []byte {
	if x != nil {
		return x.Draft
	}
	return nil
}

func (x *UserDialog) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *UserDialog) GetReadinpts() int32 {
	if x != nil {
		return x.Readinpts
	}
	return 0
}

func (x *UserDialog) GetReadoutpts() int32 {
	if x != nil {
		return x.Readoutpts
	}
	return 0
}

func (x *UserDialog) GetLinkUser() []int32 {
	if x != nil {
		return x.LinkUser
	}
	return nil
}

func (x *UserDialog) GetInsertDate() int64 {
	if x != nil {
		return x.InsertDate
	}
	return 0
}

func (x *UserDialog) GetUpdateDate() int64 {
	if x != nil {
		return x.UpdateDate
	}
	return 0
}

func (x *UserDialog) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *UserDialog) GetRevoke() bool {
	if x != nil {
		return x.Revoke
	}
	return false
}

type ForWardUserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date        int32    `protobuf:"varint,1,opt,name=Date,proto3" json:"Date,omitempty"`              // 时间
	Message     string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`         // 消息内容
	Media       int64    `protobuf:"varint,3,opt,name=Media,proto3" json:"Media,omitempty"`            // 媒体id
	MediaData   []byte   `protobuf:"bytes,4,opt,name=MediaData,proto3" json:"MediaData,omitempty"`     // 媒体二进制
	ReplyMarkup []byte   `protobuf:"bytes,5,opt,name=ReplyMarkup,proto3" json:"ReplyMarkup,omitempty"` // 小键盘
	Entities    [][]byte `protobuf:"bytes,6,rep,name=Entities,proto3" json:"Entities,omitempty"`       // 高亮
	FromId      int32    `protobuf:"varint,7,opt,name=FromId,proto3" json:"FromId,omitempty"`          // 发送方
	Encry       int32    `protobuf:"varint,8,opt,name=Encry,proto3" json:"Encry,omitempty"`            // 是否加密 0: 不加密 1：加密
	FwdFrom     []byte   `protobuf:"bytes,9,opt,name=FwdFrom,proto3" json:"FwdFrom,omitempty"`         // 原始转发信息
	GroupId     int64    `protobuf:"varint,10,opt,name=GroupId,proto3" json:"GroupId,omitempty"`       // 图片组ID
	ViaBotId    int32    `protobuf:"varint,11,opt,name=ViaBotId,proto3" json:"ViaBotId,omitempty"`     // 机器人id
	MsgID       int32    `protobuf:"varint,12,opt,name=MsgID,proto3" json:"MsgID,omitempty"`           // 消息ID
}

func (x *ForWardUserMsg) Reset() {
	*x = ForWardUserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForWardUserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForWardUserMsg) ProtoMessage() {}

func (x *ForWardUserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForWardUserMsg.ProtoReflect.Descriptor instead.
func (*ForWardUserMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{224}
}

func (x *ForWardUserMsg) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ForWardUserMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ForWardUserMsg) GetMedia() int64 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *ForWardUserMsg) GetMediaData() []byte {
	if x != nil {
		return x.MediaData
	}
	return nil
}

func (x *ForWardUserMsg) GetReplyMarkup() []byte {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *ForWardUserMsg) GetEntities() [][]byte {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *ForWardUserMsg) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ForWardUserMsg) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ForWardUserMsg) GetFwdFrom() []byte {
	if x != nil {
		return x.FwdFrom
	}
	return nil
}

func (x *ForWardUserMsg) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ForWardUserMsg) GetViaBotId() int32 {
	if x != nil {
		return x.ViaBotId
	}
	return 0
}

func (x *ForWardUserMsg) GetMsgID() int32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

type UserMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`         // 唯一键
	UserId int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	MsgId  int32 `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`   // 消息ID
	Pts    int32 `protobuf:"varint,4,opt,name=Pts,proto3" json:"Pts,omitempty"`       // 消息PTS
}

func (x *UserMsgId) Reset() {
	*x = UserMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMsgId) ProtoMessage() {}

func (x *UserMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMsgId.ProtoReflect.Descriptor instead.
func (*UserMsgId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{225}
}

func (x *UserMsgId) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserMsgId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserMsgId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *UserMsgId) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

type UserLocalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`   // 用户ID
	LocalId int64 `protobuf:"varint,2,opt,name=LocalId,proto3" json:"LocalId,omitempty"` // 用户LocalId
}

func (x *UserLocalId) Reset() {
	*x = UserLocalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLocalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLocalId) ProtoMessage() {}

func (x *UserLocalId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLocalId.ProtoReflect.Descriptor instead.
func (*UserLocalId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{226}
}

func (x *UserLocalId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserLocalId) GetLocalId() int64 {
	if x != nil {
		return x.LocalId
	}
	return 0
}

type ChannelLocalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	LocalId   int64 `protobuf:"varint,2,opt,name=LocalId,proto3" json:"LocalId,omitempty"`     // 超级群LocalId
}

func (x *ChannelLocalId) Reset() {
	*x = ChannelLocalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelLocalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelLocalId) ProtoMessage() {}

func (x *ChannelLocalId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelLocalId.ProtoReflect.Descriptor instead.
func (*ChannelLocalId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{227}
}

func (x *ChannelLocalId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelLocalId) GetLocalId() int64 {
	if x != nil {
		return x.LocalId
	}
	return 0
}

type UserIdAndWithIdAndTypeAndEncry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	WithId     int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"` // 消息交互方
	WithIdType int32 `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`
	Encry      int32 `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
}

func (x *UserIdAndWithIdAndTypeAndEncry) Reset() {
	*x = UserIdAndWithIdAndTypeAndEncry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdAndWithIdAndTypeAndEncry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdAndWithIdAndTypeAndEncry) ProtoMessage() {}

func (x *UserIdAndWithIdAndTypeAndEncry) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdAndWithIdAndTypeAndEncry.ProtoReflect.Descriptor instead.
func (*UserIdAndWithIdAndTypeAndEncry) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{228}
}

func (x *UserIdAndWithIdAndTypeAndEncry) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserIdAndWithIdAndTypeAndEncry) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *UserIdAndWithIdAndTypeAndEncry) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *UserIdAndWithIdAndTypeAndEncry) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Satus bool   `protobuf:"varint,1,opt,name=Satus,proto3" json:"Satus,omitempty"` // 状态，服务成功返回true ，出错返回 false
	Code  string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`    // 状态码值，成功状态码 200， 出错返回出错状态码 MSGDB_XXX
	Msg   string `protobuf:"bytes,3,opt,name=Msg,proto3" json:"Msg,omitempty"`      // 状态码值翻译信息
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{229}
}

func (x *Status) GetSatus() bool {
	if x != nil {
		return x.Satus
	}
	return false
}

func (x *Status) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Status) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UserIdAndWithId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	WithId int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"` // 消息交互方ID
}

func (x *UserIdAndWithId) Reset() {
	*x = UserIdAndWithId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdAndWithId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdAndWithId) ProtoMessage() {}

func (x *UserIdAndWithId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdAndWithId.ProtoReflect.Descriptor instead.
func (*UserIdAndWithId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{230}
}

func (x *UserIdAndWithId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserIdAndWithId) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

type WithIdAndType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithId     int32 `protobuf:"varint,1,opt,name=WithId,proto3" json:"WithId,omitempty"`         // 消息交互方ID
	WithIdType int32 `protobuf:"varint,2,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"` // 对话框类型
}

func (x *WithIdAndType) Reset() {
	*x = WithIdAndType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithIdAndType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithIdAndType) ProtoMessage() {}

func (x *WithIdAndType) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithIdAndType.ProtoReflect.Descriptor instead.
func (*WithIdAndType) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{231}
}

func (x *WithIdAndType) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *WithIdAndType) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

type UserIdAndWithIdAndType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	WithId int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"` // 消息交互方ID
	Type   int32 `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`     // 对话框类型
}

func (x *UserIdAndWithIdAndType) Reset() {
	*x = UserIdAndWithIdAndType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdAndWithIdAndType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdAndWithIdAndType) ProtoMessage() {}

func (x *UserIdAndWithIdAndType) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdAndWithIdAndType.ProtoReflect.Descriptor instead.
func (*UserIdAndWithIdAndType) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{232}
}

func (x *UserIdAndWithIdAndType) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserIdAndWithIdAndType) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *UserIdAndWithIdAndType) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type UserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
}

func (x *UserId) Reset() {
	*x = UserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserId) ProtoMessage() {}

func (x *UserId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserId.ProtoReflect.Descriptor instead.
func (*UserId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{233}
}

func (x *UserId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type UserIdAndPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	Pts    int32  `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`       // pts
	Limit  uint32 `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`   // 查询条数
}

func (x *UserIdAndPts) Reset() {
	*x = UserIdAndPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdAndPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdAndPts) ProtoMessage() {}

func (x *UserIdAndPts) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdAndPts.ProtoReflect.Descriptor instead.
func (*UserIdAndPts) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{234}
}

func (x *UserIdAndPts) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserIdAndPts) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *UserIdAndPts) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Bytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg [][]byte `protobuf:"bytes,1,rep,name=Msg,proto3" json:"Msg,omitempty"` // 消息二进制
}

func (x *Bytes) Reset() {
	*x = Bytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bytes) ProtoMessage() {}

func (x *Bytes) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bytes.ProtoReflect.Descriptor instead.
func (*Bytes) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{235}
}

func (x *Bytes) GetMsg() [][]byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

type UserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64        `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                      // 唯一键
	UserId       int32        `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`              // 用户ID
	WithId       int32        `protobuf:"varint,3,opt,name=WithId,proto3" json:"WithId,omitempty"`              // 消息交互方
	WithIdType   int32        `protobuf:"varint,4,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`      // 消息交互方类型 1.user 2:chat 3:channel
	MessageType  int32        `protobuf:"varint,5,opt,name=MessageType,proto3" json:"MessageType,omitempty"`    // 消息类型
	Flags        int32        `protobuf:"varint,6,opt,name=Flags,proto3" json:"Flags,omitempty"`                // 消息标识
	Out          bool         `protobuf:"varint,7,opt,name=Out,proto3" json:"Out,omitempty"`                    // 是否为自己发送
	Mentioned    bool         `protobuf:"varint,8,opt,name=Mentioned,proto3" json:"Mentioned,omitempty"`        // 是否提及他人
	MediaUnread  bool         `protobuf:"varint,9,opt,name=MediaUnread,proto3" json:"MediaUnread,omitempty"`    // 媒体是否已读
	Silent       bool         `protobuf:"varint,10,opt,name=Silent,proto3" json:"Silent,omitempty"`             // 是否静音
	Post         bool         `protobuf:"varint,11,opt,name=Post,proto3" json:"Post,omitempty"`                 // 是否邮递
	GroupId      int64        `protobuf:"varint,12,opt,name=GroupId,proto3" json:"GroupId,omitempty"`           // 图片组ID
	MsgId        int32        `protobuf:"varint,13,opt,name=MsgId,proto3" json:"MsgId,omitempty"`               // 消息id
	ToId         int32        `protobuf:"varint,14,opt,name=ToId,proto3" json:"ToId,omitempty"`                 // 接收方id
	Pts          int32        `protobuf:"varint,15,opt,name=Pts,proto3" json:"Pts,omitempty"`                   // 消息的pts
	FwdFrom      []byte       `protobuf:"bytes,16,opt,name=FwdFrom,proto3" json:"FwdFrom,omitempty"`            // 引用
	ViaBotId     int32        `protobuf:"varint,17,opt,name=ViaBotId,proto3" json:"ViaBotId,omitempty"`         // 机器人id
	ReplyToMsgId int32        `protobuf:"varint,18,opt,name=ReplyToMsgId,proto3" json:"ReplyToMsgId,omitempty"` // 回复id
	Date         int32        `protobuf:"varint,19,opt,name=Date,proto3" json:"Date,omitempty"`                 // 时间
	Message      string       `protobuf:"bytes,20,opt,name=Message,proto3" json:"Message,omitempty"`            // 消息内容
	Media        int64        `protobuf:"varint,21,opt,name=Media,proto3" json:"Media,omitempty"`               // 媒体id
	MediaData    []byte       `protobuf:"bytes,22,opt,name=MediaData,proto3" json:"MediaData,omitempty"`        // 媒体二进制
	ReplyMarkup  []byte       `protobuf:"bytes,23,opt,name=ReplyMarkup,proto3" json:"ReplyMarkup,omitempty"`    // 小键盘
	Entities     [][]byte     `protobuf:"bytes,24,rep,name=Entities,proto3" json:"Entities,omitempty"`          // 高亮
	FromId       int32        `protobuf:"varint,25,opt,name=FromId,proto3" json:"FromId,omitempty"`             // 发送方
	Views        int32        `protobuf:"varint,26,opt,name=Views,proto3" json:"Views,omitempty"`               // 查看人数
	EditDate     int32        `protobuf:"varint,27,opt,name=EditDate,proto3" json:"EditDate,omitempty"`         // 编辑时间
	Action       []byte       `protobuf:"bytes,28,opt,name=Action,proto3" json:"Action,omitempty"`              // 行为
	RandomId     int64        `protobuf:"varint,29,opt,name=RandomId,proto3" json:"RandomId,omitempty"`         // 随机id
	Uuid         int64        `protobuf:"varint,30,opt,name=Uuid,proto3" json:"Uuid,omitempty"`                 // 消息全局唯一id
	InsertDate   int32        `protobuf:"varint,31,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`     // 插入时间
	UpdateDate   int32        `protobuf:"varint,32,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`     // 更新时间
	Encry        int32        `protobuf:"varint,33,opt,name=Encry,proto3" json:"Encry,omitempty"`               // 是否加密信息 0: 不加密 1：加密
	Combination  *Combination `protobuf:"bytes,34,opt,name=Combination,proto3" json:"Combination,omitempty"`    // 预留字段
}

func (x *UserMsg) Reset() {
	*x = UserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMsg) ProtoMessage() {}

func (x *UserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMsg.ProtoReflect.Descriptor instead.
func (*UserMsg) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{236}
}

func (x *UserMsg) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserMsg) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *UserMsg) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *UserMsg) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *UserMsg) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *UserMsg) GetOut() bool {
	if x != nil {
		return x.Out
	}
	return false
}

func (x *UserMsg) GetMentioned() bool {
	if x != nil {
		return x.Mentioned
	}
	return false
}

func (x *UserMsg) GetMediaUnread() bool {
	if x != nil {
		return x.MediaUnread
	}
	return false
}

func (x *UserMsg) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *UserMsg) GetPost() bool {
	if x != nil {
		return x.Post
	}
	return false
}

func (x *UserMsg) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UserMsg) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *UserMsg) GetToId() int32 {
	if x != nil {
		return x.ToId
	}
	return 0
}

func (x *UserMsg) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *UserMsg) GetFwdFrom() []byte {
	if x != nil {
		return x.FwdFrom
	}
	return nil
}

func (x *UserMsg) GetViaBotId() int32 {
	if x != nil {
		return x.ViaBotId
	}
	return 0
}

func (x *UserMsg) GetReplyToMsgId() int32 {
	if x != nil {
		return x.ReplyToMsgId
	}
	return 0
}

func (x *UserMsg) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *UserMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserMsg) GetMedia() int64 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *UserMsg) GetMediaData() []byte {
	if x != nil {
		return x.MediaData
	}
	return nil
}

func (x *UserMsg) GetReplyMarkup() []byte {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *UserMsg) GetEntities() [][]byte {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *UserMsg) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *UserMsg) GetViews() int32 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *UserMsg) GetEditDate() int32 {
	if x != nil {
		return x.EditDate
	}
	return 0
}

func (x *UserMsg) GetAction() []byte {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *UserMsg) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *UserMsg) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *UserMsg) GetInsertDate() int32 {
	if x != nil {
		return x.InsertDate
	}
	return 0
}

func (x *UserMsg) GetUpdateDate() int32 {
	if x != nil {
		return x.UpdateDate
	}
	return 0
}

func (x *UserMsg) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *UserMsg) GetCombination() *Combination {
	if x != nil {
		return x.Combination
	}
	return nil
}

type Combination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MentionedSlice []*MentionStatus `protobuf:"bytes,1,rep,name=MentionedSlice,proto3" json:"MentionedSlice,omitempty"` // @人 二进制
	KeyId          []int64          `protobuf:"varint,2,rep,packed,name=KeyId,proto3" json:"KeyId,omitempty"`           // keyId 判断
}

func (x *Combination) Reset() {
	*x = Combination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Combination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Combination) ProtoMessage() {}

func (x *Combination) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Combination.ProtoReflect.Descriptor instead.
func (*Combination) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{237}
}

func (x *Combination) GetMentionedSlice() []*MentionStatus {
	if x != nil {
		return x.MentionedSlice
	}
	return nil
}

func (x *Combination) GetKeyId() []int64 {
	if x != nil {
		return x.KeyId
	}
	return nil
}

type MentionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Status int32 `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *MentionStatus) Reset() {
	*x = MentionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MentionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentionStatus) ProtoMessage() {}

func (x *MentionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentionStatus.ProtoReflect.Descriptor instead.
func (*MentionStatus) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{238}
}

func (x *MentionStatus) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MentionStatus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UserIdAndMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // 用户ID
	MsgId  int32 `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`   // 消息ID
}

func (x *UserIdAndMsgId) Reset() {
	*x = UserIdAndMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdAndMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdAndMsgId) ProtoMessage() {}

func (x *UserIdAndMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdAndMsgId.ProtoReflect.Descriptor instead.
func (*UserIdAndMsgId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{239}
}

func (x *UserIdAndMsgId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserIdAndMsgId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type UUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32 `protobuf:"varint,1,opt,name=Userid,proto3" json:"Userid,omitempty"` // 用户ID
	UUID   int64 `protobuf:"varint,2,opt,name=UUID,proto3" json:"UUID,omitempty"`     // 消息UUID
}

func (x *UUID) Reset() {
	*x = UUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUID) ProtoMessage() {}

func (x *UUID) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUID.ProtoReflect.Descriptor instead.
func (*UUID) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{240}
}

func (x *UUID) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *UUID) GetUUID() int64 {
	if x != nil {
		return x.UUID
	}
	return 0
}

type MsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId int32 `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"` // 消息ID
}

func (x *MsgId) Reset() {
	*x = MsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgId) ProtoMessage() {}

func (x *MsgId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgId.ProtoReflect.Descriptor instead.
func (*MsgId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{241}
}

func (x *MsgId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type UUIDS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int32   `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`      // 用户ID
	UUIDS  []int64 `protobuf:"varint,2,rep,packed,name=UUIDS,proto3" json:"UUIDS,omitempty"` // 消息UUID集合
}

func (x *UUIDS) Reset() {
	*x = UUIDS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUIDS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUIDS) ProtoMessage() {}

func (x *UUIDS) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUIDS.ProtoReflect.Descriptor instead.
func (*UUIDS) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{242}
}

func (x *UUIDS) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *UUIDS) GetUUIDS() []int64 {
	if x != nil {
		return x.UUIDS
	}
	return nil
}

type MsgIDList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId     []int32 `protobuf:"varint,1,rep,packed,name=MsgId,proto3" json:"MsgId,omitempty"`  // 消息ID
	Pts       []int32 `protobuf:"varint,2,rep,packed,name=Pts,proto3" json:"Pts,omitempty"`      // pts
	LastMsgId int32   `protobuf:"varint,3,opt,name=LastMsgId,proto3" json:"LastMsgId,omitempty"` // 删除的最大消息ID
	Count     int32   `protobuf:"varint,4,opt,name=Count,proto3" json:"Count,omitempty"`         // 删除消息条数
}

func (x *MsgIDList) Reset() {
	*x = MsgIDList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgIDList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgIDList) ProtoMessage() {}

func (x *MsgIDList) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgIDList.ProtoReflect.Descriptor instead.
func (*MsgIDList) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{243}
}

func (x *MsgIDList) GetMsgId() []int32 {
	if x != nil {
		return x.MsgId
	}
	return nil
}

func (x *MsgIDList) GetPts() []int32 {
	if x != nil {
		return x.Pts
	}
	return nil
}

func (x *MsgIDList) GetLastMsgId() int32 {
	if x != nil {
		return x.LastMsgId
	}
	return 0
}

func (x *MsgIDList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type UserIdAndWithIdAndMsgIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`        // 用户ID
	WithId int32   `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`        // 消息交互方ID
	MsgIds []int32 `protobuf:"varint,3,rep,packed,name=MsgIds,proto3" json:"MsgIds,omitempty"` // 消息ID集合
}

func (x *UserIdAndWithIdAndMsgIds) Reset() {
	*x = UserIdAndWithIdAndMsgIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdAndWithIdAndMsgIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdAndWithIdAndMsgIds) ProtoMessage() {}

func (x *UserIdAndWithIdAndMsgIds) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdAndWithIdAndMsgIds.ProtoReflect.Descriptor instead.
func (*UserIdAndWithIdAndMsgIds) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{244}
}

func (x *UserIdAndWithIdAndMsgIds) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserIdAndWithIdAndMsgIds) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *UserIdAndWithIdAndMsgIds) GetMsgIds() []int32 {
	if x != nil {
		return x.MsgIds
	}
	return nil
}

type UserIdAndRandomId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`     // 用户id
	RandomId int64 `protobuf:"varint,2,opt,name=RandomId,proto3" json:"RandomId,omitempty"` // randomid
	Handle   int32 `protobuf:"varint,3,opt,name=Handle,proto3" json:"Handle,omitempty"`     // 1: put 2: delete
}

func (x *UserIdAndRandomId) Reset() {
	*x = UserIdAndRandomId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdAndRandomId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdAndRandomId) ProtoMessage() {}

func (x *UserIdAndRandomId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdAndRandomId.ProtoReflect.Descriptor instead.
func (*UserIdAndRandomId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{245}
}

func (x *UserIdAndRandomId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserIdAndRandomId) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *UserIdAndRandomId) GetHandle() int32 {
	if x != nil {
		return x.Handle
	}
	return 0
}

type ReplyGetRandomStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // 查询接口处理状态 true: 正在处理  false： 未处理
}

func (x *ReplyGetRandomStatus) Reset() {
	*x = ReplyGetRandomStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetRandomStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetRandomStatus) ProtoMessage() {}

func (x *ReplyGetRandomStatus) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetRandomStatus.ProtoReflect.Descriptor instead.
func (*ReplyGetRandomStatus) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{246}
}

func (x *ReplyGetRandomStatus) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

// 搜索媒体消息的filter请求参数
type SearchMediaMsgByFilterReqPara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`              // 发起搜索用户标识
	WithId    int32   `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`              // 消息交互方标识
	WithType  int32   `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`          // 对话框类型, 1:user 2: chat 3: channel
	Keyword   string  `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`             // 搜索的文本关键字
	FromId    int32   `protobuf:"varint,5,opt,name=FromId,proto3" json:"FromId,omitempty"`              // 仅返回指定用户标识发送的消息, 仅用于非单聊对话框参数
	MediaType []int32 `protobuf:"varint,6,rep,packed,name=MediaType,proto3" json:"MediaType,omitempty"` // 媒体类型, 见协议标识定义
	MinDate   int32   `protobuf:"varint,7,opt,name=MinDate,proto3" json:"MinDate,omitempty"`            // 消息最小发送日期
	MaxDate   int32   `protobuf:"varint,8,opt,name=MaxDate,proto3" json:"MaxDate,omitempty"`            // 消息最大发送日期
	OffsetId  int32   `protobuf:"varint,9,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`          // 仅返回从指定消息标识开始的消息, 查询小于 OffsetId Limit-AddOffset 条, 如果 OffsetId 等于0则取最新的 limit 条
	AddOffset int32   `protobuf:"varint,10,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`       // 附加偏移, 向下取消息条数， 如果不等于0则取大于且等于 OffsetId AddOffset 绝对值条
	Limit     int32   `protobuf:"varint,11,opt,name=Limit,proto3" json:"Limit,omitempty"`               // 返回的结果条数
	MaxId     int32   `protobuf:"varint,12,opt,name=MaxId,proto3" json:"MaxId,omitempty"`               // 返回的最大消息标识
	MinId     int32   `protobuf:"varint,13,opt,name=MinId,proto3" json:"MinId,omitempty"`               // 返回的最小消息标识
	Hash      int32   `protobuf:"varint,14,opt,name=Hash,proto3" json:"Hash,omitempty"`                 // 哈希，保留用
}

func (x *SearchMediaMsgByFilterReqPara) Reset() {
	*x = SearchMediaMsgByFilterReqPara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMediaMsgByFilterReqPara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMediaMsgByFilterReqPara) ProtoMessage() {}

func (x *SearchMediaMsgByFilterReqPara) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMediaMsgByFilterReqPara.ProtoReflect.Descriptor instead.
func (*SearchMediaMsgByFilterReqPara) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{247}
}

func (x *SearchMediaMsgByFilterReqPara) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SearchMediaMsgByFilterReqPara) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *SearchMediaMsgByFilterReqPara) GetWithType() int32 {
	if x != nil {
		return x.WithType
	}
	return 0
}

func (x *SearchMediaMsgByFilterReqPara) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchMediaMsgByFilterReqPara) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *SearchMediaMsgByFilterReqPara) GetMediaType() []int32 {
	if x != nil {
		return x.MediaType
	}
	return nil
}

func (x *SearchMediaMsgByFilterReqPara) GetMinDate() int32 {
	if x != nil {
		return x.MinDate
	}
	return 0
}

func (x *SearchMediaMsgByFilterReqPara) GetMaxDate() int32 {
	if x != nil {
		return x.MaxDate
	}
	return 0
}

func (x *SearchMediaMsgByFilterReqPara) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *SearchMediaMsgByFilterReqPara) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *SearchMediaMsgByFilterReqPara) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchMediaMsgByFilterReqPara) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *SearchMediaMsgByFilterReqPara) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *SearchMediaMsgByFilterReqPara) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

// 搜索媒体消息的filter响应数据
type SearchMediaMsgByFilterRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*UserMsg `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"` // 某filter的消息数据
	Count    int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`      // 某filter的消息数量
	Pts      int32      `protobuf:"varint,3,opt,name=pts,proto3" json:"pts,omitempty"`          // 群pts
}

func (x *SearchMediaMsgByFilterRespData) Reset() {
	*x = SearchMediaMsgByFilterRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMediaMsgByFilterRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMediaMsgByFilterRespData) ProtoMessage() {}

func (x *SearchMediaMsgByFilterRespData) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMediaMsgByFilterRespData.ProtoReflect.Descriptor instead.
func (*SearchMediaMsgByFilterRespData) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{248}
}

func (x *SearchMediaMsgByFilterRespData) GetMessages() []*UserMsg {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *SearchMediaMsgByFilterRespData) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SearchMediaMsgByFilterRespData) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

// 单聊对话框媒体搜索请求
type ReqSearchUserMediaMsgByFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Para  *SearchMediaMsgByFilterReqPara `protobuf:"bytes,1,opt,name=para,proto3" json:"para,omitempty"`   // 搜索参数
	Debug *pbcomm.Debug                  `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqSearchUserMediaMsgByFilter) Reset() {
	*x = ReqSearchUserMediaMsgByFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSearchUserMediaMsgByFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSearchUserMediaMsgByFilter) ProtoMessage() {}

func (x *ReqSearchUserMediaMsgByFilter) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSearchUserMediaMsgByFilter.ProtoReflect.Descriptor instead.
func (*ReqSearchUserMediaMsgByFilter) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{249}
}

func (x *ReqSearchUserMediaMsgByFilter) GetPara() *SearchMediaMsgByFilterReqPara {
	if x != nil {
		return x.Para
	}
	return nil
}

func (x *ReqSearchUserMediaMsgByFilter) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 单聊对话框媒体搜索响应
type RespSearchUserMediaMsgByFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     *SearchMediaMsgByFilterRespData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`         // 结果数据
	ReplyErr *ReplyErr                       `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *RespSearchUserMediaMsgByFilter) Reset() {
	*x = RespSearchUserMediaMsgByFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespSearchUserMediaMsgByFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespSearchUserMediaMsgByFilter) ProtoMessage() {}

func (x *RespSearchUserMediaMsgByFilter) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespSearchUserMediaMsgByFilter.ProtoReflect.Descriptor instead.
func (*RespSearchUserMediaMsgByFilter) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{250}
}

func (x *RespSearchUserMediaMsgByFilter) GetData() *SearchMediaMsgByFilterRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RespSearchUserMediaMsgByFilter) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

// 群或频道对话框媒体搜索请求
type ReqSearchChannelMediaMsgByFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Para  *SearchMediaMsgByFilterReqPara `protobuf:"bytes,1,opt,name=para,proto3" json:"para,omitempty"`   // 搜索参数
	Debug *pbcomm.Debug                  `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqSearchChannelMediaMsgByFilter) Reset() {
	*x = ReqSearchChannelMediaMsgByFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSearchChannelMediaMsgByFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSearchChannelMediaMsgByFilter) ProtoMessage() {}

func (x *ReqSearchChannelMediaMsgByFilter) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSearchChannelMediaMsgByFilter.ProtoReflect.Descriptor instead.
func (*ReqSearchChannelMediaMsgByFilter) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{251}
}

func (x *ReqSearchChannelMediaMsgByFilter) GetPara() *SearchMediaMsgByFilterReqPara {
	if x != nil {
		return x.Para
	}
	return nil
}

func (x *ReqSearchChannelMediaMsgByFilter) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 群或频道对话框媒体搜索响应
type RespSearchChannelMediaMsgByFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     *SearchMediaMsgByFilterRespData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`         // 结果数据
	ReplyErr *ReplyErr                       `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *RespSearchChannelMediaMsgByFilter) Reset() {
	*x = RespSearchChannelMediaMsgByFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespSearchChannelMediaMsgByFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespSearchChannelMediaMsgByFilter) ProtoMessage() {}

func (x *RespSearchChannelMediaMsgByFilter) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespSearchChannelMediaMsgByFilter.ProtoReflect.Descriptor instead.
func (*RespSearchChannelMediaMsgByFilter) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{252}
}

func (x *RespSearchChannelMediaMsgByFilter) GetData() *SearchMediaMsgByFilterRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RespSearchChannelMediaMsgByFilter) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

// Begin added by six xionger at 2020-05-15 for 取指定对话框消息未读数
// 查询对话框数据
type QueryDialogData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`           // 用户标识
	WithId      int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`           // 交互方标识
	UnreadCount int32 `protobuf:"varint,3,opt,name=UnreadCount,proto3" json:"UnreadCount,omitempty"` // 交互方标识
}

func (x *QueryDialogData) Reset() {
	*x = QueryDialogData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDialogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDialogData) ProtoMessage() {}

func (x *QueryDialogData) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDialogData.ProtoReflect.Descriptor instead.
func (*QueryDialogData) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{253}
}

func (x *QueryDialogData) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QueryDialogData) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *QueryDialogData) GetUnreadCount() int32 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

// 单聊对话框消息未读数请求
type ReqGetDialogUnreadCountByUserIdAndWithId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DialogList []*QueryDialogData `protobuf:"bytes,1,rep,name=DialogList,proto3" json:"DialogList,omitempty"` // 对话框列表
	Debug      *pbcomm.Debug      `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`           // 日志前缀信息
}

func (x *ReqGetDialogUnreadCountByUserIdAndWithId) Reset() {
	*x = ReqGetDialogUnreadCountByUserIdAndWithId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetDialogUnreadCountByUserIdAndWithId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetDialogUnreadCountByUserIdAndWithId) ProtoMessage() {}

func (x *ReqGetDialogUnreadCountByUserIdAndWithId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetDialogUnreadCountByUserIdAndWithId.ProtoReflect.Descriptor instead.
func (*ReqGetDialogUnreadCountByUserIdAndWithId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{254}
}

func (x *ReqGetDialogUnreadCountByUserIdAndWithId) GetDialogList() []*QueryDialogData {
	if x != nil {
		return x.DialogList
	}
	return nil
}

func (x *ReqGetDialogUnreadCountByUserIdAndWithId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 单聊对话框消息未读数响应
type RespGetDialogUnreadCountByUserIdAndWithId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DialogList []*QueryDialogData `protobuf:"bytes,1,rep,name=DialogList,proto3" json:"DialogList,omitempty"` // 对话框列表
	ReplyErr   *ReplyErr          `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`     // 返回错误描述结构体
}

func (x *RespGetDialogUnreadCountByUserIdAndWithId) Reset() {
	*x = RespGetDialogUnreadCountByUserIdAndWithId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespGetDialogUnreadCountByUserIdAndWithId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespGetDialogUnreadCountByUserIdAndWithId) ProtoMessage() {}

func (x *RespGetDialogUnreadCountByUserIdAndWithId) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespGetDialogUnreadCountByUserIdAndWithId.ProtoReflect.Descriptor instead.
func (*RespGetDialogUnreadCountByUserIdAndWithId) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{255}
}

func (x *RespGetDialogUnreadCountByUserIdAndWithId) GetDialogList() []*QueryDialogData {
	if x != nil {
		return x.DialogList
	}
	return nil
}

func (x *RespGetDialogUnreadCountByUserIdAndWithId) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqShDeleteUserHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	UserId    int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`       // 用户ID
	MaxMsgId  int32 `protobuf:"varint,3,opt,name=MaxMsgId,proto3" json:"MaxMsgId,omitempty"`   // 消息ID， 删除小于等于MaxMsgId记录
}

func (x *ReqShDeleteUserHistory) Reset() {
	*x = ReqShDeleteUserHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagedb_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqShDeleteUserHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqShDeleteUserHistory) ProtoMessage() {}

func (x *ReqShDeleteUserHistory) ProtoReflect() protoreflect.Message {
	mi := &file_messagedb_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqShDeleteUserHistory.ProtoReflect.Descriptor instead.
func (*ReqShDeleteUserHistory) Descriptor() ([]byte, []int) {
	return file_messagedb_proto_rawDescGZIP(), []int{256}
}

func (x *ReqShDeleteUserHistory) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqShDeleteUserHistory) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqShDeleteUserHistory) GetMaxMsgId() int32 {
	if x != nil {
		return x.MaxMsgId
	}
	return 0
}

var File_messagedb_proto protoreflect.FileDescriptor

var file_messagedb_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x1a, 0x13, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x0b, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x21,
	0x0a, 0x1f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x47, 0x0a, 0x11, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x68, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc0, 0x01,
	0x0a, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x6c, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x72,
	0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x25, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x0c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x29, 0x0a,
	0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x22, 0x47, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22,
	0x4a, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x22, 0x4a, 0x0a, 0x12, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x0f, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x49, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x47, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x3e, 0x0a,
	0x0c, 0x4d, 0x73, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x4d, 0x61, 0x78, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x4d, 0x61, 0x78, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x73, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x4d, 0x73, 0x67, 0x73, 0x22, 0x85, 0x01,
	0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x3e, 0x0a,
	0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x0d,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x32, 0x0a,
	0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73,
	0x67, 0x22, 0x6a, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x14, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x73, 0x22, 0x91, 0x01,
	0x0a, 0x11, 0x52, 0x65, 0x71, 0x46, 0x6f, 0x72, 0x57, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x73, 0x22, 0x85, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x48, 0x69, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x6c, 0x66, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57,
	0x69, 0x74, 0x68, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74,
	0x68, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x22, 0x4a, 0x0a, 0x10, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46,
	0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x57, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x57, 0x61, 0x72, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x46,
	0x6f, 0x72, 0x57, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x46, 0x6f, 0x72, 0x57, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0e,
	0x46, 0x6f, 0x72, 0x57, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x4f,
	0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x22,
	0x6b, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e,
	0x64, 0x50, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x0e,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x77, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x49, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64,
	0x4d, 0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xaf, 0x03, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e,
	0x67, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12,
	0x3d, 0x0a, 0x09, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x09, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x54, 0x6f, 0x70, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x54, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x75, 0x6e,
	0x6d, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x55,
	0x6e, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3d, 0x0a, 0x1b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x75, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x41, 0x0a, 0x1d, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x6d, 0x75, 0x74, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x55, 0x6e,
	0x6d, 0x75, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x77, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x2c, 0x0a,
	0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x59, 0x0a, 0x1a, 0x52,
	0x65, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x55, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x54, 0x0a,
	0x18, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x56, 0x0a, 0x1a,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x91, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x52, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x60, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x93, 0x01, 0x0a, 0x1d, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x52,
	0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72,
	0x22, 0x8f, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x23, 0x0a,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x6a, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x09,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x7a,
	0x0a, 0x13, 0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x0d, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x22, 0x6a, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4f,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x59, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x0d, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x22, 0x4e, 0x0a, 0x0f, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4f, 0x0a, 0x10, 0x52, 0x65,
	0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x6b, 0x0a, 0x14, 0x52,
	0x65, 0x71, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x6c, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x32, 0x0a,
	0x09, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x50, 0x74, 0x73,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x09, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x76, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x66, 0x66, 0x42, 0x79, 0x50, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x50, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x9b,
	0x01, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x42,
	0x79, 0x50, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x54, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x22, 0x77, 0x0a, 0x10,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x44, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x74, 0x73, 0x53, 0x6c, 0x69, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x50, 0x74, 0x73, 0x53, 0x6c, 0x69, 0x22, 0x43, 0x0a, 0x11, 0x52,
	0x65, 0x71, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x78, 0x50,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x61, 0x78, 0x50, 0x74, 0x73,
	0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x74,
	0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22,
	0x4a, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x66, 0x66, 0x12, 0x34, 0x0a, 0x0a, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x0a, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x14, 0x52,
	0x65, 0x71, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x73, 0x67, 0x12, 0x3b, 0x0a, 0x0c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x73, 0x67, 0x52, 0x0c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67,
	0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x7f, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x73, 0x67, 0x12, 0x3d, 0x0a, 0x0d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x73, 0x67, 0x52, 0x0d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67,
	0x73, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x65, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x55, 0x0a,
	0x14, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x0d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x73, 0x67, 0x73, 0x22, 0x6d, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x2c, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x23,
	0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x22, 0xb9, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22,
	0xcf, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x66,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x6c, 0x66, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x64, 0x64,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x61, 0x78,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x23, 0x0a, 0x05,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x66, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x55, 0x55, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x68, 0x0a, 0x15, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x42, 0x79, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x23,
	0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x6d, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x55, 0x49, 0x44, 0x53,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x55, 0x55, 0x49, 0x44, 0x53, 0x12, 0x23, 0x0a,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x65, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x52, 0x65,
	0x71, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x75, 0x0a, 0x20, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0xb6, 0x01, 0x0a, 0x29, 0x52, 0x65, 0x71, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x41, 0x6e, 0x64,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x9c, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22,
	0xca, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc5, 0x01, 0x0a,
	0x1f, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x7d, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x22, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61,
	0x67, 0x65, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x22, 0xb1, 0x01, 0x0a, 0x29, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x12, 0x5f, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x7b, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0xc3, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x57, 0x0a, 0x24, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65,
	0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x87, 0x01, 0x0a, 0x24, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x47, 0x65,
	0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x22, 0xdc, 0x01, 0x0a, 0x25, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1d, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x5a, 0x0a, 0x27, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22,
	0xb0, 0x01, 0x0a, 0x27, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x57,
	0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x57,
	0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x23, 0x0a,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x92, 0x01, 0x0a, 0x29, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x65, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x1a, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x53, 0x0a, 0x21, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x50, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2e, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x73, 0x22, 0xb3, 0x01, 0x0a,
	0x21, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d,
	0x73, 0x67, 0x12, 0x47, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x10, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x89, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x6c, 0x66, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67,
	0x12, 0x47, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e,
	0x64, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x10, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0xa5,
	0x01, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x41, 0x64, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x61, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x64, 0x64, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x28, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x10, 0x01, 0x22, 0x90, 0x01, 0x0a, 0x19, 0x52, 0x65,
	0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x1d, 0x0a, 0x1b,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x22, 0x58, 0x0a, 0x19, 0x52,
	0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41,
	0x6c, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x3f, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6c, 0x6c, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e,
	0x64, 0x4d, 0x73, 0x67, 0x12, 0x47, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x23, 0x0a,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x95, 0x01, 0x0a, 0x2a, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x5a, 0x0a, 0x1b, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67,
	0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0xc2, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x73, 0x42, 0x79,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x82, 0x01, 0x0a, 0x17,
	0x52, 0x65, 0x71, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x7d, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x7e, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x6f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x9e, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x92, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x56, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0xd9, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52,
	0x65, 0x61, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x61,
	0x78, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x78, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65,
	0x61, 0x64, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x12, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x74,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x22, 0xb0, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x8e, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x6f, 0x50, 0x69, 0x6e, 0x67, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0xab, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x6f, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x8c, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x50, 0x69, 0x6e, 0x67, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x73, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67,
	0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x6a, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23,
	0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x3c, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x22, 0x58, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x3d, 0x0a, 0x0e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x17,
	0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x42,
	0x6f, 0x78, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x83, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x78, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x9c, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x64,
	0x49, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e,
	0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x9f, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x75,
	0x74, 0x62, 0x6f, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x61, 0x64,
	0x4f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x65, 0x61, 0x64, 0x4f,
	0x75, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x9d, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x5e, 0x0a, 0x1f, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x72,
	0x6c, 0x61, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x45, 0x72, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x72, 0x6c, 0x61, 0x6e, 0x67, 0x52, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x72, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x23, 0x0a,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x9f, 0x01, 0x0a, 0x2c, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x72, 0x6c, 0x61, 0x6e, 0x67, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x79, 0x0a, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x72, 0x6c, 0x61, 0x6e, 0x67,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x45, 0x72, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x72, 0x6c, 0x61, 0x6e, 0x67, 0x52, 0x10, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x72, 0x6c, 0x61, 0x6e, 0x67, 0x22,
	0x88, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x6b, 0x0a, 0x12, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x49, 0x44, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x78, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x53, 0x65,
	0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x22, 0x7c, 0x0a, 0x13, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x55, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x03,
	0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x22,
	0x78, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x86, 0x01, 0x0a, 0x1d, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45,
	0x72, 0x72, 0x22, 0x5f, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x83, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x4d,
	0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52,
	0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x5a, 0x0a, 0x15,
	0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x87, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45,
	0x72, 0x72, 0x22, 0x60, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x74,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x8d, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x22, 0x7c, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73,
	0x12, 0x3b, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52,
	0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x4d, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73,
	0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72,
	0x72, 0x22, 0x58, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x85, 0x01, 0x0a, 0x15,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x45, 0x72, 0x72, 0x22, 0x77, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x75,
	0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x8c, 0x01, 0x0a,
	0x1c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x75, 0x6d, 0x12, 0x3b, 0x0a,
	0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x0c, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72,
	0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x57, 0x0a, 0x12, 0x52,
	0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x0c, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72,
	0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x88, 0x01, 0x0a, 0x18,
	0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x8f, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x71, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x3c, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xaf, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x42, 0x79, 0x50, 0x74,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x61,
	0x78, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0xbf, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66,
	0x42, 0x79, 0x50, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x46, 0x69, 0x61, 0x6e, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x46, 0x69, 0x61, 0x6e, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x54, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x70,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x6f, 0x70,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x04, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72,
	0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x61, 0x0a, 0x0e, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x66, 0x66, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x40, 0x0a,
	0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x44, 0x69, 0x66, 0x66, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x10, 0x0a,
	0x03, 0x50, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x22,
	0x88, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x69, 0x66, 0x66, 0x12, 0x43, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x74, 0x73, 0x44, 0x69, 0x66, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x74, 0x73, 0x44, 0x69, 0x66, 0x66, 0x52, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x74, 0x73, 0x44, 0x69, 0x66, 0x66, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72,
	0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x5f, 0x0a, 0x1a, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x73, 0x74, 0x50,
	0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x98, 0x01, 0x0a, 0x1c,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c,
	0x61, 0x73, 0x74, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x10,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x70, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x50, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4e, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74,
	0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x70, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x68, 0x0a, 0x13, 0x52, 0x65,
	0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73,
	0x67, 0x12, 0x2c, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x77, 0x0a, 0x20, 0x52, 0x65, 0x71, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x6a, 0x0a,
	0x0d, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x84, 0x01, 0x0a, 0x0f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x75, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72,
	0x22, 0x71, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x22, 0xba, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3b,
	0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x4d, 0x73, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x52, 0x0c, 0x4d,
	0x73, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x74, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x50, 0x74, 0x73, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72,
	0x22, 0x58, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x72, 0x0a, 0x17, 0x52, 0x65,
	0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0xa8,
	0x01, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52,
	0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x6f, 0x0a, 0x14, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x77, 0x0a, 0x16, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64,
	0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x45, 0x72, 0x72, 0x22, 0x76, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x73, 0x42, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x9a, 0x01, 0x0a, 0x1b,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x73, 0x67, 0x73, 0x42, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e,
	0x64, 0x50, 0x74, 0x73, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0xae, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x98, 0x01, 0x0a, 0x19, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73,
	0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64,
	0x50, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x22, 0x58, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x4d, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0xbc,
	0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4d,
	0x61, 0x78, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x61, 0x78, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x22, 0xe6, 0x01,
	0x0a, 0x27, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x95, 0x01, 0x0a, 0x2a, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x2a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x92, 0x01, 0x0a, 0x29, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x34, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72,
	0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x5e, 0x0a, 0x2b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72,
	0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0xb4, 0x01, 0x0a, 0x20,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x12, 0x5f, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45,
	0x72, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x2a, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0xcf, 0x01, 0x0a, 0x2c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x6e, 0x0a, 0x1d, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x1d, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45,
	0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x76, 0x0a, 0x15,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x6f, 0x70, 0x4d, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x22, 0xbf, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x3e, 0x0a,
	0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x0d,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x32, 0x0a,
	0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73,
	0x67, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x5f, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x65, 0x0a, 0x1c, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64,
	0x49, 0x6e, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x75,
	0x0a, 0x1a, 0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x61,
	0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x57, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x99,
	0x01, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x50, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e,
	0x64, 0x4d, 0x73, 0x67, 0x52, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72,
	0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x5a, 0x0a, 0x13, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x73, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x9d, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x73,
	0x12, 0x53, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x73, 0x52,
	0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e,
	0x64, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x7d, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x44, 0x0a, 0x0f, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x52,
	0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x76, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64,
	0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x7f, 0x0a,
	0x12, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c,
	0x6f, 0x67, 0x52, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x2f, 0x0a,
	0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0xf7,
	0x01, 0x0a, 0x40, 0x52, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e,
	0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0xca, 0x01, 0x0a, 0x33, 0x52, 0x65, 0x71,
	0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x97, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x71, 0x46, 0x69, 0x6e,
	0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22,
	0xd6, 0x01, 0x0a, 0x37, 0x52, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41,
	0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0xa9, 0x01, 0x0a, 0x2a, 0x52, 0x65, 0x71,
	0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x22, 0xa3, 0x01, 0x0a, 0x28, 0x52, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64,
	0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x99, 0x01, 0x0a, 0x16, 0x52,
	0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x74, 0x41, 0x64, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4b, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x41,
	0x64, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x45, 0x72, 0x72, 0x22, 0xb7, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x47, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x7b, 0x0a,
	0x18, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x47, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52,
	0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72,
	0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x52,
	0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x74, 0x44, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x4b, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x44, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x08,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x96, 0x01,
	0x0a, 0x13, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x74, 0x41, 0x64, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x48, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x41, 0x64, 0x64, 0x12,
	0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72,
	0x22, 0xb4, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x41, 0x74, 0x47, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x78, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x47, 0x65, 0x74,
	0x12, 0x2e, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72,
	0x72, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x44, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x48, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x44, 0x65, 0x6c, 0x12, 0x2f, 0x0a,
	0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x6e,
	0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x22, 0x6b,
	0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x22, 0x66, 0x0a, 0x18, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x0d, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4f, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x22, 0x94,
	0x01, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x69, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xce, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x45,
	0x72, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x61, 0x76, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x48, 0x61, 0x76, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x8e, 0x01, 0x0a, 0x09, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x65, 0x22, 0x1d, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f,
	0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x22, 0x4c, 0x0a, 0x0c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4d, 0x73, 0x67,
	0x22, 0x82, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x50, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4d, 0x73,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x22, 0x80, 0x01,
	0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x65, 0x64, 0x4e, 0x75, 0x6d,
	0x22, 0x80, 0x06, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x69, 0x6e,
	0x67, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x50, 0x69, 0x6e, 0x67, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x61,
	0x78, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x49,
	0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x61,
	0x64, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x4d, 0x61,
	0x78, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x53,
	0x68, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x69, 0x6c,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x70, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x70, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x61,
	0x64, 0x6f, 0x75, 0x74, 0x70, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52,
	0x65, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x70, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x6e,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x18, 0x16, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x6e,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x57, 0x61, 0x72, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x77, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x46, 0x77, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x69, 0x61, 0x42,
	0x6f, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x56, 0x69, 0x61, 0x42,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x22, 0x5b, 0x0a, 0x09, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x22, 0x3f, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x1e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x64,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x22, 0x44, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x53, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73,
	0x67, 0x22, 0x41, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x0d, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x41, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a,
	0x16, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x20, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4e, 0x0a,
	0x0c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x19, 0x0a,
	0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x22, 0x91, 0x07, 0x0a, 0x07, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x4f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x4f, 0x75, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x6f,
	0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x6f, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x74, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x46, 0x77, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x46, 0x77, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x69,
	0x61, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x56, 0x69,
	0x61, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54,
	0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72,
	0x6f, 0x6d, 0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x69, 0x65, 0x77, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x64, 0x69, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x64, 0x69, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x0b,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x4d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x4d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x0d, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x3e, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e,
	0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x1d, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x05, 0x55, 0x55, 0x49, 0x44, 0x53,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x55, 0x49, 0x44,
	0x53, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x55, 0x55, 0x49, 0x44, 0x53, 0x22, 0x67,
	0x0a, 0x09, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03,
	0x50, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x62, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x22, 0x5f, 0x0a, 0x11, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x2e, 0x0a, 0x14,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xff, 0x02, 0x0a,
	0x1d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x73, 0x67, 0x42,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x50, 0x61, 0x72, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64,
	0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41,
	0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d,
	0x61, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x22, 0x78,
	0x0a, 0x1e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x73, 0x67,
	0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x71,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d,
	0x73, 0x67, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x70, 0x61,
	0x72, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4d, 0x73, 0x67, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x50, 0x61,
	0x72, 0x61, 0x52, 0x04, 0x70, 0x61, 0x72, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x90, 0x01,
	0x0a, 0x1e, 0x52, 0x65, 0x73, 0x70, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72,
	0x22, 0x85, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x71, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x50, 0x61, 0x72, 0x61, 0x52, 0x04, 0x70,
	0x61, 0x72, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x93, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x73,
	0x70, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3d,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a,
	0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x63,
	0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x28, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x0a, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x05,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x98, 0x01, 0x0a, 0x29, 0x52, 0x65, 0x73, 0x70, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12,
	0x3a, 0x0a, 0x0a, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45,
	0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x6a, 0x0a, 0x16,
	0x52, 0x65, 0x71, 0x53, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x61, 0x78, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x4d, 0x61, 0x78, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x2a, 0x23, 0x0a, 0x08, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x4d, 0x53, 0x47, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x10, 0x01, 0x32, 0x9a, 0x26,
	0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x62, 0x12, 0x5a, 0x0a, 0x15, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x73, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1f, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x1d, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x57, 0x61, 0x72,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4e,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x1a, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x0f,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x22,
	0x00, 0x12, 0x4a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44, 0x12, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x00, 0x12, 0x56, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x55, 0x55, 0x49, 0x44, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44, 0x73, 0x1a, 0x16, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x12, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x12, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x4f, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2b, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4f,
	0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x1a, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12,
	0x76, 0x0a, 0x26, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x34, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e,
	0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x1a,
	0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x4d, 0x73, 0x67, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x50, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2a, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65,
	0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x2c, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x32, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x1a, 0x34, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x24,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x29,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x73,
	0x67, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x1e, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x1a, 0x14, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6c,
	0x6c, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c,
	0x66, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64,
	0x4d, 0x73, 0x67, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x64, 0x64, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x41, 0x64, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x1a, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x64, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x22, 0x00, 0x12, 0x68, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x24, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6c, 0x6c,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x41, 0x6c, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x1a, 0x26, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6c, 0x6c, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x35, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41,
	0x6e, 0x64, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x26, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d,
	0x73, 0x67, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x1f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73,
	0x67, 0x73, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x73, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65, 0x1a, 0x1f,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x59, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x6c,
	0x66, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x1a, 0x1b, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x12,
	0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x1a, 0x1b,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x78, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x78, 0x1a, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x4a, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x33,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x1a, 0x34, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x6f, 0x50, 0x69, 0x6e,
	0x67, 0x65, 0x64, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x54,
	0x6f, 0x50, 0x69, 0x6e, 0x67, 0x65, 0x64, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12,
	0x4e, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x69, 0x6e, 0x67, 0x65, 0x64, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x69, 0x6e, 0x67, 0x65,
	0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12,
	0x65, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x65,
	0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x1a, 0x25, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47,
	0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e,
	0x64, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x20, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x1a, 0x22,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x49, 0x6e, 0x42, 0x6f, 0x78, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x42, 0x6f, 0x78, 0x4d, 0x61, 0x78, 0x49, 0x64,
	0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x52, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x78, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12,
	0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x78, 0x4d,
	0x61, 0x78, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x56, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6c, 0x6c,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x12, 0x25, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x75,
	0x74, 0x62, 0x6f, 0x78, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x1b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x29, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x67,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x19, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10,
	0x53, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67,
	0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x53, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67,
	0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x53, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x73, 0x67, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a,
	0x1f, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0x2f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x1f, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x22, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x30, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x41, 0x64, 0x64, 0x12, 0x1e, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x41, 0x64, 0x64, 0x1a, 0x20, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x41, 0x64, 0x64, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74,
	0x47, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74,
	0x47, 0x65, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x74, 0x47, 0x65, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x44, 0x65, 0x6c, 0x12, 0x1e, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x44, 0x65, 0x6c, 0x1a, 0x20, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x44, 0x65, 0x6c, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x54,
	0x6f, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x54, 0x6f, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x1a, 0x14, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6c,
	0x6c, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x18, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x26, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x28, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x61,
	0x70, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x23, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x61,
	0x70, 0x1a, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x32, 0x88, 0x20, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x42, 0x12, 0x6e, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x41, 0x6e,
	0x64, 0x50, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x1a, 0x28, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x74,
	0x73, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x1a, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x74, 0x73, 0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x74, 0x73, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e,
	0x75, 0x6d, 0x12, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52,
	0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x75, 0x6d, 0x1a, 0x27, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e,
	0x75, 0x6d, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x15, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52,
	0x65, 0x71, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74,
	0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x42,
	0x79, 0x50, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69,
	0x66, 0x66, 0x42, 0x79, 0x50, 0x74, 0x73, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x42, 0x79, 0x50, 0x74, 0x73, 0x22, 0x00, 0x12, 0x6b,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x73, 0x74,
	0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x1a, 0x27, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x73, 0x74,
	0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0x26, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x18, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73,
	0x67, 0x12, 0x26, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x00,
	0x12, 0x49, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x1d, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x2b, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x18,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x73, 0x1a, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x73, 0x67, 0x73, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x21, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x59, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x73, 0x42, 0x79, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x73, 0x67, 0x73, 0x42, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x1a, 0x26, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x73, 0x42, 0x79, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x73, 0x12, 0x60, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a,
	0x24, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x56, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x4d, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x4d, 0x73, 0x74, 0x22, 0x00, 0x12, 0x92, 0x01,
	0x0a, 0x24, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42,
	0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x32, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x34, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x26, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x34, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x1a, 0x36, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x22, 0x00, 0x12, 0x77, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x29, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x1a, 0x2b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x12, 0x35, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52,
	0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x37, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x27, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x2c, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4d, 0x73, 0x67, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x0d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x1b,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x13, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72,
	0x12, 0x61, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f,
	0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64,
	0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x12, 0xab, 0x01, 0x0a, 0x3d, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c,
	0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f,
	0x67, 0x12, 0x91, 0x01, 0x0a, 0x30, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x73, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x1d, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6e,
	0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x99, 0x01, 0x0a, 0x34, 0x46,
	0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x42, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x7f, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x35, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x7b, 0x0a, 0x25, 0x46, 0x69, 0x6e, 0x64, 0x73,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x33, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x5f, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x41, 0x64, 0x64, 0x12, 0x21, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x41, 0x64, 0x64, 0x1a, 0x23,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74,
	0x41, 0x64, 0x64, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x47, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x47, 0x65, 0x74, 0x1a,
	0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x74, 0x47, 0x65, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x44, 0x65, 0x6c, 0x12, 0x21, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x44, 0x65, 0x6c,
	0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x74, 0x44, 0x65, 0x6c, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x20, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x1a,
	0x22, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x22, 0x00, 0x32, 0xc4, 0x04, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x17, 0x53, 0x68, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x0f, 0x53, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x12, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x1a, 0x14,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x14, 0x53, 0x68, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x23,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x73, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x28, 0x53,
	0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x41,
	0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x29, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x1a, 0x53, 0x68,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x14, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0c, 0x53, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x73, 0x67, 0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x73, 0x1a, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x13, 0x53, 0x68, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x21,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x68,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x4d, 0x73,
	0x67, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x22, 0x00, 0x42, 0x1d, 0x5a, 0x1b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_messagedb_proto_rawDescOnce sync.Once
	file_messagedb_proto_rawDescData = file_messagedb_proto_rawDesc
)

func file_messagedb_proto_rawDescGZIP() []byte {
	file_messagedb_proto_rawDescOnce.Do(func() {
		file_messagedb_proto_rawDescData = protoimpl.X.CompressGZIP(file_messagedb_proto_rawDescData)
	})
	return file_messagedb_proto_rawDescData
}

var file_messagedb_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_messagedb_proto_msgTypes = make([]protoimpl.MessageInfo, 257)
var file_messagedb_proto_goTypes = []interface{}{
	(USER_MSG)(0),                                                            // 0: messagedb.USER_MSG
	(ReplyUpdateDialogAddUnreadInt)(0),                                       // 1: messagedb.ReplyUpdateDialogAddUnread.int
	(PtsHandleInt)(0),                                                        // 2: messagedb.PtsHandle.int
	(*ReplyNull)(nil),                                                        // 3: messagedb.ReplyNull
	(*ReplyUpdateUserDialogUpdateDate)(nil),                                  // 4: messagedb.ReplyUpdateUserDialogUpdateDate
	(*ReplyUpdateUserDialog)(nil),                                            // 5: messagedb.ReplyUpdateUserDialog
	(*ChannelIdAndLimit)(nil),                                                // 6: messagedb.ChannelIdAndLimit
	(*ChannelIdAndUserIdAndLimit)(nil),                                       // 7: messagedb.ChannelIdAndUserIdAndLimit
	(*ChannelIdAndAdminUsersAndEventFiltersAndUserId)(nil),                   // 8: messagedb.ChannelIdAndAdminUsersAndEventFiltersAndUserId
	(*ChannelIdAndAdminUsers)(nil),                                           // 9: messagedb.ChannelIdAndAdminUsers
	(*ChannelIdAndEventFilters)(nil),                                         // 10: messagedb.ChannelIdAndEventFilters
	(*ChannelIdAndAdminUsersAndEventFilters)(nil),                            // 11: messagedb.ChannelIdAndAdminUsersAndEventFilters
	(*ChannelIdAndEventFiltersAndUserId)(nil),                                // 12: messagedb.ChannelIdAndEventFiltersAndUserId
	(*ChannelMsgId)(nil),                                                     // 13: messagedb.ChannelMsgId
	(*ChannelId)(nil),                                                        // 14: messagedb.ChannelId
	(*ChannelIds)(nil),                                                       // 15: messagedb.ChannelIds
	(*ChannelIdAndMsgId)(nil),                                                // 16: messagedb.ChannelIdAndMsgId
	(*ChannelIdAndMsgIds)(nil),                                               // 17: messagedb.ChannelIdAndMsgIds
	(*ChannelIdAndUserId)(nil),                                               // 18: messagedb.ChannelIdAndUserId
	(*DialogIsCreated)(nil),                                                  // 19: messagedb.DialogIsCreated
	(*ChannelIdAndNum)(nil),                                                  // 20: messagedb.ChannelIdAndNum
	(*MsgsAndMaxId)(nil),                                                     // 21: messagedb.MsgsAndMaxId
	(*ChannelDialog)(nil),                                                    // 22: messagedb.ChannelDialog
	(*ChannelDialogAndMsg)(nil),                                              // 23: messagedb.ChannelDialogAndMsg
	(*ChannelDialogAndMsgs)(nil),                                             // 24: messagedb.ChannelDialogAndMsgs
	(*ReqForWardUserMsg)(nil),                                                // 25: messagedb.ReqForWardUserMsg
	(*ReqUserMsgHis)(nil),                                                    // 26: messagedb.ReqUserMsgHis
	(*DialogTopMessage)(nil),                                                 // 27: messagedb.DialogTopMessage
	(*ForWardUserMsgList)(nil),                                               // 28: messagedb.ForWardUserMsgList
	(*UserMsgList)(nil),                                                      // 29: messagedb.UserMsgList
	(*UserMsgListAndPts)(nil),                                                // 30: messagedb.UserMsgListAndPts
	(*UserDialogList)(nil),                                                   // 31: messagedb.UserDialogList
	(*UserDialogAndMsgList)(nil),                                             // 32: messagedb.UserDialogAndMsgList
	(*ReplyGetPingedDialogAndMsg)(nil),                                       // 33: messagedb.ReplyGetPingedDialogAndMsg
	(*UserDialogAndMsg)(nil),                                                 // 34: messagedb.UserDialogAndMsg
	(*ReqInsertOrUpdateUserMsgId)(nil),                                       // 35: messagedb.ReqInsertOrUpdateUserMsgId
	(*ReqIncreaseUserLocalId)(nil),                                           // 36: messagedb.ReqIncreaseUserLocalId
	(*ReplyIncreaseUserLocalId)(nil),                                         // 37: messagedb.ReplyIncreaseUserLocalId
	(*ReqGetCurrentUserLocalId)(nil),                                         // 38: messagedb.ReqGetCurrentUserLocalId
	(*ReplyGetCurrentUserLocalId)(nil),                                       // 39: messagedb.ReplyGetCurrentUserLocalId
	(*ReqIncreaseChannelLocalId)(nil),                                        // 40: messagedb.ReqIncreaseChannelLocalId
	(*ReplyIncreaseChannelLocalId)(nil),                                      // 41: messagedb.ReplyIncreaseChannelLocalId
	(*ReqGetCurrentChannelLocalId)(nil),                                      // 42: messagedb.ReqGetCurrentChannelLocalId
	(*ReplyGetCurrentChannelLocalId)(nil),                                    // 43: messagedb.ReplyGetCurrentChannelLocalId
	(*ReqIncreaseUserMsgId)(nil),                                             // 44: messagedb.ReqIncreaseUserMsgId
	(*ReqSetUserMsgId)(nil),                                                  // 45: messagedb.ReqSetUserMsgId
	(*ReqSetMsgIdImported)(nil),                                              // 46: messagedb.ReqSetMsgIdImported
	(*ReplySetMsgIdImported)(nil),                                            // 47: messagedb.ReplySetMsgIdImported
	(*ReqCheckMsgIdImported)(nil),                                            // 48: messagedb.ReqCheckMsgIdImported
	(*ReplyCheckMsgIdImported)(nil),                                          // 49: messagedb.ReplyCheckMsgIdImported
	(*ReqGetUserMsgId)(nil),                                                  // 50: messagedb.ReqGetUserMsgId
	(*ReqUpdateUserPts)(nil),                                                 // 51: messagedb.ReqUpdateUserPts
	(*ReqBatchUpdatUserPts)(nil),                                             // 52: messagedb.ReqBatchUpdatUserPts
	(*ReqStorePtsHandle)(nil),                                                // 53: messagedb.ReqStorePtsHandle
	(*ReqGetDiffByPts)(nil),                                                  // 54: messagedb.ReqGetDiffByPts
	(*ReplyGetDiffByPts)(nil),                                                // 55: messagedb.ReplyGetDiffByPts
	(*ReqGetActionDiff)(nil),                                                 // 56: messagedb.ReqGetActionDiff
	(*ReqDeletePtsHandle)(nil),                                               // 57: messagedb.ReqDeletePtsHandle
	(*ReqClearPtsHandle)(nil),                                                // 58: messagedb.ReqClearPtsHandle
	(*ReplyClearPtsHandle)(nil),                                              // 59: messagedb.ReplyClearPtsHandle
	(*ReplyDeletePtsHandle)(nil),                                             // 60: messagedb.ReplyDeletePtsHandle
	(*ReplyGetActionDiff)(nil),                                               // 61: messagedb.ReplyGetActionDiff
	(*ReqStoreOtherInfoMsg)(nil),                                             // 62: messagedb.ReqStoreOtherInfoMsg
	(*ReqBatchStoreOtherInfoMsg)(nil),                                        // 63: messagedb.ReqBatchStoreOtherInfoMsg
	(*ReqGetOtherInfoMsg)(nil),                                               // 64: messagedb.ReqGetOtherInfoMsg
	(*ReplyGetOtherInfoMsg)(nil),                                             // 65: messagedb.ReplyGetOtherInfoMsg
	(*ReqInsertOrUpdateUserMsg)(nil),                                         // 66: messagedb.ReqInsertOrUpdateUserMsg
	(*ReqGetForwardUserMsg)(nil),                                             // 67: messagedb.ReqGetForwardUserMsg
	(*ReqGetUserMsgHistory)(nil),                                             // 68: messagedb.ReqGetUserMsgHistory
	(*ReqGetUserMsgUUID)(nil),                                                // 69: messagedb.ReqGetUserMsgUUID
	(*ReqGetUserMsgIdByUUID)(nil),                                            // 70: messagedb.ReqGetUserMsgIdByUUID
	(*ReqGetUserMsgListByUUIDs)(nil),                                         // 71: messagedb.ReqGetUserMsgListByUUIDs
	(*ReqDeleteUserMsg)(nil),                                                 // 72: messagedb.ReqDeleteUserMsg
	(*ReqBatchDeleteUserMsg)(nil),                                            // 73: messagedb.ReqBatchDeleteUserMsg
	(*ReqGetOneUserMsgByUserIdAndMsgId)(nil),                                 // 74: messagedb.ReqGetOneUserMsgByUserIdAndMsgId
	(*ReqDeleteUserMsgByUserIdAndWithIdAndEncry)(nil),                        // 75: messagedb.ReqDeleteUserMsgByUserIdAndWithIdAndEncry
	(*ReqClearHistory)(nil),                                                  // 76: messagedb.ReqClearHistory
	(*GetMessageHistoryPageByMediaConfig)(nil),                               // 77: messagedb.GetMessageHistoryPageByMediaConfig
	(*ReqGetMessageHistoryPageByMedia)(nil),                                  // 78: messagedb.ReqGetMessageHistoryPageByMedia
	(*ReqInsertOrUpdateChannelMessageDeleteMark)(nil),                        // 79: messagedb.ReqInsertOrUpdateChannelMessageDeleteMark
	(*ReqGetChannelMessageDeleteMark)(nil),                                   // 80: messagedb.ReqGetChannelMessageDeleteMark
	(*ReqUserDialogSetUnreadMetionsCount)(nil),                               // 81: messagedb.ReqUserDialogSetUnreadMetionsCount
	(*ReplyUserDialogSetUnreadMetionsCount)(nil),                             // 82: messagedb.ReplyUserDialogSetUnreadMetionsCount
	(*ReqUserDialogGetUnreadMetionsCount)(nil),                               // 83: messagedb.ReqUserDialogGetUnreadMetionsCount
	(*ReplyUserDialogGetUnreadMetionsCount)(nil),                             // 84: messagedb.ReplyUserDialogGetUnreadMetionsCount
	(*ReqUserDialogChangeUnreadMetionsCount)(nil),                            // 85: messagedb.ReqUserDialogChangeUnreadMetionsCount
	(*ReplyUserDialogChangeUnreadMetionsCount)(nil),                          // 86: messagedb.ReplyUserDialogChangeUnreadMetionsCount
	(*ReqGetUserMediaMessageStatisticsByMedia)(nil),                          // 87: messagedb.ReqGetUserMediaMessageStatisticsByMedia
	(*ReplyGetUserMediaMessageStatisticsByMedia)(nil),                        // 88: messagedb.ReplyGetUserMediaMessageStatisticsByMedia
	(*ReplyGetMessageHistoryPageByMedia)(nil),                                // 89: messagedb.ReplyGetMessageHistoryPageByMedia
	(*ReqInsertOrUpdateUserDialogAndMsg)(nil),                                // 90: messagedb.ReqInsertOrUpdateUserDialogAndMsg
	(*ReqUpdateSelfDialogAndMsg)(nil),                                        // 91: messagedb.ReqUpdateSelfDialogAndMsg
	(*ReqUpdateDialogAddUnread)(nil),                                         // 92: messagedb.ReqUpdateDialogAddUnread
	(*ReplyUpdateDialogAddUnread)(nil),                                       // 93: messagedb.ReplyUpdateDialogAddUnread
	(*ReqUpdateDialogClearDraft)(nil),                                        // 94: messagedb.ReqUpdateDialogClearDraft
	(*ReplyUpdateDialogClearDraft)(nil),                                      // 95: messagedb.ReplyUpdateDialogClearDraft
	(*ReqGetUserDialogAllUnread)(nil),                                        // 96: messagedb.ReqGetUserDialogAllUnread
	(*ReplyGetUserDialogAllUnread)(nil),                                      // 97: messagedb.ReplyGetUserDialogAllUnread
	(*ReqUpdateReceDialogAndMsg)(nil),                                        // 98: messagedb.ReqUpdateReceDialogAndMsg
	(*ReqGetDialogAndMsgByUserIdAndWithIdAndType)(nil),                       // 99: messagedb.ReqGetDialogAndMsgByUserIdAndWithIdAndType
	(*ReqGetDialogAndMsgsByUserId)(nil),                                      // 100: messagedb.ReqGetDialogAndMsgsByUserId
	(*ReqGetDialogAndMsgsByPage)(nil),                                        // 101: messagedb.ReqGetDialogAndMsgsByPage
	(*ReqReadSelfDialogAndMsg)(nil),                                          // 102: messagedb.ReqReadSelfDialogAndMsg
	(*ReqUpdateReadinbox)(nil),                                               // 103: messagedb.ReqUpdateReadinbox
	(*ReqUpdateReadoutbox)(nil),                                              // 104: messagedb.ReqUpdateReadoutbox
	(*ReqDeleteUserDialog)(nil),                                              // 105: messagedb.ReqDeleteUserDialog
	(*ReqUpdateUserDialog)(nil),                                              // 106: messagedb.ReqUpdateUserDialog
	(*UpdateUserDialogParam)(nil),                                            // 107: messagedb.UpdateUserDialogParam
	(*ReqUpdateUserDialogUpdateDate)(nil),                                    // 108: messagedb.ReqUpdateUserDialogUpdateDate
	(*ReqUpdateDialogToPinged)(nil),                                          // 109: messagedb.ReqUpdateDialogToPinged
	(*ReqUpdateDialogToFolder)(nil),                                          // 110: messagedb.ReqUpdateDialogToFolder
	(*ReqCancelPingedDialog)(nil),                                            // 111: messagedb.ReqCancelPingedDialog
	(*ReqGetPingedDialogAndMsg)(nil),                                         // 112: messagedb.ReqGetPingedDialogAndMsg
	(*ReqGetLastLimitDialog)(nil),                                            // 113: messagedb.ReqGetLastLimitDialog
	(*UserRating)(nil),                                                       // 114: messagedb.UserRating
	(*ReplyGetLastLimitDialog)(nil),                                          // 115: messagedb.ReplyGetLastLimitDialog
	(*ReqUpdateReadInBoxMaxId)(nil),                                          // 116: messagedb.ReqUpdateReadInBoxMaxId
	(*ReqUpdateReadOutBoxMaxId)(nil),                                         // 117: messagedb.ReqUpdateReadOutBoxMaxId
	(*ReqUpdateChannelReadinbox)(nil),                                        // 118: messagedb.ReqUpdateChannelReadinbox
	(*ReqUpdateChannelReadoutbox)(nil),                                       // 119: messagedb.ReqUpdateChannelReadoutbox
	(*ReqDeleteUserDialogByChannelId)(nil),                                   // 120: messagedb.ReqDeleteUserDialogByChannelId
	(*ReqGetUserChannelDialogByUserId)(nil),                                  // 121: messagedb.ReqGetUserChannelDialogByUserId
	(*ReqStoreUserDialogErlang)(nil),                                         // 122: messagedb.ReqStoreUserDialogErlang
	(*ReqGetUserDialogErlangByUserIdWithIdWithType)(nil),                     // 123: messagedb.ReqGetUserDialogErlangByUserIdWithIdWithType
	(*ReplyGetUserDialogErlangByUserIdWithIdWithType)(nil),                   // 124: messagedb.ReplyGetUserDialogErlangByUserIdWithIdWithType
	(*ReqInsertRandomStatus)(nil),                                            // 125: messagedb.ReqInsertRandomStatus
	(*ReqGetRandomStatus)(nil),                                               // 126: messagedb.ReqGetRandomStatus
	(*ReqSetSuperGroupMsg)(nil),                                              // 127: messagedb.ReqSetSuperGroupMsg
	(*ReplySetSuperGroupMsg)(nil),                                            // 128: messagedb.ReplySetSuperGroupMsg
	(*ReqGetSuperGroupMsg)(nil),                                              // 129: messagedb.ReqGetSuperGroupMsg
	(*ReplyGetSuperGroupMsg)(nil),                                            // 130: messagedb.ReplyGetSuperGroupMsg
	(*ReqInsertMsgIdSerialCodeMap)(nil),                                      // 131: messagedb.ReqInsertMsgIdSerialCodeMap
	(*ReplyInsertMsgIdSerialCodeMap)(nil),                                    // 132: messagedb.ReplyInsertMsgIdSerialCodeMap
	(*ReqGetMsgIdSerialCodeMap)(nil),                                         // 133: messagedb.ReqGetMsgIdSerialCodeMap
	(*ReplyGetMsgIdSerialCodeMap)(nil),                                       // 134: messagedb.ReplyGetMsgIdSerialCodeMap
	(*MsgIdSerialCodeMapRecord)(nil),                                         // 135: messagedb.MsgIdSerialCodeMapRecord
	(*ReqUpdateChannelMsgId)(nil),                                            // 136: messagedb.ReqUpdateChannelMsgId
	(*ReplyUpdateChannelMsgId)(nil),                                          // 137: messagedb.ReplyUpdateChannelMsgId
	(*ReqUpdateChannelMsgIdAndPts)(nil),                                      // 138: messagedb.ReqUpdateChannelMsgIdAndPts
	(*ReplyUpdateChannelMsgIdAndPts)(nil),                                    // 139: messagedb.ReplyUpdateChannelMsgIdAndPts
	(*ReqSetChannelMsgIdAndPts)(nil),                                         // 140: messagedb.ReqSetChannelMsgIdAndPts
	(*ReplySetChannelMsgIdAndPts)(nil),                                       // 141: messagedb.ReplySetChannelMsgIdAndPts
	(*ReqUpdateChannelPts)(nil),                                              // 142: messagedb.ReqUpdateChannelPts
	(*ReplyUpdateChannelPts)(nil),                                            // 143: messagedb.ReplyUpdateChannelPts
	(*ReqUpdateChannelPtsWithNum)(nil),                                       // 144: messagedb.ReqUpdateChannelPtsWithNum
	(*ReplyUpdateChannelPtsWithNum)(nil),                                     // 145: messagedb.ReplyUpdateChannelPtsWithNum
	(*ReqGetChannelMsgId)(nil),                                               // 146: messagedb.ReqGetChannelMsgId
	(*ReplyGetChannelMsgId)(nil),                                             // 147: messagedb.ReplyGetChannelMsgId
	(*ReqStoreChannelPtsHandle)(nil),                                         // 148: messagedb.ReqStoreChannelPtsHandle
	(*ReqBatchStoreChannelPtsHandle)(nil),                                    // 149: messagedb.ReqBatchStoreChannelPtsHandle
	(*ReplyErr)(nil),                                                         // 150: messagedb.ReplyErr
	(*ReqGetChannelDiffByPts)(nil),                                           // 151: messagedb.ReqGetChannelDiffByPts
	(*ReplyGetChannelDiffByPts)(nil),                                         // 152: messagedb.ReplyGetChannelDiffByPts
	(*ReqGetUserDiff)(nil),                                                   // 153: messagedb.ReqGetUserDiff
	(*ChannelPtsDiff)(nil),                                                   // 154: messagedb.ChannelPtsDiff
	(*ReplyGetUserDiff)(nil),                                                 // 155: messagedb.ReplyGetUserDiff
	(*ReqGetChannelLastPtsHandle)(nil),                                       // 156: messagedb.ReqGetChannelLastPtsHandle
	(*ReplyGetChannelLastPtsHandle)(nil),                                     // 157: messagedb.ReplyGetChannelLastPtsHandle
	(*ReqDeleteChannelPtsHandle)(nil),                                        // 158: messagedb.ReqDeleteChannelPtsHandle
	(*ReplyDeleteChannelPtsHandle)(nil),                                      // 159: messagedb.ReplyDeleteChannelPtsHandle
	(*ReqInsertOrUpdateChannelMsg)(nil),                                      // 160: messagedb.ReqInsertOrUpdateChannelMsg
	(*ReqUpdateChannelMsg)(nil),                                              // 161: messagedb.ReqUpdateChannelMsg
	(*ReqBatchInsertOrUpdateChannelMsg)(nil),                                 // 162: messagedb.ReqBatchInsertOrUpdateChannelMsg
	(*ReqDeleteMsgs)(nil),                                                    // 163: messagedb.ReqDeleteMsgs
	(*ReplyDeleteMsgs)(nil),                                                  // 164: messagedb.ReplyDeleteMsgs
	(*ReqDeleteUserHistory)(nil),                                             // 165: messagedb.ReqDeleteUserHistory
	(*ReplyDeleteUserHistory)(nil),                                           // 166: messagedb.ReplyDeleteUserHistory
	(*ReqDeleteChannelMsg)(nil),                                              // 167: messagedb.ReqDeleteChannelMsg
	(*ReqDeleteChannelMessage)(nil),                                          // 168: messagedb.ReqDeleteChannelMessage
	(*ReplyDeleteChannelMessage)(nil),                                        // 169: messagedb.ReplyDeleteChannelMessage
	(*ReqGetChannelMessage)(nil),                                             // 170: messagedb.ReqGetChannelMessage
	(*ReplyGetChannelMessage)(nil),                                           // 171: messagedb.ReplyGetChannelMessage
	(*ReqGetChannelMsgsByMsgIds)(nil),                                        // 172: messagedb.ReqGetChannelMsgsByMsgIds
	(*ReplyGetChannelMsgsByMsgIds)(nil),                                      // 173: messagedb.ReplyGetChannelMsgsByMsgIds
	(*ReqGetChannelMsgHistory)(nil),                                          // 174: messagedb.ReqGetChannelMsgHistory
	(*ReplyGetChannelMsgHistory)(nil),                                        // 175: messagedb.ReplyGetChannelMsgHistory
	(*ReqGetChannelTopMst)(nil),                                              // 176: messagedb.ReqGetChannelTopMst
	(*GetChannelMediaMessageHistoryByMediaConfig)(nil),                       // 177: messagedb.GetChannelMediaMessageHistoryByMediaConfig
	(*ReqGetChannelMediaMessageHistoryByMedia)(nil),                          // 178: messagedb.ReqGetChannelMediaMessageHistoryByMedia
	(*ReplyGetChannelMediaMessageHistoryByMedia)(nil),                        // 179: messagedb.ReplyGetChannelMediaMessageHistoryByMedia
	(*ReplyInsertOrUpdateChannelMessageDeleteMark)(nil),                      // 180: messagedb.ReplyInsertOrUpdateChannelMessageDeleteMark
	(*ReplyGetChannelMessageDeleteMark)(nil),                                 // 181: messagedb.ReplyGetChannelMessageDeleteMark
	(*ReqGetChannelMediaMessageStatisticsByMedia)(nil),                       // 182: messagedb.ReqGetChannelMediaMessageStatisticsByMedia
	(*ReplyGetChannelMediaMessageStatisticsByMedia)(nil),                     // 183: messagedb.ReplyGetChannelMediaMessageStatisticsByMedia
	(*ReplyGetChannelTopMst)(nil),                                            // 184: messagedb.ReplyGetChannelTopMst
	(*ReqInsertOrUpdateChannelDialogAndMsg)(nil),                             // 185: messagedb.ReqInsertOrUpdateChannelDialogAndMsg
	(*ReqGetDialogMaxReadInMsgId)(nil),                                       // 186: messagedb.ReqGetDialogMaxReadInMsgId
	(*ReplyGetDialogMaxReadInMsgId)(nil),                                     // 187: messagedb.ReplyGetDialogMaxReadInMsgId
	(*ReqSetDialogMaxReadInMsgId)(nil),                                       // 188: messagedb.ReqSetDialogMaxReadInMsgId
	(*ReqGetDialogAndMsg)(nil),                                               // 189: messagedb.ReqGetDialogAndMsg
	(*ReplyGetDialogAndMsg)(nil),                                             // 190: messagedb.ReplyGetDialogAndMsg
	(*ReqGetDialogAndMsgs)(nil),                                              // 191: messagedb.ReqGetDialogAndMsgs
	(*ReplyGetDialogAndMsgs)(nil),                                            // 192: messagedb.ReplyGetDialogAndMsgs
	(*ReqStoreAdminLog)(nil),                                                 // 193: messagedb.ReqStoreAdminLog
	(*ReqFindsAdminLogByChannelId)(nil),                                      // 194: messagedb.ReqFindsAdminLogByChannelId
	(*ReplyFindsAdminLog)(nil),                                               // 195: messagedb.ReplyFindsAdminLog
	(*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId)(nil), // 196: messagedb.ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId
	(*ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId)(nil),              // 197: messagedb.ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId
	(*ReqFindsAdminLogByChannelIdAndUserId)(nil),                             // 198: messagedb.ReqFindsAdminLogByChannelIdAndUserId
	(*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters)(nil),          // 199: messagedb.ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters
	(*ReqFindsAdminLogByChannelIdAndEventFilters)(nil),                       // 200: messagedb.ReqFindsAdminLogByChannelIdAndEventFilters
	(*ReqFindsAdminLogByChannelIdAndAdminUsers)(nil),                         // 201: messagedb.ReqFindsAdminLogByChannelIdAndAdminUsers
	(*ReqChannelMessageAtAdd)(nil),                                           // 202: messagedb.ReqChannelMessageAtAdd
	(*ReplyChannelMessageAtAdd)(nil),                                         // 203: messagedb.ReplyChannelMessageAtAdd
	(*ReqChannelMessageAtGet)(nil),                                           // 204: messagedb.ReqChannelMessageAtGet
	(*ReplyChannelMessageAtGet)(nil),                                         // 205: messagedb.ReplyChannelMessageAtGet
	(*ReqChannelMessageAtDel)(nil),                                           // 206: messagedb.ReqChannelMessageAtDel
	(*ReplyChannelMessageAtDel)(nil),                                         // 207: messagedb.ReplyChannelMessageAtDel
	(*ReqUserMessageAtAdd)(nil),                                              // 208: messagedb.ReqUserMessageAtAdd
	(*ReplyUserMessageAtAdd)(nil),                                            // 209: messagedb.ReplyUserMessageAtAdd
	(*ReqUserMessageAtGet)(nil),                                              // 210: messagedb.ReqUserMessageAtGet
	(*ReplyUserMessageAtGet)(nil),                                            // 211: messagedb.ReplyUserMessageAtGet
	(*ReqUserMessageAtDel)(nil),                                              // 212: messagedb.ReqUserMessageAtDel
	(*ReplyUserMessageAtDel)(nil),                                            // 213: messagedb.ReplyUserMessageAtDel
	(*ChannelMessageAt)(nil),                                                 // 214: messagedb.ChannelMessageAt
	(*UserMessageAt)(nil),                                                    // 215: messagedb.UserMessageAt
	(*ChannelMessageDeleteMark)(nil),                                         // 216: messagedb.ChannelMessageDeleteMark
	(*MsgIdImported)(nil),                                                    // 217: messagedb.MsgIdImported
	(*UserMediaMessageStatistics)(nil),                                       // 218: messagedb.UserMediaMessageStatistics
	(*ChannelMediaMessageStatistics)(nil),                                    // 219: messagedb.ChannelMediaMessageStatistics
	(*UserDialogErlang)(nil),                                                 // 220: messagedb.UserDialogErlang
	(*PtsHandle)(nil),                                                        // 221: messagedb.PtsHandle
	(*OtherInfoMsg)(nil),                                                     // 222: messagedb.OtherInfoMsg
	(*ChannelPtsHandle)(nil),                                                 // 223: messagedb.ChannelPtsHandle
	(*ChannelAdminLog)(nil),                                                  // 224: messagedb.ChannelAdminLog
	(*UserPingedDialog)(nil),                                                 // 225: messagedb.UserPingedDialog
	(*UserDialog)(nil),                                                       // 226: messagedb.UserDialog
	(*ForWardUserMsg)(nil),                                                   // 227: messagedb.ForWardUserMsg
	(*UserMsgId)(nil),                                                        // 228: messagedb.UserMsgId
	(*UserLocalId)(nil),                                                      // 229: messagedb.UserLocalId
	(*ChannelLocalId)(nil),                                                   // 230: messagedb.ChannelLocalId
	(*UserIdAndWithIdAndTypeAndEncry)(nil),                                   // 231: messagedb.UserIdAndWithIdAndTypeAndEncry
	(*Status)(nil),                                                           // 232: messagedb.Status
	(*UserIdAndWithId)(nil),                                                  // 233: messagedb.UserIdAndWithId
	(*WithIdAndType)(nil),                                                    // 234: messagedb.WithIdAndType
	(*UserIdAndWithIdAndType)(nil),                                           // 235: messagedb.UserIdAndWithIdAndType
	(*UserId)(nil),                                                           // 236: messagedb.UserId
	(*UserIdAndPts)(nil),                                                     // 237: messagedb.UserIdAndPts
	(*Bytes)(nil),                                                            // 238: messagedb.Bytes
	(*UserMsg)(nil),                                                          // 239: messagedb.UserMsg
	(*Combination)(nil),                                                      // 240: messagedb.Combination
	(*MentionStatus)(nil),                                                    // 241: messagedb.MentionStatus
	(*UserIdAndMsgId)(nil),                                                   // 242: messagedb.UserIdAndMsgId
	(*UUID)(nil),                                                             // 243: messagedb.UUID
	(*MsgId)(nil),                                                            // 244: messagedb.MsgId
	(*UUIDS)(nil),                                                            // 245: messagedb.UUIDS
	(*MsgIDList)(nil),                                                        // 246: messagedb.MsgIDList
	(*UserIdAndWithIdAndMsgIds)(nil),                                         // 247: messagedb.UserIdAndWithIdAndMsgIds
	(*UserIdAndRandomId)(nil),                                                // 248: messagedb.UserIdAndRandomId
	(*ReplyGetRandomStatus)(nil),                                             // 249: messagedb.ReplyGetRandomStatus
	(*SearchMediaMsgByFilterReqPara)(nil),                                    // 250: messagedb.SearchMediaMsgByFilterReqPara
	(*SearchMediaMsgByFilterRespData)(nil),                                   // 251: messagedb.SearchMediaMsgByFilterRespData
	(*ReqSearchUserMediaMsgByFilter)(nil),                                    // 252: messagedb.ReqSearchUserMediaMsgByFilter
	(*RespSearchUserMediaMsgByFilter)(nil),                                   // 253: messagedb.RespSearchUserMediaMsgByFilter
	(*ReqSearchChannelMediaMsgByFilter)(nil),                                 // 254: messagedb.ReqSearchChannelMediaMsgByFilter
	(*RespSearchChannelMediaMsgByFilter)(nil),                                // 255: messagedb.RespSearchChannelMediaMsgByFilter
	(*QueryDialogData)(nil),                                                  // 256: messagedb.QueryDialogData
	(*ReqGetDialogUnreadCountByUserIdAndWithId)(nil),                         // 257: messagedb.ReqGetDialogUnreadCountByUserIdAndWithId
	(*RespGetDialogUnreadCountByUserIdAndWithId)(nil),                        // 258: messagedb.RespGetDialogUnreadCountByUserIdAndWithId
	(*ReqShDeleteUserHistory)(nil),                                           // 259: messagedb.ReqShDeleteUserHistory
	(*pbcomm.Debug)(nil),                                                     // 260: pbcomm.Debug
}
var file_messagedb_proto_depIdxs = []int32{
	22,  // 0: messagedb.ChannelDialogAndMsg.ChannelDialog:type_name -> messagedb.ChannelDialog
	239, // 1: messagedb.ChannelDialogAndMsg.ChannelMsg:type_name -> messagedb.UserMsg
	23,  // 2: messagedb.ChannelDialogAndMsgs.ChannelDialogAndMsgs:type_name -> messagedb.ChannelDialogAndMsg
	227, // 3: messagedb.ForWardUserMsgList.ForWardUserMsg:type_name -> messagedb.ForWardUserMsg
	239, // 4: messagedb.UserMsgList.UserMsgs:type_name -> messagedb.UserMsg
	239, // 5: messagedb.UserMsgListAndPts.UserMsgs:type_name -> messagedb.UserMsg
	226, // 6: messagedb.UserDialogList.UserDialogs:type_name -> messagedb.UserDialog
	34,  // 7: messagedb.UserDialogAndMsgList.UserDialogAndMsgs:type_name -> messagedb.UserDialogAndMsg
	32,  // 8: messagedb.ReplyGetPingedDialogAndMsg.DialogMsg:type_name -> messagedb.UserDialogAndMsgList
	226, // 9: messagedb.UserDialogAndMsg.UserDialog:type_name -> messagedb.UserDialog
	239, // 10: messagedb.UserDialogAndMsg.UserMsg:type_name -> messagedb.UserMsg
	260, // 11: messagedb.ReqInsertOrUpdateUserMsgId.Debug:type_name -> pbcomm.Debug
	260, // 12: messagedb.ReqIncreaseUserLocalId.Debug:type_name -> pbcomm.Debug
	229, // 13: messagedb.ReplyIncreaseUserLocalId.UserLocalId:type_name -> messagedb.UserLocalId
	260, // 14: messagedb.ReqGetCurrentUserLocalId.Debug:type_name -> pbcomm.Debug
	229, // 15: messagedb.ReplyGetCurrentUserLocalId.UserLocalId:type_name -> messagedb.UserLocalId
	260, // 16: messagedb.ReqIncreaseChannelLocalId.Debug:type_name -> pbcomm.Debug
	230, // 17: messagedb.ReplyIncreaseChannelLocalId.ChannelLocalId:type_name -> messagedb.ChannelLocalId
	150, // 18: messagedb.ReplyIncreaseChannelLocalId.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 19: messagedb.ReqGetCurrentChannelLocalId.Debug:type_name -> pbcomm.Debug
	230, // 20: messagedb.ReplyGetCurrentChannelLocalId.ChannelLocalId:type_name -> messagedb.ChannelLocalId
	150, // 21: messagedb.ReplyGetCurrentChannelLocalId.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 22: messagedb.ReqIncreaseUserMsgId.Debug:type_name -> pbcomm.Debug
	228, // 23: messagedb.ReqSetUserMsgId.UserMsgId:type_name -> messagedb.UserMsgId
	260, // 24: messagedb.ReqSetUserMsgId.Debug:type_name -> pbcomm.Debug
	217, // 25: messagedb.ReqSetMsgIdImported.MsgIdImported:type_name -> messagedb.MsgIdImported
	260, // 26: messagedb.ReqSetMsgIdImported.Debug:type_name -> pbcomm.Debug
	260, // 27: messagedb.ReqCheckMsgIdImported.Debug:type_name -> pbcomm.Debug
	217, // 28: messagedb.ReplyCheckMsgIdImported.MsgIdImported:type_name -> messagedb.MsgIdImported
	260, // 29: messagedb.ReqGetUserMsgId.Debug:type_name -> pbcomm.Debug
	260, // 30: messagedb.ReqUpdateUserPts.Debug:type_name -> pbcomm.Debug
	260, // 31: messagedb.ReqBatchUpdatUserPts.Debug:type_name -> pbcomm.Debug
	221, // 32: messagedb.ReqStorePtsHandle.PtsHandle:type_name -> messagedb.PtsHandle
	260, // 33: messagedb.ReqStorePtsHandle.Debug:type_name -> pbcomm.Debug
	260, // 34: messagedb.ReqGetDiffByPts.Debug:type_name -> pbcomm.Debug
	239, // 35: messagedb.ReplyGetDiffByPts.UserMsgs:type_name -> messagedb.UserMsg
	260, // 36: messagedb.ReqGetActionDiff.Debug:type_name -> pbcomm.Debug
	221, // 37: messagedb.ReplyGetActionDiff.PtsHandles:type_name -> messagedb.PtsHandle
	222, // 38: messagedb.ReqStoreOtherInfoMsg.OtherInfoMsg:type_name -> messagedb.OtherInfoMsg
	260, // 39: messagedb.ReqStoreOtherInfoMsg.Debug:type_name -> pbcomm.Debug
	222, // 40: messagedb.ReqBatchStoreOtherInfoMsg.OtherInfoMsgs:type_name -> messagedb.OtherInfoMsg
	260, // 41: messagedb.ReqBatchStoreOtherInfoMsg.Debug:type_name -> pbcomm.Debug
	260, // 42: messagedb.ReqGetOtherInfoMsg.Debug:type_name -> pbcomm.Debug
	222, // 43: messagedb.ReplyGetOtherInfoMsg.OtherInfoMsgs:type_name -> messagedb.OtherInfoMsg
	239, // 44: messagedb.ReqInsertOrUpdateUserMsg.UserMsg:type_name -> messagedb.UserMsg
	260, // 45: messagedb.ReqInsertOrUpdateUserMsg.Debug:type_name -> pbcomm.Debug
	260, // 46: messagedb.ReqGetForwardUserMsg.Debug:type_name -> pbcomm.Debug
	260, // 47: messagedb.ReqGetUserMsgHistory.Debug:type_name -> pbcomm.Debug
	260, // 48: messagedb.ReqGetUserMsgUUID.Debug:type_name -> pbcomm.Debug
	260, // 49: messagedb.ReqGetUserMsgIdByUUID.Debug:type_name -> pbcomm.Debug
	260, // 50: messagedb.ReqGetUserMsgListByUUIDs.Debug:type_name -> pbcomm.Debug
	260, // 51: messagedb.ReqDeleteUserMsg.Debug:type_name -> pbcomm.Debug
	260, // 52: messagedb.ReqBatchDeleteUserMsg.Debug:type_name -> pbcomm.Debug
	260, // 53: messagedb.ReqGetOneUserMsgByUserIdAndMsgId.Debug:type_name -> pbcomm.Debug
	260, // 54: messagedb.ReqDeleteUserMsgByUserIdAndWithIdAndEncry.Debug:type_name -> pbcomm.Debug
	260, // 55: messagedb.ReqClearHistory.Debug:type_name -> pbcomm.Debug
	77,  // 56: messagedb.ReqGetMessageHistoryPageByMedia.GetMessageHistoryPageByMediaConfig:type_name -> messagedb.GetMessageHistoryPageByMediaConfig
	260, // 57: messagedb.ReqGetMessageHistoryPageByMedia.Debug:type_name -> pbcomm.Debug
	216, // 58: messagedb.ReqInsertOrUpdateChannelMessageDeleteMark.ChannelMessageDeleteMark:type_name -> messagedb.ChannelMessageDeleteMark
	260, // 59: messagedb.ReqInsertOrUpdateChannelMessageDeleteMark.Debug:type_name -> pbcomm.Debug
	260, // 60: messagedb.ReqGetChannelMessageDeleteMark.Debug:type_name -> pbcomm.Debug
	260, // 61: messagedb.ReqUserDialogSetUnreadMetionsCount.Debug:type_name -> pbcomm.Debug
	150, // 62: messagedb.ReplyUserDialogSetUnreadMetionsCount.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 63: messagedb.ReqUserDialogGetUnreadMetionsCount.Debug:type_name -> pbcomm.Debug
	150, // 64: messagedb.ReplyUserDialogGetUnreadMetionsCount.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 65: messagedb.ReqUserDialogChangeUnreadMetionsCount.Debug:type_name -> pbcomm.Debug
	150, // 66: messagedb.ReplyUserDialogChangeUnreadMetionsCount.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 67: messagedb.ReqGetUserMediaMessageStatisticsByMedia.Debug:type_name -> pbcomm.Debug
	218, // 68: messagedb.ReplyGetUserMediaMessageStatisticsByMedia.UserMediaMessageStatistics:type_name -> messagedb.UserMediaMessageStatistics
	239, // 69: messagedb.ReplyGetMessageHistoryPageByMedia.UserMsgs:type_name -> messagedb.UserMsg
	34,  // 70: messagedb.ReqInsertOrUpdateUserDialogAndMsg.UserDialogAndMsg:type_name -> messagedb.UserDialogAndMsg
	260, // 71: messagedb.ReqInsertOrUpdateUserDialogAndMsg.Debug:type_name -> pbcomm.Debug
	34,  // 72: messagedb.ReqUpdateSelfDialogAndMsg.UserDialogAndMsg:type_name -> messagedb.UserDialogAndMsg
	260, // 73: messagedb.ReqUpdateSelfDialogAndMsg.Debug:type_name -> pbcomm.Debug
	260, // 74: messagedb.ReqUpdateDialogAddUnread.Debug:type_name -> pbcomm.Debug
	260, // 75: messagedb.ReqUpdateDialogClearDraft.Debug:type_name -> pbcomm.Debug
	260, // 76: messagedb.ReqGetUserDialogAllUnread.Debug:type_name -> pbcomm.Debug
	34,  // 77: messagedb.ReqUpdateReceDialogAndMsg.UserDialogAndMsg:type_name -> messagedb.UserDialogAndMsg
	260, // 78: messagedb.ReqUpdateReceDialogAndMsg.Debug:type_name -> pbcomm.Debug
	260, // 79: messagedb.ReqGetDialogAndMsgByUserIdAndWithIdAndType.Debug:type_name -> pbcomm.Debug
	260, // 80: messagedb.ReqGetDialogAndMsgsByUserId.Debug:type_name -> pbcomm.Debug
	260, // 81: messagedb.ReqGetDialogAndMsgsByPage.Debug:type_name -> pbcomm.Debug
	260, // 82: messagedb.ReqReadSelfDialogAndMsg.Debug:type_name -> pbcomm.Debug
	260, // 83: messagedb.ReqUpdateReadinbox.Debug:type_name -> pbcomm.Debug
	260, // 84: messagedb.ReqUpdateReadoutbox.Debug:type_name -> pbcomm.Debug
	260, // 85: messagedb.ReqDeleteUserDialog.Debug:type_name -> pbcomm.Debug
	107, // 86: messagedb.ReqUpdateUserDialog.UpdateUserDialogParam:type_name -> messagedb.UpdateUserDialogParam
	260, // 87: messagedb.ReqUpdateUserDialog.Debug:type_name -> pbcomm.Debug
	260, // 88: messagedb.ReqUpdateUserDialogUpdateDate.Debug:type_name -> pbcomm.Debug
	260, // 89: messagedb.ReqUpdateDialogToPinged.Debug:type_name -> pbcomm.Debug
	260, // 90: messagedb.ReqUpdateDialogToFolder.Debug:type_name -> pbcomm.Debug
	260, // 91: messagedb.ReqCancelPingedDialog.Debug:type_name -> pbcomm.Debug
	260, // 92: messagedb.ReqGetPingedDialogAndMsg.Debug:type_name -> pbcomm.Debug
	260, // 93: messagedb.ReqGetLastLimitDialog.Debug:type_name -> pbcomm.Debug
	114, // 94: messagedb.ReplyGetLastLimitDialog.UserRatingList:type_name -> messagedb.UserRating
	260, // 95: messagedb.ReqUpdateReadInBoxMaxId.Debug:type_name -> pbcomm.Debug
	260, // 96: messagedb.ReqUpdateReadOutBoxMaxId.Debug:type_name -> pbcomm.Debug
	260, // 97: messagedb.ReqUpdateChannelReadinbox.Debug:type_name -> pbcomm.Debug
	260, // 98: messagedb.ReqUpdateChannelReadoutbox.Debug:type_name -> pbcomm.Debug
	260, // 99: messagedb.ReqDeleteUserDialogByChannelId.Debug:type_name -> pbcomm.Debug
	260, // 100: messagedb.ReqGetUserChannelDialogByUserId.Debug:type_name -> pbcomm.Debug
	220, // 101: messagedb.ReqStoreUserDialogErlang.UserDialogErlang:type_name -> messagedb.UserDialogErlang
	260, // 102: messagedb.ReqStoreUserDialogErlang.Debug:type_name -> pbcomm.Debug
	260, // 103: messagedb.ReqGetUserDialogErlangByUserIdWithIdWithType.Debug:type_name -> pbcomm.Debug
	220, // 104: messagedb.ReplyGetUserDialogErlangByUserIdWithIdWithType.UserDialogErlang:type_name -> messagedb.UserDialogErlang
	260, // 105: messagedb.ReqInsertRandomStatus.Debug:type_name -> pbcomm.Debug
	260, // 106: messagedb.ReqGetRandomStatus.Debug:type_name -> pbcomm.Debug
	260, // 107: messagedb.ReqSetSuperGroupMsg.Debug:type_name -> pbcomm.Debug
	260, // 108: messagedb.ReqGetSuperGroupMsg.Debug:type_name -> pbcomm.Debug
	260, // 109: messagedb.ReqInsertMsgIdSerialCodeMap.Debug:type_name -> pbcomm.Debug
	150, // 110: messagedb.ReplyInsertMsgIdSerialCodeMap.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 111: messagedb.ReqGetMsgIdSerialCodeMap.Debug:type_name -> pbcomm.Debug
	150, // 112: messagedb.ReplyGetMsgIdSerialCodeMap.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 113: messagedb.ReqUpdateChannelMsgId.Debug:type_name -> pbcomm.Debug
	13,  // 114: messagedb.ReplyUpdateChannelMsgId.ChannelMsgId:type_name -> messagedb.ChannelMsgId
	150, // 115: messagedb.ReplyUpdateChannelMsgId.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 116: messagedb.ReqUpdateChannelMsgIdAndPts.Debug:type_name -> pbcomm.Debug
	13,  // 117: messagedb.ReplyUpdateChannelMsgIdAndPts.ChannelMsgId:type_name -> messagedb.ChannelMsgId
	150, // 118: messagedb.ReplyUpdateChannelMsgIdAndPts.ReplyErr:type_name -> messagedb.ReplyErr
	13,  // 119: messagedb.ReqSetChannelMsgIdAndPts.ChannelMsgId:type_name -> messagedb.ChannelMsgId
	260, // 120: messagedb.ReqSetChannelMsgIdAndPts.Debug:type_name -> pbcomm.Debug
	150, // 121: messagedb.ReplySetChannelMsgIdAndPts.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 122: messagedb.ReqUpdateChannelPts.Debug:type_name -> pbcomm.Debug
	13,  // 123: messagedb.ReplyUpdateChannelPts.ChannelMsgId:type_name -> messagedb.ChannelMsgId
	150, // 124: messagedb.ReplyUpdateChannelPts.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 125: messagedb.ReqUpdateChannelPtsWithNum.Debug:type_name -> pbcomm.Debug
	13,  // 126: messagedb.ReplyUpdateChannelPtsWithNum.ChannelMsgId:type_name -> messagedb.ChannelMsgId
	150, // 127: messagedb.ReplyUpdateChannelPtsWithNum.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 128: messagedb.ReqGetChannelMsgId.Debug:type_name -> pbcomm.Debug
	13,  // 129: messagedb.ReplyGetChannelMsgId.ChannelMsgId:type_name -> messagedb.ChannelMsgId
	150, // 130: messagedb.ReplyGetChannelMsgId.ReplyErr:type_name -> messagedb.ReplyErr
	223, // 131: messagedb.ReqStoreChannelPtsHandle.ChannelPtsHandle:type_name -> messagedb.ChannelPtsHandle
	260, // 132: messagedb.ReqStoreChannelPtsHandle.Debug:type_name -> pbcomm.Debug
	223, // 133: messagedb.ReqBatchStoreChannelPtsHandle.ChannelPtsHandles:type_name -> messagedb.ChannelPtsHandle
	260, // 134: messagedb.ReqBatchStoreChannelPtsHandle.Debug:type_name -> pbcomm.Debug
	260, // 135: messagedb.ReqGetChannelDiffByPts.Debug:type_name -> pbcomm.Debug
	150, // 136: messagedb.ReplyGetChannelDiffByPts.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 137: messagedb.ReqGetUserDiff.Debug:type_name -> pbcomm.Debug
	154, // 138: messagedb.ReplyGetUserDiff.ChannelPtsDiffs:type_name -> messagedb.ChannelPtsDiff
	150, // 139: messagedb.ReplyGetUserDiff.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 140: messagedb.ReqGetChannelLastPtsHandle.Debug:type_name -> pbcomm.Debug
	223, // 141: messagedb.ReplyGetChannelLastPtsHandle.ChannelPtsHandle:type_name -> messagedb.ChannelPtsHandle
	150, // 142: messagedb.ReplyGetChannelLastPtsHandle.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 143: messagedb.ReqDeleteChannelPtsHandle.Debug:type_name -> pbcomm.Debug
	150, // 144: messagedb.ReplyDeleteChannelPtsHandle.ReplyErr:type_name -> messagedb.ReplyErr
	239, // 145: messagedb.ReqInsertOrUpdateChannelMsg.UserMsg:type_name -> messagedb.UserMsg
	260, // 146: messagedb.ReqInsertOrUpdateChannelMsg.Debug:type_name -> pbcomm.Debug
	239, // 147: messagedb.ReqUpdateChannelMsg.UserMsg:type_name -> messagedb.UserMsg
	260, // 148: messagedb.ReqUpdateChannelMsg.Debug:type_name -> pbcomm.Debug
	239, // 149: messagedb.ReqBatchInsertOrUpdateChannelMsg.UserMsgs:type_name -> messagedb.UserMsg
	260, // 150: messagedb.ReqBatchInsertOrUpdateChannelMsg.Debug:type_name -> pbcomm.Debug
	260, // 151: messagedb.ReqDeleteMsgs.Debug:type_name -> pbcomm.Debug
	150, // 152: messagedb.ReplyDeleteMsgs.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 153: messagedb.ReqDeleteUserHistory.Debug:type_name -> pbcomm.Debug
	21,  // 154: messagedb.ReplyDeleteUserHistory.MsgsAndMaxId:type_name -> messagedb.MsgsAndMaxId
	150, // 155: messagedb.ReplyDeleteUserHistory.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 156: messagedb.ReqDeleteChannelMsg.Debug:type_name -> pbcomm.Debug
	260, // 157: messagedb.ReqDeleteChannelMessage.Debug:type_name -> pbcomm.Debug
	150, // 158: messagedb.ReplyDeleteChannelMessage.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 159: messagedb.ReqGetChannelMessage.Debug:type_name -> pbcomm.Debug
	239, // 160: messagedb.ReplyGetChannelMessage.UserMsg:type_name -> messagedb.UserMsg
	150, // 161: messagedb.ReplyGetChannelMessage.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 162: messagedb.ReqGetChannelMsgsByMsgIds.Debug:type_name -> pbcomm.Debug
	30,  // 163: messagedb.ReplyGetChannelMsgsByMsgIds.UserMsgListAndPts:type_name -> messagedb.UserMsgListAndPts
	150, // 164: messagedb.ReplyGetChannelMsgsByMsgIds.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 165: messagedb.ReqGetChannelMsgHistory.Debug:type_name -> pbcomm.Debug
	30,  // 166: messagedb.ReplyGetChannelMsgHistory.UserMsgListAndPts:type_name -> messagedb.UserMsgListAndPts
	150, // 167: messagedb.ReplyGetChannelMsgHistory.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 168: messagedb.ReqGetChannelTopMst.Debug:type_name -> pbcomm.Debug
	177, // 169: messagedb.ReqGetChannelMediaMessageHistoryByMedia.GetChannelMediaMessageHistoryByMediaConfig:type_name -> messagedb.GetChannelMediaMessageHistoryByMediaConfig
	260, // 170: messagedb.ReqGetChannelMediaMessageHistoryByMedia.Debug:type_name -> pbcomm.Debug
	239, // 171: messagedb.ReplyGetChannelMediaMessageHistoryByMedia.ChannelMsgs:type_name -> messagedb.UserMsg
	150, // 172: messagedb.ReplyGetChannelMediaMessageHistoryByMedia.ReplyErr:type_name -> messagedb.ReplyErr
	150, // 173: messagedb.ReplyInsertOrUpdateChannelMessageDeleteMark.ReplyErr:type_name -> messagedb.ReplyErr
	216, // 174: messagedb.ReplyGetChannelMessageDeleteMark.ChannelMessageDeleteMark:type_name -> messagedb.ChannelMessageDeleteMark
	150, // 175: messagedb.ReplyGetChannelMessageDeleteMark.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 176: messagedb.ReqGetChannelMediaMessageStatisticsByMedia.Debug:type_name -> pbcomm.Debug
	219, // 177: messagedb.ReplyGetChannelMediaMessageStatisticsByMedia.ChannelMediaMessageStatistics:type_name -> messagedb.ChannelMediaMessageStatistics
	150, // 178: messagedb.ReplyGetChannelMediaMessageStatisticsByMedia.ReplyErr:type_name -> messagedb.ReplyErr
	239, // 179: messagedb.ReplyGetChannelTopMst.UserMsg:type_name -> messagedb.UserMsg
	150, // 180: messagedb.ReplyGetChannelTopMst.ReplyErr:type_name -> messagedb.ReplyErr
	22,  // 181: messagedb.ReqInsertOrUpdateChannelDialogAndMsg.ChannelDialog:type_name -> messagedb.ChannelDialog
	239, // 182: messagedb.ReqInsertOrUpdateChannelDialogAndMsg.ChannelMsg:type_name -> messagedb.UserMsg
	260, // 183: messagedb.ReqInsertOrUpdateChannelDialogAndMsg.Debug:type_name -> pbcomm.Debug
	260, // 184: messagedb.ReqGetDialogMaxReadInMsgId.Debug:type_name -> pbcomm.Debug
	150, // 185: messagedb.ReplyGetDialogMaxReadInMsgId.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 186: messagedb.ReqSetDialogMaxReadInMsgId.Debug:type_name -> pbcomm.Debug
	260, // 187: messagedb.ReqGetDialogAndMsg.Debug:type_name -> pbcomm.Debug
	23,  // 188: messagedb.ReplyGetDialogAndMsg.ChannelDialogAndMsg:type_name -> messagedb.ChannelDialogAndMsg
	150, // 189: messagedb.ReplyGetDialogAndMsg.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 190: messagedb.ReqGetDialogAndMsgs.Debug:type_name -> pbcomm.Debug
	24,  // 191: messagedb.ReplyGetDialogAndMsgs.ChannelDialogAndMsgs:type_name -> messagedb.ChannelDialogAndMsgs
	150, // 192: messagedb.ReplyGetDialogAndMsgs.ReplyErr:type_name -> messagedb.ReplyErr
	224, // 193: messagedb.ReqStoreAdminLog.ChannelAdminLog:type_name -> messagedb.ChannelAdminLog
	260, // 194: messagedb.ReqStoreAdminLog.Debug:type_name -> pbcomm.Debug
	260, // 195: messagedb.ReqFindsAdminLogByChannelId.Debug:type_name -> pbcomm.Debug
	224, // 196: messagedb.ReplyFindsAdminLog.AdminLogs:type_name -> messagedb.ChannelAdminLog
	150, // 197: messagedb.ReplyFindsAdminLog.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 198: messagedb.ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId.Debug:type_name -> pbcomm.Debug
	260, // 199: messagedb.ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId.Debug:type_name -> pbcomm.Debug
	260, // 200: messagedb.ReqFindsAdminLogByChannelIdAndUserId.Debug:type_name -> pbcomm.Debug
	260, // 201: messagedb.ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters.Debug:type_name -> pbcomm.Debug
	260, // 202: messagedb.ReqFindsAdminLogByChannelIdAndEventFilters.Debug:type_name -> pbcomm.Debug
	260, // 203: messagedb.ReqFindsAdminLogByChannelIdAndAdminUsers.Debug:type_name -> pbcomm.Debug
	260, // 204: messagedb.ReqChannelMessageAtAdd.Debug:type_name -> pbcomm.Debug
	150, // 205: messagedb.ReplyChannelMessageAtAdd.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 206: messagedb.ReqChannelMessageAtGet.Debug:type_name -> pbcomm.Debug
	239, // 207: messagedb.ReplyChannelMessageAtGet.Messages:type_name -> messagedb.UserMsg
	150, // 208: messagedb.ReplyChannelMessageAtGet.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 209: messagedb.ReqChannelMessageAtDel.Debug:type_name -> pbcomm.Debug
	150, // 210: messagedb.ReplyChannelMessageAtDel.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 211: messagedb.ReqUserMessageAtAdd.Debug:type_name -> pbcomm.Debug
	150, // 212: messagedb.ReplyUserMessageAtAdd.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 213: messagedb.ReqUserMessageAtGet.Debug:type_name -> pbcomm.Debug
	239, // 214: messagedb.ReplyUserMessageAtGet.Messages:type_name -> messagedb.UserMsg
	150, // 215: messagedb.ReplyUserMessageAtGet.ReplyErr:type_name -> messagedb.ReplyErr
	260, // 216: messagedb.ReqUserMessageAtDel.Debug:type_name -> pbcomm.Debug
	150, // 217: messagedb.ReplyUserMessageAtDel.ReplyErr:type_name -> messagedb.ReplyErr
	240, // 218: messagedb.UserMsg.Combination:type_name -> messagedb.Combination
	241, // 219: messagedb.Combination.MentionedSlice:type_name -> messagedb.MentionStatus
	239, // 220: messagedb.SearchMediaMsgByFilterRespData.messages:type_name -> messagedb.UserMsg
	250, // 221: messagedb.ReqSearchUserMediaMsgByFilter.para:type_name -> messagedb.SearchMediaMsgByFilterReqPara
	260, // 222: messagedb.ReqSearchUserMediaMsgByFilter.Debug:type_name -> pbcomm.Debug
	251, // 223: messagedb.RespSearchUserMediaMsgByFilter.data:type_name -> messagedb.SearchMediaMsgByFilterRespData
	150, // 224: messagedb.RespSearchUserMediaMsgByFilter.ReplyErr:type_name -> messagedb.ReplyErr
	250, // 225: messagedb.ReqSearchChannelMediaMsgByFilter.para:type_name -> messagedb.SearchMediaMsgByFilterReqPara
	260, // 226: messagedb.ReqSearchChannelMediaMsgByFilter.Debug:type_name -> pbcomm.Debug
	251, // 227: messagedb.RespSearchChannelMediaMsgByFilter.data:type_name -> messagedb.SearchMediaMsgByFilterRespData
	150, // 228: messagedb.RespSearchChannelMediaMsgByFilter.ReplyErr:type_name -> messagedb.ReplyErr
	256, // 229: messagedb.ReqGetDialogUnreadCountByUserIdAndWithId.DialogList:type_name -> messagedb.QueryDialogData
	260, // 230: messagedb.ReqGetDialogUnreadCountByUserIdAndWithId.Debug:type_name -> pbcomm.Debug
	256, // 231: messagedb.RespGetDialogUnreadCountByUserIdAndWithId.DialogList:type_name -> messagedb.QueryDialogData
	150, // 232: messagedb.RespGetDialogUnreadCountByUserIdAndWithId.ReplyErr:type_name -> messagedb.ReplyErr
	66,  // 233: messagedb.MessageDb.InsertOrUpdateUserMsg:input_type -> messagedb.ReqInsertOrUpdateUserMsg
	67,  // 234: messagedb.MessageDb.GetForwardUserMsg:input_type -> messagedb.ReqGetForwardUserMsg
	68,  // 235: messagedb.MessageDb.GetUserMsgHistory:input_type -> messagedb.ReqGetUserMsgHistory
	69,  // 236: messagedb.MessageDb.GetUserMsgUUID:input_type -> messagedb.ReqGetUserMsgUUID
	70,  // 237: messagedb.MessageDb.GetUserMsgIdByUUID:input_type -> messagedb.ReqGetUserMsgIdByUUID
	71,  // 238: messagedb.MessageDb.GetUserMsgListByUUIDs:input_type -> messagedb.ReqGetUserMsgListByUUIDs
	72,  // 239: messagedb.MessageDb.DeleteUserMsg:input_type -> messagedb.ReqDeleteUserMsg
	73,  // 240: messagedb.MessageDb.BatchDeleteUserMsg:input_type -> messagedb.ReqBatchDeleteUserMsg
	74,  // 241: messagedb.MessageDb.GetOneUserMsgByUserIdAndMsgId:input_type -> messagedb.ReqGetOneUserMsgByUserIdAndMsgId
	75,  // 242: messagedb.MessageDb.DeleteUserMsgByUserIdAndWithIdAndEncry:input_type -> messagedb.ReqDeleteUserMsgByUserIdAndWithIdAndEncry
	76,  // 243: messagedb.MessageDb.ClearHistory:input_type -> messagedb.ReqClearHistory
	78,  // 244: messagedb.MessageDb.GetMessageHistoryPageByMedia:input_type -> messagedb.ReqGetMessageHistoryPageByMedia
	87,  // 245: messagedb.MessageDb.GetUserMediaMessageStatisticsByMedia:input_type -> messagedb.ReqGetUserMediaMessageStatisticsByMedia
	252, // 246: messagedb.MessageDb.SearchUserMediaMsgStatisticsByFilter:input_type -> messagedb.ReqSearchUserMediaMsgByFilter
	90,  // 247: messagedb.MessageDb.InsertOrUpdateUserDialogAndMsg:input_type -> messagedb.ReqInsertOrUpdateUserDialogAndMsg
	91,  // 248: messagedb.MessageDb.UpdateSelfDialogAndMsg:input_type -> messagedb.ReqUpdateSelfDialogAndMsg
	92,  // 249: messagedb.MessageDb.UpdateDialogAddUnread:input_type -> messagedb.ReqUpdateDialogAddUnread
	94,  // 250: messagedb.MessageDb.UpdateDialogClearDraft:input_type -> messagedb.ReqUpdateDialogClearDraft
	96,  // 251: messagedb.MessageDb.GetUserDialogAllUnread:input_type -> messagedb.ReqGetUserDialogAllUnread
	99,  // 252: messagedb.MessageDb.GetDialogAndMsgByUserIdAndWithIdAndType:input_type -> messagedb.ReqGetDialogAndMsgByUserIdAndWithIdAndType
	100, // 253: messagedb.MessageDb.GetDialogAndMsgsByUserId:input_type -> messagedb.ReqGetDialogAndMsgsByUserId
	101, // 254: messagedb.MessageDb.GetDialogAndMsgsByPage:input_type -> messagedb.ReqGetDialogAndMsgsByPage
	102, // 255: messagedb.MessageDb.ReadSelfDialogAndMsg:input_type -> messagedb.ReqReadSelfDialogAndMsg
	103, // 256: messagedb.MessageDb.UpdateReadinbox:input_type -> messagedb.ReqUpdateReadinbox
	104, // 257: messagedb.MessageDb.UpdateReadoutbox:input_type -> messagedb.ReqUpdateReadoutbox
	105, // 258: messagedb.MessageDb.DeleteUserDialog:input_type -> messagedb.ReqDeleteUserDialog
	106, // 259: messagedb.MessageDb.UpdateUserDialog:input_type -> messagedb.ReqUpdateUserDialog
	257, // 260: messagedb.MessageDb.GetDialogUnreadCountByUserIdAndWithId:input_type -> messagedb.ReqGetDialogUnreadCountByUserIdAndWithId
	109, // 261: messagedb.MessageDb.UpdateDialogToPinged:input_type -> messagedb.ReqUpdateDialogToPinged
	111, // 262: messagedb.MessageDb.CancelPingedDialog:input_type -> messagedb.ReqCancelPingedDialog
	112, // 263: messagedb.MessageDb.GetPingedDialogAndMsg:input_type -> messagedb.ReqGetPingedDialogAndMsg
	113, // 264: messagedb.MessageDb.GetLastLimitDialog:input_type -> messagedb.ReqGetLastLimitDialog
	116, // 265: messagedb.MessageDb.UpdateReadInBoxMaxId:input_type -> messagedb.ReqUpdateReadInBoxMaxId
	117, // 266: messagedb.MessageDb.UpdateReadOutBoxMaxId:input_type -> messagedb.ReqUpdateReadOutBoxMaxId
	118, // 267: messagedb.MessageDb.UpdateChannelReadinbox:input_type -> messagedb.ReqUpdateChannelReadinbox
	119, // 268: messagedb.MessageDb.UpdateChannelReadoutbox:input_type -> messagedb.ReqUpdateChannelReadoutbox
	120, // 269: messagedb.MessageDb.DeleteUserDialogByChannelId:input_type -> messagedb.ReqDeleteUserDialogByChannelId
	121, // 270: messagedb.MessageDb.GetUserChannelDialogByUserId:input_type -> messagedb.ReqGetUserChannelDialogByUserId
	126, // 271: messagedb.MessageDb.GetRandomStatus:input_type -> messagedb.ReqGetRandomStatus
	127, // 272: messagedb.MessageDb.SetSuperGroupMsg:input_type -> messagedb.ReqSetSuperGroupMsg
	129, // 273: messagedb.MessageDb.GetSuperGroupMsg:input_type -> messagedb.ReqGetSuperGroupMsg
	81,  // 274: messagedb.MessageDb.UserDialogSetUnreadMetionsCount:input_type -> messagedb.ReqUserDialogSetUnreadMetionsCount
	83,  // 275: messagedb.MessageDb.UserDialogGetUnreadMetionsCount:input_type -> messagedb.ReqUserDialogGetUnreadMetionsCount
	85,  // 276: messagedb.MessageDb.UserDialogChangeUnreadMetionsCount:input_type -> messagedb.ReqUserDialogChangeUnreadMetionsCount
	208, // 277: messagedb.MessageDb.UserMessageAtAdd:input_type -> messagedb.ReqUserMessageAtAdd
	210, // 278: messagedb.MessageDb.UserMessageAtGet:input_type -> messagedb.ReqUserMessageAtGet
	212, // 279: messagedb.MessageDb.UserMessageAtDel:input_type -> messagedb.ReqUserMessageAtDel
	110, // 280: messagedb.MessageDb.UpdateDialogToFolder:input_type -> messagedb.ReqUpdateDialogToFolder
	131, // 281: messagedb.MessageDb.InsertMsgIdSerialCodeMap:input_type -> messagedb.ReqInsertMsgIdSerialCodeMap
	133, // 282: messagedb.MessageDb.GetMsgIdSerialCodeMap:input_type -> messagedb.ReqGetMsgIdSerialCodeMap
	138, // 283: messagedb.ChannelDB.UpdateChannelMsgIdAndPts:input_type -> messagedb.ReqUpdateChannelMsgIdAndPts
	140, // 284: messagedb.ChannelDB.SetChannelMsgIdAndPts:input_type -> messagedb.ReqSetChannelMsgIdAndPts
	142, // 285: messagedb.ChannelDB.UpdateChannelPts:input_type -> messagedb.ReqUpdateChannelPts
	144, // 286: messagedb.ChannelDB.UpdateChannelPtsWithNum:input_type -> messagedb.ReqUpdateChannelPtsWithNum
	146, // 287: messagedb.ChannelDB.GetChannelMsgId:input_type -> messagedb.ReqGetChannelMsgId
	148, // 288: messagedb.ChannelDB.StoreChannelPtsHandle:input_type -> messagedb.ReqStoreChannelPtsHandle
	149, // 289: messagedb.ChannelDB.BatchStoreChannelPtsHandle:input_type -> messagedb.ReqBatchStoreChannelPtsHandle
	151, // 290: messagedb.ChannelDB.GetChannelDiffByPts:input_type -> messagedb.ReqGetChannelDiffByPts
	156, // 291: messagedb.ChannelDB.GetChannelLastPtsHandle:input_type -> messagedb.ReqGetChannelLastPtsHandle
	158, // 292: messagedb.ChannelDB.DeleteChannelPtsHandle:input_type -> messagedb.ReqDeleteChannelPtsHandle
	160, // 293: messagedb.ChannelDB.InsertOrUpdateChannelMsg:input_type -> messagedb.ReqInsertOrUpdateChannelMsg
	161, // 294: messagedb.ChannelDB.UpdateChannelMsg:input_type -> messagedb.ReqUpdateChannelMsg
	162, // 295: messagedb.ChannelDB.BatchInsertOrUpdateChannelMsg:input_type -> messagedb.ReqBatchInsertOrUpdateChannelMsg
	163, // 296: messagedb.ChannelDB.DeleteMsgs:input_type -> messagedb.ReqDeleteMsgs
	165, // 297: messagedb.ChannelDB.DeleteUserHistory:input_type -> messagedb.ReqDeleteUserHistory
	167, // 298: messagedb.ChannelDB.DeleteChannelMsg:input_type -> messagedb.ReqDeleteChannelMsg
	168, // 299: messagedb.ChannelDB.DeleteChannelMessage:input_type -> messagedb.ReqDeleteChannelMessage
	170, // 300: messagedb.ChannelDB.GetChannelMessage:input_type -> messagedb.ReqGetChannelMessage
	172, // 301: messagedb.ChannelDB.GetChannelMsgsByMsgIds:input_type -> messagedb.ReqGetChannelMsgsByMsgIds
	174, // 302: messagedb.ChannelDB.GetChannelMsgHistory:input_type -> messagedb.ReqGetChannelMsgHistory
	176, // 303: messagedb.ChannelDB.GetChannelTopMsg:input_type -> messagedb.ReqGetChannelTopMst
	178, // 304: messagedb.ChannelDB.GetChannelMediaMessageHistoryByMedia:input_type -> messagedb.ReqGetChannelMediaMessageHistoryByMedia
	79,  // 305: messagedb.ChannelDB.InsertOrUpdateChannelMessageDeleteMark:input_type -> messagedb.ReqInsertOrUpdateChannelMessageDeleteMark
	80,  // 306: messagedb.ChannelDB.GetChannelMessageDeleteMark:input_type -> messagedb.ReqGetChannelMessageDeleteMark
	182, // 307: messagedb.ChannelDB.GetChannelMediaMessageStatisticsByMedia:input_type -> messagedb.ReqGetChannelMediaMessageStatisticsByMedia
	254, // 308: messagedb.ChannelDB.SearchChannelMediaMsgStatisticsByFilter:input_type -> messagedb.ReqSearchChannelMediaMsgByFilter
	193, // 309: messagedb.ChannelDB.StoreAdminLog:input_type -> messagedb.ReqStoreAdminLog
	194, // 310: messagedb.ChannelDB.FindsAdminLogByChannelId:input_type -> messagedb.ReqFindsAdminLogByChannelId
	196, // 311: messagedb.ChannelDB.FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId:input_type -> messagedb.ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId
	197, // 312: messagedb.ChannelDB.FindsAdminLogByChannelIdAndEventFiltersAndUserId:input_type -> messagedb.ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId
	198, // 313: messagedb.ChannelDB.FindsAdminLogByChannelIdAndUserId:input_type -> messagedb.ReqFindsAdminLogByChannelIdAndUserId
	199, // 314: messagedb.ChannelDB.FindsAdminLogByChannelIdAndAdminUsersAndEventFilters:input_type -> messagedb.ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters
	200, // 315: messagedb.ChannelDB.FindsAdminLogByChannelIdAndEventFilters:input_type -> messagedb.ReqFindsAdminLogByChannelIdAndEventFilters
	201, // 316: messagedb.ChannelDB.FindsAdminLogByChannelIdAndAdminUsers:input_type -> messagedb.ReqFindsAdminLogByChannelIdAndAdminUsers
	202, // 317: messagedb.ChannelDB.ChannelMessageAtAdd:input_type -> messagedb.ReqChannelMessageAtAdd
	204, // 318: messagedb.ChannelDB.ChannelMessageAtGet:input_type -> messagedb.ReqChannelMessageAtGet
	206, // 319: messagedb.ChannelDB.ChannelMessageAtDel:input_type -> messagedb.ReqChannelMessageAtDel
	136, // 320: messagedb.ChannelDB.UpdateChannelMsgId:input_type -> messagedb.ReqUpdateChannelMsgId
	239, // 321: messagedb.SearchMsgServer.ShInsertOrUpdateUserMsg:input_type -> messagedb.UserMsg
	242, // 322: messagedb.SearchMsgServer.ShDeleteUserMsg:input_type -> messagedb.UserIdAndMsgId
	247, // 323: messagedb.SearchMsgServer.ShBatchDeleteUserMsg:input_type -> messagedb.UserIdAndWithIdAndMsgIds
	231, // 324: messagedb.SearchMsgServer.ShDeleteUserMsgByUserIdAndWithIdAndEncry:input_type -> messagedb.UserIdAndWithIdAndTypeAndEncry
	239, // 325: messagedb.SearchMsgServer.ShInsertOrUpdateChannelMsg:input_type -> messagedb.UserMsg
	17,  // 326: messagedb.SearchMsgServer.ShDeleteMsgs:input_type -> messagedb.ChannelIdAndMsgIds
	259, // 327: messagedb.SearchMsgServer.ShDeleteUserHistory:input_type -> messagedb.ReqShDeleteUserHistory
	19,  // 328: messagedb.MessageDb.InsertOrUpdateUserMsg:output_type -> messagedb.DialogIsCreated
	28,  // 329: messagedb.MessageDb.GetForwardUserMsg:output_type -> messagedb.ForWardUserMsgList
	29,  // 330: messagedb.MessageDb.GetUserMsgHistory:output_type -> messagedb.UserMsgList
	243, // 331: messagedb.MessageDb.GetUserMsgUUID:output_type -> messagedb.UUID
	244, // 332: messagedb.MessageDb.GetUserMsgIdByUUID:output_type -> messagedb.MsgId
	29,  // 333: messagedb.MessageDb.GetUserMsgListByUUIDs:output_type -> messagedb.UserMsgList
	3,   // 334: messagedb.MessageDb.DeleteUserMsg:output_type -> messagedb.ReplyNull
	3,   // 335: messagedb.MessageDb.BatchDeleteUserMsg:output_type -> messagedb.ReplyNull
	239, // 336: messagedb.MessageDb.GetOneUserMsgByUserIdAndMsgId:output_type -> messagedb.UserMsg
	3,   // 337: messagedb.MessageDb.DeleteUserMsgByUserIdAndWithIdAndEncry:output_type -> messagedb.ReplyNull
	246, // 338: messagedb.MessageDb.ClearHistory:output_type -> messagedb.MsgIDList
	89,  // 339: messagedb.MessageDb.GetMessageHistoryPageByMedia:output_type -> messagedb.ReplyGetMessageHistoryPageByMedia
	88,  // 340: messagedb.MessageDb.GetUserMediaMessageStatisticsByMedia:output_type -> messagedb.ReplyGetUserMediaMessageStatisticsByMedia
	253, // 341: messagedb.MessageDb.SearchUserMediaMsgStatisticsByFilter:output_type -> messagedb.RespSearchUserMediaMsgByFilter
	3,   // 342: messagedb.MessageDb.InsertOrUpdateUserDialogAndMsg:output_type -> messagedb.ReplyNull
	3,   // 343: messagedb.MessageDb.UpdateSelfDialogAndMsg:output_type -> messagedb.ReplyNull
	93,  // 344: messagedb.MessageDb.UpdateDialogAddUnread:output_type -> messagedb.ReplyUpdateDialogAddUnread
	95,  // 345: messagedb.MessageDb.UpdateDialogClearDraft:output_type -> messagedb.ReplyUpdateDialogClearDraft
	97,  // 346: messagedb.MessageDb.GetUserDialogAllUnread:output_type -> messagedb.ReplyGetUserDialogAllUnread
	34,  // 347: messagedb.MessageDb.GetDialogAndMsgByUserIdAndWithIdAndType:output_type -> messagedb.UserDialogAndMsg
	32,  // 348: messagedb.MessageDb.GetDialogAndMsgsByUserId:output_type -> messagedb.UserDialogAndMsgList
	32,  // 349: messagedb.MessageDb.GetDialogAndMsgsByPage:output_type -> messagedb.UserDialogAndMsgList
	27,  // 350: messagedb.MessageDb.ReadSelfDialogAndMsg:output_type -> messagedb.DialogTopMessage
	27,  // 351: messagedb.MessageDb.UpdateReadinbox:output_type -> messagedb.DialogTopMessage
	27,  // 352: messagedb.MessageDb.UpdateReadoutbox:output_type -> messagedb.DialogTopMessage
	3,   // 353: messagedb.MessageDb.DeleteUserDialog:output_type -> messagedb.ReplyNull
	5,   // 354: messagedb.MessageDb.UpdateUserDialog:output_type -> messagedb.ReplyUpdateUserDialog
	258, // 355: messagedb.MessageDb.GetDialogUnreadCountByUserIdAndWithId:output_type -> messagedb.RespGetDialogUnreadCountByUserIdAndWithId
	3,   // 356: messagedb.MessageDb.UpdateDialogToPinged:output_type -> messagedb.ReplyNull
	3,   // 357: messagedb.MessageDb.CancelPingedDialog:output_type -> messagedb.ReplyNull
	33,  // 358: messagedb.MessageDb.GetPingedDialogAndMsg:output_type -> messagedb.ReplyGetPingedDialogAndMsg
	115, // 359: messagedb.MessageDb.GetLastLimitDialog:output_type -> messagedb.ReplyGetLastLimitDialog
	3,   // 360: messagedb.MessageDb.UpdateReadInBoxMaxId:output_type -> messagedb.ReplyNull
	3,   // 361: messagedb.MessageDb.UpdateReadOutBoxMaxId:output_type -> messagedb.ReplyNull
	3,   // 362: messagedb.MessageDb.UpdateChannelReadinbox:output_type -> messagedb.ReplyNull
	3,   // 363: messagedb.MessageDb.UpdateChannelReadoutbox:output_type -> messagedb.ReplyNull
	3,   // 364: messagedb.MessageDb.DeleteUserDialogByChannelId:output_type -> messagedb.ReplyNull
	31,  // 365: messagedb.MessageDb.GetUserChannelDialogByUserId:output_type -> messagedb.UserDialogList
	249, // 366: messagedb.MessageDb.GetRandomStatus:output_type -> messagedb.ReplyGetRandomStatus
	128, // 367: messagedb.MessageDb.SetSuperGroupMsg:output_type -> messagedb.ReplySetSuperGroupMsg
	130, // 368: messagedb.MessageDb.GetSuperGroupMsg:output_type -> messagedb.ReplyGetSuperGroupMsg
	82,  // 369: messagedb.MessageDb.UserDialogSetUnreadMetionsCount:output_type -> messagedb.ReplyUserDialogSetUnreadMetionsCount
	84,  // 370: messagedb.MessageDb.UserDialogGetUnreadMetionsCount:output_type -> messagedb.ReplyUserDialogGetUnreadMetionsCount
	86,  // 371: messagedb.MessageDb.UserDialogChangeUnreadMetionsCount:output_type -> messagedb.ReplyUserDialogChangeUnreadMetionsCount
	209, // 372: messagedb.MessageDb.UserMessageAtAdd:output_type -> messagedb.ReplyUserMessageAtAdd
	211, // 373: messagedb.MessageDb.UserMessageAtGet:output_type -> messagedb.ReplyUserMessageAtGet
	213, // 374: messagedb.MessageDb.UserMessageAtDel:output_type -> messagedb.ReplyUserMessageAtDel
	3,   // 375: messagedb.MessageDb.UpdateDialogToFolder:output_type -> messagedb.ReplyNull
	132, // 376: messagedb.MessageDb.InsertMsgIdSerialCodeMap:output_type -> messagedb.ReplyInsertMsgIdSerialCodeMap
	134, // 377: messagedb.MessageDb.GetMsgIdSerialCodeMap:output_type -> messagedb.ReplyGetMsgIdSerialCodeMap
	139, // 378: messagedb.ChannelDB.UpdateChannelMsgIdAndPts:output_type -> messagedb.ReplyUpdateChannelMsgIdAndPts
	141, // 379: messagedb.ChannelDB.SetChannelMsgIdAndPts:output_type -> messagedb.ReplySetChannelMsgIdAndPts
	143, // 380: messagedb.ChannelDB.UpdateChannelPts:output_type -> messagedb.ReplyUpdateChannelPts
	145, // 381: messagedb.ChannelDB.UpdateChannelPtsWithNum:output_type -> messagedb.ReplyUpdateChannelPtsWithNum
	147, // 382: messagedb.ChannelDB.GetChannelMsgId:output_type -> messagedb.ReplyGetChannelMsgId
	150, // 383: messagedb.ChannelDB.StoreChannelPtsHandle:output_type -> messagedb.ReplyErr
	150, // 384: messagedb.ChannelDB.BatchStoreChannelPtsHandle:output_type -> messagedb.ReplyErr
	152, // 385: messagedb.ChannelDB.GetChannelDiffByPts:output_type -> messagedb.ReplyGetChannelDiffByPts
	157, // 386: messagedb.ChannelDB.GetChannelLastPtsHandle:output_type -> messagedb.ReplyGetChannelLastPtsHandle
	159, // 387: messagedb.ChannelDB.DeleteChannelPtsHandle:output_type -> messagedb.ReplyDeleteChannelPtsHandle
	150, // 388: messagedb.ChannelDB.InsertOrUpdateChannelMsg:output_type -> messagedb.ReplyErr
	150, // 389: messagedb.ChannelDB.UpdateChannelMsg:output_type -> messagedb.ReplyErr
	150, // 390: messagedb.ChannelDB.BatchInsertOrUpdateChannelMsg:output_type -> messagedb.ReplyErr
	164, // 391: messagedb.ChannelDB.DeleteMsgs:output_type -> messagedb.ReplyDeleteMsgs
	166, // 392: messagedb.ChannelDB.DeleteUserHistory:output_type -> messagedb.ReplyDeleteUserHistory
	150, // 393: messagedb.ChannelDB.DeleteChannelMsg:output_type -> messagedb.ReplyErr
	169, // 394: messagedb.ChannelDB.DeleteChannelMessage:output_type -> messagedb.ReplyDeleteChannelMessage
	171, // 395: messagedb.ChannelDB.GetChannelMessage:output_type -> messagedb.ReplyGetChannelMessage
	173, // 396: messagedb.ChannelDB.GetChannelMsgsByMsgIds:output_type -> messagedb.ReplyGetChannelMsgsByMsgIds
	175, // 397: messagedb.ChannelDB.GetChannelMsgHistory:output_type -> messagedb.ReplyGetChannelMsgHistory
	184, // 398: messagedb.ChannelDB.GetChannelTopMsg:output_type -> messagedb.ReplyGetChannelTopMst
	179, // 399: messagedb.ChannelDB.GetChannelMediaMessageHistoryByMedia:output_type -> messagedb.ReplyGetChannelMediaMessageHistoryByMedia
	180, // 400: messagedb.ChannelDB.InsertOrUpdateChannelMessageDeleteMark:output_type -> messagedb.ReplyInsertOrUpdateChannelMessageDeleteMark
	181, // 401: messagedb.ChannelDB.GetChannelMessageDeleteMark:output_type -> messagedb.ReplyGetChannelMessageDeleteMark
	183, // 402: messagedb.ChannelDB.GetChannelMediaMessageStatisticsByMedia:output_type -> messagedb.ReplyGetChannelMediaMessageStatisticsByMedia
	255, // 403: messagedb.ChannelDB.SearchChannelMediaMsgStatisticsByFilter:output_type -> messagedb.RespSearchChannelMediaMsgByFilter
	150, // 404: messagedb.ChannelDB.StoreAdminLog:output_type -> messagedb.ReplyErr
	195, // 405: messagedb.ChannelDB.FindsAdminLogByChannelId:output_type -> messagedb.ReplyFindsAdminLog
	195, // 406: messagedb.ChannelDB.FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId:output_type -> messagedb.ReplyFindsAdminLog
	195, // 407: messagedb.ChannelDB.FindsAdminLogByChannelIdAndEventFiltersAndUserId:output_type -> messagedb.ReplyFindsAdminLog
	195, // 408: messagedb.ChannelDB.FindsAdminLogByChannelIdAndUserId:output_type -> messagedb.ReplyFindsAdminLog
	195, // 409: messagedb.ChannelDB.FindsAdminLogByChannelIdAndAdminUsersAndEventFilters:output_type -> messagedb.ReplyFindsAdminLog
	195, // 410: messagedb.ChannelDB.FindsAdminLogByChannelIdAndEventFilters:output_type -> messagedb.ReplyFindsAdminLog
	195, // 411: messagedb.ChannelDB.FindsAdminLogByChannelIdAndAdminUsers:output_type -> messagedb.ReplyFindsAdminLog
	203, // 412: messagedb.ChannelDB.ChannelMessageAtAdd:output_type -> messagedb.ReplyChannelMessageAtAdd
	205, // 413: messagedb.ChannelDB.ChannelMessageAtGet:output_type -> messagedb.ReplyChannelMessageAtGet
	207, // 414: messagedb.ChannelDB.ChannelMessageAtDel:output_type -> messagedb.ReplyChannelMessageAtDel
	137, // 415: messagedb.ChannelDB.UpdateChannelMsgId:output_type -> messagedb.ReplyUpdateChannelMsgId
	3,   // 416: messagedb.SearchMsgServer.ShInsertOrUpdateUserMsg:output_type -> messagedb.ReplyNull
	3,   // 417: messagedb.SearchMsgServer.ShDeleteUserMsg:output_type -> messagedb.ReplyNull
	3,   // 418: messagedb.SearchMsgServer.ShBatchDeleteUserMsg:output_type -> messagedb.ReplyNull
	3,   // 419: messagedb.SearchMsgServer.ShDeleteUserMsgByUserIdAndWithIdAndEncry:output_type -> messagedb.ReplyNull
	3,   // 420: messagedb.SearchMsgServer.ShInsertOrUpdateChannelMsg:output_type -> messagedb.ReplyNull
	244, // 421: messagedb.SearchMsgServer.ShDeleteMsgs:output_type -> messagedb.MsgId
	21,  // 422: messagedb.SearchMsgServer.ShDeleteUserHistory:output_type -> messagedb.MsgsAndMaxId
	328, // [328:423] is the sub-list for method output_type
	233, // [233:328] is the sub-list for method input_type
	233, // [233:233] is the sub-list for extension type_name
	233, // [233:233] is the sub-list for extension extendee
	0,   // [0:233] is the sub-list for field type_name
}

func init() { file_messagedb_proto_init() }
func file_messagedb_proto_init() {
	if File_messagedb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messagedb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUpdateUserDialogUpdateDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUpdateUserDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelIdAndLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelIdAndUserIdAndLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelIdAndAdminUsersAndEventFiltersAndUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelIdAndAdminUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelIdAndEventFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelIdAndAdminUsersAndEventFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelIdAndEventFiltersAndUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelIdAndMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelIdAndMsgIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelIdAndUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DialogIsCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelIdAndNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgsAndMaxId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelDialogAndMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelDialogAndMsgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqForWardUserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserMsgHis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DialogTopMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForWardUserMsgList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMsgList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMsgListAndPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDialogList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDialogAndMsgList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetPingedDialogAndMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDialogAndMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqInsertOrUpdateUserMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqIncreaseUserLocalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyIncreaseUserLocalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetCurrentUserLocalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetCurrentUserLocalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqIncreaseChannelLocalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyIncreaseChannelLocalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetCurrentChannelLocalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetCurrentChannelLocalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqIncreaseUserMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSetUserMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSetMsgIdImported); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplySetMsgIdImported); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCheckMsgIdImported); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyCheckMsgIdImported); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUserMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateUserPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBatchUpdatUserPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStorePtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetDiffByPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetDiffByPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetActionDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeletePtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqClearPtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyClearPtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDeletePtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetActionDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStoreOtherInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBatchStoreOtherInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetOtherInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetOtherInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqInsertOrUpdateUserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetForwardUserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUserMsgHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUserMsgUUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUserMsgIdByUUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUserMsgListByUUIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteUserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBatchDeleteUserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetOneUserMsgByUserIdAndMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteUserMsgByUserIdAndWithIdAndEncry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqClearHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessageHistoryPageByMediaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetMessageHistoryPageByMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqInsertOrUpdateChannelMessageDeleteMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMessageDeleteMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserDialogSetUnreadMetionsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUserDialogSetUnreadMetionsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserDialogGetUnreadMetionsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUserDialogGetUnreadMetionsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserDialogChangeUnreadMetionsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUserDialogChangeUnreadMetionsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUserMediaMessageStatisticsByMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetUserMediaMessageStatisticsByMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetMessageHistoryPageByMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqInsertOrUpdateUserDialogAndMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateSelfDialogAndMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateDialogAddUnread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUpdateDialogAddUnread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateDialogClearDraft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUpdateDialogClearDraft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUserDialogAllUnread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetUserDialogAllUnread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateReceDialogAndMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetDialogAndMsgByUserIdAndWithIdAndType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetDialogAndMsgsByUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetDialogAndMsgsByPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqReadSelfDialogAndMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateReadinbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateReadoutbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteUserDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateUserDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserDialogParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateUserDialogUpdateDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateDialogToPinged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateDialogToFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCancelPingedDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetPingedDialogAndMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetLastLimitDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetLastLimitDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateReadInBoxMaxId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateReadOutBoxMaxId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateChannelReadinbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateChannelReadoutbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteUserDialogByChannelId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUserChannelDialogByUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStoreUserDialogErlang); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUserDialogErlangByUserIdWithIdWithType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetUserDialogErlangByUserIdWithIdWithType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqInsertRandomStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetRandomStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSetSuperGroupMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplySetSuperGroupMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetSuperGroupMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetSuperGroupMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqInsertMsgIdSerialCodeMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyInsertMsgIdSerialCodeMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetMsgIdSerialCodeMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetMsgIdSerialCodeMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgIdSerialCodeMapRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateChannelMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUpdateChannelMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateChannelMsgIdAndPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUpdateChannelMsgIdAndPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSetChannelMsgIdAndPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplySetChannelMsgIdAndPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateChannelPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUpdateChannelPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateChannelPtsWithNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUpdateChannelPtsWithNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStoreChannelPtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBatchStoreChannelPtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyErr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelDiffByPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelDiffByPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetUserDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPtsDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetUserDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelLastPtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelLastPtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteChannelPtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDeleteChannelPtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqInsertOrUpdateChannelMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateChannelMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBatchInsertOrUpdateChannelMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteMsgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDeleteMsgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteUserHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDeleteUserHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteChannelMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDeleteChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMsgsByMsgIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelMsgsByMsgIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMsgHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelMsgHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelTopMst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelMediaMessageHistoryByMediaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMediaMessageHistoryByMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelMediaMessageHistoryByMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyInsertOrUpdateChannelMessageDeleteMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelMessageDeleteMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMediaMessageStatisticsByMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelMediaMessageStatisticsByMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelTopMst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqInsertOrUpdateChannelDialogAndMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetDialogMaxReadInMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetDialogMaxReadInMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSetDialogMaxReadInMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetDialogAndMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetDialogAndMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetDialogAndMsgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetDialogAndMsgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStoreAdminLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFindsAdminLogByChannelId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyFindsAdminLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFindsAdminLogByChannelIdAndUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFindsAdminLogByChannelIdAndEventFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFindsAdminLogByChannelIdAndAdminUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqChannelMessageAtAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChannelMessageAtAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqChannelMessageAtGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChannelMessageAtGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqChannelMessageAtDel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChannelMessageAtDel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserMessageAtAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUserMessageAtAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserMessageAtGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUserMessageAtGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserMessageAtDel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUserMessageAtDel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMessageAt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMessageAt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMessageDeleteMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgIdImported); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMediaMessageStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMediaMessageStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDialogErlang); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtherInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelAdminLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPingedDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForWardUserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLocalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelLocalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdAndWithIdAndTypeAndEncry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdAndWithId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithIdAndType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdAndWithIdAndType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdAndPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Combination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MentionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdAndMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUIDS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgIDList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdAndWithIdAndMsgIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdAndRandomId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetRandomStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMediaMsgByFilterReqPara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMediaMsgByFilterRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSearchUserMediaMsgByFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespSearchUserMediaMsgByFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSearchChannelMediaMsgByFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespSearchChannelMediaMsgByFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDialogData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetDialogUnreadCountByUserIdAndWithId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespGetDialogUnreadCountByUserIdAndWithId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagedb_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqShDeleteUserHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messagedb_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   257,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_messagedb_proto_goTypes,
		DependencyIndexes: file_messagedb_proto_depIdxs,
		EnumInfos:         file_messagedb_proto_enumTypes,
		MessageInfos:      file_messagedb_proto_msgTypes,
	}.Build()
	File_messagedb_proto = out.File
	file_messagedb_proto_rawDesc = nil
	file_messagedb_proto_goTypes = nil
	file_messagedb_proto_depIdxs = nil
}
