// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/pbmessagedb/messagedb.proto

/*
Package messagedb is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/pbmessagedb/messagedb.proto

It has these top-level messages:

	ReplyNull
	ReplyUpdateUserDialogUpdateDate
	ReplyUpdateUserDialog
	ChannelIdAndLimit
	ChannelIdAndUserIdAndLimit
	ChannelIdAndAdminUsersAndEventFiltersAndUserId
	ChannelIdAndAdminUsers
	ChannelIdAndEventFilters
	ChannelIdAndAdminUsersAndEventFilters
	ChannelIdAndEventFiltersAndUserId
	ChannelMsgId
	ChannelId
	ChannelIds
	ChannelIdAndMsgId
	ChannelIdAndMsgIds
	ChannelIdAndUserId
	DialogIsCreated
	ChannelIdAndNum
	MsgsAndMaxId
	ChannelDialog
	ChannelDialogAndMsg
	ChannelDialogAndMsgs
	ReqForWardUserMsg
	ReqUserMsgHis
	DialogTopMessage
	ForWardUserMsgList
	UserMsgList
	UserMsgListAndPts
	UserDialogList
	UserDialogAndMsgList
	ReplyGetPingedDialogAndMsg
	UserDialogAndMsg
	ReqInsertOrUpdateUserMsgId
	ReqIncreaseUserLocalId
	ReplyIncreaseUserLocalId
	ReqGetCurrentUserLocalId
	ReplyGetCurrentUserLocalId
	ReqIncreaseChannelLocalId
	ReplyIncreaseChannelLocalId
	ReqGetCurrentChannelLocalId
	ReplyGetCurrentChannelLocalId
	ReqIncreaseUserMsgId
	ReqSetUserMsgId
	ReqSetMsgIdImported
	ReplySetMsgIdImported
	ReqCheckMsgIdImported
	ReplyCheckMsgIdImported
	ReqGetUserMsgId
	ReqUpdateUserPts
	ReqBatchUpdatUserPts
	ReqStorePtsHandle
	ReqGetDiffByPts
	ReplyGetDiffByPts
	ReqGetActionDiff
	ReqDeletePtsHandle
	ReqClearPtsHandle
	ReplyClearPtsHandle
	ReplyDeletePtsHandle
	ReplyGetActionDiff
	ReqStoreOtherInfoMsg
	ReqBatchStoreOtherInfoMsg
	ReqGetOtherInfoMsg
	ReplyGetOtherInfoMsg
	ReqInsertOrUpdateUserMsg
	ReqGetForwardUserMsg
	ReqGetUserMsgHistory
	ReqGetUserMsgUUID
	ReqGetUserMsgIdByUUID
	ReqGetUserMsgListByUUIDs
	ReqDeleteUserMsg
	ReqBatchDeleteUserMsg
	ReqGetOneUserMsgByUserIdAndMsgId
	ReqDeleteUserMsgByUserIdAndWithIdAndEncry
	ReqClearHistory
	GetMessageHistoryPageByMediaConfig
	ReqGetMessageHistoryPageByMedia
	ReqInsertOrUpdateChannelMessageDeleteMark
	ReqGetChannelMessageDeleteMark
	ReqUserDialogSetUnreadMetionsCount
	ReplyUserDialogSetUnreadMetionsCount
	ReqUserDialogGetUnreadMetionsCount
	ReplyUserDialogGetUnreadMetionsCount
	ReqUserDialogChangeUnreadMetionsCount
	ReplyUserDialogChangeUnreadMetionsCount
	ReqGetUserMediaMessageStatisticsByMedia
	ReplyGetUserMediaMessageStatisticsByMedia
	ReplyGetMessageHistoryPageByMedia
	ReqInsertOrUpdateUserDialogAndMsg
	ReqUpdateSelfDialogAndMsg
	ReqUpdateDialogAddUnread
	ReplyUpdateDialogAddUnread
	ReqUpdateDialogClearDraft
	ReplyUpdateDialogClearDraft
	ReqGetUserDialogAllUnread
	ReplyGetUserDialogAllUnread
	ReqUpdateReceDialogAndMsg
	ReqGetDialogAndMsgByUserIdAndWithIdAndType
	ReqGetDialogAndMsgsByUserId
	ReqGetDialogAndMsgsByPage
	ReqReadSelfDialogAndMsg
	ReqUpdateReadinbox
	ReqUpdateReadoutbox
	ReqDeleteUserDialog
	ReqUpdateUserDialog
	UpdateUserDialogParam
	ReqUpdateUserDialogUpdateDate
	ReqUpdateDialogToPinged
	ReqUpdateDialogToFolder
	ReqCancelPingedDialog
	ReqGetPingedDialogAndMsg
	ReqGetLastLimitDialog
	UserRating
	ReplyGetLastLimitDialog
	ReqUpdateReadInBoxMaxId
	ReqUpdateReadOutBoxMaxId
	ReqUpdateChannelReadinbox
	ReqUpdateChannelReadoutbox
	ReqDeleteUserDialogByChannelId
	ReqGetUserChannelDialogByUserId
	ReqStoreUserDialogErlang
	ReqGetUserDialogErlangByUserIdWithIdWithType
	ReplyGetUserDialogErlangByUserIdWithIdWithType
	ReqInsertRandomStatus
	ReqGetRandomStatus
	ReqSetSuperGroupMsg
	ReplySetSuperGroupMsg
	ReqGetSuperGroupMsg
	ReplyGetSuperGroupMsg
	ReqInsertMsgIdSerialCodeMap
	ReplyInsertMsgIdSerialCodeMap
	ReqGetMsgIdSerialCodeMap
	ReplyGetMsgIdSerialCodeMap
	MsgIdSerialCodeMapRecord
	ReqUpdateChannelMsgId
	ReplyUpdateChannelMsgId
	ReqUpdateChannelMsgIdAndPts
	ReplyUpdateChannelMsgIdAndPts
	ReqSetChannelMsgIdAndPts
	ReplySetChannelMsgIdAndPts
	ReqUpdateChannelPts
	ReplyUpdateChannelPts
	ReqUpdateChannelPtsWithNum
	ReplyUpdateChannelPtsWithNum
	ReqGetChannelMsgId
	ReplyGetChannelMsgId
	ReqStoreChannelPtsHandle
	ReqBatchStoreChannelPtsHandle
	ReplyErr
	ReqGetChannelDiffByPts
	ReplyGetChannelDiffByPts
	ReqGetUserDiff
	ChannelPtsDiff
	ReplyGetUserDiff
	ReqGetChannelLastPtsHandle
	ReplyGetChannelLastPtsHandle
	ReqDeleteChannelPtsHandle
	ReplyDeleteChannelPtsHandle
	ReqInsertOrUpdateChannelMsg
	ReqUpdateChannelMsg
	ReqBatchInsertOrUpdateChannelMsg
	ReqDeleteMsgs
	ReplyDeleteMsgs
	ReqDeleteUserHistory
	ReplyDeleteUserHistory
	ReqDeleteChannelMsg
	ReqDeleteChannelMessage
	ReplyDeleteChannelMessage
	ReqGetChannelMessage
	ReplyGetChannelMessage
	ReqGetChannelMsgsByMsgIds
	ReplyGetChannelMsgsByMsgIds
	ReqGetChannelMsgHistory
	ReplyGetChannelMsgHistory
	ReqGetChannelTopMst
	GetChannelMediaMessageHistoryByMediaConfig
	ReqGetChannelMediaMessageHistoryByMedia
	ReplyGetChannelMediaMessageHistoryByMedia
	ReplyInsertOrUpdateChannelMessageDeleteMark
	ReplyGetChannelMessageDeleteMark
	ReqGetChannelMediaMessageStatisticsByMedia
	ReplyGetChannelMediaMessageStatisticsByMedia
	ReplyGetChannelTopMst
	ReqInsertOrUpdateChannelDialogAndMsg
	ReqGetDialogMaxReadInMsgId
	ReplyGetDialogMaxReadInMsgId
	ReqSetDialogMaxReadInMsgId
	ReqGetDialogAndMsg
	ReplyGetDialogAndMsg
	ReqGetDialogAndMsgs
	ReplyGetDialogAndMsgs
	ReqStoreAdminLog
	ReqFindsAdminLogByChannelId
	ReplyFindsAdminLog
	ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId
	ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId
	ReqFindsAdminLogByChannelIdAndUserId
	ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters
	ReqFindsAdminLogByChannelIdAndEventFilters
	ReqFindsAdminLogByChannelIdAndAdminUsers
	ReqChannelMessageAtAdd
	ReplyChannelMessageAtAdd
	ReqChannelMessageAtGet
	ReplyChannelMessageAtGet
	ReqChannelMessageAtDel
	ReplyChannelMessageAtDel
	ReqUserMessageAtAdd
	ReplyUserMessageAtAdd
	ReqUserMessageAtGet
	ReplyUserMessageAtGet
	ReqUserMessageAtDel
	ReplyUserMessageAtDel
	ChannelMessageAt
	UserMessageAt
	ChannelMessageDeleteMark
	MsgIdImported
	UserMediaMessageStatistics
	ChannelMediaMessageStatistics
	UserDialogErlang
	PtsHandle
	OtherInfoMsg
	ChannelPtsHandle
	ChannelAdminLog
	UserPingedDialog
	UserDialog
	ForWardUserMsg
	UserMsgId
	UserLocalId
	ChannelLocalId
	UserIdAndWithIdAndTypeAndEncry
	Status
	UserIdAndWithId
	WithIdAndType
	UserIdAndWithIdAndType
	UserId
	UserIdAndPts
	Bytes
	UserMsg
	Combination
	MentionStatus
	UserIdAndMsgId
	UUID
	MsgId
	UUIDS
	MsgIDList
	UserIdAndWithIdAndMsgIds
	UserIdAndRandomId
	ReplyGetRandomStatus
	SearchMediaMsgByFilterReqPara
	SearchMediaMsgByFilterRespData
	ReqSearchUserMediaMsgByFilter
	RespSearchUserMediaMsgByFilter
	ReqSearchChannelMediaMsgByFilter
	RespSearchChannelMediaMsgByFilter
	QueryDialogData
	ReqGetDialogUnreadCountByUserIdAndWithId
	RespGetDialogUnreadCountByUserIdAndWithId
	ReqShDeleteUserHistory
*/
package messagedb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pbcomm "gitlab.chatserver.im/interfaceprobuf/pbcomm"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type USER_MSG int32

const (
	USER_MSG_UN_ENCRY USER_MSG = 0
	USER_MSG_ENCRY    USER_MSG = 1
)

var USER_MSG_name = map[int32]string{
	0: "UN_ENCRY",
	1: "ENCRY",
}
var USER_MSG_value = map[string]int32{
	"UN_ENCRY": 0,
	"ENCRY":    1,
}

func (x USER_MSG) String() string {
	return proto.EnumName(USER_MSG_name, int32(x))
}
func (USER_MSG) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{0} }

type ReplyUpdateDialogAddUnreadInt int32

const (
	ReplyUpdateDialogAddUnread_success          ReplyUpdateDialogAddUnreadInt = 0
	ReplyUpdateDialogAddUnread_dialog_not_exist ReplyUpdateDialogAddUnreadInt = 1
)

var ReplyUpdateDialogAddUnreadInt_name = map[int32]string{
	0: "success",
	1: "dialog_not_exist",
}
var ReplyUpdateDialogAddUnreadInt_value = map[string]int32{
	"success":          0,
	"dialog_not_exist": 1,
}

func (x ReplyUpdateDialogAddUnreadInt) String() string {
	return proto.EnumName(ReplyUpdateDialogAddUnreadInt_name, int32(x))
}
func (ReplyUpdateDialogAddUnreadInt) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{90, 0}
}

type PtsHandleInt int32

const (
	PtsHandle_COMMON PtsHandleInt = 0
	PtsHandle_ACTION PtsHandleInt = 1
)

var PtsHandleInt_name = map[int32]string{
	0: "COMMON",
	1: "ACTION",
}
var PtsHandleInt_value = map[string]int32{
	"COMMON": 0,
	"ACTION": 1,
}

func (x PtsHandleInt) String() string {
	return proto.EnumName(PtsHandleInt_name, int32(x))
}
func (PtsHandleInt) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{218, 0} }

// 返回空结构体
type ReplyNull struct {
}

func (m *ReplyNull) Reset()                    { *m = ReplyNull{} }
func (m *ReplyNull) String() string            { return proto.CompactTextString(m) }
func (*ReplyNull) ProtoMessage()               {}
func (*ReplyNull) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{0} }

type ReplyUpdateUserDialogUpdateDate struct {
}

func (m *ReplyUpdateUserDialogUpdateDate) Reset()         { *m = ReplyUpdateUserDialogUpdateDate{} }
func (m *ReplyUpdateUserDialogUpdateDate) String() string { return proto.CompactTextString(m) }
func (*ReplyUpdateUserDialogUpdateDate) ProtoMessage()    {}
func (*ReplyUpdateUserDialogUpdateDate) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{1}
}

type ReplyUpdateUserDialog struct {
}

func (m *ReplyUpdateUserDialog) Reset()                    { *m = ReplyUpdateUserDialog{} }
func (m *ReplyUpdateUserDialog) String() string            { return proto.CompactTextString(m) }
func (*ReplyUpdateUserDialog) ProtoMessage()               {}
func (*ReplyUpdateUserDialog) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{2} }

type ChannelIdAndLimit struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Limit     int32 `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *ChannelIdAndLimit) Reset()                    { *m = ChannelIdAndLimit{} }
func (m *ChannelIdAndLimit) String() string            { return proto.CompactTextString(m) }
func (*ChannelIdAndLimit) ProtoMessage()               {}
func (*ChannelIdAndLimit) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{3} }

func (m *ChannelIdAndLimit) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelIdAndLimit) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ChannelIdAndUserIdAndLimit struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserId    int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Limit     int32 `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *ChannelIdAndUserIdAndLimit) Reset()         { *m = ChannelIdAndUserIdAndLimit{} }
func (m *ChannelIdAndUserIdAndLimit) String() string { return proto.CompactTextString(m) }
func (*ChannelIdAndUserIdAndLimit) ProtoMessage()    {}
func (*ChannelIdAndUserIdAndLimit) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{4}
}

func (m *ChannelIdAndUserIdAndLimit) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelIdAndUserIdAndLimit) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChannelIdAndUserIdAndLimit) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ChannelIdAndAdminUsersAndEventFiltersAndUserId struct {
	ChannelId    int32   `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserId       int32   `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	AdminUsers   []int32 `protobuf:"varint,3,rep,packed,name=AdminUsers" json:"AdminUsers,omitempty"`
	EventFilters []int32 `protobuf:"varint,4,rep,packed,name=EventFilters" json:"EventFilters,omitempty"`
	Limit        int32   `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *ChannelIdAndAdminUsersAndEventFiltersAndUserId) Reset() {
	*m = ChannelIdAndAdminUsersAndEventFiltersAndUserId{}
}
func (m *ChannelIdAndAdminUsersAndEventFiltersAndUserId) String() string {
	return proto.CompactTextString(m)
}
func (*ChannelIdAndAdminUsersAndEventFiltersAndUserId) ProtoMessage() {}
func (*ChannelIdAndAdminUsersAndEventFiltersAndUserId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{5}
}

func (m *ChannelIdAndAdminUsersAndEventFiltersAndUserId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelIdAndAdminUsersAndEventFiltersAndUserId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChannelIdAndAdminUsersAndEventFiltersAndUserId) GetAdminUsers() []int32 {
	if m != nil {
		return m.AdminUsers
	}
	return nil
}

func (m *ChannelIdAndAdminUsersAndEventFiltersAndUserId) GetEventFilters() []int32 {
	if m != nil {
		return m.EventFilters
	}
	return nil
}

func (m *ChannelIdAndAdminUsersAndEventFiltersAndUserId) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ChannelIdAndAdminUsers struct {
	ChannelId  int32   `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	AdminUsers []int32 `protobuf:"varint,2,rep,packed,name=AdminUsers" json:"AdminUsers,omitempty"`
	Limit      int32   `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *ChannelIdAndAdminUsers) Reset()                    { *m = ChannelIdAndAdminUsers{} }
func (m *ChannelIdAndAdminUsers) String() string            { return proto.CompactTextString(m) }
func (*ChannelIdAndAdminUsers) ProtoMessage()               {}
func (*ChannelIdAndAdminUsers) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{6} }

func (m *ChannelIdAndAdminUsers) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelIdAndAdminUsers) GetAdminUsers() []int32 {
	if m != nil {
		return m.AdminUsers
	}
	return nil
}

func (m *ChannelIdAndAdminUsers) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ChannelIdAndEventFilters struct {
	ChannelId    int32   `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	EventFilters []int32 `protobuf:"varint,2,rep,packed,name=EventFilters" json:"EventFilters,omitempty"`
	Limit        int32   `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *ChannelIdAndEventFilters) Reset()         { *m = ChannelIdAndEventFilters{} }
func (m *ChannelIdAndEventFilters) String() string { return proto.CompactTextString(m) }
func (*ChannelIdAndEventFilters) ProtoMessage()    {}
func (*ChannelIdAndEventFilters) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{7}
}

func (m *ChannelIdAndEventFilters) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelIdAndEventFilters) GetEventFilters() []int32 {
	if m != nil {
		return m.EventFilters
	}
	return nil
}

func (m *ChannelIdAndEventFilters) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ChannelIdAndAdminUsersAndEventFilters struct {
	ChannelId    int32   `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	AdminUsers   []int32 `protobuf:"varint,2,rep,packed,name=AdminUsers" json:"AdminUsers,omitempty"`
	EventFilters []int32 `protobuf:"varint,3,rep,packed,name=EventFilters" json:"EventFilters,omitempty"`
	Limit        int32   `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *ChannelIdAndAdminUsersAndEventFilters) Reset()         { *m = ChannelIdAndAdminUsersAndEventFilters{} }
func (m *ChannelIdAndAdminUsersAndEventFilters) String() string { return proto.CompactTextString(m) }
func (*ChannelIdAndAdminUsersAndEventFilters) ProtoMessage()    {}
func (*ChannelIdAndAdminUsersAndEventFilters) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{8}
}

func (m *ChannelIdAndAdminUsersAndEventFilters) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelIdAndAdminUsersAndEventFilters) GetAdminUsers() []int32 {
	if m != nil {
		return m.AdminUsers
	}
	return nil
}

func (m *ChannelIdAndAdminUsersAndEventFilters) GetEventFilters() []int32 {
	if m != nil {
		return m.EventFilters
	}
	return nil
}

func (m *ChannelIdAndAdminUsersAndEventFilters) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ChannelIdAndEventFiltersAndUserId struct {
	ChannelId    int32   `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserId       int32   `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	EventFilters []int32 `protobuf:"varint,3,rep,packed,name=EventFilters" json:"EventFilters,omitempty"`
	Limit        int32   `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *ChannelIdAndEventFiltersAndUserId) Reset()         { *m = ChannelIdAndEventFiltersAndUserId{} }
func (m *ChannelIdAndEventFiltersAndUserId) String() string { return proto.CompactTextString(m) }
func (*ChannelIdAndEventFiltersAndUserId) ProtoMessage()    {}
func (*ChannelIdAndEventFiltersAndUserId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{9}
}

func (m *ChannelIdAndEventFiltersAndUserId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelIdAndEventFiltersAndUserId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChannelIdAndEventFiltersAndUserId) GetEventFilters() []int32 {
	if m != nil {
		return m.EventFilters
	}
	return nil
}

func (m *ChannelIdAndEventFiltersAndUserId) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ChannelMsgId struct {
	Id        int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ChannelId int32 `protobuf:"varint,2,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	MsgId     int32 `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Pts       int32 `protobuf:"varint,4,opt,name=Pts,proto3" json:"Pts,omitempty"`
	LastDate  int32 `protobuf:"varint,5,opt,name=LastDate,proto3" json:"LastDate,omitempty"`
}

func (m *ChannelMsgId) Reset()                    { *m = ChannelMsgId{} }
func (m *ChannelMsgId) String() string            { return proto.CompactTextString(m) }
func (*ChannelMsgId) ProtoMessage()               {}
func (*ChannelMsgId) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{10} }

func (m *ChannelMsgId) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChannelMsgId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelMsgId) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ChannelMsgId) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ChannelMsgId) GetLastDate() int32 {
	if m != nil {
		return m.LastDate
	}
	return 0
}

type ChannelId struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
}

func (m *ChannelId) Reset()                    { *m = ChannelId{} }
func (m *ChannelId) String() string            { return proto.CompactTextString(m) }
func (*ChannelId) ProtoMessage()               {}
func (*ChannelId) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{11} }

func (m *ChannelId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

type ChannelIds struct {
	ChannelIds []int32 `protobuf:"varint,1,rep,packed,name=ChannelIds" json:"ChannelIds,omitempty"`
}

func (m *ChannelIds) Reset()                    { *m = ChannelIds{} }
func (m *ChannelIds) String() string            { return proto.CompactTextString(m) }
func (*ChannelIds) ProtoMessage()               {}
func (*ChannelIds) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{12} }

func (m *ChannelIds) GetChannelIds() []int32 {
	if m != nil {
		return m.ChannelIds
	}
	return nil
}

type ChannelIdAndMsgId struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	MsgId     int32 `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
}

func (m *ChannelIdAndMsgId) Reset()                    { *m = ChannelIdAndMsgId{} }
func (m *ChannelIdAndMsgId) String() string            { return proto.CompactTextString(m) }
func (*ChannelIdAndMsgId) ProtoMessage()               {}
func (*ChannelIdAndMsgId) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{13} }

func (m *ChannelIdAndMsgId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelIdAndMsgId) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type ChannelIdAndMsgIds struct {
	ChannelId int32   `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	MsgIds    []int32 `protobuf:"varint,2,rep,packed,name=MsgIds" json:"MsgIds,omitempty"`
}

func (m *ChannelIdAndMsgIds) Reset()                    { *m = ChannelIdAndMsgIds{} }
func (m *ChannelIdAndMsgIds) String() string            { return proto.CompactTextString(m) }
func (*ChannelIdAndMsgIds) ProtoMessage()               {}
func (*ChannelIdAndMsgIds) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{14} }

func (m *ChannelIdAndMsgIds) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelIdAndMsgIds) GetMsgIds() []int32 {
	if m != nil {
		return m.MsgIds
	}
	return nil
}

type ChannelIdAndUserId struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserId    int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *ChannelIdAndUserId) Reset()                    { *m = ChannelIdAndUserId{} }
func (m *ChannelIdAndUserId) String() string            { return proto.CompactTextString(m) }
func (*ChannelIdAndUserId) ProtoMessage()               {}
func (*ChannelIdAndUserId) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{15} }

func (m *ChannelIdAndUserId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelIdAndUserId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type DialogIsCreated struct {
	DialogIdCreated bool `protobuf:"varint,1,opt,name=DialogIdCreated,proto3" json:"DialogIdCreated,omitempty"`
}

func (m *DialogIsCreated) Reset()                    { *m = DialogIsCreated{} }
func (m *DialogIsCreated) String() string            { return proto.CompactTextString(m) }
func (*DialogIsCreated) ProtoMessage()               {}
func (*DialogIsCreated) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{16} }

func (m *DialogIsCreated) GetDialogIdCreated() bool {
	if m != nil {
		return m.DialogIdCreated
	}
	return false
}

type ChannelIdAndNum struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Number    int32 `protobuf:"varint,2,opt,name=Number,proto3" json:"Number,omitempty"`
}

func (m *ChannelIdAndNum) Reset()                    { *m = ChannelIdAndNum{} }
func (m *ChannelIdAndNum) String() string            { return proto.CompactTextString(m) }
func (*ChannelIdAndNum) ProtoMessage()               {}
func (*ChannelIdAndNum) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{17} }

func (m *ChannelIdAndNum) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelIdAndNum) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type MsgsAndMaxId struct {
	MaxMsgId int32   `protobuf:"varint,1,opt,name=MaxMsgId,proto3" json:"MaxMsgId,omitempty"`
	Msgs     []int32 `protobuf:"varint,2,rep,packed,name=Msgs" json:"Msgs,omitempty"`
}

func (m *MsgsAndMaxId) Reset()                    { *m = MsgsAndMaxId{} }
func (m *MsgsAndMaxId) String() string            { return proto.CompactTextString(m) }
func (*MsgsAndMaxId) ProtoMessage()               {}
func (*MsgsAndMaxId) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{18} }

func (m *MsgsAndMaxId) GetMaxMsgId() int32 {
	if m != nil {
		return m.MaxMsgId
	}
	return 0
}

func (m *MsgsAndMaxId) GetMsgs() []int32 {
	if m != nil {
		return m.Msgs
	}
	return nil
}

type ChannelDialog struct {
	ChannelId   int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	TopMessage  int32 `protobuf:"varint,2,opt,name=TopMessage,proto3" json:"TopMessage,omitempty"`
	MaxReadInId int32 `protobuf:"varint,3,opt,name=MaxReadInId,proto3" json:"MaxReadInId,omitempty"`
	Encry       int32 `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
}

func (m *ChannelDialog) Reset()                    { *m = ChannelDialog{} }
func (m *ChannelDialog) String() string            { return proto.CompactTextString(m) }
func (*ChannelDialog) ProtoMessage()               {}
func (*ChannelDialog) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{19} }

func (m *ChannelDialog) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelDialog) GetTopMessage() int32 {
	if m != nil {
		return m.TopMessage
	}
	return 0
}

func (m *ChannelDialog) GetMaxReadInId() int32 {
	if m != nil {
		return m.MaxReadInId
	}
	return 0
}

func (m *ChannelDialog) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

type ChannelDialogAndMsg struct {
	ChannelDialog *ChannelDialog `protobuf:"bytes,1,opt,name=ChannelDialog" json:"ChannelDialog,omitempty"`
	ChannelMsg    *UserMsg       `protobuf:"bytes,2,opt,name=ChannelMsg" json:"ChannelMsg,omitempty"`
}

func (m *ChannelDialogAndMsg) Reset()                    { *m = ChannelDialogAndMsg{} }
func (m *ChannelDialogAndMsg) String() string            { return proto.CompactTextString(m) }
func (*ChannelDialogAndMsg) ProtoMessage()               {}
func (*ChannelDialogAndMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{20} }

func (m *ChannelDialogAndMsg) GetChannelDialog() *ChannelDialog {
	if m != nil {
		return m.ChannelDialog
	}
	return nil
}

func (m *ChannelDialogAndMsg) GetChannelMsg() *UserMsg {
	if m != nil {
		return m.ChannelMsg
	}
	return nil
}

type ChannelDialogAndMsgs struct {
	ChannelDialogAndMsgs []*ChannelDialogAndMsg `protobuf:"bytes,1,rep,name=ChannelDialogAndMsgs" json:"ChannelDialogAndMsgs,omitempty"`
}

func (m *ChannelDialogAndMsgs) Reset()                    { *m = ChannelDialogAndMsgs{} }
func (m *ChannelDialogAndMsgs) String() string            { return proto.CompactTextString(m) }
func (*ChannelDialogAndMsgs) ProtoMessage()               {}
func (*ChannelDialogAndMsgs) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{21} }

func (m *ChannelDialogAndMsgs) GetChannelDialogAndMsgs() []*ChannelDialogAndMsg {
	if m != nil {
		return m.ChannelDialogAndMsgs
	}
	return nil
}

type ReqForWardUserMsg struct {
	UserId     int32   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId     int32   `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithIdType int32   `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`
	Encry      int32   `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
	MsgIds     []int32 `protobuf:"varint,5,rep,packed,name=MsgIds" json:"MsgIds,omitempty"`
}

func (m *ReqForWardUserMsg) Reset()                    { *m = ReqForWardUserMsg{} }
func (m *ReqForWardUserMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqForWardUserMsg) ProtoMessage()               {}
func (*ReqForWardUserMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{22} }

func (m *ReqForWardUserMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqForWardUserMsg) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqForWardUserMsg) GetWithIdType() int32 {
	if m != nil {
		return m.WithIdType
	}
	return 0
}

func (m *ReqForWardUserMsg) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *ReqForWardUserMsg) GetMsgIds() []int32 {
	if m != nil {
		return m.MsgIds
	}
	return nil
}

type ReqUserMsgHis struct {
	Selfid     int32 `protobuf:"varint,1,opt,name=Selfid,proto3" json:"Selfid,omitempty"`
	Withid     int32 `protobuf:"varint,2,opt,name=Withid,proto3" json:"Withid,omitempty"`
	Type       int32 `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	OffsetId   int32 `protobuf:"varint,4,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`
	OffsetDate int32 `protobuf:"varint,5,opt,name=OffsetDate,proto3" json:"OffsetDate,omitempty"`
	AddOffset  int32 `protobuf:"varint,6,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`
	MinId      int32 `protobuf:"varint,7,opt,name=MinId,proto3" json:"MinId,omitempty"`
	MaxId      int32 `protobuf:"varint,8,opt,name=MaxId,proto3" json:"MaxId,omitempty"`
	Limit      int32 `protobuf:"varint,9,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Encry      int32 `protobuf:"varint,10,opt,name=Encry,proto3" json:"Encry,omitempty"`
}

func (m *ReqUserMsgHis) Reset()                    { *m = ReqUserMsgHis{} }
func (m *ReqUserMsgHis) String() string            { return proto.CompactTextString(m) }
func (*ReqUserMsgHis) ProtoMessage()               {}
func (*ReqUserMsgHis) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{23} }

func (m *ReqUserMsgHis) GetSelfid() int32 {
	if m != nil {
		return m.Selfid
	}
	return 0
}

func (m *ReqUserMsgHis) GetWithid() int32 {
	if m != nil {
		return m.Withid
	}
	return 0
}

func (m *ReqUserMsgHis) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqUserMsgHis) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *ReqUserMsgHis) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *ReqUserMsgHis) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *ReqUserMsgHis) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *ReqUserMsgHis) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ReqUserMsgHis) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqUserMsgHis) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

type DialogTopMessage struct {
	FromId     int32 `protobuf:"varint,1,opt,name=FromId,proto3" json:"FromId,omitempty"`
	TopMessage int32 `protobuf:"varint,2,opt,name=TopMessage,proto3" json:"TopMessage,omitempty"`
}

func (m *DialogTopMessage) Reset()                    { *m = DialogTopMessage{} }
func (m *DialogTopMessage) String() string            { return proto.CompactTextString(m) }
func (*DialogTopMessage) ProtoMessage()               {}
func (*DialogTopMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{24} }

func (m *DialogTopMessage) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *DialogTopMessage) GetTopMessage() int32 {
	if m != nil {
		return m.TopMessage
	}
	return 0
}

type ForWardUserMsgList struct {
	ForWardUserMsg []*ForWardUserMsg `protobuf:"bytes,1,rep,name=ForWardUserMsg" json:"ForWardUserMsg,omitempty"`
}

func (m *ForWardUserMsgList) Reset()                    { *m = ForWardUserMsgList{} }
func (m *ForWardUserMsgList) String() string            { return proto.CompactTextString(m) }
func (*ForWardUserMsgList) ProtoMessage()               {}
func (*ForWardUserMsgList) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{25} }

func (m *ForWardUserMsgList) GetForWardUserMsg() []*ForWardUserMsg {
	if m != nil {
		return m.ForWardUserMsg
	}
	return nil
}

type UserMsgList struct {
	UserMsgs []*UserMsg `protobuf:"bytes,1,rep,name=UserMsgs" json:"UserMsgs,omitempty"`
	Pts      int32      `protobuf:"varint,2,opt,name=pts,proto3" json:"pts,omitempty"`
}

func (m *UserMsgList) Reset()                    { *m = UserMsgList{} }
func (m *UserMsgList) String() string            { return proto.CompactTextString(m) }
func (*UserMsgList) ProtoMessage()               {}
func (*UserMsgList) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{26} }

func (m *UserMsgList) GetUserMsgs() []*UserMsg {
	if m != nil {
		return m.UserMsgs
	}
	return nil
}

func (m *UserMsgList) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

type UserMsgListAndPts struct {
	UserMsgs []*UserMsg `protobuf:"bytes,1,rep,name=UserMsgs" json:"UserMsgs,omitempty"`
	Pts      int32      `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`
	Count    int32      `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *UserMsgListAndPts) Reset()                    { *m = UserMsgListAndPts{} }
func (m *UserMsgListAndPts) String() string            { return proto.CompactTextString(m) }
func (*UserMsgListAndPts) ProtoMessage()               {}
func (*UserMsgListAndPts) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{27} }

func (m *UserMsgListAndPts) GetUserMsgs() []*UserMsg {
	if m != nil {
		return m.UserMsgs
	}
	return nil
}

func (m *UserMsgListAndPts) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *UserMsgListAndPts) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type UserDialogList struct {
	UserDialogs []*UserDialog `protobuf:"bytes,1,rep,name=UserDialogs" json:"UserDialogs,omitempty"`
}

func (m *UserDialogList) Reset()                    { *m = UserDialogList{} }
func (m *UserDialogList) String() string            { return proto.CompactTextString(m) }
func (*UserDialogList) ProtoMessage()               {}
func (*UserDialogList) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{28} }

func (m *UserDialogList) GetUserDialogs() []*UserDialog {
	if m != nil {
		return m.UserDialogs
	}
	return nil
}

type UserDialogAndMsgList struct {
	UserDialogAndMsgs []*UserDialogAndMsg `protobuf:"bytes,1,rep,name=UserDialogAndMsgs" json:"UserDialogAndMsgs,omitempty"`
	Count             int32               `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *UserDialogAndMsgList) Reset()                    { *m = UserDialogAndMsgList{} }
func (m *UserDialogAndMsgList) String() string            { return proto.CompactTextString(m) }
func (*UserDialogAndMsgList) ProtoMessage()               {}
func (*UserDialogAndMsgList) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{29} }

func (m *UserDialogAndMsgList) GetUserDialogAndMsgs() []*UserDialogAndMsg {
	if m != nil {
		return m.UserDialogAndMsgs
	}
	return nil
}

func (m *UserDialogAndMsgList) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ReplyGetPingedDialogAndMsg struct {
	DialogMsg                  *UserDialogAndMsgList `protobuf:"bytes,1,opt,name=DialogMsg" json:"DialogMsg,omitempty"`
	TopPeerId                  int32                 `protobuf:"varint,2,opt,name=TopPeerId,proto3" json:"TopPeerId,omitempty"`
	TopPeerType                int32                 `protobuf:"varint,3,opt,name=TopPeerType,proto3" json:"TopPeerType,omitempty"`
	TopMsgId                   int32                 `protobuf:"varint,4,opt,name=TopMsgId,proto3" json:"TopMsgId,omitempty"`
	UnreadMutedPeersCount      int32                 `protobuf:"varint,5,opt,name=Unread_muted_peers_count,json=UnreadMutedPeersCount,proto3" json:"Unread_muted_peers_count,omitempty"`
	UnreadUnmutedPeersCount    int32                 `protobuf:"varint,6,opt,name=Unread_unmuted_peers_count,json=UnreadUnmutedPeersCount,proto3" json:"Unread_unmuted_peers_count,omitempty"`
	UnreadMutedMessagesCount   int32                 `protobuf:"varint,7,opt,name=Unread_muted_messages_count,json=UnreadMutedMessagesCount,proto3" json:"Unread_muted_messages_count,omitempty"`
	UnreadUnmutedMessagesCount int32                 `protobuf:"varint,8,opt,name=Unread_unmuted_messages_count,json=UnreadUnmutedMessagesCount,proto3" json:"Unread_unmuted_messages_count,omitempty"`
}

func (m *ReplyGetPingedDialogAndMsg) Reset()         { *m = ReplyGetPingedDialogAndMsg{} }
func (m *ReplyGetPingedDialogAndMsg) String() string { return proto.CompactTextString(m) }
func (*ReplyGetPingedDialogAndMsg) ProtoMessage()    {}
func (*ReplyGetPingedDialogAndMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{30}
}

func (m *ReplyGetPingedDialogAndMsg) GetDialogMsg() *UserDialogAndMsgList {
	if m != nil {
		return m.DialogMsg
	}
	return nil
}

func (m *ReplyGetPingedDialogAndMsg) GetTopPeerId() int32 {
	if m != nil {
		return m.TopPeerId
	}
	return 0
}

func (m *ReplyGetPingedDialogAndMsg) GetTopPeerType() int32 {
	if m != nil {
		return m.TopPeerType
	}
	return 0
}

func (m *ReplyGetPingedDialogAndMsg) GetTopMsgId() int32 {
	if m != nil {
		return m.TopMsgId
	}
	return 0
}

func (m *ReplyGetPingedDialogAndMsg) GetUnreadMutedPeersCount() int32 {
	if m != nil {
		return m.UnreadMutedPeersCount
	}
	return 0
}

func (m *ReplyGetPingedDialogAndMsg) GetUnreadUnmutedPeersCount() int32 {
	if m != nil {
		return m.UnreadUnmutedPeersCount
	}
	return 0
}

func (m *ReplyGetPingedDialogAndMsg) GetUnreadMutedMessagesCount() int32 {
	if m != nil {
		return m.UnreadMutedMessagesCount
	}
	return 0
}

func (m *ReplyGetPingedDialogAndMsg) GetUnreadUnmutedMessagesCount() int32 {
	if m != nil {
		return m.UnreadUnmutedMessagesCount
	}
	return 0
}

type UserDialogAndMsg struct {
	UserDialog *UserDialog `protobuf:"bytes,1,opt,name=UserDialog" json:"UserDialog,omitempty"`
	UserMsg    *UserMsg    `protobuf:"bytes,2,opt,name=UserMsg" json:"UserMsg,omitempty"`
}

func (m *UserDialogAndMsg) Reset()                    { *m = UserDialogAndMsg{} }
func (m *UserDialogAndMsg) String() string            { return proto.CompactTextString(m) }
func (*UserDialogAndMsg) ProtoMessage()               {}
func (*UserDialogAndMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{31} }

func (m *UserDialogAndMsg) GetUserDialog() *UserDialog {
	if m != nil {
		return m.UserDialog
	}
	return nil
}

func (m *UserDialogAndMsg) GetUserMsg() *UserMsg {
	if m != nil {
		return m.UserMsg
	}
	return nil
}

type ReqInsertOrUpdateUserMsgId struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqInsertOrUpdateUserMsgId) Reset()         { *m = ReqInsertOrUpdateUserMsgId{} }
func (m *ReqInsertOrUpdateUserMsgId) String() string { return proto.CompactTextString(m) }
func (*ReqInsertOrUpdateUserMsgId) ProtoMessage()    {}
func (*ReqInsertOrUpdateUserMsgId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{32}
}

func (m *ReqInsertOrUpdateUserMsgId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqInsertOrUpdateUserMsgId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqIncreaseUserLocalId struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqIncreaseUserLocalId) Reset()         { *m = ReqIncreaseUserLocalId{} }
func (m *ReqIncreaseUserLocalId) String() string { return proto.CompactTextString(m) }
func (*ReqIncreaseUserLocalId) ProtoMessage()    {}
func (*ReqIncreaseUserLocalId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{33}
}

func (m *ReqIncreaseUserLocalId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqIncreaseUserLocalId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyIncreaseUserLocalId struct {
	UserLocalId *UserLocalId `protobuf:"bytes,1,opt,name=UserLocalId" json:"UserLocalId,omitempty"`
}

func (m *ReplyIncreaseUserLocalId) Reset()         { *m = ReplyIncreaseUserLocalId{} }
func (m *ReplyIncreaseUserLocalId) String() string { return proto.CompactTextString(m) }
func (*ReplyIncreaseUserLocalId) ProtoMessage()    {}
func (*ReplyIncreaseUserLocalId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{34}
}

func (m *ReplyIncreaseUserLocalId) GetUserLocalId() *UserLocalId {
	if m != nil {
		return m.UserLocalId
	}
	return nil
}

type ReqGetCurrentUserLocalId struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetCurrentUserLocalId) Reset()         { *m = ReqGetCurrentUserLocalId{} }
func (m *ReqGetCurrentUserLocalId) String() string { return proto.CompactTextString(m) }
func (*ReqGetCurrentUserLocalId) ProtoMessage()    {}
func (*ReqGetCurrentUserLocalId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{35}
}

func (m *ReqGetCurrentUserLocalId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetCurrentUserLocalId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetCurrentUserLocalId struct {
	UserLocalId *UserLocalId `protobuf:"bytes,1,opt,name=UserLocalId" json:"UserLocalId,omitempty"`
}

func (m *ReplyGetCurrentUserLocalId) Reset()         { *m = ReplyGetCurrentUserLocalId{} }
func (m *ReplyGetCurrentUserLocalId) String() string { return proto.CompactTextString(m) }
func (*ReplyGetCurrentUserLocalId) ProtoMessage()    {}
func (*ReplyGetCurrentUserLocalId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{36}
}

func (m *ReplyGetCurrentUserLocalId) GetUserLocalId() *UserLocalId {
	if m != nil {
		return m.UserLocalId
	}
	return nil
}

type ReqIncreaseChannelLocalId struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqIncreaseChannelLocalId) Reset()         { *m = ReqIncreaseChannelLocalId{} }
func (m *ReqIncreaseChannelLocalId) String() string { return proto.CompactTextString(m) }
func (*ReqIncreaseChannelLocalId) ProtoMessage()    {}
func (*ReqIncreaseChannelLocalId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{37}
}

func (m *ReqIncreaseChannelLocalId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqIncreaseChannelLocalId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyIncreaseChannelLocalId struct {
	ChannelLocalId *ChannelLocalId `protobuf:"bytes,1,opt,name=ChannelLocalId" json:"ChannelLocalId,omitempty"`
	ReplyErr       *ReplyErr       `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyIncreaseChannelLocalId) Reset()         { *m = ReplyIncreaseChannelLocalId{} }
func (m *ReplyIncreaseChannelLocalId) String() string { return proto.CompactTextString(m) }
func (*ReplyIncreaseChannelLocalId) ProtoMessage()    {}
func (*ReplyIncreaseChannelLocalId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{38}
}

func (m *ReplyIncreaseChannelLocalId) GetChannelLocalId() *ChannelLocalId {
	if m != nil {
		return m.ChannelLocalId
	}
	return nil
}

func (m *ReplyIncreaseChannelLocalId) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetCurrentChannelLocalId struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetCurrentChannelLocalId) Reset()         { *m = ReqGetCurrentChannelLocalId{} }
func (m *ReqGetCurrentChannelLocalId) String() string { return proto.CompactTextString(m) }
func (*ReqGetCurrentChannelLocalId) ProtoMessage()    {}
func (*ReqGetCurrentChannelLocalId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{39}
}

func (m *ReqGetCurrentChannelLocalId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetCurrentChannelLocalId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetCurrentChannelLocalId struct {
	ChannelLocalId *ChannelLocalId `protobuf:"bytes,1,opt,name=ChannelLocalId" json:"ChannelLocalId,omitempty"`
	ReplyErr       *ReplyErr       `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetCurrentChannelLocalId) Reset()         { *m = ReplyGetCurrentChannelLocalId{} }
func (m *ReplyGetCurrentChannelLocalId) String() string { return proto.CompactTextString(m) }
func (*ReplyGetCurrentChannelLocalId) ProtoMessage()    {}
func (*ReplyGetCurrentChannelLocalId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{40}
}

func (m *ReplyGetCurrentChannelLocalId) GetChannelLocalId() *ChannelLocalId {
	if m != nil {
		return m.ChannelLocalId
	}
	return nil
}

func (m *ReplyGetCurrentChannelLocalId) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqIncreaseUserMsgId struct {
	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MsgIdDelta int32         `protobuf:"varint,2,opt,name=MsgIdDelta,proto3" json:"MsgIdDelta,omitempty"`
	PtsDelta   int32         `protobuf:"varint,3,opt,name=PtsDelta,proto3" json:"PtsDelta,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqIncreaseUserMsgId) Reset()                    { *m = ReqIncreaseUserMsgId{} }
func (m *ReqIncreaseUserMsgId) String() string            { return proto.CompactTextString(m) }
func (*ReqIncreaseUserMsgId) ProtoMessage()               {}
func (*ReqIncreaseUserMsgId) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{41} }

func (m *ReqIncreaseUserMsgId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqIncreaseUserMsgId) GetMsgIdDelta() int32 {
	if m != nil {
		return m.MsgIdDelta
	}
	return 0
}

func (m *ReqIncreaseUserMsgId) GetPtsDelta() int32 {
	if m != nil {
		return m.PtsDelta
	}
	return 0
}

func (m *ReqIncreaseUserMsgId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqSetUserMsgId struct {
	UserMsgId *UserMsgId    `protobuf:"bytes,1,opt,name=UserMsgId" json:"UserMsgId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqSetUserMsgId) Reset()                    { *m = ReqSetUserMsgId{} }
func (m *ReqSetUserMsgId) String() string            { return proto.CompactTextString(m) }
func (*ReqSetUserMsgId) ProtoMessage()               {}
func (*ReqSetUserMsgId) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{42} }

func (m *ReqSetUserMsgId) GetUserMsgId() *UserMsgId {
	if m != nil {
		return m.UserMsgId
	}
	return nil
}

func (m *ReqSetUserMsgId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqSetMsgIdImported struct {
	MsgIdImported *MsgIdImported `protobuf:"bytes,1,opt,name=MsgIdImported" json:"MsgIdImported,omitempty"`
	Debug         *pbcomm.Debug  `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqSetMsgIdImported) Reset()                    { *m = ReqSetMsgIdImported{} }
func (m *ReqSetMsgIdImported) String() string            { return proto.CompactTextString(m) }
func (*ReqSetMsgIdImported) ProtoMessage()               {}
func (*ReqSetMsgIdImported) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{43} }

func (m *ReqSetMsgIdImported) GetMsgIdImported() *MsgIdImported {
	if m != nil {
		return m.MsgIdImported
	}
	return nil
}

func (m *ReqSetMsgIdImported) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplySetMsgIdImported struct {
}

func (m *ReplySetMsgIdImported) Reset()                    { *m = ReplySetMsgIdImported{} }
func (m *ReplySetMsgIdImported) String() string            { return proto.CompactTextString(m) }
func (*ReplySetMsgIdImported) ProtoMessage()               {}
func (*ReplySetMsgIdImported) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{44} }

type ReqCheckMsgIdImported struct {
	UserIdOrChannelId int32         `protobuf:"varint,1,opt,name=UserIdOrChannelId,proto3" json:"UserIdOrChannelId,omitempty"`
	Debug             *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqCheckMsgIdImported) Reset()                    { *m = ReqCheckMsgIdImported{} }
func (m *ReqCheckMsgIdImported) String() string            { return proto.CompactTextString(m) }
func (*ReqCheckMsgIdImported) ProtoMessage()               {}
func (*ReqCheckMsgIdImported) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{45} }

func (m *ReqCheckMsgIdImported) GetUserIdOrChannelId() int32 {
	if m != nil {
		return m.UserIdOrChannelId
	}
	return 0
}

func (m *ReqCheckMsgIdImported) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyCheckMsgIdImported struct {
	MsgIdImported *MsgIdImported `protobuf:"bytes,1,opt,name=MsgIdImported" json:"MsgIdImported,omitempty"`
}

func (m *ReplyCheckMsgIdImported) Reset()         { *m = ReplyCheckMsgIdImported{} }
func (m *ReplyCheckMsgIdImported) String() string { return proto.CompactTextString(m) }
func (*ReplyCheckMsgIdImported) ProtoMessage()    {}
func (*ReplyCheckMsgIdImported) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{46}
}

func (m *ReplyCheckMsgIdImported) GetMsgIdImported() *MsgIdImported {
	if m != nil {
		return m.MsgIdImported
	}
	return nil
}

type ReqGetUserMsgId struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetUserMsgId) Reset()                    { *m = ReqGetUserMsgId{} }
func (m *ReqGetUserMsgId) String() string            { return proto.CompactTextString(m) }
func (*ReqGetUserMsgId) ProtoMessage()               {}
func (*ReqGetUserMsgId) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{47} }

func (m *ReqGetUserMsgId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetUserMsgId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqUpdateUserPts struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateUserPts) Reset()                    { *m = ReqUpdateUserPts{} }
func (m *ReqUpdateUserPts) String() string            { return proto.CompactTextString(m) }
func (*ReqUpdateUserPts) ProtoMessage()               {}
func (*ReqUpdateUserPts) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{48} }

func (m *ReqUpdateUserPts) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUpdateUserPts) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqBatchUpdatUserPts struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Number int32         `protobuf:"varint,2,opt,name=Number,proto3" json:"Number,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqBatchUpdatUserPts) Reset()                    { *m = ReqBatchUpdatUserPts{} }
func (m *ReqBatchUpdatUserPts) String() string            { return proto.CompactTextString(m) }
func (*ReqBatchUpdatUserPts) ProtoMessage()               {}
func (*ReqBatchUpdatUserPts) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{49} }

func (m *ReqBatchUpdatUserPts) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqBatchUpdatUserPts) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ReqBatchUpdatUserPts) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqStorePtsHandle struct {
	PtsHandle *PtsHandle    `protobuf:"bytes,1,opt,name=PtsHandle" json:"PtsHandle,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqStorePtsHandle) Reset()                    { *m = ReqStorePtsHandle{} }
func (m *ReqStorePtsHandle) String() string            { return proto.CompactTextString(m) }
func (*ReqStorePtsHandle) ProtoMessage()               {}
func (*ReqStorePtsHandle) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{50} }

func (m *ReqStorePtsHandle) GetPtsHandle() *PtsHandle {
	if m != nil {
		return m.PtsHandle
	}
	return nil
}

func (m *ReqStorePtsHandle) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetDiffByPts struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Pts    int32         `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`
	Limit  uint32        `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetDiffByPts) Reset()                    { *m = ReqGetDiffByPts{} }
func (m *ReqGetDiffByPts) String() string            { return proto.CompactTextString(m) }
func (*ReqGetDiffByPts) ProtoMessage()               {}
func (*ReqGetDiffByPts) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{51} }

func (m *ReqGetDiffByPts) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetDiffByPts) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReqGetDiffByPts) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetDiffByPts) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetDiffByPts struct {
	Msg      [][]byte   `protobuf:"bytes,1,rep,name=Msg" json:"Msg,omitempty"`
	LastPts  int32      `protobuf:"varint,2,opt,name=LastPts,proto3" json:"LastPts,omitempty"`
	ToLong   bool       `protobuf:"varint,3,opt,name=ToLong,proto3" json:"ToLong,omitempty"`
	UserMsgs []*UserMsg `protobuf:"bytes,4,rep,name=UserMsgs" json:"UserMsgs,omitempty"`
	Date     int64      `protobuf:"varint,5,opt,name=Date,proto3" json:"Date,omitempty"`
}

func (m *ReplyGetDiffByPts) Reset()                    { *m = ReplyGetDiffByPts{} }
func (m *ReplyGetDiffByPts) String() string            { return proto.CompactTextString(m) }
func (*ReplyGetDiffByPts) ProtoMessage()               {}
func (*ReplyGetDiffByPts) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{52} }

func (m *ReplyGetDiffByPts) GetMsg() [][]byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *ReplyGetDiffByPts) GetLastPts() int32 {
	if m != nil {
		return m.LastPts
	}
	return 0
}

func (m *ReplyGetDiffByPts) GetToLong() bool {
	if m != nil {
		return m.ToLong
	}
	return false
}

func (m *ReplyGetDiffByPts) GetUserMsgs() []*UserMsg {
	if m != nil {
		return m.UserMsgs
	}
	return nil
}

func (m *ReplyGetDiffByPts) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

type ReqGetActionDiff struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Pts    int32         `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`
	Limit  uint32        `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetActionDiff) Reset()                    { *m = ReqGetActionDiff{} }
func (m *ReqGetActionDiff) String() string            { return proto.CompactTextString(m) }
func (*ReqGetActionDiff) ProtoMessage()               {}
func (*ReqGetActionDiff) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{53} }

func (m *ReqGetActionDiff) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetActionDiff) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReqGetActionDiff) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetActionDiff) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqDeletePtsHandle struct {
	UserId int32   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	PtsSli []int32 `protobuf:"varint,2,rep,packed,name=PtsSli" json:"PtsSli,omitempty"`
}

func (m *ReqDeletePtsHandle) Reset()                    { *m = ReqDeletePtsHandle{} }
func (m *ReqDeletePtsHandle) String() string            { return proto.CompactTextString(m) }
func (*ReqDeletePtsHandle) ProtoMessage()               {}
func (*ReqDeletePtsHandle) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{54} }

func (m *ReqDeletePtsHandle) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqDeletePtsHandle) GetPtsSli() []int32 {
	if m != nil {
		return m.PtsSli
	}
	return nil
}

type ReqClearPtsHandle struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MaxPts int32 `protobuf:"varint,2,opt,name=MaxPts,proto3" json:"MaxPts,omitempty"`
}

func (m *ReqClearPtsHandle) Reset()                    { *m = ReqClearPtsHandle{} }
func (m *ReqClearPtsHandle) String() string            { return proto.CompactTextString(m) }
func (*ReqClearPtsHandle) ProtoMessage()               {}
func (*ReqClearPtsHandle) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{55} }

func (m *ReqClearPtsHandle) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqClearPtsHandle) GetMaxPts() int32 {
	if m != nil {
		return m.MaxPts
	}
	return 0
}

type ReplyClearPtsHandle struct {
}

func (m *ReplyClearPtsHandle) Reset()                    { *m = ReplyClearPtsHandle{} }
func (m *ReplyClearPtsHandle) String() string            { return proto.CompactTextString(m) }
func (*ReplyClearPtsHandle) ProtoMessage()               {}
func (*ReplyClearPtsHandle) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{56} }

type ReplyDeletePtsHandle struct {
}

func (m *ReplyDeletePtsHandle) Reset()                    { *m = ReplyDeletePtsHandle{} }
func (m *ReplyDeletePtsHandle) String() string            { return proto.CompactTextString(m) }
func (*ReplyDeletePtsHandle) ProtoMessage()               {}
func (*ReplyDeletePtsHandle) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{57} }

type ReplyGetActionDiff struct {
	PtsHandles []*PtsHandle `protobuf:"bytes,1,rep,name=PtsHandles" json:"PtsHandles,omitempty"`
}

func (m *ReplyGetActionDiff) Reset()                    { *m = ReplyGetActionDiff{} }
func (m *ReplyGetActionDiff) String() string            { return proto.CompactTextString(m) }
func (*ReplyGetActionDiff) ProtoMessage()               {}
func (*ReplyGetActionDiff) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{58} }

func (m *ReplyGetActionDiff) GetPtsHandles() []*PtsHandle {
	if m != nil {
		return m.PtsHandles
	}
	return nil
}

type ReqStoreOtherInfoMsg struct {
	OtherInfoMsg *OtherInfoMsg `protobuf:"bytes,1,opt,name=OtherInfoMsg" json:"OtherInfoMsg,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqStoreOtherInfoMsg) Reset()                    { *m = ReqStoreOtherInfoMsg{} }
func (m *ReqStoreOtherInfoMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqStoreOtherInfoMsg) ProtoMessage()               {}
func (*ReqStoreOtherInfoMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{59} }

func (m *ReqStoreOtherInfoMsg) GetOtherInfoMsg() *OtherInfoMsg {
	if m != nil {
		return m.OtherInfoMsg
	}
	return nil
}

func (m *ReqStoreOtherInfoMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqBatchStoreOtherInfoMsg struct {
	OtherInfoMsgs []*OtherInfoMsg `protobuf:"bytes,1,rep,name=OtherInfoMsgs" json:"OtherInfoMsgs,omitempty"`
	Debug         *pbcomm.Debug   `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqBatchStoreOtherInfoMsg) Reset()         { *m = ReqBatchStoreOtherInfoMsg{} }
func (m *ReqBatchStoreOtherInfoMsg) String() string { return proto.CompactTextString(m) }
func (*ReqBatchStoreOtherInfoMsg) ProtoMessage()    {}
func (*ReqBatchStoreOtherInfoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{60}
}

func (m *ReqBatchStoreOtherInfoMsg) GetOtherInfoMsgs() []*OtherInfoMsg {
	if m != nil {
		return m.OtherInfoMsgs
	}
	return nil
}

func (m *ReqBatchStoreOtherInfoMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetOtherInfoMsg struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Date   int64         `protobuf:"varint,2,opt,name=Date,proto3" json:"Date,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetOtherInfoMsg) Reset()                    { *m = ReqGetOtherInfoMsg{} }
func (m *ReqGetOtherInfoMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqGetOtherInfoMsg) ProtoMessage()               {}
func (*ReqGetOtherInfoMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{61} }

func (m *ReqGetOtherInfoMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetOtherInfoMsg) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ReqGetOtherInfoMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetOtherInfoMsg struct {
	OtherInfoMsgs []*OtherInfoMsg `protobuf:"bytes,1,rep,name=OtherInfoMsgs" json:"OtherInfoMsgs,omitempty"`
}

func (m *ReplyGetOtherInfoMsg) Reset()                    { *m = ReplyGetOtherInfoMsg{} }
func (m *ReplyGetOtherInfoMsg) String() string            { return proto.CompactTextString(m) }
func (*ReplyGetOtherInfoMsg) ProtoMessage()               {}
func (*ReplyGetOtherInfoMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{62} }

func (m *ReplyGetOtherInfoMsg) GetOtherInfoMsgs() []*OtherInfoMsg {
	if m != nil {
		return m.OtherInfoMsgs
	}
	return nil
}

type ReqInsertOrUpdateUserMsg struct {
	UserMsg *UserMsg      `protobuf:"bytes,1,opt,name=UserMsg" json:"UserMsg,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqInsertOrUpdateUserMsg) Reset()         { *m = ReqInsertOrUpdateUserMsg{} }
func (m *ReqInsertOrUpdateUserMsg) String() string { return proto.CompactTextString(m) }
func (*ReqInsertOrUpdateUserMsg) ProtoMessage()    {}
func (*ReqInsertOrUpdateUserMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{63}
}

func (m *ReqInsertOrUpdateUserMsg) GetUserMsg() *UserMsg {
	if m != nil {
		return m.UserMsg
	}
	return nil
}

func (m *ReqInsertOrUpdateUserMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetForwardUserMsg struct {
	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithIdType int32         `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`
	Encry      int32         `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
	MsgIds     []int32       `protobuf:"varint,5,rep,packed,name=MsgIds" json:"MsgIds,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,11,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetForwardUserMsg) Reset()                    { *m = ReqGetForwardUserMsg{} }
func (m *ReqGetForwardUserMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqGetForwardUserMsg) ProtoMessage()               {}
func (*ReqGetForwardUserMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{64} }

func (m *ReqGetForwardUserMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetForwardUserMsg) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqGetForwardUserMsg) GetWithIdType() int32 {
	if m != nil {
		return m.WithIdType
	}
	return 0
}

func (m *ReqGetForwardUserMsg) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *ReqGetForwardUserMsg) GetMsgIds() []int32 {
	if m != nil {
		return m.MsgIds
	}
	return nil
}

func (m *ReqGetForwardUserMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetUserMsgHistory struct {
	Selfid     int32         `protobuf:"varint,1,opt,name=Selfid,proto3" json:"Selfid,omitempty"`
	Withid     int32         `protobuf:"varint,2,opt,name=Withid,proto3" json:"Withid,omitempty"`
	Type       int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	OffsetId   int32         `protobuf:"varint,4,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`
	OffsetDate int32         `protobuf:"varint,5,opt,name=OffsetDate,proto3" json:"OffsetDate,omitempty"`
	AddOffset  int32         `protobuf:"varint,6,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`
	MinId      int32         `protobuf:"varint,7,opt,name=MinId,proto3" json:"MinId,omitempty"`
	MaxId      int32         `protobuf:"varint,8,opt,name=MaxId,proto3" json:"MaxId,omitempty"`
	Limit      int32         `protobuf:"varint,9,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Encry      int32         `protobuf:"varint,10,opt,name=Encry,proto3" json:"Encry,omitempty"`
	DeletMark  int32         `protobuf:"varint,11,opt,name=DeletMark,proto3" json:"DeletMark,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,12,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetUserMsgHistory) Reset()                    { *m = ReqGetUserMsgHistory{} }
func (m *ReqGetUserMsgHistory) String() string            { return proto.CompactTextString(m) }
func (*ReqGetUserMsgHistory) ProtoMessage()               {}
func (*ReqGetUserMsgHistory) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{65} }

func (m *ReqGetUserMsgHistory) GetSelfid() int32 {
	if m != nil {
		return m.Selfid
	}
	return 0
}

func (m *ReqGetUserMsgHistory) GetWithid() int32 {
	if m != nil {
		return m.Withid
	}
	return 0
}

func (m *ReqGetUserMsgHistory) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqGetUserMsgHistory) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *ReqGetUserMsgHistory) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *ReqGetUserMsgHistory) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *ReqGetUserMsgHistory) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *ReqGetUserMsgHistory) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ReqGetUserMsgHistory) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetUserMsgHistory) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *ReqGetUserMsgHistory) GetDeletMark() int32 {
	if m != nil {
		return m.DeletMark
	}
	return 0
}

func (m *ReqGetUserMsgHistory) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetUserMsgUUID struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MsgId  int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetUserMsgUUID) Reset()                    { *m = ReqGetUserMsgUUID{} }
func (m *ReqGetUserMsgUUID) String() string            { return proto.CompactTextString(m) }
func (*ReqGetUserMsgUUID) ProtoMessage()               {}
func (*ReqGetUserMsgUUID) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{66} }

func (m *ReqGetUserMsgUUID) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetUserMsgUUID) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqGetUserMsgUUID) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetUserMsgIdByUUID struct {
	Userid int32         `protobuf:"varint,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	UUID   int64         `protobuf:"varint,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetUserMsgIdByUUID) Reset()                    { *m = ReqGetUserMsgIdByUUID{} }
func (m *ReqGetUserMsgIdByUUID) String() string            { return proto.CompactTextString(m) }
func (*ReqGetUserMsgIdByUUID) ProtoMessage()               {}
func (*ReqGetUserMsgIdByUUID) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{67} }

func (m *ReqGetUserMsgIdByUUID) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqGetUserMsgIdByUUID) GetUUID() int64 {
	if m != nil {
		return m.UUID
	}
	return 0
}

func (m *ReqGetUserMsgIdByUUID) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetUserMsgListByUUIDs struct {
	Userid int32         `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	UUIDS  []int64       `protobuf:"varint,2,rep,packed,name=UUIDS" json:"UUIDS,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetUserMsgListByUUIDs) Reset()         { *m = ReqGetUserMsgListByUUIDs{} }
func (m *ReqGetUserMsgListByUUIDs) String() string { return proto.CompactTextString(m) }
func (*ReqGetUserMsgListByUUIDs) ProtoMessage()    {}
func (*ReqGetUserMsgListByUUIDs) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{68}
}

func (m *ReqGetUserMsgListByUUIDs) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *ReqGetUserMsgListByUUIDs) GetUUIDS() []int64 {
	if m != nil {
		return m.UUIDS
	}
	return nil
}

func (m *ReqGetUserMsgListByUUIDs) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqDeleteUserMsg struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MsgId  int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqDeleteUserMsg) Reset()                    { *m = ReqDeleteUserMsg{} }
func (m *ReqDeleteUserMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteUserMsg) ProtoMessage()               {}
func (*ReqDeleteUserMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{69} }

func (m *ReqDeleteUserMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqDeleteUserMsg) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqDeleteUserMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqBatchDeleteUserMsg struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgIds []int32       `protobuf:"varint,3,rep,packed,name=MsgIds" json:"MsgIds,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqBatchDeleteUserMsg) Reset()                    { *m = ReqBatchDeleteUserMsg{} }
func (m *ReqBatchDeleteUserMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqBatchDeleteUserMsg) ProtoMessage()               {}
func (*ReqBatchDeleteUserMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{70} }

func (m *ReqBatchDeleteUserMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqBatchDeleteUserMsg) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqBatchDeleteUserMsg) GetMsgIds() []int32 {
	if m != nil {
		return m.MsgIds
	}
	return nil
}

func (m *ReqBatchDeleteUserMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetOneUserMsgByUserIdAndMsgId struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MsgId  int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetOneUserMsgByUserIdAndMsgId) Reset()         { *m = ReqGetOneUserMsgByUserIdAndMsgId{} }
func (m *ReqGetOneUserMsgByUserIdAndMsgId) String() string { return proto.CompactTextString(m) }
func (*ReqGetOneUserMsgByUserIdAndMsgId) ProtoMessage()    {}
func (*ReqGetOneUserMsgByUserIdAndMsgId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{71}
}

func (m *ReqGetOneUserMsgByUserIdAndMsgId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetOneUserMsgByUserIdAndMsgId) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqGetOneUserMsgByUserIdAndMsgId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqDeleteUserMsgByUserIdAndWithIdAndEncry struct {
	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithIdType int32         `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`
	Encry      int32         `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) Reset() {
	*m = ReqDeleteUserMsgByUserIdAndWithIdAndEncry{}
}
func (m *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) String() string {
	return proto.CompactTextString(m)
}
func (*ReqDeleteUserMsgByUserIdAndWithIdAndEncry) ProtoMessage() {}
func (*ReqDeleteUserMsgByUserIdAndWithIdAndEncry) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{72}
}

func (m *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) GetWithIdType() int32 {
	if m != nil {
		return m.WithIdType
	}
	return 0
}

func (m *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqClearHistory struct {
	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithIdType int32         `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`
	Encry      int32         `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqClearHistory) Reset()                    { *m = ReqClearHistory{} }
func (m *ReqClearHistory) String() string            { return proto.CompactTextString(m) }
func (*ReqClearHistory) ProtoMessage()               {}
func (*ReqClearHistory) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{73} }

func (m *ReqClearHistory) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqClearHistory) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqClearHistory) GetWithIdType() int32 {
	if m != nil {
		return m.WithIdType
	}
	return 0
}

func (m *ReqClearHistory) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *ReqClearHistory) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 查询打电话历史消息记录config 当 withid == withtype == 0 时 只搜索userid
type GetMessageHistoryPageByMediaConfig struct {
	UserId   int32   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId   int32   `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithType int32   `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`
	MaxId    int32   `protobuf:"varint,4,opt,name=MaxId,proto3" json:"MaxId,omitempty"`
	Encry    int32   `protobuf:"varint,5,opt,name=Encry,proto3" json:"Encry,omitempty"`
	Medias   []int32 `protobuf:"varint,6,rep,packed,name=Medias" json:"Medias,omitempty"`
	Limit    int32   `protobuf:"varint,7,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *GetMessageHistoryPageByMediaConfig) Reset()         { *m = GetMessageHistoryPageByMediaConfig{} }
func (m *GetMessageHistoryPageByMediaConfig) String() string { return proto.CompactTextString(m) }
func (*GetMessageHistoryPageByMediaConfig) ProtoMessage()    {}
func (*GetMessageHistoryPageByMediaConfig) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{74}
}

func (m *GetMessageHistoryPageByMediaConfig) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetMessageHistoryPageByMediaConfig) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *GetMessageHistoryPageByMediaConfig) GetWithType() int32 {
	if m != nil {
		return m.WithType
	}
	return 0
}

func (m *GetMessageHistoryPageByMediaConfig) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *GetMessageHistoryPageByMediaConfig) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *GetMessageHistoryPageByMediaConfig) GetMedias() []int32 {
	if m != nil {
		return m.Medias
	}
	return nil
}

func (m *GetMessageHistoryPageByMediaConfig) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ReqGetMessageHistoryPageByMedia struct {
	GetMessageHistoryPageByMediaConfig *GetMessageHistoryPageByMediaConfig `protobuf:"bytes,1,opt,name=GetMessageHistoryPageByMediaConfig" json:"GetMessageHistoryPageByMediaConfig,omitempty"`
	Debug                              *pbcomm.Debug                       `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetMessageHistoryPageByMedia) Reset()         { *m = ReqGetMessageHistoryPageByMedia{} }
func (m *ReqGetMessageHistoryPageByMedia) String() string { return proto.CompactTextString(m) }
func (*ReqGetMessageHistoryPageByMedia) ProtoMessage()    {}
func (*ReqGetMessageHistoryPageByMedia) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{75}
}

func (m *ReqGetMessageHistoryPageByMedia) GetGetMessageHistoryPageByMediaConfig() *GetMessageHistoryPageByMediaConfig {
	if m != nil {
		return m.GetMessageHistoryPageByMediaConfig
	}
	return nil
}

func (m *ReqGetMessageHistoryPageByMedia) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqInsertOrUpdateChannelMessageDeleteMark struct {
	ChannelMessageDeleteMark *ChannelMessageDeleteMark `protobuf:"bytes,1,opt,name=ChannelMessageDeleteMark" json:"ChannelMessageDeleteMark,omitempty"`
	Debug                    *pbcomm.Debug             `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqInsertOrUpdateChannelMessageDeleteMark) Reset() {
	*m = ReqInsertOrUpdateChannelMessageDeleteMark{}
}
func (m *ReqInsertOrUpdateChannelMessageDeleteMark) String() string {
	return proto.CompactTextString(m)
}
func (*ReqInsertOrUpdateChannelMessageDeleteMark) ProtoMessage() {}
func (*ReqInsertOrUpdateChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{76}
}

func (m *ReqInsertOrUpdateChannelMessageDeleteMark) GetChannelMessageDeleteMark() *ChannelMessageDeleteMark {
	if m != nil {
		return m.ChannelMessageDeleteMark
	}
	return nil
}

func (m *ReqInsertOrUpdateChannelMessageDeleteMark) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetChannelMessageDeleteMark struct {
	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChannelID int32         `protobuf:"varint,2,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelMessageDeleteMark) Reset()         { *m = ReqGetChannelMessageDeleteMark{} }
func (m *ReqGetChannelMessageDeleteMark) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelMessageDeleteMark) ProtoMessage()    {}
func (*ReqGetChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{77}
}

func (m *ReqGetChannelMessageDeleteMark) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetChannelMessageDeleteMark) GetChannelID() int32 {
	if m != nil {
		return m.ChannelID
	}
	return 0
}

func (m *ReqGetChannelMessageDeleteMark) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqUserDialogSetUnreadMetionsCount struct {
	UserId             int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChannelID          int32         `protobuf:"varint,2,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Type               int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	UnreadMetionsCount int32         `protobuf:"varint,4,opt,name=UnreadMetionsCount,proto3" json:"UnreadMetionsCount,omitempty"`
	Debug              *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUserDialogSetUnreadMetionsCount) Reset()         { *m = ReqUserDialogSetUnreadMetionsCount{} }
func (m *ReqUserDialogSetUnreadMetionsCount) String() string { return proto.CompactTextString(m) }
func (*ReqUserDialogSetUnreadMetionsCount) ProtoMessage()    {}
func (*ReqUserDialogSetUnreadMetionsCount) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{78}
}

func (m *ReqUserDialogSetUnreadMetionsCount) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUserDialogSetUnreadMetionsCount) GetChannelID() int32 {
	if m != nil {
		return m.ChannelID
	}
	return 0
}

func (m *ReqUserDialogSetUnreadMetionsCount) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqUserDialogSetUnreadMetionsCount) GetUnreadMetionsCount() int32 {
	if m != nil {
		return m.UnreadMetionsCount
	}
	return 0
}

func (m *ReqUserDialogSetUnreadMetionsCount) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUserDialogSetUnreadMetionsCount struct {
	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyUserDialogSetUnreadMetionsCount) Reset()         { *m = ReplyUserDialogSetUnreadMetionsCount{} }
func (m *ReplyUserDialogSetUnreadMetionsCount) String() string { return proto.CompactTextString(m) }
func (*ReplyUserDialogSetUnreadMetionsCount) ProtoMessage()    {}
func (*ReplyUserDialogSetUnreadMetionsCount) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{79}
}

func (m *ReplyUserDialogSetUnreadMetionsCount) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqUserDialogGetUnreadMetionsCount struct {
	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChannelID int32         `protobuf:"varint,2,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Type      int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUserDialogGetUnreadMetionsCount) Reset()         { *m = ReqUserDialogGetUnreadMetionsCount{} }
func (m *ReqUserDialogGetUnreadMetionsCount) String() string { return proto.CompactTextString(m) }
func (*ReqUserDialogGetUnreadMetionsCount) ProtoMessage()    {}
func (*ReqUserDialogGetUnreadMetionsCount) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{80}
}

func (m *ReqUserDialogGetUnreadMetionsCount) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUserDialogGetUnreadMetionsCount) GetChannelID() int32 {
	if m != nil {
		return m.ChannelID
	}
	return 0
}

func (m *ReqUserDialogGetUnreadMetionsCount) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqUserDialogGetUnreadMetionsCount) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUserDialogGetUnreadMetionsCount struct {
	UnreadMetionsCount int32     `protobuf:"varint,1,opt,name=UnreadMetionsCount,proto3" json:"UnreadMetionsCount,omitempty"`
	ReplyErr           *ReplyErr `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyUserDialogGetUnreadMetionsCount) Reset()         { *m = ReplyUserDialogGetUnreadMetionsCount{} }
func (m *ReplyUserDialogGetUnreadMetionsCount) String() string { return proto.CompactTextString(m) }
func (*ReplyUserDialogGetUnreadMetionsCount) ProtoMessage()    {}
func (*ReplyUserDialogGetUnreadMetionsCount) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{81}
}

func (m *ReplyUserDialogGetUnreadMetionsCount) GetUnreadMetionsCount() int32 {
	if m != nil {
		return m.UnreadMetionsCount
	}
	return 0
}

func (m *ReplyUserDialogGetUnreadMetionsCount) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqUserDialogChangeUnreadMetionsCount struct {
	UserId                        int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChannelID                     int32         `protobuf:"varint,2,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Type                          int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	UnreadMetionsCountChangeValue int32         `protobuf:"varint,4,opt,name=UnreadMetionsCountChangeValue,proto3" json:"UnreadMetionsCountChangeValue,omitempty"`
	Debug                         *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUserDialogChangeUnreadMetionsCount) Reset()         { *m = ReqUserDialogChangeUnreadMetionsCount{} }
func (m *ReqUserDialogChangeUnreadMetionsCount) String() string { return proto.CompactTextString(m) }
func (*ReqUserDialogChangeUnreadMetionsCount) ProtoMessage()    {}
func (*ReqUserDialogChangeUnreadMetionsCount) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{82}
}

func (m *ReqUserDialogChangeUnreadMetionsCount) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUserDialogChangeUnreadMetionsCount) GetChannelID() int32 {
	if m != nil {
		return m.ChannelID
	}
	return 0
}

func (m *ReqUserDialogChangeUnreadMetionsCount) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqUserDialogChangeUnreadMetionsCount) GetUnreadMetionsCountChangeValue() int32 {
	if m != nil {
		return m.UnreadMetionsCountChangeValue
	}
	return 0
}

func (m *ReqUserDialogChangeUnreadMetionsCount) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUserDialogChangeUnreadMetionsCount struct {
	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyUserDialogChangeUnreadMetionsCount) Reset() {
	*m = ReplyUserDialogChangeUnreadMetionsCount{}
}
func (m *ReplyUserDialogChangeUnreadMetionsCount) String() string { return proto.CompactTextString(m) }
func (*ReplyUserDialogChangeUnreadMetionsCount) ProtoMessage()    {}
func (*ReplyUserDialogChangeUnreadMetionsCount) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{83}
}

func (m *ReplyUserDialogChangeUnreadMetionsCount) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetUserMediaMessageStatisticsByMedia struct {
	UserId   int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId   int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithType int32         `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`
	Media    int32         `protobuf:"varint,4,opt,name=Media,proto3" json:"Media,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetUserMediaMessageStatisticsByMedia) Reset() {
	*m = ReqGetUserMediaMessageStatisticsByMedia{}
}
func (m *ReqGetUserMediaMessageStatisticsByMedia) String() string { return proto.CompactTextString(m) }
func (*ReqGetUserMediaMessageStatisticsByMedia) ProtoMessage()    {}
func (*ReqGetUserMediaMessageStatisticsByMedia) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{84}
}

func (m *ReqGetUserMediaMessageStatisticsByMedia) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetUserMediaMessageStatisticsByMedia) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqGetUserMediaMessageStatisticsByMedia) GetWithType() int32 {
	if m != nil {
		return m.WithType
	}
	return 0
}

func (m *ReqGetUserMediaMessageStatisticsByMedia) GetMedia() int32 {
	if m != nil {
		return m.Media
	}
	return 0
}

func (m *ReqGetUserMediaMessageStatisticsByMedia) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetUserMediaMessageStatisticsByMedia struct {
	UserMediaMessageStatistics *UserMediaMessageStatistics `protobuf:"bytes,1,opt,name=UserMediaMessageStatistics" json:"UserMediaMessageStatistics,omitempty"`
}

func (m *ReplyGetUserMediaMessageStatisticsByMedia) Reset() {
	*m = ReplyGetUserMediaMessageStatisticsByMedia{}
}
func (m *ReplyGetUserMediaMessageStatisticsByMedia) String() string {
	return proto.CompactTextString(m)
}
func (*ReplyGetUserMediaMessageStatisticsByMedia) ProtoMessage() {}
func (*ReplyGetUserMediaMessageStatisticsByMedia) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{85}
}

func (m *ReplyGetUserMediaMessageStatisticsByMedia) GetUserMediaMessageStatistics() *UserMediaMessageStatistics {
	if m != nil {
		return m.UserMediaMessageStatistics
	}
	return nil
}

type ReplyGetMessageHistoryPageByMedia struct {
	UserMsgs []*UserMsg `protobuf:"bytes,1,rep,name=UserMsgs" json:"UserMsgs,omitempty"`
}

func (m *ReplyGetMessageHistoryPageByMedia) Reset()         { *m = ReplyGetMessageHistoryPageByMedia{} }
func (m *ReplyGetMessageHistoryPageByMedia) String() string { return proto.CompactTextString(m) }
func (*ReplyGetMessageHistoryPageByMedia) ProtoMessage()    {}
func (*ReplyGetMessageHistoryPageByMedia) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{86}
}

func (m *ReplyGetMessageHistoryPageByMedia) GetUserMsgs() []*UserMsg {
	if m != nil {
		return m.UserMsgs
	}
	return nil
}

type ReqInsertOrUpdateUserDialogAndMsg struct {
	UserDialogAndMsg *UserDialogAndMsg `protobuf:"bytes,1,opt,name=UserDialogAndMsg" json:"UserDialogAndMsg,omitempty"`
	UpdateScore      bool              `protobuf:"varint,2,opt,name=UpdateScore,proto3" json:"UpdateScore,omitempty"`
	Debug            *pbcomm.Debug     `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqInsertOrUpdateUserDialogAndMsg) Reset()         { *m = ReqInsertOrUpdateUserDialogAndMsg{} }
func (m *ReqInsertOrUpdateUserDialogAndMsg) String() string { return proto.CompactTextString(m) }
func (*ReqInsertOrUpdateUserDialogAndMsg) ProtoMessage()    {}
func (*ReqInsertOrUpdateUserDialogAndMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{87}
}

func (m *ReqInsertOrUpdateUserDialogAndMsg) GetUserDialogAndMsg() *UserDialogAndMsg {
	if m != nil {
		return m.UserDialogAndMsg
	}
	return nil
}

func (m *ReqInsertOrUpdateUserDialogAndMsg) GetUpdateScore() bool {
	if m != nil {
		return m.UpdateScore
	}
	return false
}

func (m *ReqInsertOrUpdateUserDialogAndMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqUpdateSelfDialogAndMsg struct {
	UserDialogAndMsg *UserDialogAndMsg `protobuf:"bytes,1,opt,name=UserDialogAndMsg" json:"UserDialogAndMsg,omitempty"`
	Debug            *pbcomm.Debug     `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateSelfDialogAndMsg) Reset()         { *m = ReqUpdateSelfDialogAndMsg{} }
func (m *ReqUpdateSelfDialogAndMsg) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateSelfDialogAndMsg) ProtoMessage()    {}
func (*ReqUpdateSelfDialogAndMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{88}
}

func (m *ReqUpdateSelfDialogAndMsg) GetUserDialogAndMsg() *UserDialogAndMsg {
	if m != nil {
		return m.UserDialogAndMsg
	}
	return nil
}

func (m *ReqUpdateSelfDialogAndMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqUpdateDialogAddUnread struct {
	UserId      int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId      int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	Type        int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	UnreadDelta int32         `protobuf:"varint,4,opt,name=UnreadDelta,proto3" json:"UnreadDelta,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateDialogAddUnread) Reset()         { *m = ReqUpdateDialogAddUnread{} }
func (m *ReqUpdateDialogAddUnread) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateDialogAddUnread) ProtoMessage()    {}
func (*ReqUpdateDialogAddUnread) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{89}
}

func (m *ReqUpdateDialogAddUnread) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUpdateDialogAddUnread) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqUpdateDialogAddUnread) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqUpdateDialogAddUnread) GetUnreadDelta() int32 {
	if m != nil {
		return m.UnreadDelta
	}
	return 0
}

func (m *ReqUpdateDialogAddUnread) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUpdateDialogAddUnread struct {
	ErrCode int32 `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
}

func (m *ReplyUpdateDialogAddUnread) Reset()         { *m = ReplyUpdateDialogAddUnread{} }
func (m *ReplyUpdateDialogAddUnread) String() string { return proto.CompactTextString(m) }
func (*ReplyUpdateDialogAddUnread) ProtoMessage()    {}
func (*ReplyUpdateDialogAddUnread) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{90}
}

func (m *ReplyUpdateDialogAddUnread) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

type ReqUpdateDialogClearDraft struct {
	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithIdType int32         `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateDialogClearDraft) Reset()         { *m = ReqUpdateDialogClearDraft{} }
func (m *ReqUpdateDialogClearDraft) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateDialogClearDraft) ProtoMessage()    {}
func (*ReqUpdateDialogClearDraft) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{91}
}

func (m *ReqUpdateDialogClearDraft) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUpdateDialogClearDraft) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqUpdateDialogClearDraft) GetWithIdType() int32 {
	if m != nil {
		return m.WithIdType
	}
	return 0
}

func (m *ReqUpdateDialogClearDraft) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUpdateDialogClearDraft struct {
}

func (m *ReplyUpdateDialogClearDraft) Reset()         { *m = ReplyUpdateDialogClearDraft{} }
func (m *ReplyUpdateDialogClearDraft) String() string { return proto.CompactTextString(m) }
func (*ReplyUpdateDialogClearDraft) ProtoMessage()    {}
func (*ReplyUpdateDialogClearDraft) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{92}
}

type ReqGetUserDialogAllUnread struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetUserDialogAllUnread) Reset()         { *m = ReqGetUserDialogAllUnread{} }
func (m *ReqGetUserDialogAllUnread) String() string { return proto.CompactTextString(m) }
func (*ReqGetUserDialogAllUnread) ProtoMessage()    {}
func (*ReqGetUserDialogAllUnread) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{93}
}

func (m *ReqGetUserDialogAllUnread) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetUserDialogAllUnread) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetUserDialogAllUnread struct {
	UnreadCount int32 `protobuf:"varint,1,opt,name=UnreadCount,proto3" json:"UnreadCount,omitempty"`
}

func (m *ReplyGetUserDialogAllUnread) Reset()         { *m = ReplyGetUserDialogAllUnread{} }
func (m *ReplyGetUserDialogAllUnread) String() string { return proto.CompactTextString(m) }
func (*ReplyGetUserDialogAllUnread) ProtoMessage()    {}
func (*ReplyGetUserDialogAllUnread) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{94}
}

func (m *ReplyGetUserDialogAllUnread) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

type ReqUpdateReceDialogAndMsg struct {
	UserDialogAndMsg *UserDialogAndMsg `protobuf:"bytes,1,opt,name=UserDialogAndMsg" json:"UserDialogAndMsg,omitempty"`
	Debug            *pbcomm.Debug     `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateReceDialogAndMsg) Reset()         { *m = ReqUpdateReceDialogAndMsg{} }
func (m *ReqUpdateReceDialogAndMsg) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateReceDialogAndMsg) ProtoMessage()    {}
func (*ReqUpdateReceDialogAndMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{95}
}

func (m *ReqUpdateReceDialogAndMsg) GetUserDialogAndMsg() *UserDialogAndMsg {
	if m != nil {
		return m.UserDialogAndMsg
	}
	return nil
}

func (m *ReqUpdateReceDialogAndMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetDialogAndMsgByUserIdAndWithIdAndType struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	Type   int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetDialogAndMsgByUserIdAndWithIdAndType) Reset() {
	*m = ReqGetDialogAndMsgByUserIdAndWithIdAndType{}
}
func (m *ReqGetDialogAndMsgByUserIdAndWithIdAndType) String() string {
	return proto.CompactTextString(m)
}
func (*ReqGetDialogAndMsgByUserIdAndWithIdAndType) ProtoMessage() {}
func (*ReqGetDialogAndMsgByUserIdAndWithIdAndType) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{96}
}

func (m *ReqGetDialogAndMsgByUserIdAndWithIdAndType) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetDialogAndMsgByUserIdAndWithIdAndType) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqGetDialogAndMsgByUserIdAndWithIdAndType) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqGetDialogAndMsgByUserIdAndWithIdAndType) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetDialogAndMsgsByUserId struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetDialogAndMsgsByUserId) Reset()         { *m = ReqGetDialogAndMsgsByUserId{} }
func (m *ReqGetDialogAndMsgsByUserId) String() string { return proto.CompactTextString(m) }
func (*ReqGetDialogAndMsgsByUserId) ProtoMessage()    {}
func (*ReqGetDialogAndMsgsByUserId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{97}
}

func (m *ReqGetDialogAndMsgsByUserId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetDialogAndMsgsByUserId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetDialogAndMsgsByPage struct {
	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithIdType int32         `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`
	Limit      int32         `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	FolderId   int32         `protobuf:"varint,5,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetDialogAndMsgsByPage) Reset()         { *m = ReqGetDialogAndMsgsByPage{} }
func (m *ReqGetDialogAndMsgsByPage) String() string { return proto.CompactTextString(m) }
func (*ReqGetDialogAndMsgsByPage) ProtoMessage()    {}
func (*ReqGetDialogAndMsgsByPage) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{98}
}

func (m *ReqGetDialogAndMsgsByPage) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetDialogAndMsgsByPage) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqGetDialogAndMsgsByPage) GetWithIdType() int32 {
	if m != nil {
		return m.WithIdType
	}
	return 0
}

func (m *ReqGetDialogAndMsgsByPage) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetDialogAndMsgsByPage) GetFolderId() int32 {
	if m != nil {
		return m.FolderId
	}
	return 0
}

func (m *ReqGetDialogAndMsgsByPage) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqReadSelfDialogAndMsg struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	Type   int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqReadSelfDialogAndMsg) Reset()         { *m = ReqReadSelfDialogAndMsg{} }
func (m *ReqReadSelfDialogAndMsg) String() string { return proto.CompactTextString(m) }
func (*ReqReadSelfDialogAndMsg) ProtoMessage()    {}
func (*ReqReadSelfDialogAndMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{99}
}

func (m *ReqReadSelfDialogAndMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqReadSelfDialogAndMsg) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqReadSelfDialogAndMsg) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqReadSelfDialogAndMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqUpdateReadinbox struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	Type   int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateReadinbox) Reset()                    { *m = ReqUpdateReadinbox{} }
func (m *ReqUpdateReadinbox) String() string            { return proto.CompactTextString(m) }
func (*ReqUpdateReadinbox) ProtoMessage()               {}
func (*ReqUpdateReadinbox) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{100} }

func (m *ReqUpdateReadinbox) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUpdateReadinbox) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqUpdateReadinbox) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqUpdateReadinbox) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqUpdateReadoutbox struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	Type   int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateReadoutbox) Reset()                    { *m = ReqUpdateReadoutbox{} }
func (m *ReqUpdateReadoutbox) String() string            { return proto.CompactTextString(m) }
func (*ReqUpdateReadoutbox) ProtoMessage()               {}
func (*ReqUpdateReadoutbox) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{101} }

func (m *ReqUpdateReadoutbox) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUpdateReadoutbox) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqUpdateReadoutbox) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqUpdateReadoutbox) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqDeleteUserDialog struct {
	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	Type       int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	DeleteDate int64         `protobuf:"varint,4,opt,name=DeleteDate,proto3" json:"DeleteDate,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqDeleteUserDialog) Reset()                    { *m = ReqDeleteUserDialog{} }
func (m *ReqDeleteUserDialog) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteUserDialog) ProtoMessage()               {}
func (*ReqDeleteUserDialog) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{102} }

func (m *ReqDeleteUserDialog) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqDeleteUserDialog) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqDeleteUserDialog) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqDeleteUserDialog) GetDeleteDate() int64 {
	if m != nil {
		return m.DeleteDate
	}
	return 0
}

func (m *ReqDeleteUserDialog) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqUpdateUserDialog struct {
	UpdateUserDialogParam *UpdateUserDialogParam `protobuf:"bytes,1,opt,name=UpdateUserDialogParam" json:"UpdateUserDialogParam,omitempty"`
	Debug                 *pbcomm.Debug          `protobuf:"bytes,11,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateUserDialog) Reset()                    { *m = ReqUpdateUserDialog{} }
func (m *ReqUpdateUserDialog) String() string            { return proto.CompactTextString(m) }
func (*ReqUpdateUserDialog) ProtoMessage()               {}
func (*ReqUpdateUserDialog) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{103} }

func (m *ReqUpdateUserDialog) GetUpdateUserDialogParam() *UpdateUserDialogParam {
	if m != nil {
		return m.UpdateUserDialogParam
	}
	return nil
}

func (m *ReqUpdateUserDialog) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UpdateUserDialogParam struct {
	UserId             int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId             int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithType           int32 `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`
	TopMessage         int32 `protobuf:"varint,4,opt,name=TopMessage,proto3" json:"TopMessage,omitempty"`
	ReadInboxMaxId     int32 `protobuf:"varint,5,opt,name=ReadInboxMaxId,proto3" json:"ReadInboxMaxId,omitempty"`
	ReadOutboxMaxId    int32 `protobuf:"varint,6,opt,name=ReadOutboxMaxId,proto3" json:"ReadOutboxMaxId,omitempty"`
	UnreadMetionsCount int32 `protobuf:"varint,7,opt,name=UnreadMetionsCount,proto3" json:"UnreadMetionsCount,omitempty"`
	UnreadCount        int32 `protobuf:"varint,8,opt,name=UnreadCount,proto3" json:"UnreadCount,omitempty"`
	Pts                int32 `protobuf:"varint,9,opt,name=Pts,proto3" json:"Pts,omitempty"`
	UpdateDate         int32 `protobuf:"varint,10,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`
}

func (m *UpdateUserDialogParam) Reset()         { *m = UpdateUserDialogParam{} }
func (m *UpdateUserDialogParam) String() string { return proto.CompactTextString(m) }
func (*UpdateUserDialogParam) ProtoMessage()    {}
func (*UpdateUserDialogParam) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{104}
}

func (m *UpdateUserDialogParam) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserDialogParam) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *UpdateUserDialogParam) GetWithType() int32 {
	if m != nil {
		return m.WithType
	}
	return 0
}

func (m *UpdateUserDialogParam) GetTopMessage() int32 {
	if m != nil {
		return m.TopMessage
	}
	return 0
}

func (m *UpdateUserDialogParam) GetReadInboxMaxId() int32 {
	if m != nil {
		return m.ReadInboxMaxId
	}
	return 0
}

func (m *UpdateUserDialogParam) GetReadOutboxMaxId() int32 {
	if m != nil {
		return m.ReadOutboxMaxId
	}
	return 0
}

func (m *UpdateUserDialogParam) GetUnreadMetionsCount() int32 {
	if m != nil {
		return m.UnreadMetionsCount
	}
	return 0
}

func (m *UpdateUserDialogParam) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *UpdateUserDialogParam) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *UpdateUserDialogParam) GetUpdateDate() int32 {
	if m != nil {
		return m.UpdateDate
	}
	return 0
}

type ReqUpdateUserDialogUpdateDate struct {
	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithType   int32         `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`
	UpdateDate int32         `protobuf:"varint,4,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateUserDialogUpdateDate) Reset()         { *m = ReqUpdateUserDialogUpdateDate{} }
func (m *ReqUpdateUserDialogUpdateDate) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateUserDialogUpdateDate) ProtoMessage()    {}
func (*ReqUpdateUserDialogUpdateDate) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{105}
}

func (m *ReqUpdateUserDialogUpdateDate) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUpdateUserDialogUpdateDate) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqUpdateUserDialogUpdateDate) GetWithType() int32 {
	if m != nil {
		return m.WithType
	}
	return 0
}

func (m *ReqUpdateUserDialogUpdateDate) GetUpdateDate() int32 {
	if m != nil {
		return m.UpdateDate
	}
	return 0
}

func (m *ReqUpdateUserDialogUpdateDate) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqUpdateDialogToPinged struct {
	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithIdType int32         `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateDialogToPinged) Reset()         { *m = ReqUpdateDialogToPinged{} }
func (m *ReqUpdateDialogToPinged) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateDialogToPinged) ProtoMessage()    {}
func (*ReqUpdateDialogToPinged) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{106}
}

func (m *ReqUpdateDialogToPinged) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUpdateDialogToPinged) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqUpdateDialogToPinged) GetWithIdType() int32 {
	if m != nil {
		return m.WithIdType
	}
	return 0
}

func (m *ReqUpdateDialogToPinged) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqUpdateDialogToFolder struct {
	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithIdType int32         `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`
	FolderId   int32         `protobuf:"varint,4,opt,name=Folder_id,json=FolderId,proto3" json:"Folder_id,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateDialogToFolder) Reset()         { *m = ReqUpdateDialogToFolder{} }
func (m *ReqUpdateDialogToFolder) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateDialogToFolder) ProtoMessage()    {}
func (*ReqUpdateDialogToFolder) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{107}
}

func (m *ReqUpdateDialogToFolder) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUpdateDialogToFolder) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqUpdateDialogToFolder) GetWithIdType() int32 {
	if m != nil {
		return m.WithIdType
	}
	return 0
}

func (m *ReqUpdateDialogToFolder) GetFolderId() int32 {
	if m != nil {
		return m.FolderId
	}
	return 0
}

func (m *ReqUpdateDialogToFolder) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqCancelPingedDialog struct {
	UserId     int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId     int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithIdType int32         `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqCancelPingedDialog) Reset()         { *m = ReqCancelPingedDialog{} }
func (m *ReqCancelPingedDialog) String() string { return proto.CompactTextString(m) }
func (*ReqCancelPingedDialog) ProtoMessage()    {}
func (*ReqCancelPingedDialog) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{108}
}

func (m *ReqCancelPingedDialog) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqCancelPingedDialog) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqCancelPingedDialog) GetWithIdType() int32 {
	if m != nil {
		return m.WithIdType
	}
	return 0
}

func (m *ReqCancelPingedDialog) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetPingedDialogAndMsg struct {
	UserId   int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	FolderId int32         `protobuf:"varint,2,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetPingedDialogAndMsg) Reset()         { *m = ReqGetPingedDialogAndMsg{} }
func (m *ReqGetPingedDialogAndMsg) String() string { return proto.CompactTextString(m) }
func (*ReqGetPingedDialogAndMsg) ProtoMessage()    {}
func (*ReqGetPingedDialogAndMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{109}
}

func (m *ReqGetPingedDialogAndMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetPingedDialogAndMsg) GetFolderId() int32 {
	if m != nil {
		return m.FolderId
	}
	return 0
}

func (m *ReqGetPingedDialogAndMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetLastLimitDialog struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Limit  int32         `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetLastLimitDialog) Reset()         { *m = ReqGetLastLimitDialog{} }
func (m *ReqGetLastLimitDialog) String() string { return proto.CompactTextString(m) }
func (*ReqGetLastLimitDialog) ProtoMessage()    {}
func (*ReqGetLastLimitDialog) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{110}
}

func (m *ReqGetLastLimitDialog) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetLastLimitDialog) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetLastLimitDialog) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type UserRating struct {
	UserId int32   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Rating float64 `protobuf:"fixed64,2,opt,name=Rating,proto3" json:"Rating,omitempty"`
}

func (m *UserRating) Reset()                    { *m = UserRating{} }
func (m *UserRating) String() string            { return proto.CompactTextString(m) }
func (*UserRating) ProtoMessage()               {}
func (*UserRating) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{111} }

func (m *UserRating) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserRating) GetRating() float64 {
	if m != nil {
		return m.Rating
	}
	return 0
}

type ReplyGetLastLimitDialog struct {
	UserRatingList []*UserRating `protobuf:"bytes,1,rep,name=UserRatingList" json:"UserRatingList,omitempty"`
}

func (m *ReplyGetLastLimitDialog) Reset()         { *m = ReplyGetLastLimitDialog{} }
func (m *ReplyGetLastLimitDialog) String() string { return proto.CompactTextString(m) }
func (*ReplyGetLastLimitDialog) ProtoMessage()    {}
func (*ReplyGetLastLimitDialog) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{112}
}

func (m *ReplyGetLastLimitDialog) GetUserRatingList() []*UserRating {
	if m != nil {
		return m.UserRatingList
	}
	return nil
}

type ReqUpdateReadInBoxMaxId struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	Type   int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateReadInBoxMaxId) Reset()         { *m = ReqUpdateReadInBoxMaxId{} }
func (m *ReqUpdateReadInBoxMaxId) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateReadInBoxMaxId) ProtoMessage()    {}
func (*ReqUpdateReadInBoxMaxId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{113}
}

func (m *ReqUpdateReadInBoxMaxId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUpdateReadInBoxMaxId) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqUpdateReadInBoxMaxId) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqUpdateReadInBoxMaxId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqUpdateReadOutBoxMaxId struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	Type   int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateReadOutBoxMaxId) Reset()         { *m = ReqUpdateReadOutBoxMaxId{} }
func (m *ReqUpdateReadOutBoxMaxId) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateReadOutBoxMaxId) ProtoMessage()    {}
func (*ReqUpdateReadOutBoxMaxId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{114}
}

func (m *ReqUpdateReadOutBoxMaxId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUpdateReadOutBoxMaxId) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqUpdateReadOutBoxMaxId) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqUpdateReadOutBoxMaxId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqUpdateChannelReadinbox struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	Type   int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	ReadIn int32         `protobuf:"varint,4,opt,name=ReadIn,proto3" json:"ReadIn,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateChannelReadinbox) Reset()         { *m = ReqUpdateChannelReadinbox{} }
func (m *ReqUpdateChannelReadinbox) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateChannelReadinbox) ProtoMessage()    {}
func (*ReqUpdateChannelReadinbox) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{115}
}

func (m *ReqUpdateChannelReadinbox) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUpdateChannelReadinbox) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqUpdateChannelReadinbox) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqUpdateChannelReadinbox) GetReadIn() int32 {
	if m != nil {
		return m.ReadIn
	}
	return 0
}

func (m *ReqUpdateChannelReadinbox) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqUpdateChannelReadoutbox struct {
	UserId  int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId  int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	Type    int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	ReadOut int32         `protobuf:"varint,4,opt,name=ReadOut,proto3" json:"ReadOut,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateChannelReadoutbox) Reset()         { *m = ReqUpdateChannelReadoutbox{} }
func (m *ReqUpdateChannelReadoutbox) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateChannelReadoutbox) ProtoMessage()    {}
func (*ReqUpdateChannelReadoutbox) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{116}
}

func (m *ReqUpdateChannelReadoutbox) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUpdateChannelReadoutbox) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqUpdateChannelReadoutbox) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqUpdateChannelReadoutbox) GetReadOut() int32 {
	if m != nil {
		return m.ReadOut
	}
	return 0
}

func (m *ReqUpdateChannelReadoutbox) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqDeleteUserDialogByChannelId struct {
	WithId     int32         `protobuf:"varint,1,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithIdType int32         `protobuf:"varint,2,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`
	DeleteDate int64         `protobuf:"varint,3,opt,name=DeleteDate,proto3" json:"DeleteDate,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqDeleteUserDialogByChannelId) Reset()         { *m = ReqDeleteUserDialogByChannelId{} }
func (m *ReqDeleteUserDialogByChannelId) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteUserDialogByChannelId) ProtoMessage()    {}
func (*ReqDeleteUserDialogByChannelId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{117}
}

func (m *ReqDeleteUserDialogByChannelId) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqDeleteUserDialogByChannelId) GetWithIdType() int32 {
	if m != nil {
		return m.WithIdType
	}
	return 0
}

func (m *ReqDeleteUserDialogByChannelId) GetDeleteDate() int64 {
	if m != nil {
		return m.DeleteDate
	}
	return 0
}

func (m *ReqDeleteUserDialogByChannelId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetUserChannelDialogByUserId struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetUserChannelDialogByUserId) Reset()         { *m = ReqGetUserChannelDialogByUserId{} }
func (m *ReqGetUserChannelDialogByUserId) String() string { return proto.CompactTextString(m) }
func (*ReqGetUserChannelDialogByUserId) ProtoMessage()    {}
func (*ReqGetUserChannelDialogByUserId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{118}
}

func (m *ReqGetUserChannelDialogByUserId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetUserChannelDialogByUserId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqStoreUserDialogErlang struct {
	UserDialogErlang *UserDialogErlang `protobuf:"bytes,1,opt,name=UserDialogErlang" json:"UserDialogErlang,omitempty"`
	Debug            *pbcomm.Debug     `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqStoreUserDialogErlang) Reset()         { *m = ReqStoreUserDialogErlang{} }
func (m *ReqStoreUserDialogErlang) String() string { return proto.CompactTextString(m) }
func (*ReqStoreUserDialogErlang) ProtoMessage()    {}
func (*ReqStoreUserDialogErlang) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{119}
}

func (m *ReqStoreUserDialogErlang) GetUserDialogErlang() *UserDialogErlang {
	if m != nil {
		return m.UserDialogErlang
	}
	return nil
}

func (m *ReqStoreUserDialogErlang) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetUserDialogErlangByUserIdWithIdWithType struct {
	UserId   int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId   int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithType int32         `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetUserDialogErlangByUserIdWithIdWithType) Reset() {
	*m = ReqGetUserDialogErlangByUserIdWithIdWithType{}
}
func (m *ReqGetUserDialogErlangByUserIdWithIdWithType) String() string {
	return proto.CompactTextString(m)
}
func (*ReqGetUserDialogErlangByUserIdWithIdWithType) ProtoMessage() {}
func (*ReqGetUserDialogErlangByUserIdWithIdWithType) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{120}
}

func (m *ReqGetUserDialogErlangByUserIdWithIdWithType) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetUserDialogErlangByUserIdWithIdWithType) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqGetUserDialogErlangByUserIdWithIdWithType) GetWithType() int32 {
	if m != nil {
		return m.WithType
	}
	return 0
}

func (m *ReqGetUserDialogErlangByUserIdWithIdWithType) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetUserDialogErlangByUserIdWithIdWithType struct {
	UserDialogErlang *UserDialogErlang `protobuf:"bytes,1,opt,name=UserDialogErlang" json:"UserDialogErlang,omitempty"`
}

func (m *ReplyGetUserDialogErlangByUserIdWithIdWithType) Reset() {
	*m = ReplyGetUserDialogErlangByUserIdWithIdWithType{}
}
func (m *ReplyGetUserDialogErlangByUserIdWithIdWithType) String() string {
	return proto.CompactTextString(m)
}
func (*ReplyGetUserDialogErlangByUserIdWithIdWithType) ProtoMessage() {}
func (*ReplyGetUserDialogErlangByUserIdWithIdWithType) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{121}
}

func (m *ReplyGetUserDialogErlangByUserIdWithIdWithType) GetUserDialogErlang() *UserDialogErlang {
	if m != nil {
		return m.UserDialogErlang
	}
	return nil
}

type ReqInsertRandomStatus struct {
	UserId   int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	RandomId int64         `protobuf:"varint,2,opt,name=RandomId,proto3" json:"RandomId,omitempty"`
	Handle   int32         `protobuf:"varint,3,opt,name=Handle,proto3" json:"Handle,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqInsertRandomStatus) Reset()         { *m = ReqInsertRandomStatus{} }
func (m *ReqInsertRandomStatus) String() string { return proto.CompactTextString(m) }
func (*ReqInsertRandomStatus) ProtoMessage()    {}
func (*ReqInsertRandomStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{122}
}

func (m *ReqInsertRandomStatus) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqInsertRandomStatus) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *ReqInsertRandomStatus) GetHandle() int32 {
	if m != nil {
		return m.Handle
	}
	return 0
}

func (m *ReqInsertRandomStatus) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetRandomStatus struct {
	KeyID    uint64        `protobuf:"varint,1,opt,name=KeyID,proto3" json:"KeyID,omitempty"`
	RandomID int64         `protobuf:"varint,2,opt,name=RandomID,proto3" json:"RandomID,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetRandomStatus) Reset()                    { *m = ReqGetRandomStatus{} }
func (m *ReqGetRandomStatus) String() string            { return proto.CompactTextString(m) }
func (*ReqGetRandomStatus) ProtoMessage()               {}
func (*ReqGetRandomStatus) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{123} }

func (m *ReqGetRandomStatus) GetKeyID() uint64 {
	if m != nil {
		return m.KeyID
	}
	return 0
}

func (m *ReqGetRandomStatus) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

func (m *ReqGetRandomStatus) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqSetSuperGroupMsg struct {
	Date   int64         `protobuf:"varint,1,opt,name=Date,proto3" json:"Date,omitempty"`
	Msg    []byte        `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	UserId int32         `protobuf:"varint,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqSetSuperGroupMsg) Reset()                    { *m = ReqSetSuperGroupMsg{} }
func (m *ReqSetSuperGroupMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqSetSuperGroupMsg) ProtoMessage()               {}
func (*ReqSetSuperGroupMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{124} }

func (m *ReqSetSuperGroupMsg) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ReqSetSuperGroupMsg) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *ReqSetSuperGroupMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqSetSuperGroupMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplySetSuperGroupMsg struct {
}

func (m *ReplySetSuperGroupMsg) Reset()         { *m = ReplySetSuperGroupMsg{} }
func (m *ReplySetSuperGroupMsg) String() string { return proto.CompactTextString(m) }
func (*ReplySetSuperGroupMsg) ProtoMessage()    {}
func (*ReplySetSuperGroupMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{125}
}

type ReqGetSuperGroupMsg struct {
	Date   int64         `protobuf:"varint,1,opt,name=Date,proto3" json:"Date,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Limit  int32         `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetSuperGroupMsg) Reset()                    { *m = ReqGetSuperGroupMsg{} }
func (m *ReqGetSuperGroupMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqGetSuperGroupMsg) ProtoMessage()               {}
func (*ReqGetSuperGroupMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{126} }

func (m *ReqGetSuperGroupMsg) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ReqGetSuperGroupMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetSuperGroupMsg) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetSuperGroupMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetSuperGroupMsg struct {
	Msg    [][]byte `protobuf:"bytes,1,rep,name=Msg" json:"Msg,omitempty"`
	Date   int64    `protobuf:"varint,2,opt,name=Date,proto3" json:"Date,omitempty"`
	GetAll bool     `protobuf:"varint,3,opt,name=GetAll,proto3" json:"GetAll,omitempty"`
}

func (m *ReplyGetSuperGroupMsg) Reset()         { *m = ReplyGetSuperGroupMsg{} }
func (m *ReplyGetSuperGroupMsg) String() string { return proto.CompactTextString(m) }
func (*ReplyGetSuperGroupMsg) ProtoMessage()    {}
func (*ReplyGetSuperGroupMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{127}
}

func (m *ReplyGetSuperGroupMsg) GetMsg() [][]byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *ReplyGetSuperGroupMsg) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ReplyGetSuperGroupMsg) GetGetAll() bool {
	if m != nil {
		return m.GetAll
	}
	return false
}

// Begin added by MarkLi at 2020-07-17 for 存取MsgId和SerialCode映射数据结构定义
type ReqInsertMsgIdSerialCodeMap struct {
	MsgId      int32         `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	SerialCode string        `protobuf:"bytes,2,opt,name=SerialCode,proto3" json:"SerialCode,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqInsertMsgIdSerialCodeMap) Reset()         { *m = ReqInsertMsgIdSerialCodeMap{} }
func (m *ReqInsertMsgIdSerialCodeMap) String() string { return proto.CompactTextString(m) }
func (*ReqInsertMsgIdSerialCodeMap) ProtoMessage()    {}
func (*ReqInsertMsgIdSerialCodeMap) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{128}
}

func (m *ReqInsertMsgIdSerialCodeMap) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqInsertMsgIdSerialCodeMap) GetSerialCode() string {
	if m != nil {
		return m.SerialCode
	}
	return ""
}

func (m *ReqInsertMsgIdSerialCodeMap) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyInsertMsgIdSerialCodeMap struct {
	MsgId      int32     `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	SerialCode string    `protobuf:"bytes,2,opt,name=SerialCode,proto3" json:"SerialCode,omitempty"`
	ReplyErr   *ReplyErr `protobuf:"bytes,3,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyInsertMsgIdSerialCodeMap) Reset()         { *m = ReplyInsertMsgIdSerialCodeMap{} }
func (m *ReplyInsertMsgIdSerialCodeMap) String() string { return proto.CompactTextString(m) }
func (*ReplyInsertMsgIdSerialCodeMap) ProtoMessage()    {}
func (*ReplyInsertMsgIdSerialCodeMap) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{129}
}

func (m *ReplyInsertMsgIdSerialCodeMap) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReplyInsertMsgIdSerialCodeMap) GetSerialCode() string {
	if m != nil {
		return m.SerialCode
	}
	return ""
}

func (m *ReplyInsertMsgIdSerialCodeMap) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetMsgIdSerialCodeMap struct {
	SerialCode string        `protobuf:"bytes,1,opt,name=SerialCode,proto3" json:"SerialCode,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetMsgIdSerialCodeMap) Reset()         { *m = ReqGetMsgIdSerialCodeMap{} }
func (m *ReqGetMsgIdSerialCodeMap) String() string { return proto.CompactTextString(m) }
func (*ReqGetMsgIdSerialCodeMap) ProtoMessage()    {}
func (*ReqGetMsgIdSerialCodeMap) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{130}
}

func (m *ReqGetMsgIdSerialCodeMap) GetSerialCode() string {
	if m != nil {
		return m.SerialCode
	}
	return ""
}

func (m *ReqGetMsgIdSerialCodeMap) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetMsgIdSerialCodeMap struct {
	MsgId      int32     `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	SerialCode string    `protobuf:"bytes,2,opt,name=SerialCode,proto3" json:"SerialCode,omitempty"`
	ReplyErr   *ReplyErr `protobuf:"bytes,3,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetMsgIdSerialCodeMap) Reset()         { *m = ReplyGetMsgIdSerialCodeMap{} }
func (m *ReplyGetMsgIdSerialCodeMap) String() string { return proto.CompactTextString(m) }
func (*ReplyGetMsgIdSerialCodeMap) ProtoMessage()    {}
func (*ReplyGetMsgIdSerialCodeMap) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{131}
}

func (m *ReplyGetMsgIdSerialCodeMap) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReplyGetMsgIdSerialCodeMap) GetSerialCode() string {
	if m != nil {
		return m.SerialCode
	}
	return ""
}

func (m *ReplyGetMsgIdSerialCodeMap) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type MsgIdSerialCodeMapRecord struct {
	Id         int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	MsgId      int32  `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	SerialCode string `protobuf:"bytes,3,opt,name=SerialCode,proto3" json:"SerialCode,omitempty"`
	InsertDate int32  `protobuf:"varint,4,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
}

func (m *MsgIdSerialCodeMapRecord) Reset()         { *m = MsgIdSerialCodeMapRecord{} }
func (m *MsgIdSerialCodeMapRecord) String() string { return proto.CompactTextString(m) }
func (*MsgIdSerialCodeMapRecord) ProtoMessage()    {}
func (*MsgIdSerialCodeMapRecord) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{132}
}

func (m *MsgIdSerialCodeMapRecord) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgIdSerialCodeMapRecord) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *MsgIdSerialCodeMapRecord) GetSerialCode() string {
	if m != nil {
		return m.SerialCode
	}
	return ""
}

func (m *MsgIdSerialCodeMapRecord) GetInsertDate() int32 {
	if m != nil {
		return m.InsertDate
	}
	return 0
}

// ==================================== channeldb rpc param reply ====================================
type ReqUpdateChannelMsgId struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateChannelMsgId) Reset()         { *m = ReqUpdateChannelMsgId{} }
func (m *ReqUpdateChannelMsgId) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateChannelMsgId) ProtoMessage()    {}
func (*ReqUpdateChannelMsgId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{133}
}

func (m *ReqUpdateChannelMsgId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqUpdateChannelMsgId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUpdateChannelMsgId struct {
	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId" json:"ChannelMsgId,omitempty"`
	ReplyErr     *ReplyErr     `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyUpdateChannelMsgId) Reset()         { *m = ReplyUpdateChannelMsgId{} }
func (m *ReplyUpdateChannelMsgId) String() string { return proto.CompactTextString(m) }
func (*ReplyUpdateChannelMsgId) ProtoMessage()    {}
func (*ReplyUpdateChannelMsgId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{134}
}

func (m *ReplyUpdateChannelMsgId) GetChannelMsgId() *ChannelMsgId {
	if m != nil {
		return m.ChannelMsgId
	}
	return nil
}

func (m *ReplyUpdateChannelMsgId) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqUpdateChannelMsgIdAndPts struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateChannelMsgIdAndPts) Reset()         { *m = ReqUpdateChannelMsgIdAndPts{} }
func (m *ReqUpdateChannelMsgIdAndPts) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateChannelMsgIdAndPts) ProtoMessage()    {}
func (*ReqUpdateChannelMsgIdAndPts) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{135}
}

func (m *ReqUpdateChannelMsgIdAndPts) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqUpdateChannelMsgIdAndPts) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUpdateChannelMsgIdAndPts struct {
	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId" json:"ChannelMsgId,omitempty"`
	ReplyErr     *ReplyErr     `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyUpdateChannelMsgIdAndPts) Reset()         { *m = ReplyUpdateChannelMsgIdAndPts{} }
func (m *ReplyUpdateChannelMsgIdAndPts) String() string { return proto.CompactTextString(m) }
func (*ReplyUpdateChannelMsgIdAndPts) ProtoMessage()    {}
func (*ReplyUpdateChannelMsgIdAndPts) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{136}
}

func (m *ReplyUpdateChannelMsgIdAndPts) GetChannelMsgId() *ChannelMsgId {
	if m != nil {
		return m.ChannelMsgId
	}
	return nil
}

func (m *ReplyUpdateChannelMsgIdAndPts) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqSetChannelMsgIdAndPts struct {
	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId" json:"ChannelMsgId,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqSetChannelMsgIdAndPts) Reset()         { *m = ReqSetChannelMsgIdAndPts{} }
func (m *ReqSetChannelMsgIdAndPts) String() string { return proto.CompactTextString(m) }
func (*ReqSetChannelMsgIdAndPts) ProtoMessage()    {}
func (*ReqSetChannelMsgIdAndPts) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{137}
}

func (m *ReqSetChannelMsgIdAndPts) GetChannelMsgId() *ChannelMsgId {
	if m != nil {
		return m.ChannelMsgId
	}
	return nil
}

func (m *ReqSetChannelMsgIdAndPts) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplySetChannelMsgIdAndPts struct {
	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplySetChannelMsgIdAndPts) Reset()         { *m = ReplySetChannelMsgIdAndPts{} }
func (m *ReplySetChannelMsgIdAndPts) String() string { return proto.CompactTextString(m) }
func (*ReplySetChannelMsgIdAndPts) ProtoMessage()    {}
func (*ReplySetChannelMsgIdAndPts) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{138}
}

func (m *ReplySetChannelMsgIdAndPts) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqUpdateChannelPts struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateChannelPts) Reset()                    { *m = ReqUpdateChannelPts{} }
func (m *ReqUpdateChannelPts) String() string            { return proto.CompactTextString(m) }
func (*ReqUpdateChannelPts) ProtoMessage()               {}
func (*ReqUpdateChannelPts) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{139} }

func (m *ReqUpdateChannelPts) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqUpdateChannelPts) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUpdateChannelPts struct {
	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId" json:"ChannelMsgId,omitempty"`
	ReplyErr     *ReplyErr     `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyUpdateChannelPts) Reset()         { *m = ReplyUpdateChannelPts{} }
func (m *ReplyUpdateChannelPts) String() string { return proto.CompactTextString(m) }
func (*ReplyUpdateChannelPts) ProtoMessage()    {}
func (*ReplyUpdateChannelPts) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{140}
}

func (m *ReplyUpdateChannelPts) GetChannelMsgId() *ChannelMsgId {
	if m != nil {
		return m.ChannelMsgId
	}
	return nil
}

func (m *ReplyUpdateChannelPts) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqUpdateChannelPtsWithNum struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Number    int32         `protobuf:"varint,2,opt,name=Number,proto3" json:"Number,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateChannelPtsWithNum) Reset()         { *m = ReqUpdateChannelPtsWithNum{} }
func (m *ReqUpdateChannelPtsWithNum) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateChannelPtsWithNum) ProtoMessage()    {}
func (*ReqUpdateChannelPtsWithNum) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{141}
}

func (m *ReqUpdateChannelPtsWithNum) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqUpdateChannelPtsWithNum) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ReqUpdateChannelPtsWithNum) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUpdateChannelPtsWithNum struct {
	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId" json:"ChannelMsgId,omitempty"`
	ReplyErr     *ReplyErr     `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyUpdateChannelPtsWithNum) Reset()         { *m = ReplyUpdateChannelPtsWithNum{} }
func (m *ReplyUpdateChannelPtsWithNum) String() string { return proto.CompactTextString(m) }
func (*ReplyUpdateChannelPtsWithNum) ProtoMessage()    {}
func (*ReplyUpdateChannelPtsWithNum) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{142}
}

func (m *ReplyUpdateChannelPtsWithNum) GetChannelMsgId() *ChannelMsgId {
	if m != nil {
		return m.ChannelMsgId
	}
	return nil
}

func (m *ReplyUpdateChannelPtsWithNum) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetChannelMsgId struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelMsgId) Reset()                    { *m = ReqGetChannelMsgId{} }
func (m *ReqGetChannelMsgId) String() string            { return proto.CompactTextString(m) }
func (*ReqGetChannelMsgId) ProtoMessage()               {}
func (*ReqGetChannelMsgId) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{143} }

func (m *ReqGetChannelMsgId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelMsgId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelMsgId struct {
	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId" json:"ChannelMsgId,omitempty"`
	ReplyErr     *ReplyErr     `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelMsgId) Reset()                    { *m = ReplyGetChannelMsgId{} }
func (m *ReplyGetChannelMsgId) String() string            { return proto.CompactTextString(m) }
func (*ReplyGetChannelMsgId) ProtoMessage()               {}
func (*ReplyGetChannelMsgId) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{144} }

func (m *ReplyGetChannelMsgId) GetChannelMsgId() *ChannelMsgId {
	if m != nil {
		return m.ChannelMsgId
	}
	return nil
}

func (m *ReplyGetChannelMsgId) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqStoreChannelPtsHandle struct {
	ChannelPtsHandle *ChannelPtsHandle `protobuf:"bytes,1,opt,name=ChannelPtsHandle" json:"ChannelPtsHandle,omitempty"`
	Debug            *pbcomm.Debug     `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqStoreChannelPtsHandle) Reset()         { *m = ReqStoreChannelPtsHandle{} }
func (m *ReqStoreChannelPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReqStoreChannelPtsHandle) ProtoMessage()    {}
func (*ReqStoreChannelPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{145}
}

func (m *ReqStoreChannelPtsHandle) GetChannelPtsHandle() *ChannelPtsHandle {
	if m != nil {
		return m.ChannelPtsHandle
	}
	return nil
}

func (m *ReqStoreChannelPtsHandle) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqBatchStoreChannelPtsHandle struct {
	ChannelPtsHandles []*ChannelPtsHandle `protobuf:"bytes,1,rep,name=ChannelPtsHandles" json:"ChannelPtsHandles,omitempty"`
	Debug             *pbcomm.Debug       `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqBatchStoreChannelPtsHandle) Reset()         { *m = ReqBatchStoreChannelPtsHandle{} }
func (m *ReqBatchStoreChannelPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReqBatchStoreChannelPtsHandle) ProtoMessage()    {}
func (*ReqBatchStoreChannelPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{146}
}

func (m *ReqBatchStoreChannelPtsHandle) GetChannelPtsHandles() []*ChannelPtsHandle {
	if m != nil {
		return m.ChannelPtsHandles
	}
	return nil
}

func (m *ReqBatchStoreChannelPtsHandle) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyErr struct {
	ErrCode uint32 `protobuf:"varint,1,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
}

func (m *ReplyErr) Reset()                    { *m = ReplyErr{} }
func (m *ReplyErr) String() string            { return proto.CompactTextString(m) }
func (*ReplyErr) ProtoMessage()               {}
func (*ReplyErr) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{147} }

func (m *ReplyErr) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ReplyErr) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type ReqGetChannelDiffByPts struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Pts       int32         `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`
	Limit     int32         `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	MinId     int32         `protobuf:"varint,4,opt,name=MinId,proto3" json:"MinId,omitempty"`
	MaxId     int32         `protobuf:"varint,5,opt,name=MaxId,proto3" json:"MaxId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelDiffByPts) Reset()         { *m = ReqGetChannelDiffByPts{} }
func (m *ReqGetChannelDiffByPts) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelDiffByPts) ProtoMessage()    {}
func (*ReqGetChannelDiffByPts) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{148}
}

func (m *ReqGetChannelDiffByPts) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelDiffByPts) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReqGetChannelDiffByPts) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetChannelDiffByPts) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *ReqGetChannelDiffByPts) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ReqGetChannelDiffByPts) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelDiffByPts struct {
	IsFianl  bool      `protobuf:"varint,1,opt,name=IsFianl,proto3" json:"IsFianl,omitempty"`
	ToLong   bool      `protobuf:"varint,2,opt,name=ToLong,proto3" json:"ToLong,omitempty"`
	Pts      int32     `protobuf:"varint,3,opt,name=Pts,proto3" json:"Pts,omitempty"`
	TopMsgId int32     `protobuf:"varint,4,opt,name=TopMsgId,proto3" json:"TopMsgId,omitempty"`
	Msgs     [][]byte  `protobuf:"bytes,5,rep,name=Msgs" json:"Msgs,omitempty"`
	ReplyErr *ReplyErr `protobuf:"bytes,6,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelDiffByPts) Reset()         { *m = ReplyGetChannelDiffByPts{} }
func (m *ReplyGetChannelDiffByPts) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelDiffByPts) ProtoMessage()    {}
func (*ReplyGetChannelDiffByPts) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{149}
}

func (m *ReplyGetChannelDiffByPts) GetIsFianl() bool {
	if m != nil {
		return m.IsFianl
	}
	return false
}

func (m *ReplyGetChannelDiffByPts) GetToLong() bool {
	if m != nil {
		return m.ToLong
	}
	return false
}

func (m *ReplyGetChannelDiffByPts) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReplyGetChannelDiffByPts) GetTopMsgId() int32 {
	if m != nil {
		return m.TopMsgId
	}
	return 0
}

func (m *ReplyGetChannelDiffByPts) GetMsgs() [][]byte {
	if m != nil {
		return m.Msgs
	}
	return nil
}

func (m *ReplyGetChannelDiffByPts) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetUserDiff struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Date   int64         `protobuf:"varint,2,opt,name=Date,proto3" json:"Date,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetUserDiff) Reset()                    { *m = ReqGetUserDiff{} }
func (m *ReqGetUserDiff) String() string            { return proto.CompactTextString(m) }
func (*ReqGetUserDiff) ProtoMessage()               {}
func (*ReqGetUserDiff) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{150} }

func (m *ReqGetUserDiff) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetUserDiff) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ReqGetUserDiff) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ChannelPtsDiff struct {
	ChannelID int32 `protobuf:"varint,1,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Pts       int32 `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`
}

func (m *ChannelPtsDiff) Reset()                    { *m = ChannelPtsDiff{} }
func (m *ChannelPtsDiff) String() string            { return proto.CompactTextString(m) }
func (*ChannelPtsDiff) ProtoMessage()               {}
func (*ChannelPtsDiff) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{151} }

func (m *ChannelPtsDiff) GetChannelID() int32 {
	if m != nil {
		return m.ChannelID
	}
	return 0
}

func (m *ChannelPtsDiff) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

type ReplyGetUserDiff struct {
	ChannelPtsDiffs []*ChannelPtsDiff `protobuf:"bytes,1,rep,name=ChannelPtsDiffs" json:"ChannelPtsDiffs,omitempty"`
	ReplyErr        *ReplyErr         `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetUserDiff) Reset()                    { *m = ReplyGetUserDiff{} }
func (m *ReplyGetUserDiff) String() string            { return proto.CompactTextString(m) }
func (*ReplyGetUserDiff) ProtoMessage()               {}
func (*ReplyGetUserDiff) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{152} }

func (m *ReplyGetUserDiff) GetChannelPtsDiffs() []*ChannelPtsDiff {
	if m != nil {
		return m.ChannelPtsDiffs
	}
	return nil
}

func (m *ReplyGetUserDiff) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetChannelLastPtsHandle struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelLastPtsHandle) Reset()         { *m = ReqGetChannelLastPtsHandle{} }
func (m *ReqGetChannelLastPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelLastPtsHandle) ProtoMessage()    {}
func (*ReqGetChannelLastPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{153}
}

func (m *ReqGetChannelLastPtsHandle) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelLastPtsHandle) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelLastPtsHandle struct {
	ChannelPtsHandle *ChannelPtsHandle `protobuf:"bytes,1,opt,name=ChannelPtsHandle" json:"ChannelPtsHandle,omitempty"`
	ReplyErr         *ReplyErr         `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelLastPtsHandle) Reset()         { *m = ReplyGetChannelLastPtsHandle{} }
func (m *ReplyGetChannelLastPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelLastPtsHandle) ProtoMessage()    {}
func (*ReplyGetChannelLastPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{154}
}

func (m *ReplyGetChannelLastPtsHandle) GetChannelPtsHandle() *ChannelPtsHandle {
	if m != nil {
		return m.ChannelPtsHandle
	}
	return nil
}

func (m *ReplyGetChannelLastPtsHandle) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqDeleteChannelPtsHandle struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Pts       int32         `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqDeleteChannelPtsHandle) Reset()         { *m = ReqDeleteChannelPtsHandle{} }
func (m *ReqDeleteChannelPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteChannelPtsHandle) ProtoMessage()    {}
func (*ReqDeleteChannelPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{155}
}

func (m *ReqDeleteChannelPtsHandle) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqDeleteChannelPtsHandle) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReqDeleteChannelPtsHandle) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyDeleteChannelPtsHandle struct {
	ReplyErr *ReplyErr `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyDeleteChannelPtsHandle) Reset()         { *m = ReplyDeleteChannelPtsHandle{} }
func (m *ReplyDeleteChannelPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReplyDeleteChannelPtsHandle) ProtoMessage()    {}
func (*ReplyDeleteChannelPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{156}
}

func (m *ReplyDeleteChannelPtsHandle) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqInsertOrUpdateChannelMsg struct {
	UserMsg *UserMsg      `protobuf:"bytes,1,opt,name=UserMsg" json:"UserMsg,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqInsertOrUpdateChannelMsg) Reset()         { *m = ReqInsertOrUpdateChannelMsg{} }
func (m *ReqInsertOrUpdateChannelMsg) String() string { return proto.CompactTextString(m) }
func (*ReqInsertOrUpdateChannelMsg) ProtoMessage()    {}
func (*ReqInsertOrUpdateChannelMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{157}
}

func (m *ReqInsertOrUpdateChannelMsg) GetUserMsg() *UserMsg {
	if m != nil {
		return m.UserMsg
	}
	return nil
}

func (m *ReqInsertOrUpdateChannelMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqUpdateChannelMsg struct {
	UserMsg *UserMsg      `protobuf:"bytes,1,opt,name=UserMsg" json:"UserMsg,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateChannelMsg) Reset()                    { *m = ReqUpdateChannelMsg{} }
func (m *ReqUpdateChannelMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqUpdateChannelMsg) ProtoMessage()               {}
func (*ReqUpdateChannelMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{158} }

func (m *ReqUpdateChannelMsg) GetUserMsg() *UserMsg {
	if m != nil {
		return m.UserMsg
	}
	return nil
}

func (m *ReqUpdateChannelMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqBatchInsertOrUpdateChannelMsg struct {
	UserMsgs []*UserMsg    `protobuf:"bytes,1,rep,name=UserMsgs" json:"UserMsgs,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqBatchInsertOrUpdateChannelMsg) Reset()         { *m = ReqBatchInsertOrUpdateChannelMsg{} }
func (m *ReqBatchInsertOrUpdateChannelMsg) String() string { return proto.CompactTextString(m) }
func (*ReqBatchInsertOrUpdateChannelMsg) ProtoMessage()    {}
func (*ReqBatchInsertOrUpdateChannelMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{159}
}

func (m *ReqBatchInsertOrUpdateChannelMsg) GetUserMsgs() []*UserMsg {
	if m != nil {
		return m.UserMsgs
	}
	return nil
}

func (m *ReqBatchInsertOrUpdateChannelMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqDeleteMsgs struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	MsgIds    []int32       `protobuf:"varint,2,rep,packed,name=MsgIds" json:"MsgIds,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqDeleteMsgs) Reset()                    { *m = ReqDeleteMsgs{} }
func (m *ReqDeleteMsgs) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteMsgs) ProtoMessage()               {}
func (*ReqDeleteMsgs) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{160} }

func (m *ReqDeleteMsgs) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqDeleteMsgs) GetMsgIds() []int32 {
	if m != nil {
		return m.MsgIds
	}
	return nil
}

func (m *ReqDeleteMsgs) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyDeleteMsgs struct {
	CurentMsgId int32     `protobuf:"varint,1,opt,name=CurentMsgId,proto3" json:"CurentMsgId,omitempty"`
	UpdateDate  int32     `protobuf:"varint,2,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`
	ReplyErr    *ReplyErr `protobuf:"bytes,3,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyDeleteMsgs) Reset()                    { *m = ReplyDeleteMsgs{} }
func (m *ReplyDeleteMsgs) String() string            { return proto.CompactTextString(m) }
func (*ReplyDeleteMsgs) ProtoMessage()               {}
func (*ReplyDeleteMsgs) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{161} }

func (m *ReplyDeleteMsgs) GetCurentMsgId() int32 {
	if m != nil {
		return m.CurentMsgId
	}
	return 0
}

func (m *ReplyDeleteMsgs) GetUpdateDate() int32 {
	if m != nil {
		return m.UpdateDate
	}
	return 0
}

func (m *ReplyDeleteMsgs) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqDeleteUserHistory struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqDeleteUserHistory) Reset()                    { *m = ReqDeleteUserHistory{} }
func (m *ReqDeleteUserHistory) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteUserHistory) ProtoMessage()               {}
func (*ReqDeleteUserHistory) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{162} }

func (m *ReqDeleteUserHistory) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqDeleteUserHistory) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqDeleteUserHistory) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyDeleteUserHistory struct {
	MsgsAndMaxId *MsgsAndMaxId `protobuf:"bytes,1,opt,name=MsgsAndMaxId" json:"MsgsAndMaxId,omitempty"`
	Ptss         []int32       `protobuf:"varint,2,rep,packed,name=Ptss" json:"Ptss,omitempty"`
	UpdateDate   int32         `protobuf:"varint,3,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`
	ReplyErr     *ReplyErr     `protobuf:"bytes,4,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyDeleteUserHistory) Reset()         { *m = ReplyDeleteUserHistory{} }
func (m *ReplyDeleteUserHistory) String() string { return proto.CompactTextString(m) }
func (*ReplyDeleteUserHistory) ProtoMessage()    {}
func (*ReplyDeleteUserHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{163}
}

func (m *ReplyDeleteUserHistory) GetMsgsAndMaxId() *MsgsAndMaxId {
	if m != nil {
		return m.MsgsAndMaxId
	}
	return nil
}

func (m *ReplyDeleteUserHistory) GetPtss() []int32 {
	if m != nil {
		return m.Ptss
	}
	return nil
}

func (m *ReplyDeleteUserHistory) GetUpdateDate() int32 {
	if m != nil {
		return m.UpdateDate
	}
	return 0
}

func (m *ReplyDeleteUserHistory) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqDeleteChannelMsg struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqDeleteChannelMsg) Reset()                    { *m = ReqDeleteChannelMsg{} }
func (m *ReqDeleteChannelMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteChannelMsg) ProtoMessage()               {}
func (*ReqDeleteChannelMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{164} }

func (m *ReqDeleteChannelMsg) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqDeleteChannelMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqDeleteChannelMessage struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	MsgId     int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqDeleteChannelMessage) Reset()         { *m = ReqDeleteChannelMessage{} }
func (m *ReqDeleteChannelMessage) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteChannelMessage) ProtoMessage()    {}
func (*ReqDeleteChannelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{165}
}

func (m *ReqDeleteChannelMessage) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqDeleteChannelMessage) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqDeleteChannelMessage) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyDeleteChannelMessage struct {
	UserId       int32     `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	CurrentMsgId int32     `protobuf:"varint,2,opt,name=CurrentMsgId,proto3" json:"CurrentMsgId,omitempty"`
	UpdateDate   int32     `protobuf:"varint,3,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`
	ReplyErr     *ReplyErr `protobuf:"bytes,4,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyDeleteChannelMessage) Reset()         { *m = ReplyDeleteChannelMessage{} }
func (m *ReplyDeleteChannelMessage) String() string { return proto.CompactTextString(m) }
func (*ReplyDeleteChannelMessage) ProtoMessage()    {}
func (*ReplyDeleteChannelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{166}
}

func (m *ReplyDeleteChannelMessage) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReplyDeleteChannelMessage) GetCurrentMsgId() int32 {
	if m != nil {
		return m.CurrentMsgId
	}
	return 0
}

func (m *ReplyDeleteChannelMessage) GetUpdateDate() int32 {
	if m != nil {
		return m.UpdateDate
	}
	return 0
}

func (m *ReplyDeleteChannelMessage) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetChannelMessage struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	MsgId     int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelMessage) Reset()                    { *m = ReqGetChannelMessage{} }
func (m *ReqGetChannelMessage) String() string            { return proto.CompactTextString(m) }
func (*ReqGetChannelMessage) ProtoMessage()               {}
func (*ReqGetChannelMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{167} }

func (m *ReqGetChannelMessage) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelMessage) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqGetChannelMessage) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelMessage struct {
	UserMsg  *UserMsg  `protobuf:"bytes,1,opt,name=UserMsg" json:"UserMsg,omitempty"`
	ReplyErr *ReplyErr `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelMessage) Reset()         { *m = ReplyGetChannelMessage{} }
func (m *ReplyGetChannelMessage) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelMessage) ProtoMessage()    {}
func (*ReplyGetChannelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{168}
}

func (m *ReplyGetChannelMessage) GetUserMsg() *UserMsg {
	if m != nil {
		return m.UserMsg
	}
	return nil
}

func (m *ReplyGetChannelMessage) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetChannelMsgsByMsgIds struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	MsgIds    []int32       `protobuf:"varint,2,rep,packed,name=MsgIds" json:"MsgIds,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelMsgsByMsgIds) Reset()         { *m = ReqGetChannelMsgsByMsgIds{} }
func (m *ReqGetChannelMsgsByMsgIds) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelMsgsByMsgIds) ProtoMessage()    {}
func (*ReqGetChannelMsgsByMsgIds) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{169}
}

func (m *ReqGetChannelMsgsByMsgIds) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelMsgsByMsgIds) GetMsgIds() []int32 {
	if m != nil {
		return m.MsgIds
	}
	return nil
}

func (m *ReqGetChannelMsgsByMsgIds) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelMsgsByMsgIds struct {
	UserMsgListAndPts *UserMsgListAndPts `protobuf:"bytes,1,opt,name=UserMsgListAndPts" json:"UserMsgListAndPts,omitempty"`
	ReplyErr          *ReplyErr          `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelMsgsByMsgIds) Reset()         { *m = ReplyGetChannelMsgsByMsgIds{} }
func (m *ReplyGetChannelMsgsByMsgIds) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelMsgsByMsgIds) ProtoMessage()    {}
func (*ReplyGetChannelMsgsByMsgIds) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{170}
}

func (m *ReplyGetChannelMsgsByMsgIds) GetUserMsgListAndPts() *UserMsgListAndPts {
	if m != nil {
		return m.UserMsgListAndPts
	}
	return nil
}

func (m *ReplyGetChannelMsgsByMsgIds) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetChannelMsgHistory struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	OffsetId   int32         `protobuf:"varint,2,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`
	OffsetDate int32         `protobuf:"varint,3,opt,name=OffsetDate,proto3" json:"OffsetDate,omitempty"`
	AddOffset  int32         `protobuf:"varint,4,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`
	MinId      int32         `protobuf:"varint,5,opt,name=MinId,proto3" json:"MinId,omitempty"`
	MaxId      int32         `protobuf:"varint,6,opt,name=MaxId,proto3" json:"MaxId,omitempty"`
	Limit      int32         `protobuf:"varint,7,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Encry      int32         `protobuf:"varint,8,opt,name=Encry,proto3" json:"Encry,omitempty"`
	DeleteMark int32         `protobuf:"varint,9,opt,name=DeleteMark,proto3" json:"DeleteMark,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,10,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelMsgHistory) Reset()         { *m = ReqGetChannelMsgHistory{} }
func (m *ReqGetChannelMsgHistory) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelMsgHistory) ProtoMessage()    {}
func (*ReqGetChannelMsgHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{171}
}

func (m *ReqGetChannelMsgHistory) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetDeleteMark() int32 {
	if m != nil {
		return m.DeleteMark
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelMsgHistory struct {
	UserMsgListAndPts *UserMsgListAndPts `protobuf:"bytes,1,opt,name=UserMsgListAndPts" json:"UserMsgListAndPts,omitempty"`
	ReplyErr          *ReplyErr          `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelMsgHistory) Reset()         { *m = ReplyGetChannelMsgHistory{} }
func (m *ReplyGetChannelMsgHistory) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelMsgHistory) ProtoMessage()    {}
func (*ReplyGetChannelMsgHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{172}
}

func (m *ReplyGetChannelMsgHistory) GetUserMsgListAndPts() *UserMsgListAndPts {
	if m != nil {
		return m.UserMsgListAndPts
	}
	return nil
}

func (m *ReplyGetChannelMsgHistory) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetChannelTopMst struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelTopMst) Reset()                    { *m = ReqGetChannelTopMst{} }
func (m *ReqGetChannelTopMst) String() string            { return proto.CompactTextString(m) }
func (*ReqGetChannelTopMst) ProtoMessage()               {}
func (*ReqGetChannelTopMst) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{173} }

func (m *ReqGetChannelTopMst) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelTopMst) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type GetChannelMediaMessageHistoryByMediaConfig struct {
	ChannelId int32   `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserId    int32   `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Medias    []int32 `protobuf:"varint,3,rep,packed,name=Medias" json:"Medias,omitempty"`
	MaxId     int32   `protobuf:"varint,4,opt,name=MaxId,proto3" json:"MaxId,omitempty"`
	Limit     int32   `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Encry     int32   `protobuf:"varint,6,opt,name=encry,proto3" json:"encry,omitempty"`
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) Reset() {
	*m = GetChannelMediaMessageHistoryByMediaConfig{}
}
func (m *GetChannelMediaMessageHistoryByMediaConfig) String() string {
	return proto.CompactTextString(m)
}
func (*GetChannelMediaMessageHistoryByMediaConfig) ProtoMessage() {}
func (*GetChannelMediaMessageHistoryByMediaConfig) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{174}
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) GetMedias() []int32 {
	if m != nil {
		return m.Medias
	}
	return nil
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

type ReqGetChannelMediaMessageHistoryByMedia struct {
	GetChannelMediaMessageHistoryByMediaConfig *GetChannelMediaMessageHistoryByMediaConfig `protobuf:"bytes,1,opt,name=GetChannelMediaMessageHistoryByMediaConfig" json:"GetChannelMediaMessageHistoryByMediaConfig,omitempty"`
	Debug                                      *pbcomm.Debug                               `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelMediaMessageHistoryByMedia) Reset() {
	*m = ReqGetChannelMediaMessageHistoryByMedia{}
}
func (m *ReqGetChannelMediaMessageHistoryByMedia) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelMediaMessageHistoryByMedia) ProtoMessage()    {}
func (*ReqGetChannelMediaMessageHistoryByMedia) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{175}
}

func (m *ReqGetChannelMediaMessageHistoryByMedia) GetGetChannelMediaMessageHistoryByMediaConfig() *GetChannelMediaMessageHistoryByMediaConfig {
	if m != nil {
		return m.GetChannelMediaMessageHistoryByMediaConfig
	}
	return nil
}

func (m *ReqGetChannelMediaMessageHistoryByMedia) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelMediaMessageHistoryByMedia struct {
	ChannelMsgs []*UserMsg `protobuf:"bytes,1,rep,name=ChannelMsgs" json:"ChannelMsgs,omitempty"`
	ReplyErr    *ReplyErr  `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelMediaMessageHistoryByMedia) Reset() {
	*m = ReplyGetChannelMediaMessageHistoryByMedia{}
}
func (m *ReplyGetChannelMediaMessageHistoryByMedia) String() string {
	return proto.CompactTextString(m)
}
func (*ReplyGetChannelMediaMessageHistoryByMedia) ProtoMessage() {}
func (*ReplyGetChannelMediaMessageHistoryByMedia) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{176}
}

func (m *ReplyGetChannelMediaMessageHistoryByMedia) GetChannelMsgs() []*UserMsg {
	if m != nil {
		return m.ChannelMsgs
	}
	return nil
}

func (m *ReplyGetChannelMediaMessageHistoryByMedia) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReplyInsertOrUpdateChannelMessageDeleteMark struct {
	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyInsertOrUpdateChannelMessageDeleteMark) Reset() {
	*m = ReplyInsertOrUpdateChannelMessageDeleteMark{}
}
func (m *ReplyInsertOrUpdateChannelMessageDeleteMark) String() string {
	return proto.CompactTextString(m)
}
func (*ReplyInsertOrUpdateChannelMessageDeleteMark) ProtoMessage() {}
func (*ReplyInsertOrUpdateChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{177}
}

func (m *ReplyInsertOrUpdateChannelMessageDeleteMark) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReplyGetChannelMessageDeleteMark struct {
	ChannelMessageDeleteMark *ChannelMessageDeleteMark `protobuf:"bytes,1,opt,name=ChannelMessageDeleteMark" json:"ChannelMessageDeleteMark,omitempty"`
	ReplyErr                 *ReplyErr                 `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelMessageDeleteMark) Reset()         { *m = ReplyGetChannelMessageDeleteMark{} }
func (m *ReplyGetChannelMessageDeleteMark) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelMessageDeleteMark) ProtoMessage()    {}
func (*ReplyGetChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{178}
}

func (m *ReplyGetChannelMessageDeleteMark) GetChannelMessageDeleteMark() *ChannelMessageDeleteMark {
	if m != nil {
		return m.ChannelMessageDeleteMark
	}
	return nil
}

func (m *ReplyGetChannelMessageDeleteMark) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetChannelMediaMessageStatisticsByMedia struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Media     int32         `protobuf:"varint,2,opt,name=Media,proto3" json:"Media,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelMediaMessageStatisticsByMedia) Reset() {
	*m = ReqGetChannelMediaMessageStatisticsByMedia{}
}
func (m *ReqGetChannelMediaMessageStatisticsByMedia) String() string {
	return proto.CompactTextString(m)
}
func (*ReqGetChannelMediaMessageStatisticsByMedia) ProtoMessage() {}
func (*ReqGetChannelMediaMessageStatisticsByMedia) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{179}
}

func (m *ReqGetChannelMediaMessageStatisticsByMedia) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelMediaMessageStatisticsByMedia) GetMedia() int32 {
	if m != nil {
		return m.Media
	}
	return 0
}

func (m *ReqGetChannelMediaMessageStatisticsByMedia) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelMediaMessageStatisticsByMedia struct {
	ChannelMediaMessageStatistics *ChannelMediaMessageStatistics `protobuf:"bytes,1,opt,name=ChannelMediaMessageStatistics" json:"ChannelMediaMessageStatistics,omitempty"`
	ReplyErr                      *ReplyErr                      `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelMediaMessageStatisticsByMedia) Reset() {
	*m = ReplyGetChannelMediaMessageStatisticsByMedia{}
}
func (m *ReplyGetChannelMediaMessageStatisticsByMedia) String() string {
	return proto.CompactTextString(m)
}
func (*ReplyGetChannelMediaMessageStatisticsByMedia) ProtoMessage() {}
func (*ReplyGetChannelMediaMessageStatisticsByMedia) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{180}
}

func (m *ReplyGetChannelMediaMessageStatisticsByMedia) GetChannelMediaMessageStatistics() *ChannelMediaMessageStatistics {
	if m != nil {
		return m.ChannelMediaMessageStatistics
	}
	return nil
}

func (m *ReplyGetChannelMediaMessageStatisticsByMedia) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReplyGetChannelTopMst struct {
	UserMsg  *UserMsg  `protobuf:"bytes,1,opt,name=UserMsg" json:"UserMsg,omitempty"`
	ReplyErr *ReplyErr `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelTopMst) Reset()         { *m = ReplyGetChannelTopMst{} }
func (m *ReplyGetChannelTopMst) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelTopMst) ProtoMessage()    {}
func (*ReplyGetChannelTopMst) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{181}
}

func (m *ReplyGetChannelTopMst) GetUserMsg() *UserMsg {
	if m != nil {
		return m.UserMsg
	}
	return nil
}

func (m *ReplyGetChannelTopMst) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqInsertOrUpdateChannelDialogAndMsg struct {
	ChannelDialog *ChannelDialog `protobuf:"bytes,1,opt,name=ChannelDialog" json:"ChannelDialog,omitempty"`
	ChannelMsg    *UserMsg       `protobuf:"bytes,2,opt,name=ChannelMsg" json:"ChannelMsg,omitempty"`
	Debug         *pbcomm.Debug  `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqInsertOrUpdateChannelDialogAndMsg) Reset()         { *m = ReqInsertOrUpdateChannelDialogAndMsg{} }
func (m *ReqInsertOrUpdateChannelDialogAndMsg) String() string { return proto.CompactTextString(m) }
func (*ReqInsertOrUpdateChannelDialogAndMsg) ProtoMessage()    {}
func (*ReqInsertOrUpdateChannelDialogAndMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{182}
}

func (m *ReqInsertOrUpdateChannelDialogAndMsg) GetChannelDialog() *ChannelDialog {
	if m != nil {
		return m.ChannelDialog
	}
	return nil
}

func (m *ReqInsertOrUpdateChannelDialogAndMsg) GetChannelMsg() *UserMsg {
	if m != nil {
		return m.ChannelMsg
	}
	return nil
}

func (m *ReqInsertOrUpdateChannelDialogAndMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetDialogMaxReadInMsgId struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetDialogMaxReadInMsgId) Reset()         { *m = ReqGetDialogMaxReadInMsgId{} }
func (m *ReqGetDialogMaxReadInMsgId) String() string { return proto.CompactTextString(m) }
func (*ReqGetDialogMaxReadInMsgId) ProtoMessage()    {}
func (*ReqGetDialogMaxReadInMsgId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{183}
}

func (m *ReqGetDialogMaxReadInMsgId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetDialogMaxReadInMsgId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetDialogMaxReadInMsgId struct {
	MsgId    int32     `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	ReplyErr *ReplyErr `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetDialogMaxReadInMsgId) Reset()         { *m = ReplyGetDialogMaxReadInMsgId{} }
func (m *ReplyGetDialogMaxReadInMsgId) String() string { return proto.CompactTextString(m) }
func (*ReplyGetDialogMaxReadInMsgId) ProtoMessage()    {}
func (*ReplyGetDialogMaxReadInMsgId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{184}
}

func (m *ReplyGetDialogMaxReadInMsgId) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReplyGetDialogMaxReadInMsgId) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqSetDialogMaxReadInMsgId struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	MsgId     int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqSetDialogMaxReadInMsgId) Reset()         { *m = ReqSetDialogMaxReadInMsgId{} }
func (m *ReqSetDialogMaxReadInMsgId) String() string { return proto.CompactTextString(m) }
func (*ReqSetDialogMaxReadInMsgId) ProtoMessage()    {}
func (*ReqSetDialogMaxReadInMsgId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{185}
}

func (m *ReqSetDialogMaxReadInMsgId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqSetDialogMaxReadInMsgId) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqSetDialogMaxReadInMsgId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetDialogAndMsg struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetDialogAndMsg) Reset()                    { *m = ReqGetDialogAndMsg{} }
func (m *ReqGetDialogAndMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqGetDialogAndMsg) ProtoMessage()               {}
func (*ReqGetDialogAndMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{186} }

func (m *ReqGetDialogAndMsg) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetDialogAndMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetDialogAndMsg struct {
	ChannelDialogAndMsg *ChannelDialogAndMsg `protobuf:"bytes,1,opt,name=ChannelDialogAndMsg" json:"ChannelDialogAndMsg,omitempty"`
	ReplyErr            *ReplyErr            `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetDialogAndMsg) Reset()                    { *m = ReplyGetDialogAndMsg{} }
func (m *ReplyGetDialogAndMsg) String() string            { return proto.CompactTextString(m) }
func (*ReplyGetDialogAndMsg) ProtoMessage()               {}
func (*ReplyGetDialogAndMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{187} }

func (m *ReplyGetDialogAndMsg) GetChannelDialogAndMsg() *ChannelDialogAndMsg {
	if m != nil {
		return m.ChannelDialogAndMsg
	}
	return nil
}

func (m *ReplyGetDialogAndMsg) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetDialogAndMsgs struct {
	ChannelIds []int32       `protobuf:"varint,1,rep,packed,name=ChannelIds" json:"ChannelIds,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetDialogAndMsgs) Reset()                    { *m = ReqGetDialogAndMsgs{} }
func (m *ReqGetDialogAndMsgs) String() string            { return proto.CompactTextString(m) }
func (*ReqGetDialogAndMsgs) ProtoMessage()               {}
func (*ReqGetDialogAndMsgs) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{188} }

func (m *ReqGetDialogAndMsgs) GetChannelIds() []int32 {
	if m != nil {
		return m.ChannelIds
	}
	return nil
}

func (m *ReqGetDialogAndMsgs) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetDialogAndMsgs struct {
	ChannelDialogAndMsgs *ChannelDialogAndMsgs `protobuf:"bytes,1,opt,name=ChannelDialogAndMsgs" json:"ChannelDialogAndMsgs,omitempty"`
	ReplyErr             *ReplyErr             `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetDialogAndMsgs) Reset()         { *m = ReplyGetDialogAndMsgs{} }
func (m *ReplyGetDialogAndMsgs) String() string { return proto.CompactTextString(m) }
func (*ReplyGetDialogAndMsgs) ProtoMessage()    {}
func (*ReplyGetDialogAndMsgs) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{189}
}

func (m *ReplyGetDialogAndMsgs) GetChannelDialogAndMsgs() *ChannelDialogAndMsgs {
	if m != nil {
		return m.ChannelDialogAndMsgs
	}
	return nil
}

func (m *ReplyGetDialogAndMsgs) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqStoreAdminLog struct {
	ChannelAdminLog *ChannelAdminLog `protobuf:"bytes,1,opt,name=ChannelAdminLog" json:"ChannelAdminLog,omitempty"`
	Debug           *pbcomm.Debug    `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqStoreAdminLog) Reset()                    { *m = ReqStoreAdminLog{} }
func (m *ReqStoreAdminLog) String() string            { return proto.CompactTextString(m) }
func (*ReqStoreAdminLog) ProtoMessage()               {}
func (*ReqStoreAdminLog) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{190} }

func (m *ReqStoreAdminLog) GetChannelAdminLog() *ChannelAdminLog {
	if m != nil {
		return m.ChannelAdminLog
	}
	return nil
}

func (m *ReqStoreAdminLog) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelId struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Limit     int32         `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqFindsAdminLogByChannelId) Reset()         { *m = ReqFindsAdminLogByChannelId{} }
func (m *ReqFindsAdminLogByChannelId) String() string { return proto.CompactTextString(m) }
func (*ReqFindsAdminLogByChannelId) ProtoMessage()    {}
func (*ReqFindsAdminLogByChannelId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{191}
}

func (m *ReqFindsAdminLogByChannelId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelId) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyFindsAdminLog struct {
	AdminLogs []*ChannelAdminLog `protobuf:"bytes,1,rep,name=AdminLogs" json:"AdminLogs,omitempty"`
	ReplyErr  *ReplyErr          `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyFindsAdminLog) Reset()                    { *m = ReplyFindsAdminLog{} }
func (m *ReplyFindsAdminLog) String() string            { return proto.CompactTextString(m) }
func (*ReplyFindsAdminLog) ProtoMessage()               {}
func (*ReplyFindsAdminLog) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{192} }

func (m *ReplyFindsAdminLog) GetAdminLogs() []*ChannelAdminLog {
	if m != nil {
		return m.AdminLogs
	}
	return nil
}

func (m *ReplyFindsAdminLog) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId struct {
	ChannelId    int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserId       int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	AdminUsers   []int32       `protobuf:"varint,3,rep,packed,name=AdminUsers" json:"AdminUsers,omitempty"`
	EventFilters []int32       `protobuf:"varint,4,rep,packed,name=EventFilters" json:"EventFilters,omitempty"`
	Limit        int32         `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) Reset() {
	*m = ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId{}
}
func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) String() string {
	return proto.CompactTextString(m)
}
func (*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) ProtoMessage() {}
func (*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{193}
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetAdminUsers() []int32 {
	if m != nil {
		return m.AdminUsers
	}
	return nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetEventFilters() []int32 {
	if m != nil {
		return m.EventFilters
	}
	return nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId struct {
	ChannelId    int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserId       int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	EventFilters []int32       `protobuf:"varint,3,rep,packed,name=EventFilters" json:"EventFilters,omitempty"`
	Limit        int32         `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) Reset() {
	*m = ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId{}
}
func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) String() string {
	return proto.CompactTextString(m)
}
func (*ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) ProtoMessage() {}
func (*ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{194}
}

func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetEventFilters() []int32 {
	if m != nil {
		return m.EventFilters
	}
	return nil
}

func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndUserId struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Limit     int32         `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqFindsAdminLogByChannelIdAndUserId) Reset()         { *m = ReqFindsAdminLogByChannelIdAndUserId{} }
func (m *ReqFindsAdminLogByChannelIdAndUserId) String() string { return proto.CompactTextString(m) }
func (*ReqFindsAdminLogByChannelIdAndUserId) ProtoMessage()    {}
func (*ReqFindsAdminLogByChannelIdAndUserId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{195}
}

func (m *ReqFindsAdminLogByChannelIdAndUserId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndUserId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndUserId) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndUserId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters struct {
	ChannelId    int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	AdminUsers   []int32       `protobuf:"varint,2,rep,packed,name=AdminUsers" json:"AdminUsers,omitempty"`
	EventFilters []int32       `protobuf:"varint,3,rep,packed,name=EventFilters" json:"EventFilters,omitempty"`
	Limit        int32         `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) Reset() {
	*m = ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters{}
}
func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) String() string {
	return proto.CompactTextString(m)
}
func (*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) ProtoMessage() {}
func (*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{196}
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetAdminUsers() []int32 {
	if m != nil {
		return m.AdminUsers
	}
	return nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetEventFilters() []int32 {
	if m != nil {
		return m.EventFilters
	}
	return nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndEventFilters struct {
	ChannelId    int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	EventFilters []int32       `protobuf:"varint,2,rep,packed,name=EventFilters" json:"EventFilters,omitempty"`
	Limit        int32         `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqFindsAdminLogByChannelIdAndEventFilters) Reset() {
	*m = ReqFindsAdminLogByChannelIdAndEventFilters{}
}
func (m *ReqFindsAdminLogByChannelIdAndEventFilters) String() string {
	return proto.CompactTextString(m)
}
func (*ReqFindsAdminLogByChannelIdAndEventFilters) ProtoMessage() {}
func (*ReqFindsAdminLogByChannelIdAndEventFilters) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{197}
}

func (m *ReqFindsAdminLogByChannelIdAndEventFilters) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndEventFilters) GetEventFilters() []int32 {
	if m != nil {
		return m.EventFilters
	}
	return nil
}

func (m *ReqFindsAdminLogByChannelIdAndEventFilters) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndEventFilters) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndAdminUsers struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	AdminUsers []int32       `protobuf:"varint,2,rep,packed,name=AdminUsers" json:"AdminUsers,omitempty"`
	Limit      int32         `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) Reset() {
	*m = ReqFindsAdminLogByChannelIdAndAdminUsers{}
}
func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) String() string { return proto.CompactTextString(m) }
func (*ReqFindsAdminLogByChannelIdAndAdminUsers) ProtoMessage()    {}
func (*ReqFindsAdminLogByChannelIdAndAdminUsers) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{198}
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) GetAdminUsers() []int32 {
	if m != nil {
		return m.AdminUsers
	}
	return nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqChannelMessageAtAdd struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId  int32         `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Encry  int32         `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqChannelMessageAtAdd) Reset()         { *m = ReqChannelMessageAtAdd{} }
func (m *ReqChannelMessageAtAdd) String() string { return proto.CompactTextString(m) }
func (*ReqChannelMessageAtAdd) ProtoMessage()    {}
func (*ReqChannelMessageAtAdd) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{199}
}

func (m *ReqChannelMessageAtAdd) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqChannelMessageAtAdd) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqChannelMessageAtAdd) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqChannelMessageAtAdd) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *ReqChannelMessageAtAdd) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyChannelMessageAtAdd struct {
	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyChannelMessageAtAdd) Reset()         { *m = ReplyChannelMessageAtAdd{} }
func (m *ReplyChannelMessageAtAdd) String() string { return proto.CompactTextString(m) }
func (*ReplyChannelMessageAtAdd) ProtoMessage()    {}
func (*ReplyChannelMessageAtAdd) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{200}
}

func (m *ReplyChannelMessageAtAdd) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqChannelMessageAtGet struct {
	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId    int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId     int32         `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	AddOffset int32         `protobuf:"varint,4,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`
	Limit     int32         `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqChannelMessageAtGet) Reset()         { *m = ReqChannelMessageAtGet{} }
func (m *ReqChannelMessageAtGet) String() string { return proto.CompactTextString(m) }
func (*ReqChannelMessageAtGet) ProtoMessage()    {}
func (*ReqChannelMessageAtGet) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{201}
}

func (m *ReqChannelMessageAtGet) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqChannelMessageAtGet) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqChannelMessageAtGet) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqChannelMessageAtGet) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *ReqChannelMessageAtGet) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqChannelMessageAtGet) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyChannelMessageAtGet struct {
	Messages []*UserMsg `protobuf:"bytes,1,rep,name=Messages" json:"Messages,omitempty"`
	ReplyErr *ReplyErr  `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyChannelMessageAtGet) Reset()         { *m = ReplyChannelMessageAtGet{} }
func (m *ReplyChannelMessageAtGet) String() string { return proto.CompactTextString(m) }
func (*ReplyChannelMessageAtGet) ProtoMessage()    {}
func (*ReplyChannelMessageAtGet) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{202}
}

func (m *ReplyChannelMessageAtGet) GetMessages() []*UserMsg {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ReplyChannelMessageAtGet) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqChannelMessageAtDel struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId  int32         `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqChannelMessageAtDel) Reset()         { *m = ReqChannelMessageAtDel{} }
func (m *ReqChannelMessageAtDel) String() string { return proto.CompactTextString(m) }
func (*ReqChannelMessageAtDel) ProtoMessage()    {}
func (*ReqChannelMessageAtDel) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{203}
}

func (m *ReqChannelMessageAtDel) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqChannelMessageAtDel) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqChannelMessageAtDel) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqChannelMessageAtDel) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyChannelMessageAtDel struct {
	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyChannelMessageAtDel) Reset()         { *m = ReplyChannelMessageAtDel{} }
func (m *ReplyChannelMessageAtDel) String() string { return proto.CompactTextString(m) }
func (*ReplyChannelMessageAtDel) ProtoMessage()    {}
func (*ReplyChannelMessageAtDel) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{204}
}

func (m *ReplyChannelMessageAtDel) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqUserMessageAtAdd struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId  int32         `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Encry  int32         `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUserMessageAtAdd) Reset()                    { *m = ReqUserMessageAtAdd{} }
func (m *ReqUserMessageAtAdd) String() string            { return proto.CompactTextString(m) }
func (*ReqUserMessageAtAdd) ProtoMessage()               {}
func (*ReqUserMessageAtAdd) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{205} }

func (m *ReqUserMessageAtAdd) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUserMessageAtAdd) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqUserMessageAtAdd) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqUserMessageAtAdd) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *ReqUserMessageAtAdd) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUserMessageAtAdd struct {
	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyUserMessageAtAdd) Reset()         { *m = ReplyUserMessageAtAdd{} }
func (m *ReplyUserMessageAtAdd) String() string { return proto.CompactTextString(m) }
func (*ReplyUserMessageAtAdd) ProtoMessage()    {}
func (*ReplyUserMessageAtAdd) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{206}
}

func (m *ReplyUserMessageAtAdd) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqUserMessageAtGet struct {
	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId    int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId     int32         `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	AddOffset int32         `protobuf:"varint,4,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`
	Limit     int32         `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUserMessageAtGet) Reset()                    { *m = ReqUserMessageAtGet{} }
func (m *ReqUserMessageAtGet) String() string            { return proto.CompactTextString(m) }
func (*ReqUserMessageAtGet) ProtoMessage()               {}
func (*ReqUserMessageAtGet) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{207} }

func (m *ReqUserMessageAtGet) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUserMessageAtGet) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqUserMessageAtGet) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqUserMessageAtGet) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *ReqUserMessageAtGet) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqUserMessageAtGet) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUserMessageAtGet struct {
	Messages []*UserMsg `protobuf:"bytes,1,rep,name=Messages" json:"Messages,omitempty"`
	ReplyErr *ReplyErr  `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyUserMessageAtGet) Reset()         { *m = ReplyUserMessageAtGet{} }
func (m *ReplyUserMessageAtGet) String() string { return proto.CompactTextString(m) }
func (*ReplyUserMessageAtGet) ProtoMessage()    {}
func (*ReplyUserMessageAtGet) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{208}
}

func (m *ReplyUserMessageAtGet) GetMessages() []*UserMsg {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ReplyUserMessageAtGet) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqUserMessageAtDel struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId  int32         `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqUserMessageAtDel) Reset()                    { *m = ReqUserMessageAtDel{} }
func (m *ReqUserMessageAtDel) String() string            { return proto.CompactTextString(m) }
func (*ReqUserMessageAtDel) ProtoMessage()               {}
func (*ReqUserMessageAtDel) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{209} }

func (m *ReqUserMessageAtDel) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUserMessageAtDel) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqUserMessageAtDel) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqUserMessageAtDel) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUserMessageAtDel struct {
	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyUserMessageAtDel) Reset()         { *m = ReplyUserMessageAtDel{} }
func (m *ReplyUserMessageAtDel) String() string { return proto.CompactTextString(m) }
func (*ReplyUserMessageAtDel) ProtoMessage()    {}
func (*ReplyUserMessageAtDel) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{210}
}

func (m *ReplyUserMessageAtDel) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

// ==================================== 公用struct ====================================
// @ for channeldb
type ChannelMessageAt struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId  int32 `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Encry  int32 `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
}

func (m *ChannelMessageAt) Reset()                    { *m = ChannelMessageAt{} }
func (m *ChannelMessageAt) String() string            { return proto.CompactTextString(m) }
func (*ChannelMessageAt) ProtoMessage()               {}
func (*ChannelMessageAt) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{211} }

func (m *ChannelMessageAt) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChannelMessageAt) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ChannelMessageAt) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ChannelMessageAt) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

// @ for messagedb
type UserMessageAt struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId  int32 `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Encry  int32 `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
}

func (m *UserMessageAt) Reset()                    { *m = UserMessageAt{} }
func (m *UserMessageAt) String() string            { return proto.CompactTextString(m) }
func (*UserMessageAt) ProtoMessage()               {}
func (*UserMessageAt) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{212} }

func (m *UserMessageAt) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserMessageAt) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *UserMessageAt) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *UserMessageAt) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

// 超级群标记删除记录结构体
type ChannelMessageDeleteMark struct {
	UserId    int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChannelId int32 `protobuf:"varint,2,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	MsgId     int32 `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
}

func (m *ChannelMessageDeleteMark) Reset()         { *m = ChannelMessageDeleteMark{} }
func (m *ChannelMessageDeleteMark) String() string { return proto.CompactTextString(m) }
func (*ChannelMessageDeleteMark) ProtoMessage()    {}
func (*ChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{213}
}

func (m *ChannelMessageDeleteMark) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChannelMessageDeleteMark) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelMessageDeleteMark) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type MsgIdImported struct {
	UserIdOrChannelId int32 `protobuf:"varint,1,opt,name=UserIdOrChannelId,proto3" json:"UserIdOrChannelId,omitempty"`
	Imported          bool  `protobuf:"varint,2,opt,name=Imported,proto3" json:"Imported,omitempty"`
}

func (m *MsgIdImported) Reset()                    { *m = MsgIdImported{} }
func (m *MsgIdImported) String() string            { return proto.CompactTextString(m) }
func (*MsgIdImported) ProtoMessage()               {}
func (*MsgIdImported) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{214} }

func (m *MsgIdImported) GetUserIdOrChannelId() int32 {
	if m != nil {
		return m.UserIdOrChannelId
	}
	return 0
}

func (m *MsgIdImported) GetImported() bool {
	if m != nil {
		return m.Imported
	}
	return false
}

type UserMediaMessageStatistics struct {
	UserId   int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId   int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithType int32 `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`
	Media    int32 `protobuf:"varint,4,opt,name=Media,proto3" json:"Media,omitempty"`
	Count    int32 `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *UserMediaMessageStatistics) Reset()         { *m = UserMediaMessageStatistics{} }
func (m *UserMediaMessageStatistics) String() string { return proto.CompactTextString(m) }
func (*UserMediaMessageStatistics) ProtoMessage()    {}
func (*UserMediaMessageStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{215}
}

func (m *UserMediaMessageStatistics) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserMediaMessageStatistics) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *UserMediaMessageStatistics) GetWithType() int32 {
	if m != nil {
		return m.WithType
	}
	return 0
}

func (m *UserMediaMessageStatistics) GetMedia() int32 {
	if m != nil {
		return m.Media
	}
	return 0
}

func (m *UserMediaMessageStatistics) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ChannelMediaMessageStatistics struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Media     int32 `protobuf:"varint,2,opt,name=Media,proto3" json:"Media,omitempty"`
	Count     int32 `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *ChannelMediaMessageStatistics) Reset()         { *m = ChannelMediaMessageStatistics{} }
func (m *ChannelMediaMessageStatistics) String() string { return proto.CompactTextString(m) }
func (*ChannelMediaMessageStatistics) ProtoMessage()    {}
func (*ChannelMediaMessageStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{216}
}

func (m *ChannelMediaMessageStatistics) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelMediaMessageStatistics) GetMedia() int32 {
	if m != nil {
		return m.Media
	}
	return 0
}

func (m *ChannelMediaMessageStatistics) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type UserDialogErlang struct {
	Id         int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserId     int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId     int32 `protobuf:"varint,3,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithType   int32 `protobuf:"varint,4,opt,name=WithType,proto3" json:"WithType,omitempty"`
	HaveImport bool  `protobuf:"varint,5,opt,name=HaveImport,proto3" json:"HaveImport,omitempty"`
	CreateTime int64 `protobuf:"varint,6,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	UpdateTime int64 `protobuf:"varint,7,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
}

func (m *UserDialogErlang) Reset()                    { *m = UserDialogErlang{} }
func (m *UserDialogErlang) String() string            { return proto.CompactTextString(m) }
func (*UserDialogErlang) ProtoMessage()               {}
func (*UserDialogErlang) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{217} }

func (m *UserDialogErlang) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserDialogErlang) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserDialogErlang) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *UserDialogErlang) GetWithType() int32 {
	if m != nil {
		return m.WithType
	}
	return 0
}

func (m *UserDialogErlang) GetHaveImport() bool {
	if m != nil {
		return m.HaveImport
	}
	return false
}

func (m *UserDialogErlang) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *UserDialogErlang) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

type PtsHandle struct {
	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Pts    int32  `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`
	Type   int32  `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Msg    []byte `protobuf:"bytes,4,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Date   int64  `protobuf:"varint,5,opt,name=Date,proto3" json:"Date,omitempty"`
}

func (m *PtsHandle) Reset()                    { *m = PtsHandle{} }
func (m *PtsHandle) String() string            { return proto.CompactTextString(m) }
func (*PtsHandle) ProtoMessage()               {}
func (*PtsHandle) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{218} }

func (m *PtsHandle) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PtsHandle) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *PtsHandle) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *PtsHandle) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *PtsHandle) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

type OtherInfoMsg struct {
	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Date   int64  `protobuf:"varint,2,opt,name=Date,proto3" json:"Date,omitempty"`
	Msg    []byte `protobuf:"bytes,3,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (m *OtherInfoMsg) Reset()                    { *m = OtherInfoMsg{} }
func (m *OtherInfoMsg) String() string            { return proto.CompactTextString(m) }
func (*OtherInfoMsg) ProtoMessage()               {}
func (*OtherInfoMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{219} }

func (m *OtherInfoMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *OtherInfoMsg) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *OtherInfoMsg) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type ChannelPtsHandle struct {
	ChannelId int32   `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserIds   []int32 `protobuf:"varint,2,rep,packed,name=UserIds" json:"UserIds,omitempty"`
	Pts       int32   `protobuf:"varint,3,opt,name=Pts,proto3" json:"Pts,omitempty"`
	Msg       []byte  `protobuf:"bytes,4,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Date      int64   `protobuf:"varint,5,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *ChannelPtsHandle) Reset()                    { *m = ChannelPtsHandle{} }
func (m *ChannelPtsHandle) String() string            { return proto.CompactTextString(m) }
func (*ChannelPtsHandle) ProtoMessage()               {}
func (*ChannelPtsHandle) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{220} }

func (m *ChannelPtsHandle) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelPtsHandle) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *ChannelPtsHandle) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ChannelPtsHandle) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *ChannelPtsHandle) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

type ChannelAdminLog struct {
	ActionId    int64  `protobuf:"varint,1,opt,name=ActionId,proto3" json:"ActionId,omitempty"`
	ChannelId   int32  `protobuf:"varint,2,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	AdminUserId int32  `protobuf:"varint,3,opt,name=AdminUserId,proto3" json:"AdminUserId,omitempty"`
	UserId      int32  `protobuf:"varint,4,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ActionType  int32  `protobuf:"varint,5,opt,name=ActionType,proto3" json:"ActionType,omitempty"`
	AdminLog    []byte `protobuf:"bytes,6,opt,name=AdminLog,proto3" json:"AdminLog,omitempty"`
	Date        int64  `protobuf:"varint,7,opt,name=Date,proto3" json:"Date,omitempty"`
}

func (m *ChannelAdminLog) Reset()                    { *m = ChannelAdminLog{} }
func (m *ChannelAdminLog) String() string            { return proto.CompactTextString(m) }
func (*ChannelAdminLog) ProtoMessage()               {}
func (*ChannelAdminLog) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{221} }

func (m *ChannelAdminLog) GetActionId() int64 {
	if m != nil {
		return m.ActionId
	}
	return 0
}

func (m *ChannelAdminLog) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelAdminLog) GetAdminUserId() int32 {
	if m != nil {
		return m.AdminUserId
	}
	return 0
}

func (m *ChannelAdminLog) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChannelAdminLog) GetActionType() int32 {
	if m != nil {
		return m.ActionType
	}
	return 0
}

func (m *ChannelAdminLog) GetAdminLog() []byte {
	if m != nil {
		return m.AdminLog
	}
	return nil
}

func (m *ChannelAdminLog) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

type UserPingedDialog struct {
	UserId     int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId     int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithIdType int32 `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`
	PingedNum  int32 `protobuf:"varint,4,opt,name=PingedNum,proto3" json:"PingedNum,omitempty"`
}

func (m *UserPingedDialog) Reset()                    { *m = UserPingedDialog{} }
func (m *UserPingedDialog) String() string            { return proto.CompactTextString(m) }
func (*UserPingedDialog) ProtoMessage()               {}
func (*UserPingedDialog) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{222} }

func (m *UserPingedDialog) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserPingedDialog) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *UserPingedDialog) GetWithIdType() int32 {
	if m != nil {
		return m.WithIdType
	}
	return 0
}

func (m *UserPingedDialog) GetPingedNum() int32 {
	if m != nil {
		return m.PingedNum
	}
	return 0
}

type UserDialog struct {
	Id                  int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserId              int32   `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId              int32   `protobuf:"varint,3,opt,name=WithId,proto3" json:"WithId,omitempty"`
	Type                int32   `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Flags               int32   `protobuf:"varint,5,opt,name=Flags,proto3" json:"Flags,omitempty"`
	Pinged              bool    `protobuf:"varint,6,opt,name=Pinged,proto3" json:"Pinged,omitempty"`
	TopMessage          int32   `protobuf:"varint,7,opt,name=TopMessage,proto3" json:"TopMessage,omitempty"`
	ReadInboxMaxId      int32   `protobuf:"varint,8,opt,name=ReadInboxMaxId,proto3" json:"ReadInboxMaxId,omitempty"`
	ReadOutboxMaxId     int32   `protobuf:"varint,9,opt,name=ReadOutboxMaxId,proto3" json:"ReadOutboxMaxId,omitempty"`
	UnreadMetionsCount  int32   `protobuf:"varint,10,opt,name=UnreadMetionsCount,proto3" json:"UnreadMetionsCount,omitempty"`
	UnreadCount         int32   `protobuf:"varint,11,opt,name=UnreadCount,proto3" json:"UnreadCount,omitempty"`
	NotifySettingsFlags int32   `protobuf:"varint,12,opt,name=NotifySettingsFlags,proto3" json:"NotifySettingsFlags,omitempty"`
	ShowPreviews        bool    `protobuf:"varint,13,opt,name=ShowPreviews,proto3" json:"ShowPreviews,omitempty"`
	Silent              bool    `protobuf:"varint,14,opt,name=Silent,proto3" json:"Silent,omitempty"`
	MuteUntil           int32   `protobuf:"varint,15,opt,name=MuteUntil,proto3" json:"MuteUntil,omitempty"`
	Sound               string  `protobuf:"bytes,16,opt,name=Sound,proto3" json:"Sound,omitempty"`
	Pts                 int32   `protobuf:"varint,17,opt,name=Pts,proto3" json:"Pts,omitempty"`
	Draft               []byte  `protobuf:"bytes,18,opt,name=Draft,proto3" json:"Draft,omitempty"`
	FolderId            int32   `protobuf:"varint,19,opt,name=FolderId,proto3" json:"FolderId,omitempty"`
	Readinpts           int32   `protobuf:"varint,20,opt,name=Readinpts,proto3" json:"Readinpts,omitempty"`
	Readoutpts          int32   `protobuf:"varint,21,opt,name=Readoutpts,proto3" json:"Readoutpts,omitempty"`
	LinkUser            []int32 `protobuf:"varint,22,rep,packed,name=LinkUser" json:"LinkUser,omitempty"`
	InsertDate          int64   `protobuf:"varint,23,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
	UpdateDate          int64   `protobuf:"varint,24,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`
	Encry               int32   `protobuf:"varint,25,opt,name=Encry,proto3" json:"Encry,omitempty"`
	Revoke              bool    `protobuf:"varint,26,opt,name=Revoke,proto3" json:"Revoke,omitempty"`
}

func (m *UserDialog) Reset()                    { *m = UserDialog{} }
func (m *UserDialog) String() string            { return proto.CompactTextString(m) }
func (*UserDialog) ProtoMessage()               {}
func (*UserDialog) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{223} }

func (m *UserDialog) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserDialog) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserDialog) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *UserDialog) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *UserDialog) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *UserDialog) GetPinged() bool {
	if m != nil {
		return m.Pinged
	}
	return false
}

func (m *UserDialog) GetTopMessage() int32 {
	if m != nil {
		return m.TopMessage
	}
	return 0
}

func (m *UserDialog) GetReadInboxMaxId() int32 {
	if m != nil {
		return m.ReadInboxMaxId
	}
	return 0
}

func (m *UserDialog) GetReadOutboxMaxId() int32 {
	if m != nil {
		return m.ReadOutboxMaxId
	}
	return 0
}

func (m *UserDialog) GetUnreadMetionsCount() int32 {
	if m != nil {
		return m.UnreadMetionsCount
	}
	return 0
}

func (m *UserDialog) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *UserDialog) GetNotifySettingsFlags() int32 {
	if m != nil {
		return m.NotifySettingsFlags
	}
	return 0
}

func (m *UserDialog) GetShowPreviews() bool {
	if m != nil {
		return m.ShowPreviews
	}
	return false
}

func (m *UserDialog) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *UserDialog) GetMuteUntil() int32 {
	if m != nil {
		return m.MuteUntil
	}
	return 0
}

func (m *UserDialog) GetSound() string {
	if m != nil {
		return m.Sound
	}
	return ""
}

func (m *UserDialog) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *UserDialog) GetDraft() []byte {
	if m != nil {
		return m.Draft
	}
	return nil
}

func (m *UserDialog) GetFolderId() int32 {
	if m != nil {
		return m.FolderId
	}
	return 0
}

func (m *UserDialog) GetReadinpts() int32 {
	if m != nil {
		return m.Readinpts
	}
	return 0
}

func (m *UserDialog) GetReadoutpts() int32 {
	if m != nil {
		return m.Readoutpts
	}
	return 0
}

func (m *UserDialog) GetLinkUser() []int32 {
	if m != nil {
		return m.LinkUser
	}
	return nil
}

func (m *UserDialog) GetInsertDate() int64 {
	if m != nil {
		return m.InsertDate
	}
	return 0
}

func (m *UserDialog) GetUpdateDate() int64 {
	if m != nil {
		return m.UpdateDate
	}
	return 0
}

func (m *UserDialog) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *UserDialog) GetRevoke() bool {
	if m != nil {
		return m.Revoke
	}
	return false
}

type ForWardUserMsg struct {
	Date        int32    `protobuf:"varint,1,opt,name=Date,proto3" json:"Date,omitempty"`
	Message     string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Media       int64    `protobuf:"varint,3,opt,name=Media,proto3" json:"Media,omitempty"`
	MediaData   []byte   `protobuf:"bytes,4,opt,name=MediaData,proto3" json:"MediaData,omitempty"`
	ReplyMarkup []byte   `protobuf:"bytes,5,opt,name=ReplyMarkup,proto3" json:"ReplyMarkup,omitempty"`
	Entities    [][]byte `protobuf:"bytes,6,rep,name=Entities" json:"Entities,omitempty"`
	FromId      int32    `protobuf:"varint,7,opt,name=FromId,proto3" json:"FromId,omitempty"`
	Encry       int32    `protobuf:"varint,8,opt,name=Encry,proto3" json:"Encry,omitempty"`
	FwdFrom     []byte   `protobuf:"bytes,9,opt,name=FwdFrom,proto3" json:"FwdFrom,omitempty"`
	GroupId     int64    `protobuf:"varint,10,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	ViaBotId    int32    `protobuf:"varint,11,opt,name=ViaBotId,proto3" json:"ViaBotId,omitempty"`
	MsgID       int32    `protobuf:"varint,12,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
}

func (m *ForWardUserMsg) Reset()                    { *m = ForWardUserMsg{} }
func (m *ForWardUserMsg) String() string            { return proto.CompactTextString(m) }
func (*ForWardUserMsg) ProtoMessage()               {}
func (*ForWardUserMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{224} }

func (m *ForWardUserMsg) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ForWardUserMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ForWardUserMsg) GetMedia() int64 {
	if m != nil {
		return m.Media
	}
	return 0
}

func (m *ForWardUserMsg) GetMediaData() []byte {
	if m != nil {
		return m.MediaData
	}
	return nil
}

func (m *ForWardUserMsg) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *ForWardUserMsg) GetEntities() [][]byte {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *ForWardUserMsg) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ForWardUserMsg) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *ForWardUserMsg) GetFwdFrom() []byte {
	if m != nil {
		return m.FwdFrom
	}
	return nil
}

func (m *ForWardUserMsg) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *ForWardUserMsg) GetViaBotId() int32 {
	if m != nil {
		return m.ViaBotId
	}
	return 0
}

func (m *ForWardUserMsg) GetMsgID() int32 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

type UserMsgId struct {
	Id     int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserId int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MsgId  int32 `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Pts    int32 `protobuf:"varint,4,opt,name=Pts,proto3" json:"Pts,omitempty"`
}

func (m *UserMsgId) Reset()                    { *m = UserMsgId{} }
func (m *UserMsgId) String() string            { return proto.CompactTextString(m) }
func (*UserMsgId) ProtoMessage()               {}
func (*UserMsgId) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{225} }

func (m *UserMsgId) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserMsgId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserMsgId) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *UserMsgId) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

type UserLocalId struct {
	UserId  int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	LocalId int64 `protobuf:"varint,2,opt,name=LocalId,proto3" json:"LocalId,omitempty"`
}

func (m *UserLocalId) Reset()                    { *m = UserLocalId{} }
func (m *UserLocalId) String() string            { return proto.CompactTextString(m) }
func (*UserLocalId) ProtoMessage()               {}
func (*UserLocalId) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{226} }

func (m *UserLocalId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserLocalId) GetLocalId() int64 {
	if m != nil {
		return m.LocalId
	}
	return 0
}

type ChannelLocalId struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	LocalId   int64 `protobuf:"varint,2,opt,name=LocalId,proto3" json:"LocalId,omitempty"`
}

func (m *ChannelLocalId) Reset()                    { *m = ChannelLocalId{} }
func (m *ChannelLocalId) String() string            { return proto.CompactTextString(m) }
func (*ChannelLocalId) ProtoMessage()               {}
func (*ChannelLocalId) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{227} }

func (m *ChannelLocalId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelLocalId) GetLocalId() int64 {
	if m != nil {
		return m.LocalId
	}
	return 0
}

type UserIdAndWithIdAndTypeAndEncry struct {
	UserId     int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId     int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithIdType int32 `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`
	Encry      int32 `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
}

func (m *UserIdAndWithIdAndTypeAndEncry) Reset()         { *m = UserIdAndWithIdAndTypeAndEncry{} }
func (m *UserIdAndWithIdAndTypeAndEncry) String() string { return proto.CompactTextString(m) }
func (*UserIdAndWithIdAndTypeAndEncry) ProtoMessage()    {}
func (*UserIdAndWithIdAndTypeAndEncry) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{228}
}

func (m *UserIdAndWithIdAndTypeAndEncry) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserIdAndWithIdAndTypeAndEncry) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *UserIdAndWithIdAndTypeAndEncry) GetWithIdType() int32 {
	if m != nil {
		return m.WithIdType
	}
	return 0
}

func (m *UserIdAndWithIdAndTypeAndEncry) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

type Status struct {
	Satus bool   `protobuf:"varint,1,opt,name=Satus,proto3" json:"Satus,omitempty"`
	Code  string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Msg   string `protobuf:"bytes,3,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{229} }

func (m *Status) GetSatus() bool {
	if m != nil {
		return m.Satus
	}
	return false
}

func (m *Status) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Status) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type UserIdAndWithId struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
}

func (m *UserIdAndWithId) Reset()                    { *m = UserIdAndWithId{} }
func (m *UserIdAndWithId) String() string            { return proto.CompactTextString(m) }
func (*UserIdAndWithId) ProtoMessage()               {}
func (*UserIdAndWithId) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{230} }

func (m *UserIdAndWithId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserIdAndWithId) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

type WithIdAndType struct {
	WithId     int32 `protobuf:"varint,1,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithIdType int32 `protobuf:"varint,2,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`
}

func (m *WithIdAndType) Reset()                    { *m = WithIdAndType{} }
func (m *WithIdAndType) String() string            { return proto.CompactTextString(m) }
func (*WithIdAndType) ProtoMessage()               {}
func (*WithIdAndType) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{231} }

func (m *WithIdAndType) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *WithIdAndType) GetWithIdType() int32 {
	if m != nil {
		return m.WithIdType
	}
	return 0
}

type UserIdAndWithIdAndType struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	Type   int32 `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (m *UserIdAndWithIdAndType) Reset()         { *m = UserIdAndWithIdAndType{} }
func (m *UserIdAndWithIdAndType) String() string { return proto.CompactTextString(m) }
func (*UserIdAndWithIdAndType) ProtoMessage()    {}
func (*UserIdAndWithIdAndType) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{232}
}

func (m *UserIdAndWithIdAndType) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserIdAndWithIdAndType) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *UserIdAndWithIdAndType) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type UserId struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *UserId) Reset()                    { *m = UserId{} }
func (m *UserId) String() string            { return proto.CompactTextString(m) }
func (*UserId) ProtoMessage()               {}
func (*UserId) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{233} }

func (m *UserId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type UserIdAndPts struct {
	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Pts    int32  `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`
	Limit  uint32 `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *UserIdAndPts) Reset()                    { *m = UserIdAndPts{} }
func (m *UserIdAndPts) String() string            { return proto.CompactTextString(m) }
func (*UserIdAndPts) ProtoMessage()               {}
func (*UserIdAndPts) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{234} }

func (m *UserIdAndPts) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserIdAndPts) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *UserIdAndPts) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type Bytes struct {
	Msg [][]byte `protobuf:"bytes,1,rep,name=Msg" json:"Msg,omitempty"`
}

func (m *Bytes) Reset()                    { *m = Bytes{} }
func (m *Bytes) String() string            { return proto.CompactTextString(m) }
func (*Bytes) ProtoMessage()               {}
func (*Bytes) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{235} }

func (m *Bytes) GetMsg() [][]byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type UserMsg struct {
	Id           int64        `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserId       int32        `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId       int32        `protobuf:"varint,3,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithIdType   int32        `protobuf:"varint,4,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`
	MessageType  int32        `protobuf:"varint,5,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	Flags        int32        `protobuf:"varint,6,opt,name=Flags,proto3" json:"Flags,omitempty"`
	Out          bool         `protobuf:"varint,7,opt,name=Out,proto3" json:"Out,omitempty"`
	Mentioned    bool         `protobuf:"varint,8,opt,name=Mentioned,proto3" json:"Mentioned,omitempty"`
	MediaUnread  bool         `protobuf:"varint,9,opt,name=MediaUnread,proto3" json:"MediaUnread,omitempty"`
	Silent       bool         `protobuf:"varint,10,opt,name=Silent,proto3" json:"Silent,omitempty"`
	Post         bool         `protobuf:"varint,11,opt,name=Post,proto3" json:"Post,omitempty"`
	GroupId      int64        `protobuf:"varint,12,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	MsgId        int32        `protobuf:"varint,13,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	ToId         int32        `protobuf:"varint,14,opt,name=ToId,proto3" json:"ToId,omitempty"`
	Pts          int32        `protobuf:"varint,15,opt,name=Pts,proto3" json:"Pts,omitempty"`
	FwdFrom      []byte       `protobuf:"bytes,16,opt,name=FwdFrom,proto3" json:"FwdFrom,omitempty"`
	ViaBotId     int32        `protobuf:"varint,17,opt,name=ViaBotId,proto3" json:"ViaBotId,omitempty"`
	ReplyToMsgId int32        `protobuf:"varint,18,opt,name=ReplyToMsgId,proto3" json:"ReplyToMsgId,omitempty"`
	Date         int32        `protobuf:"varint,19,opt,name=Date,proto3" json:"Date,omitempty"`
	Message      string       `protobuf:"bytes,20,opt,name=Message,proto3" json:"Message,omitempty"`
	Media        int64        `protobuf:"varint,21,opt,name=Media,proto3" json:"Media,omitempty"`
	MediaData    []byte       `protobuf:"bytes,22,opt,name=MediaData,proto3" json:"MediaData,omitempty"`
	ReplyMarkup  []byte       `protobuf:"bytes,23,opt,name=ReplyMarkup,proto3" json:"ReplyMarkup,omitempty"`
	Entities     [][]byte     `protobuf:"bytes,24,rep,name=Entities" json:"Entities,omitempty"`
	FromId       int32        `protobuf:"varint,25,opt,name=FromId,proto3" json:"FromId,omitempty"`
	Views        int32        `protobuf:"varint,26,opt,name=Views,proto3" json:"Views,omitempty"`
	EditDate     int32        `protobuf:"varint,27,opt,name=EditDate,proto3" json:"EditDate,omitempty"`
	Action       []byte       `protobuf:"bytes,28,opt,name=Action,proto3" json:"Action,omitempty"`
	RandomId     int64        `protobuf:"varint,29,opt,name=RandomId,proto3" json:"RandomId,omitempty"`
	Uuid         int64        `protobuf:"varint,30,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	InsertDate   int32        `protobuf:"varint,31,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
	UpdateDate   int32        `protobuf:"varint,32,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`
	Encry        int32        `protobuf:"varint,33,opt,name=Encry,proto3" json:"Encry,omitempty"`
	Combination  *Combination `protobuf:"bytes,34,opt,name=Combination" json:"Combination,omitempty" xorm:"json"`
}

func (m *UserMsg) Reset()                    { *m = UserMsg{} }
func (m *UserMsg) String() string            { return proto.CompactTextString(m) }
func (*UserMsg) ProtoMessage()               {}
func (*UserMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{236} }

func (m *UserMsg) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserMsg) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *UserMsg) GetWithIdType() int32 {
	if m != nil {
		return m.WithIdType
	}
	return 0
}

func (m *UserMsg) GetMessageType() int32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *UserMsg) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *UserMsg) GetOut() bool {
	if m != nil {
		return m.Out
	}
	return false
}

func (m *UserMsg) GetMentioned() bool {
	if m != nil {
		return m.Mentioned
	}
	return false
}

func (m *UserMsg) GetMediaUnread() bool {
	if m != nil {
		return m.MediaUnread
	}
	return false
}

func (m *UserMsg) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *UserMsg) GetPost() bool {
	if m != nil {
		return m.Post
	}
	return false
}

func (m *UserMsg) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UserMsg) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *UserMsg) GetToId() int32 {
	if m != nil {
		return m.ToId
	}
	return 0
}

func (m *UserMsg) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *UserMsg) GetFwdFrom() []byte {
	if m != nil {
		return m.FwdFrom
	}
	return nil
}

func (m *UserMsg) GetViaBotId() int32 {
	if m != nil {
		return m.ViaBotId
	}
	return 0
}

func (m *UserMsg) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *UserMsg) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UserMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UserMsg) GetMedia() int64 {
	if m != nil {
		return m.Media
	}
	return 0
}

func (m *UserMsg) GetMediaData() []byte {
	if m != nil {
		return m.MediaData
	}
	return nil
}

func (m *UserMsg) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *UserMsg) GetEntities() [][]byte {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *UserMsg) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *UserMsg) GetViews() int32 {
	if m != nil {
		return m.Views
	}
	return 0
}

func (m *UserMsg) GetEditDate() int32 {
	if m != nil {
		return m.EditDate
	}
	return 0
}

func (m *UserMsg) GetAction() []byte {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *UserMsg) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *UserMsg) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *UserMsg) GetInsertDate() int32 {
	if m != nil {
		return m.InsertDate
	}
	return 0
}

func (m *UserMsg) GetUpdateDate() int32 {
	if m != nil {
		return m.UpdateDate
	}
	return 0
}

func (m *UserMsg) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *UserMsg) GetCombination() *Combination {
	if m != nil {
		return m.Combination
	}
	return nil
}

type Combination struct {
	MentionedSlice []*MentionStatus `protobuf:"bytes,1,rep,name=MentionedSlice" json:"MentionedSlice,omitempty"`
	KeyId          []int64          `protobuf:"varint,2,rep,packed,name=KeyId" json:"KeyId,omitempty"`
}

func (m *Combination) Reset()                    { *m = Combination{} }
func (m *Combination) String() string            { return proto.CompactTextString(m) }
func (*Combination) ProtoMessage()               {}
func (*Combination) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{237} }

func (m *Combination) GetMentionedSlice() []*MentionStatus {
	if m != nil {
		return m.MentionedSlice
	}
	return nil
}

func (m *Combination) GetKeyId() []int64 {
	if m != nil {
		return m.KeyId
	}
	return nil
}

type MentionStatus struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Status int32 `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (m *MentionStatus) Reset()                    { *m = MentionStatus{} }
func (m *MentionStatus) String() string            { return proto.CompactTextString(m) }
func (*MentionStatus) ProtoMessage()               {}
func (*MentionStatus) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{238} }

func (m *MentionStatus) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MentionStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type UserIdAndMsgId struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MsgId  int32 `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
}

func (m *UserIdAndMsgId) Reset()                    { *m = UserIdAndMsgId{} }
func (m *UserIdAndMsgId) String() string            { return proto.CompactTextString(m) }
func (*UserIdAndMsgId) ProtoMessage()               {}
func (*UserIdAndMsgId) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{239} }

func (m *UserIdAndMsgId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserIdAndMsgId) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type UUID struct {
	Userid int32 `protobuf:"varint,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	UUID   int64 `protobuf:"varint,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (m *UUID) Reset()                    { *m = UUID{} }
func (m *UUID) String() string            { return proto.CompactTextString(m) }
func (*UUID) ProtoMessage()               {}
func (*UUID) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{240} }

func (m *UUID) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *UUID) GetUUID() int64 {
	if m != nil {
		return m.UUID
	}
	return 0
}

type MsgId struct {
	MsgId int32 `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
}

func (m *MsgId) Reset()                    { *m = MsgId{} }
func (m *MsgId) String() string            { return proto.CompactTextString(m) }
func (*MsgId) ProtoMessage()               {}
func (*MsgId) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{241} }

func (m *MsgId) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type UUIDS struct {
	Userid int32   `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	UUIDS  []int64 `protobuf:"varint,2,rep,packed,name=UUIDS" json:"UUIDS,omitempty"`
}

func (m *UUIDS) Reset()                    { *m = UUIDS{} }
func (m *UUIDS) String() string            { return proto.CompactTextString(m) }
func (*UUIDS) ProtoMessage()               {}
func (*UUIDS) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{242} }

func (m *UUIDS) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *UUIDS) GetUUIDS() []int64 {
	if m != nil {
		return m.UUIDS
	}
	return nil
}

type MsgIDList struct {
	MsgId     []int32 `protobuf:"varint,1,rep,packed,name=MsgId" json:"MsgId,omitempty"`
	Pts       []int32 `protobuf:"varint,2,rep,packed,name=Pts" json:"Pts,omitempty"`
	LastMsgId int32   `protobuf:"varint,3,opt,name=LastMsgId,proto3" json:"LastMsgId,omitempty"`
	Count     int32   `protobuf:"varint,4,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *MsgIDList) Reset()                    { *m = MsgIDList{} }
func (m *MsgIDList) String() string            { return proto.CompactTextString(m) }
func (*MsgIDList) ProtoMessage()               {}
func (*MsgIDList) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{243} }

func (m *MsgIDList) GetMsgId() []int32 {
	if m != nil {
		return m.MsgId
	}
	return nil
}

func (m *MsgIDList) GetPts() []int32 {
	if m != nil {
		return m.Pts
	}
	return nil
}

func (m *MsgIDList) GetLastMsgId() int32 {
	if m != nil {
		return m.LastMsgId
	}
	return 0
}

func (m *MsgIDList) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type UserIdAndWithIdAndMsgIds struct {
	UserId int32   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32   `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgIds []int32 `protobuf:"varint,3,rep,packed,name=MsgIds" json:"MsgIds,omitempty"`
}

func (m *UserIdAndWithIdAndMsgIds) Reset()         { *m = UserIdAndWithIdAndMsgIds{} }
func (m *UserIdAndWithIdAndMsgIds) String() string { return proto.CompactTextString(m) }
func (*UserIdAndWithIdAndMsgIds) ProtoMessage()    {}
func (*UserIdAndWithIdAndMsgIds) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{244}
}

func (m *UserIdAndWithIdAndMsgIds) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserIdAndWithIdAndMsgIds) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *UserIdAndWithIdAndMsgIds) GetMsgIds() []int32 {
	if m != nil {
		return m.MsgIds
	}
	return nil
}

type UserIdAndRandomId struct {
	UserId   int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	RandomId int64 `protobuf:"varint,2,opt,name=RandomId,proto3" json:"RandomId,omitempty"`
	Handle   int32 `protobuf:"varint,3,opt,name=Handle,proto3" json:"Handle,omitempty"`
}

func (m *UserIdAndRandomId) Reset()                    { *m = UserIdAndRandomId{} }
func (m *UserIdAndRandomId) String() string            { return proto.CompactTextString(m) }
func (*UserIdAndRandomId) ProtoMessage()               {}
func (*UserIdAndRandomId) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{245} }

func (m *UserIdAndRandomId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserIdAndRandomId) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *UserIdAndRandomId) GetHandle() int32 {
	if m != nil {
		return m.Handle
	}
	return 0
}

type ReplyGetRandomStatus struct {
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *ReplyGetRandomStatus) Reset()                    { *m = ReplyGetRandomStatus{} }
func (m *ReplyGetRandomStatus) String() string            { return proto.CompactTextString(m) }
func (*ReplyGetRandomStatus) ProtoMessage()               {}
func (*ReplyGetRandomStatus) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{246} }

func (m *ReplyGetRandomStatus) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

// 搜索媒体消息的filter请求参数
type SearchMediaMsgByFilterReqPara struct {
	UserId    int32   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId    int32   `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithType  int32   `protobuf:"varint,3,opt,name=WithType,proto3" json:"WithType,omitempty"`
	Keyword   string  `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`
	FromId    int32   `protobuf:"varint,5,opt,name=FromId,proto3" json:"FromId,omitempty"`
	MediaType []int32 `protobuf:"varint,6,rep,packed,name=MediaType" json:"MediaType,omitempty"`
	MinDate   int32   `protobuf:"varint,7,opt,name=MinDate,proto3" json:"MinDate,omitempty"`
	MaxDate   int32   `protobuf:"varint,8,opt,name=MaxDate,proto3" json:"MaxDate,omitempty"`
	OffsetId  int32   `protobuf:"varint,9,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`
	AddOffset int32   `protobuf:"varint,10,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`
	Limit     int32   `protobuf:"varint,11,opt,name=Limit,proto3" json:"Limit,omitempty"`
	MaxId     int32   `protobuf:"varint,12,opt,name=MaxId,proto3" json:"MaxId,omitempty"`
	MinId     int32   `protobuf:"varint,13,opt,name=MinId,proto3" json:"MinId,omitempty"`
	Hash      int32   `protobuf:"varint,14,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (m *SearchMediaMsgByFilterReqPara) Reset()         { *m = SearchMediaMsgByFilterReqPara{} }
func (m *SearchMediaMsgByFilterReqPara) String() string { return proto.CompactTextString(m) }
func (*SearchMediaMsgByFilterReqPara) ProtoMessage()    {}
func (*SearchMediaMsgByFilterReqPara) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{247}
}

func (m *SearchMediaMsgByFilterReqPara) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SearchMediaMsgByFilterReqPara) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *SearchMediaMsgByFilterReqPara) GetWithType() int32 {
	if m != nil {
		return m.WithType
	}
	return 0
}

func (m *SearchMediaMsgByFilterReqPara) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *SearchMediaMsgByFilterReqPara) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *SearchMediaMsgByFilterReqPara) GetMediaType() []int32 {
	if m != nil {
		return m.MediaType
	}
	return nil
}

func (m *SearchMediaMsgByFilterReqPara) GetMinDate() int32 {
	if m != nil {
		return m.MinDate
	}
	return 0
}

func (m *SearchMediaMsgByFilterReqPara) GetMaxDate() int32 {
	if m != nil {
		return m.MaxDate
	}
	return 0
}

func (m *SearchMediaMsgByFilterReqPara) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *SearchMediaMsgByFilterReqPara) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *SearchMediaMsgByFilterReqPara) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchMediaMsgByFilterReqPara) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *SearchMediaMsgByFilterReqPara) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *SearchMediaMsgByFilterReqPara) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

// 搜索媒体消息的filter响应数据
type SearchMediaMsgByFilterRespData struct {
	Messages []*UserMsg `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
	Count    int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Pts      int32      `protobuf:"varint,3,opt,name=pts,proto3" json:"pts,omitempty"`
}

func (m *SearchMediaMsgByFilterRespData) Reset()         { *m = SearchMediaMsgByFilterRespData{} }
func (m *SearchMediaMsgByFilterRespData) String() string { return proto.CompactTextString(m) }
func (*SearchMediaMsgByFilterRespData) ProtoMessage()    {}
func (*SearchMediaMsgByFilterRespData) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{248}
}

func (m *SearchMediaMsgByFilterRespData) GetMessages() []*UserMsg {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *SearchMediaMsgByFilterRespData) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SearchMediaMsgByFilterRespData) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

// 单聊对话框媒体搜索请求
type ReqSearchUserMediaMsgByFilter struct {
	Para  *SearchMediaMsgByFilterReqPara `protobuf:"bytes,1,opt,name=para" json:"para,omitempty"`
	Debug *pbcomm.Debug                  `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqSearchUserMediaMsgByFilter) Reset()         { *m = ReqSearchUserMediaMsgByFilter{} }
func (m *ReqSearchUserMediaMsgByFilter) String() string { return proto.CompactTextString(m) }
func (*ReqSearchUserMediaMsgByFilter) ProtoMessage()    {}
func (*ReqSearchUserMediaMsgByFilter) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{249}
}

func (m *ReqSearchUserMediaMsgByFilter) GetPara() *SearchMediaMsgByFilterReqPara {
	if m != nil {
		return m.Para
	}
	return nil
}

func (m *ReqSearchUserMediaMsgByFilter) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 单聊对话框媒体搜索响应
type RespSearchUserMediaMsgByFilter struct {
	Data     *SearchMediaMsgByFilterRespData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	ReplyErr *ReplyErr                       `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *RespSearchUserMediaMsgByFilter) Reset()         { *m = RespSearchUserMediaMsgByFilter{} }
func (m *RespSearchUserMediaMsgByFilter) String() string { return proto.CompactTextString(m) }
func (*RespSearchUserMediaMsgByFilter) ProtoMessage()    {}
func (*RespSearchUserMediaMsgByFilter) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{250}
}

func (m *RespSearchUserMediaMsgByFilter) GetData() *SearchMediaMsgByFilterRespData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RespSearchUserMediaMsgByFilter) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

// 群或频道对话框媒体搜索请求
type ReqSearchChannelMediaMsgByFilter struct {
	Para  *SearchMediaMsgByFilterReqPara `protobuf:"bytes,1,opt,name=para" json:"para,omitempty"`
	Debug *pbcomm.Debug                  `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqSearchChannelMediaMsgByFilter) Reset()         { *m = ReqSearchChannelMediaMsgByFilter{} }
func (m *ReqSearchChannelMediaMsgByFilter) String() string { return proto.CompactTextString(m) }
func (*ReqSearchChannelMediaMsgByFilter) ProtoMessage()    {}
func (*ReqSearchChannelMediaMsgByFilter) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{251}
}

func (m *ReqSearchChannelMediaMsgByFilter) GetPara() *SearchMediaMsgByFilterReqPara {
	if m != nil {
		return m.Para
	}
	return nil
}

func (m *ReqSearchChannelMediaMsgByFilter) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 群或频道对话框媒体搜索响应
type RespSearchChannelMediaMsgByFilter struct {
	Data     *SearchMediaMsgByFilterRespData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	ReplyErr *ReplyErr                       `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *RespSearchChannelMediaMsgByFilter) Reset()         { *m = RespSearchChannelMediaMsgByFilter{} }
func (m *RespSearchChannelMediaMsgByFilter) String() string { return proto.CompactTextString(m) }
func (*RespSearchChannelMediaMsgByFilter) ProtoMessage()    {}
func (*RespSearchChannelMediaMsgByFilter) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{252}
}

func (m *RespSearchChannelMediaMsgByFilter) GetData() *SearchMediaMsgByFilterRespData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RespSearchChannelMediaMsgByFilter) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

// Begin added by six xionger at 2020-05-15 for 取指定对话框消息未读数
// 查询对话框数据
type QueryDialogData struct {
	UserId      int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId      int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	UnreadCount int32 `protobuf:"varint,3,opt,name=UnreadCount,proto3" json:"UnreadCount,omitempty"`
}

func (m *QueryDialogData) Reset()                    { *m = QueryDialogData{} }
func (m *QueryDialogData) String() string            { return proto.CompactTextString(m) }
func (*QueryDialogData) ProtoMessage()               {}
func (*QueryDialogData) Descriptor() ([]byte, []int) { return fileDescriptorMessagedb, []int{253} }

func (m *QueryDialogData) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *QueryDialogData) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *QueryDialogData) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

// 单聊对话框消息未读数请求
type ReqGetDialogUnreadCountByUserIdAndWithId struct {
	DialogList []*QueryDialogData `protobuf:"bytes,1,rep,name=DialogList" json:"DialogList,omitempty"`
	Debug      *pbcomm.Debug      `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *ReqGetDialogUnreadCountByUserIdAndWithId) Reset() {
	*m = ReqGetDialogUnreadCountByUserIdAndWithId{}
}
func (m *ReqGetDialogUnreadCountByUserIdAndWithId) String() string { return proto.CompactTextString(m) }
func (*ReqGetDialogUnreadCountByUserIdAndWithId) ProtoMessage()    {}
func (*ReqGetDialogUnreadCountByUserIdAndWithId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{254}
}

func (m *ReqGetDialogUnreadCountByUserIdAndWithId) GetDialogList() []*QueryDialogData {
	if m != nil {
		return m.DialogList
	}
	return nil
}

func (m *ReqGetDialogUnreadCountByUserIdAndWithId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 单聊对话框消息未读数响应
type RespGetDialogUnreadCountByUserIdAndWithId struct {
	DialogList []*QueryDialogData `protobuf:"bytes,1,rep,name=DialogList" json:"DialogList,omitempty"`
	ReplyErr   *ReplyErr          `protobuf:"bytes,2,opt,name=ReplyErr" json:"ReplyErr,omitempty"`
}

func (m *RespGetDialogUnreadCountByUserIdAndWithId) Reset() {
	*m = RespGetDialogUnreadCountByUserIdAndWithId{}
}
func (m *RespGetDialogUnreadCountByUserIdAndWithId) String() string {
	return proto.CompactTextString(m)
}
func (*RespGetDialogUnreadCountByUserIdAndWithId) ProtoMessage() {}
func (*RespGetDialogUnreadCountByUserIdAndWithId) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{255}
}

func (m *RespGetDialogUnreadCountByUserIdAndWithId) GetDialogList() []*QueryDialogData {
	if m != nil {
		return m.DialogList
	}
	return nil
}

func (m *RespGetDialogUnreadCountByUserIdAndWithId) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqShDeleteUserHistory struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserId    int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MaxMsgId  int32 `protobuf:"varint,3,opt,name=MaxMsgId,proto3" json:"MaxMsgId,omitempty"`
}

func (m *ReqShDeleteUserHistory) Reset()         { *m = ReqShDeleteUserHistory{} }
func (m *ReqShDeleteUserHistory) String() string { return proto.CompactTextString(m) }
func (*ReqShDeleteUserHistory) ProtoMessage()    {}
func (*ReqShDeleteUserHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorMessagedb, []int{256}
}

func (m *ReqShDeleteUserHistory) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqShDeleteUserHistory) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqShDeleteUserHistory) GetMaxMsgId() int32 {
	if m != nil {
		return m.MaxMsgId
	}
	return 0
}

func init() {
	proto.RegisterType((*ReplyNull)(nil), "messagedb.ReplyNull")
	proto.RegisterType((*ReplyUpdateUserDialogUpdateDate)(nil), "messagedb.ReplyUpdateUserDialogUpdateDate")
	proto.RegisterType((*ReplyUpdateUserDialog)(nil), "messagedb.ReplyUpdateUserDialog")
	proto.RegisterType((*ChannelIdAndLimit)(nil), "messagedb.ChannelIdAndLimit")
	proto.RegisterType((*ChannelIdAndUserIdAndLimit)(nil), "messagedb.ChannelIdAndUserIdAndLimit")
	proto.RegisterType((*ChannelIdAndAdminUsersAndEventFiltersAndUserId)(nil), "messagedb.ChannelIdAndAdminUsersAndEventFiltersAndUserId")
	proto.RegisterType((*ChannelIdAndAdminUsers)(nil), "messagedb.ChannelIdAndAdminUsers")
	proto.RegisterType((*ChannelIdAndEventFilters)(nil), "messagedb.ChannelIdAndEventFilters")
	proto.RegisterType((*ChannelIdAndAdminUsersAndEventFilters)(nil), "messagedb.ChannelIdAndAdminUsersAndEventFilters")
	proto.RegisterType((*ChannelIdAndEventFiltersAndUserId)(nil), "messagedb.ChannelIdAndEventFiltersAndUserId")
	proto.RegisterType((*ChannelMsgId)(nil), "messagedb.ChannelMsgId")
	proto.RegisterType((*ChannelId)(nil), "messagedb.ChannelId")
	proto.RegisterType((*ChannelIds)(nil), "messagedb.ChannelIds")
	proto.RegisterType((*ChannelIdAndMsgId)(nil), "messagedb.ChannelIdAndMsgId")
	proto.RegisterType((*ChannelIdAndMsgIds)(nil), "messagedb.ChannelIdAndMsgIds")
	proto.RegisterType((*ChannelIdAndUserId)(nil), "messagedb.ChannelIdAndUserId")
	proto.RegisterType((*DialogIsCreated)(nil), "messagedb.DialogIsCreated")
	proto.RegisterType((*ChannelIdAndNum)(nil), "messagedb.ChannelIdAndNum")
	proto.RegisterType((*MsgsAndMaxId)(nil), "messagedb.MsgsAndMaxId")
	proto.RegisterType((*ChannelDialog)(nil), "messagedb.ChannelDialog")
	proto.RegisterType((*ChannelDialogAndMsg)(nil), "messagedb.ChannelDialogAndMsg")
	proto.RegisterType((*ChannelDialogAndMsgs)(nil), "messagedb.ChannelDialogAndMsgs")
	proto.RegisterType((*ReqForWardUserMsg)(nil), "messagedb.ReqForWardUserMsg")
	proto.RegisterType((*ReqUserMsgHis)(nil), "messagedb.ReqUserMsgHis")
	proto.RegisterType((*DialogTopMessage)(nil), "messagedb.DialogTopMessage")
	proto.RegisterType((*ForWardUserMsgList)(nil), "messagedb.ForWardUserMsgList")
	proto.RegisterType((*UserMsgList)(nil), "messagedb.UserMsgList")
	proto.RegisterType((*UserMsgListAndPts)(nil), "messagedb.UserMsgListAndPts")
	proto.RegisterType((*UserDialogList)(nil), "messagedb.UserDialogList")
	proto.RegisterType((*UserDialogAndMsgList)(nil), "messagedb.UserDialogAndMsgList")
	proto.RegisterType((*ReplyGetPingedDialogAndMsg)(nil), "messagedb.ReplyGetPingedDialogAndMsg")
	proto.RegisterType((*UserDialogAndMsg)(nil), "messagedb.UserDialogAndMsg")
	proto.RegisterType((*ReqInsertOrUpdateUserMsgId)(nil), "messagedb.ReqInsertOrUpdateUserMsgId")
	proto.RegisterType((*ReqIncreaseUserLocalId)(nil), "messagedb.ReqIncreaseUserLocalId")
	proto.RegisterType((*ReplyIncreaseUserLocalId)(nil), "messagedb.ReplyIncreaseUserLocalId")
	proto.RegisterType((*ReqGetCurrentUserLocalId)(nil), "messagedb.ReqGetCurrentUserLocalId")
	proto.RegisterType((*ReplyGetCurrentUserLocalId)(nil), "messagedb.ReplyGetCurrentUserLocalId")
	proto.RegisterType((*ReqIncreaseChannelLocalId)(nil), "messagedb.ReqIncreaseChannelLocalId")
	proto.RegisterType((*ReplyIncreaseChannelLocalId)(nil), "messagedb.ReplyIncreaseChannelLocalId")
	proto.RegisterType((*ReqGetCurrentChannelLocalId)(nil), "messagedb.ReqGetCurrentChannelLocalId")
	proto.RegisterType((*ReplyGetCurrentChannelLocalId)(nil), "messagedb.ReplyGetCurrentChannelLocalId")
	proto.RegisterType((*ReqIncreaseUserMsgId)(nil), "messagedb.ReqIncreaseUserMsgId")
	proto.RegisterType((*ReqSetUserMsgId)(nil), "messagedb.ReqSetUserMsgId")
	proto.RegisterType((*ReqSetMsgIdImported)(nil), "messagedb.ReqSetMsgIdImported")
	proto.RegisterType((*ReplySetMsgIdImported)(nil), "messagedb.ReplySetMsgIdImported")
	proto.RegisterType((*ReqCheckMsgIdImported)(nil), "messagedb.ReqCheckMsgIdImported")
	proto.RegisterType((*ReplyCheckMsgIdImported)(nil), "messagedb.ReplyCheckMsgIdImported")
	proto.RegisterType((*ReqGetUserMsgId)(nil), "messagedb.ReqGetUserMsgId")
	proto.RegisterType((*ReqUpdateUserPts)(nil), "messagedb.ReqUpdateUserPts")
	proto.RegisterType((*ReqBatchUpdatUserPts)(nil), "messagedb.ReqBatchUpdatUserPts")
	proto.RegisterType((*ReqStorePtsHandle)(nil), "messagedb.ReqStorePtsHandle")
	proto.RegisterType((*ReqGetDiffByPts)(nil), "messagedb.ReqGetDiffByPts")
	proto.RegisterType((*ReplyGetDiffByPts)(nil), "messagedb.ReplyGetDiffByPts")
	proto.RegisterType((*ReqGetActionDiff)(nil), "messagedb.ReqGetActionDiff")
	proto.RegisterType((*ReqDeletePtsHandle)(nil), "messagedb.ReqDeletePtsHandle")
	proto.RegisterType((*ReqClearPtsHandle)(nil), "messagedb.ReqClearPtsHandle")
	proto.RegisterType((*ReplyClearPtsHandle)(nil), "messagedb.ReplyClearPtsHandle")
	proto.RegisterType((*ReplyDeletePtsHandle)(nil), "messagedb.ReplyDeletePtsHandle")
	proto.RegisterType((*ReplyGetActionDiff)(nil), "messagedb.ReplyGetActionDiff")
	proto.RegisterType((*ReqStoreOtherInfoMsg)(nil), "messagedb.ReqStoreOtherInfoMsg")
	proto.RegisterType((*ReqBatchStoreOtherInfoMsg)(nil), "messagedb.ReqBatchStoreOtherInfoMsg")
	proto.RegisterType((*ReqGetOtherInfoMsg)(nil), "messagedb.ReqGetOtherInfoMsg")
	proto.RegisterType((*ReplyGetOtherInfoMsg)(nil), "messagedb.ReplyGetOtherInfoMsg")
	proto.RegisterType((*ReqInsertOrUpdateUserMsg)(nil), "messagedb.ReqInsertOrUpdateUserMsg")
	proto.RegisterType((*ReqGetForwardUserMsg)(nil), "messagedb.ReqGetForwardUserMsg")
	proto.RegisterType((*ReqGetUserMsgHistory)(nil), "messagedb.ReqGetUserMsgHistory")
	proto.RegisterType((*ReqGetUserMsgUUID)(nil), "messagedb.ReqGetUserMsgUUID")
	proto.RegisterType((*ReqGetUserMsgIdByUUID)(nil), "messagedb.ReqGetUserMsgIdByUUID")
	proto.RegisterType((*ReqGetUserMsgListByUUIDs)(nil), "messagedb.ReqGetUserMsgListByUUIDs")
	proto.RegisterType((*ReqDeleteUserMsg)(nil), "messagedb.ReqDeleteUserMsg")
	proto.RegisterType((*ReqBatchDeleteUserMsg)(nil), "messagedb.ReqBatchDeleteUserMsg")
	proto.RegisterType((*ReqGetOneUserMsgByUserIdAndMsgId)(nil), "messagedb.ReqGetOneUserMsgByUserIdAndMsgId")
	proto.RegisterType((*ReqDeleteUserMsgByUserIdAndWithIdAndEncry)(nil), "messagedb.ReqDeleteUserMsgByUserIdAndWithIdAndEncry")
	proto.RegisterType((*ReqClearHistory)(nil), "messagedb.ReqClearHistory")
	proto.RegisterType((*GetMessageHistoryPageByMediaConfig)(nil), "messagedb.GetMessageHistoryPageByMediaConfig")
	proto.RegisterType((*ReqGetMessageHistoryPageByMedia)(nil), "messagedb.ReqGetMessageHistoryPageByMedia")
	proto.RegisterType((*ReqInsertOrUpdateChannelMessageDeleteMark)(nil), "messagedb.ReqInsertOrUpdateChannelMessageDeleteMark")
	proto.RegisterType((*ReqGetChannelMessageDeleteMark)(nil), "messagedb.ReqGetChannelMessageDeleteMark")
	proto.RegisterType((*ReqUserDialogSetUnreadMetionsCount)(nil), "messagedb.ReqUserDialogSetUnreadMetionsCount")
	proto.RegisterType((*ReplyUserDialogSetUnreadMetionsCount)(nil), "messagedb.ReplyUserDialogSetUnreadMetionsCount")
	proto.RegisterType((*ReqUserDialogGetUnreadMetionsCount)(nil), "messagedb.ReqUserDialogGetUnreadMetionsCount")
	proto.RegisterType((*ReplyUserDialogGetUnreadMetionsCount)(nil), "messagedb.ReplyUserDialogGetUnreadMetionsCount")
	proto.RegisterType((*ReqUserDialogChangeUnreadMetionsCount)(nil), "messagedb.ReqUserDialogChangeUnreadMetionsCount")
	proto.RegisterType((*ReplyUserDialogChangeUnreadMetionsCount)(nil), "messagedb.ReplyUserDialogChangeUnreadMetionsCount")
	proto.RegisterType((*ReqGetUserMediaMessageStatisticsByMedia)(nil), "messagedb.ReqGetUserMediaMessageStatisticsByMedia")
	proto.RegisterType((*ReplyGetUserMediaMessageStatisticsByMedia)(nil), "messagedb.ReplyGetUserMediaMessageStatisticsByMedia")
	proto.RegisterType((*ReplyGetMessageHistoryPageByMedia)(nil), "messagedb.ReplyGetMessageHistoryPageByMedia")
	proto.RegisterType((*ReqInsertOrUpdateUserDialogAndMsg)(nil), "messagedb.ReqInsertOrUpdateUserDialogAndMsg")
	proto.RegisterType((*ReqUpdateSelfDialogAndMsg)(nil), "messagedb.ReqUpdateSelfDialogAndMsg")
	proto.RegisterType((*ReqUpdateDialogAddUnread)(nil), "messagedb.ReqUpdateDialogAddUnread")
	proto.RegisterType((*ReplyUpdateDialogAddUnread)(nil), "messagedb.ReplyUpdateDialogAddUnread")
	proto.RegisterType((*ReqUpdateDialogClearDraft)(nil), "messagedb.ReqUpdateDialogClearDraft")
	proto.RegisterType((*ReplyUpdateDialogClearDraft)(nil), "messagedb.ReplyUpdateDialogClearDraft")
	proto.RegisterType((*ReqGetUserDialogAllUnread)(nil), "messagedb.ReqGetUserDialogAllUnread")
	proto.RegisterType((*ReplyGetUserDialogAllUnread)(nil), "messagedb.ReplyGetUserDialogAllUnread")
	proto.RegisterType((*ReqUpdateReceDialogAndMsg)(nil), "messagedb.ReqUpdateReceDialogAndMsg")
	proto.RegisterType((*ReqGetDialogAndMsgByUserIdAndWithIdAndType)(nil), "messagedb.ReqGetDialogAndMsgByUserIdAndWithIdAndType")
	proto.RegisterType((*ReqGetDialogAndMsgsByUserId)(nil), "messagedb.ReqGetDialogAndMsgsByUserId")
	proto.RegisterType((*ReqGetDialogAndMsgsByPage)(nil), "messagedb.ReqGetDialogAndMsgsByPage")
	proto.RegisterType((*ReqReadSelfDialogAndMsg)(nil), "messagedb.ReqReadSelfDialogAndMsg")
	proto.RegisterType((*ReqUpdateReadinbox)(nil), "messagedb.ReqUpdateReadinbox")
	proto.RegisterType((*ReqUpdateReadoutbox)(nil), "messagedb.ReqUpdateReadoutbox")
	proto.RegisterType((*ReqDeleteUserDialog)(nil), "messagedb.ReqDeleteUserDialog")
	proto.RegisterType((*ReqUpdateUserDialog)(nil), "messagedb.ReqUpdateUserDialog")
	proto.RegisterType((*UpdateUserDialogParam)(nil), "messagedb.UpdateUserDialogParam")
	proto.RegisterType((*ReqUpdateUserDialogUpdateDate)(nil), "messagedb.ReqUpdateUserDialogUpdateDate")
	proto.RegisterType((*ReqUpdateDialogToPinged)(nil), "messagedb.ReqUpdateDialogToPinged")
	proto.RegisterType((*ReqUpdateDialogToFolder)(nil), "messagedb.ReqUpdateDialogToFolder")
	proto.RegisterType((*ReqCancelPingedDialog)(nil), "messagedb.ReqCancelPingedDialog")
	proto.RegisterType((*ReqGetPingedDialogAndMsg)(nil), "messagedb.ReqGetPingedDialogAndMsg")
	proto.RegisterType((*ReqGetLastLimitDialog)(nil), "messagedb.ReqGetLastLimitDialog")
	proto.RegisterType((*UserRating)(nil), "messagedb.UserRating")
	proto.RegisterType((*ReplyGetLastLimitDialog)(nil), "messagedb.ReplyGetLastLimitDialog")
	proto.RegisterType((*ReqUpdateReadInBoxMaxId)(nil), "messagedb.ReqUpdateReadInBoxMaxId")
	proto.RegisterType((*ReqUpdateReadOutBoxMaxId)(nil), "messagedb.ReqUpdateReadOutBoxMaxId")
	proto.RegisterType((*ReqUpdateChannelReadinbox)(nil), "messagedb.ReqUpdateChannelReadinbox")
	proto.RegisterType((*ReqUpdateChannelReadoutbox)(nil), "messagedb.ReqUpdateChannelReadoutbox")
	proto.RegisterType((*ReqDeleteUserDialogByChannelId)(nil), "messagedb.ReqDeleteUserDialogByChannelId")
	proto.RegisterType((*ReqGetUserChannelDialogByUserId)(nil), "messagedb.ReqGetUserChannelDialogByUserId")
	proto.RegisterType((*ReqStoreUserDialogErlang)(nil), "messagedb.ReqStoreUserDialogErlang")
	proto.RegisterType((*ReqGetUserDialogErlangByUserIdWithIdWithType)(nil), "messagedb.ReqGetUserDialogErlangByUserIdWithIdWithType")
	proto.RegisterType((*ReplyGetUserDialogErlangByUserIdWithIdWithType)(nil), "messagedb.ReplyGetUserDialogErlangByUserIdWithIdWithType")
	proto.RegisterType((*ReqInsertRandomStatus)(nil), "messagedb.ReqInsertRandomStatus")
	proto.RegisterType((*ReqGetRandomStatus)(nil), "messagedb.ReqGetRandomStatus")
	proto.RegisterType((*ReqSetSuperGroupMsg)(nil), "messagedb.ReqSetSuperGroupMsg")
	proto.RegisterType((*ReplySetSuperGroupMsg)(nil), "messagedb.ReplySetSuperGroupMsg")
	proto.RegisterType((*ReqGetSuperGroupMsg)(nil), "messagedb.ReqGetSuperGroupMsg")
	proto.RegisterType((*ReplyGetSuperGroupMsg)(nil), "messagedb.ReplyGetSuperGroupMsg")
	proto.RegisterType((*ReqInsertMsgIdSerialCodeMap)(nil), "messagedb.ReqInsertMsgIdSerialCodeMap")
	proto.RegisterType((*ReplyInsertMsgIdSerialCodeMap)(nil), "messagedb.ReplyInsertMsgIdSerialCodeMap")
	proto.RegisterType((*ReqGetMsgIdSerialCodeMap)(nil), "messagedb.ReqGetMsgIdSerialCodeMap")
	proto.RegisterType((*ReplyGetMsgIdSerialCodeMap)(nil), "messagedb.ReplyGetMsgIdSerialCodeMap")
	proto.RegisterType((*MsgIdSerialCodeMapRecord)(nil), "messagedb.MsgIdSerialCodeMapRecord")
	proto.RegisterType((*ReqUpdateChannelMsgId)(nil), "messagedb.ReqUpdateChannelMsgId")
	proto.RegisterType((*ReplyUpdateChannelMsgId)(nil), "messagedb.ReplyUpdateChannelMsgId")
	proto.RegisterType((*ReqUpdateChannelMsgIdAndPts)(nil), "messagedb.ReqUpdateChannelMsgIdAndPts")
	proto.RegisterType((*ReplyUpdateChannelMsgIdAndPts)(nil), "messagedb.ReplyUpdateChannelMsgIdAndPts")
	proto.RegisterType((*ReqSetChannelMsgIdAndPts)(nil), "messagedb.ReqSetChannelMsgIdAndPts")
	proto.RegisterType((*ReplySetChannelMsgIdAndPts)(nil), "messagedb.ReplySetChannelMsgIdAndPts")
	proto.RegisterType((*ReqUpdateChannelPts)(nil), "messagedb.ReqUpdateChannelPts")
	proto.RegisterType((*ReplyUpdateChannelPts)(nil), "messagedb.ReplyUpdateChannelPts")
	proto.RegisterType((*ReqUpdateChannelPtsWithNum)(nil), "messagedb.ReqUpdateChannelPtsWithNum")
	proto.RegisterType((*ReplyUpdateChannelPtsWithNum)(nil), "messagedb.ReplyUpdateChannelPtsWithNum")
	proto.RegisterType((*ReqGetChannelMsgId)(nil), "messagedb.ReqGetChannelMsgId")
	proto.RegisterType((*ReplyGetChannelMsgId)(nil), "messagedb.ReplyGetChannelMsgId")
	proto.RegisterType((*ReqStoreChannelPtsHandle)(nil), "messagedb.ReqStoreChannelPtsHandle")
	proto.RegisterType((*ReqBatchStoreChannelPtsHandle)(nil), "messagedb.ReqBatchStoreChannelPtsHandle")
	proto.RegisterType((*ReplyErr)(nil), "messagedb.ReplyErr")
	proto.RegisterType((*ReqGetChannelDiffByPts)(nil), "messagedb.ReqGetChannelDiffByPts")
	proto.RegisterType((*ReplyGetChannelDiffByPts)(nil), "messagedb.ReplyGetChannelDiffByPts")
	proto.RegisterType((*ReqGetUserDiff)(nil), "messagedb.ReqGetUserDiff")
	proto.RegisterType((*ChannelPtsDiff)(nil), "messagedb.ChannelPtsDiff")
	proto.RegisterType((*ReplyGetUserDiff)(nil), "messagedb.ReplyGetUserDiff")
	proto.RegisterType((*ReqGetChannelLastPtsHandle)(nil), "messagedb.ReqGetChannelLastPtsHandle")
	proto.RegisterType((*ReplyGetChannelLastPtsHandle)(nil), "messagedb.ReplyGetChannelLastPtsHandle")
	proto.RegisterType((*ReqDeleteChannelPtsHandle)(nil), "messagedb.ReqDeleteChannelPtsHandle")
	proto.RegisterType((*ReplyDeleteChannelPtsHandle)(nil), "messagedb.ReplyDeleteChannelPtsHandle")
	proto.RegisterType((*ReqInsertOrUpdateChannelMsg)(nil), "messagedb.ReqInsertOrUpdateChannelMsg")
	proto.RegisterType((*ReqUpdateChannelMsg)(nil), "messagedb.ReqUpdateChannelMsg")
	proto.RegisterType((*ReqBatchInsertOrUpdateChannelMsg)(nil), "messagedb.ReqBatchInsertOrUpdateChannelMsg")
	proto.RegisterType((*ReqDeleteMsgs)(nil), "messagedb.ReqDeleteMsgs")
	proto.RegisterType((*ReplyDeleteMsgs)(nil), "messagedb.ReplyDeleteMsgs")
	proto.RegisterType((*ReqDeleteUserHistory)(nil), "messagedb.ReqDeleteUserHistory")
	proto.RegisterType((*ReplyDeleteUserHistory)(nil), "messagedb.ReplyDeleteUserHistory")
	proto.RegisterType((*ReqDeleteChannelMsg)(nil), "messagedb.ReqDeleteChannelMsg")
	proto.RegisterType((*ReqDeleteChannelMessage)(nil), "messagedb.ReqDeleteChannelMessage")
	proto.RegisterType((*ReplyDeleteChannelMessage)(nil), "messagedb.ReplyDeleteChannelMessage")
	proto.RegisterType((*ReqGetChannelMessage)(nil), "messagedb.ReqGetChannelMessage")
	proto.RegisterType((*ReplyGetChannelMessage)(nil), "messagedb.ReplyGetChannelMessage")
	proto.RegisterType((*ReqGetChannelMsgsByMsgIds)(nil), "messagedb.ReqGetChannelMsgsByMsgIds")
	proto.RegisterType((*ReplyGetChannelMsgsByMsgIds)(nil), "messagedb.ReplyGetChannelMsgsByMsgIds")
	proto.RegisterType((*ReqGetChannelMsgHistory)(nil), "messagedb.ReqGetChannelMsgHistory")
	proto.RegisterType((*ReplyGetChannelMsgHistory)(nil), "messagedb.ReplyGetChannelMsgHistory")
	proto.RegisterType((*ReqGetChannelTopMst)(nil), "messagedb.ReqGetChannelTopMst")
	proto.RegisterType((*GetChannelMediaMessageHistoryByMediaConfig)(nil), "messagedb.GetChannelMediaMessageHistoryByMediaConfig")
	proto.RegisterType((*ReqGetChannelMediaMessageHistoryByMedia)(nil), "messagedb.ReqGetChannelMediaMessageHistoryByMedia")
	proto.RegisterType((*ReplyGetChannelMediaMessageHistoryByMedia)(nil), "messagedb.ReplyGetChannelMediaMessageHistoryByMedia")
	proto.RegisterType((*ReplyInsertOrUpdateChannelMessageDeleteMark)(nil), "messagedb.ReplyInsertOrUpdateChannelMessageDeleteMark")
	proto.RegisterType((*ReplyGetChannelMessageDeleteMark)(nil), "messagedb.ReplyGetChannelMessageDeleteMark")
	proto.RegisterType((*ReqGetChannelMediaMessageStatisticsByMedia)(nil), "messagedb.ReqGetChannelMediaMessageStatisticsByMedia")
	proto.RegisterType((*ReplyGetChannelMediaMessageStatisticsByMedia)(nil), "messagedb.ReplyGetChannelMediaMessageStatisticsByMedia")
	proto.RegisterType((*ReplyGetChannelTopMst)(nil), "messagedb.ReplyGetChannelTopMst")
	proto.RegisterType((*ReqInsertOrUpdateChannelDialogAndMsg)(nil), "messagedb.ReqInsertOrUpdateChannelDialogAndMsg")
	proto.RegisterType((*ReqGetDialogMaxReadInMsgId)(nil), "messagedb.ReqGetDialogMaxReadInMsgId")
	proto.RegisterType((*ReplyGetDialogMaxReadInMsgId)(nil), "messagedb.ReplyGetDialogMaxReadInMsgId")
	proto.RegisterType((*ReqSetDialogMaxReadInMsgId)(nil), "messagedb.ReqSetDialogMaxReadInMsgId")
	proto.RegisterType((*ReqGetDialogAndMsg)(nil), "messagedb.ReqGetDialogAndMsg")
	proto.RegisterType((*ReplyGetDialogAndMsg)(nil), "messagedb.ReplyGetDialogAndMsg")
	proto.RegisterType((*ReqGetDialogAndMsgs)(nil), "messagedb.ReqGetDialogAndMsgs")
	proto.RegisterType((*ReplyGetDialogAndMsgs)(nil), "messagedb.ReplyGetDialogAndMsgs")
	proto.RegisterType((*ReqStoreAdminLog)(nil), "messagedb.ReqStoreAdminLog")
	proto.RegisterType((*ReqFindsAdminLogByChannelId)(nil), "messagedb.ReqFindsAdminLogByChannelId")
	proto.RegisterType((*ReplyFindsAdminLog)(nil), "messagedb.ReplyFindsAdminLog")
	proto.RegisterType((*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId)(nil), "messagedb.ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId")
	proto.RegisterType((*ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId)(nil), "messagedb.ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId")
	proto.RegisterType((*ReqFindsAdminLogByChannelIdAndUserId)(nil), "messagedb.ReqFindsAdminLogByChannelIdAndUserId")
	proto.RegisterType((*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters)(nil), "messagedb.ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters")
	proto.RegisterType((*ReqFindsAdminLogByChannelIdAndEventFilters)(nil), "messagedb.ReqFindsAdminLogByChannelIdAndEventFilters")
	proto.RegisterType((*ReqFindsAdminLogByChannelIdAndAdminUsers)(nil), "messagedb.ReqFindsAdminLogByChannelIdAndAdminUsers")
	proto.RegisterType((*ReqChannelMessageAtAdd)(nil), "messagedb.ReqChannelMessageAtAdd")
	proto.RegisterType((*ReplyChannelMessageAtAdd)(nil), "messagedb.ReplyChannelMessageAtAdd")
	proto.RegisterType((*ReqChannelMessageAtGet)(nil), "messagedb.ReqChannelMessageAtGet")
	proto.RegisterType((*ReplyChannelMessageAtGet)(nil), "messagedb.ReplyChannelMessageAtGet")
	proto.RegisterType((*ReqChannelMessageAtDel)(nil), "messagedb.ReqChannelMessageAtDel")
	proto.RegisterType((*ReplyChannelMessageAtDel)(nil), "messagedb.ReplyChannelMessageAtDel")
	proto.RegisterType((*ReqUserMessageAtAdd)(nil), "messagedb.ReqUserMessageAtAdd")
	proto.RegisterType((*ReplyUserMessageAtAdd)(nil), "messagedb.ReplyUserMessageAtAdd")
	proto.RegisterType((*ReqUserMessageAtGet)(nil), "messagedb.ReqUserMessageAtGet")
	proto.RegisterType((*ReplyUserMessageAtGet)(nil), "messagedb.ReplyUserMessageAtGet")
	proto.RegisterType((*ReqUserMessageAtDel)(nil), "messagedb.ReqUserMessageAtDel")
	proto.RegisterType((*ReplyUserMessageAtDel)(nil), "messagedb.ReplyUserMessageAtDel")
	proto.RegisterType((*ChannelMessageAt)(nil), "messagedb.ChannelMessageAt")
	proto.RegisterType((*UserMessageAt)(nil), "messagedb.UserMessageAt")
	proto.RegisterType((*ChannelMessageDeleteMark)(nil), "messagedb.ChannelMessageDeleteMark")
	proto.RegisterType((*MsgIdImported)(nil), "messagedb.MsgIdImported")
	proto.RegisterType((*UserMediaMessageStatistics)(nil), "messagedb.UserMediaMessageStatistics")
	proto.RegisterType((*ChannelMediaMessageStatistics)(nil), "messagedb.ChannelMediaMessageStatistics")
	proto.RegisterType((*UserDialogErlang)(nil), "messagedb.UserDialogErlang")
	proto.RegisterType((*PtsHandle)(nil), "messagedb.PtsHandle")
	proto.RegisterType((*OtherInfoMsg)(nil), "messagedb.OtherInfoMsg")
	proto.RegisterType((*ChannelPtsHandle)(nil), "messagedb.ChannelPtsHandle")
	proto.RegisterType((*ChannelAdminLog)(nil), "messagedb.ChannelAdminLog")
	proto.RegisterType((*UserPingedDialog)(nil), "messagedb.UserPingedDialog")
	proto.RegisterType((*UserDialog)(nil), "messagedb.UserDialog")
	proto.RegisterType((*ForWardUserMsg)(nil), "messagedb.ForWardUserMsg")
	proto.RegisterType((*UserMsgId)(nil), "messagedb.UserMsgId")
	proto.RegisterType((*UserLocalId)(nil), "messagedb.UserLocalId")
	proto.RegisterType((*ChannelLocalId)(nil), "messagedb.ChannelLocalId")
	proto.RegisterType((*UserIdAndWithIdAndTypeAndEncry)(nil), "messagedb.UserIdAndWithIdAndTypeAndEncry")
	proto.RegisterType((*Status)(nil), "messagedb.Status")
	proto.RegisterType((*UserIdAndWithId)(nil), "messagedb.UserIdAndWithId")
	proto.RegisterType((*WithIdAndType)(nil), "messagedb.WithIdAndType")
	proto.RegisterType((*UserIdAndWithIdAndType)(nil), "messagedb.UserIdAndWithIdAndType")
	proto.RegisterType((*UserId)(nil), "messagedb.UserId")
	proto.RegisterType((*UserIdAndPts)(nil), "messagedb.UserIdAndPts")
	proto.RegisterType((*Bytes)(nil), "messagedb.Bytes")
	proto.RegisterType((*UserMsg)(nil), "messagedb.UserMsg")
	proto.RegisterType((*Combination)(nil), "messagedb.Combination")
	proto.RegisterType((*MentionStatus)(nil), "messagedb.MentionStatus")
	proto.RegisterType((*UserIdAndMsgId)(nil), "messagedb.UserIdAndMsgId")
	proto.RegisterType((*UUID)(nil), "messagedb.UUID")
	proto.RegisterType((*MsgId)(nil), "messagedb.MsgId")
	proto.RegisterType((*UUIDS)(nil), "messagedb.UUIDS")
	proto.RegisterType((*MsgIDList)(nil), "messagedb.MsgIDList")
	proto.RegisterType((*UserIdAndWithIdAndMsgIds)(nil), "messagedb.UserIdAndWithIdAndMsgIds")
	proto.RegisterType((*UserIdAndRandomId)(nil), "messagedb.UserIdAndRandomId")
	proto.RegisterType((*ReplyGetRandomStatus)(nil), "messagedb.ReplyGetRandomStatus")
	proto.RegisterType((*SearchMediaMsgByFilterReqPara)(nil), "messagedb.SearchMediaMsgByFilterReqPara")
	proto.RegisterType((*SearchMediaMsgByFilterRespData)(nil), "messagedb.SearchMediaMsgByFilterRespData")
	proto.RegisterType((*ReqSearchUserMediaMsgByFilter)(nil), "messagedb.ReqSearchUserMediaMsgByFilter")
	proto.RegisterType((*RespSearchUserMediaMsgByFilter)(nil), "messagedb.RespSearchUserMediaMsgByFilter")
	proto.RegisterType((*ReqSearchChannelMediaMsgByFilter)(nil), "messagedb.ReqSearchChannelMediaMsgByFilter")
	proto.RegisterType((*RespSearchChannelMediaMsgByFilter)(nil), "messagedb.RespSearchChannelMediaMsgByFilter")
	proto.RegisterType((*QueryDialogData)(nil), "messagedb.QueryDialogData")
	proto.RegisterType((*ReqGetDialogUnreadCountByUserIdAndWithId)(nil), "messagedb.ReqGetDialogUnreadCountByUserIdAndWithId")
	proto.RegisterType((*RespGetDialogUnreadCountByUserIdAndWithId)(nil), "messagedb.RespGetDialogUnreadCountByUserIdAndWithId")
	proto.RegisterType((*ReqShDeleteUserHistory)(nil), "messagedb.ReqShDeleteUserHistory")
	proto.RegisterEnum("messagedb.USER_MSG", USER_MSG_name, USER_MSG_value)
	proto.RegisterEnum("messagedb.ReplyUpdateDialogAddUnreadInt", ReplyUpdateDialogAddUnreadInt_name, ReplyUpdateDialogAddUnreadInt_value)
	proto.RegisterEnum("messagedb.PtsHandleInt", PtsHandleInt_name, PtsHandleInt_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MessageDb service

type MessageDbClient interface {
	// =========================================== UserMsg =========================================================
	// 插入单条 usermsg 内容
	InsertOrUpdateUserMsg(ctx context.Context, in *ReqInsertOrUpdateUserMsg, opts ...grpc.CallOption) (*DialogIsCreated, error)
	// 查询转发消息
	GetForwardUserMsg(ctx context.Context, in *ReqGetForwardUserMsg, opts ...grpc.CallOption) (*ForWardUserMsgList, error)
	// 查询历史消息
	GetUserMsgHistory(ctx context.Context, in *ReqGetUserMsgHistory, opts ...grpc.CallOption) (*UserMsgList, error)
	// 查询用户消息UUID
	GetUserMsgUUID(ctx context.Context, in *ReqGetUserMsgUUID, opts ...grpc.CallOption) (*UUID, error)
	// 查询用户消息 通过 UUID
	GetUserMsgIdByUUID(ctx context.Context, in *ReqGetUserMsgIdByUUID, opts ...grpc.CallOption) (*MsgId, error)
	// 获取 消息UUID数组
	GetUserMsgListByUUIDs(ctx context.Context, in *ReqGetUserMsgListByUUIDs, opts ...grpc.CallOption) (*UserMsgList, error)
	// 删除用户信息
	DeleteUserMsg(ctx context.Context, in *ReqDeleteUserMsg, opts ...grpc.CallOption) (*ReplyNull, error)
	// 批量删除用户信息
	BatchDeleteUserMsg(ctx context.Context, in *ReqBatchDeleteUserMsg, opts ...grpc.CallOption) (*ReplyNull, error)
	// 查询一条用户信息通过ID
	GetOneUserMsgByUserIdAndMsgId(ctx context.Context, in *ReqGetOneUserMsgByUserIdAndMsgId, opts ...grpc.CallOption) (*UserMsg, error)
	// 删除信息
	DeleteUserMsgByUserIdAndWithIdAndEncry(ctx context.Context, in *ReqDeleteUserMsgByUserIdAndWithIdAndEncry, opts ...grpc.CallOption) (*ReplyNull, error)
	// 清除历史  用于清楚历史每次从最底部删除消息 每次删除100条 如果仍然有消息将最新的消息id返回 如没有消息将0返回 count=本次删除的消息条数
	ClearHistory(ctx context.Context, in *ReqClearHistory, opts ...grpc.CallOption) (*MsgIDList, error)
	// 查询打电话消息历史记录
	GetMessageHistoryPageByMedia(ctx context.Context, in *ReqGetMessageHistoryPageByMedia, opts ...grpc.CallOption) (*ReplyGetMessageHistoryPageByMedia, error)
	// =========================================== UserMediaMessageStatistics =========================================================
	// 根据userId、withId、withType、media获取UserMediaMessageStatistics
	GetUserMediaMessageStatisticsByMedia(ctx context.Context, in *ReqGetUserMediaMessageStatisticsByMedia, opts ...grpc.CallOption) (*ReplyGetUserMediaMessageStatisticsByMedia, error)
	// Begin added by six xionger at 2020-03-03 for messages.search
	SearchUserMediaMsgStatisticsByFilter(ctx context.Context, in *ReqSearchUserMediaMsgByFilter, opts ...grpc.CallOption) (*RespSearchUserMediaMsgByFilter, error)
	// =========================================== UserDialogAndMsg =========================================================
	// 插入或者更新 UserDialog
	InsertOrUpdateUserDialogAndMsg(ctx context.Context, in *ReqInsertOrUpdateUserDialogAndMsg, opts ...grpc.CallOption) (*ReplyNull, error)
	// 更新自己的dialog
	UpdateSelfDialogAndMsg(ctx context.Context, in *ReqUpdateSelfDialogAndMsg, opts ...grpc.CallOption) (*ReplyNull, error)
	// 自增dialog的unread +1 如果dialog不存在 则返回
	UpdateDialogAddUnread(ctx context.Context, in *ReqUpdateDialogAddUnread, opts ...grpc.CallOption) (*ReplyUpdateDialogAddUnread, error)
	// 更新对话框 清除草稿
	UpdateDialogClearDraft(ctx context.Context, in *ReqUpdateDialogClearDraft, opts ...grpc.CallOption) (*ReplyUpdateDialogClearDraft, error)
	// 获取用户总未读数
	GetUserDialogAllUnread(ctx context.Context, in *ReqGetUserDialogAllUnread, opts ...grpc.CallOption) (*ReplyGetUserDialogAllUnread, error)
	// 获取单条 dialog 记录
	GetDialogAndMsgByUserIdAndWithIdAndType(ctx context.Context, in *ReqGetDialogAndMsgByUserIdAndWithIdAndType, opts ...grpc.CallOption) (*UserDialogAndMsg, error)
	// 获取 UserDialogList
	GetDialogAndMsgsByUserId(ctx context.Context, in *ReqGetDialogAndMsgsByUserId, opts ...grpc.CallOption) (*UserDialogAndMsgList, error)
	// 分页获取
	GetDialogAndMsgsByPage(ctx context.Context, in *ReqGetDialogAndMsgsByPage, opts ...grpc.CallOption) (*UserDialogAndMsgList, error)
	// 消息接收方更新dialog 更新dialog readin = readout = topMsgID unread = 0
	ReadSelfDialogAndMsg(ctx context.Context, in *ReqReadSelfDialogAndMsg, opts ...grpc.CallOption) (*DialogTopMessage, error)
	// 更新自己对话框的readin = topMsgId 和 unread = 0
	UpdateReadinbox(ctx context.Context, in *ReqUpdateReadinbox, opts ...grpc.CallOption) (*DialogTopMessage, error)
	// 更新别人的Readoutbox readOut = topMsgID && unread = 0
	UpdateReadoutbox(ctx context.Context, in *ReqUpdateReadoutbox, opts ...grpc.CallOption) (*DialogTopMessage, error)
	// 删除对话框消息，对应的 对话框盒子 tidb中的数据都删除
	DeleteUserDialog(ctx context.Context, in *ReqDeleteUserDialog, opts ...grpc.CallOption) (*ReplyNull, error)
	UpdateUserDialog(ctx context.Context, in *ReqUpdateUserDialog, opts ...grpc.CallOption) (*ReplyUpdateUserDialog, error)
	// Begin added by six xionger at 2020-05-15 for 取单聊对话框消息未读数
	GetDialogUnreadCountByUserIdAndWithId(ctx context.Context, in *ReqGetDialogUnreadCountByUserIdAndWithId, opts ...grpc.CallOption) (*RespGetDialogUnreadCountByUserIdAndWithId, error)
	// -------------------------------- pinged dialog 置顶对话框 ----------------------------------
	// 更新对话框为置顶对话框
	UpdateDialogToPinged(ctx context.Context, in *ReqUpdateDialogToPinged, opts ...grpc.CallOption) (*ReplyNull, error)
	// 取消置顶
	CancelPingedDialog(ctx context.Context, in *ReqCancelPingedDialog, opts ...grpc.CallOption) (*ReplyNull, error)
	// 获取置顶对话框
	GetPingedDialogAndMsg(ctx context.Context, in *ReqGetPingedDialogAndMsg, opts ...grpc.CallOption) (*ReplyGetPingedDialogAndMsg, error)
	// 获取最近操作的对话框 limit 个
	GetLastLimitDialog(ctx context.Context, in *ReqGetLastLimitDialog, opts ...grpc.CallOption) (*ReplyGetLastLimitDialog, error)
	// -------------------------------- channel 使用 ----------------------------------
	// channel 使用 readInBox_maxId 自增1
	UpdateReadInBoxMaxId(ctx context.Context, in *ReqUpdateReadInBoxMaxId, opts ...grpc.CallOption) (*ReplyNull, error)
	// channel 使用 readOutBox_maxId 自增1
	UpdateReadOutBoxMaxId(ctx context.Context, in *ReqUpdateReadOutBoxMaxId, opts ...grpc.CallOption) (*ReplyNull, error)
	// 更新自己对话框的readin 和 unread
	UpdateChannelReadinbox(ctx context.Context, in *ReqUpdateChannelReadinbox, opts ...grpc.CallOption) (*ReplyNull, error)
	// 更新别人的Readoutbox
	UpdateChannelReadoutbox(ctx context.Context, in *ReqUpdateChannelReadoutbox, opts ...grpc.CallOption) (*ReplyNull, error)
	// 删除超级群的所有对话框
	DeleteUserDialogByChannelId(ctx context.Context, in *ReqDeleteUserDialogByChannelId, opts ...grpc.CallOption) (*ReplyNull, error)
	// 获取某用户的所有超级群对话框
	GetUserChannelDialogByUserId(ctx context.Context, in *ReqGetUserChannelDialogByUserId, opts ...grpc.CallOption) (*UserDialogList, error)
	// =========================================== msg_random(发消息去重) =========================================================
	// 获取random 状态 如果有则返回true 没有就插入缓存 并且 返回false
	GetRandomStatus(ctx context.Context, in *ReqGetRandomStatus, opts ...grpc.CallOption) (*ReplyGetRandomStatus, error)
	// 设置超级群消息
	SetSuperGroupMsg(ctx context.Context, in *ReqSetSuperGroupMsg, opts ...grpc.CallOption) (*ReplySetSuperGroupMsg, error)
	// 获取超级群消息
	GetSuperGroupMsg(ctx context.Context, in *ReqGetSuperGroupMsg, opts ...grpc.CallOption) (*ReplyGetSuperGroupMsg, error)
	// 设置messagedb.user_dialog.unread_metions_count
	UserDialogSetUnreadMetionsCount(ctx context.Context, in *ReqUserDialogSetUnreadMetionsCount, opts ...grpc.CallOption) (*ReplyUserDialogSetUnreadMetionsCount, error)
	// 获取messagedb.user_dialog.unread_metions_count
	UserDialogGetUnreadMetionsCount(ctx context.Context, in *ReqUserDialogGetUnreadMetionsCount, opts ...grpc.CallOption) (*ReplyUserDialogGetUnreadMetionsCount, error)
	// 改变messagedb.user_dialog.unread_metions_count
	UserDialogChangeUnreadMetionsCount(ctx context.Context, in *ReqUserDialogChangeUnreadMetionsCount, opts ...grpc.CallOption) (*ReplyUserDialogChangeUnreadMetionsCount, error)
	// add for messagedb.user_message_at
	UserMessageAtAdd(ctx context.Context, in *ReqUserMessageAtAdd, opts ...grpc.CallOption) (*ReplyUserMessageAtAdd, error)
	// get for messagedb.user_message_at
	UserMessageAtGet(ctx context.Context, in *ReqUserMessageAtGet, opts ...grpc.CallOption) (*ReplyUserMessageAtGet, error)
	// delete for messagedb.user_message_at
	UserMessageAtDel(ctx context.Context, in *ReqUserMessageAtDel, opts ...grpc.CallOption) (*ReplyUserMessageAtDel, error)
	// 更新对话框为归档对话框 105
	UpdateDialogToFolder(ctx context.Context, in *ReqUpdateDialogToFolder, opts ...grpc.CallOption) (*ReplyNull, error)
	// Begin added by MarkLi at 2020-07-17 for 存取MsgId和SerialCode映射接口
	InsertMsgIdSerialCodeMap(ctx context.Context, in *ReqInsertMsgIdSerialCodeMap, opts ...grpc.CallOption) (*ReplyInsertMsgIdSerialCodeMap, error)
	GetMsgIdSerialCodeMap(ctx context.Context, in *ReqGetMsgIdSerialCodeMap, opts ...grpc.CallOption) (*ReplyGetMsgIdSerialCodeMap, error)
}

type messageDbClient struct {
	cc *grpc.ClientConn
}

func NewMessageDbClient(cc *grpc.ClientConn) MessageDbClient {
	return &messageDbClient{cc}
}

func (c *messageDbClient) InsertOrUpdateUserMsg(ctx context.Context, in *ReqInsertOrUpdateUserMsg, opts ...grpc.CallOption) (*DialogIsCreated, error) {
	out := new(DialogIsCreated)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/InsertOrUpdateUserMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetForwardUserMsg(ctx context.Context, in *ReqGetForwardUserMsg, opts ...grpc.CallOption) (*ForWardUserMsgList, error) {
	out := new(ForWardUserMsgList)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/GetForwardUserMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserMsgHistory(ctx context.Context, in *ReqGetUserMsgHistory, opts ...grpc.CallOption) (*UserMsgList, error) {
	out := new(UserMsgList)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/GetUserMsgHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserMsgUUID(ctx context.Context, in *ReqGetUserMsgUUID, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/GetUserMsgUUID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserMsgIdByUUID(ctx context.Context, in *ReqGetUserMsgIdByUUID, opts ...grpc.CallOption) (*MsgId, error) {
	out := new(MsgId)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/GetUserMsgIdByUUID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserMsgListByUUIDs(ctx context.Context, in *ReqGetUserMsgListByUUIDs, opts ...grpc.CallOption) (*UserMsgList, error) {
	out := new(UserMsgList)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/GetUserMsgListByUUIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) DeleteUserMsg(ctx context.Context, in *ReqDeleteUserMsg, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/DeleteUserMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) BatchDeleteUserMsg(ctx context.Context, in *ReqBatchDeleteUserMsg, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/BatchDeleteUserMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetOneUserMsgByUserIdAndMsgId(ctx context.Context, in *ReqGetOneUserMsgByUserIdAndMsgId, opts ...grpc.CallOption) (*UserMsg, error) {
	out := new(UserMsg)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/GetOneUserMsgByUserIdAndMsgId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) DeleteUserMsgByUserIdAndWithIdAndEncry(ctx context.Context, in *ReqDeleteUserMsgByUserIdAndWithIdAndEncry, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/DeleteUserMsgByUserIdAndWithIdAndEncry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) ClearHistory(ctx context.Context, in *ReqClearHistory, opts ...grpc.CallOption) (*MsgIDList, error) {
	out := new(MsgIDList)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/ClearHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetMessageHistoryPageByMedia(ctx context.Context, in *ReqGetMessageHistoryPageByMedia, opts ...grpc.CallOption) (*ReplyGetMessageHistoryPageByMedia, error) {
	out := new(ReplyGetMessageHistoryPageByMedia)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/GetMessageHistoryPageByMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserMediaMessageStatisticsByMedia(ctx context.Context, in *ReqGetUserMediaMessageStatisticsByMedia, opts ...grpc.CallOption) (*ReplyGetUserMediaMessageStatisticsByMedia, error) {
	out := new(ReplyGetUserMediaMessageStatisticsByMedia)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/GetUserMediaMessageStatisticsByMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) SearchUserMediaMsgStatisticsByFilter(ctx context.Context, in *ReqSearchUserMediaMsgByFilter, opts ...grpc.CallOption) (*RespSearchUserMediaMsgByFilter, error) {
	out := new(RespSearchUserMediaMsgByFilter)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/SearchUserMediaMsgStatisticsByFilter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) InsertOrUpdateUserDialogAndMsg(ctx context.Context, in *ReqInsertOrUpdateUserDialogAndMsg, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/InsertOrUpdateUserDialogAndMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateSelfDialogAndMsg(ctx context.Context, in *ReqUpdateSelfDialogAndMsg, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/UpdateSelfDialogAndMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateDialogAddUnread(ctx context.Context, in *ReqUpdateDialogAddUnread, opts ...grpc.CallOption) (*ReplyUpdateDialogAddUnread, error) {
	out := new(ReplyUpdateDialogAddUnread)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/UpdateDialogAddUnread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateDialogClearDraft(ctx context.Context, in *ReqUpdateDialogClearDraft, opts ...grpc.CallOption) (*ReplyUpdateDialogClearDraft, error) {
	out := new(ReplyUpdateDialogClearDraft)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/UpdateDialogClearDraft", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserDialogAllUnread(ctx context.Context, in *ReqGetUserDialogAllUnread, opts ...grpc.CallOption) (*ReplyGetUserDialogAllUnread, error) {
	out := new(ReplyGetUserDialogAllUnread)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/GetUserDialogAllUnread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetDialogAndMsgByUserIdAndWithIdAndType(ctx context.Context, in *ReqGetDialogAndMsgByUserIdAndWithIdAndType, opts ...grpc.CallOption) (*UserDialogAndMsg, error) {
	out := new(UserDialogAndMsg)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/GetDialogAndMsgByUserIdAndWithIdAndType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetDialogAndMsgsByUserId(ctx context.Context, in *ReqGetDialogAndMsgsByUserId, opts ...grpc.CallOption) (*UserDialogAndMsgList, error) {
	out := new(UserDialogAndMsgList)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/GetDialogAndMsgsByUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetDialogAndMsgsByPage(ctx context.Context, in *ReqGetDialogAndMsgsByPage, opts ...grpc.CallOption) (*UserDialogAndMsgList, error) {
	out := new(UserDialogAndMsgList)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/GetDialogAndMsgsByPage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) ReadSelfDialogAndMsg(ctx context.Context, in *ReqReadSelfDialogAndMsg, opts ...grpc.CallOption) (*DialogTopMessage, error) {
	out := new(DialogTopMessage)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/ReadSelfDialogAndMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateReadinbox(ctx context.Context, in *ReqUpdateReadinbox, opts ...grpc.CallOption) (*DialogTopMessage, error) {
	out := new(DialogTopMessage)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/UpdateReadinbox", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateReadoutbox(ctx context.Context, in *ReqUpdateReadoutbox, opts ...grpc.CallOption) (*DialogTopMessage, error) {
	out := new(DialogTopMessage)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/UpdateReadoutbox", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) DeleteUserDialog(ctx context.Context, in *ReqDeleteUserDialog, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/DeleteUserDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateUserDialog(ctx context.Context, in *ReqUpdateUserDialog, opts ...grpc.CallOption) (*ReplyUpdateUserDialog, error) {
	out := new(ReplyUpdateUserDialog)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/UpdateUserDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetDialogUnreadCountByUserIdAndWithId(ctx context.Context, in *ReqGetDialogUnreadCountByUserIdAndWithId, opts ...grpc.CallOption) (*RespGetDialogUnreadCountByUserIdAndWithId, error) {
	out := new(RespGetDialogUnreadCountByUserIdAndWithId)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/GetDialogUnreadCountByUserIdAndWithId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateDialogToPinged(ctx context.Context, in *ReqUpdateDialogToPinged, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/UpdateDialogToPinged", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) CancelPingedDialog(ctx context.Context, in *ReqCancelPingedDialog, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/CancelPingedDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetPingedDialogAndMsg(ctx context.Context, in *ReqGetPingedDialogAndMsg, opts ...grpc.CallOption) (*ReplyGetPingedDialogAndMsg, error) {
	out := new(ReplyGetPingedDialogAndMsg)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/GetPingedDialogAndMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetLastLimitDialog(ctx context.Context, in *ReqGetLastLimitDialog, opts ...grpc.CallOption) (*ReplyGetLastLimitDialog, error) {
	out := new(ReplyGetLastLimitDialog)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/GetLastLimitDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateReadInBoxMaxId(ctx context.Context, in *ReqUpdateReadInBoxMaxId, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/UpdateReadInBoxMaxId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateReadOutBoxMaxId(ctx context.Context, in *ReqUpdateReadOutBoxMaxId, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/UpdateReadOutBoxMaxId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateChannelReadinbox(ctx context.Context, in *ReqUpdateChannelReadinbox, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/UpdateChannelReadinbox", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateChannelReadoutbox(ctx context.Context, in *ReqUpdateChannelReadoutbox, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/UpdateChannelReadoutbox", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) DeleteUserDialogByChannelId(ctx context.Context, in *ReqDeleteUserDialogByChannelId, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/DeleteUserDialogByChannelId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserChannelDialogByUserId(ctx context.Context, in *ReqGetUserChannelDialogByUserId, opts ...grpc.CallOption) (*UserDialogList, error) {
	out := new(UserDialogList)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/GetUserChannelDialogByUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetRandomStatus(ctx context.Context, in *ReqGetRandomStatus, opts ...grpc.CallOption) (*ReplyGetRandomStatus, error) {
	out := new(ReplyGetRandomStatus)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/GetRandomStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) SetSuperGroupMsg(ctx context.Context, in *ReqSetSuperGroupMsg, opts ...grpc.CallOption) (*ReplySetSuperGroupMsg, error) {
	out := new(ReplySetSuperGroupMsg)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/SetSuperGroupMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetSuperGroupMsg(ctx context.Context, in *ReqGetSuperGroupMsg, opts ...grpc.CallOption) (*ReplyGetSuperGroupMsg, error) {
	out := new(ReplyGetSuperGroupMsg)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/GetSuperGroupMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UserDialogSetUnreadMetionsCount(ctx context.Context, in *ReqUserDialogSetUnreadMetionsCount, opts ...grpc.CallOption) (*ReplyUserDialogSetUnreadMetionsCount, error) {
	out := new(ReplyUserDialogSetUnreadMetionsCount)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/UserDialogSetUnreadMetionsCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UserDialogGetUnreadMetionsCount(ctx context.Context, in *ReqUserDialogGetUnreadMetionsCount, opts ...grpc.CallOption) (*ReplyUserDialogGetUnreadMetionsCount, error) {
	out := new(ReplyUserDialogGetUnreadMetionsCount)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/UserDialogGetUnreadMetionsCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UserDialogChangeUnreadMetionsCount(ctx context.Context, in *ReqUserDialogChangeUnreadMetionsCount, opts ...grpc.CallOption) (*ReplyUserDialogChangeUnreadMetionsCount, error) {
	out := new(ReplyUserDialogChangeUnreadMetionsCount)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/UserDialogChangeUnreadMetionsCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UserMessageAtAdd(ctx context.Context, in *ReqUserMessageAtAdd, opts ...grpc.CallOption) (*ReplyUserMessageAtAdd, error) {
	out := new(ReplyUserMessageAtAdd)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/UserMessageAtAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UserMessageAtGet(ctx context.Context, in *ReqUserMessageAtGet, opts ...grpc.CallOption) (*ReplyUserMessageAtGet, error) {
	out := new(ReplyUserMessageAtGet)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/UserMessageAtGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UserMessageAtDel(ctx context.Context, in *ReqUserMessageAtDel, opts ...grpc.CallOption) (*ReplyUserMessageAtDel, error) {
	out := new(ReplyUserMessageAtDel)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/UserMessageAtDel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateDialogToFolder(ctx context.Context, in *ReqUpdateDialogToFolder, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/UpdateDialogToFolder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) InsertMsgIdSerialCodeMap(ctx context.Context, in *ReqInsertMsgIdSerialCodeMap, opts ...grpc.CallOption) (*ReplyInsertMsgIdSerialCodeMap, error) {
	out := new(ReplyInsertMsgIdSerialCodeMap)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/InsertMsgIdSerialCodeMap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetMsgIdSerialCodeMap(ctx context.Context, in *ReqGetMsgIdSerialCodeMap, opts ...grpc.CallOption) (*ReplyGetMsgIdSerialCodeMap, error) {
	out := new(ReplyGetMsgIdSerialCodeMap)
	err := grpc.Invoke(ctx, "/messagedb.MessageDb/GetMsgIdSerialCodeMap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageDb service

type MessageDbServer interface {
	// =========================================== UserMsg =========================================================
	// 插入单条 usermsg 内容
	InsertOrUpdateUserMsg(context.Context, *ReqInsertOrUpdateUserMsg) (*DialogIsCreated, error)
	// 查询转发消息
	GetForwardUserMsg(context.Context, *ReqGetForwardUserMsg) (*ForWardUserMsgList, error)
	// 查询历史消息
	GetUserMsgHistory(context.Context, *ReqGetUserMsgHistory) (*UserMsgList, error)
	// 查询用户消息UUID
	GetUserMsgUUID(context.Context, *ReqGetUserMsgUUID) (*UUID, error)
	// 查询用户消息 通过 UUID
	GetUserMsgIdByUUID(context.Context, *ReqGetUserMsgIdByUUID) (*MsgId, error)
	// 获取 消息UUID数组
	GetUserMsgListByUUIDs(context.Context, *ReqGetUserMsgListByUUIDs) (*UserMsgList, error)
	// 删除用户信息
	DeleteUserMsg(context.Context, *ReqDeleteUserMsg) (*ReplyNull, error)
	// 批量删除用户信息
	BatchDeleteUserMsg(context.Context, *ReqBatchDeleteUserMsg) (*ReplyNull, error)
	// 查询一条用户信息通过ID
	GetOneUserMsgByUserIdAndMsgId(context.Context, *ReqGetOneUserMsgByUserIdAndMsgId) (*UserMsg, error)
	// 删除信息
	DeleteUserMsgByUserIdAndWithIdAndEncry(context.Context, *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) (*ReplyNull, error)
	// 清除历史  用于清楚历史每次从最底部删除消息 每次删除100条 如果仍然有消息将最新的消息id返回 如没有消息将0返回 count=本次删除的消息条数
	ClearHistory(context.Context, *ReqClearHistory) (*MsgIDList, error)
	// 查询打电话消息历史记录
	GetMessageHistoryPageByMedia(context.Context, *ReqGetMessageHistoryPageByMedia) (*ReplyGetMessageHistoryPageByMedia, error)
	// =========================================== UserMediaMessageStatistics =========================================================
	// 根据userId、withId、withType、media获取UserMediaMessageStatistics
	GetUserMediaMessageStatisticsByMedia(context.Context, *ReqGetUserMediaMessageStatisticsByMedia) (*ReplyGetUserMediaMessageStatisticsByMedia, error)
	// Begin added by six xionger at 2020-03-03 for messages.search
	SearchUserMediaMsgStatisticsByFilter(context.Context, *ReqSearchUserMediaMsgByFilter) (*RespSearchUserMediaMsgByFilter, error)
	// =========================================== UserDialogAndMsg =========================================================
	// 插入或者更新 UserDialog
	InsertOrUpdateUserDialogAndMsg(context.Context, *ReqInsertOrUpdateUserDialogAndMsg) (*ReplyNull, error)
	// 更新自己的dialog
	UpdateSelfDialogAndMsg(context.Context, *ReqUpdateSelfDialogAndMsg) (*ReplyNull, error)
	// 自增dialog的unread +1 如果dialog不存在 则返回
	UpdateDialogAddUnread(context.Context, *ReqUpdateDialogAddUnread) (*ReplyUpdateDialogAddUnread, error)
	// 更新对话框 清除草稿
	UpdateDialogClearDraft(context.Context, *ReqUpdateDialogClearDraft) (*ReplyUpdateDialogClearDraft, error)
	// 获取用户总未读数
	GetUserDialogAllUnread(context.Context, *ReqGetUserDialogAllUnread) (*ReplyGetUserDialogAllUnread, error)
	// 获取单条 dialog 记录
	GetDialogAndMsgByUserIdAndWithIdAndType(context.Context, *ReqGetDialogAndMsgByUserIdAndWithIdAndType) (*UserDialogAndMsg, error)
	// 获取 UserDialogList
	GetDialogAndMsgsByUserId(context.Context, *ReqGetDialogAndMsgsByUserId) (*UserDialogAndMsgList, error)
	// 分页获取
	GetDialogAndMsgsByPage(context.Context, *ReqGetDialogAndMsgsByPage) (*UserDialogAndMsgList, error)
	// 消息接收方更新dialog 更新dialog readin = readout = topMsgID unread = 0
	ReadSelfDialogAndMsg(context.Context, *ReqReadSelfDialogAndMsg) (*DialogTopMessage, error)
	// 更新自己对话框的readin = topMsgId 和 unread = 0
	UpdateReadinbox(context.Context, *ReqUpdateReadinbox) (*DialogTopMessage, error)
	// 更新别人的Readoutbox readOut = topMsgID && unread = 0
	UpdateReadoutbox(context.Context, *ReqUpdateReadoutbox) (*DialogTopMessage, error)
	// 删除对话框消息，对应的 对话框盒子 tidb中的数据都删除
	DeleteUserDialog(context.Context, *ReqDeleteUserDialog) (*ReplyNull, error)
	UpdateUserDialog(context.Context, *ReqUpdateUserDialog) (*ReplyUpdateUserDialog, error)
	// Begin added by six xionger at 2020-05-15 for 取单聊对话框消息未读数
	GetDialogUnreadCountByUserIdAndWithId(context.Context, *ReqGetDialogUnreadCountByUserIdAndWithId) (*RespGetDialogUnreadCountByUserIdAndWithId, error)
	// -------------------------------- pinged dialog 置顶对话框 ----------------------------------
	// 更新对话框为置顶对话框
	UpdateDialogToPinged(context.Context, *ReqUpdateDialogToPinged) (*ReplyNull, error)
	// 取消置顶
	CancelPingedDialog(context.Context, *ReqCancelPingedDialog) (*ReplyNull, error)
	// 获取置顶对话框
	GetPingedDialogAndMsg(context.Context, *ReqGetPingedDialogAndMsg) (*ReplyGetPingedDialogAndMsg, error)
	// 获取最近操作的对话框 limit 个
	GetLastLimitDialog(context.Context, *ReqGetLastLimitDialog) (*ReplyGetLastLimitDialog, error)
	// -------------------------------- channel 使用 ----------------------------------
	// channel 使用 readInBox_maxId 自增1
	UpdateReadInBoxMaxId(context.Context, *ReqUpdateReadInBoxMaxId) (*ReplyNull, error)
	// channel 使用 readOutBox_maxId 自增1
	UpdateReadOutBoxMaxId(context.Context, *ReqUpdateReadOutBoxMaxId) (*ReplyNull, error)
	// 更新自己对话框的readin 和 unread
	UpdateChannelReadinbox(context.Context, *ReqUpdateChannelReadinbox) (*ReplyNull, error)
	// 更新别人的Readoutbox
	UpdateChannelReadoutbox(context.Context, *ReqUpdateChannelReadoutbox) (*ReplyNull, error)
	// 删除超级群的所有对话框
	DeleteUserDialogByChannelId(context.Context, *ReqDeleteUserDialogByChannelId) (*ReplyNull, error)
	// 获取某用户的所有超级群对话框
	GetUserChannelDialogByUserId(context.Context, *ReqGetUserChannelDialogByUserId) (*UserDialogList, error)
	// =========================================== msg_random(发消息去重) =========================================================
	// 获取random 状态 如果有则返回true 没有就插入缓存 并且 返回false
	GetRandomStatus(context.Context, *ReqGetRandomStatus) (*ReplyGetRandomStatus, error)
	// 设置超级群消息
	SetSuperGroupMsg(context.Context, *ReqSetSuperGroupMsg) (*ReplySetSuperGroupMsg, error)
	// 获取超级群消息
	GetSuperGroupMsg(context.Context, *ReqGetSuperGroupMsg) (*ReplyGetSuperGroupMsg, error)
	// 设置messagedb.user_dialog.unread_metions_count
	UserDialogSetUnreadMetionsCount(context.Context, *ReqUserDialogSetUnreadMetionsCount) (*ReplyUserDialogSetUnreadMetionsCount, error)
	// 获取messagedb.user_dialog.unread_metions_count
	UserDialogGetUnreadMetionsCount(context.Context, *ReqUserDialogGetUnreadMetionsCount) (*ReplyUserDialogGetUnreadMetionsCount, error)
	// 改变messagedb.user_dialog.unread_metions_count
	UserDialogChangeUnreadMetionsCount(context.Context, *ReqUserDialogChangeUnreadMetionsCount) (*ReplyUserDialogChangeUnreadMetionsCount, error)
	// add for messagedb.user_message_at
	UserMessageAtAdd(context.Context, *ReqUserMessageAtAdd) (*ReplyUserMessageAtAdd, error)
	// get for messagedb.user_message_at
	UserMessageAtGet(context.Context, *ReqUserMessageAtGet) (*ReplyUserMessageAtGet, error)
	// delete for messagedb.user_message_at
	UserMessageAtDel(context.Context, *ReqUserMessageAtDel) (*ReplyUserMessageAtDel, error)
	// 更新对话框为归档对话框 105
	UpdateDialogToFolder(context.Context, *ReqUpdateDialogToFolder) (*ReplyNull, error)
	// Begin added by MarkLi at 2020-07-17 for 存取MsgId和SerialCode映射接口
	InsertMsgIdSerialCodeMap(context.Context, *ReqInsertMsgIdSerialCodeMap) (*ReplyInsertMsgIdSerialCodeMap, error)
	GetMsgIdSerialCodeMap(context.Context, *ReqGetMsgIdSerialCodeMap) (*ReplyGetMsgIdSerialCodeMap, error)
}

func RegisterMessageDbServer(s *grpc.Server, srv MessageDbServer) {
	s.RegisterService(&_MessageDb_serviceDesc, srv)
}

func _MessageDb_InsertOrUpdateUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInsertOrUpdateUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).InsertOrUpdateUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/InsertOrUpdateUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).InsertOrUpdateUserMsg(ctx, req.(*ReqInsertOrUpdateUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetForwardUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetForwardUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetForwardUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetForwardUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetForwardUserMsg(ctx, req.(*ReqGetForwardUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserMsgHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserMsgHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserMsgHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserMsgHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserMsgHistory(ctx, req.(*ReqGetUserMsgHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserMsgUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserMsgUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserMsgUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserMsgUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserMsgUUID(ctx, req.(*ReqGetUserMsgUUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserMsgIdByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserMsgIdByUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserMsgIdByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserMsgIdByUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserMsgIdByUUID(ctx, req.(*ReqGetUserMsgIdByUUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserMsgListByUUIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserMsgListByUUIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserMsgListByUUIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserMsgListByUUIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserMsgListByUUIDs(ctx, req.(*ReqGetUserMsgListByUUIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_DeleteUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).DeleteUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/DeleteUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).DeleteUserMsg(ctx, req.(*ReqDeleteUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_BatchDeleteUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBatchDeleteUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).BatchDeleteUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/BatchDeleteUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).BatchDeleteUserMsg(ctx, req.(*ReqBatchDeleteUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetOneUserMsgByUserIdAndMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetOneUserMsgByUserIdAndMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetOneUserMsgByUserIdAndMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetOneUserMsgByUserIdAndMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetOneUserMsgByUserIdAndMsgId(ctx, req.(*ReqGetOneUserMsgByUserIdAndMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_DeleteUserMsgByUserIdAndWithIdAndEncry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteUserMsgByUserIdAndWithIdAndEncry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).DeleteUserMsgByUserIdAndWithIdAndEncry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/DeleteUserMsgByUserIdAndWithIdAndEncry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).DeleteUserMsgByUserIdAndWithIdAndEncry(ctx, req.(*ReqDeleteUserMsgByUserIdAndWithIdAndEncry))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_ClearHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqClearHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).ClearHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/ClearHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).ClearHistory(ctx, req.(*ReqClearHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetMessageHistoryPageByMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMessageHistoryPageByMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetMessageHistoryPageByMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetMessageHistoryPageByMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetMessageHistoryPageByMedia(ctx, req.(*ReqGetMessageHistoryPageByMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserMediaMessageStatisticsByMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserMediaMessageStatisticsByMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserMediaMessageStatisticsByMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserMediaMessageStatisticsByMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserMediaMessageStatisticsByMedia(ctx, req.(*ReqGetUserMediaMessageStatisticsByMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_SearchUserMediaMsgStatisticsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSearchUserMediaMsgByFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).SearchUserMediaMsgStatisticsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/SearchUserMediaMsgStatisticsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).SearchUserMediaMsgStatisticsByFilter(ctx, req.(*ReqSearchUserMediaMsgByFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_InsertOrUpdateUserDialogAndMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInsertOrUpdateUserDialogAndMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).InsertOrUpdateUserDialogAndMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/InsertOrUpdateUserDialogAndMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).InsertOrUpdateUserDialogAndMsg(ctx, req.(*ReqInsertOrUpdateUserDialogAndMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateSelfDialogAndMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateSelfDialogAndMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateSelfDialogAndMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateSelfDialogAndMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateSelfDialogAndMsg(ctx, req.(*ReqUpdateSelfDialogAndMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateDialogAddUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateDialogAddUnread)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateDialogAddUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateDialogAddUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateDialogAddUnread(ctx, req.(*ReqUpdateDialogAddUnread))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateDialogClearDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateDialogClearDraft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateDialogClearDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateDialogClearDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateDialogClearDraft(ctx, req.(*ReqUpdateDialogClearDraft))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserDialogAllUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserDialogAllUnread)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserDialogAllUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserDialogAllUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserDialogAllUnread(ctx, req.(*ReqGetUserDialogAllUnread))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetDialogAndMsgByUserIdAndWithIdAndType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetDialogAndMsgByUserIdAndWithIdAndType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetDialogAndMsgByUserIdAndWithIdAndType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetDialogAndMsgByUserIdAndWithIdAndType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetDialogAndMsgByUserIdAndWithIdAndType(ctx, req.(*ReqGetDialogAndMsgByUserIdAndWithIdAndType))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetDialogAndMsgsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetDialogAndMsgsByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetDialogAndMsgsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetDialogAndMsgsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetDialogAndMsgsByUserId(ctx, req.(*ReqGetDialogAndMsgsByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetDialogAndMsgsByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetDialogAndMsgsByPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetDialogAndMsgsByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetDialogAndMsgsByPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetDialogAndMsgsByPage(ctx, req.(*ReqGetDialogAndMsgsByPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_ReadSelfDialogAndMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReadSelfDialogAndMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).ReadSelfDialogAndMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/ReadSelfDialogAndMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).ReadSelfDialogAndMsg(ctx, req.(*ReqReadSelfDialogAndMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateReadinbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateReadinbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateReadinbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateReadinbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateReadinbox(ctx, req.(*ReqUpdateReadinbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateReadoutbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateReadoutbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateReadoutbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateReadoutbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateReadoutbox(ctx, req.(*ReqUpdateReadoutbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_DeleteUserDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteUserDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).DeleteUserDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/DeleteUserDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).DeleteUserDialog(ctx, req.(*ReqDeleteUserDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateUserDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateUserDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateUserDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateUserDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateUserDialog(ctx, req.(*ReqUpdateUserDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetDialogUnreadCountByUserIdAndWithId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetDialogUnreadCountByUserIdAndWithId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetDialogUnreadCountByUserIdAndWithId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetDialogUnreadCountByUserIdAndWithId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetDialogUnreadCountByUserIdAndWithId(ctx, req.(*ReqGetDialogUnreadCountByUserIdAndWithId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateDialogToPinged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateDialogToPinged)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateDialogToPinged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateDialogToPinged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateDialogToPinged(ctx, req.(*ReqUpdateDialogToPinged))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_CancelPingedDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCancelPingedDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).CancelPingedDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/CancelPingedDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).CancelPingedDialog(ctx, req.(*ReqCancelPingedDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetPingedDialogAndMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetPingedDialogAndMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetPingedDialogAndMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetPingedDialogAndMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetPingedDialogAndMsg(ctx, req.(*ReqGetPingedDialogAndMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetLastLimitDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetLastLimitDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetLastLimitDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetLastLimitDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetLastLimitDialog(ctx, req.(*ReqGetLastLimitDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateReadInBoxMaxId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateReadInBoxMaxId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateReadInBoxMaxId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateReadInBoxMaxId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateReadInBoxMaxId(ctx, req.(*ReqUpdateReadInBoxMaxId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateReadOutBoxMaxId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateReadOutBoxMaxId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateReadOutBoxMaxId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateReadOutBoxMaxId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateReadOutBoxMaxId(ctx, req.(*ReqUpdateReadOutBoxMaxId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateChannelReadinbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelReadinbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateChannelReadinbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateChannelReadinbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateChannelReadinbox(ctx, req.(*ReqUpdateChannelReadinbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateChannelReadoutbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelReadoutbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateChannelReadoutbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateChannelReadoutbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateChannelReadoutbox(ctx, req.(*ReqUpdateChannelReadoutbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_DeleteUserDialogByChannelId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteUserDialogByChannelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).DeleteUserDialogByChannelId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/DeleteUserDialogByChannelId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).DeleteUserDialogByChannelId(ctx, req.(*ReqDeleteUserDialogByChannelId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserChannelDialogByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserChannelDialogByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserChannelDialogByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserChannelDialogByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserChannelDialogByUserId(ctx, req.(*ReqGetUserChannelDialogByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetRandomStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetRandomStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetRandomStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetRandomStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetRandomStatus(ctx, req.(*ReqGetRandomStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_SetSuperGroupMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetSuperGroupMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).SetSuperGroupMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/SetSuperGroupMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).SetSuperGroupMsg(ctx, req.(*ReqSetSuperGroupMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetSuperGroupMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetSuperGroupMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetSuperGroupMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetSuperGroupMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetSuperGroupMsg(ctx, req.(*ReqGetSuperGroupMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UserDialogSetUnreadMetionsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserDialogSetUnreadMetionsCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UserDialogSetUnreadMetionsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UserDialogSetUnreadMetionsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UserDialogSetUnreadMetionsCount(ctx, req.(*ReqUserDialogSetUnreadMetionsCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UserDialogGetUnreadMetionsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserDialogGetUnreadMetionsCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UserDialogGetUnreadMetionsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UserDialogGetUnreadMetionsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UserDialogGetUnreadMetionsCount(ctx, req.(*ReqUserDialogGetUnreadMetionsCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UserDialogChangeUnreadMetionsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserDialogChangeUnreadMetionsCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UserDialogChangeUnreadMetionsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UserDialogChangeUnreadMetionsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UserDialogChangeUnreadMetionsCount(ctx, req.(*ReqUserDialogChangeUnreadMetionsCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UserMessageAtAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserMessageAtAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UserMessageAtAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UserMessageAtAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UserMessageAtAdd(ctx, req.(*ReqUserMessageAtAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UserMessageAtGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserMessageAtGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UserMessageAtGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UserMessageAtGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UserMessageAtGet(ctx, req.(*ReqUserMessageAtGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UserMessageAtDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserMessageAtDel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UserMessageAtDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UserMessageAtDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UserMessageAtDel(ctx, req.(*ReqUserMessageAtDel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateDialogToFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateDialogToFolder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateDialogToFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateDialogToFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateDialogToFolder(ctx, req.(*ReqUpdateDialogToFolder))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_InsertMsgIdSerialCodeMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInsertMsgIdSerialCodeMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).InsertMsgIdSerialCodeMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/InsertMsgIdSerialCodeMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).InsertMsgIdSerialCodeMap(ctx, req.(*ReqInsertMsgIdSerialCodeMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetMsgIdSerialCodeMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMsgIdSerialCodeMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetMsgIdSerialCodeMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetMsgIdSerialCodeMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetMsgIdSerialCodeMap(ctx, req.(*ReqGetMsgIdSerialCodeMap))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageDb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messagedb.MessageDb",
	HandlerType: (*MessageDbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertOrUpdateUserMsg",
			Handler:    _MessageDb_InsertOrUpdateUserMsg_Handler,
		},
		{
			MethodName: "GetForwardUserMsg",
			Handler:    _MessageDb_GetForwardUserMsg_Handler,
		},
		{
			MethodName: "GetUserMsgHistory",
			Handler:    _MessageDb_GetUserMsgHistory_Handler,
		},
		{
			MethodName: "GetUserMsgUUID",
			Handler:    _MessageDb_GetUserMsgUUID_Handler,
		},
		{
			MethodName: "GetUserMsgIdByUUID",
			Handler:    _MessageDb_GetUserMsgIdByUUID_Handler,
		},
		{
			MethodName: "GetUserMsgListByUUIDs",
			Handler:    _MessageDb_GetUserMsgListByUUIDs_Handler,
		},
		{
			MethodName: "DeleteUserMsg",
			Handler:    _MessageDb_DeleteUserMsg_Handler,
		},
		{
			MethodName: "BatchDeleteUserMsg",
			Handler:    _MessageDb_BatchDeleteUserMsg_Handler,
		},
		{
			MethodName: "GetOneUserMsgByUserIdAndMsgId",
			Handler:    _MessageDb_GetOneUserMsgByUserIdAndMsgId_Handler,
		},
		{
			MethodName: "DeleteUserMsgByUserIdAndWithIdAndEncry",
			Handler:    _MessageDb_DeleteUserMsgByUserIdAndWithIdAndEncry_Handler,
		},
		{
			MethodName: "ClearHistory",
			Handler:    _MessageDb_ClearHistory_Handler,
		},
		{
			MethodName: "GetMessageHistoryPageByMedia",
			Handler:    _MessageDb_GetMessageHistoryPageByMedia_Handler,
		},
		{
			MethodName: "GetUserMediaMessageStatisticsByMedia",
			Handler:    _MessageDb_GetUserMediaMessageStatisticsByMedia_Handler,
		},
		{
			MethodName: "SearchUserMediaMsgStatisticsByFilter",
			Handler:    _MessageDb_SearchUserMediaMsgStatisticsByFilter_Handler,
		},
		{
			MethodName: "InsertOrUpdateUserDialogAndMsg",
			Handler:    _MessageDb_InsertOrUpdateUserDialogAndMsg_Handler,
		},
		{
			MethodName: "UpdateSelfDialogAndMsg",
			Handler:    _MessageDb_UpdateSelfDialogAndMsg_Handler,
		},
		{
			MethodName: "UpdateDialogAddUnread",
			Handler:    _MessageDb_UpdateDialogAddUnread_Handler,
		},
		{
			MethodName: "UpdateDialogClearDraft",
			Handler:    _MessageDb_UpdateDialogClearDraft_Handler,
		},
		{
			MethodName: "GetUserDialogAllUnread",
			Handler:    _MessageDb_GetUserDialogAllUnread_Handler,
		},
		{
			MethodName: "GetDialogAndMsgByUserIdAndWithIdAndType",
			Handler:    _MessageDb_GetDialogAndMsgByUserIdAndWithIdAndType_Handler,
		},
		{
			MethodName: "GetDialogAndMsgsByUserId",
			Handler:    _MessageDb_GetDialogAndMsgsByUserId_Handler,
		},
		{
			MethodName: "GetDialogAndMsgsByPage",
			Handler:    _MessageDb_GetDialogAndMsgsByPage_Handler,
		},
		{
			MethodName: "ReadSelfDialogAndMsg",
			Handler:    _MessageDb_ReadSelfDialogAndMsg_Handler,
		},
		{
			MethodName: "UpdateReadinbox",
			Handler:    _MessageDb_UpdateReadinbox_Handler,
		},
		{
			MethodName: "UpdateReadoutbox",
			Handler:    _MessageDb_UpdateReadoutbox_Handler,
		},
		{
			MethodName: "DeleteUserDialog",
			Handler:    _MessageDb_DeleteUserDialog_Handler,
		},
		{
			MethodName: "UpdateUserDialog",
			Handler:    _MessageDb_UpdateUserDialog_Handler,
		},
		{
			MethodName: "GetDialogUnreadCountByUserIdAndWithId",
			Handler:    _MessageDb_GetDialogUnreadCountByUserIdAndWithId_Handler,
		},
		{
			MethodName: "UpdateDialogToPinged",
			Handler:    _MessageDb_UpdateDialogToPinged_Handler,
		},
		{
			MethodName: "CancelPingedDialog",
			Handler:    _MessageDb_CancelPingedDialog_Handler,
		},
		{
			MethodName: "GetPingedDialogAndMsg",
			Handler:    _MessageDb_GetPingedDialogAndMsg_Handler,
		},
		{
			MethodName: "GetLastLimitDialog",
			Handler:    _MessageDb_GetLastLimitDialog_Handler,
		},
		{
			MethodName: "UpdateReadInBoxMaxId",
			Handler:    _MessageDb_UpdateReadInBoxMaxId_Handler,
		},
		{
			MethodName: "UpdateReadOutBoxMaxId",
			Handler:    _MessageDb_UpdateReadOutBoxMaxId_Handler,
		},
		{
			MethodName: "UpdateChannelReadinbox",
			Handler:    _MessageDb_UpdateChannelReadinbox_Handler,
		},
		{
			MethodName: "UpdateChannelReadoutbox",
			Handler:    _MessageDb_UpdateChannelReadoutbox_Handler,
		},
		{
			MethodName: "DeleteUserDialogByChannelId",
			Handler:    _MessageDb_DeleteUserDialogByChannelId_Handler,
		},
		{
			MethodName: "GetUserChannelDialogByUserId",
			Handler:    _MessageDb_GetUserChannelDialogByUserId_Handler,
		},
		{
			MethodName: "GetRandomStatus",
			Handler:    _MessageDb_GetRandomStatus_Handler,
		},
		{
			MethodName: "SetSuperGroupMsg",
			Handler:    _MessageDb_SetSuperGroupMsg_Handler,
		},
		{
			MethodName: "GetSuperGroupMsg",
			Handler:    _MessageDb_GetSuperGroupMsg_Handler,
		},
		{
			MethodName: "UserDialogSetUnreadMetionsCount",
			Handler:    _MessageDb_UserDialogSetUnreadMetionsCount_Handler,
		},
		{
			MethodName: "UserDialogGetUnreadMetionsCount",
			Handler:    _MessageDb_UserDialogGetUnreadMetionsCount_Handler,
		},
		{
			MethodName: "UserDialogChangeUnreadMetionsCount",
			Handler:    _MessageDb_UserDialogChangeUnreadMetionsCount_Handler,
		},
		{
			MethodName: "UserMessageAtAdd",
			Handler:    _MessageDb_UserMessageAtAdd_Handler,
		},
		{
			MethodName: "UserMessageAtGet",
			Handler:    _MessageDb_UserMessageAtGet_Handler,
		},
		{
			MethodName: "UserMessageAtDel",
			Handler:    _MessageDb_UserMessageAtDel_Handler,
		},
		{
			MethodName: "UpdateDialogToFolder",
			Handler:    _MessageDb_UpdateDialogToFolder_Handler,
		},
		{
			MethodName: "InsertMsgIdSerialCodeMap",
			Handler:    _MessageDb_InsertMsgIdSerialCodeMap_Handler,
		},
		{
			MethodName: "GetMsgIdSerialCodeMap",
			Handler:    _MessageDb_GetMsgIdSerialCodeMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/pbmessagedb/messagedb.proto",
}

// Client API for ChannelDB service

type ChannelDBClient interface {
	// =========================================== ChannelMsgId =========================================================
	// 更新超级群 msgid and pts
	UpdateChannelMsgIdAndPts(ctx context.Context, in *ReqUpdateChannelMsgIdAndPts, opts ...grpc.CallOption) (*ReplyUpdateChannelMsgIdAndPts, error)
	// 直接设置 msgId pts 值 erlang版本导入数据使用
	SetChannelMsgIdAndPts(ctx context.Context, in *ReqSetChannelMsgIdAndPts, opts ...grpc.CallOption) (*ReplySetChannelMsgIdAndPts, error)
	// 自增超级群 pts
	UpdateChannelPts(ctx context.Context, in *ReqUpdateChannelPts, opts ...grpc.CallOption) (*ReplyUpdateChannelPts, error)
	// 自增超级群 pts N次
	UpdateChannelPtsWithNum(ctx context.Context, in *ReqUpdateChannelPtsWithNum, opts ...grpc.CallOption) (*ReplyUpdateChannelPtsWithNum, error)
	// 查询单条 channelmsgid
	GetChannelMsgId(ctx context.Context, in *ReqGetChannelMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMsgId, error)
	// =========================================== ptsHandle =========================================================
	// 存储 pts 信息 只需要存储到boltdb即可，不用存储到tidb
	StoreChannelPtsHandle(ctx context.Context, in *ReqStoreChannelPtsHandle, opts ...grpc.CallOption) (*ReplyErr, error)
	// 批量存储pts信息
	BatchStoreChannelPtsHandle(ctx context.Context, in *ReqBatchStoreChannelPtsHandle, opts ...grpc.CallOption) (*ReplyErr, error)
	// 获取某个超级群的diff
	GetChannelDiffByPts(ctx context.Context, in *ReqGetChannelDiffByPts, opts ...grpc.CallOption) (*ReplyGetChannelDiffByPts, error)
	// 获取最后的PtsHandle
	GetChannelLastPtsHandle(ctx context.Context, in *ReqGetChannelLastPtsHandle, opts ...grpc.CallOption) (*ReplyGetChannelLastPtsHandle, error)
	// 删除ptsHandle
	DeleteChannelPtsHandle(ctx context.Context, in *ReqDeleteChannelPtsHandle, opts ...grpc.CallOption) (*ReplyDeleteChannelPtsHandle, error)
	// =========================================== ChannelMsg =========================================================
	// 新增或者更新消息
	InsertOrUpdateChannelMsg(ctx context.Context, in *ReqInsertOrUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error)
	// 更新消息内容
	UpdateChannelMsg(ctx context.Context, in *ReqUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error)
	// 批量存储消息
	BatchInsertOrUpdateChannelMsg(ctx context.Context, in *ReqBatchInsertOrUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error)
	// 删除信息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteMsgs(ctx context.Context, in *ReqDeleteMsgs, opts ...grpc.CallOption) (*ReplyDeleteMsgs, error)
	// 超级群中删除指定用户信息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteUserHistory(ctx context.Context, in *ReqDeleteUserHistory, opts ...grpc.CallOption) (*ReplyDeleteUserHistory, error)
	// 删除超级群所有消息
	DeleteChannelMsg(ctx context.Context, in *ReqDeleteChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error)
	// 删除单条超级群消息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteChannelMessage(ctx context.Context, in *ReqDeleteChannelMessage, opts ...grpc.CallOption) (*ReplyDeleteChannelMessage, error)
	// 获取指定msgid信息
	GetChannelMessage(ctx context.Context, in *ReqGetChannelMessage, opts ...grpc.CallOption) (*ReplyGetChannelMessage, error)
	// 获取一组信息
	GetChannelMsgsByMsgIds(ctx context.Context, in *ReqGetChannelMsgsByMsgIds, opts ...grpc.CallOption) (*ReplyGetChannelMsgsByMsgIds, error)
	// 获取历史
	GetChannelMsgHistory(ctx context.Context, in *ReqGetChannelMsgHistory, opts ...grpc.CallOption) (*ReplyGetChannelMsgHistory, error)
	// 获取超级群中最新的一条消息
	GetChannelTopMsg(ctx context.Context, in *ReqGetChannelTopMst, opts ...grpc.CallOption) (*ReplyGetChannelTopMst, error)
	// 分页查询媒体消息
	GetChannelMediaMessageHistoryByMedia(ctx context.Context, in *ReqGetChannelMediaMessageHistoryByMedia, opts ...grpc.CallOption) (*ReplyGetChannelMediaMessageHistoryByMedia, error)
	// 新增或者修改 超级群 标记删除记录
	InsertOrUpdateChannelMessageDeleteMark(ctx context.Context, in *ReqInsertOrUpdateChannelMessageDeleteMark, opts ...grpc.CallOption) (*ReplyInsertOrUpdateChannelMessageDeleteMark, error)
	// 查询 超级群 标记删除记录
	GetChannelMessageDeleteMark(ctx context.Context, in *ReqGetChannelMessageDeleteMark, opts ...grpc.CallOption) (*ReplyGetChannelMessageDeleteMark, error)
	// =========================================== ChannelMediaMessageStatistics =========================================================
	// 根据channelId 获取ChannelMediaMessageStatistics
	GetChannelMediaMessageStatisticsByMedia(ctx context.Context, in *ReqGetChannelMediaMessageStatisticsByMedia, opts ...grpc.CallOption) (*ReplyGetChannelMediaMessageStatisticsByMedia, error)
	// Begin added by six xionger at 2020-03-03 for messages.search
	SearchChannelMediaMsgStatisticsByFilter(ctx context.Context, in *ReqSearchChannelMediaMsgByFilter, opts ...grpc.CallOption) (*RespSearchChannelMediaMsgByFilter, error)
	// =========================================== channelAdminLog =========================================================
	// 存储adminlog
	StoreAdminLog(ctx context.Context, in *ReqStoreAdminLog, opts ...grpc.CallOption) (*ReplyErr, error)
	// 查询Adminlog 条件 超级群ID
	FindsAdminLogByChannelId(ctx context.Context, in *ReqFindsAdminLogByChannelId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合 过滤集合 用户ID
	FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 过滤集合 用户ID
	FindsAdminLogByChannelIdAndEventFiltersAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 用户ID
	FindsAdminLogByChannelIdAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合 过滤集合
	FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 过滤集合
	FindsAdminLogByChannelIdAndEventFilters(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndEventFilters, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合
	FindsAdminLogByChannelIdAndAdminUsers(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsers, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// add for channeldb.channel_message_at
	ChannelMessageAtAdd(ctx context.Context, in *ReqChannelMessageAtAdd, opts ...grpc.CallOption) (*ReplyChannelMessageAtAdd, error)
	// get for channeldb.channel_message_at
	ChannelMessageAtGet(ctx context.Context, in *ReqChannelMessageAtGet, opts ...grpc.CallOption) (*ReplyChannelMessageAtGet, error)
	// delete for channeldb.channel_message_at
	ChannelMessageAtDel(ctx context.Context, in *ReqChannelMessageAtDel, opts ...grpc.CallOption) (*ReplyChannelMessageAtDel, error)
	// Begin added by MarkLi at 2020-07-16 for 更新超级群 MsgId
	UpdateChannelMsgId(ctx context.Context, in *ReqUpdateChannelMsgId, opts ...grpc.CallOption) (*ReplyUpdateChannelMsgId, error)
}

type channelDBClient struct {
	cc *grpc.ClientConn
}

func NewChannelDBClient(cc *grpc.ClientConn) ChannelDBClient {
	return &channelDBClient{cc}
}

func (c *channelDBClient) UpdateChannelMsgIdAndPts(ctx context.Context, in *ReqUpdateChannelMsgIdAndPts, opts ...grpc.CallOption) (*ReplyUpdateChannelMsgIdAndPts, error) {
	out := new(ReplyUpdateChannelMsgIdAndPts)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/UpdateChannelMsgIdAndPts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) SetChannelMsgIdAndPts(ctx context.Context, in *ReqSetChannelMsgIdAndPts, opts ...grpc.CallOption) (*ReplySetChannelMsgIdAndPts, error) {
	out := new(ReplySetChannelMsgIdAndPts)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/SetChannelMsgIdAndPts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) UpdateChannelPts(ctx context.Context, in *ReqUpdateChannelPts, opts ...grpc.CallOption) (*ReplyUpdateChannelPts, error) {
	out := new(ReplyUpdateChannelPts)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/UpdateChannelPts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) UpdateChannelPtsWithNum(ctx context.Context, in *ReqUpdateChannelPtsWithNum, opts ...grpc.CallOption) (*ReplyUpdateChannelPtsWithNum, error) {
	out := new(ReplyUpdateChannelPtsWithNum)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/UpdateChannelPtsWithNum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMsgId(ctx context.Context, in *ReqGetChannelMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMsgId, error) {
	out := new(ReplyGetChannelMsgId)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelMsgId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) StoreChannelPtsHandle(ctx context.Context, in *ReqStoreChannelPtsHandle, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/StoreChannelPtsHandle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) BatchStoreChannelPtsHandle(ctx context.Context, in *ReqBatchStoreChannelPtsHandle, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/BatchStoreChannelPtsHandle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelDiffByPts(ctx context.Context, in *ReqGetChannelDiffByPts, opts ...grpc.CallOption) (*ReplyGetChannelDiffByPts, error) {
	out := new(ReplyGetChannelDiffByPts)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelDiffByPts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelLastPtsHandle(ctx context.Context, in *ReqGetChannelLastPtsHandle, opts ...grpc.CallOption) (*ReplyGetChannelLastPtsHandle, error) {
	out := new(ReplyGetChannelLastPtsHandle)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelLastPtsHandle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteChannelPtsHandle(ctx context.Context, in *ReqDeleteChannelPtsHandle, opts ...grpc.CallOption) (*ReplyDeleteChannelPtsHandle, error) {
	out := new(ReplyDeleteChannelPtsHandle)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/DeleteChannelPtsHandle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) InsertOrUpdateChannelMsg(ctx context.Context, in *ReqInsertOrUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/InsertOrUpdateChannelMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) UpdateChannelMsg(ctx context.Context, in *ReqUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/UpdateChannelMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) BatchInsertOrUpdateChannelMsg(ctx context.Context, in *ReqBatchInsertOrUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/BatchInsertOrUpdateChannelMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteMsgs(ctx context.Context, in *ReqDeleteMsgs, opts ...grpc.CallOption) (*ReplyDeleteMsgs, error) {
	out := new(ReplyDeleteMsgs)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/DeleteMsgs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteUserHistory(ctx context.Context, in *ReqDeleteUserHistory, opts ...grpc.CallOption) (*ReplyDeleteUserHistory, error) {
	out := new(ReplyDeleteUserHistory)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/DeleteUserHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteChannelMsg(ctx context.Context, in *ReqDeleteChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/DeleteChannelMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteChannelMessage(ctx context.Context, in *ReqDeleteChannelMessage, opts ...grpc.CallOption) (*ReplyDeleteChannelMessage, error) {
	out := new(ReplyDeleteChannelMessage)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/DeleteChannelMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMessage(ctx context.Context, in *ReqGetChannelMessage, opts ...grpc.CallOption) (*ReplyGetChannelMessage, error) {
	out := new(ReplyGetChannelMessage)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMsgsByMsgIds(ctx context.Context, in *ReqGetChannelMsgsByMsgIds, opts ...grpc.CallOption) (*ReplyGetChannelMsgsByMsgIds, error) {
	out := new(ReplyGetChannelMsgsByMsgIds)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelMsgsByMsgIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMsgHistory(ctx context.Context, in *ReqGetChannelMsgHistory, opts ...grpc.CallOption) (*ReplyGetChannelMsgHistory, error) {
	out := new(ReplyGetChannelMsgHistory)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelMsgHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelTopMsg(ctx context.Context, in *ReqGetChannelTopMst, opts ...grpc.CallOption) (*ReplyGetChannelTopMst, error) {
	out := new(ReplyGetChannelTopMst)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelTopMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMediaMessageHistoryByMedia(ctx context.Context, in *ReqGetChannelMediaMessageHistoryByMedia, opts ...grpc.CallOption) (*ReplyGetChannelMediaMessageHistoryByMedia, error) {
	out := new(ReplyGetChannelMediaMessageHistoryByMedia)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelMediaMessageHistoryByMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) InsertOrUpdateChannelMessageDeleteMark(ctx context.Context, in *ReqInsertOrUpdateChannelMessageDeleteMark, opts ...grpc.CallOption) (*ReplyInsertOrUpdateChannelMessageDeleteMark, error) {
	out := new(ReplyInsertOrUpdateChannelMessageDeleteMark)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/InsertOrUpdateChannelMessageDeleteMark", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMessageDeleteMark(ctx context.Context, in *ReqGetChannelMessageDeleteMark, opts ...grpc.CallOption) (*ReplyGetChannelMessageDeleteMark, error) {
	out := new(ReplyGetChannelMessageDeleteMark)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelMessageDeleteMark", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMediaMessageStatisticsByMedia(ctx context.Context, in *ReqGetChannelMediaMessageStatisticsByMedia, opts ...grpc.CallOption) (*ReplyGetChannelMediaMessageStatisticsByMedia, error) {
	out := new(ReplyGetChannelMediaMessageStatisticsByMedia)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelMediaMessageStatisticsByMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) SearchChannelMediaMsgStatisticsByFilter(ctx context.Context, in *ReqSearchChannelMediaMsgByFilter, opts ...grpc.CallOption) (*RespSearchChannelMediaMsgByFilter, error) {
	out := new(RespSearchChannelMediaMsgByFilter)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/SearchChannelMediaMsgStatisticsByFilter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) StoreAdminLog(ctx context.Context, in *ReqStoreAdminLog, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/StoreAdminLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelId(ctx context.Context, in *ReqFindsAdminLogByChannelId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/FindsAdminLogByChannelId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndEventFiltersAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndEventFiltersAndUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsersAndEventFilters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndEventFilters(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndEventFilters, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndEventFilters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndAdminUsers(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsers, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) ChannelMessageAtAdd(ctx context.Context, in *ReqChannelMessageAtAdd, opts ...grpc.CallOption) (*ReplyChannelMessageAtAdd, error) {
	out := new(ReplyChannelMessageAtAdd)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/ChannelMessageAtAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) ChannelMessageAtGet(ctx context.Context, in *ReqChannelMessageAtGet, opts ...grpc.CallOption) (*ReplyChannelMessageAtGet, error) {
	out := new(ReplyChannelMessageAtGet)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/ChannelMessageAtGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) ChannelMessageAtDel(ctx context.Context, in *ReqChannelMessageAtDel, opts ...grpc.CallOption) (*ReplyChannelMessageAtDel, error) {
	out := new(ReplyChannelMessageAtDel)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/ChannelMessageAtDel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) UpdateChannelMsgId(ctx context.Context, in *ReqUpdateChannelMsgId, opts ...grpc.CallOption) (*ReplyUpdateChannelMsgId, error) {
	out := new(ReplyUpdateChannelMsgId)
	err := grpc.Invoke(ctx, "/messagedb.ChannelDB/UpdateChannelMsgId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChannelDB service

type ChannelDBServer interface {
	// =========================================== ChannelMsgId =========================================================
	// 更新超级群 msgid and pts
	UpdateChannelMsgIdAndPts(context.Context, *ReqUpdateChannelMsgIdAndPts) (*ReplyUpdateChannelMsgIdAndPts, error)
	// 直接设置 msgId pts 值 erlang版本导入数据使用
	SetChannelMsgIdAndPts(context.Context, *ReqSetChannelMsgIdAndPts) (*ReplySetChannelMsgIdAndPts, error)
	// 自增超级群 pts
	UpdateChannelPts(context.Context, *ReqUpdateChannelPts) (*ReplyUpdateChannelPts, error)
	// 自增超级群 pts N次
	UpdateChannelPtsWithNum(context.Context, *ReqUpdateChannelPtsWithNum) (*ReplyUpdateChannelPtsWithNum, error)
	// 查询单条 channelmsgid
	GetChannelMsgId(context.Context, *ReqGetChannelMsgId) (*ReplyGetChannelMsgId, error)
	// =========================================== ptsHandle =========================================================
	// 存储 pts 信息 只需要存储到boltdb即可，不用存储到tidb
	StoreChannelPtsHandle(context.Context, *ReqStoreChannelPtsHandle) (*ReplyErr, error)
	// 批量存储pts信息
	BatchStoreChannelPtsHandle(context.Context, *ReqBatchStoreChannelPtsHandle) (*ReplyErr, error)
	// 获取某个超级群的diff
	GetChannelDiffByPts(context.Context, *ReqGetChannelDiffByPts) (*ReplyGetChannelDiffByPts, error)
	// 获取最后的PtsHandle
	GetChannelLastPtsHandle(context.Context, *ReqGetChannelLastPtsHandle) (*ReplyGetChannelLastPtsHandle, error)
	// 删除ptsHandle
	DeleteChannelPtsHandle(context.Context, *ReqDeleteChannelPtsHandle) (*ReplyDeleteChannelPtsHandle, error)
	// =========================================== ChannelMsg =========================================================
	// 新增或者更新消息
	InsertOrUpdateChannelMsg(context.Context, *ReqInsertOrUpdateChannelMsg) (*ReplyErr, error)
	// 更新消息内容
	UpdateChannelMsg(context.Context, *ReqUpdateChannelMsg) (*ReplyErr, error)
	// 批量存储消息
	BatchInsertOrUpdateChannelMsg(context.Context, *ReqBatchInsertOrUpdateChannelMsg) (*ReplyErr, error)
	// 删除信息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteMsgs(context.Context, *ReqDeleteMsgs) (*ReplyDeleteMsgs, error)
	// 超级群中删除指定用户信息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteUserHistory(context.Context, *ReqDeleteUserHistory) (*ReplyDeleteUserHistory, error)
	// 删除超级群所有消息
	DeleteChannelMsg(context.Context, *ReqDeleteChannelMsg) (*ReplyErr, error)
	// 删除单条超级群消息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteChannelMessage(context.Context, *ReqDeleteChannelMessage) (*ReplyDeleteChannelMessage, error)
	// 获取指定msgid信息
	GetChannelMessage(context.Context, *ReqGetChannelMessage) (*ReplyGetChannelMessage, error)
	// 获取一组信息
	GetChannelMsgsByMsgIds(context.Context, *ReqGetChannelMsgsByMsgIds) (*ReplyGetChannelMsgsByMsgIds, error)
	// 获取历史
	GetChannelMsgHistory(context.Context, *ReqGetChannelMsgHistory) (*ReplyGetChannelMsgHistory, error)
	// 获取超级群中最新的一条消息
	GetChannelTopMsg(context.Context, *ReqGetChannelTopMst) (*ReplyGetChannelTopMst, error)
	// 分页查询媒体消息
	GetChannelMediaMessageHistoryByMedia(context.Context, *ReqGetChannelMediaMessageHistoryByMedia) (*ReplyGetChannelMediaMessageHistoryByMedia, error)
	// 新增或者修改 超级群 标记删除记录
	InsertOrUpdateChannelMessageDeleteMark(context.Context, *ReqInsertOrUpdateChannelMessageDeleteMark) (*ReplyInsertOrUpdateChannelMessageDeleteMark, error)
	// 查询 超级群 标记删除记录
	GetChannelMessageDeleteMark(context.Context, *ReqGetChannelMessageDeleteMark) (*ReplyGetChannelMessageDeleteMark, error)
	// =========================================== ChannelMediaMessageStatistics =========================================================
	// 根据channelId 获取ChannelMediaMessageStatistics
	GetChannelMediaMessageStatisticsByMedia(context.Context, *ReqGetChannelMediaMessageStatisticsByMedia) (*ReplyGetChannelMediaMessageStatisticsByMedia, error)
	// Begin added by six xionger at 2020-03-03 for messages.search
	SearchChannelMediaMsgStatisticsByFilter(context.Context, *ReqSearchChannelMediaMsgByFilter) (*RespSearchChannelMediaMsgByFilter, error)
	// =========================================== channelAdminLog =========================================================
	// 存储adminlog
	StoreAdminLog(context.Context, *ReqStoreAdminLog) (*ReplyErr, error)
	// 查询Adminlog 条件 超级群ID
	FindsAdminLogByChannelId(context.Context, *ReqFindsAdminLogByChannelId) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合 过滤集合 用户ID
	FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(context.Context, *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 过滤集合 用户ID
	FindsAdminLogByChannelIdAndEventFiltersAndUserId(context.Context, *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 用户ID
	FindsAdminLogByChannelIdAndUserId(context.Context, *ReqFindsAdminLogByChannelIdAndUserId) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合 过滤集合
	FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(context.Context, *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 过滤集合
	FindsAdminLogByChannelIdAndEventFilters(context.Context, *ReqFindsAdminLogByChannelIdAndEventFilters) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合
	FindsAdminLogByChannelIdAndAdminUsers(context.Context, *ReqFindsAdminLogByChannelIdAndAdminUsers) (*ReplyFindsAdminLog, error)
	// add for channeldb.channel_message_at
	ChannelMessageAtAdd(context.Context, *ReqChannelMessageAtAdd) (*ReplyChannelMessageAtAdd, error)
	// get for channeldb.channel_message_at
	ChannelMessageAtGet(context.Context, *ReqChannelMessageAtGet) (*ReplyChannelMessageAtGet, error)
	// delete for channeldb.channel_message_at
	ChannelMessageAtDel(context.Context, *ReqChannelMessageAtDel) (*ReplyChannelMessageAtDel, error)
	// Begin added by MarkLi at 2020-07-16 for 更新超级群 MsgId
	UpdateChannelMsgId(context.Context, *ReqUpdateChannelMsgId) (*ReplyUpdateChannelMsgId, error)
}

func RegisterChannelDBServer(s *grpc.Server, srv ChannelDBServer) {
	s.RegisterService(&_ChannelDB_serviceDesc, srv)
}

func _ChannelDB_UpdateChannelMsgIdAndPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelMsgIdAndPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelMsgIdAndPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/UpdateChannelMsgIdAndPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelMsgIdAndPts(ctx, req.(*ReqUpdateChannelMsgIdAndPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_SetChannelMsgIdAndPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetChannelMsgIdAndPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).SetChannelMsgIdAndPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/SetChannelMsgIdAndPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).SetChannelMsgIdAndPts(ctx, req.(*ReqSetChannelMsgIdAndPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_UpdateChannelPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/UpdateChannelPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelPts(ctx, req.(*ReqUpdateChannelPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_UpdateChannelPtsWithNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelPtsWithNum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelPtsWithNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/UpdateChannelPtsWithNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelPtsWithNum(ctx, req.(*ReqUpdateChannelPtsWithNum))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMsgId(ctx, req.(*ReqGetChannelMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_StoreChannelPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoreChannelPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).StoreChannelPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/StoreChannelPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).StoreChannelPtsHandle(ctx, req.(*ReqStoreChannelPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_BatchStoreChannelPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBatchStoreChannelPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).BatchStoreChannelPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/BatchStoreChannelPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).BatchStoreChannelPtsHandle(ctx, req.(*ReqBatchStoreChannelPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelDiffByPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelDiffByPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelDiffByPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelDiffByPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelDiffByPts(ctx, req.(*ReqGetChannelDiffByPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelLastPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelLastPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelLastPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelLastPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelLastPtsHandle(ctx, req.(*ReqGetChannelLastPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteChannelPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteChannelPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/DeleteChannelPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteChannelPtsHandle(ctx, req.(*ReqDeleteChannelPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_InsertOrUpdateChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInsertOrUpdateChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).InsertOrUpdateChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/InsertOrUpdateChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).InsertOrUpdateChannelMsg(ctx, req.(*ReqInsertOrUpdateChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_UpdateChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/UpdateChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelMsg(ctx, req.(*ReqUpdateChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_BatchInsertOrUpdateChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBatchInsertOrUpdateChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).BatchInsertOrUpdateChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/BatchInsertOrUpdateChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).BatchInsertOrUpdateChannelMsg(ctx, req.(*ReqBatchInsertOrUpdateChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteMsgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteMsgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteMsgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/DeleteMsgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteMsgs(ctx, req.(*ReqDeleteMsgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteUserHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteUserHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteUserHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/DeleteUserHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteUserHistory(ctx, req.(*ReqDeleteUserHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/DeleteChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteChannelMsg(ctx, req.(*ReqDeleteChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/DeleteChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteChannelMessage(ctx, req.(*ReqDeleteChannelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMessage(ctx, req.(*ReqGetChannelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMsgsByMsgIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMsgsByMsgIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMsgsByMsgIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelMsgsByMsgIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMsgsByMsgIds(ctx, req.(*ReqGetChannelMsgsByMsgIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMsgHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMsgHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMsgHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelMsgHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMsgHistory(ctx, req.(*ReqGetChannelMsgHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelTopMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelTopMst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelTopMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelTopMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelTopMsg(ctx, req.(*ReqGetChannelTopMst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMediaMessageHistoryByMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMediaMessageHistoryByMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMediaMessageHistoryByMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelMediaMessageHistoryByMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMediaMessageHistoryByMedia(ctx, req.(*ReqGetChannelMediaMessageHistoryByMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_InsertOrUpdateChannelMessageDeleteMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInsertOrUpdateChannelMessageDeleteMark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).InsertOrUpdateChannelMessageDeleteMark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/InsertOrUpdateChannelMessageDeleteMark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).InsertOrUpdateChannelMessageDeleteMark(ctx, req.(*ReqInsertOrUpdateChannelMessageDeleteMark))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMessageDeleteMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMessageDeleteMark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMessageDeleteMark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelMessageDeleteMark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMessageDeleteMark(ctx, req.(*ReqGetChannelMessageDeleteMark))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMediaMessageStatisticsByMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMediaMessageStatisticsByMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMediaMessageStatisticsByMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelMediaMessageStatisticsByMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMediaMessageStatisticsByMedia(ctx, req.(*ReqGetChannelMediaMessageStatisticsByMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_SearchChannelMediaMsgStatisticsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSearchChannelMediaMsgByFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).SearchChannelMediaMsgStatisticsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/SearchChannelMediaMsgStatisticsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).SearchChannelMediaMsgStatisticsByFilter(ctx, req.(*ReqSearchChannelMediaMsgByFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_StoreAdminLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoreAdminLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).StoreAdminLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/StoreAdminLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).StoreAdminLog(ctx, req.(*ReqStoreAdminLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/FindsAdminLogByChannelId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelId(ctx, req.(*ReqFindsAdminLogByChannelId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(ctx, req.(*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndEventFiltersAndUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndEventFiltersAndUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndEventFiltersAndUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndEventFiltersAndUserId(ctx, req.(*ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndUserId(ctx, req.(*ReqFindsAdminLogByChannelIdAndUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndAdminUsersAndEventFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsersAndEventFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(ctx, req.(*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndEventFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndEventFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndEventFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndEventFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndEventFilters(ctx, req.(*ReqFindsAdminLogByChannelIdAndEventFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndAdminUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndAdminUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsers(ctx, req.(*ReqFindsAdminLogByChannelIdAndAdminUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_ChannelMessageAtAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelMessageAtAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).ChannelMessageAtAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/ChannelMessageAtAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).ChannelMessageAtAdd(ctx, req.(*ReqChannelMessageAtAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_ChannelMessageAtGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelMessageAtGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).ChannelMessageAtGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/ChannelMessageAtGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).ChannelMessageAtGet(ctx, req.(*ReqChannelMessageAtGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_ChannelMessageAtDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelMessageAtDel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).ChannelMessageAtDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/ChannelMessageAtDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).ChannelMessageAtDel(ctx, req.(*ReqChannelMessageAtDel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_UpdateChannelMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/UpdateChannelMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelMsgId(ctx, req.(*ReqUpdateChannelMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChannelDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messagedb.ChannelDB",
	HandlerType: (*ChannelDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateChannelMsgIdAndPts",
			Handler:    _ChannelDB_UpdateChannelMsgIdAndPts_Handler,
		},
		{
			MethodName: "SetChannelMsgIdAndPts",
			Handler:    _ChannelDB_SetChannelMsgIdAndPts_Handler,
		},
		{
			MethodName: "UpdateChannelPts",
			Handler:    _ChannelDB_UpdateChannelPts_Handler,
		},
		{
			MethodName: "UpdateChannelPtsWithNum",
			Handler:    _ChannelDB_UpdateChannelPtsWithNum_Handler,
		},
		{
			MethodName: "GetChannelMsgId",
			Handler:    _ChannelDB_GetChannelMsgId_Handler,
		},
		{
			MethodName: "StoreChannelPtsHandle",
			Handler:    _ChannelDB_StoreChannelPtsHandle_Handler,
		},
		{
			MethodName: "BatchStoreChannelPtsHandle",
			Handler:    _ChannelDB_BatchStoreChannelPtsHandle_Handler,
		},
		{
			MethodName: "GetChannelDiffByPts",
			Handler:    _ChannelDB_GetChannelDiffByPts_Handler,
		},
		{
			MethodName: "GetChannelLastPtsHandle",
			Handler:    _ChannelDB_GetChannelLastPtsHandle_Handler,
		},
		{
			MethodName: "DeleteChannelPtsHandle",
			Handler:    _ChannelDB_DeleteChannelPtsHandle_Handler,
		},
		{
			MethodName: "InsertOrUpdateChannelMsg",
			Handler:    _ChannelDB_InsertOrUpdateChannelMsg_Handler,
		},
		{
			MethodName: "UpdateChannelMsg",
			Handler:    _ChannelDB_UpdateChannelMsg_Handler,
		},
		{
			MethodName: "BatchInsertOrUpdateChannelMsg",
			Handler:    _ChannelDB_BatchInsertOrUpdateChannelMsg_Handler,
		},
		{
			MethodName: "DeleteMsgs",
			Handler:    _ChannelDB_DeleteMsgs_Handler,
		},
		{
			MethodName: "DeleteUserHistory",
			Handler:    _ChannelDB_DeleteUserHistory_Handler,
		},
		{
			MethodName: "DeleteChannelMsg",
			Handler:    _ChannelDB_DeleteChannelMsg_Handler,
		},
		{
			MethodName: "DeleteChannelMessage",
			Handler:    _ChannelDB_DeleteChannelMessage_Handler,
		},
		{
			MethodName: "GetChannelMessage",
			Handler:    _ChannelDB_GetChannelMessage_Handler,
		},
		{
			MethodName: "GetChannelMsgsByMsgIds",
			Handler:    _ChannelDB_GetChannelMsgsByMsgIds_Handler,
		},
		{
			MethodName: "GetChannelMsgHistory",
			Handler:    _ChannelDB_GetChannelMsgHistory_Handler,
		},
		{
			MethodName: "GetChannelTopMsg",
			Handler:    _ChannelDB_GetChannelTopMsg_Handler,
		},
		{
			MethodName: "GetChannelMediaMessageHistoryByMedia",
			Handler:    _ChannelDB_GetChannelMediaMessageHistoryByMedia_Handler,
		},
		{
			MethodName: "InsertOrUpdateChannelMessageDeleteMark",
			Handler:    _ChannelDB_InsertOrUpdateChannelMessageDeleteMark_Handler,
		},
		{
			MethodName: "GetChannelMessageDeleteMark",
			Handler:    _ChannelDB_GetChannelMessageDeleteMark_Handler,
		},
		{
			MethodName: "GetChannelMediaMessageStatisticsByMedia",
			Handler:    _ChannelDB_GetChannelMediaMessageStatisticsByMedia_Handler,
		},
		{
			MethodName: "SearchChannelMediaMsgStatisticsByFilter",
			Handler:    _ChannelDB_SearchChannelMediaMsgStatisticsByFilter_Handler,
		},
		{
			MethodName: "StoreAdminLog",
			Handler:    _ChannelDB_StoreAdminLog_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelId",
			Handler:    _ChannelDB_FindsAdminLogByChannelId_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndEventFiltersAndUserId",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndEventFiltersAndUserId_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndUserId",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndUserId_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndAdminUsersAndEventFilters",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndAdminUsersAndEventFilters_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndEventFilters",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndEventFilters_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndAdminUsers",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndAdminUsers_Handler,
		},
		{
			MethodName: "ChannelMessageAtAdd",
			Handler:    _ChannelDB_ChannelMessageAtAdd_Handler,
		},
		{
			MethodName: "ChannelMessageAtGet",
			Handler:    _ChannelDB_ChannelMessageAtGet_Handler,
		},
		{
			MethodName: "ChannelMessageAtDel",
			Handler:    _ChannelDB_ChannelMessageAtDel_Handler,
		},
		{
			MethodName: "UpdateChannelMsgId",
			Handler:    _ChannelDB_UpdateChannelMsgId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/pbmessagedb/messagedb.proto",
}

// Client API for SearchMsgServer service

type SearchMsgServerClient interface {
	// 插入单条 usermsg 内容
	ShInsertOrUpdateUserMsg(ctx context.Context, in *UserMsg, opts ...grpc.CallOption) (*ReplyNull, error)
	// 删除用户信息
	ShDeleteUserMsg(ctx context.Context, in *UserIdAndMsgId, opts ...grpc.CallOption) (*ReplyNull, error)
	// 批量删除用户信息
	ShBatchDeleteUserMsg(ctx context.Context, in *UserIdAndWithIdAndMsgIds, opts ...grpc.CallOption) (*ReplyNull, error)
	// 删除信息
	ShDeleteUserMsgByUserIdAndWithIdAndEncry(ctx context.Context, in *UserIdAndWithIdAndTypeAndEncry, opts ...grpc.CallOption) (*ReplyNull, error)
	// 新增或者更新消息
	ShInsertOrUpdateChannelMsg(ctx context.Context, in *UserMsg, opts ...grpc.CallOption) (*ReplyNull, error)
	// 删除信息
	ShDeleteMsgs(ctx context.Context, in *ChannelIdAndMsgIds, opts ...grpc.CallOption) (*MsgId, error)
	// 超级群中删除指定用户信息
	ShDeleteUserHistory(ctx context.Context, in *ReqShDeleteUserHistory, opts ...grpc.CallOption) (*MsgsAndMaxId, error)
}

type searchMsgServerClient struct {
	cc *grpc.ClientConn
}

func NewSearchMsgServerClient(cc *grpc.ClientConn) SearchMsgServerClient {
	return &searchMsgServerClient{cc}
}

func (c *searchMsgServerClient) ShInsertOrUpdateUserMsg(ctx context.Context, in *UserMsg, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := grpc.Invoke(ctx, "/messagedb.SearchMsgServer/ShInsertOrUpdateUserMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchMsgServerClient) ShDeleteUserMsg(ctx context.Context, in *UserIdAndMsgId, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := grpc.Invoke(ctx, "/messagedb.SearchMsgServer/ShDeleteUserMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchMsgServerClient) ShBatchDeleteUserMsg(ctx context.Context, in *UserIdAndWithIdAndMsgIds, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := grpc.Invoke(ctx, "/messagedb.SearchMsgServer/ShBatchDeleteUserMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchMsgServerClient) ShDeleteUserMsgByUserIdAndWithIdAndEncry(ctx context.Context, in *UserIdAndWithIdAndTypeAndEncry, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := grpc.Invoke(ctx, "/messagedb.SearchMsgServer/ShDeleteUserMsgByUserIdAndWithIdAndEncry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchMsgServerClient) ShInsertOrUpdateChannelMsg(ctx context.Context, in *UserMsg, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := grpc.Invoke(ctx, "/messagedb.SearchMsgServer/ShInsertOrUpdateChannelMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchMsgServerClient) ShDeleteMsgs(ctx context.Context, in *ChannelIdAndMsgIds, opts ...grpc.CallOption) (*MsgId, error) {
	out := new(MsgId)
	err := grpc.Invoke(ctx, "/messagedb.SearchMsgServer/ShDeleteMsgs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchMsgServerClient) ShDeleteUserHistory(ctx context.Context, in *ReqShDeleteUserHistory, opts ...grpc.CallOption) (*MsgsAndMaxId, error) {
	out := new(MsgsAndMaxId)
	err := grpc.Invoke(ctx, "/messagedb.SearchMsgServer/ShDeleteUserHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SearchMsgServer service

type SearchMsgServerServer interface {
	// 插入单条 usermsg 内容
	ShInsertOrUpdateUserMsg(context.Context, *UserMsg) (*ReplyNull, error)
	// 删除用户信息
	ShDeleteUserMsg(context.Context, *UserIdAndMsgId) (*ReplyNull, error)
	// 批量删除用户信息
	ShBatchDeleteUserMsg(context.Context, *UserIdAndWithIdAndMsgIds) (*ReplyNull, error)
	// 删除信息
	ShDeleteUserMsgByUserIdAndWithIdAndEncry(context.Context, *UserIdAndWithIdAndTypeAndEncry) (*ReplyNull, error)
	// 新增或者更新消息
	ShInsertOrUpdateChannelMsg(context.Context, *UserMsg) (*ReplyNull, error)
	// 删除信息
	ShDeleteMsgs(context.Context, *ChannelIdAndMsgIds) (*MsgId, error)
	// 超级群中删除指定用户信息
	ShDeleteUserHistory(context.Context, *ReqShDeleteUserHistory) (*MsgsAndMaxId, error)
}

func RegisterSearchMsgServerServer(s *grpc.Server, srv SearchMsgServerServer) {
	s.RegisterService(&_SearchMsgServer_serviceDesc, srv)
}

func _SearchMsgServer_ShInsertOrUpdateUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchMsgServerServer).ShInsertOrUpdateUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.SearchMsgServer/ShInsertOrUpdateUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchMsgServerServer).ShInsertOrUpdateUserMsg(ctx, req.(*UserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchMsgServer_ShDeleteUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdAndMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchMsgServerServer).ShDeleteUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.SearchMsgServer/ShDeleteUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchMsgServerServer).ShDeleteUserMsg(ctx, req.(*UserIdAndMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchMsgServer_ShBatchDeleteUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdAndWithIdAndMsgIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchMsgServerServer).ShBatchDeleteUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.SearchMsgServer/ShBatchDeleteUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchMsgServerServer).ShBatchDeleteUserMsg(ctx, req.(*UserIdAndWithIdAndMsgIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchMsgServer_ShDeleteUserMsgByUserIdAndWithIdAndEncry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdAndWithIdAndTypeAndEncry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchMsgServerServer).ShDeleteUserMsgByUserIdAndWithIdAndEncry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.SearchMsgServer/ShDeleteUserMsgByUserIdAndWithIdAndEncry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchMsgServerServer).ShDeleteUserMsgByUserIdAndWithIdAndEncry(ctx, req.(*UserIdAndWithIdAndTypeAndEncry))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchMsgServer_ShInsertOrUpdateChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchMsgServerServer).ShInsertOrUpdateChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.SearchMsgServer/ShInsertOrUpdateChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchMsgServerServer).ShInsertOrUpdateChannelMsg(ctx, req.(*UserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchMsgServer_ShDeleteMsgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelIdAndMsgIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchMsgServerServer).ShDeleteMsgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.SearchMsgServer/ShDeleteMsgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchMsgServerServer).ShDeleteMsgs(ctx, req.(*ChannelIdAndMsgIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchMsgServer_ShDeleteUserHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqShDeleteUserHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchMsgServerServer).ShDeleteUserHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.SearchMsgServer/ShDeleteUserHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchMsgServerServer).ShDeleteUserHistory(ctx, req.(*ReqShDeleteUserHistory))
	}
	return interceptor(ctx, in, info, handler)
}

var _SearchMsgServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messagedb.SearchMsgServer",
	HandlerType: (*SearchMsgServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShInsertOrUpdateUserMsg",
			Handler:    _SearchMsgServer_ShInsertOrUpdateUserMsg_Handler,
		},
		{
			MethodName: "ShDeleteUserMsg",
			Handler:    _SearchMsgServer_ShDeleteUserMsg_Handler,
		},
		{
			MethodName: "ShBatchDeleteUserMsg",
			Handler:    _SearchMsgServer_ShBatchDeleteUserMsg_Handler,
		},
		{
			MethodName: "ShDeleteUserMsgByUserIdAndWithIdAndEncry",
			Handler:    _SearchMsgServer_ShDeleteUserMsgByUserIdAndWithIdAndEncry_Handler,
		},
		{
			MethodName: "ShInsertOrUpdateChannelMsg",
			Handler:    _SearchMsgServer_ShInsertOrUpdateChannelMsg_Handler,
		},
		{
			MethodName: "ShDeleteMsgs",
			Handler:    _SearchMsgServer_ShDeleteMsgs_Handler,
		},
		{
			MethodName: "ShDeleteUserHistory",
			Handler:    _SearchMsgServer_ShDeleteUserHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/pbmessagedb/messagedb.proto",
}

func (m *ReplyNull) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyNull) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReplyUpdateUserDialogUpdateDate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUpdateUserDialogUpdateDate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReplyUpdateUserDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUpdateUserDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ChannelIdAndLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelIdAndLimit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *ChannelIdAndUserIdAndLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelIdAndUserIdAndLimit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *ChannelIdAndAdminUsersAndEventFiltersAndUserId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelIdAndAdminUsersAndEventFiltersAndUserId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if len(m.AdminUsers) > 0 {
		dAtA2 := make([]byte, len(m.AdminUsers)*10)
		var j1 int
		for _, num1 := range m.AdminUsers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.EventFilters) > 0 {
		dAtA4 := make([]byte, len(m.EventFilters)*10)
		var j3 int
		for _, num1 := range m.EventFilters {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.Limit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *ChannelIdAndAdminUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelIdAndAdminUsers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.AdminUsers) > 0 {
		dAtA6 := make([]byte, len(m.AdminUsers)*10)
		var j5 int
		for _, num1 := range m.AdminUsers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *ChannelIdAndEventFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelIdAndEventFilters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.EventFilters) > 0 {
		dAtA8 := make([]byte, len(m.EventFilters)*10)
		var j7 int
		for _, num1 := range m.EventFilters {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *ChannelIdAndAdminUsersAndEventFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelIdAndAdminUsersAndEventFilters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.AdminUsers) > 0 {
		dAtA10 := make([]byte, len(m.AdminUsers)*10)
		var j9 int
		for _, num1 := range m.AdminUsers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if len(m.EventFilters) > 0 {
		dAtA12 := make([]byte, len(m.EventFilters)*10)
		var j11 int
		for _, num1 := range m.EventFilters {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j11))
		i += copy(dAtA[i:], dAtA12[:j11])
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *ChannelIdAndEventFiltersAndUserId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelIdAndEventFiltersAndUserId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if len(m.EventFilters) > 0 {
		dAtA14 := make([]byte, len(m.EventFilters)*10)
		var j13 int
		for _, num1 := range m.EventFilters {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j13))
		i += copy(dAtA[i:], dAtA14[:j13])
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *ChannelMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Id))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Pts))
	}
	if m.LastDate != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.LastDate))
	}
	return i, nil
}

func (m *ChannelId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	return i, nil
}

func (m *ChannelIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelIds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelIds) > 0 {
		dAtA16 := make([]byte, len(m.ChannelIds)*10)
		var j15 int
		for _, num1 := range m.ChannelIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j15))
		i += copy(dAtA[i:], dAtA16[:j15])
	}
	return i, nil
}

func (m *ChannelIdAndMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelIdAndMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	return i, nil
}

func (m *ChannelIdAndMsgIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelIdAndMsgIds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.MsgIds) > 0 {
		dAtA18 := make([]byte, len(m.MsgIds)*10)
		var j17 int
		for _, num1 := range m.MsgIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j17))
		i += copy(dAtA[i:], dAtA18[:j17])
	}
	return i, nil
}

func (m *ChannelIdAndUserId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelIdAndUserId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *DialogIsCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialogIsCreated) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DialogIdCreated {
		dAtA[i] = 0x8
		i++
		if m.DialogIdCreated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ChannelIdAndNum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelIdAndNum) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Number != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Number))
	}
	return i, nil
}

func (m *MsgsAndMaxId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgsAndMaxId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MaxMsgId))
	}
	if len(m.Msgs) > 0 {
		dAtA20 := make([]byte, len(m.Msgs)*10)
		var j19 int
		for _, num1 := range m.Msgs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j19))
		i += copy(dAtA[i:], dAtA20[:j19])
	}
	return i, nil
}

func (m *ChannelDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.TopMessage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.TopMessage))
	}
	if m.MaxReadInId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MaxReadInId))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Encry))
	}
	return i, nil
}

func (m *ChannelDialogAndMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelDialogAndMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelDialog != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelDialog.Size()))
		n21, err := m.ChannelDialog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.ChannelMsg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelMsg.Size()))
		n22, err := m.ChannelMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *ChannelDialogAndMsgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelDialogAndMsgs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelDialogAndMsgs) > 0 {
		for _, msg := range m.ChannelDialogAndMsgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReqForWardUserMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqForWardUserMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithIdType))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Encry))
	}
	if len(m.MsgIds) > 0 {
		dAtA24 := make([]byte, len(m.MsgIds)*10)
		var j23 int
		for _, num1 := range m.MsgIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA24[j23] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j23++
			}
			dAtA24[j23] = uint8(num)
			j23++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j23))
		i += copy(dAtA[i:], dAtA24[:j23])
	}
	return i, nil
}

func (m *ReqUserMsgHis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUserMsgHis) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Selfid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Selfid))
	}
	if m.Withid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Withid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Type))
	}
	if m.OffsetId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.OffsetId))
	}
	if m.OffsetDate != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.OffsetDate))
	}
	if m.AddOffset != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.AddOffset))
	}
	if m.MinId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MinId))
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MaxId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Encry))
	}
	return i, nil
}

func (m *DialogTopMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialogTopMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.FromId))
	}
	if m.TopMessage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.TopMessage))
	}
	return i, nil
}

func (m *ForWardUserMsgList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForWardUserMsgList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ForWardUserMsg) > 0 {
		for _, msg := range m.ForWardUserMsg {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserMsgList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMsgList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserMsgs) > 0 {
		for _, msg := range m.UserMsgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Pts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Pts))
	}
	return i, nil
}

func (m *UserMsgListAndPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMsgListAndPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserMsgs) > 0 {
		for _, msg := range m.UserMsgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Pts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Pts))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *UserDialogList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDialogList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserDialogs) > 0 {
		for _, msg := range m.UserDialogs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserDialogAndMsgList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDialogAndMsgList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserDialogAndMsgs) > 0 {
		for _, msg := range m.UserDialogAndMsgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *ReplyGetPingedDialogAndMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetPingedDialogAndMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DialogMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.DialogMsg.Size()))
		n25, err := m.DialogMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.TopPeerId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.TopPeerId))
	}
	if m.TopPeerType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.TopPeerType))
	}
	if m.TopMsgId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.TopMsgId))
	}
	if m.UnreadMutedPeersCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UnreadMutedPeersCount))
	}
	if m.UnreadUnmutedPeersCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UnreadUnmutedPeersCount))
	}
	if m.UnreadMutedMessagesCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UnreadMutedMessagesCount))
	}
	if m.UnreadUnmutedMessagesCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UnreadUnmutedMessagesCount))
	}
	return i, nil
}

func (m *UserDialogAndMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDialogAndMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserDialog != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserDialog.Size()))
		n26, err := m.UserDialog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.UserMsg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserMsg.Size()))
		n27, err := m.UserMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *ReqInsertOrUpdateUserMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqInsertOrUpdateUserMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n28, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *ReqIncreaseUserLocalId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqIncreaseUserLocalId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n29, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *ReplyIncreaseUserLocalId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyIncreaseUserLocalId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserLocalId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserLocalId.Size()))
		n30, err := m.UserLocalId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}

func (m *ReqGetCurrentUserLocalId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetCurrentUserLocalId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n31, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *ReplyGetCurrentUserLocalId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetCurrentUserLocalId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserLocalId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserLocalId.Size()))
		n32, err := m.UserLocalId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}

func (m *ReqIncreaseChannelLocalId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqIncreaseChannelLocalId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n33, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func (m *ReplyIncreaseChannelLocalId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyIncreaseChannelLocalId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelLocalId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelLocalId.Size()))
		n34, err := m.ChannelLocalId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n35, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func (m *ReqGetCurrentChannelLocalId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetCurrentChannelLocalId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n36, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}

func (m *ReplyGetCurrentChannelLocalId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetCurrentChannelLocalId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelLocalId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelLocalId.Size()))
		n37, err := m.ChannelLocalId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n38, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}

func (m *ReqIncreaseUserMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqIncreaseUserMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.MsgIdDelta != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgIdDelta))
	}
	if m.PtsDelta != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.PtsDelta))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n39, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}

func (m *ReqSetUserMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSetUserMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMsgId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserMsgId.Size()))
		n40, err := m.UserMsgId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n41, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}

func (m *ReqSetMsgIdImported) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSetMsgIdImported) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgIdImported != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgIdImported.Size()))
		n42, err := m.MsgIdImported.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n43, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}

func (m *ReplySetMsgIdImported) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplySetMsgIdImported) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqCheckMsgIdImported) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCheckMsgIdImported) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserIdOrChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserIdOrChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n44, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}

func (m *ReplyCheckMsgIdImported) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyCheckMsgIdImported) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgIdImported != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgIdImported.Size()))
		n45, err := m.MsgIdImported.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}

func (m *ReqGetUserMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetUserMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n46, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}

func (m *ReqUpdateUserPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateUserPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n47, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}

func (m *ReqBatchUpdatUserPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBatchUpdatUserPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Number != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Number))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n48, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}

func (m *ReqStorePtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqStorePtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PtsHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.PtsHandle.Size()))
		n49, err := m.PtsHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n50, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}

func (m *ReqGetDiffByPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetDiffByPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Pts))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n51, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}

func (m *ReplyGetDiffByPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetDiffByPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		for _, b := range m.Msg {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.LastPts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.LastPts))
	}
	if m.ToLong {
		dAtA[i] = 0x18
		i++
		if m.ToLong {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.UserMsgs) > 0 {
		for _, msg := range m.UserMsgs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Date != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Date))
	}
	return i, nil
}

func (m *ReqGetActionDiff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetActionDiff) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Pts))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n52, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}

func (m *ReqDeletePtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeletePtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if len(m.PtsSli) > 0 {
		dAtA54 := make([]byte, len(m.PtsSli)*10)
		var j53 int
		for _, num1 := range m.PtsSli {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA54[j53] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j53++
			}
			dAtA54[j53] = uint8(num)
			j53++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j53))
		i += copy(dAtA[i:], dAtA54[:j53])
	}
	return i, nil
}

func (m *ReqClearPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqClearPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.MaxPts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MaxPts))
	}
	return i, nil
}

func (m *ReplyClearPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyClearPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReplyDeletePtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeletePtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReplyGetActionDiff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetActionDiff) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PtsHandles) > 0 {
		for _, msg := range m.PtsHandles {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReqStoreOtherInfoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqStoreOtherInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OtherInfoMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.OtherInfoMsg.Size()))
		n55, err := m.OtherInfoMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n56, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	return i, nil
}

func (m *ReqBatchStoreOtherInfoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBatchStoreOtherInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OtherInfoMsgs) > 0 {
		for _, msg := range m.OtherInfoMsgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n57, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	return i, nil
}

func (m *ReqGetOtherInfoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetOtherInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Date))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n58, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}

func (m *ReplyGetOtherInfoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetOtherInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OtherInfoMsgs) > 0 {
		for _, msg := range m.OtherInfoMsgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReqInsertOrUpdateUserMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqInsertOrUpdateUserMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserMsg.Size()))
		n59, err := m.UserMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n60, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	return i, nil
}

func (m *ReqGetForwardUserMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetForwardUserMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithIdType))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Encry))
	}
	if len(m.MsgIds) > 0 {
		dAtA62 := make([]byte, len(m.MsgIds)*10)
		var j61 int
		for _, num1 := range m.MsgIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA62[j61] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j61++
			}
			dAtA62[j61] = uint8(num)
			j61++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j61))
		i += copy(dAtA[i:], dAtA62[:j61])
	}
	if m.Debug != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n63, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	return i, nil
}

func (m *ReqGetUserMsgHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetUserMsgHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Selfid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Selfid))
	}
	if m.Withid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Withid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Type))
	}
	if m.OffsetId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.OffsetId))
	}
	if m.OffsetDate != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.OffsetDate))
	}
	if m.AddOffset != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.AddOffset))
	}
	if m.MinId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MinId))
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MaxId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Encry))
	}
	if m.DeletMark != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.DeletMark))
	}
	if m.Debug != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n64, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}

func (m *ReqGetUserMsgUUID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetUserMsgUUID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n65, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	return i, nil
}

func (m *ReqGetUserMsgIdByUUID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetUserMsgIdByUUID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Userid))
	}
	if m.UUID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UUID))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n66, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	return i, nil
}

func (m *ReqGetUserMsgListByUUIDs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetUserMsgListByUUIDs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Userid))
	}
	if len(m.UUIDS) > 0 {
		dAtA68 := make([]byte, len(m.UUIDS)*10)
		var j67 int
		for _, num1 := range m.UUIDS {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA68[j67] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j67++
			}
			dAtA68[j67] = uint8(num)
			j67++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j67))
		i += copy(dAtA[i:], dAtA68[:j67])
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n69, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	return i, nil
}

func (m *ReqDeleteUserMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteUserMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n70, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	return i, nil
}

func (m *ReqBatchDeleteUserMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBatchDeleteUserMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if len(m.MsgIds) > 0 {
		dAtA72 := make([]byte, len(m.MsgIds)*10)
		var j71 int
		for _, num1 := range m.MsgIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA72[j71] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j71++
			}
			dAtA72[j71] = uint8(num)
			j71++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j71))
		i += copy(dAtA[i:], dAtA72[:j71])
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n73, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	return i, nil
}

func (m *ReqGetOneUserMsgByUserIdAndMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetOneUserMsgByUserIdAndMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n74, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	return i, nil
}

func (m *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithIdType))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Encry))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n75, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}

func (m *ReqClearHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqClearHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithIdType))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Encry))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n76, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}

func (m *GetMessageHistoryPageByMediaConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMessageHistoryPageByMediaConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithType))
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MaxId))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Encry))
	}
	if len(m.Medias) > 0 {
		dAtA78 := make([]byte, len(m.Medias)*10)
		var j77 int
		for _, num1 := range m.Medias {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA78[j77] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j77++
			}
			dAtA78[j77] = uint8(num)
			j77++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j77))
		i += copy(dAtA[i:], dAtA78[:j77])
	}
	if m.Limit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *ReqGetMessageHistoryPageByMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetMessageHistoryPageByMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GetMessageHistoryPageByMediaConfig != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.GetMessageHistoryPageByMediaConfig.Size()))
		n79, err := m.GetMessageHistoryPageByMediaConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n79
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n80, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	return i, nil
}

func (m *ReqInsertOrUpdateChannelMessageDeleteMark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqInsertOrUpdateChannelMessageDeleteMark) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMessageDeleteMark != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelMessageDeleteMark.Size()))
		n81, err := m.ChannelMessageDeleteMark.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n82, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	return i, nil
}

func (m *ReqGetChannelMessageDeleteMark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMessageDeleteMark) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.ChannelID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelID))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n83, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	return i, nil
}

func (m *ReqUserDialogSetUnreadMetionsCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUserDialogSetUnreadMetionsCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.ChannelID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelID))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Type))
	}
	if m.UnreadMetionsCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UnreadMetionsCount))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n84, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	return i, nil
}

func (m *ReplyUserDialogSetUnreadMetionsCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUserDialogSetUnreadMetionsCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyErr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n85, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n85
	}
	return i, nil
}

func (m *ReqUserDialogGetUnreadMetionsCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUserDialogGetUnreadMetionsCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.ChannelID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelID))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Type))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n86, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n86
	}
	return i, nil
}

func (m *ReplyUserDialogGetUnreadMetionsCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUserDialogGetUnreadMetionsCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UnreadMetionsCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UnreadMetionsCount))
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n87, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n87
	}
	return i, nil
}

func (m *ReqUserDialogChangeUnreadMetionsCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUserDialogChangeUnreadMetionsCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.ChannelID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelID))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Type))
	}
	if m.UnreadMetionsCountChangeValue != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UnreadMetionsCountChangeValue))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n88, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n88
	}
	return i, nil
}

func (m *ReplyUserDialogChangeUnreadMetionsCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUserDialogChangeUnreadMetionsCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyErr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n89, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n89
	}
	return i, nil
}

func (m *ReqGetUserMediaMessageStatisticsByMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetUserMediaMessageStatisticsByMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithType))
	}
	if m.Media != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Media))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n90, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n90
	}
	return i, nil
}

func (m *ReplyGetUserMediaMessageStatisticsByMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetUserMediaMessageStatisticsByMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMediaMessageStatistics != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserMediaMessageStatistics.Size()))
		n91, err := m.UserMediaMessageStatistics.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n91
	}
	return i, nil
}

func (m *ReplyGetMessageHistoryPageByMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetMessageHistoryPageByMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserMsgs) > 0 {
		for _, msg := range m.UserMsgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReqInsertOrUpdateUserDialogAndMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqInsertOrUpdateUserDialogAndMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserDialogAndMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserDialogAndMsg.Size()))
		n92, err := m.UserDialogAndMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n92
	}
	if m.UpdateScore {
		dAtA[i] = 0x10
		i++
		if m.UpdateScore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n93, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n93
	}
	return i, nil
}

func (m *ReqUpdateSelfDialogAndMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateSelfDialogAndMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserDialogAndMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserDialogAndMsg.Size()))
		n94, err := m.UserDialogAndMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n94
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n95, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n95
	}
	return i, nil
}

func (m *ReqUpdateDialogAddUnread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateDialogAddUnread) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Type))
	}
	if m.UnreadDelta != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UnreadDelta))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n96, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n96
	}
	return i, nil
}

func (m *ReplyUpdateDialogAddUnread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUpdateDialogAddUnread) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ErrCode))
	}
	return i, nil
}

func (m *ReqUpdateDialogClearDraft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateDialogClearDraft) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithIdType))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n97, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n97
	}
	return i, nil
}

func (m *ReplyUpdateDialogClearDraft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUpdateDialogClearDraft) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqGetUserDialogAllUnread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetUserDialogAllUnread) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n98, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n98
	}
	return i, nil
}

func (m *ReplyGetUserDialogAllUnread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetUserDialogAllUnread) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UnreadCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UnreadCount))
	}
	return i, nil
}

func (m *ReqUpdateReceDialogAndMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateReceDialogAndMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserDialogAndMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserDialogAndMsg.Size()))
		n99, err := m.UserDialogAndMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n99
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n100, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n100
	}
	return i, nil
}

func (m *ReqGetDialogAndMsgByUserIdAndWithIdAndType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetDialogAndMsgByUserIdAndWithIdAndType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Type))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n101, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n101
	}
	return i, nil
}

func (m *ReqGetDialogAndMsgsByUserId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetDialogAndMsgsByUserId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n102, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n102
	}
	return i, nil
}

func (m *ReqGetDialogAndMsgsByPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetDialogAndMsgsByPage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithIdType))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.FolderId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.FolderId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n103, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n103
	}
	return i, nil
}

func (m *ReqReadSelfDialogAndMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqReadSelfDialogAndMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Type))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n104, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n104
	}
	return i, nil
}

func (m *ReqUpdateReadinbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateReadinbox) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Type))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n105, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n105
	}
	return i, nil
}

func (m *ReqUpdateReadoutbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateReadoutbox) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Type))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n106, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n106
	}
	return i, nil
}

func (m *ReqDeleteUserDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteUserDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Type))
	}
	if m.DeleteDate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.DeleteDate))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n107, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n107
	}
	return i, nil
}

func (m *ReqUpdateUserDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateUserDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UpdateUserDialogParam != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UpdateUserDialogParam.Size()))
		n108, err := m.UpdateUserDialogParam.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n108
	}
	if m.Debug != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n109, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n109
	}
	return i, nil
}

func (m *UpdateUserDialogParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserDialogParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithType))
	}
	if m.TopMessage != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.TopMessage))
	}
	if m.ReadInboxMaxId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReadInboxMaxId))
	}
	if m.ReadOutboxMaxId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReadOutboxMaxId))
	}
	if m.UnreadMetionsCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UnreadMetionsCount))
	}
	if m.UnreadCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UnreadCount))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Pts))
	}
	if m.UpdateDate != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UpdateDate))
	}
	return i, nil
}

func (m *ReqUpdateUserDialogUpdateDate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateUserDialogUpdateDate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithType))
	}
	if m.UpdateDate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UpdateDate))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n110, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n110
	}
	return i, nil
}

func (m *ReqUpdateDialogToPinged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateDialogToPinged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithIdType))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n111, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n111
	}
	return i, nil
}

func (m *ReqUpdateDialogToFolder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateDialogToFolder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithIdType))
	}
	if m.FolderId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.FolderId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n112, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n112
	}
	return i, nil
}

func (m *ReqCancelPingedDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCancelPingedDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithIdType))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n113, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n113
	}
	return i, nil
}

func (m *ReqGetPingedDialogAndMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetPingedDialogAndMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.FolderId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.FolderId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n114, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n114
	}
	return i, nil
}

func (m *ReqGetLastLimitDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetLastLimitDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n115, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n115
	}
	return i, nil
}

func (m *UserRating) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRating) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Rating != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Rating))))
		i += 8
	}
	return i, nil
}

func (m *ReplyGetLastLimitDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetLastLimitDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserRatingList) > 0 {
		for _, msg := range m.UserRatingList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReqUpdateReadInBoxMaxId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateReadInBoxMaxId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Type))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n116, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n116
	}
	return i, nil
}

func (m *ReqUpdateReadOutBoxMaxId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateReadOutBoxMaxId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Type))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n117, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n117
	}
	return i, nil
}

func (m *ReqUpdateChannelReadinbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateChannelReadinbox) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Type))
	}
	if m.ReadIn != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReadIn))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n118, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n118
	}
	return i, nil
}

func (m *ReqUpdateChannelReadoutbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateChannelReadoutbox) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Type))
	}
	if m.ReadOut != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReadOut))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n119, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n119
	}
	return i, nil
}

func (m *ReqDeleteUserDialogByChannelId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteUserDialogByChannelId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WithId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithIdType))
	}
	if m.DeleteDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.DeleteDate))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n120, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n120
	}
	return i, nil
}

func (m *ReqGetUserChannelDialogByUserId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetUserChannelDialogByUserId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n121, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n121
	}
	return i, nil
}

func (m *ReqStoreUserDialogErlang) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqStoreUserDialogErlang) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserDialogErlang != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserDialogErlang.Size()))
		n122, err := m.UserDialogErlang.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n122
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n123, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n123
	}
	return i, nil
}

func (m *ReqGetUserDialogErlangByUserIdWithIdWithType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetUserDialogErlangByUserIdWithIdWithType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithType))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n124, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n124
	}
	return i, nil
}

func (m *ReplyGetUserDialogErlangByUserIdWithIdWithType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetUserDialogErlangByUserIdWithIdWithType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserDialogErlang != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserDialogErlang.Size()))
		n125, err := m.UserDialogErlang.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n125
	}
	return i, nil
}

func (m *ReqInsertRandomStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqInsertRandomStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.RandomId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.RandomId))
	}
	if m.Handle != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Handle))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n126, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n126
	}
	return i, nil
}

func (m *ReqGetRandomStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetRandomStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.KeyID))
	}
	if m.RandomID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.RandomID))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n127, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n127
	}
	return i, nil
}

func (m *ReqSetSuperGroupMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSetSuperGroupMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Date != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Date))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n128, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n128
	}
	return i, nil
}

func (m *ReplySetSuperGroupMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplySetSuperGroupMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqGetSuperGroupMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetSuperGroupMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Date != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Date))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n129, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n129
	}
	return i, nil
}

func (m *ReplyGetSuperGroupMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetSuperGroupMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		for _, b := range m.Msg {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Date != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Date))
	}
	if m.GetAll {
		dAtA[i] = 0x18
		i++
		if m.GetAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReqInsertMsgIdSerialCodeMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqInsertMsgIdSerialCodeMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if len(m.SerialCode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.SerialCode)))
		i += copy(dAtA[i:], m.SerialCode)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n130, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n130
	}
	return i, nil
}

func (m *ReplyInsertMsgIdSerialCodeMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyInsertMsgIdSerialCodeMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if len(m.SerialCode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.SerialCode)))
		i += copy(dAtA[i:], m.SerialCode)
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n131, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n131
	}
	return i, nil
}

func (m *ReqGetMsgIdSerialCodeMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetMsgIdSerialCodeMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SerialCode) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.SerialCode)))
		i += copy(dAtA[i:], m.SerialCode)
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n132, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n132
	}
	return i, nil
}

func (m *ReplyGetMsgIdSerialCodeMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetMsgIdSerialCodeMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if len(m.SerialCode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.SerialCode)))
		i += copy(dAtA[i:], m.SerialCode)
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n133, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n133
	}
	return i, nil
}

func (m *MsgIdSerialCodeMapRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIdSerialCodeMapRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Id))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if len(m.SerialCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.SerialCode)))
		i += copy(dAtA[i:], m.SerialCode)
	}
	if m.InsertDate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.InsertDate))
	}
	return i, nil
}

func (m *ReqUpdateChannelMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateChannelMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n134, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n134
	}
	return i, nil
}

func (m *ReplyUpdateChannelMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUpdateChannelMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelMsgId.Size()))
		n135, err := m.ChannelMsgId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n135
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n136, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n136
	}
	return i, nil
}

func (m *ReqUpdateChannelMsgIdAndPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateChannelMsgIdAndPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n137, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n137
	}
	return i, nil
}

func (m *ReplyUpdateChannelMsgIdAndPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUpdateChannelMsgIdAndPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelMsgId.Size()))
		n138, err := m.ChannelMsgId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n138
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n139, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n139
	}
	return i, nil
}

func (m *ReqSetChannelMsgIdAndPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSetChannelMsgIdAndPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelMsgId.Size()))
		n140, err := m.ChannelMsgId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n140
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n141, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n141
	}
	return i, nil
}

func (m *ReplySetChannelMsgIdAndPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplySetChannelMsgIdAndPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyErr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n142, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n142
	}
	return i, nil
}

func (m *ReqUpdateChannelPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateChannelPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n143, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n143
	}
	return i, nil
}

func (m *ReplyUpdateChannelPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUpdateChannelPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelMsgId.Size()))
		n144, err := m.ChannelMsgId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n144
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n145, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n145
	}
	return i, nil
}

func (m *ReqUpdateChannelPtsWithNum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateChannelPtsWithNum) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Number != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Number))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n146, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n146
	}
	return i, nil
}

func (m *ReplyUpdateChannelPtsWithNum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUpdateChannelPtsWithNum) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelMsgId.Size()))
		n147, err := m.ChannelMsgId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n147
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n148, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n148
	}
	return i, nil
}

func (m *ReqGetChannelMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n149, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n149
	}
	return i, nil
}

func (m *ReplyGetChannelMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelMsgId.Size()))
		n150, err := m.ChannelMsgId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n150
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n151, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n151
	}
	return i, nil
}

func (m *ReqStoreChannelPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqStoreChannelPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelPtsHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelPtsHandle.Size()))
		n152, err := m.ChannelPtsHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n152
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n153, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n153
	}
	return i, nil
}

func (m *ReqBatchStoreChannelPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBatchStoreChannelPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelPtsHandles) > 0 {
		for _, msg := range m.ChannelPtsHandles {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n154, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n154
	}
	return i, nil
}

func (m *ReplyErr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyErr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.ErrMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.ErrMsg)))
		i += copy(dAtA[i:], m.ErrMsg)
	}
	return i, nil
}

func (m *ReqGetChannelDiffByPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelDiffByPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Pts))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.MinId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MinId))
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MaxId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n155, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n155
	}
	return i, nil
}

func (m *ReplyGetChannelDiffByPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelDiffByPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsFianl {
		dAtA[i] = 0x8
		i++
		if m.IsFianl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ToLong {
		dAtA[i] = 0x10
		i++
		if m.ToLong {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Pts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Pts))
	}
	if m.TopMsgId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.TopMsgId))
	}
	if len(m.Msgs) > 0 {
		for _, b := range m.Msgs {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n156, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n156
	}
	return i, nil
}

func (m *ReqGetUserDiff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetUserDiff) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Date))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n157, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n157
	}
	return i, nil
}

func (m *ChannelPtsDiff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelPtsDiff) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelID))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Pts))
	}
	return i, nil
}

func (m *ReplyGetUserDiff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetUserDiff) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelPtsDiffs) > 0 {
		for _, msg := range m.ChannelPtsDiffs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n158, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n158
	}
	return i, nil
}

func (m *ReqGetChannelLastPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelLastPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n159, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n159
	}
	return i, nil
}

func (m *ReplyGetChannelLastPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelLastPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelPtsHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelPtsHandle.Size()))
		n160, err := m.ChannelPtsHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n160
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n161, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n161
	}
	return i, nil
}

func (m *ReqDeleteChannelPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteChannelPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Pts))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n162, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n162
	}
	return i, nil
}

func (m *ReplyDeleteChannelPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeleteChannelPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n163, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n163
	}
	return i, nil
}

func (m *ReqInsertOrUpdateChannelMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqInsertOrUpdateChannelMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserMsg.Size()))
		n164, err := m.UserMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n164
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n165, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n165
	}
	return i, nil
}

func (m *ReqUpdateChannelMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateChannelMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserMsg.Size()))
		n166, err := m.UserMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n166
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n167, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n167
	}
	return i, nil
}

func (m *ReqBatchInsertOrUpdateChannelMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBatchInsertOrUpdateChannelMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserMsgs) > 0 {
		for _, msg := range m.UserMsgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n168, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n168
	}
	return i, nil
}

func (m *ReqDeleteMsgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteMsgs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.MsgIds) > 0 {
		dAtA170 := make([]byte, len(m.MsgIds)*10)
		var j169 int
		for _, num1 := range m.MsgIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA170[j169] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j169++
			}
			dAtA170[j169] = uint8(num)
			j169++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j169))
		i += copy(dAtA[i:], dAtA170[:j169])
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n171, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n171
	}
	return i, nil
}

func (m *ReplyDeleteMsgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeleteMsgs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurentMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.CurentMsgId))
	}
	if m.UpdateDate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UpdateDate))
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n172, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n172
	}
	return i, nil
}

func (m *ReqDeleteUserHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteUserHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n173, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n173
	}
	return i, nil
}

func (m *ReplyDeleteUserHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeleteUserHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgsAndMaxId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgsAndMaxId.Size()))
		n174, err := m.MsgsAndMaxId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n174
	}
	if len(m.Ptss) > 0 {
		dAtA176 := make([]byte, len(m.Ptss)*10)
		var j175 int
		for _, num1 := range m.Ptss {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA176[j175] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j175++
			}
			dAtA176[j175] = uint8(num)
			j175++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j175))
		i += copy(dAtA[i:], dAtA176[:j175])
	}
	if m.UpdateDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UpdateDate))
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n177, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n177
	}
	return i, nil
}

func (m *ReqDeleteChannelMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteChannelMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n178, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n178
	}
	return i, nil
}

func (m *ReqDeleteChannelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteChannelMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n179, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n179
	}
	return i, nil
}

func (m *ReplyDeleteChannelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeleteChannelMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.CurrentMsgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.CurrentMsgId))
	}
	if m.UpdateDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UpdateDate))
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n180, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n180
	}
	return i, nil
}

func (m *ReqGetChannelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n181, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n181
	}
	return i, nil
}

func (m *ReplyGetChannelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserMsg.Size()))
		n182, err := m.UserMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n182
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n183, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n183
	}
	return i, nil
}

func (m *ReqGetChannelMsgsByMsgIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMsgsByMsgIds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.MsgIds) > 0 {
		dAtA185 := make([]byte, len(m.MsgIds)*10)
		var j184 int
		for _, num1 := range m.MsgIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA185[j184] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j184++
			}
			dAtA185[j184] = uint8(num)
			j184++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j184))
		i += copy(dAtA[i:], dAtA185[:j184])
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n186, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n186
	}
	return i, nil
}

func (m *ReplyGetChannelMsgsByMsgIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelMsgsByMsgIds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMsgListAndPts != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserMsgListAndPts.Size()))
		n187, err := m.UserMsgListAndPts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n187
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n188, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n188
	}
	return i, nil
}

func (m *ReqGetChannelMsgHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMsgHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.OffsetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.OffsetId))
	}
	if m.OffsetDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.OffsetDate))
	}
	if m.AddOffset != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.AddOffset))
	}
	if m.MinId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MinId))
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MaxId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Encry))
	}
	if m.DeleteMark != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.DeleteMark))
	}
	if m.Debug != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n189, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n189
	}
	return i, nil
}

func (m *ReplyGetChannelMsgHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelMsgHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMsgListAndPts != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserMsgListAndPts.Size()))
		n190, err := m.UserMsgListAndPts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n190
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n191, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n191
	}
	return i, nil
}

func (m *ReqGetChannelTopMst) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelTopMst) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n192, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n192
	}
	return i, nil
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if len(m.Medias) > 0 {
		dAtA194 := make([]byte, len(m.Medias)*10)
		var j193 int
		for _, num1 := range m.Medias {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA194[j193] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j193++
			}
			dAtA194[j193] = uint8(num)
			j193++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j193))
		i += copy(dAtA[i:], dAtA194[:j193])
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MaxId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Encry))
	}
	return i, nil
}

func (m *ReqGetChannelMediaMessageHistoryByMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMediaMessageHistoryByMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GetChannelMediaMessageHistoryByMediaConfig != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.GetChannelMediaMessageHistoryByMediaConfig.Size()))
		n195, err := m.GetChannelMediaMessageHistoryByMediaConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n195
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n196, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n196
	}
	return i, nil
}

func (m *ReplyGetChannelMediaMessageHistoryByMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelMediaMessageHistoryByMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelMsgs) > 0 {
		for _, msg := range m.ChannelMsgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n197, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n197
	}
	return i, nil
}

func (m *ReplyInsertOrUpdateChannelMessageDeleteMark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyInsertOrUpdateChannelMessageDeleteMark) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyErr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n198, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n198
	}
	return i, nil
}

func (m *ReplyGetChannelMessageDeleteMark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelMessageDeleteMark) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMessageDeleteMark != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelMessageDeleteMark.Size()))
		n199, err := m.ChannelMessageDeleteMark.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n199
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n200, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n200
	}
	return i, nil
}

func (m *ReqGetChannelMediaMessageStatisticsByMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMediaMessageStatisticsByMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Media != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Media))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n201, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n201
	}
	return i, nil
}

func (m *ReplyGetChannelMediaMessageStatisticsByMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelMediaMessageStatisticsByMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMediaMessageStatistics != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelMediaMessageStatistics.Size()))
		n202, err := m.ChannelMediaMessageStatistics.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n202
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n203, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n203
	}
	return i, nil
}

func (m *ReplyGetChannelTopMst) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelTopMst) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserMsg.Size()))
		n204, err := m.UserMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n204
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n205, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n205
	}
	return i, nil
}

func (m *ReqInsertOrUpdateChannelDialogAndMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqInsertOrUpdateChannelDialogAndMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelDialog != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelDialog.Size()))
		n206, err := m.ChannelDialog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n206
	}
	if m.ChannelMsg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelMsg.Size()))
		n207, err := m.ChannelMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n207
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n208, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n208
	}
	return i, nil
}

func (m *ReqGetDialogMaxReadInMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetDialogMaxReadInMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n209, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n209
	}
	return i, nil
}

func (m *ReplyGetDialogMaxReadInMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetDialogMaxReadInMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n210, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n210
	}
	return i, nil
}

func (m *ReqSetDialogMaxReadInMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSetDialogMaxReadInMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n211, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n211
	}
	return i, nil
}

func (m *ReqGetDialogAndMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetDialogAndMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n212, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n212
	}
	return i, nil
}

func (m *ReplyGetDialogAndMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetDialogAndMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelDialogAndMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelDialogAndMsg.Size()))
		n213, err := m.ChannelDialogAndMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n213
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n214, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n214
	}
	return i, nil
}

func (m *ReqGetDialogAndMsgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetDialogAndMsgs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelIds) > 0 {
		dAtA216 := make([]byte, len(m.ChannelIds)*10)
		var j215 int
		for _, num1 := range m.ChannelIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA216[j215] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j215++
			}
			dAtA216[j215] = uint8(num)
			j215++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j215))
		i += copy(dAtA[i:], dAtA216[:j215])
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n217, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n217
	}
	return i, nil
}

func (m *ReplyGetDialogAndMsgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetDialogAndMsgs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelDialogAndMsgs != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelDialogAndMsgs.Size()))
		n218, err := m.ChannelDialogAndMsgs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n218
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n219, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n219
	}
	return i, nil
}

func (m *ReqStoreAdminLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqStoreAdminLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelAdminLog != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelAdminLog.Size()))
		n220, err := m.ChannelAdminLog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n220
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n221, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n221
	}
	return i, nil
}

func (m *ReqFindsAdminLogByChannelId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFindsAdminLogByChannelId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n222, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n222
	}
	return i, nil
}

func (m *ReplyFindsAdminLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyFindsAdminLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AdminLogs) > 0 {
		for _, msg := range m.AdminLogs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n223, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n223
	}
	return i, nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if len(m.AdminUsers) > 0 {
		dAtA225 := make([]byte, len(m.AdminUsers)*10)
		var j224 int
		for _, num1 := range m.AdminUsers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA225[j224] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j224++
			}
			dAtA225[j224] = uint8(num)
			j224++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j224))
		i += copy(dAtA[i:], dAtA225[:j224])
	}
	if len(m.EventFilters) > 0 {
		dAtA227 := make([]byte, len(m.EventFilters)*10)
		var j226 int
		for _, num1 := range m.EventFilters {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA227[j226] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j226++
			}
			dAtA227[j226] = uint8(num)
			j226++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j226))
		i += copy(dAtA[i:], dAtA227[:j226])
	}
	if m.Limit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n228, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n228
	}
	return i, nil
}

func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if len(m.EventFilters) > 0 {
		dAtA230 := make([]byte, len(m.EventFilters)*10)
		var j229 int
		for _, num1 := range m.EventFilters {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA230[j229] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j229++
			}
			dAtA230[j229] = uint8(num)
			j229++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j229))
		i += copy(dAtA[i:], dAtA230[:j229])
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n231, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n231
	}
	return i, nil
}

func (m *ReqFindsAdminLogByChannelIdAndUserId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFindsAdminLogByChannelIdAndUserId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n232, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n232
	}
	return i, nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.AdminUsers) > 0 {
		dAtA234 := make([]byte, len(m.AdminUsers)*10)
		var j233 int
		for _, num1 := range m.AdminUsers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA234[j233] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j233++
			}
			dAtA234[j233] = uint8(num)
			j233++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j233))
		i += copy(dAtA[i:], dAtA234[:j233])
	}
	if len(m.EventFilters) > 0 {
		dAtA236 := make([]byte, len(m.EventFilters)*10)
		var j235 int
		for _, num1 := range m.EventFilters {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA236[j235] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j235++
			}
			dAtA236[j235] = uint8(num)
			j235++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j235))
		i += copy(dAtA[i:], dAtA236[:j235])
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n237, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n237
	}
	return i, nil
}

func (m *ReqFindsAdminLogByChannelIdAndEventFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFindsAdminLogByChannelIdAndEventFilters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.EventFilters) > 0 {
		dAtA239 := make([]byte, len(m.EventFilters)*10)
		var j238 int
		for _, num1 := range m.EventFilters {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA239[j238] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j238++
			}
			dAtA239[j238] = uint8(num)
			j238++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j238))
		i += copy(dAtA[i:], dAtA239[:j238])
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n240, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n240
	}
	return i, nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.AdminUsers) > 0 {
		dAtA242 := make([]byte, len(m.AdminUsers)*10)
		var j241 int
		for _, num1 := range m.AdminUsers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA242[j241] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j241++
			}
			dAtA242[j241] = uint8(num)
			j241++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j241))
		i += copy(dAtA[i:], dAtA242[:j241])
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n243, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n243
	}
	return i, nil
}

func (m *ReqChannelMessageAtAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChannelMessageAtAdd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Encry))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n244, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n244
	}
	return i, nil
}

func (m *ReplyChannelMessageAtAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannelMessageAtAdd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyErr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n245, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n245
	}
	return i, nil
}

func (m *ReqChannelMessageAtGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChannelMessageAtGet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if m.AddOffset != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.AddOffset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n246, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n246
	}
	return i, nil
}

func (m *ReplyChannelMessageAtGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannelMessageAtGet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n247, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n247
	}
	return i, nil
}

func (m *ReqChannelMessageAtDel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChannelMessageAtDel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n248, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n248
	}
	return i, nil
}

func (m *ReplyChannelMessageAtDel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannelMessageAtDel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyErr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n249, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n249
	}
	return i, nil
}

func (m *ReqUserMessageAtAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUserMessageAtAdd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Encry))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n250, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n250
	}
	return i, nil
}

func (m *ReplyUserMessageAtAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUserMessageAtAdd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyErr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n251, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n251
	}
	return i, nil
}

func (m *ReqUserMessageAtGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUserMessageAtGet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if m.AddOffset != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.AddOffset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n252, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n252
	}
	return i, nil
}

func (m *ReplyUserMessageAtGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUserMessageAtGet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n253, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n253
	}
	return i, nil
}

func (m *ReqUserMessageAtDel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUserMessageAtDel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n254, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n254
	}
	return i, nil
}

func (m *ReplyUserMessageAtDel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUserMessageAtDel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyErr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n255, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n255
	}
	return i, nil
}

func (m *ChannelMessageAt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelMessageAt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Encry))
	}
	return i, nil
}

func (m *UserMessageAt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMessageAt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Encry))
	}
	return i, nil
}

func (m *ChannelMessageDeleteMark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelMessageDeleteMark) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	return i, nil
}

func (m *MsgIdImported) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIdImported) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserIdOrChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserIdOrChannelId))
	}
	if m.Imported {
		dAtA[i] = 0x10
		i++
		if m.Imported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UserMediaMessageStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMediaMessageStatistics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithType))
	}
	if m.Media != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Media))
	}
	if m.Count != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *ChannelMediaMessageStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelMediaMessageStatistics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Media != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Media))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *UserDialogErlang) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDialogErlang) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Id))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithType))
	}
	if m.HaveImport {
		dAtA[i] = 0x28
		i++
		if m.HaveImport {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CreateTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.CreateTime))
	}
	if m.UpdateTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UpdateTime))
	}
	return i, nil
}

func (m *PtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Pts))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Type))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Date != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Date))
	}
	return i, nil
}

func (m *OtherInfoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OtherInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Date))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *ChannelPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.UserIds) > 0 {
		dAtA257 := make([]byte, len(m.UserIds)*10)
		var j256 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA257[j256] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j256++
			}
			dAtA257[j256] = uint8(num)
			j256++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j256))
		i += copy(dAtA[i:], dAtA257[:j256])
	}
	if m.Pts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Pts))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Date != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Date))
	}
	return i, nil
}

func (m *ChannelAdminLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelAdminLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ActionId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.AdminUserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.AdminUserId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.ActionType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ActionType))
	}
	if len(m.AdminLog) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.AdminLog)))
		i += copy(dAtA[i:], m.AdminLog)
	}
	if m.Date != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Date))
	}
	return i, nil
}

func (m *UserPingedDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPingedDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithIdType))
	}
	if m.PingedNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.PingedNum))
	}
	return i, nil
}

func (m *UserDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Id))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Type))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Flags))
	}
	if m.Pinged {
		dAtA[i] = 0x30
		i++
		if m.Pinged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TopMessage != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.TopMessage))
	}
	if m.ReadInboxMaxId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReadInboxMaxId))
	}
	if m.ReadOutboxMaxId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReadOutboxMaxId))
	}
	if m.UnreadMetionsCount != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UnreadMetionsCount))
	}
	if m.UnreadCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UnreadCount))
	}
	if m.NotifySettingsFlags != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.NotifySettingsFlags))
	}
	if m.ShowPreviews {
		dAtA[i] = 0x68
		i++
		if m.ShowPreviews {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Silent {
		dAtA[i] = 0x70
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MuteUntil != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MuteUntil))
	}
	if len(m.Sound) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.Sound)))
		i += copy(dAtA[i:], m.Sound)
	}
	if m.Pts != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Pts))
	}
	if len(m.Draft) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.Draft)))
		i += copy(dAtA[i:], m.Draft)
	}
	if m.FolderId != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.FolderId))
	}
	if m.Readinpts != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Readinpts))
	}
	if m.Readoutpts != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Readoutpts))
	}
	if len(m.LinkUser) > 0 {
		dAtA259 := make([]byte, len(m.LinkUser)*10)
		var j258 int
		for _, num1 := range m.LinkUser {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA259[j258] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j258++
			}
			dAtA259[j258] = uint8(num)
			j258++
		}
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j258))
		i += copy(dAtA[i:], dAtA259[:j258])
	}
	if m.InsertDate != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.InsertDate))
	}
	if m.UpdateDate != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UpdateDate))
	}
	if m.Encry != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Encry))
	}
	if m.Revoke {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		if m.Revoke {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ForWardUserMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForWardUserMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Date != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Date))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Media != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Media))
	}
	if len(m.MediaData) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.MediaData)))
		i += copy(dAtA[i:], m.MediaData)
	}
	if len(m.ReplyMarkup) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.ReplyMarkup)))
		i += copy(dAtA[i:], m.ReplyMarkup)
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			dAtA[i] = 0x32
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.FromId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.FromId))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Encry))
	}
	if len(m.FwdFrom) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.FwdFrom)))
		i += copy(dAtA[i:], m.FwdFrom)
	}
	if m.GroupId != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.GroupId))
	}
	if m.ViaBotId != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ViaBotId))
	}
	if m.MsgID != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgID))
	}
	return i, nil
}

func (m *UserMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Id))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Pts))
	}
	return i, nil
}

func (m *UserLocalId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLocalId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.LocalId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.LocalId))
	}
	return i, nil
}

func (m *ChannelLocalId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelLocalId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.LocalId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.LocalId))
	}
	return i, nil
}

func (m *UserIdAndWithIdAndTypeAndEncry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIdAndWithIdAndTypeAndEncry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithIdType))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Encry))
	}
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Satus {
		dAtA[i] = 0x8
		i++
		if m.Satus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *UserIdAndWithId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIdAndWithId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	return i, nil
}

func (m *WithIdAndType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithIdAndType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WithId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithIdType))
	}
	return i, nil
}

func (m *UserIdAndWithIdAndType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIdAndWithIdAndType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *UserId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *UserIdAndPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIdAndPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Pts))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *Bytes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bytes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		for _, b := range m.Msg {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *UserMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Id))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithIdType))
	}
	if m.MessageType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MessageType))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Flags))
	}
	if m.Out {
		dAtA[i] = 0x38
		i++
		if m.Out {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Mentioned {
		dAtA[i] = 0x40
		i++
		if m.Mentioned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MediaUnread {
		dAtA[i] = 0x48
		i++
		if m.MediaUnread {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Silent {
		dAtA[i] = 0x50
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Post {
		dAtA[i] = 0x58
		i++
		if m.Post {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.GroupId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.GroupId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	if m.ToId != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ToId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Pts))
	}
	if len(m.FwdFrom) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.FwdFrom)))
		i += copy(dAtA[i:], m.FwdFrom)
	}
	if m.ViaBotId != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ViaBotId))
	}
	if m.ReplyToMsgId != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyToMsgId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Date))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Media != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Media))
	}
	if len(m.MediaData) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.MediaData)))
		i += copy(dAtA[i:], m.MediaData)
	}
	if len(m.ReplyMarkup) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.ReplyMarkup)))
		i += copy(dAtA[i:], m.ReplyMarkup)
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.FromId != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.FromId))
	}
	if m.Views != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Views))
	}
	if m.EditDate != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.EditDate))
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if m.RandomId != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.RandomId))
	}
	if m.Uuid != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Uuid))
	}
	if m.InsertDate != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.InsertDate))
	}
	if m.UpdateDate != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UpdateDate))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Encry))
	}
	if m.Combination != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Combination.Size()))
		n260, err := m.Combination.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n260
	}
	return i, nil
}

func (m *Combination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Combination) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MentionedSlice) > 0 {
		for _, msg := range m.MentionedSlice {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.KeyId) > 0 {
		dAtA262 := make([]byte, len(m.KeyId)*10)
		var j261 int
		for _, num1 := range m.KeyId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA262[j261] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j261++
			}
			dAtA262[j261] = uint8(num)
			j261++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j261))
		i += copy(dAtA[i:], dAtA262[:j261])
	}
	return i, nil
}

func (m *MentionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MentionStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *UserIdAndMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIdAndMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	return i, nil
}

func (m *UUID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UUID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Userid))
	}
	if m.UUID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UUID))
	}
	return i, nil
}

func (m *MsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MsgId))
	}
	return i, nil
}

func (m *UUIDS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UUIDS) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Userid))
	}
	if len(m.UUIDS) > 0 {
		dAtA264 := make([]byte, len(m.UUIDS)*10)
		var j263 int
		for _, num1 := range m.UUIDS {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA264[j263] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j263++
			}
			dAtA264[j263] = uint8(num)
			j263++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j263))
		i += copy(dAtA[i:], dAtA264[:j263])
	}
	return i, nil
}

func (m *MsgIDList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIDList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MsgId) > 0 {
		dAtA266 := make([]byte, len(m.MsgId)*10)
		var j265 int
		for _, num1 := range m.MsgId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA266[j265] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j265++
			}
			dAtA266[j265] = uint8(num)
			j265++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j265))
		i += copy(dAtA[i:], dAtA266[:j265])
	}
	if len(m.Pts) > 0 {
		dAtA268 := make([]byte, len(m.Pts)*10)
		var j267 int
		for _, num1 := range m.Pts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA268[j267] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j267++
			}
			dAtA268[j267] = uint8(num)
			j267++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j267))
		i += copy(dAtA[i:], dAtA268[:j267])
	}
	if m.LastMsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.LastMsgId))
	}
	if m.Count != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *UserIdAndWithIdAndMsgIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIdAndWithIdAndMsgIds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if len(m.MsgIds) > 0 {
		dAtA270 := make([]byte, len(m.MsgIds)*10)
		var j269 int
		for _, num1 := range m.MsgIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA270[j269] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j269++
			}
			dAtA270[j269] = uint8(num)
			j269++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j269))
		i += copy(dAtA[i:], dAtA270[:j269])
	}
	return i, nil
}

func (m *UserIdAndRandomId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIdAndRandomId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.RandomId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.RandomId))
	}
	if m.Handle != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Handle))
	}
	return i, nil
}

func (m *ReplyGetRandomStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetRandomStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SearchMediaMsgByFilterReqPara) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchMediaMsgByFilterReqPara) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.WithType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithType))
	}
	if len(m.Keyword) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(len(m.Keyword)))
		i += copy(dAtA[i:], m.Keyword)
	}
	if m.FromId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.FromId))
	}
	if len(m.MediaType) > 0 {
		dAtA272 := make([]byte, len(m.MediaType)*10)
		var j271 int
		for _, num1 := range m.MediaType {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA272[j271] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j271++
			}
			dAtA272[j271] = uint8(num)
			j271++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(j271))
		i += copy(dAtA[i:], dAtA272[:j271])
	}
	if m.MinDate != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MinDate))
	}
	if m.MaxDate != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MaxDate))
	}
	if m.OffsetId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.OffsetId))
	}
	if m.AddOffset != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.AddOffset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Limit))
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MaxId))
	}
	if m.MinId != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MinId))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Hash))
	}
	return i, nil
}

func (m *SearchMediaMsgByFilterRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchMediaMsgByFilterRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Count))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Pts))
	}
	return i, nil
}

func (m *ReqSearchUserMediaMsgByFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSearchUserMediaMsgByFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Para != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Para.Size()))
		n273, err := m.Para.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n273
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n274, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n274
	}
	return i, nil
}

func (m *RespSearchUserMediaMsgByFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespSearchUserMediaMsgByFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Data.Size()))
		n275, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n275
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n276, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n276
	}
	return i, nil
}

func (m *ReqSearchChannelMediaMsgByFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSearchChannelMediaMsgByFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Para != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Para.Size()))
		n277, err := m.Para.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n277
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n278, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n278
	}
	return i, nil
}

func (m *RespSearchChannelMediaMsgByFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespSearchChannelMediaMsgByFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Data.Size()))
		n279, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n279
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n280, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n280
	}
	return i, nil
}

func (m *QueryDialogData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDialogData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.WithId))
	}
	if m.UnreadCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UnreadCount))
	}
	return i, nil
}

func (m *ReqGetDialogUnreadCountByUserIdAndWithId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetDialogUnreadCountByUserIdAndWithId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DialogList) > 0 {
		for _, msg := range m.DialogList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.Debug.Size()))
		n281, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n281
	}
	return i, nil
}

func (m *RespGetDialogUnreadCountByUserIdAndWithId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespGetDialogUnreadCountByUserIdAndWithId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DialogList) > 0 {
		for _, msg := range m.DialogList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessagedb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ReplyErr.Size()))
		n282, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n282
	}
	return i, nil
}

func (m *ReqShDeleteUserHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqShDeleteUserHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.UserId))
	}
	if m.MaxMsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessagedb(dAtA, i, uint64(m.MaxMsgId))
	}
	return i, nil
}

func encodeVarintMessagedb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReplyNull) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReplyUpdateUserDialogUpdateDate) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReplyUpdateUserDialog) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ChannelIdAndLimit) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	return n
}

func (m *ChannelIdAndUserIdAndLimit) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	return n
}

func (m *ChannelIdAndAdminUsersAndEventFiltersAndUserId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if len(m.AdminUsers) > 0 {
		l = 0
		for _, e := range m.AdminUsers {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if len(m.EventFilters) > 0 {
		l = 0
		for _, e := range m.EventFilters {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	return n
}

func (m *ChannelIdAndAdminUsers) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if len(m.AdminUsers) > 0 {
		l = 0
		for _, e := range m.AdminUsers {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	return n
}

func (m *ChannelIdAndEventFilters) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if len(m.EventFilters) > 0 {
		l = 0
		for _, e := range m.EventFilters {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	return n
}

func (m *ChannelIdAndAdminUsersAndEventFilters) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if len(m.AdminUsers) > 0 {
		l = 0
		for _, e := range m.AdminUsers {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if len(m.EventFilters) > 0 {
		l = 0
		for _, e := range m.EventFilters {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	return n
}

func (m *ChannelIdAndEventFiltersAndUserId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if len(m.EventFilters) > 0 {
		l = 0
		for _, e := range m.EventFilters {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	return n
}

func (m *ChannelMsgId) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMessagedb(uint64(m.Id))
	}
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	if m.Pts != 0 {
		n += 1 + sovMessagedb(uint64(m.Pts))
	}
	if m.LastDate != 0 {
		n += 1 + sovMessagedb(uint64(m.LastDate))
	}
	return n
}

func (m *ChannelId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	return n
}

func (m *ChannelIds) Size() (n int) {
	var l int
	_ = l
	if len(m.ChannelIds) > 0 {
		l = 0
		for _, e := range m.ChannelIds {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	return n
}

func (m *ChannelIdAndMsgId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	return n
}

func (m *ChannelIdAndMsgIds) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if len(m.MsgIds) > 0 {
		l = 0
		for _, e := range m.MsgIds {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	return n
}

func (m *ChannelIdAndUserId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	return n
}

func (m *DialogIsCreated) Size() (n int) {
	var l int
	_ = l
	if m.DialogIdCreated {
		n += 2
	}
	return n
}

func (m *ChannelIdAndNum) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.Number != 0 {
		n += 1 + sovMessagedb(uint64(m.Number))
	}
	return n
}

func (m *MsgsAndMaxId) Size() (n int) {
	var l int
	_ = l
	if m.MaxMsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MaxMsgId))
	}
	if len(m.Msgs) > 0 {
		l = 0
		for _, e := range m.Msgs {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	return n
}

func (m *ChannelDialog) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.TopMessage != 0 {
		n += 1 + sovMessagedb(uint64(m.TopMessage))
	}
	if m.MaxReadInId != 0 {
		n += 1 + sovMessagedb(uint64(m.MaxReadInId))
	}
	if m.Encry != 0 {
		n += 1 + sovMessagedb(uint64(m.Encry))
	}
	return n
}

func (m *ChannelDialogAndMsg) Size() (n int) {
	var l int
	_ = l
	if m.ChannelDialog != nil {
		l = m.ChannelDialog.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ChannelMsg != nil {
		l = m.ChannelMsg.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ChannelDialogAndMsgs) Size() (n int) {
	var l int
	_ = l
	if len(m.ChannelDialogAndMsgs) > 0 {
		for _, e := range m.ChannelDialogAndMsgs {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	return n
}

func (m *ReqForWardUserMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithIdType))
	}
	if m.Encry != 0 {
		n += 1 + sovMessagedb(uint64(m.Encry))
	}
	if len(m.MsgIds) > 0 {
		l = 0
		for _, e := range m.MsgIds {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	return n
}

func (m *ReqUserMsgHis) Size() (n int) {
	var l int
	_ = l
	if m.Selfid != 0 {
		n += 1 + sovMessagedb(uint64(m.Selfid))
	}
	if m.Withid != 0 {
		n += 1 + sovMessagedb(uint64(m.Withid))
	}
	if m.Type != 0 {
		n += 1 + sovMessagedb(uint64(m.Type))
	}
	if m.OffsetId != 0 {
		n += 1 + sovMessagedb(uint64(m.OffsetId))
	}
	if m.OffsetDate != 0 {
		n += 1 + sovMessagedb(uint64(m.OffsetDate))
	}
	if m.AddOffset != 0 {
		n += 1 + sovMessagedb(uint64(m.AddOffset))
	}
	if m.MinId != 0 {
		n += 1 + sovMessagedb(uint64(m.MinId))
	}
	if m.MaxId != 0 {
		n += 1 + sovMessagedb(uint64(m.MaxId))
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.Encry != 0 {
		n += 1 + sovMessagedb(uint64(m.Encry))
	}
	return n
}

func (m *DialogTopMessage) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovMessagedb(uint64(m.FromId))
	}
	if m.TopMessage != 0 {
		n += 1 + sovMessagedb(uint64(m.TopMessage))
	}
	return n
}

func (m *ForWardUserMsgList) Size() (n int) {
	var l int
	_ = l
	if len(m.ForWardUserMsg) > 0 {
		for _, e := range m.ForWardUserMsg {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	return n
}

func (m *UserMsgList) Size() (n int) {
	var l int
	_ = l
	if len(m.UserMsgs) > 0 {
		for _, e := range m.UserMsgs {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if m.Pts != 0 {
		n += 1 + sovMessagedb(uint64(m.Pts))
	}
	return n
}

func (m *UserMsgListAndPts) Size() (n int) {
	var l int
	_ = l
	if len(m.UserMsgs) > 0 {
		for _, e := range m.UserMsgs {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if m.Pts != 0 {
		n += 1 + sovMessagedb(uint64(m.Pts))
	}
	if m.Count != 0 {
		n += 1 + sovMessagedb(uint64(m.Count))
	}
	return n
}

func (m *UserDialogList) Size() (n int) {
	var l int
	_ = l
	if len(m.UserDialogs) > 0 {
		for _, e := range m.UserDialogs {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	return n
}

func (m *UserDialogAndMsgList) Size() (n int) {
	var l int
	_ = l
	if len(m.UserDialogAndMsgs) > 0 {
		for _, e := range m.UserDialogAndMsgs {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovMessagedb(uint64(m.Count))
	}
	return n
}

func (m *ReplyGetPingedDialogAndMsg) Size() (n int) {
	var l int
	_ = l
	if m.DialogMsg != nil {
		l = m.DialogMsg.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.TopPeerId != 0 {
		n += 1 + sovMessagedb(uint64(m.TopPeerId))
	}
	if m.TopPeerType != 0 {
		n += 1 + sovMessagedb(uint64(m.TopPeerType))
	}
	if m.TopMsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.TopMsgId))
	}
	if m.UnreadMutedPeersCount != 0 {
		n += 1 + sovMessagedb(uint64(m.UnreadMutedPeersCount))
	}
	if m.UnreadUnmutedPeersCount != 0 {
		n += 1 + sovMessagedb(uint64(m.UnreadUnmutedPeersCount))
	}
	if m.UnreadMutedMessagesCount != 0 {
		n += 1 + sovMessagedb(uint64(m.UnreadMutedMessagesCount))
	}
	if m.UnreadUnmutedMessagesCount != 0 {
		n += 1 + sovMessagedb(uint64(m.UnreadUnmutedMessagesCount))
	}
	return n
}

func (m *UserDialogAndMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserDialog != nil {
		l = m.UserDialog.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.UserMsg != nil {
		l = m.UserMsg.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqInsertOrUpdateUserMsgId) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqIncreaseUserLocalId) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyIncreaseUserLocalId) Size() (n int) {
	var l int
	_ = l
	if m.UserLocalId != nil {
		l = m.UserLocalId.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetCurrentUserLocalId) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetCurrentUserLocalId) Size() (n int) {
	var l int
	_ = l
	if m.UserLocalId != nil {
		l = m.UserLocalId.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqIncreaseChannelLocalId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyIncreaseChannelLocalId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelLocalId != nil {
		l = m.ChannelLocalId.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetCurrentChannelLocalId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetCurrentChannelLocalId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelLocalId != nil {
		l = m.ChannelLocalId.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqIncreaseUserMsgId) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.MsgIdDelta != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgIdDelta))
	}
	if m.PtsDelta != 0 {
		n += 1 + sovMessagedb(uint64(m.PtsDelta))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqSetUserMsgId) Size() (n int) {
	var l int
	_ = l
	if m.UserMsgId != nil {
		l = m.UserMsgId.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqSetMsgIdImported) Size() (n int) {
	var l int
	_ = l
	if m.MsgIdImported != nil {
		l = m.MsgIdImported.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplySetMsgIdImported) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqCheckMsgIdImported) Size() (n int) {
	var l int
	_ = l
	if m.UserIdOrChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserIdOrChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyCheckMsgIdImported) Size() (n int) {
	var l int
	_ = l
	if m.MsgIdImported != nil {
		l = m.MsgIdImported.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetUserMsgId) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUpdateUserPts) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqBatchUpdatUserPts) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Number != 0 {
		n += 1 + sovMessagedb(uint64(m.Number))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqStorePtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.PtsHandle != nil {
		l = m.PtsHandle.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetDiffByPts) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Pts != 0 {
		n += 1 + sovMessagedb(uint64(m.Pts))
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetDiffByPts) Size() (n int) {
	var l int
	_ = l
	if len(m.Msg) > 0 {
		for _, b := range m.Msg {
			l = len(b)
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if m.LastPts != 0 {
		n += 1 + sovMessagedb(uint64(m.LastPts))
	}
	if m.ToLong {
		n += 2
	}
	if len(m.UserMsgs) > 0 {
		for _, e := range m.UserMsgs {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if m.Date != 0 {
		n += 1 + sovMessagedb(uint64(m.Date))
	}
	return n
}

func (m *ReqGetActionDiff) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Pts != 0 {
		n += 1 + sovMessagedb(uint64(m.Pts))
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqDeletePtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if len(m.PtsSli) > 0 {
		l = 0
		for _, e := range m.PtsSli {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	return n
}

func (m *ReqClearPtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.MaxPts != 0 {
		n += 1 + sovMessagedb(uint64(m.MaxPts))
	}
	return n
}

func (m *ReplyClearPtsHandle) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReplyDeletePtsHandle) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReplyGetActionDiff) Size() (n int) {
	var l int
	_ = l
	if len(m.PtsHandles) > 0 {
		for _, e := range m.PtsHandles {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	return n
}

func (m *ReqStoreOtherInfoMsg) Size() (n int) {
	var l int
	_ = l
	if m.OtherInfoMsg != nil {
		l = m.OtherInfoMsg.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqBatchStoreOtherInfoMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.OtherInfoMsgs) > 0 {
		for _, e := range m.OtherInfoMsgs {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetOtherInfoMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Date != 0 {
		n += 1 + sovMessagedb(uint64(m.Date))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetOtherInfoMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.OtherInfoMsgs) > 0 {
		for _, e := range m.OtherInfoMsgs {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	return n
}

func (m *ReqInsertOrUpdateUserMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserMsg != nil {
		l = m.UserMsg.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetForwardUserMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithIdType))
	}
	if m.Encry != 0 {
		n += 1 + sovMessagedb(uint64(m.Encry))
	}
	if len(m.MsgIds) > 0 {
		l = 0
		for _, e := range m.MsgIds {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetUserMsgHistory) Size() (n int) {
	var l int
	_ = l
	if m.Selfid != 0 {
		n += 1 + sovMessagedb(uint64(m.Selfid))
	}
	if m.Withid != 0 {
		n += 1 + sovMessagedb(uint64(m.Withid))
	}
	if m.Type != 0 {
		n += 1 + sovMessagedb(uint64(m.Type))
	}
	if m.OffsetId != 0 {
		n += 1 + sovMessagedb(uint64(m.OffsetId))
	}
	if m.OffsetDate != 0 {
		n += 1 + sovMessagedb(uint64(m.OffsetDate))
	}
	if m.AddOffset != 0 {
		n += 1 + sovMessagedb(uint64(m.AddOffset))
	}
	if m.MinId != 0 {
		n += 1 + sovMessagedb(uint64(m.MinId))
	}
	if m.MaxId != 0 {
		n += 1 + sovMessagedb(uint64(m.MaxId))
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.Encry != 0 {
		n += 1 + sovMessagedb(uint64(m.Encry))
	}
	if m.DeletMark != 0 {
		n += 1 + sovMessagedb(uint64(m.DeletMark))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetUserMsgUUID) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetUserMsgIdByUUID) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovMessagedb(uint64(m.Userid))
	}
	if m.UUID != 0 {
		n += 1 + sovMessagedb(uint64(m.UUID))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetUserMsgListByUUIDs) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovMessagedb(uint64(m.Userid))
	}
	if len(m.UUIDS) > 0 {
		l = 0
		for _, e := range m.UUIDS {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqDeleteUserMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqBatchDeleteUserMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if len(m.MsgIds) > 0 {
		l = 0
		for _, e := range m.MsgIds {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetOneUserMsgByUserIdAndMsgId) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithIdType))
	}
	if m.Encry != 0 {
		n += 1 + sovMessagedb(uint64(m.Encry))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqClearHistory) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithIdType))
	}
	if m.Encry != 0 {
		n += 1 + sovMessagedb(uint64(m.Encry))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *GetMessageHistoryPageByMediaConfig) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithType))
	}
	if m.MaxId != 0 {
		n += 1 + sovMessagedb(uint64(m.MaxId))
	}
	if m.Encry != 0 {
		n += 1 + sovMessagedb(uint64(m.Encry))
	}
	if len(m.Medias) > 0 {
		l = 0
		for _, e := range m.Medias {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	return n
}

func (m *ReqGetMessageHistoryPageByMedia) Size() (n int) {
	var l int
	_ = l
	if m.GetMessageHistoryPageByMediaConfig != nil {
		l = m.GetMessageHistoryPageByMediaConfig.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqInsertOrUpdateChannelMessageDeleteMark) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMessageDeleteMark != nil {
		l = m.ChannelMessageDeleteMark.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelMessageDeleteMark) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.ChannelID != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelID))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUserDialogSetUnreadMetionsCount) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.ChannelID != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelID))
	}
	if m.Type != 0 {
		n += 1 + sovMessagedb(uint64(m.Type))
	}
	if m.UnreadMetionsCount != 0 {
		n += 1 + sovMessagedb(uint64(m.UnreadMetionsCount))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyUserDialogSetUnreadMetionsCount) Size() (n int) {
	var l int
	_ = l
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUserDialogGetUnreadMetionsCount) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.ChannelID != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelID))
	}
	if m.Type != 0 {
		n += 1 + sovMessagedb(uint64(m.Type))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyUserDialogGetUnreadMetionsCount) Size() (n int) {
	var l int
	_ = l
	if m.UnreadMetionsCount != 0 {
		n += 1 + sovMessagedb(uint64(m.UnreadMetionsCount))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUserDialogChangeUnreadMetionsCount) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.ChannelID != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelID))
	}
	if m.Type != 0 {
		n += 1 + sovMessagedb(uint64(m.Type))
	}
	if m.UnreadMetionsCountChangeValue != 0 {
		n += 1 + sovMessagedb(uint64(m.UnreadMetionsCountChangeValue))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyUserDialogChangeUnreadMetionsCount) Size() (n int) {
	var l int
	_ = l
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetUserMediaMessageStatisticsByMedia) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithType))
	}
	if m.Media != 0 {
		n += 1 + sovMessagedb(uint64(m.Media))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetUserMediaMessageStatisticsByMedia) Size() (n int) {
	var l int
	_ = l
	if m.UserMediaMessageStatistics != nil {
		l = m.UserMediaMessageStatistics.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetMessageHistoryPageByMedia) Size() (n int) {
	var l int
	_ = l
	if len(m.UserMsgs) > 0 {
		for _, e := range m.UserMsgs {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	return n
}

func (m *ReqInsertOrUpdateUserDialogAndMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserDialogAndMsg != nil {
		l = m.UserDialogAndMsg.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.UpdateScore {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUpdateSelfDialogAndMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserDialogAndMsg != nil {
		l = m.UserDialogAndMsg.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUpdateDialogAddUnread) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.Type != 0 {
		n += 1 + sovMessagedb(uint64(m.Type))
	}
	if m.UnreadDelta != 0 {
		n += 1 + sovMessagedb(uint64(m.UnreadDelta))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyUpdateDialogAddUnread) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovMessagedb(uint64(m.ErrCode))
	}
	return n
}

func (m *ReqUpdateDialogClearDraft) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithIdType))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyUpdateDialogClearDraft) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqGetUserDialogAllUnread) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetUserDialogAllUnread) Size() (n int) {
	var l int
	_ = l
	if m.UnreadCount != 0 {
		n += 1 + sovMessagedb(uint64(m.UnreadCount))
	}
	return n
}

func (m *ReqUpdateReceDialogAndMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserDialogAndMsg != nil {
		l = m.UserDialogAndMsg.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetDialogAndMsgByUserIdAndWithIdAndType) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.Type != 0 {
		n += 1 + sovMessagedb(uint64(m.Type))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetDialogAndMsgsByUserId) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetDialogAndMsgsByPage) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithIdType))
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.FolderId != 0 {
		n += 1 + sovMessagedb(uint64(m.FolderId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqReadSelfDialogAndMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.Type != 0 {
		n += 1 + sovMessagedb(uint64(m.Type))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUpdateReadinbox) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.Type != 0 {
		n += 1 + sovMessagedb(uint64(m.Type))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUpdateReadoutbox) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.Type != 0 {
		n += 1 + sovMessagedb(uint64(m.Type))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqDeleteUserDialog) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.Type != 0 {
		n += 1 + sovMessagedb(uint64(m.Type))
	}
	if m.DeleteDate != 0 {
		n += 1 + sovMessagedb(uint64(m.DeleteDate))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUpdateUserDialog) Size() (n int) {
	var l int
	_ = l
	if m.UpdateUserDialogParam != nil {
		l = m.UpdateUserDialogParam.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *UpdateUserDialogParam) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithType))
	}
	if m.TopMessage != 0 {
		n += 1 + sovMessagedb(uint64(m.TopMessage))
	}
	if m.ReadInboxMaxId != 0 {
		n += 1 + sovMessagedb(uint64(m.ReadInboxMaxId))
	}
	if m.ReadOutboxMaxId != 0 {
		n += 1 + sovMessagedb(uint64(m.ReadOutboxMaxId))
	}
	if m.UnreadMetionsCount != 0 {
		n += 1 + sovMessagedb(uint64(m.UnreadMetionsCount))
	}
	if m.UnreadCount != 0 {
		n += 1 + sovMessagedb(uint64(m.UnreadCount))
	}
	if m.Pts != 0 {
		n += 1 + sovMessagedb(uint64(m.Pts))
	}
	if m.UpdateDate != 0 {
		n += 1 + sovMessagedb(uint64(m.UpdateDate))
	}
	return n
}

func (m *ReqUpdateUserDialogUpdateDate) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithType))
	}
	if m.UpdateDate != 0 {
		n += 1 + sovMessagedb(uint64(m.UpdateDate))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUpdateDialogToPinged) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithIdType))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUpdateDialogToFolder) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithIdType))
	}
	if m.FolderId != 0 {
		n += 1 + sovMessagedb(uint64(m.FolderId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqCancelPingedDialog) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithIdType))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetPingedDialogAndMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.FolderId != 0 {
		n += 1 + sovMessagedb(uint64(m.FolderId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetLastLimitDialog) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *UserRating) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Rating != 0 {
		n += 9
	}
	return n
}

func (m *ReplyGetLastLimitDialog) Size() (n int) {
	var l int
	_ = l
	if len(m.UserRatingList) > 0 {
		for _, e := range m.UserRatingList {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	return n
}

func (m *ReqUpdateReadInBoxMaxId) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.Type != 0 {
		n += 1 + sovMessagedb(uint64(m.Type))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUpdateReadOutBoxMaxId) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.Type != 0 {
		n += 1 + sovMessagedb(uint64(m.Type))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUpdateChannelReadinbox) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.Type != 0 {
		n += 1 + sovMessagedb(uint64(m.Type))
	}
	if m.ReadIn != 0 {
		n += 1 + sovMessagedb(uint64(m.ReadIn))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUpdateChannelReadoutbox) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.Type != 0 {
		n += 1 + sovMessagedb(uint64(m.Type))
	}
	if m.ReadOut != 0 {
		n += 1 + sovMessagedb(uint64(m.ReadOut))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqDeleteUserDialogByChannelId) Size() (n int) {
	var l int
	_ = l
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithIdType))
	}
	if m.DeleteDate != 0 {
		n += 1 + sovMessagedb(uint64(m.DeleteDate))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetUserChannelDialogByUserId) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqStoreUserDialogErlang) Size() (n int) {
	var l int
	_ = l
	if m.UserDialogErlang != nil {
		l = m.UserDialogErlang.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetUserDialogErlangByUserIdWithIdWithType) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithType))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetUserDialogErlangByUserIdWithIdWithType) Size() (n int) {
	var l int
	_ = l
	if m.UserDialogErlang != nil {
		l = m.UserDialogErlang.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqInsertRandomStatus) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.RandomId != 0 {
		n += 1 + sovMessagedb(uint64(m.RandomId))
	}
	if m.Handle != 0 {
		n += 1 + sovMessagedb(uint64(m.Handle))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetRandomStatus) Size() (n int) {
	var l int
	_ = l
	if m.KeyID != 0 {
		n += 1 + sovMessagedb(uint64(m.KeyID))
	}
	if m.RandomID != 0 {
		n += 1 + sovMessagedb(uint64(m.RandomID))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqSetSuperGroupMsg) Size() (n int) {
	var l int
	_ = l
	if m.Date != 0 {
		n += 1 + sovMessagedb(uint64(m.Date))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplySetSuperGroupMsg) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqGetSuperGroupMsg) Size() (n int) {
	var l int
	_ = l
	if m.Date != 0 {
		n += 1 + sovMessagedb(uint64(m.Date))
	}
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetSuperGroupMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Msg) > 0 {
		for _, b := range m.Msg {
			l = len(b)
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if m.Date != 0 {
		n += 1 + sovMessagedb(uint64(m.Date))
	}
	if m.GetAll {
		n += 2
	}
	return n
}

func (m *ReqInsertMsgIdSerialCodeMap) Size() (n int) {
	var l int
	_ = l
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	l = len(m.SerialCode)
	if l > 0 {
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyInsertMsgIdSerialCodeMap) Size() (n int) {
	var l int
	_ = l
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	l = len(m.SerialCode)
	if l > 0 {
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetMsgIdSerialCodeMap) Size() (n int) {
	var l int
	_ = l
	l = len(m.SerialCode)
	if l > 0 {
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetMsgIdSerialCodeMap) Size() (n int) {
	var l int
	_ = l
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	l = len(m.SerialCode)
	if l > 0 {
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *MsgIdSerialCodeMapRecord) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMessagedb(uint64(m.Id))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	l = len(m.SerialCode)
	if l > 0 {
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.InsertDate != 0 {
		n += 1 + sovMessagedb(uint64(m.InsertDate))
	}
	return n
}

func (m *ReqUpdateChannelMsgId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyUpdateChannelMsgId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		l = m.ChannelMsgId.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUpdateChannelMsgIdAndPts) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyUpdateChannelMsgIdAndPts) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		l = m.ChannelMsgId.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqSetChannelMsgIdAndPts) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		l = m.ChannelMsgId.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplySetChannelMsgIdAndPts) Size() (n int) {
	var l int
	_ = l
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUpdateChannelPts) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyUpdateChannelPts) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		l = m.ChannelMsgId.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUpdateChannelPtsWithNum) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.Number != 0 {
		n += 1 + sovMessagedb(uint64(m.Number))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyUpdateChannelPtsWithNum) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		l = m.ChannelMsgId.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelMsgId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelMsgId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		l = m.ChannelMsgId.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqStoreChannelPtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.ChannelPtsHandle != nil {
		l = m.ChannelPtsHandle.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqBatchStoreChannelPtsHandle) Size() (n int) {
	var l int
	_ = l
	if len(m.ChannelPtsHandles) > 0 {
		for _, e := range m.ChannelPtsHandles {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyErr) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovMessagedb(uint64(m.ErrCode))
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelDiffByPts) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.Pts != 0 {
		n += 1 + sovMessagedb(uint64(m.Pts))
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.MinId != 0 {
		n += 1 + sovMessagedb(uint64(m.MinId))
	}
	if m.MaxId != 0 {
		n += 1 + sovMessagedb(uint64(m.MaxId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelDiffByPts) Size() (n int) {
	var l int
	_ = l
	if m.IsFianl {
		n += 2
	}
	if m.ToLong {
		n += 2
	}
	if m.Pts != 0 {
		n += 1 + sovMessagedb(uint64(m.Pts))
	}
	if m.TopMsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.TopMsgId))
	}
	if len(m.Msgs) > 0 {
		for _, b := range m.Msgs {
			l = len(b)
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetUserDiff) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Date != 0 {
		n += 1 + sovMessagedb(uint64(m.Date))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ChannelPtsDiff) Size() (n int) {
	var l int
	_ = l
	if m.ChannelID != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelID))
	}
	if m.Pts != 0 {
		n += 1 + sovMessagedb(uint64(m.Pts))
	}
	return n
}

func (m *ReplyGetUserDiff) Size() (n int) {
	var l int
	_ = l
	if len(m.ChannelPtsDiffs) > 0 {
		for _, e := range m.ChannelPtsDiffs {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelLastPtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelLastPtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.ChannelPtsHandle != nil {
		l = m.ChannelPtsHandle.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqDeleteChannelPtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.Pts != 0 {
		n += 1 + sovMessagedb(uint64(m.Pts))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyDeleteChannelPtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqInsertOrUpdateChannelMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserMsg != nil {
		l = m.UserMsg.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUpdateChannelMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserMsg != nil {
		l = m.UserMsg.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqBatchInsertOrUpdateChannelMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.UserMsgs) > 0 {
		for _, e := range m.UserMsgs {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqDeleteMsgs) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if len(m.MsgIds) > 0 {
		l = 0
		for _, e := range m.MsgIds {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyDeleteMsgs) Size() (n int) {
	var l int
	_ = l
	if m.CurentMsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.CurentMsgId))
	}
	if m.UpdateDate != 0 {
		n += 1 + sovMessagedb(uint64(m.UpdateDate))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqDeleteUserHistory) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyDeleteUserHistory) Size() (n int) {
	var l int
	_ = l
	if m.MsgsAndMaxId != nil {
		l = m.MsgsAndMaxId.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if len(m.Ptss) > 0 {
		l = 0
		for _, e := range m.Ptss {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.UpdateDate != 0 {
		n += 1 + sovMessagedb(uint64(m.UpdateDate))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqDeleteChannelMsg) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqDeleteChannelMessage) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyDeleteChannelMessage) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.CurrentMsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.CurrentMsgId))
	}
	if m.UpdateDate != 0 {
		n += 1 + sovMessagedb(uint64(m.UpdateDate))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelMessage) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelMessage) Size() (n int) {
	var l int
	_ = l
	if m.UserMsg != nil {
		l = m.UserMsg.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelMsgsByMsgIds) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if len(m.MsgIds) > 0 {
		l = 0
		for _, e := range m.MsgIds {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelMsgsByMsgIds) Size() (n int) {
	var l int
	_ = l
	if m.UserMsgListAndPts != nil {
		l = m.UserMsgListAndPts.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelMsgHistory) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.OffsetId != 0 {
		n += 1 + sovMessagedb(uint64(m.OffsetId))
	}
	if m.OffsetDate != 0 {
		n += 1 + sovMessagedb(uint64(m.OffsetDate))
	}
	if m.AddOffset != 0 {
		n += 1 + sovMessagedb(uint64(m.AddOffset))
	}
	if m.MinId != 0 {
		n += 1 + sovMessagedb(uint64(m.MinId))
	}
	if m.MaxId != 0 {
		n += 1 + sovMessagedb(uint64(m.MaxId))
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.Encry != 0 {
		n += 1 + sovMessagedb(uint64(m.Encry))
	}
	if m.DeleteMark != 0 {
		n += 1 + sovMessagedb(uint64(m.DeleteMark))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelMsgHistory) Size() (n int) {
	var l int
	_ = l
	if m.UserMsgListAndPts != nil {
		l = m.UserMsgListAndPts.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelTopMst) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if len(m.Medias) > 0 {
		l = 0
		for _, e := range m.Medias {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.MaxId != 0 {
		n += 1 + sovMessagedb(uint64(m.MaxId))
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.Encry != 0 {
		n += 1 + sovMessagedb(uint64(m.Encry))
	}
	return n
}

func (m *ReqGetChannelMediaMessageHistoryByMedia) Size() (n int) {
	var l int
	_ = l
	if m.GetChannelMediaMessageHistoryByMediaConfig != nil {
		l = m.GetChannelMediaMessageHistoryByMediaConfig.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelMediaMessageHistoryByMedia) Size() (n int) {
	var l int
	_ = l
	if len(m.ChannelMsgs) > 0 {
		for _, e := range m.ChannelMsgs {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyInsertOrUpdateChannelMessageDeleteMark) Size() (n int) {
	var l int
	_ = l
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelMessageDeleteMark) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMessageDeleteMark != nil {
		l = m.ChannelMessageDeleteMark.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelMediaMessageStatisticsByMedia) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.Media != 0 {
		n += 1 + sovMessagedb(uint64(m.Media))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelMediaMessageStatisticsByMedia) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMediaMessageStatistics != nil {
		l = m.ChannelMediaMessageStatistics.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelTopMst) Size() (n int) {
	var l int
	_ = l
	if m.UserMsg != nil {
		l = m.UserMsg.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqInsertOrUpdateChannelDialogAndMsg) Size() (n int) {
	var l int
	_ = l
	if m.ChannelDialog != nil {
		l = m.ChannelDialog.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ChannelMsg != nil {
		l = m.ChannelMsg.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetDialogMaxReadInMsgId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetDialogMaxReadInMsgId) Size() (n int) {
	var l int
	_ = l
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqSetDialogMaxReadInMsgId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetDialogAndMsg) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetDialogAndMsg) Size() (n int) {
	var l int
	_ = l
	if m.ChannelDialogAndMsg != nil {
		l = m.ChannelDialogAndMsg.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqGetDialogAndMsgs) Size() (n int) {
	var l int
	_ = l
	if len(m.ChannelIds) > 0 {
		l = 0
		for _, e := range m.ChannelIds {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyGetDialogAndMsgs) Size() (n int) {
	var l int
	_ = l
	if m.ChannelDialogAndMsgs != nil {
		l = m.ChannelDialogAndMsgs.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqStoreAdminLog) Size() (n int) {
	var l int
	_ = l
	if m.ChannelAdminLog != nil {
		l = m.ChannelAdminLog.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqFindsAdminLogByChannelId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyFindsAdminLog) Size() (n int) {
	var l int
	_ = l
	if len(m.AdminLogs) > 0 {
		for _, e := range m.AdminLogs {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if len(m.AdminUsers) > 0 {
		l = 0
		for _, e := range m.AdminUsers {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if len(m.EventFilters) > 0 {
		l = 0
		for _, e := range m.EventFilters {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if len(m.EventFilters) > 0 {
		l = 0
		for _, e := range m.EventFilters {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqFindsAdminLogByChannelIdAndUserId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if len(m.AdminUsers) > 0 {
		l = 0
		for _, e := range m.AdminUsers {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if len(m.EventFilters) > 0 {
		l = 0
		for _, e := range m.EventFilters {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqFindsAdminLogByChannelIdAndEventFilters) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if len(m.EventFilters) > 0 {
		l = 0
		for _, e := range m.EventFilters {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if len(m.AdminUsers) > 0 {
		l = 0
		for _, e := range m.AdminUsers {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqChannelMessageAtAdd) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	if m.Encry != 0 {
		n += 1 + sovMessagedb(uint64(m.Encry))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyChannelMessageAtAdd) Size() (n int) {
	var l int
	_ = l
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqChannelMessageAtGet) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	if m.AddOffset != 0 {
		n += 1 + sovMessagedb(uint64(m.AddOffset))
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyChannelMessageAtGet) Size() (n int) {
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqChannelMessageAtDel) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyChannelMessageAtDel) Size() (n int) {
	var l int
	_ = l
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUserMessageAtAdd) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	if m.Encry != 0 {
		n += 1 + sovMessagedb(uint64(m.Encry))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyUserMessageAtAdd) Size() (n int) {
	var l int
	_ = l
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUserMessageAtGet) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	if m.AddOffset != 0 {
		n += 1 + sovMessagedb(uint64(m.AddOffset))
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyUserMessageAtGet) Size() (n int) {
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqUserMessageAtDel) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReplyUserMessageAtDel) Size() (n int) {
	var l int
	_ = l
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ChannelMessageAt) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	if m.Encry != 0 {
		n += 1 + sovMessagedb(uint64(m.Encry))
	}
	return n
}

func (m *UserMessageAt) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	if m.Encry != 0 {
		n += 1 + sovMessagedb(uint64(m.Encry))
	}
	return n
}

func (m *ChannelMessageDeleteMark) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	return n
}

func (m *MsgIdImported) Size() (n int) {
	var l int
	_ = l
	if m.UserIdOrChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserIdOrChannelId))
	}
	if m.Imported {
		n += 2
	}
	return n
}

func (m *UserMediaMessageStatistics) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithType))
	}
	if m.Media != 0 {
		n += 1 + sovMessagedb(uint64(m.Media))
	}
	if m.Count != 0 {
		n += 1 + sovMessagedb(uint64(m.Count))
	}
	return n
}

func (m *ChannelMediaMessageStatistics) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.Media != 0 {
		n += 1 + sovMessagedb(uint64(m.Media))
	}
	if m.Count != 0 {
		n += 1 + sovMessagedb(uint64(m.Count))
	}
	return n
}

func (m *UserDialogErlang) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMessagedb(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithType))
	}
	if m.HaveImport {
		n += 2
	}
	if m.CreateTime != 0 {
		n += 1 + sovMessagedb(uint64(m.CreateTime))
	}
	if m.UpdateTime != 0 {
		n += 1 + sovMessagedb(uint64(m.UpdateTime))
	}
	return n
}

func (m *PtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Pts != 0 {
		n += 1 + sovMessagedb(uint64(m.Pts))
	}
	if m.Type != 0 {
		n += 1 + sovMessagedb(uint64(m.Type))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovMessagedb(uint64(m.Date))
	}
	return n
}

func (m *OtherInfoMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Date != 0 {
		n += 1 + sovMessagedb(uint64(m.Date))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ChannelPtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.Pts != 0 {
		n += 1 + sovMessagedb(uint64(m.Pts))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovMessagedb(uint64(m.Date))
	}
	return n
}

func (m *ChannelAdminLog) Size() (n int) {
	var l int
	_ = l
	if m.ActionId != 0 {
		n += 1 + sovMessagedb(uint64(m.ActionId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.AdminUserId != 0 {
		n += 1 + sovMessagedb(uint64(m.AdminUserId))
	}
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.ActionType != 0 {
		n += 1 + sovMessagedb(uint64(m.ActionType))
	}
	l = len(m.AdminLog)
	if l > 0 {
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovMessagedb(uint64(m.Date))
	}
	return n
}

func (m *UserPingedDialog) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithIdType))
	}
	if m.PingedNum != 0 {
		n += 1 + sovMessagedb(uint64(m.PingedNum))
	}
	return n
}

func (m *UserDialog) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMessagedb(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.Type != 0 {
		n += 1 + sovMessagedb(uint64(m.Type))
	}
	if m.Flags != 0 {
		n += 1 + sovMessagedb(uint64(m.Flags))
	}
	if m.Pinged {
		n += 2
	}
	if m.TopMessage != 0 {
		n += 1 + sovMessagedb(uint64(m.TopMessage))
	}
	if m.ReadInboxMaxId != 0 {
		n += 1 + sovMessagedb(uint64(m.ReadInboxMaxId))
	}
	if m.ReadOutboxMaxId != 0 {
		n += 1 + sovMessagedb(uint64(m.ReadOutboxMaxId))
	}
	if m.UnreadMetionsCount != 0 {
		n += 1 + sovMessagedb(uint64(m.UnreadMetionsCount))
	}
	if m.UnreadCount != 0 {
		n += 1 + sovMessagedb(uint64(m.UnreadCount))
	}
	if m.NotifySettingsFlags != 0 {
		n += 1 + sovMessagedb(uint64(m.NotifySettingsFlags))
	}
	if m.ShowPreviews {
		n += 2
	}
	if m.Silent {
		n += 2
	}
	if m.MuteUntil != 0 {
		n += 1 + sovMessagedb(uint64(m.MuteUntil))
	}
	l = len(m.Sound)
	if l > 0 {
		n += 2 + l + sovMessagedb(uint64(l))
	}
	if m.Pts != 0 {
		n += 2 + sovMessagedb(uint64(m.Pts))
	}
	l = len(m.Draft)
	if l > 0 {
		n += 2 + l + sovMessagedb(uint64(l))
	}
	if m.FolderId != 0 {
		n += 2 + sovMessagedb(uint64(m.FolderId))
	}
	if m.Readinpts != 0 {
		n += 2 + sovMessagedb(uint64(m.Readinpts))
	}
	if m.Readoutpts != 0 {
		n += 2 + sovMessagedb(uint64(m.Readoutpts))
	}
	if len(m.LinkUser) > 0 {
		l = 0
		for _, e := range m.LinkUser {
			l += sovMessagedb(uint64(e))
		}
		n += 2 + sovMessagedb(uint64(l)) + l
	}
	if m.InsertDate != 0 {
		n += 2 + sovMessagedb(uint64(m.InsertDate))
	}
	if m.UpdateDate != 0 {
		n += 2 + sovMessagedb(uint64(m.UpdateDate))
	}
	if m.Encry != 0 {
		n += 2 + sovMessagedb(uint64(m.Encry))
	}
	if m.Revoke {
		n += 3
	}
	return n
}

func (m *ForWardUserMsg) Size() (n int) {
	var l int
	_ = l
	if m.Date != 0 {
		n += 1 + sovMessagedb(uint64(m.Date))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Media != 0 {
		n += 1 + sovMessagedb(uint64(m.Media))
	}
	l = len(m.MediaData)
	if l > 0 {
		n += 1 + l + sovMessagedb(uint64(l))
	}
	l = len(m.ReplyMarkup)
	if l > 0 {
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			l = len(b)
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if m.FromId != 0 {
		n += 1 + sovMessagedb(uint64(m.FromId))
	}
	if m.Encry != 0 {
		n += 1 + sovMessagedb(uint64(m.Encry))
	}
	l = len(m.FwdFrom)
	if l > 0 {
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.GroupId != 0 {
		n += 1 + sovMessagedb(uint64(m.GroupId))
	}
	if m.ViaBotId != 0 {
		n += 1 + sovMessagedb(uint64(m.ViaBotId))
	}
	if m.MsgID != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgID))
	}
	return n
}

func (m *UserMsgId) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMessagedb(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	if m.Pts != 0 {
		n += 1 + sovMessagedb(uint64(m.Pts))
	}
	return n
}

func (m *UserLocalId) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.LocalId != 0 {
		n += 1 + sovMessagedb(uint64(m.LocalId))
	}
	return n
}

func (m *ChannelLocalId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.LocalId != 0 {
		n += 1 + sovMessagedb(uint64(m.LocalId))
	}
	return n
}

func (m *UserIdAndWithIdAndTypeAndEncry) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithIdType))
	}
	if m.Encry != 0 {
		n += 1 + sovMessagedb(uint64(m.Encry))
	}
	return n
}

func (m *Status) Size() (n int) {
	var l int
	_ = l
	if m.Satus {
		n += 2
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovMessagedb(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *UserIdAndWithId) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	return n
}

func (m *WithIdAndType) Size() (n int) {
	var l int
	_ = l
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithIdType))
	}
	return n
}

func (m *UserIdAndWithIdAndType) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.Type != 0 {
		n += 1 + sovMessagedb(uint64(m.Type))
	}
	return n
}

func (m *UserId) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	return n
}

func (m *UserIdAndPts) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Pts != 0 {
		n += 1 + sovMessagedb(uint64(m.Pts))
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	return n
}

func (m *Bytes) Size() (n int) {
	var l int
	_ = l
	if len(m.Msg) > 0 {
		for _, b := range m.Msg {
			l = len(b)
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	return n
}

func (m *UserMsg) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMessagedb(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithIdType))
	}
	if m.MessageType != 0 {
		n += 1 + sovMessagedb(uint64(m.MessageType))
	}
	if m.Flags != 0 {
		n += 1 + sovMessagedb(uint64(m.Flags))
	}
	if m.Out {
		n += 2
	}
	if m.Mentioned {
		n += 2
	}
	if m.MediaUnread {
		n += 2
	}
	if m.Silent {
		n += 2
	}
	if m.Post {
		n += 2
	}
	if m.GroupId != 0 {
		n += 1 + sovMessagedb(uint64(m.GroupId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	if m.ToId != 0 {
		n += 1 + sovMessagedb(uint64(m.ToId))
	}
	if m.Pts != 0 {
		n += 1 + sovMessagedb(uint64(m.Pts))
	}
	l = len(m.FwdFrom)
	if l > 0 {
		n += 2 + l + sovMessagedb(uint64(l))
	}
	if m.ViaBotId != 0 {
		n += 2 + sovMessagedb(uint64(m.ViaBotId))
	}
	if m.ReplyToMsgId != 0 {
		n += 2 + sovMessagedb(uint64(m.ReplyToMsgId))
	}
	if m.Date != 0 {
		n += 2 + sovMessagedb(uint64(m.Date))
	}
	l = len(m.Message)
	if l > 0 {
		n += 2 + l + sovMessagedb(uint64(l))
	}
	if m.Media != 0 {
		n += 2 + sovMessagedb(uint64(m.Media))
	}
	l = len(m.MediaData)
	if l > 0 {
		n += 2 + l + sovMessagedb(uint64(l))
	}
	l = len(m.ReplyMarkup)
	if l > 0 {
		n += 2 + l + sovMessagedb(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			l = len(b)
			n += 2 + l + sovMessagedb(uint64(l))
		}
	}
	if m.FromId != 0 {
		n += 2 + sovMessagedb(uint64(m.FromId))
	}
	if m.Views != 0 {
		n += 2 + sovMessagedb(uint64(m.Views))
	}
	if m.EditDate != 0 {
		n += 2 + sovMessagedb(uint64(m.EditDate))
	}
	l = len(m.Action)
	if l > 0 {
		n += 2 + l + sovMessagedb(uint64(l))
	}
	if m.RandomId != 0 {
		n += 2 + sovMessagedb(uint64(m.RandomId))
	}
	if m.Uuid != 0 {
		n += 2 + sovMessagedb(uint64(m.Uuid))
	}
	if m.InsertDate != 0 {
		n += 2 + sovMessagedb(uint64(m.InsertDate))
	}
	if m.UpdateDate != 0 {
		n += 2 + sovMessagedb(uint64(m.UpdateDate))
	}
	if m.Encry != 0 {
		n += 2 + sovMessagedb(uint64(m.Encry))
	}
	if m.Combination != nil {
		l = m.Combination.Size()
		n += 2 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *Combination) Size() (n int) {
	var l int
	_ = l
	if len(m.MentionedSlice) > 0 {
		for _, e := range m.MentionedSlice {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if len(m.KeyId) > 0 {
		l = 0
		for _, e := range m.KeyId {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	return n
}

func (m *MentionStatus) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.Status != 0 {
		n += 1 + sovMessagedb(uint64(m.Status))
	}
	return n
}

func (m *UserIdAndMsgId) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	return n
}

func (m *UUID) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovMessagedb(uint64(m.Userid))
	}
	if m.UUID != 0 {
		n += 1 + sovMessagedb(uint64(m.UUID))
	}
	return n
}

func (m *MsgId) Size() (n int) {
	var l int
	_ = l
	if m.MsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MsgId))
	}
	return n
}

func (m *UUIDS) Size() (n int) {
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovMessagedb(uint64(m.Userid))
	}
	if len(m.UUIDS) > 0 {
		l = 0
		for _, e := range m.UUIDS {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	return n
}

func (m *MsgIDList) Size() (n int) {
	var l int
	_ = l
	if len(m.MsgId) > 0 {
		l = 0
		for _, e := range m.MsgId {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if len(m.Pts) > 0 {
		l = 0
		for _, e := range m.Pts {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.LastMsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.LastMsgId))
	}
	if m.Count != 0 {
		n += 1 + sovMessagedb(uint64(m.Count))
	}
	return n
}

func (m *UserIdAndWithIdAndMsgIds) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if len(m.MsgIds) > 0 {
		l = 0
		for _, e := range m.MsgIds {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	return n
}

func (m *UserIdAndRandomId) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.RandomId != 0 {
		n += 1 + sovMessagedb(uint64(m.RandomId))
	}
	if m.Handle != 0 {
		n += 1 + sovMessagedb(uint64(m.Handle))
	}
	return n
}

func (m *ReplyGetRandomStatus) Size() (n int) {
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	return n
}

func (m *SearchMediaMsgByFilterReqPara) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.WithType != 0 {
		n += 1 + sovMessagedb(uint64(m.WithType))
	}
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.FromId != 0 {
		n += 1 + sovMessagedb(uint64(m.FromId))
	}
	if len(m.MediaType) > 0 {
		l = 0
		for _, e := range m.MediaType {
			l += sovMessagedb(uint64(e))
		}
		n += 1 + sovMessagedb(uint64(l)) + l
	}
	if m.MinDate != 0 {
		n += 1 + sovMessagedb(uint64(m.MinDate))
	}
	if m.MaxDate != 0 {
		n += 1 + sovMessagedb(uint64(m.MaxDate))
	}
	if m.OffsetId != 0 {
		n += 1 + sovMessagedb(uint64(m.OffsetId))
	}
	if m.AddOffset != 0 {
		n += 1 + sovMessagedb(uint64(m.AddOffset))
	}
	if m.Limit != 0 {
		n += 1 + sovMessagedb(uint64(m.Limit))
	}
	if m.MaxId != 0 {
		n += 1 + sovMessagedb(uint64(m.MaxId))
	}
	if m.MinId != 0 {
		n += 1 + sovMessagedb(uint64(m.MinId))
	}
	if m.Hash != 0 {
		n += 1 + sovMessagedb(uint64(m.Hash))
	}
	return n
}

func (m *SearchMediaMsgByFilterRespData) Size() (n int) {
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovMessagedb(uint64(m.Count))
	}
	if m.Pts != 0 {
		n += 1 + sovMessagedb(uint64(m.Pts))
	}
	return n
}

func (m *ReqSearchUserMediaMsgByFilter) Size() (n int) {
	var l int
	_ = l
	if m.Para != nil {
		l = m.Para.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *RespSearchUserMediaMsgByFilter) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqSearchChannelMediaMsgByFilter) Size() (n int) {
	var l int
	_ = l
	if m.Para != nil {
		l = m.Para.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *RespSearchChannelMediaMsgByFilter) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *QueryDialogData) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovMessagedb(uint64(m.WithId))
	}
	if m.UnreadCount != 0 {
		n += 1 + sovMessagedb(uint64(m.UnreadCount))
	}
	return n
}

func (m *ReqGetDialogUnreadCountByUserIdAndWithId) Size() (n int) {
	var l int
	_ = l
	if len(m.DialogList) > 0 {
		for _, e := range m.DialogList {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *RespGetDialogUnreadCountByUserIdAndWithId) Size() (n int) {
	var l int
	_ = l
	if len(m.DialogList) > 0 {
		for _, e := range m.DialogList {
			l = e.Size()
			n += 1 + l + sovMessagedb(uint64(l))
		}
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovMessagedb(uint64(l))
	}
	return n
}

func (m *ReqShDeleteUserHistory) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMessagedb(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovMessagedb(uint64(m.UserId))
	}
	if m.MaxMsgId != 0 {
		n += 1 + sovMessagedb(uint64(m.MaxMsgId))
	}
	return n
}

func sovMessagedb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessagedb(x uint64) (n int) {
	return sovMessagedb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReplyNull) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyNull: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyNull: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUpdateUserDialogUpdateDate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUpdateUserDialogUpdateDate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUpdateUserDialogUpdateDate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUpdateUserDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUpdateUserDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUpdateUserDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelIdAndLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelIdAndLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelIdAndLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelIdAndUserIdAndLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelIdAndUserIdAndLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelIdAndUserIdAndLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelIdAndAdminUsersAndEventFiltersAndUserId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelIdAndAdminUsersAndEventFiltersAndUserId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelIdAndAdminUsersAndEventFiltersAndUserId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AdminUsers = append(m.AdminUsers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AdminUsers = append(m.AdminUsers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUsers", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EventFilters = append(m.EventFilters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EventFilters = append(m.EventFilters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EventFilters", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelIdAndAdminUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelIdAndAdminUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelIdAndAdminUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AdminUsers = append(m.AdminUsers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AdminUsers = append(m.AdminUsers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUsers", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelIdAndEventFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelIdAndEventFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelIdAndEventFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EventFilters = append(m.EventFilters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EventFilters = append(m.EventFilters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EventFilters", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelIdAndAdminUsersAndEventFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelIdAndAdminUsersAndEventFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelIdAndAdminUsersAndEventFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AdminUsers = append(m.AdminUsers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AdminUsers = append(m.AdminUsers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUsers", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EventFilters = append(m.EventFilters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EventFilters = append(m.EventFilters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EventFilters", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelIdAndEventFiltersAndUserId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelIdAndEventFiltersAndUserId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelIdAndEventFiltersAndUserId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EventFilters = append(m.EventFilters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EventFilters = append(m.EventFilters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EventFilters", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDate", wireType)
			}
			m.LastDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChannelIds = append(m.ChannelIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChannelIds = append(m.ChannelIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelIdAndMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelIdAndMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelIdAndMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelIdAndMsgIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelIdAndMsgIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelIdAndMsgIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgIds = append(m.MsgIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgIds = append(m.MsgIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelIdAndUserId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelIdAndUserId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelIdAndUserId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialogIsCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialogIsCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialogIsCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialogIdCreated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DialogIdCreated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelIdAndNum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelIdAndNum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelIdAndNum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgsAndMaxId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgsAndMaxId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgsAndMaxId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMsgId", wireType)
			}
			m.MaxMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Msgs = append(m.Msgs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Msgs = append(m.Msgs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMessage", wireType)
			}
			m.TopMessage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMessage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReadInId", wireType)
			}
			m.MaxReadInId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxReadInId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelDialogAndMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelDialogAndMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelDialogAndMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelDialog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelDialog == nil {
				m.ChannelDialog = &ChannelDialog{}
			}
			if err := m.ChannelDialog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMsg == nil {
				m.ChannelMsg = &UserMsg{}
			}
			if err := m.ChannelMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelDialogAndMsgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelDialogAndMsgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelDialogAndMsgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelDialogAndMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelDialogAndMsgs = append(m.ChannelDialogAndMsgs, &ChannelDialogAndMsg{})
			if err := m.ChannelDialogAndMsgs[len(m.ChannelDialogAndMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqForWardUserMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqForWardUserMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqForWardUserMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIdType", wireType)
			}
			m.WithIdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithIdType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgIds = append(m.MsgIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgIds = append(m.MsgIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUserMsgHis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUserMsgHis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUserMsgHis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfid", wireType)
			}
			m.Selfid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selfid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withid", wireType)
			}
			m.Withid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Withid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOffset", wireType)
			}
			m.AddOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOffset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialogTopMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialogTopMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialogTopMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMessage", wireType)
			}
			m.TopMessage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMessage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForWardUserMsgList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForWardUserMsgList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForWardUserMsgList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForWardUserMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForWardUserMsg = append(m.ForWardUserMsg, &ForWardUserMsg{})
			if err := m.ForWardUserMsg[len(m.ForWardUserMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMsgList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMsgList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMsgList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserMsgs = append(m.UserMsgs, &UserMsg{})
			if err := m.UserMsgs[len(m.UserMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMsgListAndPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMsgListAndPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMsgListAndPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserMsgs = append(m.UserMsgs, &UserMsg{})
			if err := m.UserMsgs[len(m.UserMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDialogList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDialogList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDialogList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserDialogs = append(m.UserDialogs, &UserDialog{})
			if err := m.UserDialogs[len(m.UserDialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDialogAndMsgList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDialogAndMsgList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDialogAndMsgList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDialogAndMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserDialogAndMsgs = append(m.UserDialogAndMsgs, &UserDialogAndMsg{})
			if err := m.UserDialogAndMsgs[len(m.UserDialogAndMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetPingedDialogAndMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetPingedDialogAndMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetPingedDialogAndMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialogMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DialogMsg == nil {
				m.DialogMsg = &UserDialogAndMsgList{}
			}
			if err := m.DialogMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopPeerId", wireType)
			}
			m.TopPeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopPeerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopPeerType", wireType)
			}
			m.TopPeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopPeerType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMsgId", wireType)
			}
			m.TopMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadMutedPeersCount", wireType)
			}
			m.UnreadMutedPeersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadMutedPeersCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadUnmutedPeersCount", wireType)
			}
			m.UnreadUnmutedPeersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadUnmutedPeersCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadMutedMessagesCount", wireType)
			}
			m.UnreadMutedMessagesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadMutedMessagesCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadUnmutedMessagesCount", wireType)
			}
			m.UnreadUnmutedMessagesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadUnmutedMessagesCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDialogAndMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDialogAndMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDialogAndMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDialog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserDialog == nil {
				m.UserDialog = &UserDialog{}
			}
			if err := m.UserDialog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMsg == nil {
				m.UserMsg = &UserMsg{}
			}
			if err := m.UserMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqInsertOrUpdateUserMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqInsertOrUpdateUserMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqInsertOrUpdateUserMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqIncreaseUserLocalId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqIncreaseUserLocalId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqIncreaseUserLocalId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyIncreaseUserLocalId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyIncreaseUserLocalId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyIncreaseUserLocalId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLocalId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserLocalId == nil {
				m.UserLocalId = &UserLocalId{}
			}
			if err := m.UserLocalId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetCurrentUserLocalId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetCurrentUserLocalId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetCurrentUserLocalId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetCurrentUserLocalId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetCurrentUserLocalId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetCurrentUserLocalId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLocalId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserLocalId == nil {
				m.UserLocalId = &UserLocalId{}
			}
			if err := m.UserLocalId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqIncreaseChannelLocalId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqIncreaseChannelLocalId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqIncreaseChannelLocalId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyIncreaseChannelLocalId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyIncreaseChannelLocalId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyIncreaseChannelLocalId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelLocalId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelLocalId == nil {
				m.ChannelLocalId = &ChannelLocalId{}
			}
			if err := m.ChannelLocalId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetCurrentChannelLocalId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetCurrentChannelLocalId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetCurrentChannelLocalId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetCurrentChannelLocalId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetCurrentChannelLocalId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetCurrentChannelLocalId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelLocalId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelLocalId == nil {
				m.ChannelLocalId = &ChannelLocalId{}
			}
			if err := m.ChannelLocalId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqIncreaseUserMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqIncreaseUserMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqIncreaseUserMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIdDelta", wireType)
			}
			m.MsgIdDelta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgIdDelta |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsDelta", wireType)
			}
			m.PtsDelta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PtsDelta |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSetUserMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSetUserMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSetUserMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsgId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMsgId == nil {
				m.UserMsgId = &UserMsgId{}
			}
			if err := m.UserMsgId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSetMsgIdImported) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSetMsgIdImported: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSetMsgIdImported: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIdImported", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgIdImported == nil {
				m.MsgIdImported = &MsgIdImported{}
			}
			if err := m.MsgIdImported.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplySetMsgIdImported) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplySetMsgIdImported: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplySetMsgIdImported: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCheckMsgIdImported) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCheckMsgIdImported: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCheckMsgIdImported: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdOrChannelId", wireType)
			}
			m.UserIdOrChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserIdOrChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyCheckMsgIdImported) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyCheckMsgIdImported: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyCheckMsgIdImported: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIdImported", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgIdImported == nil {
				m.MsgIdImported = &MsgIdImported{}
			}
			if err := m.MsgIdImported.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetUserMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetUserMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetUserMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateUserPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateUserPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateUserPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBatchUpdatUserPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBatchUpdatUserPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBatchUpdatUserPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqStorePtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqStorePtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqStorePtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PtsHandle == nil {
				m.PtsHandle = &PtsHandle{}
			}
			if err := m.PtsHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetDiffByPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetDiffByPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetDiffByPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetDiffByPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetDiffByPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetDiffByPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg, make([]byte, postIndex-iNdEx))
			copy(m.Msg[len(m.Msg)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPts", wireType)
			}
			m.LastPts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToLong", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToLong = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserMsgs = append(m.UserMsgs, &UserMsg{})
			if err := m.UserMsgs[len(m.UserMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetActionDiff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetActionDiff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetActionDiff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeletePtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeletePtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeletePtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PtsSli = append(m.PtsSli, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PtsSli = append(m.PtsSli, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsSli", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqClearPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqClearPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqClearPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPts", wireType)
			}
			m.MaxPts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyClearPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyClearPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyClearPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeletePtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeletePtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeletePtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetActionDiff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetActionDiff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetActionDiff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsHandles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PtsHandles = append(m.PtsHandles, &PtsHandle{})
			if err := m.PtsHandles[len(m.PtsHandles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqStoreOtherInfoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqStoreOtherInfoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqStoreOtherInfoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherInfoMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OtherInfoMsg == nil {
				m.OtherInfoMsg = &OtherInfoMsg{}
			}
			if err := m.OtherInfoMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBatchStoreOtherInfoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBatchStoreOtherInfoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBatchStoreOtherInfoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherInfoMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherInfoMsgs = append(m.OtherInfoMsgs, &OtherInfoMsg{})
			if err := m.OtherInfoMsgs[len(m.OtherInfoMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetOtherInfoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetOtherInfoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetOtherInfoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetOtherInfoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetOtherInfoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetOtherInfoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherInfoMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherInfoMsgs = append(m.OtherInfoMsgs, &OtherInfoMsg{})
			if err := m.OtherInfoMsgs[len(m.OtherInfoMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqInsertOrUpdateUserMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqInsertOrUpdateUserMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqInsertOrUpdateUserMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMsg == nil {
				m.UserMsg = &UserMsg{}
			}
			if err := m.UserMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetForwardUserMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetForwardUserMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetForwardUserMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIdType", wireType)
			}
			m.WithIdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithIdType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgIds = append(m.MsgIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgIds = append(m.MsgIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIds", wireType)
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetUserMsgHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetUserMsgHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetUserMsgHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfid", wireType)
			}
			m.Selfid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selfid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withid", wireType)
			}
			m.Withid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Withid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOffset", wireType)
			}
			m.AddOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOffset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletMark", wireType)
			}
			m.DeletMark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletMark |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetUserMsgUUID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetUserMsgUUID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetUserMsgUUID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetUserMsgIdByUUID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetUserMsgIdByUUID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetUserMsgIdByUUID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			m.UUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UUID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetUserMsgListByUUIDs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetUserMsgListByUUIDs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetUserMsgListByUUIDs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UUIDS = append(m.UUIDS, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UUIDS = append(m.UUIDS, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UUIDS", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteUserMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteUserMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteUserMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBatchDeleteUserMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBatchDeleteUserMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBatchDeleteUserMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgIds = append(m.MsgIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgIds = append(m.MsgIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIds", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetOneUserMsgByUserIdAndMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetOneUserMsgByUserIdAndMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetOneUserMsgByUserIdAndMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteUserMsgByUserIdAndWithIdAndEncry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteUserMsgByUserIdAndWithIdAndEncry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIdType", wireType)
			}
			m.WithIdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithIdType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqClearHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqClearHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqClearHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIdType", wireType)
			}
			m.WithIdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithIdType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMessageHistoryPageByMediaConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMessageHistoryPageByMediaConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMessageHistoryPageByMediaConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithType", wireType)
			}
			m.WithType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Medias = append(m.Medias, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Medias = append(m.Medias, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Medias", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetMessageHistoryPageByMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetMessageHistoryPageByMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetMessageHistoryPageByMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetMessageHistoryPageByMediaConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetMessageHistoryPageByMediaConfig == nil {
				m.GetMessageHistoryPageByMediaConfig = &GetMessageHistoryPageByMediaConfig{}
			}
			if err := m.GetMessageHistoryPageByMediaConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqInsertOrUpdateChannelMessageDeleteMark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqInsertOrUpdateChannelMessageDeleteMark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqInsertOrUpdateChannelMessageDeleteMark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMessageDeleteMark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMessageDeleteMark == nil {
				m.ChannelMessageDeleteMark = &ChannelMessageDeleteMark{}
			}
			if err := m.ChannelMessageDeleteMark.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMessageDeleteMark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMessageDeleteMark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMessageDeleteMark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			m.ChannelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUserDialogSetUnreadMetionsCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUserDialogSetUnreadMetionsCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUserDialogSetUnreadMetionsCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			m.ChannelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadMetionsCount", wireType)
			}
			m.UnreadMetionsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadMetionsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUserDialogSetUnreadMetionsCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUserDialogSetUnreadMetionsCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUserDialogSetUnreadMetionsCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUserDialogGetUnreadMetionsCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUserDialogGetUnreadMetionsCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUserDialogGetUnreadMetionsCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			m.ChannelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUserDialogGetUnreadMetionsCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUserDialogGetUnreadMetionsCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUserDialogGetUnreadMetionsCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadMetionsCount", wireType)
			}
			m.UnreadMetionsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadMetionsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUserDialogChangeUnreadMetionsCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUserDialogChangeUnreadMetionsCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUserDialogChangeUnreadMetionsCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			m.ChannelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadMetionsCountChangeValue", wireType)
			}
			m.UnreadMetionsCountChangeValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadMetionsCountChangeValue |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUserDialogChangeUnreadMetionsCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUserDialogChangeUnreadMetionsCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUserDialogChangeUnreadMetionsCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetUserMediaMessageStatisticsByMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetUserMediaMessageStatisticsByMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetUserMediaMessageStatisticsByMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithType", wireType)
			}
			m.WithType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			m.Media = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Media |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetUserMediaMessageStatisticsByMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetUserMediaMessageStatisticsByMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetUserMediaMessageStatisticsByMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMediaMessageStatistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMediaMessageStatistics == nil {
				m.UserMediaMessageStatistics = &UserMediaMessageStatistics{}
			}
			if err := m.UserMediaMessageStatistics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetMessageHistoryPageByMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetMessageHistoryPageByMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetMessageHistoryPageByMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserMsgs = append(m.UserMsgs, &UserMsg{})
			if err := m.UserMsgs[len(m.UserMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqInsertOrUpdateUserDialogAndMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqInsertOrUpdateUserDialogAndMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqInsertOrUpdateUserDialogAndMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDialogAndMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserDialogAndMsg == nil {
				m.UserDialogAndMsg = &UserDialogAndMsg{}
			}
			if err := m.UserDialogAndMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateScore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateScore = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateSelfDialogAndMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateSelfDialogAndMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateSelfDialogAndMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDialogAndMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserDialogAndMsg == nil {
				m.UserDialogAndMsg = &UserDialogAndMsg{}
			}
			if err := m.UserDialogAndMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateDialogAddUnread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateDialogAddUnread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateDialogAddUnread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadDelta", wireType)
			}
			m.UnreadDelta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadDelta |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUpdateDialogAddUnread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUpdateDialogAddUnread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUpdateDialogAddUnread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateDialogClearDraft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateDialogClearDraft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateDialogClearDraft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIdType", wireType)
			}
			m.WithIdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithIdType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUpdateDialogClearDraft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUpdateDialogClearDraft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUpdateDialogClearDraft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetUserDialogAllUnread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetUserDialogAllUnread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetUserDialogAllUnread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetUserDialogAllUnread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetUserDialogAllUnread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetUserDialogAllUnread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateReceDialogAndMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateReceDialogAndMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateReceDialogAndMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDialogAndMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserDialogAndMsg == nil {
				m.UserDialogAndMsg = &UserDialogAndMsg{}
			}
			if err := m.UserDialogAndMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetDialogAndMsgByUserIdAndWithIdAndType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetDialogAndMsgByUserIdAndWithIdAndType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetDialogAndMsgByUserIdAndWithIdAndType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetDialogAndMsgsByUserId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetDialogAndMsgsByUserId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetDialogAndMsgsByUserId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetDialogAndMsgsByPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetDialogAndMsgsByPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetDialogAndMsgsByPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIdType", wireType)
			}
			m.WithIdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithIdType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderId", wireType)
			}
			m.FolderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqReadSelfDialogAndMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqReadSelfDialogAndMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqReadSelfDialogAndMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateReadinbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateReadinbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateReadinbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateReadoutbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateReadoutbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateReadoutbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteUserDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteUserDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteUserDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteDate", wireType)
			}
			m.DeleteDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateUserDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateUserDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateUserDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserDialogParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateUserDialogParam == nil {
				m.UpdateUserDialogParam = &UpdateUserDialogParam{}
			}
			if err := m.UpdateUserDialogParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserDialogParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserDialogParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserDialogParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithType", wireType)
			}
			m.WithType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMessage", wireType)
			}
			m.TopMessage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMessage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadInboxMaxId", wireType)
			}
			m.ReadInboxMaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadInboxMaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOutboxMaxId", wireType)
			}
			m.ReadOutboxMaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadOutboxMaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadMetionsCount", wireType)
			}
			m.UnreadMetionsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadMetionsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDate", wireType)
			}
			m.UpdateDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateUserDialogUpdateDate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateUserDialogUpdateDate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateUserDialogUpdateDate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithType", wireType)
			}
			m.WithType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDate", wireType)
			}
			m.UpdateDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateDialogToPinged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateDialogToPinged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateDialogToPinged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIdType", wireType)
			}
			m.WithIdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithIdType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateDialogToFolder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateDialogToFolder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateDialogToFolder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIdType", wireType)
			}
			m.WithIdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithIdType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderId", wireType)
			}
			m.FolderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCancelPingedDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCancelPingedDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCancelPingedDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIdType", wireType)
			}
			m.WithIdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithIdType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetPingedDialogAndMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetPingedDialogAndMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetPingedDialogAndMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderId", wireType)
			}
			m.FolderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetLastLimitDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetLastLimitDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetLastLimitDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRating) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRating: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRating: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Rating = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetLastLimitDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetLastLimitDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetLastLimitDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserRatingList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserRatingList = append(m.UserRatingList, &UserRating{})
			if err := m.UserRatingList[len(m.UserRatingList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateReadInBoxMaxId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateReadInBoxMaxId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateReadInBoxMaxId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateReadOutBoxMaxId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateReadOutBoxMaxId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateReadOutBoxMaxId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateChannelReadinbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateChannelReadinbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateChannelReadinbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadIn", wireType)
			}
			m.ReadIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadIn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateChannelReadoutbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateChannelReadoutbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateChannelReadoutbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOut", wireType)
			}
			m.ReadOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadOut |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteUserDialogByChannelId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteUserDialogByChannelId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteUserDialogByChannelId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIdType", wireType)
			}
			m.WithIdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithIdType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteDate", wireType)
			}
			m.DeleteDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetUserChannelDialogByUserId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetUserChannelDialogByUserId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetUserChannelDialogByUserId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqStoreUserDialogErlang) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqStoreUserDialogErlang: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqStoreUserDialogErlang: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDialogErlang", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserDialogErlang == nil {
				m.UserDialogErlang = &UserDialogErlang{}
			}
			if err := m.UserDialogErlang.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetUserDialogErlangByUserIdWithIdWithType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetUserDialogErlangByUserIdWithIdWithType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetUserDialogErlangByUserIdWithIdWithType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithType", wireType)
			}
			m.WithType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetUserDialogErlangByUserIdWithIdWithType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetUserDialogErlangByUserIdWithIdWithType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetUserDialogErlangByUserIdWithIdWithType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDialogErlang", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserDialogErlang == nil {
				m.UserDialogErlang = &UserDialogErlang{}
			}
			if err := m.UserDialogErlang.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqInsertRandomStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqInsertRandomStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqInsertRandomStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Handle |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetRandomStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetRandomStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetRandomStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			m.KeyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSetSuperGroupMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSetSuperGroupMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSetSuperGroupMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplySetSuperGroupMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplySetSuperGroupMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplySetSuperGroupMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetSuperGroupMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetSuperGroupMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetSuperGroupMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetSuperGroupMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetSuperGroupMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetSuperGroupMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg, make([]byte, postIndex-iNdEx))
			copy(m.Msg[len(m.Msg)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GetAll = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqInsertMsgIdSerialCodeMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqInsertMsgIdSerialCodeMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqInsertMsgIdSerialCodeMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyInsertMsgIdSerialCodeMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyInsertMsgIdSerialCodeMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyInsertMsgIdSerialCodeMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetMsgIdSerialCodeMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetMsgIdSerialCodeMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetMsgIdSerialCodeMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetMsgIdSerialCodeMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetMsgIdSerialCodeMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetMsgIdSerialCodeMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIdSerialCodeMapRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIdSerialCodeMapRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIdSerialCodeMapRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertDate", wireType)
			}
			m.InsertDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsertDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateChannelMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateChannelMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateChannelMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUpdateChannelMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUpdateChannelMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUpdateChannelMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMsgId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMsgId == nil {
				m.ChannelMsgId = &ChannelMsgId{}
			}
			if err := m.ChannelMsgId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateChannelMsgIdAndPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateChannelMsgIdAndPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateChannelMsgIdAndPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUpdateChannelMsgIdAndPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUpdateChannelMsgIdAndPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUpdateChannelMsgIdAndPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMsgId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMsgId == nil {
				m.ChannelMsgId = &ChannelMsgId{}
			}
			if err := m.ChannelMsgId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSetChannelMsgIdAndPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSetChannelMsgIdAndPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSetChannelMsgIdAndPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMsgId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMsgId == nil {
				m.ChannelMsgId = &ChannelMsgId{}
			}
			if err := m.ChannelMsgId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplySetChannelMsgIdAndPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplySetChannelMsgIdAndPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplySetChannelMsgIdAndPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateChannelPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateChannelPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateChannelPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUpdateChannelPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUpdateChannelPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUpdateChannelPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMsgId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMsgId == nil {
				m.ChannelMsgId = &ChannelMsgId{}
			}
			if err := m.ChannelMsgId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateChannelPtsWithNum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateChannelPtsWithNum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateChannelPtsWithNum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUpdateChannelPtsWithNum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUpdateChannelPtsWithNum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUpdateChannelPtsWithNum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMsgId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMsgId == nil {
				m.ChannelMsgId = &ChannelMsgId{}
			}
			if err := m.ChannelMsgId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMsgId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMsgId == nil {
				m.ChannelMsgId = &ChannelMsgId{}
			}
			if err := m.ChannelMsgId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqStoreChannelPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqStoreChannelPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqStoreChannelPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelPtsHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelPtsHandle == nil {
				m.ChannelPtsHandle = &ChannelPtsHandle{}
			}
			if err := m.ChannelPtsHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBatchStoreChannelPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBatchStoreChannelPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBatchStoreChannelPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelPtsHandles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelPtsHandles = append(m.ChannelPtsHandles, &ChannelPtsHandle{})
			if err := m.ChannelPtsHandles[len(m.ChannelPtsHandles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyErr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyErr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyErr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelDiffByPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelDiffByPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelDiffByPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelDiffByPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelDiffByPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelDiffByPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFianl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFianl = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToLong", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToLong = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMsgId", wireType)
			}
			m.TopMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, make([]byte, postIndex-iNdEx))
			copy(m.Msgs[len(m.Msgs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetUserDiff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetUserDiff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetUserDiff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelPtsDiff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelPtsDiff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelPtsDiff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			m.ChannelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetUserDiff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetUserDiff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetUserDiff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelPtsDiffs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelPtsDiffs = append(m.ChannelPtsDiffs, &ChannelPtsDiff{})
			if err := m.ChannelPtsDiffs[len(m.ChannelPtsDiffs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelLastPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelLastPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelLastPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelLastPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelLastPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelLastPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelPtsHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelPtsHandle == nil {
				m.ChannelPtsHandle = &ChannelPtsHandle{}
			}
			if err := m.ChannelPtsHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteChannelPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteChannelPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteChannelPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeleteChannelPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeleteChannelPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeleteChannelPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqInsertOrUpdateChannelMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqInsertOrUpdateChannelMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqInsertOrUpdateChannelMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMsg == nil {
				m.UserMsg = &UserMsg{}
			}
			if err := m.UserMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateChannelMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateChannelMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateChannelMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMsg == nil {
				m.UserMsg = &UserMsg{}
			}
			if err := m.UserMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBatchInsertOrUpdateChannelMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBatchInsertOrUpdateChannelMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBatchInsertOrUpdateChannelMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserMsgs = append(m.UserMsgs, &UserMsg{})
			if err := m.UserMsgs[len(m.UserMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteMsgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteMsgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteMsgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgIds = append(m.MsgIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgIds = append(m.MsgIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIds", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeleteMsgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeleteMsgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeleteMsgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurentMsgId", wireType)
			}
			m.CurentMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurentMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDate", wireType)
			}
			m.UpdateDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteUserHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteUserHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteUserHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeleteUserHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeleteUserHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeleteUserHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgsAndMaxId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgsAndMaxId == nil {
				m.MsgsAndMaxId = &MsgsAndMaxId{}
			}
			if err := m.MsgsAndMaxId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ptss = append(m.Ptss, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ptss = append(m.Ptss, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptss", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDate", wireType)
			}
			m.UpdateDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteChannelMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteChannelMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteChannelMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteChannelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteChannelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteChannelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeleteChannelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeleteChannelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeleteChannelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentMsgId", wireType)
			}
			m.CurrentMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDate", wireType)
			}
			m.UpdateDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMsg == nil {
				m.UserMsg = &UserMsg{}
			}
			if err := m.UserMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMsgsByMsgIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMsgsByMsgIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMsgsByMsgIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgIds = append(m.MsgIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgIds = append(m.MsgIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIds", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelMsgsByMsgIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelMsgsByMsgIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelMsgsByMsgIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsgListAndPts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMsgListAndPts == nil {
				m.UserMsgListAndPts = &UserMsgListAndPts{}
			}
			if err := m.UserMsgListAndPts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMsgHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMsgHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMsgHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOffset", wireType)
			}
			m.AddOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOffset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteMark", wireType)
			}
			m.DeleteMark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteMark |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelMsgHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelMsgHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelMsgHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsgListAndPts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMsgListAndPts == nil {
				m.UserMsgListAndPts = &UserMsgListAndPts{}
			}
			if err := m.UserMsgListAndPts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelTopMst) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelTopMst: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelTopMst: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelMediaMessageHistoryByMediaConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelMediaMessageHistoryByMediaConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelMediaMessageHistoryByMediaConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Medias = append(m.Medias, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Medias = append(m.Medias, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Medias", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMediaMessageHistoryByMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMediaMessageHistoryByMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMediaMessageHistoryByMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetChannelMediaMessageHistoryByMediaConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetChannelMediaMessageHistoryByMediaConfig == nil {
				m.GetChannelMediaMessageHistoryByMediaConfig = &GetChannelMediaMessageHistoryByMediaConfig{}
			}
			if err := m.GetChannelMediaMessageHistoryByMediaConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelMediaMessageHistoryByMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelMediaMessageHistoryByMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelMediaMessageHistoryByMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelMsgs = append(m.ChannelMsgs, &UserMsg{})
			if err := m.ChannelMsgs[len(m.ChannelMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyInsertOrUpdateChannelMessageDeleteMark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyInsertOrUpdateChannelMessageDeleteMark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyInsertOrUpdateChannelMessageDeleteMark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelMessageDeleteMark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelMessageDeleteMark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelMessageDeleteMark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMessageDeleteMark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMessageDeleteMark == nil {
				m.ChannelMessageDeleteMark = &ChannelMessageDeleteMark{}
			}
			if err := m.ChannelMessageDeleteMark.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMediaMessageStatisticsByMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMediaMessageStatisticsByMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMediaMessageStatisticsByMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			m.Media = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Media |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelMediaMessageStatisticsByMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelMediaMessageStatisticsByMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelMediaMessageStatisticsByMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMediaMessageStatistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMediaMessageStatistics == nil {
				m.ChannelMediaMessageStatistics = &ChannelMediaMessageStatistics{}
			}
			if err := m.ChannelMediaMessageStatistics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelTopMst) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelTopMst: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelTopMst: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMsg == nil {
				m.UserMsg = &UserMsg{}
			}
			if err := m.UserMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqInsertOrUpdateChannelDialogAndMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqInsertOrUpdateChannelDialogAndMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqInsertOrUpdateChannelDialogAndMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelDialog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelDialog == nil {
				m.ChannelDialog = &ChannelDialog{}
			}
			if err := m.ChannelDialog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMsg == nil {
				m.ChannelMsg = &UserMsg{}
			}
			if err := m.ChannelMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetDialogMaxReadInMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetDialogMaxReadInMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetDialogMaxReadInMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetDialogMaxReadInMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetDialogMaxReadInMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetDialogMaxReadInMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSetDialogMaxReadInMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSetDialogMaxReadInMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSetDialogMaxReadInMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetDialogAndMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetDialogAndMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetDialogAndMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetDialogAndMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetDialogAndMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetDialogAndMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelDialogAndMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelDialogAndMsg == nil {
				m.ChannelDialogAndMsg = &ChannelDialogAndMsg{}
			}
			if err := m.ChannelDialogAndMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetDialogAndMsgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetDialogAndMsgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetDialogAndMsgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChannelIds = append(m.ChannelIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChannelIds = append(m.ChannelIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetDialogAndMsgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetDialogAndMsgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetDialogAndMsgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelDialogAndMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelDialogAndMsgs == nil {
				m.ChannelDialogAndMsgs = &ChannelDialogAndMsgs{}
			}
			if err := m.ChannelDialogAndMsgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqStoreAdminLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqStoreAdminLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqStoreAdminLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelAdminLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelAdminLog == nil {
				m.ChannelAdminLog = &ChannelAdminLog{}
			}
			if err := m.ChannelAdminLog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFindsAdminLogByChannelId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyFindsAdminLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyFindsAdminLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyFindsAdminLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminLogs = append(m.AdminLogs, &ChannelAdminLog{})
			if err := m.AdminLogs[len(m.AdminLogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AdminUsers = append(m.AdminUsers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AdminUsers = append(m.AdminUsers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUsers", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EventFilters = append(m.EventFilters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EventFilters = append(m.EventFilters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EventFilters", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EventFilters = append(m.EventFilters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EventFilters = append(m.EventFilters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EventFilters", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFindsAdminLogByChannelIdAndUserId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndUserId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndUserId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AdminUsers = append(m.AdminUsers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AdminUsers = append(m.AdminUsers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUsers", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EventFilters = append(m.EventFilters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EventFilters = append(m.EventFilters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EventFilters", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFindsAdminLogByChannelIdAndEventFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndEventFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndEventFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EventFilters = append(m.EventFilters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EventFilters = append(m.EventFilters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EventFilters", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndAdminUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndAdminUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AdminUsers = append(m.AdminUsers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AdminUsers = append(m.AdminUsers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUsers", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChannelMessageAtAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChannelMessageAtAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChannelMessageAtAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChannelMessageAtAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannelMessageAtAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannelMessageAtAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChannelMessageAtGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChannelMessageAtGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChannelMessageAtGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOffset", wireType)
			}
			m.AddOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOffset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChannelMessageAtGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannelMessageAtGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannelMessageAtGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &UserMsg{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChannelMessageAtDel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChannelMessageAtDel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChannelMessageAtDel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChannelMessageAtDel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannelMessageAtDel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannelMessageAtDel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUserMessageAtAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUserMessageAtAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUserMessageAtAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUserMessageAtAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUserMessageAtAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUserMessageAtAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUserMessageAtGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUserMessageAtGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUserMessageAtGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOffset", wireType)
			}
			m.AddOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOffset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUserMessageAtGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUserMessageAtGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUserMessageAtGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &UserMsg{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUserMessageAtDel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUserMessageAtDel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUserMessageAtDel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUserMessageAtDel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUserMessageAtDel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUserMessageAtDel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelMessageAt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelMessageAt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelMessageAt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMessageAt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMessageAt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMessageAt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelMessageDeleteMark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelMessageDeleteMark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelMessageDeleteMark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIdImported) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIdImported: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIdImported: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdOrChannelId", wireType)
			}
			m.UserIdOrChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserIdOrChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Imported = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMediaMessageStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMediaMessageStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMediaMessageStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithType", wireType)
			}
			m.WithType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			m.Media = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Media |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelMediaMessageStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelMediaMessageStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelMediaMessageStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			m.Media = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Media |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDialogErlang) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDialogErlang: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDialogErlang: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithType", wireType)
			}
			m.WithType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveImport", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveImport = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OtherInfoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OtherInfoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OtherInfoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelAdminLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelAdminLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelAdminLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionId", wireType)
			}
			m.ActionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUserId", wireType)
			}
			m.AdminUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			m.ActionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminLog", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminLog = append(m.AdminLog[:0], dAtA[iNdEx:postIndex]...)
			if m.AdminLog == nil {
				m.AdminLog = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPingedDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPingedDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPingedDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIdType", wireType)
			}
			m.WithIdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithIdType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingedNum", wireType)
			}
			m.PingedNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PingedNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pinged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pinged = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMessage", wireType)
			}
			m.TopMessage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMessage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadInboxMaxId", wireType)
			}
			m.ReadInboxMaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadInboxMaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOutboxMaxId", wireType)
			}
			m.ReadOutboxMaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadOutboxMaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadMetionsCount", wireType)
			}
			m.UnreadMetionsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadMetionsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifySettingsFlags", wireType)
			}
			m.NotifySettingsFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifySettingsFlags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPreviews", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowPreviews = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MuteUntil", wireType)
			}
			m.MuteUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MuteUntil |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sound = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draft", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Draft = append(m.Draft[:0], dAtA[iNdEx:postIndex]...)
			if m.Draft == nil {
				m.Draft = []byte{}
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderId", wireType)
			}
			m.FolderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readinpts", wireType)
			}
			m.Readinpts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Readinpts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readoutpts", wireType)
			}
			m.Readoutpts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Readoutpts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LinkUser = append(m.LinkUser, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LinkUser = append(m.LinkUser, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkUser", wireType)
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertDate", wireType)
			}
			m.InsertDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsertDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDate", wireType)
			}
			m.UpdateDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoke", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Revoke = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForWardUserMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForWardUserMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForWardUserMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			m.Media = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Media |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaData = append(m.MediaData[:0], dAtA[iNdEx:postIndex]...)
			if m.MediaData == nil {
				m.MediaData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyMarkup = append(m.ReplyMarkup[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, make([]byte, postIndex-iNdEx))
			copy(m.Entities[len(m.Entities)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FwdFrom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FwdFrom = append(m.FwdFrom[:0], dAtA[iNdEx:postIndex]...)
			if m.FwdFrom == nil {
				m.FwdFrom = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViaBotId", wireType)
			}
			m.ViaBotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViaBotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLocalId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLocalId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLocalId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalId", wireType)
			}
			m.LocalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelLocalId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelLocalId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelLocalId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalId", wireType)
			}
			m.LocalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserIdAndWithIdAndTypeAndEncry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIdAndWithIdAndTypeAndEncry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIdAndWithIdAndTypeAndEncry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIdType", wireType)
			}
			m.WithIdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithIdType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Satus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Satus = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserIdAndWithId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIdAndWithId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIdAndWithId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithIdAndType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithIdAndType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithIdAndType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIdType", wireType)
			}
			m.WithIdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithIdType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserIdAndWithIdAndType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIdAndWithIdAndType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIdAndWithIdAndType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserIdAndPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIdAndPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIdAndPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bytes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bytes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bytes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg, make([]byte, postIndex-iNdEx))
			copy(m.Msg[len(m.Msg)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIdType", wireType)
			}
			m.WithIdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithIdType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Out", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Out = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mentioned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mentioned = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaUnread", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MediaUnread = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Post", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Post = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToId", wireType)
			}
			m.ToId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FwdFrom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FwdFrom = append(m.FwdFrom[:0], dAtA[iNdEx:postIndex]...)
			if m.FwdFrom == nil {
				m.FwdFrom = []byte{}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViaBotId", wireType)
			}
			m.ViaBotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViaBotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			m.Media = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Media |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaData = append(m.MediaData[:0], dAtA[iNdEx:postIndex]...)
			if m.MediaData == nil {
				m.MediaData = []byte{}
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyMarkup = append(m.ReplyMarkup[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = []byte{}
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, make([]byte, postIndex-iNdEx))
			copy(m.Entities[len(m.Entities)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Views", wireType)
			}
			m.Views = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Views |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditDate", wireType)
			}
			m.EditDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = append(m.Action[:0], dAtA[iNdEx:postIndex]...)
			if m.Action == nil {
				m.Action = []byte{}
			}
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			m.Uuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uuid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertDate", wireType)
			}
			m.InsertDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsertDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDate", wireType)
			}
			m.UpdateDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Combination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Combination == nil {
				m.Combination = &Combination{}
			}
			if err := m.Combination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Combination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Combination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Combination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MentionedSlice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MentionedSlice = append(m.MentionedSlice, &MentionStatus{})
			if err := m.MentionedSlice[len(m.MentionedSlice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyId = append(m.KeyId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyId = append(m.KeyId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MentionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MentionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MentionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserIdAndMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIdAndMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIdAndMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UUID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UUID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UUID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			m.UUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UUID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UUIDS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UUIDS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UUIDS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UUIDS = append(m.UUIDS, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UUIDS = append(m.UUIDS, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UUIDS", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIDList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIDList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIDList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgId = append(m.MsgId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgId = append(m.MsgId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pts = append(m.Pts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pts = append(m.Pts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMsgId", wireType)
			}
			m.LastMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserIdAndWithIdAndMsgIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIdAndWithIdAndMsgIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIdAndWithIdAndMsgIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgIds = append(m.MsgIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgIds = append(m.MsgIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserIdAndRandomId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIdAndRandomId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIdAndRandomId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Handle |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetRandomStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetRandomStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetRandomStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchMediaMsgByFilterReqPara) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchMediaMsgByFilterReqPara: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchMediaMsgByFilterReqPara: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithType", wireType)
			}
			m.WithType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MediaType = append(m.MediaType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessagedb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessagedb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MediaType = append(m.MediaType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDate", wireType)
			}
			m.MinDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDate", wireType)
			}
			m.MaxDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOffset", wireType)
			}
			m.AddOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOffset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchMediaMsgByFilterRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchMediaMsgByFilterRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchMediaMsgByFilterRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &UserMsg{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSearchUserMediaMsgByFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSearchUserMediaMsgByFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSearchUserMediaMsgByFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Para", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Para == nil {
				m.Para = &SearchMediaMsgByFilterReqPara{}
			}
			if err := m.Para.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespSearchUserMediaMsgByFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespSearchUserMediaMsgByFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespSearchUserMediaMsgByFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &SearchMediaMsgByFilterRespData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSearchChannelMediaMsgByFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSearchChannelMediaMsgByFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSearchChannelMediaMsgByFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Para", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Para == nil {
				m.Para = &SearchMediaMsgByFilterReqPara{}
			}
			if err := m.Para.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespSearchChannelMediaMsgByFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespSearchChannelMediaMsgByFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespSearchChannelMediaMsgByFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &SearchMediaMsgByFilterRespData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDialogData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDialogData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDialogData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetDialogUnreadCountByUserIdAndWithId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetDialogUnreadCountByUserIdAndWithId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetDialogUnreadCountByUserIdAndWithId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialogList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DialogList = append(m.DialogList, &QueryDialogData{})
			if err := m.DialogList[len(m.DialogList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespGetDialogUnreadCountByUserIdAndWithId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespGetDialogUnreadCountByUserIdAndWithId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespGetDialogUnreadCountByUserIdAndWithId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialogList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DialogList = append(m.DialogList, &QueryDialogData{})
			if err := m.DialogList[len(m.DialogList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagedb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqShDeleteUserHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqShDeleteUserHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqShDeleteUserHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMsgId", wireType)
			}
			m.MaxMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessagedb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagedb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessagedb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessagedb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessagedb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessagedb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessagedb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessagedb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessagedb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessagedb   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/pbmessagedb/messagedb.proto", fileDescriptorMessagedb)
}

var fileDescriptorMessagedb = []byte{
	// 7578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x7d, 0xdd, 0x6f, 0x1c, 0xc9,
	0x71, 0x38, 0x87, 0xbb, 0xfc, 0x2a, 0x92, 0x22, 0x35, 0xa2, 0xa4, 0xd5, 0x4a, 0xa4, 0xa8, 0xd6,
	0xc7, 0x49, 0x77, 0x67, 0x9d, 0xa1, 0xbb, 0xfb, 0xdd, 0xe1, 0x77, 0xbe, 0xf3, 0x91, 0x5c, 0x69,
	0xc5, 0xb3, 0x48, 0xd1, 0xb3, 0xa2, 0xee, 0x23, 0x8e, 0xe9, 0x21, 0xb7, 0x49, 0xee, 0x69, 0xb9,
	0x4b, 0xed, 0xcc, 0x4a, 0xa2, 0xed, 0xcb, 0x1d, 0x6c, 0x9f, 0x3f, 0x10, 0xc7, 0xf6, 0xf9, 0xec,
	0xc4, 0x9f, 0xf1, 0x43, 0x10, 0x20, 0x81, 0x81, 0x38, 0x41, 0x82, 0x04, 0x09, 0x02, 0x38, 0x48,
	0x1c, 0x20, 0xf0, 0x43, 0x9c, 0x97, 0x04, 0x08, 0x90, 0x87, 0xe0, 0x1e, 0xf2, 0x2f, 0xe4, 0x31,
	0x41, 0x7f, 0xcc, 0x4c, 0x77, 0x4f, 0xcf, 0x4c, 0xef, 0x72, 0x45, 0x9d, 0x91, 0xa7, 0xdd, 0xee,
	0xa9, 0xa9, 0xaa, 0xae, 0xae, 0xae, 0xae, 0xee, 0xae, 0xae, 0x81, 0x97, 0xb7, 0x6a, 0x7e, 0xdd,
	0x5d, 0xbf, 0xbc, 0xb1, 0xed, 0xfa, 0x1e, 0x6e, 0xdd, 0xc3, 0xad, 0xcb, 0xb5, 0x9d, 0xa7, 0x6a,
	0x0d, 0x1f, 0xb7, 0x36, 0xdd, 0x0d, 0xbc, 0xdb, 0x6a, 0xae, 0xb7, 0x37, 0x9f, 0xda, 0x5d, 0xdf,
	0xc1, 0x9e, 0xe7, 0x6e, 0xe1, 0xea, 0xfa, 0x53, 0xe1, 0xbf, 0xcb, 0xbb, 0xad, 0xa6, 0xdf, 0xb4,
	0x47, 0xc2, 0x8a, 0xe2, 0xf3, 0x86, 0xc8, 0x36, 0x9a, 0x3b, 0x3b, 0xfc, 0x87, 0x21, 0x41, 0xa3,
	0x30, 0xe2, 0xe0, 0xdd, 0xfa, 0xde, 0x72, 0xbb, 0x5e, 0x47, 0x67, 0xe0, 0x34, 0x2d, 0xac, 0xee,
	0x56, 0x5d, 0x1f, 0xaf, 0x7a, 0xb8, 0x55, 0xaa, 0xb9, 0xf5, 0xe6, 0x16, 0x2b, 0x97, 0x5c, 0x1f,
	0xa3, 0xe3, 0x70, 0x54, 0x0b, 0x82, 0xca, 0x70, 0x78, 0x61, 0xdb, 0x6d, 0x34, 0x70, 0x7d, 0xb1,
	0x3a, 0xd7, 0xa8, 0xde, 0xa8, 0xed, 0xd4, 0x7c, 0xfb, 0x14, 0x8c, 0x84, 0x95, 0x05, 0x6b, 0xd6,
	0xba, 0x38, 0xe0, 0x44, 0x15, 0xf6, 0x14, 0x0c, 0x50, 0xb0, 0x42, 0x3f, 0x7d, 0xc2, 0x0a, 0x68,
	0x1b, 0x8a, 0x22, 0x22, 0x42, 0xc2, 0x18, 0xe3, 0x31, 0x18, 0x64, 0xf0, 0x1c, 0x25, 0x2f, 0x45,
	0x94, 0x72, 0x22, 0xa5, 0xbf, 0xb3, 0xe0, 0xb2, 0x48, 0x6a, 0xae, 0xba, 0x53, 0x6b, 0x90, 0x37,
	0xbc, 0xb9, 0x46, 0xf5, 0xea, 0x3d, 0xdc, 0xf0, 0xaf, 0xd5, 0xea, 0x3e, 0x2b, 0x72, 0x44, 0xdd,
	0x91, 0x9f, 0x01, 0x88, 0x70, 0x17, 0x72, 0xb3, 0xb9, 0x8b, 0x03, 0x8e, 0x50, 0x63, 0x23, 0x18,
	0x13, 0xc9, 0x15, 0xf2, 0x14, 0x42, 0xaa, 0x8b, 0x9a, 0x30, 0x20, 0x36, 0xa1, 0x0e, 0xc7, 0xf4,
	0x2d, 0xc8, 0xe0, 0x54, 0xe6, 0xa8, 0x3f, 0xc6, 0x91, 0x5e, 0x60, 0x2d, 0x28, 0x88, 0xd4, 0x24,
	0xfe, 0xd2, 0xe9, 0xa9, 0x2d, 0xec, 0x4f, 0x6b, 0xa1, 0x44, 0xf3, 0x27, 0x16, 0x9c, 0x37, 0xea,
	0xa4, 0x7d, 0xb6, 0x58, 0xe5, 0x30, 0x97, 0xc6, 0x61, 0x5e, 0xe4, 0xf0, 0x7d, 0x0b, 0xce, 0x24,
	0x89, 0x65, 0xbf, 0x9a, 0xd3, 0x3d, 0x57, 0xef, 0x58, 0x30, 0xc6, 0xf1, 0x2f, 0x79, 0x5b, 0x8b,
	0x55, 0xfb, 0x10, 0xf4, 0x87, 0x94, 0xfb, 0x55, 0x86, 0xfa, 0x35, 0x63, 0x93, 0xbe, 0x16, 0x74,
	0x06, 0xc3, 0x31, 0x09, 0xb9, 0x15, 0xdf, 0xe3, 0x84, 0xc8, 0x5f, 0xbb, 0x08, 0xc3, 0x37, 0x5c,
	0xcf, 0x27, 0xb6, 0x81, 0x6b, 0x66, 0x58, 0x46, 0x97, 0x04, 0x0a, 0xe9, 0xed, 0x47, 0x4f, 0x02,
	0x84, 0x05, 0x8f, 0xf4, 0x55, 0x54, 0x2a, 0x58, 0xac, 0xaf, 0xa2, 0x1a, 0xd5, 0xd6, 0x30, 0xde,
	0x32, 0x6d, 0x0d, 0x6b, 0x4f, 0xbf, 0xd0, 0x1e, 0xf4, 0x0a, 0xd8, 0x31, 0x44, 0x5e, 0x76, 0x57,
	0x31, 0x38, 0xae, 0x44, 0xbc, 0xa4, 0xe2, 0xda, 0x4f, 0xb7, 0xa3, 0x17, 0x60, 0x82, 0x99, 0xd5,
	0x45, 0x6f, 0xa1, 0x85, 0x5d, 0x1f, 0x57, 0xed, 0x8b, 0x61, 0x55, 0x95, 0x57, 0x51, 0x74, 0xc3,
	0x8e, 0x5a, 0x8d, 0xca, 0x30, 0x21, 0x32, 0xb2, 0xdc, 0xde, 0xc9, 0xe6, 0x62, 0xb9, 0xbd, 0xb3,
	0x8e, 0x5b, 0x01, 0x17, 0xac, 0x84, 0x5e, 0x82, 0xb1, 0x25, 0x6f, 0x8b, 0xe8, 0xf0, 0x92, 0xfb,
	0x60, 0xb1, 0x4a, 0xfa, 0x7a, 0xc9, 0x7d, 0xc0, 0xc4, 0xc8, 0x90, 0x84, 0x65, 0xdb, 0x86, 0x3c,
	0x81, 0xe5, 0x32, 0xa1, 0xff, 0xd1, 0xbb, 0x16, 0x8c, 0x73, 0x2a, 0x8c, 0xc7, 0xec, 0x21, 0x7a,
	0xab, 0xb9, 0xbb, 0xc4, 0x66, 0x35, 0xce, 0x8b, 0x50, 0x63, 0xcf, 0xc2, 0xe8, 0x92, 0xfb, 0xc0,
	0xc1, 0x6e, 0x75, 0xb1, 0x11, 0x6a, 0xa6, 0x58, 0x45, 0x7a, 0xf9, 0x6a, 0x63, 0xa3, 0xb5, 0x17,
	0x0c, 0x05, 0x5a, 0x40, 0x5f, 0xb3, 0xe0, 0x88, 0xc4, 0x07, 0xeb, 0x6a, 0xfb, 0x25, 0x85, 0x3d,
	0xca, 0xd1, 0xe8, 0x95, 0xc2, 0xe5, 0x68, 0xa6, 0x95, 0x9e, 0x3b, 0x4a, 0x6b, 0xae, 0x84, 0x6a,
	0xba, 0xe4, 0x6d, 0x51, 0x7e, 0x47, 0xaf, 0xd8, 0xc2, 0xcb, 0xa4, 0x33, 0x97, 0xbc, 0x2d, 0x47,
	0x80, 0x42, 0x6f, 0xc2, 0x94, 0x86, 0x15, 0xcf, 0x76, 0xf4, 0xf5, 0x54, 0xf9, 0x47, 0xaf, 0xcc,
	0x24, 0xb1, 0xc4, 0xc0, 0x1c, 0xed, 0xbb, 0xe8, 0x3d, 0x0b, 0x0e, 0x3b, 0xf8, 0xee, 0xb5, 0x66,
	0xeb, 0x55, 0xb7, 0x55, 0xe5, 0xdc, 0x08, 0x3a, 0x67, 0x49, 0xa6, 0xe6, 0x18, 0x0c, 0xbe, 0x5a,
	0xf3, 0xb7, 0x23, 0x5d, 0x64, 0x25, 0xd2, 0x2b, 0xec, 0xdf, 0xad, 0xbd, 0x5d, 0xcc, 0x85, 0x2e,
	0xd4, 0xe8, 0x65, 0x2e, 0x8c, 0x92, 0x01, 0x69, 0x94, 0xbc, 0xdb, 0x0f, 0xe3, 0x0e, 0xbe, 0xcb,
	0x99, 0xb9, 0x5e, 0xf3, 0x08, 0x64, 0x05, 0xd7, 0x37, 0x6b, 0x21, 0x3f, 0xac, 0x14, 0xf0, 0x53,
	0x93, 0xf8, 0xa9, 0x51, 0x4d, 0x13, 0x38, 0xa1, 0xff, 0x89, 0x66, 0xde, 0xdc, 0xdc, 0xf4, 0xb0,
	0xbf, 0x58, 0xe5, 0x6c, 0x84, 0x65, 0xc2, 0x3f, 0xfb, 0x2f, 0xd8, 0x28, 0xa1, 0x86, 0xe8, 0xe4,
	0x5c, 0xb5, 0xca, 0x2a, 0x0a, 0x83, 0x4c, 0x27, 0xc3, 0x0a, 0x6a, 0x37, 0x6a, 0x44, 0xdb, 0x86,
	0xb8, 0xdd, 0xa8, 0x71, 0x3d, 0xa3, 0x43, 0xa2, 0x30, 0xcc, 0x6b, 0xe9, 0xf8, 0x08, 0x0d, 0xf1,
	0x88, 0x60, 0x88, 0x23, 0xf9, 0x80, 0xa8, 0x93, 0xaf, 0xc0, 0x24, 0xeb, 0x2c, 0x41, 0xbf, 0x8f,
	0xc1, 0xe0, 0xb5, 0x56, 0x73, 0x27, 0xea, 0x19, 0x56, 0xca, 0x1a, 0x17, 0xe8, 0x55, 0xb0, 0xe5,
	0x3e, 0xbe, 0x51, 0xf3, 0x7c, 0x7b, 0x0e, 0x0e, 0xc9, 0xb5, 0x5c, 0x97, 0x4e, 0x08, 0xba, 0x24,
	0x03, 0x38, 0xca, 0x0b, 0xe8, 0x26, 0x8c, 0x8a, 0x18, 0x2f, 0xc3, 0x30, 0x2f, 0x06, 0x7a, 0xa9,
	0xd3, 0xf6, 0x10, 0x86, 0xcc, 0x16, 0xbb, 0xbe, 0xc7, 0x19, 0x26, 0x7f, 0xd1, 0x1d, 0x38, 0x2c,
	0x20, 0x9c, 0x6b, 0x54, 0xc9, 0x14, 0xd2, 0x05, 0xda, 0x95, 0x08, 0x2d, 0xc1, 0x30, 0x05, 0x03,
	0x0b, 0xcd, 0x76, 0x23, 0xf4, 0x1c, 0x68, 0x01, 0x2d, 0xc2, 0xa1, 0xc8, 0x3f, 0xa5, 0x0d, 0x78,
	0x8e, 0xb5, 0x87, 0xd5, 0x04, 0xc4, 0x8e, 0x2a, 0xc4, 0xf8, 0x58, 0x17, 0x21, 0xd1, 0x7d, 0x98,
	0x8a, 0x8a, 0x6c, 0x78, 0x51, 0x84, 0x8b, 0xac, 0x3d, 0xba, 0x21, 0x7b, 0x52, 0x8b, 0x96, 0x8f,
	0xd7, 0xf8, 0x5b, 0x51, 0x1b, 0xfa, 0xc5, 0x36, 0xfc, 0x2c, 0x07, 0x45, 0xea, 0x6f, 0x97, 0xb1,
	0xbf, 0x52, 0x6b, 0x6c, 0xe1, 0xaa, 0x64, 0xc1, 0x5e, 0x84, 0x11, 0x56, 0x66, 0xdd, 0x4b, 0x0c,
	0xd0, 0xe9, 0x14, 0xba, 0x84, 0x67, 0x27, 0x7a, 0x83, 0xa8, 0xfe, 0xad, 0xe6, 0xee, 0x0a, 0x16,
	0x66, 0xa0, 0xa8, 0x82, 0x98, 0x5b, 0x5e, 0x10, 0xc6, 0x9b, 0x58, 0x45, 0x86, 0x1d, 0x51, 0x43,
	0x3a, 0x21, 0xf0, 0x61, 0x17, 0x94, 0xed, 0xe7, 0xa0, 0xb0, 0xda, 0x68, 0x61, 0xb7, 0xba, 0xb6,
	0xd3, 0xf6, 0x71, 0x75, 0x6d, 0x17, 0xe3, 0x96, 0xb7, 0xb6, 0x41, 0x9b, 0xc8, 0x06, 0xe1, 0x51,
	0xf6, 0x7c, 0x89, 0x3c, 0x26, 0x28, 0x3d, 0xda, 0x64, 0xfb, 0x05, 0x28, 0xf2, 0x17, 0xdb, 0x8d,
	0xf8, 0xab, 0x6c, 0x80, 0x1e, 0x67, 0x10, 0xab, 0x0c, 0x40, 0x78, 0xf9, 0x45, 0x38, 0x29, 0x51,
	0xe5, 0xb2, 0x08, 0xde, 0x66, 0x83, 0xb8, 0x20, 0x10, 0xe6, 0x63, 0x88, 0xbf, 0x3e, 0x07, 0xd3,
	0x0a, 0x6d, 0x05, 0x01, 0x1b, 0xef, 0x45, 0x89, 0xbc, 0x84, 0x02, 0xdd, 0x87, 0x49, 0x55, 0xec,
	0xf6, 0xb3, 0x00, 0x51, 0x1d, 0xef, 0xa7, 0x04, 0xb5, 0x13, 0x00, 0xed, 0x27, 0x61, 0x28, 0x18,
	0xba, 0xc9, 0x93, 0x4b, 0x00, 0x82, 0x5e, 0x27, 0x9a, 0x72, 0x77, 0xb1, 0xe1, 0xe1, 0x96, 0x7f,
	0xb3, 0x15, 0xad, 0xcf, 0x58, 0x77, 0x24, 0x59, 0xfd, 0xb3, 0x30, 0x50, 0xc2, 0xeb, 0xed, 0x80,
	0xc2, 0xf8, 0x65, 0xbe, 0x3a, 0xa4, 0x95, 0x0e, 0x7b, 0x86, 0x56, 0xe1, 0x18, 0x45, 0xbd, 0xd1,
	0xc2, 0xae, 0x47, 0x91, 0xde, 0x68, 0x6e, 0xb8, 0xf5, 0xfd, 0xa2, 0xbd, 0x05, 0x05, 0xaa, 0xdb,
	0x3a, 0xc4, 0xcf, 0xb3, 0xa1, 0xca, 0x8b, 0x5c, 0x66, 0xc7, 0x94, 0xf6, 0xf3, 0xa7, 0x8e, 0x08,
	0x8a, 0x5e, 0x25, 0x58, 0xef, 0x96, 0xb1, 0xbf, 0xd0, 0x6e, 0xb5, 0x70, 0xc3, 0xef, 0x19, 0xbb,
	0xb7, 0xa3, 0xa1, 0xa8, 0x41, 0xdd, 0x3d, 0xc3, 0x9f, 0x86, 0x13, 0x82, 0x74, 0xf9, 0x4c, 0x1e,
	0xa0, 0x4d, 0xf7, 0x98, 0x8c, 0xf8, 0x7e, 0xcf, 0x82, 0x93, 0x92, 0x9c, 0x15, 0x12, 0x73, 0x70,
	0x48, 0xae, 0xe1, 0xcc, 0x9f, 0x88, 0x3b, 0x1d, 0x01, 0xff, 0xca, 0x0b, 0xf6, 0x53, 0x30, 0x4c,
	0x29, 0x5c, 0x6d, 0xb5, 0x38, 0x2b, 0x47, 0x84, 0x97, 0x83, 0x47, 0x4e, 0x08, 0x84, 0x3e, 0x43,
	0x58, 0x12, 0x3a, 0xa9, 0xf7, 0xad, 0x7e, 0xdf, 0x82, 0x69, 0xa5, 0xbb, 0x3e, 0x04, 0xed, 0xfe,
	0xa6, 0x05, 0x53, 0xca, 0x50, 0x4a, 0x1f, 0x9f, 0x33, 0x00, 0x14, 0xa0, 0x84, 0xeb, 0xbe, 0x1b,
	0xcc, 0xfd, 0x51, 0x0d, 0x31, 0xc1, 0x2b, 0xbe, 0xc7, 0x9e, 0x32, 0x0b, 0x1d, 0x96, 0x23, 0x39,
	0xe5, 0x53, 0xe4, 0xf4, 0x26, 0x4c, 0x38, 0xf8, 0x6e, 0x05, 0xfb, 0x11, 0x2f, 0x57, 0x60, 0x24,
	0x2c, 0x70, 0x99, 0x4c, 0xc5, 0x2d, 0xcf, 0x62, 0xd5, 0x89, 0xc0, 0xcc, 0xfa, 0xe4, 0xb3, 0x70,
	0x84, 0xd1, 0xa2, 0xef, 0x2c, 0xee, 0xec, 0x36, 0x5b, 0x64, 0x69, 0xf3, 0x12, 0x8c, 0x4b, 0x15,
	0x1a, 0x3f, 0x5c, 0x7a, 0xee, 0xc8, 0xe0, 0x66, 0xb4, 0x83, 0x8d, 0x2b, 0x95, 0x3a, 0x7a, 0x93,
	0x3c, 0xb8, 0xbb, 0xb0, 0x8d, 0x37, 0xee, 0xc8, 0x68, 0x9f, 0x64, 0x93, 0xfb, 0x62, 0xf5, 0x66,
	0x4b, 0x55, 0xc6, 0xf8, 0x03, 0x33, 0x26, 0x5e, 0x87, 0xe3, 0x94, 0x09, 0x0d, 0xb5, 0x7d, 0x0a,
	0x01, 0x2d, 0xd3, 0x7e, 0x2c, 0x8b, 0xfd, 0xb8, 0x2f, 0x6b, 0x77, 0x13, 0x26, 0x89, 0x9f, 0x1e,
	0x4e, 0x23, 0xc4, 0xcf, 0xda, 0x17, 0xc2, 0x3b, 0x54, 0xf3, 0xe7, 0x5d, 0x7f, 0x63, 0x9b, 0x62,
	0xcd, 0x42, 0x9a, 0xb0, 0x2a, 0x8d, 0x88, 0xe5, 0x52, 0x88, 0xd5, 0xe9, 0xca, 0xa7, 0xe2, 0x37,
	0x5b, 0x78, 0xc5, 0xf7, 0xae, 0xbb, 0x8d, 0x6a, 0x1d, 0x13, 0xbd, 0x0e, 0x0b, 0x1a, 0xbd, 0x0e,
	0x9f, 0x39, 0x11, 0x98, 0x59, 0xd3, 0xee, 0x05, 0xb2, 0x2f, 0xd5, 0x36, 0x37, 0xe7, 0xf7, 0xd2,
	0x5a, 0xa5, 0x75, 0x5e, 0xa3, 0x6d, 0xaf, 0xf1, 0x60, 0xd5, 0x60, 0x34, 0x76, 0x7f, 0x48, 0x17,
	0x78, 0xcc, 0xc6, 0x45, 0xa4, 0x27, 0x21, 0x17, 0x78, 0xfb, 0x63, 0x0e, 0xf9, 0x6b, 0x17, 0x60,
	0xe8, 0x86, 0xeb, 0xf9, 0x11, 0xe1, 0xa0, 0x48, 0xd8, 0xbc, 0xd5, 0xbc, 0xd1, 0x6c, 0x30, 0x69,
	0x0e, 0x3b, 0xbc, 0x24, 0xf9, 0xe4, 0x79, 0x03, 0x9f, 0xdc, 0x86, 0x7c, 0xb8, 0xbc, 0xca, 0x39,
	0xf4, 0x3f, 0xf1, 0x84, 0x98, 0x54, 0xe6, 0x36, 0xfc, 0x5a, 0xb3, 0x41, 0x18, 0x3c, 0x18, 0xb1,
	0x94, 0xc0, 0x76, 0xf0, 0xdd, 0x12, 0xae, 0x63, 0x5f, 0xe8, 0xfd, 0x14, 0x3d, 0x5b, 0xf1, 0xbd,
	0x4a, 0xbd, 0x16, 0xec, 0xe7, 0xb0, 0x12, 0x5a, 0xa0, 0x2a, 0xb4, 0x50, 0xc7, 0x6e, 0xcb, 0x08,
	0xc9, 0x92, 0xfb, 0x20, 0x6a, 0x02, 0x2f, 0xa1, 0xa3, 0xc4, 0xe2, 0x91, 0x01, 0x2f, 0xa1, 0x41,
	0xc7, 0xc8, 0x58, 0xd8, 0xad, 0xef, 0x29, 0x3c, 0xa2, 0x57, 0x08, 0xe7, 0xac, 0x3f, 0x05, 0xa1,
	0x3d, 0x03, 0x10, 0x82, 0x04, 0xcb, 0x0b, 0xbd, 0xe2, 0x0a, 0x70, 0xe8, 0x01, 0x1d, 0x6f, 0x74,
	0x08, 0xdc, 0xf4, 0xb7, 0x71, 0x6b, 0xb1, 0xb1, 0xd9, 0x24, 0xca, 0xf0, 0x02, 0x8c, 0x89, 0x65,
	0x3e, 0x10, 0x8e, 0x0b, 0xf8, 0xc4, 0xc7, 0x8e, 0x04, 0x6c, 0x36, 0x1c, 0xde, 0xa6, 0x0e, 0x0d,
	0x1d, 0xe9, 0x71, 0xf2, 0x2f, 0xc2, 0xb8, 0x58, 0x0e, 0xda, 0x93, 0x48, 0x5f, 0x86, 0x36, 0x63,
	0x00, 0x53, 0x05, 0x28, 0x63, 0x5f, 0xa2, 0x9c, 0xd4, 0x77, 0x81, 0xee, 0xf6, 0x47, 0xba, 0x6b,
	0x66, 0x64, 0x56, 0x79, 0x2f, 0xaa, 0x84, 0xf6, 0xd7, 0x44, 0xb4, 0x43, 0x1d, 0x58, 0xad, 0x23,
	0x2f, 0x2e, 0x09, 0xac, 0xcc, 0x25, 0x81, 0x99, 0xb0, 0xfe, 0x9a, 0xb9, 0x24, 0x65, 0xec, 0x5f,
	0x6b, 0xb6, 0xee, 0x7f, 0x58, 0x36, 0x8a, 0x22, 0xde, 0x47, 0x53, 0x78, 0xff, 0x55, 0x7f, 0xc0,
	0x7b, 0xb4, 0xa1, 0xe4, 0x37, 0x19, 0xd6, 0xff, 0x7b, 0x9b, 0x4a, 0x84, 0x2a, 0xb5, 0x28, 0x4b,
	0x6e, 0xeb, 0x0e, 0x95, 0xdb, 0x80, 0x13, 0x55, 0x44, 0x12, 0x1d, 0x4b, 0x91, 0xe8, 0x26, 0xb5,
	0x7a, 0x91, 0x40, 0x57, 0x57, 0x17, 0x4b, 0x89, 0x9a, 0xa0, 0xdd, 0x54, 0x37, 0x1b, 0x3b, 0xdb,
	0xd4, 0xeb, 0x12, 0xdd, 0x95, 0xf9, 0x3d, 0x91, 0x56, 0x4d, 0xa2, 0xc5, 0x7a, 0x88, 0x3c, 0x0f,
	0x46, 0x29, 0x85, 0x35, 0xa2, 0xb4, 0x13, 0xac, 0x07, 0x85, 0x9d, 0x27, 0x46, 0x8b, 0x4e, 0x7f,
	0x6d, 0x89, 0x18, 0x2b, 0x91, 0x86, 0x11, 0x80, 0x0a, 0x9d, 0x12, 0x72, 0x0e, 0x2b, 0x98, 0x91,
	0xc3, 0x74, 0xd6, 0x63, 0x86, 0x3d, 0x6b, 0x24, 0xed, 0x43, 0x7e, 0x5f, 0xb2, 0xa8, 0x00, 0xa9,
	0x91, 0x35, 0x23, 0x96, 0x34, 0x6c, 0xa3, 0x01, 0x98, 0xd3, 0x0f, 0xc0, 0xb4, 0xa9, 0xb6, 0x0d,
	0xb3, 0xdc, 0xd2, 0x36, 0x02, 0x06, 0xe6, 0xf7, 0xc2, 0x23, 0xdb, 0x74, 0x37, 0x74, 0x1f, 0xad,
	0xff, 0x4b, 0x0b, 0x2e, 0xa9, 0x52, 0x16, 0xe8, 0xb2, 0x96, 0xcd, 0x35, 0xaa, 0xa1, 0x89, 0x39,
	0x00, 0x43, 0x16, 0x32, 0x3e, 0x90, 0xc2, 0xf8, 0x8f, 0x2c, 0xea, 0x2a, 0x52, 0x77, 0x40, 0xb0,
	0x55, 0x1f, 0x16, 0xf6, 0x7e, 0x69, 0x01, 0x2a, 0x63, 0x9f, 0xef, 0x68, 0x71, 0x06, 0x57, 0xdc,
	0x2d, 0x3c, 0xbf, 0xb7, 0x84, 0xab, 0x35, 0x77, 0xa1, 0xd9, 0xd8, 0xac, 0x75, 0xae, 0x62, 0x45,
	0x18, 0x26, 0xff, 0x04, 0x7e, 0xc3, 0x72, 0x64, 0xf5, 0xf2, 0x8a, 0xd5, 0x63, 0x6d, 0x18, 0x50,
	0xe7, 0x0a, 0xc2, 0x86, 0x57, 0x18, 0xe4, 0xaa, 0x4a, 0x4b, 0x91, 0x8d, 0x1c, 0x12, 0x4f, 0x40,
	0xff, 0xd1, 0x82, 0xd3, 0x4c, 0x39, 0x13, 0xdb, 0x63, 0xbf, 0x65, 0xd2, 0x5e, 0x3e, 0xd5, 0x7e,
	0x44, 0x98, 0x6a, 0xb3, 0x5f, 0x72, 0x4c, 0x04, 0x69, 0x34, 0x41, 0xff, 0x19, 0x53, 0x76, 0xd9,
	0x21, 0x08, 0x8e, 0x94, 0x18, 0x01, 0x36, 0x10, 0xa8, 0x95, 0x5f, 0x0b, 0xcf, 0xe8, 0x63, 0xcf,
	0x78, 0x3b, 0xce, 0xc6, 0xf7, 0x37, 0x62, 0xa0, 0x4e, 0x22, 0x12, 0x33, 0x9e, 0x3f, 0x07, 0x33,
	0x7c, 0x7f, 0x27, 0x09, 0x4d, 0x92, 0x0e, 0x09, 0x5b, 0x3f, 0x25, 0xf5, 0x58, 0xda, 0xd0, 0xe2,
	0xff, 0x83, 0x05, 0x88, 0x9f, 0x31, 0xb1, 0x9d, 0xd4, 0x0a, 0xf6, 0xf9, 0x96, 0x2f, 0x26, 0x4e,
	0x35, 0xdf, 0xec, 0xed, 0x8e, 0x03, 0x9d, 0xa7, 0x70, 0x19, 0xec, 0x38, 0x7e, 0xae, 0xd0, 0x9a,
	0x27, 0x66, 0x63, 0xf1, 0x55, 0x38, 0xc7, 0x22, 0x6d, 0x32, 0x9a, 0x21, 0xee, 0x41, 0x59, 0x26,
	0x7b, 0x50, 0xef, 0xab, 0xe2, 0x29, 0x3f, 0x64, 0xf1, 0x18, 0xcd, 0x24, 0x5f, 0xb1, 0x62, 0xed,
	0xd5, 0xf3, 0xa5, 0x17, 0xb6, 0x95, 0x28, 0xec, 0x8e, 0xf7, 0xe8, 0xfe, 0xc3, 0x82, 0xf3, 0x92,
	0x7c, 0x48, 0xeb, 0xb6, 0xf0, 0x43, 0x15, 0x51, 0x29, 0x38, 0x78, 0x10, 0xf1, 0x33, 0xba, 0xb7,
	0xdd, 0x7a, 0x1b, 0x73, 0x65, 0x4a, 0x07, 0x32, 0xd3, 0xab, 0x37, 0xe0, 0x31, 0x45, 0xce, 0x89,
	0xed, 0xeb, 0x58, 0xb5, 0xfe, 0xd4, 0x22, 0xc8, 0x43, 0x67, 0x8b, 0x58, 0x3a, 0x3e, 0xf2, 0x2b,
	0xbe, 0xeb, 0xd7, 0x3c, 0xbf, 0xb6, 0xe1, 0x05, 0xa6, 0xb7, 0xd7, 0x93, 0x08, 0x41, 0x1a, 0x4e,
	0x22, 0x94, 0x82, 0x91, 0x38, 0xbe, 0x4d, 0xad, 0x2b, 0x5b, 0xc5, 0x65, 0x33, 0x8d, 0xa1, 0x98,
	0x0c, 0xc4, 0x65, 0x74, 0x5e, 0x5d, 0x92, 0x69, 0x81, 0x9d, 0x14, 0x44, 0xa8, 0x02, 0x67, 0x02,
	0x9e, 0x92, 0xe7, 0xae, 0x0e, 0xcf, 0x4d, 0xd1, 0x9f, 0x5b, 0x04, 0xab, 0x66, 0x61, 0x29, 0x9d,
	0x55, 0x95, 0xe3, 0xe7, 0x57, 0xbc, 0x5d, 0xa9, 0x27, 0x9a, 0xf1, 0x43, 0xaf, 0x59, 0x18, 0x65,
	0x24, 0x2a, 0x1b, 0xcd, 0x16, 0x5b, 0x5d, 0x0f, 0x3b, 0x62, 0x95, 0x99, 0x31, 0xff, 0x9a, 0x45,
	0x77, 0x13, 0xf8, 0x7b, 0xb8, 0xbe, 0xf9, 0x70, 0xb8, 0x35, 0x9a, 0xd5, 0xfe, 0xd0, 0xa2, 0x6b,
	0x09, 0x1e, 0x0e, 0xc9, 0x5e, 0xaf, 0x56, 0xd9, 0xc0, 0xe9, 0x58, 0x9f, 0x75, 0x66, 0x80, 0xc8,
	0x8c, 0x62, 0x63, 0x1b, 0xfa, 0x4c, 0x9b, 0xc5, 0x2a, 0x33, 0x9d, 0x76, 0xf9, 0x49, 0x95, 0x9e,
	0xd1, 0x13, 0x30, 0x8c, 0x5b, 0xad, 0xb5, 0x8d, 0x66, 0x15, 0x73, 0x56, 0x87, 0x70, 0xab, 0xb5,
	0xd0, 0xac, 0x62, 0x74, 0x11, 0x72, 0xb5, 0x86, 0x6f, 0x8f, 0xc2, 0x90, 0xd7, 0xde, 0xd8, 0xc0,
	0x9e, 0x37, 0xd9, 0x67, 0x4f, 0xc1, 0x64, 0x95, 0x62, 0x58, 0x6b, 0x34, 0xfd, 0x35, 0xfc, 0xa0,
	0xe6, 0xf9, 0x93, 0x16, 0xfa, 0x96, 0xd8, 0x2d, 0xdc, 0x8c, 0x10, 0xa7, 0xb6, 0xd4, 0x72, 0x37,
	0xfd, 0x9e, 0xbb, 0xb4, 0x46, 0x33, 0xc8, 0x34, 0x3f, 0xe6, 0xd2, 0xf3, 0x84, 0x5e, 0xa3, 0x0c,
	0xf3, 0x51, 0xce, 0x65, 0x52, 0xaf, 0x67, 0x74, 0x9e, 0x91, 0x5a, 0x7c, 0x9c, 0x13, 0x4e, 0xc0,
	0x1d, 0x76, 0xaa, 0x38, 0x53, 0x89, 0x55, 0xb2, 0x8e, 0x3b, 0x78, 0x03, 0x3f, 0x42, 0x1d, 0xff,
	0xae, 0x05, 0x8f, 0x07, 0x9b, 0xd9, 0xd1, 0xbb, 0xba, 0xc5, 0x15, 0xed, 0x99, 0x5e, 0x68, 0xbd,
	0x51, 0xef, 0xbe, 0x11, 0x9c, 0x18, 0x4a, 0x61, 0x13, 0x01, 0x5f, 0xfb, 0xeb, 0xc0, 0xbf, 0xb7,
	0x02, 0xdd, 0x50, 0x90, 0xaf, 0xf0, 0xb0, 0x9c, 0x5e, 0xaf, 0xcf, 0xe2, 0xf1, 0x9a, 0x64, 0x7a,
	0xbb, 0xd6, 0xac, 0x57, 0x29, 0x1d, 0x1e, 0x48, 0x19, 0x94, 0xa3, 0x46, 0x0c, 0xa6, 0x34, 0xe2,
	0x0b, 0x16, 0x1c, 0x77, 0xf0, 0x5d, 0x07, 0xbb, 0xd5, 0x98, 0x99, 0x3c, 0xb0, 0x5e, 0x7a, 0x8b,
	0xee, 0xbc, 0x06, 0x8a, 0xec, 0x56, 0x6b, 0x8d, 0xf5, 0xe6, 0x83, 0x83, 0x23, 0xff, 0x5b, 0xf4,
	0x80, 0x31, 0x22, 0xdf, 0x6c, 0xfb, 0x07, 0x4a, 0xff, 0xf7, 0x2d, 0xca, 0x40, 0xb4, 0x2f, 0xc1,
	0x23, 0x39, 0x7a, 0xc1, 0xc0, 0x0c, 0x00, 0xc3, 0x4b, 0xb7, 0x1c, 0xf3, 0x74, 0x1b, 0x4c, 0xa8,
	0x31, 0xf6, 0x76, 0x8e, 0x48, 0xc7, 0x7a, 0x9c, 0xc1, 0xdb, 0x70, 0x54, 0xad, 0x5b, 0x71, 0x5b,
	0xee, 0x0e, 0x37, 0x34, 0xb3, 0xa2, 0xa1, 0xd1, 0xc1, 0x39, 0xfa, 0xd7, 0xcd, 0x76, 0x71, 0xff,
	0xbd, 0x3f, 0x81, 0x7a, 0x4f, 0x7d, 0x44, 0x39, 0x8a, 0x2e, 0x1f, 0x8b, 0x2e, 0xbd, 0x00, 0x87,
	0x58, 0x1c, 0xe9, 0x7a, 0xf3, 0x01, 0xdb, 0x91, 0x60, 0xc3, 0x50, 0xa9, 0xb5, 0x2f, 0xc2, 0x04,
	0xa9, 0xb9, 0x49, 0x55, 0x8b, 0x01, 0xb2, 0x0d, 0x5e, 0xb5, 0x3a, 0x61, 0xa5, 0x32, 0x94, 0xb8,
	0x52, 0x51, 0x26, 0x8a, 0xe1, 0xd8, 0x44, 0x11, 0x1c, 0x93, 0x8d, 0x44, 0xc7, 0x64, 0x33, 0x00,
	0xd1, 0xed, 0x0c, 0xbe, 0x1b, 0x2c, 0xd4, 0x10, 0x8f, 0x7c, 0x5a, 0xd3, 0xe1, 0x11, 0x44, 0xaf,
	0x65, 0x2c, 0x70, 0x93, 0x57, 0xb9, 0x31, 0xd3, 0xd1, 0x6f, 0x30, 0x43, 0x26, 0x4e, 0xe3, 0xb7,
	0x9a, 0x2c, 0xf8, 0xed, 0xd1, 0x38, 0x16, 0x3f, 0xd5, 0x31, 0xc4, 0x8c, 0x73, 0xcf, 0x19, 0x3a,
	0x09, 0x23, 0x0c, 0xf3, 0x5a, 0x2d, 0x3c, 0x75, 0x88, 0xcf, 0x03, 0x69, 0xe2, 0xfb, 0x3a, 0xdb,
	0x19, 0x5e, 0x70, 0x1b, 0x1b, 0xb8, 0x2e, 0xc6, 0x0c, 0x3e, 0x1a, 0xe1, 0x79, 0xc1, 0xf6, 0xbb,
	0x26, 0x7c, 0x31, 0x89, 0x21, 0x71, 0x2e, 0xec, 0x4f, 0x92, 0x41, 0x2e, 0x35, 0xa8, 0x85, 0x9f,
	0x2e, 0xdc, 0x70, 0x3d, 0x9f, 0xce, 0xaf, 0x19, 0x22, 0xd0, 0x5e, 0x45, 0x32, 0xa3, 0xf5, 0x31,
	0x16, 0xdc, 0xe7, 0xb8, 0x7e, 0xad, 0x91, 0x2a, 0x63, 0x06, 0x41, 0x29, 0x58, 0x0e, 0x2f, 0xa1,
	0xd7, 0x78, 0x44, 0x88, 0x86, 0xd7, 0x17, 0x59, 0xfc, 0x2a, 0x03, 0xbc, 0x51, 0xf3, 0xfc, 0x84,
	0x80, 0x55, 0x06, 0xe0, 0x28, 0xc0, 0x81, 0x3f, 0x10, 0x4d, 0x86, 0x8b, 0x8d, 0xf9, 0xc0, 0x32,
	0x1d, 0xd8, 0x84, 0xf8, 0x45, 0x71, 0xc5, 0xc4, 0xed, 0xe3, 0xc1, 0x73, 0xf1, 0x23, 0xd1, 0xbf,
	0xe6, 0x1b, 0x31, 0xbd, 0xf5, 0x4e, 0x48, 0xf7, 0x52, 0x11, 0xf3, 0x31, 0xcb, 0x4b, 0x66, 0x23,
	0xf6, 0x27, 0x16, 0x0d, 0xdd, 0x8c, 0xb1, 0xd7, 0x43, 0xef, 0xa5, 0x00, 0x43, 0x5c, 0xfa, 0x9c,
	0xc1, 0xa0, 0x68, 0xc6, 0xe1, 0x8f, 0x2d, 0xba, 0x9f, 0xab, 0xfa, 0x35, 0xf3, 0x7b, 0xd2, 0x25,
	0x12, 0xce, 0x8d, 0x95, 0x62, 0x44, 0xfa, 0x63, 0x46, 0x44, 0x76, 0x6b, 0x72, 0xc9, 0x6e, 0x4d,
	0x5a, 0x07, 0x7f, 0x3a, 0xd8, 0xe9, 0x27, 0xbc, 0x49, 0x77, 0x21, 0x7a, 0xb3, 0x40, 0xf8, 0x2a,
	0x53, 0x63, 0x1a, 0xcd, 0x10, 0x35, 0xff, 0x6a, 0xab, 0xee, 0x36, 0x94, 0xf5, 0x19, 0xab, 0x4b,
	0x5d, 0x9f, 0x31, 0x10, 0x27, 0xf6, 0x92, 0x19, 0x2b, 0x3f, 0xb1, 0xe0, 0x49, 0x75, 0x1d, 0xcb,
	0xde, 0x0f, 0x9a, 0xca, 0x84, 0x1b, 0xce, 0xc9, 0xbd, 0x9c, 0xdf, 0x8d, 0x3a, 0x63, 0x0f, 0x2e,
	0xc7, 0x97, 0xc3, 0xa9, 0x2c, 0xf6, 0x4a, 0x82, 0xa4, 0x9f, 0x8e, 0x86, 0x5b, 0x5c, 0x8e, 0xdb,
	0xa8, 0x36, 0x77, 0x2a, 0xbe, 0xeb, 0xb7, 0xbd, 0xb4, 0xa9, 0x86, 0xc1, 0x71, 0x39, 0xe4, 0x9c,
	0xb0, 0x4c, 0xde, 0xe1, 0xc1, 0x62, 0x4c, 0x0e, 0x83, 0x6a, 0x4c, 0x58, 0x3e, 0x35, 0xdc, 0x8d,
	0xc7, 0xa0, 0x48, 0x6c, 0x4c, 0xc1, 0xc0, 0x27, 0xf0, 0xde, 0x62, 0x89, 0x72, 0x91, 0x77, 0x58,
	0x41, 0x60, 0xa2, 0xa4, 0x30, 0x51, 0x32, 0x23, 0xf6, 0x20, 0x08, 0xac, 0xac, 0xb4, 0x77, 0x71,
	0xab, 0xdc, 0x6a, 0xb6, 0x77, 0xc9, 0xfc, 0x1a, 0x44, 0xb6, 0x58, 0x42, 0x64, 0x0b, 0x8f, 0x0e,
	0x23, 0x64, 0x78, 0x74, 0x58, 0x24, 0x9a, 0x9c, 0x7e, 0x64, 0xe4, 0xcd, 0xc2, 0x2a, 0x25, 0xda,
	0xe8, 0xf3, 0x94, 0xa5, 0xb2, 0x09, 0x4b, 0x1d, 0xdd, 0xda, 0x35, 0x63, 0x6b, 0x95, 0xb3, 0x15,
	0xa3, 0x1f, 0x0f, 0x8e, 0xd3, 0x85, 0xff, 0x1c, 0x83, 0xc1, 0x32, 0xf6, 0xe7, 0xea, 0xf5, 0x20,
	0x2c, 0x8e, 0x95, 0xd0, 0x03, 0xba, 0x09, 0xc1, 0xd4, 0x8b, 0x1e, 0x57, 0x57, 0x70, 0xab, 0xe6,
	0xd6, 0x17, 0x9a, 0x55, 0xbc, 0xe4, 0xee, 0x46, 0x27, 0xda, 0x96, 0x78, 0xa2, 0x3d, 0x03, 0x10,
	0x81, 0x51, 0x32, 0x23, 0x8e, 0x50, 0x63, 0xe6, 0x65, 0x7c, 0x39, 0x08, 0x67, 0xee, 0x31, 0x71,
	0x71, 0x8b, 0x3f, 0x67, 0xb2, 0xc5, 0xbf, 0x16, 0xf8, 0x73, 0x1a, 0x16, 0x64, 0x62, 0x56, 0x72,
	0x4b, 0xfb, 0xd3, 0x5d, 0x86, 0x30, 0xce, 0xfe, 0xd1, 0x35, 0xf3, 0x1d, 0x0b, 0x0a, 0x71, 0xea,
	0x0e, 0xde, 0x68, 0xb6, 0xc4, 0xab, 0xb4, 0x39, 0x7a, 0x95, 0x56, 0x1f, 0xc9, 0x20, 0xf3, 0x94,
	0x8b, 0xf1, 0x34, 0x03, 0xc0, 0x3a, 0x53, 0x5c, 0x2c, 0x45, 0x35, 0xe8, 0x0d, 0x6a, 0xcb, 0xe4,
	0xe3, 0x5e, 0x83, 0x9b, 0xae, 0x46, 0x42, 0xfe, 0x8a, 0xc5, 0xfd, 0x4e, 0x0d, 0xfa, 0x17, 0xe4,
	0x8b, 0xc3, 0x9a, 0x00, 0x41, 0xf1, 0xb1, 0x23, 0xdf, 0x32, 0xee, 0xf2, 0x26, 0x40, 0x9c, 0x0d,
	0x7e, 0x39, 0xac, 0x07, 0x6d, 0xfd, 0x9d, 0x60, 0xe8, 0x24, 0x12, 0x39, 0xd8, 0x16, 0x7f, 0x9e,
	0xf9, 0x12, 0xd1, 0xd9, 0x78, 0xaf, 0x38, 0x31, 0x92, 0xc6, 0x12, 0x1f, 0x5d, 0x7a, 0xfa, 0x1d,
	0x9f, 0xf8, 0xbd, 0x26, 0xec, 0x27, 0x71, 0x7c, 0x3d, 0xea, 0xb6, 0x77, 0x2d, 0x29, 0xd5, 0x84,
	0x80, 0xfc, 0x60, 0xbb, 0xeb, 0x7e, 0xdc, 0x39, 0x5f, 0xf1, 0x3d, 0xe2, 0xbb, 0x74, 0x7d, 0xb3,
	0xda, 0xcc, 0xe4, 0x7f, 0xdd, 0x82, 0x53, 0x5a, 0x01, 0x04, 0xb4, 0x0f, 0x56, 0x0e, 0xaf, 0x06,
	0x0e, 0x4d, 0xaf, 0x6d, 0xd1, 0x97, 0xac, 0x28, 0x8e, 0xf6, 0x11, 0x1a, 0x22, 0xd1, 0xc7, 0x8f,
	0x64, 0xcd, 0x5d, 0xbe, 0x32, 0x4c, 0xaa, 0x75, 0x1a, 0x0f, 0x55, 0x05, 0x71, 0x62, 0x2f, 0x99,
	0x49, 0xe4, 0x9b, 0x6c, 0xd3, 0x2e, 0x8a, 0xa0, 0x8e, 0xa1, 0x59, 0x0c, 0x33, 0x20, 0xc4, 0x22,
	0xc3, 0x53, 0x19, 0x8a, 0xbf, 0x65, 0xc6, 0xd1, 0xc7, 0x22, 0x69, 0x92, 0xb5, 0xe4, 0x55, 0x76,
	0x5e, 0x48, 0x45, 0x30, 0xee, 0x04, 0x45, 0xa2, 0xee, 0x57, 0x5b, 0xe1, 0x7d, 0xc5, 0x11, 0x87,
	0x97, 0xd0, 0xcf, 0x2c, 0x7a, 0x81, 0x30, 0xea, 0xdf, 0xe8, 0xb2, 0x42, 0xba, 0xfe, 0x64, 0x5c,
	0x0b, 0x10, 0xc3, 0x61, 0x59, 0x40, 0x6d, 0x5e, 0x1b, 0x50, 0x3b, 0x20, 0x86, 0x96, 0x19, 0x1d,
	0xa6, 0xfc, 0xdc, 0xe2, 0x77, 0x13, 0x75, 0x3c, 0x17, 0x60, 0x68, 0xd1, 0xbb, 0x56, 0x73, 0x1b,
	0x75, 0x9e, 0x82, 0x21, 0x28, 0x0a, 0xd7, 0x29, 0xfa, 0xa5, 0xeb, 0x14, 0xbc, 0x1d, 0x39, 0x29,
	0x6f, 0x46, 0xe2, 0xd5, 0xd9, 0x20, 0x97, 0xc2, 0x00, 0x75, 0x52, 0xe9, 0x7f, 0x49, 0x9d, 0x07,
	0x4d, 0xd4, 0xd9, 0x85, 0x43, 0xe2, 0x32, 0x31, 0xe5, 0xee, 0x45, 0xd7, 0xf1, 0xef, 0x2f, 0x87,
	0x17, 0xe8, 0x56, 0x7c, 0x8f, 0x92, 0x90, 0x02, 0x5f, 0x2c, 0x35, 0xf0, 0x25, 0xd6, 0x9b, 0x64,
	0xcc, 0x4d, 0xca, 0x6b, 0xc5, 0xcd, 0x4d, 0x7b, 0x21, 0xcc, 0x5f, 0xc1, 0xd1, 0x7a, 0x9a, 0x9b,
	0xeb, 0x32, 0x84, 0xa3, 0xbe, 0xd1, 0xf9, 0xf0, 0x5f, 0xa3, 0x66, 0x3e, 0xea, 0x6e, 0x7e, 0x43,
	0x86, 0x8f, 0xb7, 0x1e, 0x98, 0xb9, 0xef, 0x05, 0xe6, 0x3c, 0x89, 0x46, 0xcf, 0x6c, 0x4c, 0xc7,
	0x6d, 0xdf, 0xa5, 0xdb, 0x63, 0x6c, 0xd3, 0x25, 0x86, 0xad, 0xd3, 0x11, 0x6a, 0xa4, 0x3a, 0xcb,
	0xfc, 0xc8, 0x3c, 0x81, 0x66, 0x17, 0x2d, 0x38, 0x99, 0x18, 0x22, 0xf9, 0x70, 0xae, 0x4d, 0x6c,
	0xc7, 0x1d, 0x9f, 0x87, 0x44, 0xe9, 0x3e, 0x8d, 0xb1, 0xa6, 0x93, 0x41, 0x62, 0x03, 0x3b, 0xcd,
	0xa1, 0x60, 0x44, 0xf8, 0x4d, 0x9a, 0xaa, 0x83, 0xc7, 0x6c, 0x92, 0xb7, 0xba, 0x4a, 0x8c, 0x63,
	0x1c, 0xcf, 0x3e, 0x21, 0x68, 0x04, 0x25, 0x37, 0x0b, 0xa3, 0x0b, 0xed, 0x16, 0x6e, 0xf8, 0xe2,
	0x82, 0x4f, 0xac, 0x52, 0xce, 0x9b, 0xfa, 0x63, 0xe7, 0x4d, 0x1d, 0x2f, 0xfb, 0xee, 0xd2, 0xfb,
	0x24, 0xd1, 0x3e, 0x67, 0x10, 0xa3, 0xdd, 0x5d, 0xf6, 0x26, 0xa3, 0x96, 0xff, 0x0d, 0x9d, 0x1c,
	0xc3, 0x96, 0x8b, 0x54, 0x5f, 0x90, 0x13, 0xf0, 0x68, 0x1c, 0x20, 0xf1, 0xb1, 0x23, 0x67, 0xeb,
	0xb1, 0x21, 0xbf, 0xe2, 0x7b, 0x61, 0x46, 0x1e, 0xf2, 0x5f, 0x91, 0x57, 0x2e, 0x55, 0x5e, 0x79,
	0x73, 0xf7, 0x5f, 0x1a, 0xc5, 0x3c, 0xb1, 0xc4, 0x7e, 0xcd, 0x65, 0x8b, 0x9e, 0x5e, 0xc8, 0x98,
	0xf9, 0x49, 0x6d, 0x17, 0x99, 0x9e, 0xcc, 0xba, 0xe2, 0x8f, 0xe8, 0x39, 0x81, 0x6a, 0x96, 0x84,
	0xf4, 0x2c, 0xda, 0xf9, 0x13, 0xc1, 0x18, 0xbf, 0x60, 0x2e, 0xd2, 0x95, 0xea, 0x7a, 0x2f, 0xf8,
	0x66, 0x70, 0xf1, 0xe9, 0xa0, 0x64, 0x73, 0x9f, 0x6b, 0x69, 0x9c, 0x64, 0x67, 0x26, 0xaf, 0x63,
	0xd3, 0x7e, 0x2f, 0x88, 0xcd, 0x89, 0xf4, 0xcb, 0x9b, 0xdf, 0xdb, 0x4f, 0xaa, 0x2e, 0xb3, 0x06,
	0xff, 0xc0, 0x8a, 0xc2, 0xba, 0x74, 0xa4, 0x5f, 0xd1, 0xe4, 0xb2, 0xe1, 0x02, 0x38, 0x15, 0x17,
	0x40, 0x04, 0xe3, 0x68, 0x52, 0xe0, 0x74, 0x2c, 0x94, 0x3f, 0xe9, 0xa7, 0xc3, 0x43, 0x62, 0xcd,
	0xcc, 0x56, 0x89, 0xb7, 0xda, 0xfa, 0x53, 0x6f, 0xb5, 0xe5, 0xd2, 0x6f, 0xb5, 0xe5, 0x13, 0x6f,
	0xb5, 0x0d, 0x68, 0x9d, 0xf0, 0x41, 0xed, 0xad, 0xb6, 0x21, 0xed, 0xad, 0xb6, 0x61, 0xf1, 0xd6,
	0x47, 0x78, 0x42, 0x44, 0xef, 0x30, 0xb0, 0xd8, 0x07, 0xd0, 0x5d, 0x48, 0x80, 0x74, 0xef, 0xeb,
	0x44, 0xbc, 0x37, 0x03, 0x91, 0x3d, 0xd2, 0xbe, 0x7c, 0x2d, 0xd8, 0x29, 0xe7, 0x7c, 0xd1, 0x75,
	0x80, 0xdf, 0x0b, 0x1b, 0xfa, 0xb7, 0x16, 0x3c, 0x2e, 0x8e, 0xd7, 0x28, 0xd6, 0x98, 0x37, 0x5c,
	0xbe, 0x8d, 0xd2, 0xdd, 0x24, 0x17, 0x5d, 0xca, 0xc9, 0xa9, 0x97, 0x72, 0xf4, 0x17, 0x7b, 0xe2,
	0x69, 0x2c, 0x49, 0x2d, 0xa6, 0x1d, 0xcf, 0x95, 0x84, 0x16, 0xd0, 0x7f, 0x85, 0xd1, 0xe4, 0x99,
	0x2d, 0xb0, 0xbf, 0xdb, 0x51, 0x53, 0x79, 0xdf, 0x3e, 0x2b, 0xdf, 0xe8, 0x31, 0x7c, 0xd9, 0xe9,
	0x44, 0xa6, 0x46, 0xfd, 0x24, 0xc6, 0xa0, 0x67, 0x37, 0xf5, 0x19, 0x18, 0x15, 0xec, 0x51, 0x8a,
	0xbb, 0x27, 0x82, 0x75, 0xae, 0x96, 0x9f, 0x86, 0x27, 0x84, 0x03, 0x87, 0xcc, 0x7b, 0x47, 0x1d,
	0xef, 0x1c, 0xfe, 0x85, 0x45, 0xfc, 0x5a, 0xdd, 0x8c, 0x72, 0x90, 0xb7, 0x99, 0x3a, 0x16, 0xcb,
	0xbb, 0x61, 0x7c, 0xac, 0xa6, 0xa7, 0xe2, 0x17, 0x06, 0xb2, 0xe7, 0x63, 0x7a, 0x6f, 0xa1, 0x5f,
	0x7b, 0x6f, 0x21, 0x6d, 0x7a, 0xfa, 0x15, 0x3d, 0x07, 0x4e, 0xd4, 0x99, 0x38, 0x27, 0x0d, 0x98,
	0x4e, 0x85, 0xe3, 0xf2, 0xbc, 0xa8, 0x93, 0xa7, 0xf6, 0x02, 0x43, 0x3a, 0xba, 0x6e, 0x26, 0xfa,
	0xa3, 0x4a, 0x83, 0xb8, 0x25, 0x7c, 0xc8, 0x0e, 0xc6, 0xcf, 0xe9, 0xcd, 0x23, 0xfd, 0xe2, 0xf1,
	0x51, 0xe7, 0x8b, 0x34, 0xd3, 0x85, 0x70, 0xef, 0x82, 0xa7, 0x76, 0x0b, 0x32, 0x62, 0xf6, 0x6c,
	0x8b, 0x16, 0x47, 0x5b, 0x17, 0x5a, 0x12, 0xfa, 0x43, 0xb9, 0x8e, 0x7b, 0xa2, 0x4d, 0xdb, 0x51,
	0xe9, 0xaa, 0x1d, 0xfb, 0x70, 0x6d, 0xc3, 0x9d, 0x6d, 0xa9, 0xb7, 0x7b, 0x20, 0xb6, 0xef, 0x0b,
	0x3b, 0xdb, 0x12, 0xee, 0x15, 0x6d, 0x42, 0x52, 0xae, 0x4f, 0x59, 0xc9, 0x3e, 0xb5, 0xb9, 0x4c,
	0x3b, 0x96, 0xf5, 0x1b, 0x81, 0xd7, 0x21, 0xa7, 0x21, 0xcc, 0x48, 0xbd, 0x6b, 0xd6, 0xee, 0x1f,
	0x5b, 0xd1, 0x50, 0x96, 0xd1, 0x57, 0x12, 0xd3, 0x9c, 0xaa, 0xb9, 0x0b, 0x75, 0x60, 0xfa, 0x3c,
	0xa7, 0x9d, 0xb7, 0xfd, 0x2d, 0x7a, 0x47, 0x9f, 0xee, 0xac, 0xd3, 0x0c, 0xd0, 0x37, 0x9a, 0x5b,
	0x76, 0x29, 0xdc, 0x75, 0x0c, 0xaa, 0x38, 0x53, 0xc5, 0x38, 0x53, 0x01, 0x84, 0xa3, 0xbe, 0x62,
	0x9a, 0x2e, 0xe8, 0xa4, 0x83, 0xef, 0x5e, 0xab, 0x35, 0xaa, 0x5e, 0xf0, 0xa2, 0x18, 0x49, 0xd5,
	0x45, 0xd2, 0x74, 0x33, 0x3d, 0x7f, 0x9b, 0x67, 0x97, 0x91, 0x28, 0xdb, 0xcf, 0x13, 0xa7, 0x9e,
	0xfd, 0x0f, 0x9c, 0x89, 0xb4, 0x26, 0x47, 0xc0, 0x9d, 0xcb, 0xfd, 0xbf, 0x2d, 0x78, 0x39, 0xa5,
	0xe5, 0xbf, 0x96, 0x29, 0xd8, 0xcd, 0xce, 0x13, 0x7e, 0x69, 0xc1, 0xd3, 0xe9, 0x2d, 0xff, 0x50,
	0x64, 0x0d, 0x37, 0x8b, 0x06, 0xfc, 0x3d, 0x36, 0x61, 0xa6, 0x34, 0x66, 0x5f, 0xdc, 0xef, 0x23,
	0xec, 0xe7, 0xdf, 0x2c, 0x78, 0xae, 0x4b, 0x05, 0x7b, 0x54, 0xe9, 0xe3, 0xcd, 0x44, 0xfe, 0xc7,
	0xcc, 0xeb, 0x34, 0xd4, 0x9f, 0x87, 0x95, 0x8c, 0xdf, 0xac, 0x13, 0xfe, 0xc0, 0x82, 0x8b, 0xa6,
	0x9d, 0xf0, 0x30, 0x3e, 0x53, 0x60, 0xc6, 0xe5, 0xf7, 0xd9, 0x99, 0xa4, 0xbc, 0x30, 0x98, 0xf3,
	0xe7, 0xaa, 0x9d, 0xc7, 0x25, 0xeb, 0x73, 0xe5, 0xef, 0x23, 0x0d, 0xc7, 0x27, 0xf8, 0xe1, 0xa3,
	0x8e, 0xb9, 0x8e, 0xd7, 0x59, 0x7f, 0xa5, 0x6f, 0x68, 0x19, 0xfb, 0x3d, 0x6a, 0x68, 0xe6, 0xae,
	0x50, 0xb7, 0x46, 0xf3, 0x73, 0x09, 0x62, 0x20, 0xac, 0x5f, 0x86, 0xe1, 0x20, 0xef, 0x6e, 0xda,
	0x81, 0x47, 0x00, 0xd3, 0xf9, 0x5c, 0xf5, 0x45, 0xbd, 0xd8, 0x4a, 0xb8, 0xde, 0x23, 0xb1, 0x19,
	0x69, 0x69, 0x92, 0x26, 0x10, 0x36, 0x3a, 0xd6, 0x84, 0xdf, 0xe5, 0x97, 0xbf, 0xe8, 0xbd, 0xf3,
	0x0f, 0x93, 0xbe, 0x5f, 0x0f, 0x22, 0x7d, 0x54, 0xce, 0xba, 0xd9, 0x54, 0x88, 0x35, 0xf1, 0xd7,
	0x40, 0xd3, 0x1f, 0xe8, 0x04, 0x70, 0x20, 0x6a, 0xfe, 0x8e, 0x46, 0x60, 0x07, 0xac, 0xe3, 0xda,
	0xde, 0xef, 0x4a, 0xc1, 0x1b, 0xe1, 0x09, 0x7a, 0x88, 0xe7, 0x61, 0x2a, 0x37, 0xba, 0x03, 0xe3,
	0x12, 0xd3, 0x0f, 0x95, 0xd8, 0x66, 0xf2, 0x56, 0x98, 0x49, 0x22, 0x12, 0xd3, 0x6f, 0xbc, 0xa0,
	0xd7, 0x95, 0x44, 0xb4, 0x1d, 0xe6, 0xc1, 0x2d, 0xc2, 0x70, 0x98, 0xc2, 0x96, 0x05, 0xc1, 0x84,
	0x65, 0xf4, 0x1d, 0x2b, 0x2d, 0x7d, 0xc6, 0x01, 0x64, 0x04, 0x09, 0x93, 0xec, 0x0f, 0x88, 0x49,
	0xf6, 0x6b, 0x19, 0x3b, 0x63, 0x5d, 0x6d, 0xe2, 0xe9, 0xbf, 0x49, 0xf0, 0xcf, 0x56, 0xfc, 0xaa,
	0x43, 0x2c, 0x9c, 0x38, 0x65, 0xa7, 0x9d, 0xcb, 0x21, 0x97, 0x28, 0x87, 0x7c, 0xfc, 0x46, 0xe6,
	0x75, 0xf7, 0x1e, 0x66, 0x5d, 0x40, 0x9b, 0x3d, 0xec, 0x08, 0x35, 0x74, 0xbd, 0x4f, 0xbf, 0x1b,
	0x73, 0xab, 0xb6, 0x83, 0xa9, 0x8d, 0xca, 0x39, 0x42, 0x4d, 0x74, 0x70, 0x49, 0x9f, 0x0f, 0xb1,
	0xe7, 0x51, 0x0d, 0xfa, 0x86, 0x25, 0x24, 0xd5, 0xed, 0x20, 0xbd, 0xab, 0xee, 0x92, 0x12, 0x8f,
	0xcd, 0xcf, 0x47, 0x57, 0x13, 0x74, 0x69, 0x65, 0xa7, 0x59, 0x8e, 0x0a, 0x80, 0xc1, 0x85, 0x9b,
	0x4b, 0x4b, 0x37, 0x97, 0x27, 0xfb, 0xc8, 0xff, 0xb9, 0x85, 0x5b, 0x8b, 0x37, 0x97, 0x27, 0x2d,
	0x74, 0x43, 0x4e, 0x6f, 0xda, 0x51, 0xd4, 0x13, 0x67, 0x20, 0x17, 0x32, 0x80, 0xbe, 0x60, 0xc5,
	0x83, 0x72, 0x32, 0xd4, 0xa1, 0xc0, 0x76, 0x2b, 0xa3, 0x53, 0xc7, 0xa0, 0xa8, 0x89, 0x02, 0xd3,
	0xb6, 0xb8, 0x2a, 0xb4, 0x98, 0xfc, 0x47, 0xff, 0x6a, 0xc5, 0xf6, 0x26, 0x48, 0x9f, 0xb3, 0x0c,
	0xb1, 0xa1, 0xe6, 0x84, 0xe5, 0x8c, 0x51, 0x3f, 0x0b, 0xa3, 0xa1, 0x07, 0x1d, 0x7d, 0x45, 0x47,
	0xa8, 0x12, 0x44, 0x96, 0x8f, 0xad, 0xa1, 0x29, 0x0d, 0xda, 0x73, 0x3c, 0xe9, 0x65, 0x54, 0x43,
	0x79, 0x0a, 0xf6, 0x4e, 0x06, 0x69, 0x93, 0xc2, 0x72, 0x28, 0xee, 0x21, 0xa1, 0x27, 0xdf, 0xe1,
	0x83, 0xe1, 0xa1, 0x5e, 0x52, 0x3d, 0x05, 0x23, 0x0c, 0xff, 0x72, 0x7b, 0x27, 0x98, 0xb3, 0xc3,
	0x0a, 0xf4, 0xce, 0xa0, 0xf8, 0x69, 0x86, 0xd8, 0x37, 0xb2, 0x3a, 0x1d, 0x89, 0x81, 0x56, 0xe7,
	0x05, 0xad, 0x9e, 0x82, 0x81, 0x6b, 0x75, 0x97, 0x86, 0xf3, 0x51, 0x43, 0x40, 0x0b, 0x34, 0xeb,
	0x30, 0xe5, 0x82, 0x4a, 0x6a, 0xd8, 0xe1, 0x25, 0xe5, 0x96, 0xfa, 0x90, 0xc1, 0x2d, 0xf5, 0x61,
	0xd3, 0x5b, 0xea, 0x23, 0x9d, 0xdc, 0x52, 0x07, 0xd3, 0x5b, 0xea, 0xa3, 0xf1, 0x5b, 0xea, 0x1f,
	0x85, 0x23, 0xcb, 0x4d, 0xbf, 0xb6, 0xb9, 0x57, 0xc1, 0xbe, 0x5f, 0x6b, 0x6c, 0x79, 0xac, 0xfd,
	0x63, 0x14, 0x52, 0xf7, 0x88, 0xac, 0x48, 0x2b, 0xdb, 0xcd, 0xfb, 0x2b, 0x2d, 0x7c, 0xaf, 0x86,
	0xef, 0x7b, 0x85, 0x71, 0x2a, 0x13, 0xa9, 0x8e, 0xa6, 0x74, 0xad, 0xd5, 0x71, 0xc3, 0x2f, 0x1c,
	0x62, 0x12, 0x63, 0x25, 0xd2, 0xc1, 0x4b, 0x6d, 0x1f, 0xaf, 0x36, 0xfc, 0x5a, 0xbd, 0x30, 0xc1,
	0x3a, 0x38, 0xac, 0x20, 0xd2, 0xaf, 0x34, 0xdb, 0x8d, 0x6a, 0x61, 0x92, 0x46, 0xa4, 0xb2, 0x42,
	0x30, 0x12, 0x0f, 0x4b, 0x71, 0xa5, 0x34, 0x4d, 0x4c, 0xc1, 0xa6, 0x8a, 0xcb, 0x0a, 0xd2, 0x45,
	0xe4, 0x23, 0xca, 0x45, 0xe4, 0x53, 0x30, 0xc2, 0xee, 0x90, 0xee, 0xfa, 0x5e, 0x61, 0x8a, 0xd1,
	0x0d, 0x2b, 0x48, 0x3f, 0xf2, 0x2b, 0x9c, 0xe4, 0xf1, 0x51, 0xd6, 0x8f, 0x51, 0x0d, 0xfd, 0x6e,
	0x5a, 0xad, 0x71, 0x87, 0xe8, 0x53, 0xe1, 0x18, 0x35, 0x13, 0x61, 0x59, 0xb9, 0x18, 0x72, 0x9c,
	0xd9, 0xdc, 0xa8, 0x46, 0x09, 0x26, 0x29, 0x88, 0x36, 0x99, 0x3e, 0x0f, 0xfd, 0x87, 0x13, 0x4a,
	0xf2, 0x44, 0x07, 0xdf, 0x6b, 0xde, 0xc1, 0x85, 0x22, 0x93, 0x1f, 0x2b, 0xa1, 0x5f, 0xf4, 0xab,
	0x1f, 0x0a, 0x92, 0x2e, 0x69, 0x0d, 0x70, 0xdb, 0x58, 0x80, 0x21, 0xf1, 0x0b, 0x44, 0x23, 0x4e,
	0x50, 0x8c, 0xe6, 0x3f, 0x76, 0x79, 0x73, 0x20, 0x3c, 0xf8, 0xa2, 0x7f, 0x4a, 0x2e, 0x4f, 0x64,
	0x34, 0xe6, 0x44, 0x15, 0x44, 0x89, 0xa8, 0xd7, 0x46, 0xbc, 0x97, 0xf6, 0x2e, 0x1d, 0x1a, 0x63,
	0x8e, 0x58, 0x45, 0x04, 0x74, 0xb5, 0xe1, 0xd7, 0xfc, 0x1a, 0x66, 0xd9, 0x1e, 0xc7, 0x9c, 0xb0,
	0x2c, 0x7c, 0x28, 0x69, 0x48, 0xfa, 0x50, 0x92, 0x3e, 0x7e, 0xa0, 0x00, 0x43, 0xd7, 0xee, 0x57,
	0x09, 0x08, 0x1d, 0x02, 0x63, 0x4e, 0x50, 0x24, 0x4f, 0xe8, 0xc5, 0xb0, 0xc5, 0x2a, 0xd5, 0xf7,
	0x9c, 0x13, 0x14, 0x09, 0xf5, 0xdb, 0x35, 0x77, 0xbe, 0xe9, 0x2f, 0x56, 0xb9, 0x86, 0x87, 0xe5,
	0xc0, 0x6d, 0x2a, 0x71, 0x85, 0x66, 0x05, 0xf4, 0x1b, 0xc2, 0x47, 0x13, 0x8c, 0xed, 0x88, 0xe1,
	0x57, 0xf6, 0xd0, 0xc7, 0xa5, 0x8f, 0x8b, 0x24, 0xda, 0xc8, 0x02, 0x0c, 0x05, 0x9f, 0xb2, 0x60,
	0xd3, 0x5a, 0x50, 0x44, 0xd7, 0xd5, 0x6f, 0x5d, 0x64, 0x4f, 0x62, 0x09, 0x98, 0xbe, 0x6c, 0xc1,
	0x8c, 0x3e, 0x17, 0xd0, 0xc1, 0xe6, 0x5b, 0x45, 0x25, 0x18, 0x8c, 0x2e, 0x55, 0x56, 0xc8, 0x1f,
	0x1e, 0x8d, 0xcd, 0x0a, 0x44, 0x89, 0x85, 0xcb, 0x60, 0xf4, 0xbf, 0x38, 0xc1, 0x8f, 0xb0, 0x09,
	0x7e, 0x0e, 0x26, 0x94, 0xd6, 0x74, 0xca, 0x3e, 0x2a, 0xc3, 0x78, 0x2c, 0x27, 0x52, 0x37, 0x57,
	0xa1, 0xd1, 0xa7, 0xe0, 0xd8, 0xc3, 0xcb, 0xb2, 0x84, 0x66, 0x61, 0x30, 0xfd, 0x2a, 0x34, 0x5a,
	0x86, 0xb1, 0x90, 0x7e, 0x0f, 0xbe, 0x61, 0x80, 0x4e, 0xc0, 0xc0, 0xfc, 0x9e, 0x8f, 0x35, 0x5f,
	0x24, 0x40, 0xef, 0x0d, 0x85, 0x67, 0xba, 0xfb, 0x76, 0x7f, 0x65, 0xb1, 0xe6, 0x63, 0xea, 0x33,
	0x0b, 0xa3, 0xdc, 0x54, 0x09, 0x7e, 0x8b, 0x58, 0x15, 0x4d, 0xd1, 0x83, 0xe2, 0x14, 0x3d, 0x09,
	0xb9, 0x9b, 0x6d, 0x16, 0xa1, 0x34, 0xec, 0x90, 0xbf, 0xcc, 0xa6, 0x35, 0xc8, 0x5c, 0x88, 0xd9,
	0xbc, 0x3b, 0xec, 0x44, 0x15, 0x8c, 0x4e, 0xb5, 0xe6, 0xb2, 0xa9, 0x90, 0xda, 0x9a, 0x61, 0x47,
	0xac, 0x12, 0xa6, 0x30, 0x90, 0xa6, 0x30, 0x1b, 0xf2, 0x2b, 0x4d, 0x8f, 0xcd, 0xa5, 0xc3, 0x0e,
	0xfd, 0x2f, 0xda, 0xa6, 0x31, 0xd9, 0x36, 0x85, 0x46, 0x63, 0x5c, 0x34, 0x1a, 0xa4, 0xcb, 0x9b,
	0x8b, 0x55, 0x3a, 0x39, 0x92, 0x2e, 0x6f, 0x46, 0x1d, 0x35, 0x11, 0x75, 0x94, 0x60, 0x0b, 0x27,
	0x65, 0x5b, 0x28, 0x5a, 0xbc, 0xc3, 0x8a, 0xc5, 0x43, 0x30, 0x46, 0x4d, 0xf3, 0xad, 0x26, 0x23,
	0x6c, 0xb3, 0x08, 0x47, 0xb1, 0x2e, 0x9c, 0x33, 0x8e, 0xe8, 0xe7, 0x8c, 0xa9, 0x84, 0x39, 0xe3,
	0x68, 0xe2, 0x9c, 0x71, 0x2c, 0x63, 0xce, 0x38, 0x9e, 0x3e, 0x67, 0x14, 0x12, 0xe7, 0x8c, 0x13,
	0xea, 0x9c, 0x71, 0x9b, 0xfa, 0x1c, 0x45, 0x26, 0x4d, 0x5a, 0xa0, 0x98, 0xaa, 0x35, 0x36, 0x01,
	0x9f, 0x64, 0xd2, 0x08, 0xca, 0x04, 0x13, 0x73, 0x7a, 0x0b, 0xa7, 0x28, 0x0b, 0xbc, 0x24, 0x5d,
	0x25, 0x9f, 0x56, 0xae, 0x92, 0xdb, 0x90, 0x5f, 0x6d, 0xd7, 0xaa, 0x85, 0x19, 0x9e, 0xbd, 0xbc,
	0x5d, 0xab, 0x2a, 0xd3, 0xfc, 0x69, 0xf5, 0xfe, 0xa7, 0x32, 0xcd, 0xcf, 0xc6, 0x62, 0x46, 0x43,
	0xb3, 0x78, 0x46, 0x9c, 0xed, 0x9e, 0x87, 0xd1, 0x85, 0xe6, 0xce, 0x7a, 0xad, 0xe1, 0x52, 0x16,
	0x51, 0xec, 0x3b, 0x54, 0xc2, 0x53, 0x47, 0x04, 0x45, 0x58, 0x7a, 0xd3, 0x7e, 0x19, 0x0e, 0x85,
	0xba, 0x5d, 0xa9, 0xd7, 0x36, 0x30, 0xdf, 0x80, 0x92, 0xbe, 0x48, 0xc3, 0x00, 0x98, 0x1d, 0x76,
	0x14, 0xf8, 0xe0, 0xb2, 0x7b, 0x35, 0xc8, 0xa2, 0x4e, 0x0b, 0xe8, 0xe3, 0x30, 0x2e, 0xbd, 0x96,
	0x66, 0xdc, 0x18, 0x44, 0x60, 0x07, 0x58, 0x09, 0xbd, 0xc4, 0xf2, 0xa2, 0x74, 0x9b, 0x61, 0x1c,
	0x5d, 0x61, 0x99, 0xe4, 0x3b, 0xc9, 0x34, 0x8f, 0xa6, 0x61, 0x20, 0x25, 0xd2, 0x01, 0x3d, 0xcb,
	0xf3, 0xc5, 0x77, 0x96, 0x50, 0x1e, 0x6d, 0xc1, 0x08, 0x75, 0x1e, 0xe8, 0xb7, 0x04, 0x05, 0xcc,
	0xb9, 0x98, 0x2f, 0xc0, 0x56, 0x92, 0x39, 0x7e, 0x63, 0xea, 0x86, 0xeb, 0xf9, 0xa2, 0xdf, 0x10,
	0x55, 0x44, 0xdb, 0x0e, 0x79, 0x71, 0xdb, 0x61, 0x1d, 0x0a, 0xf1, 0x99, 0x85, 0xc7, 0xb1, 0xf6,
	0x28, 0x5f, 0x3c, 0x5a, 0x0b, 0xb6, 0x89, 0xe6, 0x1a, 0x55, 0x31, 0x85, 0x42, 0xaf, 0xd2, 0x2e,
	0xa0, 0xcb, 0x51, 0x30, 0x85, 0x9a, 0xda, 0xc1, 0xf3, 0x85, 0xf9, 0x9f, 0x97, 0xd0, 0xff, 0xf4,
	0xc3, 0x74, 0x05, 0xbb, 0xad, 0x8d, 0x6d, 0xb6, 0xad, 0xe3, 0x6d, 0xcd, 0xef, 0xb1, 0xe3, 0x2d,
	0x07, 0xdf, 0x5d, 0x71, 0x5b, 0xbd, 0x4d, 0x41, 0x5b, 0x80, 0xa1, 0x3b, 0x78, 0xef, 0x7e, 0xb3,
	0xc5, 0x56, 0xcd, 0x23, 0x4e, 0x50, 0x14, 0x2c, 0xcf, 0x80, 0x64, 0x79, 0x02, 0x6b, 0x47, 0xd1,
	0xb1, 0x84, 0xe6, 0x51, 0x05, 0xb5, 0x9d, 0xb5, 0x46, 0xb8, 0x66, 0x1e, 0x70, 0x82, 0x22, 0x7d,
	0xe2, 0x3e, 0xa0, 0x4f, 0x86, 0xf9, 0x13, 0x56, 0x94, 0x62, 0x7b, 0x47, 0x94, 0xd8, 0x5e, 0x69,
	0xef, 0x1a, 0x12, 0xf7, 0xae, 0x47, 0xd5, 0x6b, 0x75, 0x74, 0xe9, 0x38, 0xa6, 0x84, 0x70, 0xb2,
	0x38, 0xdf, 0x71, 0x31, 0xce, 0xd7, 0x86, 0xfc, 0x75, 0xd7, 0xdb, 0x0e, 0xe6, 0x1f, 0xf2, 0x1f,
	0x3d, 0x80, 0x99, 0xa4, 0x0e, 0xf0, 0x76, 0xa9, 0x4d, 0xbf, 0x0c, 0xc3, 0x3b, 0x06, 0xfb, 0xdb,
	0x01, 0x0c, 0xa1, 0xbd, 0x21, 0x7e, 0x25, 0x73, 0x23, 0x48, 0x8b, 0xb6, 0x1b, 0x6d, 0xac, 0xec,
	0xfa, 0x1e, 0xfa, 0x02, 0xbb, 0x41, 0xc9, 0xa8, 0x47, 0x5b, 0x8e, 0x11, 0x07, 0xf6, 0xc7, 0x20,
	0xbf, 0xeb, 0xb6, 0x5c, 0x4d, 0xd4, 0x5b, 0xaa, 0xce, 0x38, 0xf4, 0x2d, 0xb3, 0x38, 0x8f, 0x6f,
	0xd1, 0xac, 0x39, 0xde, 0x6e, 0x0a, 0x17, 0x2f, 0xd2, 0xed, 0x9e, 0x80, 0x8b, 0x4b, 0x06, 0x5c,
	0x30, 0xc1, 0xd1, 0x9d, 0x21, 0xb7, 0xab, 0xe8, 0xc5, 0xd9, 0x50, 0x2e, 0xd2, 0xa6, 0xe7, 0xc1,
	0x8a, 0xe6, 0x7d, 0x9a, 0x8b, 0x38, 0x10, 0x4d, 0x12, 0x23, 0x07, 0x2d, 0x9d, 0x0d, 0x98, 0xf8,
	0x64, 0x1b, 0xb7, 0xf6, 0xd8, 0x6e, 0x10, 0x55, 0xd0, 0x4e, 0x4d, 0x84, 0xb2, 0x3b, 0x92, 0x8b,
	0x27, 0x7b, 0xfd, 0x6d, 0x76, 0x3c, 0x1e, 0x86, 0x46, 0x09, 0xcf, 0x62, 0x59, 0x56, 0xed, 0xff,
	0x0f, 0x10, 0x7d, 0xbf, 0x56, 0x13, 0x9d, 0xa3, 0xb0, 0xeb, 0x08, 0xd0, 0xc6, 0xb7, 0x12, 0x2f,
	0x11, 0xb1, 0x3d, 0x7c, 0x76, 0x3a, 0xee, 0x8d, 0x37, 0xe9, 0x01, 0x6c, 0x65, 0xbb, 0x57, 0xb7,
	0xb1, 0xc4, 0xcf, 0x97, 0xe7, 0xe4, 0xcf, 0x97, 0x3f, 0x7e, 0x16, 0x86, 0x57, 0x2b, 0x57, 0x9d,
	0xb5, 0xa5, 0x4a, 0xd9, 0x1e, 0x83, 0xe1, 0xd5, 0xe5, 0xb5, 0xab, 0xcb, 0x0b, 0xce, 0xeb, 0x93,
	0x7d, 0xf6, 0x08, 0x0c, 0xb0, 0xbf, 0xd6, 0x95, 0x1f, 0x5c, 0x20, 0x16, 0x9b, 0x9d, 0xbd, 0xac,
	0xdb, 0x6f, 0xc0, 0x51, 0xfd, 0x37, 0x9a, 0xce, 0x4a, 0xcd, 0xd2, 0x7f, 0xc8, 0xa9, 0x28, 0x4a,
	0x4d, 0xf9, 0xd4, 0x3b, 0xea, 0xb3, 0x57, 0xe1, 0x70, 0xfc, 0x7b, 0x4c, 0xa7, 0x65, 0xbc, 0x31,
	0x80, 0xe2, 0x74, 0xe2, 0x97, 0x9d, 0x69, 0x42, 0xb8, 0x3e, 0x7b, 0x99, 0xa2, 0x55, 0x3e, 0x95,
	0x14, 0x47, 0x2b, 0x03, 0x14, 0x8f, 0xe9, 0x6f, 0x40, 0xa0, 0x3e, 0x7b, 0x0e, 0x0e, 0x29, 0x5f,
	0x0a, 0x3a, 0x95, 0x84, 0x8c, 0x3c, 0x2d, 0x4e, 0x88, 0x98, 0x88, 0x5b, 0xd5, 0x67, 0xbf, 0x02,
	0xb6, 0xe6, 0x23, 0x40, 0xb3, 0x49, 0x68, 0x02, 0x88, 0xe2, 0xa4, 0xfa, 0x5d, 0x44, 0xd4, 0x67,
	0xdf, 0x86, 0xa3, 0xfa, 0xcf, 0xfc, 0x9c, 0x4d, 0x42, 0x27, 0x00, 0xa5, 0x34, 0xb3, 0x04, 0xe3,
	0xf2, 0x27, 0x76, 0x4e, 0xca, 0xf8, 0xa4, 0x87, 0xc5, 0x29, 0x55, 0xab, 0x97, 0xdb, 0xf5, 0x3a,
	0x15, 0xbe, 0xad, 0xf9, 0x5a, 0x8f, 0xd2, 0xd2, 0x38, 0x44, 0x22, 0xbe, 0x75, 0x98, 0x4e, 0xff,
	0xee, 0xce, 0x13, 0xb1, 0x56, 0x27, 0x03, 0x17, 0x35, 0xd3, 0x2e, 0xea, 0xb3, 0xef, 0xc1, 0x05,
	0xc3, 0x6f, 0xec, 0x3c, 0x93, 0x22, 0x92, 0xc4, 0xb7, 0x12, 0xdb, 0x36, 0x0f, 0x63, 0xd2, 0x27,
	0x72, 0x8a, 0x32, 0x76, 0xf1, 0x99, 0x84, 0x23, 0xf4, 0xa6, 0x51, 0x9f, 0xfd, 0x59, 0x38, 0x95,
	0x9a, 0x3e, 0xff, 0xf1, 0x98, 0x78, 0x12, 0x61, 0x8b, 0x4f, 0xaa, 0x7c, 0xa6, 0x41, 0xa3, 0x3e,
	0xfb, 0xdb, 0x16, 0x9c, 0x33, 0xfa, 0x9e, 0xc0, 0x15, 0xbd, 0x66, 0xa6, 0xbd, 0x53, 0x7c, 0x46,
	0xc3, 0x4c, 0xe6, 0x5b, 0xa8, 0xcf, 0x7e, 0x0b, 0xce, 0xc5, 0x3d, 0x11, 0x11, 0x90, 0xcf, 0xba,
	0x17, 0x65, 0x9e, 0x92, 0xbd, 0x97, 0xe2, 0x25, 0x09, 0x32, 0xcd, 0xd1, 0x41, 0x7d, 0xf6, 0x26,
	0xcc, 0x64, 0x7c, 0x7a, 0xe0, 0xc9, 0x2c, 0xc3, 0x29, 0x42, 0x27, 0xea, 0xce, 0x6d, 0x38, 0x96,
	0xf0, 0xb1, 0x80, 0x73, 0x32, 0x7e, 0x3d, 0x54, 0x22, 0x5e, 0x1c, 0x24, 0x29, 0x56, 0xf3, 0xe9,
	0x9f, 0xd5, 0xa1, 0x55, 0x80, 0x8a, 0xe7, 0x55, 0xac, 0x5a, 0x30, 0xd4, 0x67, 0x6f, 0x07, 0xec,
	0xc7, 0x92, 0xea, 0x9f, 0x4b, 0xa6, 0x13, 0x41, 0x15, 0x2f, 0xa4, 0x11, 0x12, 0xd2, 0xe1, 0x53,
	0x4a, 0x09, 0x19, 0xeb, 0xcf, 0x69, 0xb5, 0x52, 0x81, 0x8a, 0x53, 0xd2, 0xc3, 0xa1, 0x3e, 0xfb,
	0x6d, 0x78, 0xcc, 0x34, 0x9f, 0xfc, 0xb3, 0x31, 0xd2, 0x26, 0xaf, 0x15, 0xd3, 0x32, 0xe1, 0xd3,
	0xbe, 0x2b, 0x24, 0x66, 0x8e, 0xbf, 0x90, 0x4a, 0x31, 0x84, 0x2b, 0x66, 0x7d, 0x58, 0x1f, 0xf5,
	0xd9, 0x2e, 0x95, 0xa8, 0x2e, 0x87, 0xfc, 0xb9, 0x2c, 0x22, 0x04, 0xca, 0x84, 0xc4, 0xeb, 0x64,
	0x11, 0xac, 0xc9, 0xf0, 0x8e, 0x64, 0x02, 0x3a, 0x18, 0x49, 0x48, 0x41, 0x1a, 0xe3, 0xe0, 0x60,
	0x11, 0xf5, 0xd9, 0x37, 0x61, 0x42, 0x4d, 0xdc, 0x3e, 0xad, 0x53, 0xb9, 0xf0, 0x71, 0x16, 0xc2,
	0x4f, 0xc2, 0x64, 0x2c, 0x15, 0xfb, 0x4c, 0x12, 0x46, 0xf6, 0x3c, 0x0b, 0xe5, 0x2b, 0x30, 0x19,
	0x4b, 0xae, 0x3e, 0x93, 0x34, 0xf5, 0xb0, 0xe7, 0x29, 0x86, 0x62, 0x32, 0x96, 0x07, 0x5d, 0xcb,
	0x9e, 0x80, 0x6b, 0x56, 0x3f, 0xba, 0x22, 0x08, 0xd4, 0x67, 0x7f, 0xc7, 0x82, 0xf3, 0x66, 0xee,
	0xf4, 0xd3, 0x09, 0x5a, 0x91, 0xf6, 0x92, 0x62, 0xfe, 0x0d, 0x3d, 0x77, 0xd4, 0x67, 0x3b, 0x30,
	0xa5, 0x4d, 0xa9, 0x8d, 0x92, 0xcd, 0x4a, 0x00, 0x93, 0xe6, 0xd3, 0x68, 0xf2, 0x4c, 0x2b, 0x3e,
	0x4d, 0x1c, 0x22, 0xcd, 0xc6, 0xea, 0x33, 0x45, 0xc7, 0x3d, 0xb8, 0x38, 0x50, 0xdc, 0xc6, 0x6a,
	0xc1, 0x50, 0x9f, 0xfd, 0x29, 0xea, 0x74, 0xaa, 0xf9, 0x96, 0xe3, 0x4e, 0xa7, 0x02, 0x51, 0x44,
	0x1a, 0x02, 0x0a, 0x0c, 0xea, 0xb3, 0x57, 0x02, 0x41, 0x2b, 0x49, 0x97, 0x51, 0x92, 0xea, 0x47,
	0x30, 0x7a, 0xc1, 0xd8, 0x4e, 0x30, 0xf5, 0xa8, 0x19, 0x94, 0xcf, 0x26, 0xa1, 0x14, 0x80, 0x12,
	0x70, 0x86, 0xd3, 0x64, 0x2c, 0x1f, 0xb2, 0x76, 0x9e, 0x51, 0xa1, 0x12, 0xbb, 0xf0, 0x35, 0x38,
	0x9e, 0x94, 0xc8, 0xf8, 0x7c, 0x06, 0x62, 0x6e, 0x02, 0x92, 0x30, 0x7f, 0x06, 0x4e, 0xa6, 0x25,
	0x20, 0xbe, 0x94, 0x6e, 0x06, 0x04, 0xd0, 0x44, 0x0a, 0x5b, 0xd4, 0x65, 0x4c, 0xce, 0x21, 0xfc,
	0xb8, 0x76, 0x5e, 0xd4, 0xc2, 0x16, 0x4f, 0x68, 0x6d, 0x39, 0xb7, 0xe2, 0x15, 0x98, 0x50, 0x77,
	0x31, 0xa7, 0x63, 0xb8, 0xc5, 0xc7, 0xc5, 0xd3, 0x1a, 0xd5, 0x13, 0x01, 0x98, 0x3d, 0x8b, 0x65,
	0x80, 0x9d, 0x51, 0x7d, 0x39, 0xf9, 0x79, 0xdc, 0x9e, 0xc5, 0xf2, 0xb8, 0x52, 0xbc, 0xe5, 0x0c,
	0xbc, 0xe5, 0x4c, 0xbc, 0xe5, 0x38, 0xde, 0x2f, 0x5a, 0x70, 0x3a, 0xeb, 0xe3, 0x76, 0x1f, 0x51,
	0x54, 0x26, 0x1d, 0xbc, 0xf8, 0x54, 0xcc, 0x3c, 0xa7, 0xbf, 0x10, 0xe3, 0xa2, 0xdc, 0x19, 0x17,
	0xe5, 0x4e, 0xb9, 0x28, 0x27, 0x70, 0xf1, 0x75, 0x0b, 0x90, 0xc1, 0x07, 0xd9, 0x3e, 0x9a, 0xc4,
	0x48, 0xd2, 0x1b, 0xc5, 0x2b, 0xc9, 0xbc, 0x24, 0xbd, 0xc3, 0xa7, 0x46, 0x35, 0x16, 0x7b, 0x26,
	0x4e, 0x5b, 0x7c, 0xae, 0x99, 0x1a, 0x15, 0x08, 0x0d, 0xde, 0x32, 0xf6, 0x53, 0xf1, 0x96, 0xb1,
	0x9f, 0x81, 0xb7, 0x8c, 0x75, 0xfc, 0x96, 0x70, 0x3d, 0x15, 0x6f, 0x09, 0xd7, 0x33, 0xf0, 0x96,
	0x70, 0x5d, 0x37, 0x67, 0xf2, 0xaf, 0x3e, 0xa4, 0xce, 0x99, 0x0c, 0x26, 0xd1, 0xc8, 0x34, 0xa0,
	0x90, 0x98, 0xc3, 0xf7, 0x82, 0x6e, 0x05, 0x14, 0x87, 0x2b, 0x5e, 0x54, 0x71, 0x27, 0x41, 0x86,
	0x73, 0xaa, 0x86, 0x58, 0x7c, 0x4e, 0xd5, 0x50, 0xd2, 0xcd, 0xa9, 0x3a, 0x32, 0x57, 0xbe, 0x3a,
	0x1b, 0x6e, 0xca, 0x95, 0xe6, 0x49, 0x23, 0x13, 0xb3, 0xad, 0x5e, 0x48, 0x99, 0x06, 0x04, 0xb8,
	0x78, 0x23, 0x93, 0x20, 0x59, 0x23, 0xf5, 0x09, 0x4d, 0xcf, 0xc6, 0x0c, 0xa0, 0x86, 0xd2, 0x79,
	0x8d, 0x15, 0xd4, 0x92, 0x09, 0x5d, 0x46, 0x21, 0x1b, 0xe9, 0x4c, 0x4a, 0x73, 0x08, 0xf2, 0xd9,
	0xd4, 0x66, 0x30, 0xbc, 0x77, 0x94, 0x49, 0x53, 0x48, 0xf2, 0x79, 0x3e, 0x1d, 0x3d, 0x07, 0x2b,
	0x3e, 0x96, 0x45, 0x85, 0x03, 0x86, 0x93, 0x8f, 0x94, 0x2c, 0x33, 0x3e, 0xf9, 0x88, 0x8f, 0xb5,
	0x93, 0x8f, 0x08, 0x40, 0x91, 0x1e, 0xd5, 0x67, 0xaa, 0x54, 0x3b, 0x40, 0x07, 0x54, 0xd4, 0xed,
	0x04, 0xa3, 0x3e, 0xfb, 0x37, 0xa1, 0x98, 0x92, 0x03, 0xf3, 0xa2, 0x66, 0xeb, 0xac, 0x23, 0xf4,
	0x6b, 0x70, 0x44, 0x97, 0xde, 0xf1, 0x4c, 0x92, 0x30, 0x42, 0x90, 0xe2, 0xd9, 0x64, 0x81, 0x84,
	0x40, 0xac, 0x5b, 0x93, 0x92, 0xfd, 0x9d, 0x4f, 0x22, 0x22, 0x81, 0xc5, 0xbb, 0x35, 0x01, 0x90,
	0x2d, 0xe7, 0x13, 0xb2, 0xe9, 0x9d, 0xd3, 0x79, 0x46, 0x31, 0x21, 0xc5, 0x96, 0xf3, 0x7a, 0x38,
	0xba, 0x06, 0x2d, 0x24, 0x26, 0xa2, 0xbb, 0x90, 0xb6, 0x87, 0x13, 0xc1, 0x25, 0x75, 0xc9, 0xa2,
	0x32, 0xc0, 0x34, 0xbe, 0x86, 0x29, 0xaa, 0x0d, 0x98, 0x4e, 0xcf, 0x99, 0xf7, 0x84, 0x46, 0x7f,
	0x3a, 0xe5, 0xb7, 0x14, 0xe6, 0x26, 0xf2, 0xb6, 0x3c, 0xbb, 0xa0, 0x13, 0x34, 0x79, 0x52, 0x2c,
	0xea, 0x85, 0x4b, 0xbf, 0xcb, 0x49, 0x04, 0x7a, 0x38, 0x7e, 0xc8, 0x71, 0x3a, 0xc9, 0x9f, 0x0d,
	0x36, 0x3e, 0xcf, 0xe8, 0x71, 0x0a, 0x20, 0x4c, 0xa0, 0xb1, 0xec, 0x6c, 0x33, 0x29, 0xfa, 0x90,
	0xd2, 0xd6, 0x75, 0x98, 0xd2, 0xe6, 0x45, 0x43, 0x69, 0xe8, 0xd8, 0x93, 0xe2, 0xb9, 0x54, 0xe5,
	0x8a, 0xd6, 0xf7, 0xaf, 0xd3, 0x13, 0x0a, 0x85, 0xc0, 0xe9, 0x44, 0xeb, 0xc4, 0xb1, 0x9f, 0x49,
	0xb1, 0x4f, 0x21, 0xea, 0x4d, 0xba, 0x39, 0xa3, 0xcb, 0xe4, 0x75, 0x2e, 0xc5, 0xfa, 0x85, 0x50,
	0xda, 0xed, 0x2e, 0x1d, 0xb6, 0xcf, 0xc0, 0x94, 0x36, 0xc7, 0x14, 0x4a, 0xa1, 0x12, 0x74, 0xe9,
	0xb9, 0x54, 0x1a, 0x01, 0x26, 0xe6, 0x90, 0x8b, 0x39, 0x52, 0x74, 0x0e, 0xb9, 0x94, 0x43, 0x45,
	0xeb, 0x90, 0x4b, 0x10, 0xd1, 0xae, 0x75, 0x76, 0x06, 0xa2, 0x2b, 0xc9, 0x1d, 0x92, 0xf4, 0x8e,
	0x76, 0xd7, 0x3a, 0xf3, 0x2d, 0xd4, 0x67, 0x7f, 0xcf, 0x82, 0x0b, 0x86, 0x29, 0x88, 0x9e, 0x31,
	0xb1, 0x3d, 0xea, 0x5b, 0xc5, 0xff, 0xa7, 0xf7, 0xa5, 0xb2, 0xde, 0x43, 0x7d, 0xf6, 0x7d, 0x38,
	0x99, 0x96, 0xbb, 0xe8, 0x52, 0x86, 0xda, 0x0a, 0x3c, 0x3c, 0x91, 0xa9, 0xc0, 0x12, 0xe1, 0x1f,
	0x5a, 0x74, 0x43, 0xd5, 0x28, 0xed, 0xcf, 0xb3, 0x26, 0x7d, 0x15, 0x3f, 0x64, 0x78, 0xce, 0xac,
	0xbb, 0x74, 0xe7, 0x0c, 0x5f, 0xb6, 0xe0, 0x31, 0xed, 0xb9, 0xbe, 0xe6, 0xac, 0xe1, 0x09, 0xdd,
	0x59, 0x43, 0x42, 0x38, 0x80, 0x72, 0x0a, 0x93, 0x11, 0x3c, 0x40, 0x8f, 0x27, 0xc7, 0xe5, 0x1c,
	0x1f, 0x27, 0x35, 0xbe, 0x48, 0xf0, 0x50, 0x6b, 0xf5, 0x6c, 0x17, 0x0a, 0x89, 0x79, 0x3a, 0x94,
	0xa9, 0x2e, 0x09, 0xae, 0x38, 0xad, 0x22, 0x96, 0xf3, 0x6f, 0xfc, 0xd4, 0x82, 0x17, 0xf7, 0x97,
	0x11, 0xe3, 0x13, 0x66, 0x8c, 0x18, 0x21, 0xcb, 0xe2, 0xf6, 0x3d, 0x0b, 0x3e, 0xda, 0x71, 0x16,
	0x8b, 0x97, 0x8c, 0x19, 0xec, 0x8a, 0x27, 0x0f, 0xce, 0x64, 0xe7, 0xa2, 0x78, 0xca, 0x98, 0x07,
	0x33, 0xa2, 0xdf, 0xb7, 0xe0, 0x99, 0xae, 0xf2, 0x4c, 0xcc, 0xef, 0xbf, 0xb7, 0xb2, 0x78, 0x7b,
	0x1b, 0x1e, 0x33, 0xcd, 0x14, 0xf1, 0x6c, 0x57, 0x5d, 0x93, 0xc5, 0xc0, 0xe7, 0xe0, 0xbc, 0x59,
	0xfa, 0x87, 0xa7, 0xbb, 0x10, 0x46, 0x16, 0xf1, 0xb5, 0x30, 0xb9, 0x92, 0xb4, 0x7f, 0xa1, 0xb8,
	0xf5, 0x1a, 0x90, 0xb8, 0x5b, 0xaf, 0x01, 0x62, 0xeb, 0x06, 0x5d, 0x4a, 0x82, 0x0c, 0x02, 0x65,
	0xec, 0x67, 0x13, 0x60, 0xdb, 0x19, 0x1a, 0x02, 0x25, 0x5c, 0xcf, 0x22, 0x50, 0xc2, 0xf5, 0x6c,
	0x02, 0x6c, 0x5f, 0xe3, 0x53, 0x60, 0x6b, 0x3e, 0xfc, 0x32, 0x9b, 0xb5, 0x30, 0x8f, 0x6f, 0x80,
	0xc7, 0x61, 0x50, 0xdf, 0x95, 0x5f, 0xe4, 0x61, 0x82, 0x07, 0x68, 0x79, 0x5b, 0x15, 0xdc, 0xba,
	0x87, 0x5b, 0xf6, 0x55, 0x38, 0x5e, 0xd9, 0xd6, 0xc7, 0xcb, 0x68, 0x42, 0x0f, 0x12, 0x37, 0x4f,
	0x4a, 0x30, 0x51, 0x51, 0x22, 0x28, 0xd4, 0x8d, 0x56, 0x21, 0xa8, 0x21, 0x09, 0x4b, 0x05, 0xa6,
	0x2a, 0xdb, 0x9a, 0x60, 0x8c, 0xb3, 0x3a, 0x54, 0x4a, 0xbc, 0x6c, 0x22, 0xd2, 0x1d, 0xb8, 0xa8,
	0xb0, 0x96, 0x1c, 0x2d, 0x71, 0x29, 0x95, 0x90, 0x78, 0x99, 0x26, 0x91, 0xdc, 0x75, 0x28, 0x56,
	0x92, 0xd7, 0x36, 0x9d, 0xc8, 0x74, 0x0e, 0xc6, 0x02, 0xc6, 0xe9, 0x2a, 0x66, 0x3a, 0x9e, 0xfd,
	0x49, 0x6c, 0xbf, 0x2e, 0xf2, 0xa6, 0x02, 0x47, 0x74, 0x71, 0x5a, 0x8a, 0xc2, 0x6a, 0x40, 0x8a,
	0x49, 0xc9, 0xac, 0x51, 0xdf, 0xfc, 0xd8, 0x3f, 0x7d, 0x30, 0x63, 0xfd, 0xcb, 0x07, 0x33, 0xd6,
	0x7f, 0x7e, 0x30, 0x63, 0xad, 0x0f, 0xee, 0xb6, 0x9a, 0x7e, 0xf3, 0xe9, 0xff, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0x54, 0x73, 0xaa, 0x61, 0x38, 0xa9, 0x00, 0x00,
}
