// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: messagedb.proto

package pbmessagedb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageDbClient is the client API for MessageDb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageDbClient interface {
	//=========================================== UserMsg =========================================================
	// 插入单条 usermsg 内容
	InsertOrUpdateUserMsg(ctx context.Context, in *ReqInsertOrUpdateUserMsg, opts ...grpc.CallOption) (*DialogIsCreated, error)
	// 查询转发消息
	GetForwardUserMsg(ctx context.Context, in *ReqGetForwardUserMsg, opts ...grpc.CallOption) (*ForWardUserMsgList, error)
	// 查询历史消息
	GetUserMsgHistory(ctx context.Context, in *ReqGetUserMsgHistory, opts ...grpc.CallOption) (*UserMsgList, error)
	// 查询用户消息UUID
	GetUserMsgUUID(ctx context.Context, in *ReqGetUserMsgUUID, opts ...grpc.CallOption) (*UUID, error)
	// 查询用户消息 通过 UUID
	GetUserMsgIdByUUID(ctx context.Context, in *ReqGetUserMsgIdByUUID, opts ...grpc.CallOption) (*MsgId, error)
	// 获取 消息UUID数组
	GetUserMsgListByUUIDs(ctx context.Context, in *ReqGetUserMsgListByUUIDs, opts ...grpc.CallOption) (*UserMsgList, error)
	// 删除用户信息
	DeleteUserMsg(ctx context.Context, in *ReqDeleteUserMsg, opts ...grpc.CallOption) (*ReplyNull, error)
	// 批量删除用户信息
	BatchDeleteUserMsg(ctx context.Context, in *ReqBatchDeleteUserMsg, opts ...grpc.CallOption) (*ReplyNull, error)
	// 查询一条用户信息通过ID
	GetOneUserMsgByUserIdAndMsgId(ctx context.Context, in *ReqGetOneUserMsgByUserIdAndMsgId, opts ...grpc.CallOption) (*UserMsg, error)
	// 删除信息
	DeleteUserMsgByUserIdAndWithIdAndEncry(ctx context.Context, in *ReqDeleteUserMsgByUserIdAndWithIdAndEncry, opts ...grpc.CallOption) (*ReplyNull, error)
	// 清除历史  用于清楚历史每次从最底部删除消息 每次删除100条 如果仍然有消息将最新的消息id返回 如没有消息将0返回 count=本次删除的消息条数
	ClearHistory(ctx context.Context, in *ReqClearHistory, opts ...grpc.CallOption) (*MsgIDList, error)
	// 查询打电话消息历史记录
	GetMessageHistoryPageByMedia(ctx context.Context, in *ReqGetMessageHistoryPageByMedia, opts ...grpc.CallOption) (*ReplyGetMessageHistoryPageByMedia, error)
	//=========================================== UserMediaMessageStatistics =========================================================
	// 根据userId、withId、withType、media获取UserMediaMessageStatistics
	GetUserMediaMessageStatisticsByMedia(ctx context.Context, in *ReqGetUserMediaMessageStatisticsByMedia, opts ...grpc.CallOption) (*ReplyGetUserMediaMessageStatisticsByMedia, error)
	// Begin added by six xionger at 2020-03-03 for messages.search
	SearchUserMediaMsgStatisticsByFilter(ctx context.Context, in *ReqSearchUserMediaMsgByFilter, opts ...grpc.CallOption) (*RespSearchUserMediaMsgByFilter, error)
	//=========================================== UserDialogAndMsg =========================================================
	// 插入或者更新 UserDialog
	InsertOrUpdateUserDialogAndMsg(ctx context.Context, in *ReqInsertOrUpdateUserDialogAndMsg, opts ...grpc.CallOption) (*ReplyNull, error)
	// 更新自己的dialog
	UpdateSelfDialogAndMsg(ctx context.Context, in *ReqUpdateSelfDialogAndMsg, opts ...grpc.CallOption) (*ReplyNull, error)
	// 自增dialog的unread +1 如果dialog不存在 则返回
	UpdateDialogAddUnread(ctx context.Context, in *ReqUpdateDialogAddUnread, opts ...grpc.CallOption) (*ReplyUpdateDialogAddUnread, error)
	// 更新对话框 清除草稿
	UpdateDialogClearDraft(ctx context.Context, in *ReqUpdateDialogClearDraft, opts ...grpc.CallOption) (*ReplyUpdateDialogClearDraft, error)
	// 获取用户总未读数
	GetUserDialogAllUnread(ctx context.Context, in *ReqGetUserDialogAllUnread, opts ...grpc.CallOption) (*ReplyGetUserDialogAllUnread, error)
	// 获取单条 dialog 记录
	GetDialogAndMsgByUserIdAndWithIdAndType(ctx context.Context, in *ReqGetDialogAndMsgByUserIdAndWithIdAndType, opts ...grpc.CallOption) (*UserDialogAndMsg, error)
	// 获取 UserDialogList
	GetDialogAndMsgsByUserId(ctx context.Context, in *ReqGetDialogAndMsgsByUserId, opts ...grpc.CallOption) (*UserDialogAndMsgList, error)
	// 分页获取
	GetDialogAndMsgsByPage(ctx context.Context, in *ReqGetDialogAndMsgsByPage, opts ...grpc.CallOption) (*UserDialogAndMsgList, error)
	// 消息接收方更新dialog 更新dialog readin = readout = topMsgID unread = 0
	ReadSelfDialogAndMsg(ctx context.Context, in *ReqReadSelfDialogAndMsg, opts ...grpc.CallOption) (*DialogTopMessage, error)
	// 更新自己对话框的readin = topMsgId 和 unread = 0
	UpdateReadinbox(ctx context.Context, in *ReqUpdateReadinbox, opts ...grpc.CallOption) (*DialogTopMessage, error)
	// 更新别人的Readoutbox readOut = topMsgID && unread = 0
	UpdateReadoutbox(ctx context.Context, in *ReqUpdateReadoutbox, opts ...grpc.CallOption) (*DialogTopMessage, error)
	// 删除对话框消息，对应的 对话框盒子 tidb中的数据都删除
	DeleteUserDialog(ctx context.Context, in *ReqDeleteUserDialog, opts ...grpc.CallOption) (*ReplyNull, error)
	UpdateUserDialog(ctx context.Context, in *ReqUpdateUserDialog, opts ...grpc.CallOption) (*ReplyUpdateUserDialog, error)
	// Begin added by six xionger at 2020-05-15 for 取单聊对话框消息未读数
	GetDialogUnreadCountByUserIdAndWithId(ctx context.Context, in *ReqGetDialogUnreadCountByUserIdAndWithId, opts ...grpc.CallOption) (*RespGetDialogUnreadCountByUserIdAndWithId, error)
	// -------------------------------- pinged dialog 置顶对话框 ----------------------------------
	// 更新对话框为置顶对话框
	UpdateDialogToPinged(ctx context.Context, in *ReqUpdateDialogToPinged, opts ...grpc.CallOption) (*ReplyNull, error)
	// 取消置顶
	CancelPingedDialog(ctx context.Context, in *ReqCancelPingedDialog, opts ...grpc.CallOption) (*ReplyNull, error)
	// 获取置顶对话框
	GetPingedDialogAndMsg(ctx context.Context, in *ReqGetPingedDialogAndMsg, opts ...grpc.CallOption) (*ReplyGetPingedDialogAndMsg, error)
	// 获取最近操作的对话框 limit 个
	GetLastLimitDialog(ctx context.Context, in *ReqGetLastLimitDialog, opts ...grpc.CallOption) (*ReplyGetLastLimitDialog, error)
	// -------------------------------- channel 使用 ----------------------------------
	// channel 使用 readInBox_maxId 自增1
	UpdateReadInBoxMaxId(ctx context.Context, in *ReqUpdateReadInBoxMaxId, opts ...grpc.CallOption) (*ReplyNull, error)
	// channel 使用 readOutBox_maxId 自增1
	UpdateReadOutBoxMaxId(ctx context.Context, in *ReqUpdateReadOutBoxMaxId, opts ...grpc.CallOption) (*ReplyNull, error)
	// 更新自己对话框的readin 和 unread
	UpdateChannelReadinbox(ctx context.Context, in *ReqUpdateChannelReadinbox, opts ...grpc.CallOption) (*ReplyNull, error)
	// 更新别人的Readoutbox
	UpdateChannelReadoutbox(ctx context.Context, in *ReqUpdateChannelReadoutbox, opts ...grpc.CallOption) (*ReplyNull, error)
	// 删除超级群的所有对话框
	DeleteUserDialogByChannelId(ctx context.Context, in *ReqDeleteUserDialogByChannelId, opts ...grpc.CallOption) (*ReplyNull, error)
	// 获取某用户的所有超级群对话框
	GetUserChannelDialogByUserId(ctx context.Context, in *ReqGetUserChannelDialogByUserId, opts ...grpc.CallOption) (*UserDialogList, error)
	//=========================================== msg_random(发消息去重) =========================================================
	// 获取random 状态 如果有则返回true 没有就插入缓存 并且 返回false
	GetRandomStatus(ctx context.Context, in *ReqGetRandomStatus, opts ...grpc.CallOption) (*ReplyGetRandomStatus, error)
	// 设置超级群消息
	SetSuperGroupMsg(ctx context.Context, in *ReqSetSuperGroupMsg, opts ...grpc.CallOption) (*ReplySetSuperGroupMsg, error)
	// 获取超级群消息
	GetSuperGroupMsg(ctx context.Context, in *ReqGetSuperGroupMsg, opts ...grpc.CallOption) (*ReplyGetSuperGroupMsg, error)
	// 设置messagedb.user_dialog.unread_metions_count
	UserDialogSetUnreadMetionsCount(ctx context.Context, in *ReqUserDialogSetUnreadMetionsCount, opts ...grpc.CallOption) (*ReplyUserDialogSetUnreadMetionsCount, error)
	// 获取messagedb.user_dialog.unread_metions_count
	UserDialogGetUnreadMetionsCount(ctx context.Context, in *ReqUserDialogGetUnreadMetionsCount, opts ...grpc.CallOption) (*ReplyUserDialogGetUnreadMetionsCount, error)
	// 改变messagedb.user_dialog.unread_metions_count
	UserDialogChangeUnreadMetionsCount(ctx context.Context, in *ReqUserDialogChangeUnreadMetionsCount, opts ...grpc.CallOption) (*ReplyUserDialogChangeUnreadMetionsCount, error)
	// add for messagedb.user_message_at
	UserMessageAtAdd(ctx context.Context, in *ReqUserMessageAtAdd, opts ...grpc.CallOption) (*ReplyUserMessageAtAdd, error)
	// get for messagedb.user_message_at
	UserMessageAtGet(ctx context.Context, in *ReqUserMessageAtGet, opts ...grpc.CallOption) (*ReplyUserMessageAtGet, error)
	// delete for messagedb.user_message_at
	UserMessageAtDel(ctx context.Context, in *ReqUserMessageAtDel, opts ...grpc.CallOption) (*ReplyUserMessageAtDel, error)
	// 更新对话框为归档对话框 105
	UpdateDialogToFolder(ctx context.Context, in *ReqUpdateDialogToFolder, opts ...grpc.CallOption) (*ReplyNull, error)
	// Begin added by MarkLi at 2020-07-17 for 存取MsgId和SerialCode映射接口
	InsertMsgIdSerialCodeMap(ctx context.Context, in *ReqInsertMsgIdSerialCodeMap, opts ...grpc.CallOption) (*ReplyInsertMsgIdSerialCodeMap, error)
	GetMsgIdSerialCodeMap(ctx context.Context, in *ReqGetMsgIdSerialCodeMap, opts ...grpc.CallOption) (*ReplyGetMsgIdSerialCodeMap, error)
}

type messageDbClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageDbClient(cc grpc.ClientConnInterface) MessageDbClient {
	return &messageDbClient{cc}
}

func (c *messageDbClient) InsertOrUpdateUserMsg(ctx context.Context, in *ReqInsertOrUpdateUserMsg, opts ...grpc.CallOption) (*DialogIsCreated, error) {
	out := new(DialogIsCreated)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/InsertOrUpdateUserMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetForwardUserMsg(ctx context.Context, in *ReqGetForwardUserMsg, opts ...grpc.CallOption) (*ForWardUserMsgList, error) {
	out := new(ForWardUserMsgList)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetForwardUserMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserMsgHistory(ctx context.Context, in *ReqGetUserMsgHistory, opts ...grpc.CallOption) (*UserMsgList, error) {
	out := new(UserMsgList)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetUserMsgHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserMsgUUID(ctx context.Context, in *ReqGetUserMsgUUID, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetUserMsgUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserMsgIdByUUID(ctx context.Context, in *ReqGetUserMsgIdByUUID, opts ...grpc.CallOption) (*MsgId, error) {
	out := new(MsgId)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetUserMsgIdByUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserMsgListByUUIDs(ctx context.Context, in *ReqGetUserMsgListByUUIDs, opts ...grpc.CallOption) (*UserMsgList, error) {
	out := new(UserMsgList)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetUserMsgListByUUIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) DeleteUserMsg(ctx context.Context, in *ReqDeleteUserMsg, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/DeleteUserMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) BatchDeleteUserMsg(ctx context.Context, in *ReqBatchDeleteUserMsg, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/BatchDeleteUserMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetOneUserMsgByUserIdAndMsgId(ctx context.Context, in *ReqGetOneUserMsgByUserIdAndMsgId, opts ...grpc.CallOption) (*UserMsg, error) {
	out := new(UserMsg)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetOneUserMsgByUserIdAndMsgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) DeleteUserMsgByUserIdAndWithIdAndEncry(ctx context.Context, in *ReqDeleteUserMsgByUserIdAndWithIdAndEncry, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/DeleteUserMsgByUserIdAndWithIdAndEncry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) ClearHistory(ctx context.Context, in *ReqClearHistory, opts ...grpc.CallOption) (*MsgIDList, error) {
	out := new(MsgIDList)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/ClearHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetMessageHistoryPageByMedia(ctx context.Context, in *ReqGetMessageHistoryPageByMedia, opts ...grpc.CallOption) (*ReplyGetMessageHistoryPageByMedia, error) {
	out := new(ReplyGetMessageHistoryPageByMedia)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetMessageHistoryPageByMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserMediaMessageStatisticsByMedia(ctx context.Context, in *ReqGetUserMediaMessageStatisticsByMedia, opts ...grpc.CallOption) (*ReplyGetUserMediaMessageStatisticsByMedia, error) {
	out := new(ReplyGetUserMediaMessageStatisticsByMedia)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetUserMediaMessageStatisticsByMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) SearchUserMediaMsgStatisticsByFilter(ctx context.Context, in *ReqSearchUserMediaMsgByFilter, opts ...grpc.CallOption) (*RespSearchUserMediaMsgByFilter, error) {
	out := new(RespSearchUserMediaMsgByFilter)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/SearchUserMediaMsgStatisticsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) InsertOrUpdateUserDialogAndMsg(ctx context.Context, in *ReqInsertOrUpdateUserDialogAndMsg, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/InsertOrUpdateUserDialogAndMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateSelfDialogAndMsg(ctx context.Context, in *ReqUpdateSelfDialogAndMsg, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UpdateSelfDialogAndMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateDialogAddUnread(ctx context.Context, in *ReqUpdateDialogAddUnread, opts ...grpc.CallOption) (*ReplyUpdateDialogAddUnread, error) {
	out := new(ReplyUpdateDialogAddUnread)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UpdateDialogAddUnread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateDialogClearDraft(ctx context.Context, in *ReqUpdateDialogClearDraft, opts ...grpc.CallOption) (*ReplyUpdateDialogClearDraft, error) {
	out := new(ReplyUpdateDialogClearDraft)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UpdateDialogClearDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserDialogAllUnread(ctx context.Context, in *ReqGetUserDialogAllUnread, opts ...grpc.CallOption) (*ReplyGetUserDialogAllUnread, error) {
	out := new(ReplyGetUserDialogAllUnread)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetUserDialogAllUnread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetDialogAndMsgByUserIdAndWithIdAndType(ctx context.Context, in *ReqGetDialogAndMsgByUserIdAndWithIdAndType, opts ...grpc.CallOption) (*UserDialogAndMsg, error) {
	out := new(UserDialogAndMsg)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetDialogAndMsgByUserIdAndWithIdAndType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetDialogAndMsgsByUserId(ctx context.Context, in *ReqGetDialogAndMsgsByUserId, opts ...grpc.CallOption) (*UserDialogAndMsgList, error) {
	out := new(UserDialogAndMsgList)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetDialogAndMsgsByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetDialogAndMsgsByPage(ctx context.Context, in *ReqGetDialogAndMsgsByPage, opts ...grpc.CallOption) (*UserDialogAndMsgList, error) {
	out := new(UserDialogAndMsgList)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetDialogAndMsgsByPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) ReadSelfDialogAndMsg(ctx context.Context, in *ReqReadSelfDialogAndMsg, opts ...grpc.CallOption) (*DialogTopMessage, error) {
	out := new(DialogTopMessage)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/ReadSelfDialogAndMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateReadinbox(ctx context.Context, in *ReqUpdateReadinbox, opts ...grpc.CallOption) (*DialogTopMessage, error) {
	out := new(DialogTopMessage)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UpdateReadinbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateReadoutbox(ctx context.Context, in *ReqUpdateReadoutbox, opts ...grpc.CallOption) (*DialogTopMessage, error) {
	out := new(DialogTopMessage)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UpdateReadoutbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) DeleteUserDialog(ctx context.Context, in *ReqDeleteUserDialog, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/DeleteUserDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateUserDialog(ctx context.Context, in *ReqUpdateUserDialog, opts ...grpc.CallOption) (*ReplyUpdateUserDialog, error) {
	out := new(ReplyUpdateUserDialog)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UpdateUserDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetDialogUnreadCountByUserIdAndWithId(ctx context.Context, in *ReqGetDialogUnreadCountByUserIdAndWithId, opts ...grpc.CallOption) (*RespGetDialogUnreadCountByUserIdAndWithId, error) {
	out := new(RespGetDialogUnreadCountByUserIdAndWithId)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetDialogUnreadCountByUserIdAndWithId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateDialogToPinged(ctx context.Context, in *ReqUpdateDialogToPinged, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UpdateDialogToPinged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) CancelPingedDialog(ctx context.Context, in *ReqCancelPingedDialog, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/CancelPingedDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetPingedDialogAndMsg(ctx context.Context, in *ReqGetPingedDialogAndMsg, opts ...grpc.CallOption) (*ReplyGetPingedDialogAndMsg, error) {
	out := new(ReplyGetPingedDialogAndMsg)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetPingedDialogAndMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetLastLimitDialog(ctx context.Context, in *ReqGetLastLimitDialog, opts ...grpc.CallOption) (*ReplyGetLastLimitDialog, error) {
	out := new(ReplyGetLastLimitDialog)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetLastLimitDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateReadInBoxMaxId(ctx context.Context, in *ReqUpdateReadInBoxMaxId, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UpdateReadInBoxMaxId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateReadOutBoxMaxId(ctx context.Context, in *ReqUpdateReadOutBoxMaxId, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UpdateReadOutBoxMaxId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateChannelReadinbox(ctx context.Context, in *ReqUpdateChannelReadinbox, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UpdateChannelReadinbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateChannelReadoutbox(ctx context.Context, in *ReqUpdateChannelReadoutbox, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UpdateChannelReadoutbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) DeleteUserDialogByChannelId(ctx context.Context, in *ReqDeleteUserDialogByChannelId, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/DeleteUserDialogByChannelId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetUserChannelDialogByUserId(ctx context.Context, in *ReqGetUserChannelDialogByUserId, opts ...grpc.CallOption) (*UserDialogList, error) {
	out := new(UserDialogList)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetUserChannelDialogByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetRandomStatus(ctx context.Context, in *ReqGetRandomStatus, opts ...grpc.CallOption) (*ReplyGetRandomStatus, error) {
	out := new(ReplyGetRandomStatus)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetRandomStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) SetSuperGroupMsg(ctx context.Context, in *ReqSetSuperGroupMsg, opts ...grpc.CallOption) (*ReplySetSuperGroupMsg, error) {
	out := new(ReplySetSuperGroupMsg)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/SetSuperGroupMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetSuperGroupMsg(ctx context.Context, in *ReqGetSuperGroupMsg, opts ...grpc.CallOption) (*ReplyGetSuperGroupMsg, error) {
	out := new(ReplyGetSuperGroupMsg)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetSuperGroupMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UserDialogSetUnreadMetionsCount(ctx context.Context, in *ReqUserDialogSetUnreadMetionsCount, opts ...grpc.CallOption) (*ReplyUserDialogSetUnreadMetionsCount, error) {
	out := new(ReplyUserDialogSetUnreadMetionsCount)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UserDialogSetUnreadMetionsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UserDialogGetUnreadMetionsCount(ctx context.Context, in *ReqUserDialogGetUnreadMetionsCount, opts ...grpc.CallOption) (*ReplyUserDialogGetUnreadMetionsCount, error) {
	out := new(ReplyUserDialogGetUnreadMetionsCount)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UserDialogGetUnreadMetionsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UserDialogChangeUnreadMetionsCount(ctx context.Context, in *ReqUserDialogChangeUnreadMetionsCount, opts ...grpc.CallOption) (*ReplyUserDialogChangeUnreadMetionsCount, error) {
	out := new(ReplyUserDialogChangeUnreadMetionsCount)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UserDialogChangeUnreadMetionsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UserMessageAtAdd(ctx context.Context, in *ReqUserMessageAtAdd, opts ...grpc.CallOption) (*ReplyUserMessageAtAdd, error) {
	out := new(ReplyUserMessageAtAdd)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UserMessageAtAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UserMessageAtGet(ctx context.Context, in *ReqUserMessageAtGet, opts ...grpc.CallOption) (*ReplyUserMessageAtGet, error) {
	out := new(ReplyUserMessageAtGet)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UserMessageAtGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UserMessageAtDel(ctx context.Context, in *ReqUserMessageAtDel, opts ...grpc.CallOption) (*ReplyUserMessageAtDel, error) {
	out := new(ReplyUserMessageAtDel)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UserMessageAtDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) UpdateDialogToFolder(ctx context.Context, in *ReqUpdateDialogToFolder, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/UpdateDialogToFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) InsertMsgIdSerialCodeMap(ctx context.Context, in *ReqInsertMsgIdSerialCodeMap, opts ...grpc.CallOption) (*ReplyInsertMsgIdSerialCodeMap, error) {
	out := new(ReplyInsertMsgIdSerialCodeMap)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/InsertMsgIdSerialCodeMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDbClient) GetMsgIdSerialCodeMap(ctx context.Context, in *ReqGetMsgIdSerialCodeMap, opts ...grpc.CallOption) (*ReplyGetMsgIdSerialCodeMap, error) {
	out := new(ReplyGetMsgIdSerialCodeMap)
	err := c.cc.Invoke(ctx, "/messagedb.MessageDb/GetMsgIdSerialCodeMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageDbServer is the server API for MessageDb service.
// All implementations must embed UnimplementedMessageDbServer
// for forward compatibility
type MessageDbServer interface {
	//=========================================== UserMsg =========================================================
	// 插入单条 usermsg 内容
	InsertOrUpdateUserMsg(context.Context, *ReqInsertOrUpdateUserMsg) (*DialogIsCreated, error)
	// 查询转发消息
	GetForwardUserMsg(context.Context, *ReqGetForwardUserMsg) (*ForWardUserMsgList, error)
	// 查询历史消息
	GetUserMsgHistory(context.Context, *ReqGetUserMsgHistory) (*UserMsgList, error)
	// 查询用户消息UUID
	GetUserMsgUUID(context.Context, *ReqGetUserMsgUUID) (*UUID, error)
	// 查询用户消息 通过 UUID
	GetUserMsgIdByUUID(context.Context, *ReqGetUserMsgIdByUUID) (*MsgId, error)
	// 获取 消息UUID数组
	GetUserMsgListByUUIDs(context.Context, *ReqGetUserMsgListByUUIDs) (*UserMsgList, error)
	// 删除用户信息
	DeleteUserMsg(context.Context, *ReqDeleteUserMsg) (*ReplyNull, error)
	// 批量删除用户信息
	BatchDeleteUserMsg(context.Context, *ReqBatchDeleteUserMsg) (*ReplyNull, error)
	// 查询一条用户信息通过ID
	GetOneUserMsgByUserIdAndMsgId(context.Context, *ReqGetOneUserMsgByUserIdAndMsgId) (*UserMsg, error)
	// 删除信息
	DeleteUserMsgByUserIdAndWithIdAndEncry(context.Context, *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) (*ReplyNull, error)
	// 清除历史  用于清楚历史每次从最底部删除消息 每次删除100条 如果仍然有消息将最新的消息id返回 如没有消息将0返回 count=本次删除的消息条数
	ClearHistory(context.Context, *ReqClearHistory) (*MsgIDList, error)
	// 查询打电话消息历史记录
	GetMessageHistoryPageByMedia(context.Context, *ReqGetMessageHistoryPageByMedia) (*ReplyGetMessageHistoryPageByMedia, error)
	//=========================================== UserMediaMessageStatistics =========================================================
	// 根据userId、withId、withType、media获取UserMediaMessageStatistics
	GetUserMediaMessageStatisticsByMedia(context.Context, *ReqGetUserMediaMessageStatisticsByMedia) (*ReplyGetUserMediaMessageStatisticsByMedia, error)
	// Begin added by six xionger at 2020-03-03 for messages.search
	SearchUserMediaMsgStatisticsByFilter(context.Context, *ReqSearchUserMediaMsgByFilter) (*RespSearchUserMediaMsgByFilter, error)
	//=========================================== UserDialogAndMsg =========================================================
	// 插入或者更新 UserDialog
	InsertOrUpdateUserDialogAndMsg(context.Context, *ReqInsertOrUpdateUserDialogAndMsg) (*ReplyNull, error)
	// 更新自己的dialog
	UpdateSelfDialogAndMsg(context.Context, *ReqUpdateSelfDialogAndMsg) (*ReplyNull, error)
	// 自增dialog的unread +1 如果dialog不存在 则返回
	UpdateDialogAddUnread(context.Context, *ReqUpdateDialogAddUnread) (*ReplyUpdateDialogAddUnread, error)
	// 更新对话框 清除草稿
	UpdateDialogClearDraft(context.Context, *ReqUpdateDialogClearDraft) (*ReplyUpdateDialogClearDraft, error)
	// 获取用户总未读数
	GetUserDialogAllUnread(context.Context, *ReqGetUserDialogAllUnread) (*ReplyGetUserDialogAllUnread, error)
	// 获取单条 dialog 记录
	GetDialogAndMsgByUserIdAndWithIdAndType(context.Context, *ReqGetDialogAndMsgByUserIdAndWithIdAndType) (*UserDialogAndMsg, error)
	// 获取 UserDialogList
	GetDialogAndMsgsByUserId(context.Context, *ReqGetDialogAndMsgsByUserId) (*UserDialogAndMsgList, error)
	// 分页获取
	GetDialogAndMsgsByPage(context.Context, *ReqGetDialogAndMsgsByPage) (*UserDialogAndMsgList, error)
	// 消息接收方更新dialog 更新dialog readin = readout = topMsgID unread = 0
	ReadSelfDialogAndMsg(context.Context, *ReqReadSelfDialogAndMsg) (*DialogTopMessage, error)
	// 更新自己对话框的readin = topMsgId 和 unread = 0
	UpdateReadinbox(context.Context, *ReqUpdateReadinbox) (*DialogTopMessage, error)
	// 更新别人的Readoutbox readOut = topMsgID && unread = 0
	UpdateReadoutbox(context.Context, *ReqUpdateReadoutbox) (*DialogTopMessage, error)
	// 删除对话框消息，对应的 对话框盒子 tidb中的数据都删除
	DeleteUserDialog(context.Context, *ReqDeleteUserDialog) (*ReplyNull, error)
	UpdateUserDialog(context.Context, *ReqUpdateUserDialog) (*ReplyUpdateUserDialog, error)
	// Begin added by six xionger at 2020-05-15 for 取单聊对话框消息未读数
	GetDialogUnreadCountByUserIdAndWithId(context.Context, *ReqGetDialogUnreadCountByUserIdAndWithId) (*RespGetDialogUnreadCountByUserIdAndWithId, error)
	// -------------------------------- pinged dialog 置顶对话框 ----------------------------------
	// 更新对话框为置顶对话框
	UpdateDialogToPinged(context.Context, *ReqUpdateDialogToPinged) (*ReplyNull, error)
	// 取消置顶
	CancelPingedDialog(context.Context, *ReqCancelPingedDialog) (*ReplyNull, error)
	// 获取置顶对话框
	GetPingedDialogAndMsg(context.Context, *ReqGetPingedDialogAndMsg) (*ReplyGetPingedDialogAndMsg, error)
	// 获取最近操作的对话框 limit 个
	GetLastLimitDialog(context.Context, *ReqGetLastLimitDialog) (*ReplyGetLastLimitDialog, error)
	// -------------------------------- channel 使用 ----------------------------------
	// channel 使用 readInBox_maxId 自增1
	UpdateReadInBoxMaxId(context.Context, *ReqUpdateReadInBoxMaxId) (*ReplyNull, error)
	// channel 使用 readOutBox_maxId 自增1
	UpdateReadOutBoxMaxId(context.Context, *ReqUpdateReadOutBoxMaxId) (*ReplyNull, error)
	// 更新自己对话框的readin 和 unread
	UpdateChannelReadinbox(context.Context, *ReqUpdateChannelReadinbox) (*ReplyNull, error)
	// 更新别人的Readoutbox
	UpdateChannelReadoutbox(context.Context, *ReqUpdateChannelReadoutbox) (*ReplyNull, error)
	// 删除超级群的所有对话框
	DeleteUserDialogByChannelId(context.Context, *ReqDeleteUserDialogByChannelId) (*ReplyNull, error)
	// 获取某用户的所有超级群对话框
	GetUserChannelDialogByUserId(context.Context, *ReqGetUserChannelDialogByUserId) (*UserDialogList, error)
	//=========================================== msg_random(发消息去重) =========================================================
	// 获取random 状态 如果有则返回true 没有就插入缓存 并且 返回false
	GetRandomStatus(context.Context, *ReqGetRandomStatus) (*ReplyGetRandomStatus, error)
	// 设置超级群消息
	SetSuperGroupMsg(context.Context, *ReqSetSuperGroupMsg) (*ReplySetSuperGroupMsg, error)
	// 获取超级群消息
	GetSuperGroupMsg(context.Context, *ReqGetSuperGroupMsg) (*ReplyGetSuperGroupMsg, error)
	// 设置messagedb.user_dialog.unread_metions_count
	UserDialogSetUnreadMetionsCount(context.Context, *ReqUserDialogSetUnreadMetionsCount) (*ReplyUserDialogSetUnreadMetionsCount, error)
	// 获取messagedb.user_dialog.unread_metions_count
	UserDialogGetUnreadMetionsCount(context.Context, *ReqUserDialogGetUnreadMetionsCount) (*ReplyUserDialogGetUnreadMetionsCount, error)
	// 改变messagedb.user_dialog.unread_metions_count
	UserDialogChangeUnreadMetionsCount(context.Context, *ReqUserDialogChangeUnreadMetionsCount) (*ReplyUserDialogChangeUnreadMetionsCount, error)
	// add for messagedb.user_message_at
	UserMessageAtAdd(context.Context, *ReqUserMessageAtAdd) (*ReplyUserMessageAtAdd, error)
	// get for messagedb.user_message_at
	UserMessageAtGet(context.Context, *ReqUserMessageAtGet) (*ReplyUserMessageAtGet, error)
	// delete for messagedb.user_message_at
	UserMessageAtDel(context.Context, *ReqUserMessageAtDel) (*ReplyUserMessageAtDel, error)
	// 更新对话框为归档对话框 105
	UpdateDialogToFolder(context.Context, *ReqUpdateDialogToFolder) (*ReplyNull, error)
	// Begin added by MarkLi at 2020-07-17 for 存取MsgId和SerialCode映射接口
	InsertMsgIdSerialCodeMap(context.Context, *ReqInsertMsgIdSerialCodeMap) (*ReplyInsertMsgIdSerialCodeMap, error)
	GetMsgIdSerialCodeMap(context.Context, *ReqGetMsgIdSerialCodeMap) (*ReplyGetMsgIdSerialCodeMap, error)
	mustEmbedUnimplementedMessageDbServer()
}

// UnimplementedMessageDbServer must be embedded to have forward compatible implementations.
type UnimplementedMessageDbServer struct {
}

func (UnimplementedMessageDbServer) InsertOrUpdateUserMsg(context.Context, *ReqInsertOrUpdateUserMsg) (*DialogIsCreated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOrUpdateUserMsg not implemented")
}
func (UnimplementedMessageDbServer) GetForwardUserMsg(context.Context, *ReqGetForwardUserMsg) (*ForWardUserMsgList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForwardUserMsg not implemented")
}
func (UnimplementedMessageDbServer) GetUserMsgHistory(context.Context, *ReqGetUserMsgHistory) (*UserMsgList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMsgHistory not implemented")
}
func (UnimplementedMessageDbServer) GetUserMsgUUID(context.Context, *ReqGetUserMsgUUID) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMsgUUID not implemented")
}
func (UnimplementedMessageDbServer) GetUserMsgIdByUUID(context.Context, *ReqGetUserMsgIdByUUID) (*MsgId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMsgIdByUUID not implemented")
}
func (UnimplementedMessageDbServer) GetUserMsgListByUUIDs(context.Context, *ReqGetUserMsgListByUUIDs) (*UserMsgList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMsgListByUUIDs not implemented")
}
func (UnimplementedMessageDbServer) DeleteUserMsg(context.Context, *ReqDeleteUserMsg) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserMsg not implemented")
}
func (UnimplementedMessageDbServer) BatchDeleteUserMsg(context.Context, *ReqBatchDeleteUserMsg) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteUserMsg not implemented")
}
func (UnimplementedMessageDbServer) GetOneUserMsgByUserIdAndMsgId(context.Context, *ReqGetOneUserMsgByUserIdAndMsgId) (*UserMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneUserMsgByUserIdAndMsgId not implemented")
}
func (UnimplementedMessageDbServer) DeleteUserMsgByUserIdAndWithIdAndEncry(context.Context, *ReqDeleteUserMsgByUserIdAndWithIdAndEncry) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserMsgByUserIdAndWithIdAndEncry not implemented")
}
func (UnimplementedMessageDbServer) ClearHistory(context.Context, *ReqClearHistory) (*MsgIDList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearHistory not implemented")
}
func (UnimplementedMessageDbServer) GetMessageHistoryPageByMedia(context.Context, *ReqGetMessageHistoryPageByMedia) (*ReplyGetMessageHistoryPageByMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageHistoryPageByMedia not implemented")
}
func (UnimplementedMessageDbServer) GetUserMediaMessageStatisticsByMedia(context.Context, *ReqGetUserMediaMessageStatisticsByMedia) (*ReplyGetUserMediaMessageStatisticsByMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMediaMessageStatisticsByMedia not implemented")
}
func (UnimplementedMessageDbServer) SearchUserMediaMsgStatisticsByFilter(context.Context, *ReqSearchUserMediaMsgByFilter) (*RespSearchUserMediaMsgByFilter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserMediaMsgStatisticsByFilter not implemented")
}
func (UnimplementedMessageDbServer) InsertOrUpdateUserDialogAndMsg(context.Context, *ReqInsertOrUpdateUserDialogAndMsg) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOrUpdateUserDialogAndMsg not implemented")
}
func (UnimplementedMessageDbServer) UpdateSelfDialogAndMsg(context.Context, *ReqUpdateSelfDialogAndMsg) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSelfDialogAndMsg not implemented")
}
func (UnimplementedMessageDbServer) UpdateDialogAddUnread(context.Context, *ReqUpdateDialogAddUnread) (*ReplyUpdateDialogAddUnread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDialogAddUnread not implemented")
}
func (UnimplementedMessageDbServer) UpdateDialogClearDraft(context.Context, *ReqUpdateDialogClearDraft) (*ReplyUpdateDialogClearDraft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDialogClearDraft not implemented")
}
func (UnimplementedMessageDbServer) GetUserDialogAllUnread(context.Context, *ReqGetUserDialogAllUnread) (*ReplyGetUserDialogAllUnread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDialogAllUnread not implemented")
}
func (UnimplementedMessageDbServer) GetDialogAndMsgByUserIdAndWithIdAndType(context.Context, *ReqGetDialogAndMsgByUserIdAndWithIdAndType) (*UserDialogAndMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogAndMsgByUserIdAndWithIdAndType not implemented")
}
func (UnimplementedMessageDbServer) GetDialogAndMsgsByUserId(context.Context, *ReqGetDialogAndMsgsByUserId) (*UserDialogAndMsgList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogAndMsgsByUserId not implemented")
}
func (UnimplementedMessageDbServer) GetDialogAndMsgsByPage(context.Context, *ReqGetDialogAndMsgsByPage) (*UserDialogAndMsgList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogAndMsgsByPage not implemented")
}
func (UnimplementedMessageDbServer) ReadSelfDialogAndMsg(context.Context, *ReqReadSelfDialogAndMsg) (*DialogTopMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSelfDialogAndMsg not implemented")
}
func (UnimplementedMessageDbServer) UpdateReadinbox(context.Context, *ReqUpdateReadinbox) (*DialogTopMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReadinbox not implemented")
}
func (UnimplementedMessageDbServer) UpdateReadoutbox(context.Context, *ReqUpdateReadoutbox) (*DialogTopMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReadoutbox not implemented")
}
func (UnimplementedMessageDbServer) DeleteUserDialog(context.Context, *ReqDeleteUserDialog) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserDialog not implemented")
}
func (UnimplementedMessageDbServer) UpdateUserDialog(context.Context, *ReqUpdateUserDialog) (*ReplyUpdateUserDialog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDialog not implemented")
}
func (UnimplementedMessageDbServer) GetDialogUnreadCountByUserIdAndWithId(context.Context, *ReqGetDialogUnreadCountByUserIdAndWithId) (*RespGetDialogUnreadCountByUserIdAndWithId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogUnreadCountByUserIdAndWithId not implemented")
}
func (UnimplementedMessageDbServer) UpdateDialogToPinged(context.Context, *ReqUpdateDialogToPinged) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDialogToPinged not implemented")
}
func (UnimplementedMessageDbServer) CancelPingedDialog(context.Context, *ReqCancelPingedDialog) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPingedDialog not implemented")
}
func (UnimplementedMessageDbServer) GetPingedDialogAndMsg(context.Context, *ReqGetPingedDialogAndMsg) (*ReplyGetPingedDialogAndMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPingedDialogAndMsg not implemented")
}
func (UnimplementedMessageDbServer) GetLastLimitDialog(context.Context, *ReqGetLastLimitDialog) (*ReplyGetLastLimitDialog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastLimitDialog not implemented")
}
func (UnimplementedMessageDbServer) UpdateReadInBoxMaxId(context.Context, *ReqUpdateReadInBoxMaxId) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReadInBoxMaxId not implemented")
}
func (UnimplementedMessageDbServer) UpdateReadOutBoxMaxId(context.Context, *ReqUpdateReadOutBoxMaxId) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReadOutBoxMaxId not implemented")
}
func (UnimplementedMessageDbServer) UpdateChannelReadinbox(context.Context, *ReqUpdateChannelReadinbox) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelReadinbox not implemented")
}
func (UnimplementedMessageDbServer) UpdateChannelReadoutbox(context.Context, *ReqUpdateChannelReadoutbox) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelReadoutbox not implemented")
}
func (UnimplementedMessageDbServer) DeleteUserDialogByChannelId(context.Context, *ReqDeleteUserDialogByChannelId) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserDialogByChannelId not implemented")
}
func (UnimplementedMessageDbServer) GetUserChannelDialogByUserId(context.Context, *ReqGetUserChannelDialogByUserId) (*UserDialogList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChannelDialogByUserId not implemented")
}
func (UnimplementedMessageDbServer) GetRandomStatus(context.Context, *ReqGetRandomStatus) (*ReplyGetRandomStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomStatus not implemented")
}
func (UnimplementedMessageDbServer) SetSuperGroupMsg(context.Context, *ReqSetSuperGroupMsg) (*ReplySetSuperGroupMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSuperGroupMsg not implemented")
}
func (UnimplementedMessageDbServer) GetSuperGroupMsg(context.Context, *ReqGetSuperGroupMsg) (*ReplyGetSuperGroupMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuperGroupMsg not implemented")
}
func (UnimplementedMessageDbServer) UserDialogSetUnreadMetionsCount(context.Context, *ReqUserDialogSetUnreadMetionsCount) (*ReplyUserDialogSetUnreadMetionsCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDialogSetUnreadMetionsCount not implemented")
}
func (UnimplementedMessageDbServer) UserDialogGetUnreadMetionsCount(context.Context, *ReqUserDialogGetUnreadMetionsCount) (*ReplyUserDialogGetUnreadMetionsCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDialogGetUnreadMetionsCount not implemented")
}
func (UnimplementedMessageDbServer) UserDialogChangeUnreadMetionsCount(context.Context, *ReqUserDialogChangeUnreadMetionsCount) (*ReplyUserDialogChangeUnreadMetionsCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDialogChangeUnreadMetionsCount not implemented")
}
func (UnimplementedMessageDbServer) UserMessageAtAdd(context.Context, *ReqUserMessageAtAdd) (*ReplyUserMessageAtAdd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMessageAtAdd not implemented")
}
func (UnimplementedMessageDbServer) UserMessageAtGet(context.Context, *ReqUserMessageAtGet) (*ReplyUserMessageAtGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMessageAtGet not implemented")
}
func (UnimplementedMessageDbServer) UserMessageAtDel(context.Context, *ReqUserMessageAtDel) (*ReplyUserMessageAtDel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMessageAtDel not implemented")
}
func (UnimplementedMessageDbServer) UpdateDialogToFolder(context.Context, *ReqUpdateDialogToFolder) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDialogToFolder not implemented")
}
func (UnimplementedMessageDbServer) InsertMsgIdSerialCodeMap(context.Context, *ReqInsertMsgIdSerialCodeMap) (*ReplyInsertMsgIdSerialCodeMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertMsgIdSerialCodeMap not implemented")
}
func (UnimplementedMessageDbServer) GetMsgIdSerialCodeMap(context.Context, *ReqGetMsgIdSerialCodeMap) (*ReplyGetMsgIdSerialCodeMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsgIdSerialCodeMap not implemented")
}
func (UnimplementedMessageDbServer) mustEmbedUnimplementedMessageDbServer() {}

// UnsafeMessageDbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageDbServer will
// result in compilation errors.
type UnsafeMessageDbServer interface {
	mustEmbedUnimplementedMessageDbServer()
}

func RegisterMessageDbServer(s grpc.ServiceRegistrar, srv MessageDbServer) {
	s.RegisterService(&MessageDb_ServiceDesc, srv)
}

func _MessageDb_InsertOrUpdateUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInsertOrUpdateUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).InsertOrUpdateUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/InsertOrUpdateUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).InsertOrUpdateUserMsg(ctx, req.(*ReqInsertOrUpdateUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetForwardUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetForwardUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetForwardUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetForwardUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetForwardUserMsg(ctx, req.(*ReqGetForwardUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserMsgHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserMsgHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserMsgHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserMsgHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserMsgHistory(ctx, req.(*ReqGetUserMsgHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserMsgUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserMsgUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserMsgUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserMsgUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserMsgUUID(ctx, req.(*ReqGetUserMsgUUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserMsgIdByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserMsgIdByUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserMsgIdByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserMsgIdByUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserMsgIdByUUID(ctx, req.(*ReqGetUserMsgIdByUUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserMsgListByUUIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserMsgListByUUIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserMsgListByUUIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserMsgListByUUIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserMsgListByUUIDs(ctx, req.(*ReqGetUserMsgListByUUIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_DeleteUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).DeleteUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/DeleteUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).DeleteUserMsg(ctx, req.(*ReqDeleteUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_BatchDeleteUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBatchDeleteUserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).BatchDeleteUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/BatchDeleteUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).BatchDeleteUserMsg(ctx, req.(*ReqBatchDeleteUserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetOneUserMsgByUserIdAndMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetOneUserMsgByUserIdAndMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetOneUserMsgByUserIdAndMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetOneUserMsgByUserIdAndMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetOneUserMsgByUserIdAndMsgId(ctx, req.(*ReqGetOneUserMsgByUserIdAndMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_DeleteUserMsgByUserIdAndWithIdAndEncry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteUserMsgByUserIdAndWithIdAndEncry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).DeleteUserMsgByUserIdAndWithIdAndEncry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/DeleteUserMsgByUserIdAndWithIdAndEncry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).DeleteUserMsgByUserIdAndWithIdAndEncry(ctx, req.(*ReqDeleteUserMsgByUserIdAndWithIdAndEncry))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_ClearHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqClearHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).ClearHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/ClearHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).ClearHistory(ctx, req.(*ReqClearHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetMessageHistoryPageByMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMessageHistoryPageByMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetMessageHistoryPageByMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetMessageHistoryPageByMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetMessageHistoryPageByMedia(ctx, req.(*ReqGetMessageHistoryPageByMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserMediaMessageStatisticsByMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserMediaMessageStatisticsByMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserMediaMessageStatisticsByMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserMediaMessageStatisticsByMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserMediaMessageStatisticsByMedia(ctx, req.(*ReqGetUserMediaMessageStatisticsByMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_SearchUserMediaMsgStatisticsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSearchUserMediaMsgByFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).SearchUserMediaMsgStatisticsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/SearchUserMediaMsgStatisticsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).SearchUserMediaMsgStatisticsByFilter(ctx, req.(*ReqSearchUserMediaMsgByFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_InsertOrUpdateUserDialogAndMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInsertOrUpdateUserDialogAndMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).InsertOrUpdateUserDialogAndMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/InsertOrUpdateUserDialogAndMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).InsertOrUpdateUserDialogAndMsg(ctx, req.(*ReqInsertOrUpdateUserDialogAndMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateSelfDialogAndMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateSelfDialogAndMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateSelfDialogAndMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateSelfDialogAndMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateSelfDialogAndMsg(ctx, req.(*ReqUpdateSelfDialogAndMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateDialogAddUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateDialogAddUnread)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateDialogAddUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateDialogAddUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateDialogAddUnread(ctx, req.(*ReqUpdateDialogAddUnread))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateDialogClearDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateDialogClearDraft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateDialogClearDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateDialogClearDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateDialogClearDraft(ctx, req.(*ReqUpdateDialogClearDraft))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserDialogAllUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserDialogAllUnread)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserDialogAllUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserDialogAllUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserDialogAllUnread(ctx, req.(*ReqGetUserDialogAllUnread))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetDialogAndMsgByUserIdAndWithIdAndType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetDialogAndMsgByUserIdAndWithIdAndType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetDialogAndMsgByUserIdAndWithIdAndType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetDialogAndMsgByUserIdAndWithIdAndType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetDialogAndMsgByUserIdAndWithIdAndType(ctx, req.(*ReqGetDialogAndMsgByUserIdAndWithIdAndType))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetDialogAndMsgsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetDialogAndMsgsByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetDialogAndMsgsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetDialogAndMsgsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetDialogAndMsgsByUserId(ctx, req.(*ReqGetDialogAndMsgsByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetDialogAndMsgsByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetDialogAndMsgsByPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetDialogAndMsgsByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetDialogAndMsgsByPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetDialogAndMsgsByPage(ctx, req.(*ReqGetDialogAndMsgsByPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_ReadSelfDialogAndMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReadSelfDialogAndMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).ReadSelfDialogAndMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/ReadSelfDialogAndMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).ReadSelfDialogAndMsg(ctx, req.(*ReqReadSelfDialogAndMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateReadinbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateReadinbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateReadinbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateReadinbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateReadinbox(ctx, req.(*ReqUpdateReadinbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateReadoutbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateReadoutbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateReadoutbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateReadoutbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateReadoutbox(ctx, req.(*ReqUpdateReadoutbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_DeleteUserDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteUserDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).DeleteUserDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/DeleteUserDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).DeleteUserDialog(ctx, req.(*ReqDeleteUserDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateUserDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateUserDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateUserDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateUserDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateUserDialog(ctx, req.(*ReqUpdateUserDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetDialogUnreadCountByUserIdAndWithId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetDialogUnreadCountByUserIdAndWithId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetDialogUnreadCountByUserIdAndWithId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetDialogUnreadCountByUserIdAndWithId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetDialogUnreadCountByUserIdAndWithId(ctx, req.(*ReqGetDialogUnreadCountByUserIdAndWithId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateDialogToPinged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateDialogToPinged)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateDialogToPinged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateDialogToPinged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateDialogToPinged(ctx, req.(*ReqUpdateDialogToPinged))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_CancelPingedDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCancelPingedDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).CancelPingedDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/CancelPingedDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).CancelPingedDialog(ctx, req.(*ReqCancelPingedDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetPingedDialogAndMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetPingedDialogAndMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetPingedDialogAndMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetPingedDialogAndMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetPingedDialogAndMsg(ctx, req.(*ReqGetPingedDialogAndMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetLastLimitDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetLastLimitDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetLastLimitDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetLastLimitDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetLastLimitDialog(ctx, req.(*ReqGetLastLimitDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateReadInBoxMaxId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateReadInBoxMaxId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateReadInBoxMaxId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateReadInBoxMaxId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateReadInBoxMaxId(ctx, req.(*ReqUpdateReadInBoxMaxId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateReadOutBoxMaxId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateReadOutBoxMaxId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateReadOutBoxMaxId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateReadOutBoxMaxId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateReadOutBoxMaxId(ctx, req.(*ReqUpdateReadOutBoxMaxId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateChannelReadinbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelReadinbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateChannelReadinbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateChannelReadinbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateChannelReadinbox(ctx, req.(*ReqUpdateChannelReadinbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateChannelReadoutbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelReadoutbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateChannelReadoutbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateChannelReadoutbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateChannelReadoutbox(ctx, req.(*ReqUpdateChannelReadoutbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_DeleteUserDialogByChannelId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteUserDialogByChannelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).DeleteUserDialogByChannelId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/DeleteUserDialogByChannelId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).DeleteUserDialogByChannelId(ctx, req.(*ReqDeleteUserDialogByChannelId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetUserChannelDialogByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserChannelDialogByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetUserChannelDialogByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetUserChannelDialogByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetUserChannelDialogByUserId(ctx, req.(*ReqGetUserChannelDialogByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetRandomStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetRandomStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetRandomStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetRandomStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetRandomStatus(ctx, req.(*ReqGetRandomStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_SetSuperGroupMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetSuperGroupMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).SetSuperGroupMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/SetSuperGroupMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).SetSuperGroupMsg(ctx, req.(*ReqSetSuperGroupMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetSuperGroupMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetSuperGroupMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetSuperGroupMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetSuperGroupMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetSuperGroupMsg(ctx, req.(*ReqGetSuperGroupMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UserDialogSetUnreadMetionsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserDialogSetUnreadMetionsCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UserDialogSetUnreadMetionsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UserDialogSetUnreadMetionsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UserDialogSetUnreadMetionsCount(ctx, req.(*ReqUserDialogSetUnreadMetionsCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UserDialogGetUnreadMetionsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserDialogGetUnreadMetionsCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UserDialogGetUnreadMetionsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UserDialogGetUnreadMetionsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UserDialogGetUnreadMetionsCount(ctx, req.(*ReqUserDialogGetUnreadMetionsCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UserDialogChangeUnreadMetionsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserDialogChangeUnreadMetionsCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UserDialogChangeUnreadMetionsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UserDialogChangeUnreadMetionsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UserDialogChangeUnreadMetionsCount(ctx, req.(*ReqUserDialogChangeUnreadMetionsCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UserMessageAtAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserMessageAtAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UserMessageAtAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UserMessageAtAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UserMessageAtAdd(ctx, req.(*ReqUserMessageAtAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UserMessageAtGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserMessageAtGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UserMessageAtGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UserMessageAtGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UserMessageAtGet(ctx, req.(*ReqUserMessageAtGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UserMessageAtDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserMessageAtDel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UserMessageAtDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UserMessageAtDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UserMessageAtDel(ctx, req.(*ReqUserMessageAtDel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_UpdateDialogToFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateDialogToFolder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).UpdateDialogToFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/UpdateDialogToFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).UpdateDialogToFolder(ctx, req.(*ReqUpdateDialogToFolder))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_InsertMsgIdSerialCodeMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInsertMsgIdSerialCodeMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).InsertMsgIdSerialCodeMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/InsertMsgIdSerialCodeMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).InsertMsgIdSerialCodeMap(ctx, req.(*ReqInsertMsgIdSerialCodeMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDb_GetMsgIdSerialCodeMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMsgIdSerialCodeMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDbServer).GetMsgIdSerialCodeMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.MessageDb/GetMsgIdSerialCodeMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDbServer).GetMsgIdSerialCodeMap(ctx, req.(*ReqGetMsgIdSerialCodeMap))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageDb_ServiceDesc is the grpc.ServiceDesc for MessageDb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageDb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messagedb.MessageDb",
	HandlerType: (*MessageDbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertOrUpdateUserMsg",
			Handler:    _MessageDb_InsertOrUpdateUserMsg_Handler,
		},
		{
			MethodName: "GetForwardUserMsg",
			Handler:    _MessageDb_GetForwardUserMsg_Handler,
		},
		{
			MethodName: "GetUserMsgHistory",
			Handler:    _MessageDb_GetUserMsgHistory_Handler,
		},
		{
			MethodName: "GetUserMsgUUID",
			Handler:    _MessageDb_GetUserMsgUUID_Handler,
		},
		{
			MethodName: "GetUserMsgIdByUUID",
			Handler:    _MessageDb_GetUserMsgIdByUUID_Handler,
		},
		{
			MethodName: "GetUserMsgListByUUIDs",
			Handler:    _MessageDb_GetUserMsgListByUUIDs_Handler,
		},
		{
			MethodName: "DeleteUserMsg",
			Handler:    _MessageDb_DeleteUserMsg_Handler,
		},
		{
			MethodName: "BatchDeleteUserMsg",
			Handler:    _MessageDb_BatchDeleteUserMsg_Handler,
		},
		{
			MethodName: "GetOneUserMsgByUserIdAndMsgId",
			Handler:    _MessageDb_GetOneUserMsgByUserIdAndMsgId_Handler,
		},
		{
			MethodName: "DeleteUserMsgByUserIdAndWithIdAndEncry",
			Handler:    _MessageDb_DeleteUserMsgByUserIdAndWithIdAndEncry_Handler,
		},
		{
			MethodName: "ClearHistory",
			Handler:    _MessageDb_ClearHistory_Handler,
		},
		{
			MethodName: "GetMessageHistoryPageByMedia",
			Handler:    _MessageDb_GetMessageHistoryPageByMedia_Handler,
		},
		{
			MethodName: "GetUserMediaMessageStatisticsByMedia",
			Handler:    _MessageDb_GetUserMediaMessageStatisticsByMedia_Handler,
		},
		{
			MethodName: "SearchUserMediaMsgStatisticsByFilter",
			Handler:    _MessageDb_SearchUserMediaMsgStatisticsByFilter_Handler,
		},
		{
			MethodName: "InsertOrUpdateUserDialogAndMsg",
			Handler:    _MessageDb_InsertOrUpdateUserDialogAndMsg_Handler,
		},
		{
			MethodName: "UpdateSelfDialogAndMsg",
			Handler:    _MessageDb_UpdateSelfDialogAndMsg_Handler,
		},
		{
			MethodName: "UpdateDialogAddUnread",
			Handler:    _MessageDb_UpdateDialogAddUnread_Handler,
		},
		{
			MethodName: "UpdateDialogClearDraft",
			Handler:    _MessageDb_UpdateDialogClearDraft_Handler,
		},
		{
			MethodName: "GetUserDialogAllUnread",
			Handler:    _MessageDb_GetUserDialogAllUnread_Handler,
		},
		{
			MethodName: "GetDialogAndMsgByUserIdAndWithIdAndType",
			Handler:    _MessageDb_GetDialogAndMsgByUserIdAndWithIdAndType_Handler,
		},
		{
			MethodName: "GetDialogAndMsgsByUserId",
			Handler:    _MessageDb_GetDialogAndMsgsByUserId_Handler,
		},
		{
			MethodName: "GetDialogAndMsgsByPage",
			Handler:    _MessageDb_GetDialogAndMsgsByPage_Handler,
		},
		{
			MethodName: "ReadSelfDialogAndMsg",
			Handler:    _MessageDb_ReadSelfDialogAndMsg_Handler,
		},
		{
			MethodName: "UpdateReadinbox",
			Handler:    _MessageDb_UpdateReadinbox_Handler,
		},
		{
			MethodName: "UpdateReadoutbox",
			Handler:    _MessageDb_UpdateReadoutbox_Handler,
		},
		{
			MethodName: "DeleteUserDialog",
			Handler:    _MessageDb_DeleteUserDialog_Handler,
		},
		{
			MethodName: "UpdateUserDialog",
			Handler:    _MessageDb_UpdateUserDialog_Handler,
		},
		{
			MethodName: "GetDialogUnreadCountByUserIdAndWithId",
			Handler:    _MessageDb_GetDialogUnreadCountByUserIdAndWithId_Handler,
		},
		{
			MethodName: "UpdateDialogToPinged",
			Handler:    _MessageDb_UpdateDialogToPinged_Handler,
		},
		{
			MethodName: "CancelPingedDialog",
			Handler:    _MessageDb_CancelPingedDialog_Handler,
		},
		{
			MethodName: "GetPingedDialogAndMsg",
			Handler:    _MessageDb_GetPingedDialogAndMsg_Handler,
		},
		{
			MethodName: "GetLastLimitDialog",
			Handler:    _MessageDb_GetLastLimitDialog_Handler,
		},
		{
			MethodName: "UpdateReadInBoxMaxId",
			Handler:    _MessageDb_UpdateReadInBoxMaxId_Handler,
		},
		{
			MethodName: "UpdateReadOutBoxMaxId",
			Handler:    _MessageDb_UpdateReadOutBoxMaxId_Handler,
		},
		{
			MethodName: "UpdateChannelReadinbox",
			Handler:    _MessageDb_UpdateChannelReadinbox_Handler,
		},
		{
			MethodName: "UpdateChannelReadoutbox",
			Handler:    _MessageDb_UpdateChannelReadoutbox_Handler,
		},
		{
			MethodName: "DeleteUserDialogByChannelId",
			Handler:    _MessageDb_DeleteUserDialogByChannelId_Handler,
		},
		{
			MethodName: "GetUserChannelDialogByUserId",
			Handler:    _MessageDb_GetUserChannelDialogByUserId_Handler,
		},
		{
			MethodName: "GetRandomStatus",
			Handler:    _MessageDb_GetRandomStatus_Handler,
		},
		{
			MethodName: "SetSuperGroupMsg",
			Handler:    _MessageDb_SetSuperGroupMsg_Handler,
		},
		{
			MethodName: "GetSuperGroupMsg",
			Handler:    _MessageDb_GetSuperGroupMsg_Handler,
		},
		{
			MethodName: "UserDialogSetUnreadMetionsCount",
			Handler:    _MessageDb_UserDialogSetUnreadMetionsCount_Handler,
		},
		{
			MethodName: "UserDialogGetUnreadMetionsCount",
			Handler:    _MessageDb_UserDialogGetUnreadMetionsCount_Handler,
		},
		{
			MethodName: "UserDialogChangeUnreadMetionsCount",
			Handler:    _MessageDb_UserDialogChangeUnreadMetionsCount_Handler,
		},
		{
			MethodName: "UserMessageAtAdd",
			Handler:    _MessageDb_UserMessageAtAdd_Handler,
		},
		{
			MethodName: "UserMessageAtGet",
			Handler:    _MessageDb_UserMessageAtGet_Handler,
		},
		{
			MethodName: "UserMessageAtDel",
			Handler:    _MessageDb_UserMessageAtDel_Handler,
		},
		{
			MethodName: "UpdateDialogToFolder",
			Handler:    _MessageDb_UpdateDialogToFolder_Handler,
		},
		{
			MethodName: "InsertMsgIdSerialCodeMap",
			Handler:    _MessageDb_InsertMsgIdSerialCodeMap_Handler,
		},
		{
			MethodName: "GetMsgIdSerialCodeMap",
			Handler:    _MessageDb_GetMsgIdSerialCodeMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messagedb.proto",
}

// ChannelDBClient is the client API for ChannelDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelDBClient interface {
	//=========================================== ChannelMsgId =========================================================
	// 更新超级群 msgid and pts
	UpdateChannelMsgIdAndPts(ctx context.Context, in *ReqUpdateChannelMsgIdAndPts, opts ...grpc.CallOption) (*ReplyUpdateChannelMsgIdAndPts, error)
	// 直接设置 msgId pts 值 erlang版本导入数据使用
	SetChannelMsgIdAndPts(ctx context.Context, in *ReqSetChannelMsgIdAndPts, opts ...grpc.CallOption) (*ReplySetChannelMsgIdAndPts, error)
	// 自增超级群 pts
	UpdateChannelPts(ctx context.Context, in *ReqUpdateChannelPts, opts ...grpc.CallOption) (*ReplyUpdateChannelPts, error)
	// 自增超级群 pts N次
	UpdateChannelPtsWithNum(ctx context.Context, in *ReqUpdateChannelPtsWithNum, opts ...grpc.CallOption) (*ReplyUpdateChannelPtsWithNum, error)
	// 查询单条 channelmsgid
	GetChannelMsgId(ctx context.Context, in *ReqGetChannelMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMsgId, error)
	//=========================================== ptsHandle =========================================================
	// 存储 pts 信息 只需要存储到boltdb即可，不用存储到tidb
	StoreChannelPtsHandle(ctx context.Context, in *ReqStoreChannelPtsHandle, opts ...grpc.CallOption) (*ReplyErr, error)
	// 批量存储pts信息
	BatchStoreChannelPtsHandle(ctx context.Context, in *ReqBatchStoreChannelPtsHandle, opts ...grpc.CallOption) (*ReplyErr, error)
	// 获取某个超级群的diff
	GetChannelDiffByPts(ctx context.Context, in *ReqGetChannelDiffByPts, opts ...grpc.CallOption) (*ReplyGetChannelDiffByPts, error)
	// 获取最后的PtsHandle
	GetChannelLastPtsHandle(ctx context.Context, in *ReqGetChannelLastPtsHandle, opts ...grpc.CallOption) (*ReplyGetChannelLastPtsHandle, error)
	// 删除ptsHandle
	DeleteChannelPtsHandle(ctx context.Context, in *ReqDeleteChannelPtsHandle, opts ...grpc.CallOption) (*ReplyDeleteChannelPtsHandle, error)
	//=========================================== ChannelMsg =========================================================
	// 新增或者更新消息
	InsertOrUpdateChannelMsg(ctx context.Context, in *ReqInsertOrUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error)
	// 更新消息内容
	UpdateChannelMsg(ctx context.Context, in *ReqUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error)
	// 批量存储消息
	BatchInsertOrUpdateChannelMsg(ctx context.Context, in *ReqBatchInsertOrUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error)
	// 删除信息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteMsgs(ctx context.Context, in *ReqDeleteMsgs, opts ...grpc.CallOption) (*ReplyDeleteMsgs, error)
	// 超级群中删除指定用户信息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteUserHistory(ctx context.Context, in *ReqDeleteUserHistory, opts ...grpc.CallOption) (*ReplyDeleteUserHistory, error)
	// 删除超级群所有消息
	DeleteChannelMsg(ctx context.Context, in *ReqDeleteChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error)
	// 删除单条超级群消息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteChannelMessage(ctx context.Context, in *ReqDeleteChannelMessage, opts ...grpc.CallOption) (*ReplyDeleteChannelMessage, error)
	// 获取指定msgid信息
	GetChannelMessage(ctx context.Context, in *ReqGetChannelMessage, opts ...grpc.CallOption) (*ReplyGetChannelMessage, error)
	// 获取一组信息
	GetChannelMsgsByMsgIds(ctx context.Context, in *ReqGetChannelMsgsByMsgIds, opts ...grpc.CallOption) (*ReplyGetChannelMsgsByMsgIds, error)
	// 获取历史
	GetChannelMsgHistory(ctx context.Context, in *ReqGetChannelMsgHistory, opts ...grpc.CallOption) (*ReplyGetChannelMsgHistory, error)
	// 获取超级群中最新的一条消息
	GetChannelTopMsg(ctx context.Context, in *ReqGetChannelTopMst, opts ...grpc.CallOption) (*ReplyGetChannelTopMst, error)
	// 分页查询媒体消息
	GetChannelMediaMessageHistoryByMedia(ctx context.Context, in *ReqGetChannelMediaMessageHistoryByMedia, opts ...grpc.CallOption) (*ReplyGetChannelMediaMessageHistoryByMedia, error)
	// 新增或者修改 超级群 标记删除记录
	InsertOrUpdateChannelMessageDeleteMark(ctx context.Context, in *ReqInsertOrUpdateChannelMessageDeleteMark, opts ...grpc.CallOption) (*ReplyInsertOrUpdateChannelMessageDeleteMark, error)
	// 查询 超级群 标记删除记录
	GetChannelMessageDeleteMark(ctx context.Context, in *ReqGetChannelMessageDeleteMark, opts ...grpc.CallOption) (*ReplyGetChannelMessageDeleteMark, error)
	//=========================================== ChannelMediaMessageStatistics =========================================================
	// 根据channelId 获取ChannelMediaMessageStatistics
	GetChannelMediaMessageStatisticsByMedia(ctx context.Context, in *ReqGetChannelMediaMessageStatisticsByMedia, opts ...grpc.CallOption) (*ReplyGetChannelMediaMessageStatisticsByMedia, error)
	// Begin added by six xionger at 2020-03-03 for messages.search
	SearchChannelMediaMsgStatisticsByFilter(ctx context.Context, in *ReqSearchChannelMediaMsgByFilter, opts ...grpc.CallOption) (*RespSearchChannelMediaMsgByFilter, error)
	//=========================================== channelAdminLog =========================================================
	// 存储adminlog
	StoreAdminLog(ctx context.Context, in *ReqStoreAdminLog, opts ...grpc.CallOption) (*ReplyErr, error)
	// 查询Adminlog 条件 超级群ID
	FindsAdminLogByChannelId(ctx context.Context, in *ReqFindsAdminLogByChannelId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合 过滤集合 用户ID
	FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 过滤集合 用户ID
	FindsAdminLogByChannelIdAndEventFiltersAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 用户ID
	FindsAdminLogByChannelIdAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合 过滤集合
	FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 过滤集合
	FindsAdminLogByChannelIdAndEventFilters(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndEventFilters, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合
	FindsAdminLogByChannelIdAndAdminUsers(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsers, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// add for channeldb.channel_message_at
	ChannelMessageAtAdd(ctx context.Context, in *ReqChannelMessageAtAdd, opts ...grpc.CallOption) (*ReplyChannelMessageAtAdd, error)
	// get for channeldb.channel_message_at
	ChannelMessageAtGet(ctx context.Context, in *ReqChannelMessageAtGet, opts ...grpc.CallOption) (*ReplyChannelMessageAtGet, error)
	// delete for channeldb.channel_message_at
	ChannelMessageAtDel(ctx context.Context, in *ReqChannelMessageAtDel, opts ...grpc.CallOption) (*ReplyChannelMessageAtDel, error)
	// Begin added by MarkLi at 2020-07-16 for 更新超级群 MsgId
	UpdateChannelMsgId(ctx context.Context, in *ReqUpdateChannelMsgId, opts ...grpc.CallOption) (*ReplyUpdateChannelMsgId, error)
}

type channelDBClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelDBClient(cc grpc.ClientConnInterface) ChannelDBClient {
	return &channelDBClient{cc}
}

func (c *channelDBClient) UpdateChannelMsgIdAndPts(ctx context.Context, in *ReqUpdateChannelMsgIdAndPts, opts ...grpc.CallOption) (*ReplyUpdateChannelMsgIdAndPts, error) {
	out := new(ReplyUpdateChannelMsgIdAndPts)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/UpdateChannelMsgIdAndPts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) SetChannelMsgIdAndPts(ctx context.Context, in *ReqSetChannelMsgIdAndPts, opts ...grpc.CallOption) (*ReplySetChannelMsgIdAndPts, error) {
	out := new(ReplySetChannelMsgIdAndPts)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/SetChannelMsgIdAndPts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) UpdateChannelPts(ctx context.Context, in *ReqUpdateChannelPts, opts ...grpc.CallOption) (*ReplyUpdateChannelPts, error) {
	out := new(ReplyUpdateChannelPts)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/UpdateChannelPts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) UpdateChannelPtsWithNum(ctx context.Context, in *ReqUpdateChannelPtsWithNum, opts ...grpc.CallOption) (*ReplyUpdateChannelPtsWithNum, error) {
	out := new(ReplyUpdateChannelPtsWithNum)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/UpdateChannelPtsWithNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMsgId(ctx context.Context, in *ReqGetChannelMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMsgId, error) {
	out := new(ReplyGetChannelMsgId)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelMsgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) StoreChannelPtsHandle(ctx context.Context, in *ReqStoreChannelPtsHandle, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/StoreChannelPtsHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) BatchStoreChannelPtsHandle(ctx context.Context, in *ReqBatchStoreChannelPtsHandle, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/BatchStoreChannelPtsHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelDiffByPts(ctx context.Context, in *ReqGetChannelDiffByPts, opts ...grpc.CallOption) (*ReplyGetChannelDiffByPts, error) {
	out := new(ReplyGetChannelDiffByPts)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelDiffByPts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelLastPtsHandle(ctx context.Context, in *ReqGetChannelLastPtsHandle, opts ...grpc.CallOption) (*ReplyGetChannelLastPtsHandle, error) {
	out := new(ReplyGetChannelLastPtsHandle)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelLastPtsHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteChannelPtsHandle(ctx context.Context, in *ReqDeleteChannelPtsHandle, opts ...grpc.CallOption) (*ReplyDeleteChannelPtsHandle, error) {
	out := new(ReplyDeleteChannelPtsHandle)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/DeleteChannelPtsHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) InsertOrUpdateChannelMsg(ctx context.Context, in *ReqInsertOrUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/InsertOrUpdateChannelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) UpdateChannelMsg(ctx context.Context, in *ReqUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/UpdateChannelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) BatchInsertOrUpdateChannelMsg(ctx context.Context, in *ReqBatchInsertOrUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/BatchInsertOrUpdateChannelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteMsgs(ctx context.Context, in *ReqDeleteMsgs, opts ...grpc.CallOption) (*ReplyDeleteMsgs, error) {
	out := new(ReplyDeleteMsgs)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/DeleteMsgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteUserHistory(ctx context.Context, in *ReqDeleteUserHistory, opts ...grpc.CallOption) (*ReplyDeleteUserHistory, error) {
	out := new(ReplyDeleteUserHistory)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/DeleteUserHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteChannelMsg(ctx context.Context, in *ReqDeleteChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/DeleteChannelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteChannelMessage(ctx context.Context, in *ReqDeleteChannelMessage, opts ...grpc.CallOption) (*ReplyDeleteChannelMessage, error) {
	out := new(ReplyDeleteChannelMessage)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/DeleteChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMessage(ctx context.Context, in *ReqGetChannelMessage, opts ...grpc.CallOption) (*ReplyGetChannelMessage, error) {
	out := new(ReplyGetChannelMessage)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMsgsByMsgIds(ctx context.Context, in *ReqGetChannelMsgsByMsgIds, opts ...grpc.CallOption) (*ReplyGetChannelMsgsByMsgIds, error) {
	out := new(ReplyGetChannelMsgsByMsgIds)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelMsgsByMsgIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMsgHistory(ctx context.Context, in *ReqGetChannelMsgHistory, opts ...grpc.CallOption) (*ReplyGetChannelMsgHistory, error) {
	out := new(ReplyGetChannelMsgHistory)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelMsgHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelTopMsg(ctx context.Context, in *ReqGetChannelTopMst, opts ...grpc.CallOption) (*ReplyGetChannelTopMst, error) {
	out := new(ReplyGetChannelTopMst)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelTopMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMediaMessageHistoryByMedia(ctx context.Context, in *ReqGetChannelMediaMessageHistoryByMedia, opts ...grpc.CallOption) (*ReplyGetChannelMediaMessageHistoryByMedia, error) {
	out := new(ReplyGetChannelMediaMessageHistoryByMedia)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelMediaMessageHistoryByMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) InsertOrUpdateChannelMessageDeleteMark(ctx context.Context, in *ReqInsertOrUpdateChannelMessageDeleteMark, opts ...grpc.CallOption) (*ReplyInsertOrUpdateChannelMessageDeleteMark, error) {
	out := new(ReplyInsertOrUpdateChannelMessageDeleteMark)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/InsertOrUpdateChannelMessageDeleteMark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMessageDeleteMark(ctx context.Context, in *ReqGetChannelMessageDeleteMark, opts ...grpc.CallOption) (*ReplyGetChannelMessageDeleteMark, error) {
	out := new(ReplyGetChannelMessageDeleteMark)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelMessageDeleteMark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMediaMessageStatisticsByMedia(ctx context.Context, in *ReqGetChannelMediaMessageStatisticsByMedia, opts ...grpc.CallOption) (*ReplyGetChannelMediaMessageStatisticsByMedia, error) {
	out := new(ReplyGetChannelMediaMessageStatisticsByMedia)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/GetChannelMediaMessageStatisticsByMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) SearchChannelMediaMsgStatisticsByFilter(ctx context.Context, in *ReqSearchChannelMediaMsgByFilter, opts ...grpc.CallOption) (*RespSearchChannelMediaMsgByFilter, error) {
	out := new(RespSearchChannelMediaMsgByFilter)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/SearchChannelMediaMsgStatisticsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) StoreAdminLog(ctx context.Context, in *ReqStoreAdminLog, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/StoreAdminLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelId(ctx context.Context, in *ReqFindsAdminLogByChannelId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/FindsAdminLogByChannelId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndEventFiltersAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndEventFiltersAndUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsersAndEventFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndEventFilters(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndEventFilters, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndEventFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndAdminUsers(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsers, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) ChannelMessageAtAdd(ctx context.Context, in *ReqChannelMessageAtAdd, opts ...grpc.CallOption) (*ReplyChannelMessageAtAdd, error) {
	out := new(ReplyChannelMessageAtAdd)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/ChannelMessageAtAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) ChannelMessageAtGet(ctx context.Context, in *ReqChannelMessageAtGet, opts ...grpc.CallOption) (*ReplyChannelMessageAtGet, error) {
	out := new(ReplyChannelMessageAtGet)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/ChannelMessageAtGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) ChannelMessageAtDel(ctx context.Context, in *ReqChannelMessageAtDel, opts ...grpc.CallOption) (*ReplyChannelMessageAtDel, error) {
	out := new(ReplyChannelMessageAtDel)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/ChannelMessageAtDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) UpdateChannelMsgId(ctx context.Context, in *ReqUpdateChannelMsgId, opts ...grpc.CallOption) (*ReplyUpdateChannelMsgId, error) {
	out := new(ReplyUpdateChannelMsgId)
	err := c.cc.Invoke(ctx, "/messagedb.ChannelDB/UpdateChannelMsgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelDBServer is the server API for ChannelDB service.
// All implementations must embed UnimplementedChannelDBServer
// for forward compatibility
type ChannelDBServer interface {
	//=========================================== ChannelMsgId =========================================================
	// 更新超级群 msgid and pts
	UpdateChannelMsgIdAndPts(context.Context, *ReqUpdateChannelMsgIdAndPts) (*ReplyUpdateChannelMsgIdAndPts, error)
	// 直接设置 msgId pts 值 erlang版本导入数据使用
	SetChannelMsgIdAndPts(context.Context, *ReqSetChannelMsgIdAndPts) (*ReplySetChannelMsgIdAndPts, error)
	// 自增超级群 pts
	UpdateChannelPts(context.Context, *ReqUpdateChannelPts) (*ReplyUpdateChannelPts, error)
	// 自增超级群 pts N次
	UpdateChannelPtsWithNum(context.Context, *ReqUpdateChannelPtsWithNum) (*ReplyUpdateChannelPtsWithNum, error)
	// 查询单条 channelmsgid
	GetChannelMsgId(context.Context, *ReqGetChannelMsgId) (*ReplyGetChannelMsgId, error)
	//=========================================== ptsHandle =========================================================
	// 存储 pts 信息 只需要存储到boltdb即可，不用存储到tidb
	StoreChannelPtsHandle(context.Context, *ReqStoreChannelPtsHandle) (*ReplyErr, error)
	// 批量存储pts信息
	BatchStoreChannelPtsHandle(context.Context, *ReqBatchStoreChannelPtsHandle) (*ReplyErr, error)
	// 获取某个超级群的diff
	GetChannelDiffByPts(context.Context, *ReqGetChannelDiffByPts) (*ReplyGetChannelDiffByPts, error)
	// 获取最后的PtsHandle
	GetChannelLastPtsHandle(context.Context, *ReqGetChannelLastPtsHandle) (*ReplyGetChannelLastPtsHandle, error)
	// 删除ptsHandle
	DeleteChannelPtsHandle(context.Context, *ReqDeleteChannelPtsHandle) (*ReplyDeleteChannelPtsHandle, error)
	//=========================================== ChannelMsg =========================================================
	// 新增或者更新消息
	InsertOrUpdateChannelMsg(context.Context, *ReqInsertOrUpdateChannelMsg) (*ReplyErr, error)
	// 更新消息内容
	UpdateChannelMsg(context.Context, *ReqUpdateChannelMsg) (*ReplyErr, error)
	// 批量存储消息
	BatchInsertOrUpdateChannelMsg(context.Context, *ReqBatchInsertOrUpdateChannelMsg) (*ReplyErr, error)
	// 删除信息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteMsgs(context.Context, *ReqDeleteMsgs) (*ReplyDeleteMsgs, error)
	// 超级群中删除指定用户信息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteUserHistory(context.Context, *ReqDeleteUserHistory) (*ReplyDeleteUserHistory, error)
	// 删除超级群所有消息
	DeleteChannelMsg(context.Context, *ReqDeleteChannelMsg) (*ReplyErr, error)
	// 删除单条超级群消息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteChannelMessage(context.Context, *ReqDeleteChannelMessage) (*ReplyDeleteChannelMessage, error)
	// 获取指定msgid信息
	GetChannelMessage(context.Context, *ReqGetChannelMessage) (*ReplyGetChannelMessage, error)
	// 获取一组信息
	GetChannelMsgsByMsgIds(context.Context, *ReqGetChannelMsgsByMsgIds) (*ReplyGetChannelMsgsByMsgIds, error)
	// 获取历史
	GetChannelMsgHistory(context.Context, *ReqGetChannelMsgHistory) (*ReplyGetChannelMsgHistory, error)
	// 获取超级群中最新的一条消息
	GetChannelTopMsg(context.Context, *ReqGetChannelTopMst) (*ReplyGetChannelTopMst, error)
	// 分页查询媒体消息
	GetChannelMediaMessageHistoryByMedia(context.Context, *ReqGetChannelMediaMessageHistoryByMedia) (*ReplyGetChannelMediaMessageHistoryByMedia, error)
	// 新增或者修改 超级群 标记删除记录
	InsertOrUpdateChannelMessageDeleteMark(context.Context, *ReqInsertOrUpdateChannelMessageDeleteMark) (*ReplyInsertOrUpdateChannelMessageDeleteMark, error)
	// 查询 超级群 标记删除记录
	GetChannelMessageDeleteMark(context.Context, *ReqGetChannelMessageDeleteMark) (*ReplyGetChannelMessageDeleteMark, error)
	//=========================================== ChannelMediaMessageStatistics =========================================================
	// 根据channelId 获取ChannelMediaMessageStatistics
	GetChannelMediaMessageStatisticsByMedia(context.Context, *ReqGetChannelMediaMessageStatisticsByMedia) (*ReplyGetChannelMediaMessageStatisticsByMedia, error)
	// Begin added by six xionger at 2020-03-03 for messages.search
	SearchChannelMediaMsgStatisticsByFilter(context.Context, *ReqSearchChannelMediaMsgByFilter) (*RespSearchChannelMediaMsgByFilter, error)
	//=========================================== channelAdminLog =========================================================
	// 存储adminlog
	StoreAdminLog(context.Context, *ReqStoreAdminLog) (*ReplyErr, error)
	// 查询Adminlog 条件 超级群ID
	FindsAdminLogByChannelId(context.Context, *ReqFindsAdminLogByChannelId) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合 过滤集合 用户ID
	FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(context.Context, *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 过滤集合 用户ID
	FindsAdminLogByChannelIdAndEventFiltersAndUserId(context.Context, *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 用户ID
	FindsAdminLogByChannelIdAndUserId(context.Context, *ReqFindsAdminLogByChannelIdAndUserId) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合 过滤集合
	FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(context.Context, *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 过滤集合
	FindsAdminLogByChannelIdAndEventFilters(context.Context, *ReqFindsAdminLogByChannelIdAndEventFilters) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合
	FindsAdminLogByChannelIdAndAdminUsers(context.Context, *ReqFindsAdminLogByChannelIdAndAdminUsers) (*ReplyFindsAdminLog, error)
	// add for channeldb.channel_message_at
	ChannelMessageAtAdd(context.Context, *ReqChannelMessageAtAdd) (*ReplyChannelMessageAtAdd, error)
	// get for channeldb.channel_message_at
	ChannelMessageAtGet(context.Context, *ReqChannelMessageAtGet) (*ReplyChannelMessageAtGet, error)
	// delete for channeldb.channel_message_at
	ChannelMessageAtDel(context.Context, *ReqChannelMessageAtDel) (*ReplyChannelMessageAtDel, error)
	// Begin added by MarkLi at 2020-07-16 for 更新超级群 MsgId
	UpdateChannelMsgId(context.Context, *ReqUpdateChannelMsgId) (*ReplyUpdateChannelMsgId, error)
	mustEmbedUnimplementedChannelDBServer()
}

// UnimplementedChannelDBServer must be embedded to have forward compatible implementations.
type UnimplementedChannelDBServer struct {
}

func (UnimplementedChannelDBServer) UpdateChannelMsgIdAndPts(context.Context, *ReqUpdateChannelMsgIdAndPts) (*ReplyUpdateChannelMsgIdAndPts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelMsgIdAndPts not implemented")
}
func (UnimplementedChannelDBServer) SetChannelMsgIdAndPts(context.Context, *ReqSetChannelMsgIdAndPts) (*ReplySetChannelMsgIdAndPts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChannelMsgIdAndPts not implemented")
}
func (UnimplementedChannelDBServer) UpdateChannelPts(context.Context, *ReqUpdateChannelPts) (*ReplyUpdateChannelPts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelPts not implemented")
}
func (UnimplementedChannelDBServer) UpdateChannelPtsWithNum(context.Context, *ReqUpdateChannelPtsWithNum) (*ReplyUpdateChannelPtsWithNum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelPtsWithNum not implemented")
}
func (UnimplementedChannelDBServer) GetChannelMsgId(context.Context, *ReqGetChannelMsgId) (*ReplyGetChannelMsgId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMsgId not implemented")
}
func (UnimplementedChannelDBServer) StoreChannelPtsHandle(context.Context, *ReqStoreChannelPtsHandle) (*ReplyErr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreChannelPtsHandle not implemented")
}
func (UnimplementedChannelDBServer) BatchStoreChannelPtsHandle(context.Context, *ReqBatchStoreChannelPtsHandle) (*ReplyErr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchStoreChannelPtsHandle not implemented")
}
func (UnimplementedChannelDBServer) GetChannelDiffByPts(context.Context, *ReqGetChannelDiffByPts) (*ReplyGetChannelDiffByPts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelDiffByPts not implemented")
}
func (UnimplementedChannelDBServer) GetChannelLastPtsHandle(context.Context, *ReqGetChannelLastPtsHandle) (*ReplyGetChannelLastPtsHandle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelLastPtsHandle not implemented")
}
func (UnimplementedChannelDBServer) DeleteChannelPtsHandle(context.Context, *ReqDeleteChannelPtsHandle) (*ReplyDeleteChannelPtsHandle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelPtsHandle not implemented")
}
func (UnimplementedChannelDBServer) InsertOrUpdateChannelMsg(context.Context, *ReqInsertOrUpdateChannelMsg) (*ReplyErr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOrUpdateChannelMsg not implemented")
}
func (UnimplementedChannelDBServer) UpdateChannelMsg(context.Context, *ReqUpdateChannelMsg) (*ReplyErr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelMsg not implemented")
}
func (UnimplementedChannelDBServer) BatchInsertOrUpdateChannelMsg(context.Context, *ReqBatchInsertOrUpdateChannelMsg) (*ReplyErr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchInsertOrUpdateChannelMsg not implemented")
}
func (UnimplementedChannelDBServer) DeleteMsgs(context.Context, *ReqDeleteMsgs) (*ReplyDeleteMsgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMsgs not implemented")
}
func (UnimplementedChannelDBServer) DeleteUserHistory(context.Context, *ReqDeleteUserHistory) (*ReplyDeleteUserHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserHistory not implemented")
}
func (UnimplementedChannelDBServer) DeleteChannelMsg(context.Context, *ReqDeleteChannelMsg) (*ReplyErr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelMsg not implemented")
}
func (UnimplementedChannelDBServer) DeleteChannelMessage(context.Context, *ReqDeleteChannelMessage) (*ReplyDeleteChannelMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelMessage not implemented")
}
func (UnimplementedChannelDBServer) GetChannelMessage(context.Context, *ReqGetChannelMessage) (*ReplyGetChannelMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMessage not implemented")
}
func (UnimplementedChannelDBServer) GetChannelMsgsByMsgIds(context.Context, *ReqGetChannelMsgsByMsgIds) (*ReplyGetChannelMsgsByMsgIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMsgsByMsgIds not implemented")
}
func (UnimplementedChannelDBServer) GetChannelMsgHistory(context.Context, *ReqGetChannelMsgHistory) (*ReplyGetChannelMsgHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMsgHistory not implemented")
}
func (UnimplementedChannelDBServer) GetChannelTopMsg(context.Context, *ReqGetChannelTopMst) (*ReplyGetChannelTopMst, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelTopMsg not implemented")
}
func (UnimplementedChannelDBServer) GetChannelMediaMessageHistoryByMedia(context.Context, *ReqGetChannelMediaMessageHistoryByMedia) (*ReplyGetChannelMediaMessageHistoryByMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMediaMessageHistoryByMedia not implemented")
}
func (UnimplementedChannelDBServer) InsertOrUpdateChannelMessageDeleteMark(context.Context, *ReqInsertOrUpdateChannelMessageDeleteMark) (*ReplyInsertOrUpdateChannelMessageDeleteMark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOrUpdateChannelMessageDeleteMark not implemented")
}
func (UnimplementedChannelDBServer) GetChannelMessageDeleteMark(context.Context, *ReqGetChannelMessageDeleteMark) (*ReplyGetChannelMessageDeleteMark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMessageDeleteMark not implemented")
}
func (UnimplementedChannelDBServer) GetChannelMediaMessageStatisticsByMedia(context.Context, *ReqGetChannelMediaMessageStatisticsByMedia) (*ReplyGetChannelMediaMessageStatisticsByMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMediaMessageStatisticsByMedia not implemented")
}
func (UnimplementedChannelDBServer) SearchChannelMediaMsgStatisticsByFilter(context.Context, *ReqSearchChannelMediaMsgByFilter) (*RespSearchChannelMediaMsgByFilter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchChannelMediaMsgStatisticsByFilter not implemented")
}
func (UnimplementedChannelDBServer) StoreAdminLog(context.Context, *ReqStoreAdminLog) (*ReplyErr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreAdminLog not implemented")
}
func (UnimplementedChannelDBServer) FindsAdminLogByChannelId(context.Context, *ReqFindsAdminLogByChannelId) (*ReplyFindsAdminLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindsAdminLogByChannelId not implemented")
}
func (UnimplementedChannelDBServer) FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(context.Context, *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) (*ReplyFindsAdminLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId not implemented")
}
func (UnimplementedChannelDBServer) FindsAdminLogByChannelIdAndEventFiltersAndUserId(context.Context, *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) (*ReplyFindsAdminLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindsAdminLogByChannelIdAndEventFiltersAndUserId not implemented")
}
func (UnimplementedChannelDBServer) FindsAdminLogByChannelIdAndUserId(context.Context, *ReqFindsAdminLogByChannelIdAndUserId) (*ReplyFindsAdminLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindsAdminLogByChannelIdAndUserId not implemented")
}
func (UnimplementedChannelDBServer) FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(context.Context, *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) (*ReplyFindsAdminLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindsAdminLogByChannelIdAndAdminUsersAndEventFilters not implemented")
}
func (UnimplementedChannelDBServer) FindsAdminLogByChannelIdAndEventFilters(context.Context, *ReqFindsAdminLogByChannelIdAndEventFilters) (*ReplyFindsAdminLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindsAdminLogByChannelIdAndEventFilters not implemented")
}
func (UnimplementedChannelDBServer) FindsAdminLogByChannelIdAndAdminUsers(context.Context, *ReqFindsAdminLogByChannelIdAndAdminUsers) (*ReplyFindsAdminLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindsAdminLogByChannelIdAndAdminUsers not implemented")
}
func (UnimplementedChannelDBServer) ChannelMessageAtAdd(context.Context, *ReqChannelMessageAtAdd) (*ReplyChannelMessageAtAdd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageAtAdd not implemented")
}
func (UnimplementedChannelDBServer) ChannelMessageAtGet(context.Context, *ReqChannelMessageAtGet) (*ReplyChannelMessageAtGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageAtGet not implemented")
}
func (UnimplementedChannelDBServer) ChannelMessageAtDel(context.Context, *ReqChannelMessageAtDel) (*ReplyChannelMessageAtDel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageAtDel not implemented")
}
func (UnimplementedChannelDBServer) UpdateChannelMsgId(context.Context, *ReqUpdateChannelMsgId) (*ReplyUpdateChannelMsgId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelMsgId not implemented")
}
func (UnimplementedChannelDBServer) mustEmbedUnimplementedChannelDBServer() {}

// UnsafeChannelDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelDBServer will
// result in compilation errors.
type UnsafeChannelDBServer interface {
	mustEmbedUnimplementedChannelDBServer()
}

func RegisterChannelDBServer(s grpc.ServiceRegistrar, srv ChannelDBServer) {
	s.RegisterService(&ChannelDB_ServiceDesc, srv)
}

func _ChannelDB_UpdateChannelMsgIdAndPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelMsgIdAndPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelMsgIdAndPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/UpdateChannelMsgIdAndPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelMsgIdAndPts(ctx, req.(*ReqUpdateChannelMsgIdAndPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_SetChannelMsgIdAndPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetChannelMsgIdAndPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).SetChannelMsgIdAndPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/SetChannelMsgIdAndPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).SetChannelMsgIdAndPts(ctx, req.(*ReqSetChannelMsgIdAndPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_UpdateChannelPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/UpdateChannelPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelPts(ctx, req.(*ReqUpdateChannelPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_UpdateChannelPtsWithNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelPtsWithNum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelPtsWithNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/UpdateChannelPtsWithNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelPtsWithNum(ctx, req.(*ReqUpdateChannelPtsWithNum))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMsgId(ctx, req.(*ReqGetChannelMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_StoreChannelPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoreChannelPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).StoreChannelPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/StoreChannelPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).StoreChannelPtsHandle(ctx, req.(*ReqStoreChannelPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_BatchStoreChannelPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBatchStoreChannelPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).BatchStoreChannelPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/BatchStoreChannelPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).BatchStoreChannelPtsHandle(ctx, req.(*ReqBatchStoreChannelPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelDiffByPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelDiffByPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelDiffByPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelDiffByPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelDiffByPts(ctx, req.(*ReqGetChannelDiffByPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelLastPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelLastPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelLastPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelLastPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelLastPtsHandle(ctx, req.(*ReqGetChannelLastPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteChannelPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteChannelPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/DeleteChannelPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteChannelPtsHandle(ctx, req.(*ReqDeleteChannelPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_InsertOrUpdateChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInsertOrUpdateChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).InsertOrUpdateChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/InsertOrUpdateChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).InsertOrUpdateChannelMsg(ctx, req.(*ReqInsertOrUpdateChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_UpdateChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/UpdateChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelMsg(ctx, req.(*ReqUpdateChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_BatchInsertOrUpdateChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBatchInsertOrUpdateChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).BatchInsertOrUpdateChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/BatchInsertOrUpdateChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).BatchInsertOrUpdateChannelMsg(ctx, req.(*ReqBatchInsertOrUpdateChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteMsgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteMsgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteMsgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/DeleteMsgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteMsgs(ctx, req.(*ReqDeleteMsgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteUserHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteUserHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteUserHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/DeleteUserHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteUserHistory(ctx, req.(*ReqDeleteUserHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/DeleteChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteChannelMsg(ctx, req.(*ReqDeleteChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/DeleteChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteChannelMessage(ctx, req.(*ReqDeleteChannelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMessage(ctx, req.(*ReqGetChannelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMsgsByMsgIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMsgsByMsgIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMsgsByMsgIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelMsgsByMsgIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMsgsByMsgIds(ctx, req.(*ReqGetChannelMsgsByMsgIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMsgHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMsgHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMsgHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelMsgHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMsgHistory(ctx, req.(*ReqGetChannelMsgHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelTopMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelTopMst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelTopMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelTopMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelTopMsg(ctx, req.(*ReqGetChannelTopMst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMediaMessageHistoryByMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMediaMessageHistoryByMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMediaMessageHistoryByMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelMediaMessageHistoryByMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMediaMessageHistoryByMedia(ctx, req.(*ReqGetChannelMediaMessageHistoryByMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_InsertOrUpdateChannelMessageDeleteMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInsertOrUpdateChannelMessageDeleteMark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).InsertOrUpdateChannelMessageDeleteMark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/InsertOrUpdateChannelMessageDeleteMark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).InsertOrUpdateChannelMessageDeleteMark(ctx, req.(*ReqInsertOrUpdateChannelMessageDeleteMark))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMessageDeleteMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMessageDeleteMark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMessageDeleteMark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelMessageDeleteMark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMessageDeleteMark(ctx, req.(*ReqGetChannelMessageDeleteMark))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMediaMessageStatisticsByMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMediaMessageStatisticsByMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMediaMessageStatisticsByMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/GetChannelMediaMessageStatisticsByMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMediaMessageStatisticsByMedia(ctx, req.(*ReqGetChannelMediaMessageStatisticsByMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_SearchChannelMediaMsgStatisticsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSearchChannelMediaMsgByFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).SearchChannelMediaMsgStatisticsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/SearchChannelMediaMsgStatisticsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).SearchChannelMediaMsgStatisticsByFilter(ctx, req.(*ReqSearchChannelMediaMsgByFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_StoreAdminLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoreAdminLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).StoreAdminLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/StoreAdminLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).StoreAdminLog(ctx, req.(*ReqStoreAdminLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/FindsAdminLogByChannelId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelId(ctx, req.(*ReqFindsAdminLogByChannelId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(ctx, req.(*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndEventFiltersAndUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndEventFiltersAndUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndEventFiltersAndUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndEventFiltersAndUserId(ctx, req.(*ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndUserId(ctx, req.(*ReqFindsAdminLogByChannelIdAndUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndAdminUsersAndEventFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsersAndEventFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(ctx, req.(*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndEventFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndEventFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndEventFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndEventFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndEventFilters(ctx, req.(*ReqFindsAdminLogByChannelIdAndEventFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndAdminUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndAdminUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsers(ctx, req.(*ReqFindsAdminLogByChannelIdAndAdminUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_ChannelMessageAtAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelMessageAtAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).ChannelMessageAtAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/ChannelMessageAtAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).ChannelMessageAtAdd(ctx, req.(*ReqChannelMessageAtAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_ChannelMessageAtGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelMessageAtGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).ChannelMessageAtGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/ChannelMessageAtGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).ChannelMessageAtGet(ctx, req.(*ReqChannelMessageAtGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_ChannelMessageAtDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelMessageAtDel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).ChannelMessageAtDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/ChannelMessageAtDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).ChannelMessageAtDel(ctx, req.(*ReqChannelMessageAtDel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_UpdateChannelMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.ChannelDB/UpdateChannelMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelMsgId(ctx, req.(*ReqUpdateChannelMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelDB_ServiceDesc is the grpc.ServiceDesc for ChannelDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messagedb.ChannelDB",
	HandlerType: (*ChannelDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateChannelMsgIdAndPts",
			Handler:    _ChannelDB_UpdateChannelMsgIdAndPts_Handler,
		},
		{
			MethodName: "SetChannelMsgIdAndPts",
			Handler:    _ChannelDB_SetChannelMsgIdAndPts_Handler,
		},
		{
			MethodName: "UpdateChannelPts",
			Handler:    _ChannelDB_UpdateChannelPts_Handler,
		},
		{
			MethodName: "UpdateChannelPtsWithNum",
			Handler:    _ChannelDB_UpdateChannelPtsWithNum_Handler,
		},
		{
			MethodName: "GetChannelMsgId",
			Handler:    _ChannelDB_GetChannelMsgId_Handler,
		},
		{
			MethodName: "StoreChannelPtsHandle",
			Handler:    _ChannelDB_StoreChannelPtsHandle_Handler,
		},
		{
			MethodName: "BatchStoreChannelPtsHandle",
			Handler:    _ChannelDB_BatchStoreChannelPtsHandle_Handler,
		},
		{
			MethodName: "GetChannelDiffByPts",
			Handler:    _ChannelDB_GetChannelDiffByPts_Handler,
		},
		{
			MethodName: "GetChannelLastPtsHandle",
			Handler:    _ChannelDB_GetChannelLastPtsHandle_Handler,
		},
		{
			MethodName: "DeleteChannelPtsHandle",
			Handler:    _ChannelDB_DeleteChannelPtsHandle_Handler,
		},
		{
			MethodName: "InsertOrUpdateChannelMsg",
			Handler:    _ChannelDB_InsertOrUpdateChannelMsg_Handler,
		},
		{
			MethodName: "UpdateChannelMsg",
			Handler:    _ChannelDB_UpdateChannelMsg_Handler,
		},
		{
			MethodName: "BatchInsertOrUpdateChannelMsg",
			Handler:    _ChannelDB_BatchInsertOrUpdateChannelMsg_Handler,
		},
		{
			MethodName: "DeleteMsgs",
			Handler:    _ChannelDB_DeleteMsgs_Handler,
		},
		{
			MethodName: "DeleteUserHistory",
			Handler:    _ChannelDB_DeleteUserHistory_Handler,
		},
		{
			MethodName: "DeleteChannelMsg",
			Handler:    _ChannelDB_DeleteChannelMsg_Handler,
		},
		{
			MethodName: "DeleteChannelMessage",
			Handler:    _ChannelDB_DeleteChannelMessage_Handler,
		},
		{
			MethodName: "GetChannelMessage",
			Handler:    _ChannelDB_GetChannelMessage_Handler,
		},
		{
			MethodName: "GetChannelMsgsByMsgIds",
			Handler:    _ChannelDB_GetChannelMsgsByMsgIds_Handler,
		},
		{
			MethodName: "GetChannelMsgHistory",
			Handler:    _ChannelDB_GetChannelMsgHistory_Handler,
		},
		{
			MethodName: "GetChannelTopMsg",
			Handler:    _ChannelDB_GetChannelTopMsg_Handler,
		},
		{
			MethodName: "GetChannelMediaMessageHistoryByMedia",
			Handler:    _ChannelDB_GetChannelMediaMessageHistoryByMedia_Handler,
		},
		{
			MethodName: "InsertOrUpdateChannelMessageDeleteMark",
			Handler:    _ChannelDB_InsertOrUpdateChannelMessageDeleteMark_Handler,
		},
		{
			MethodName: "GetChannelMessageDeleteMark",
			Handler:    _ChannelDB_GetChannelMessageDeleteMark_Handler,
		},
		{
			MethodName: "GetChannelMediaMessageStatisticsByMedia",
			Handler:    _ChannelDB_GetChannelMediaMessageStatisticsByMedia_Handler,
		},
		{
			MethodName: "SearchChannelMediaMsgStatisticsByFilter",
			Handler:    _ChannelDB_SearchChannelMediaMsgStatisticsByFilter_Handler,
		},
		{
			MethodName: "StoreAdminLog",
			Handler:    _ChannelDB_StoreAdminLog_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelId",
			Handler:    _ChannelDB_FindsAdminLogByChannelId_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndEventFiltersAndUserId",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndEventFiltersAndUserId_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndUserId",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndUserId_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndAdminUsersAndEventFilters",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndAdminUsersAndEventFilters_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndEventFilters",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndEventFilters_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndAdminUsers",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndAdminUsers_Handler,
		},
		{
			MethodName: "ChannelMessageAtAdd",
			Handler:    _ChannelDB_ChannelMessageAtAdd_Handler,
		},
		{
			MethodName: "ChannelMessageAtGet",
			Handler:    _ChannelDB_ChannelMessageAtGet_Handler,
		},
		{
			MethodName: "ChannelMessageAtDel",
			Handler:    _ChannelDB_ChannelMessageAtDel_Handler,
		},
		{
			MethodName: "UpdateChannelMsgId",
			Handler:    _ChannelDB_UpdateChannelMsgId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messagedb.proto",
}

// SearchMsgServerClient is the client API for SearchMsgServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchMsgServerClient interface {
	// 插入单条 usermsg 内容
	ShInsertOrUpdateUserMsg(ctx context.Context, in *UserMsg, opts ...grpc.CallOption) (*ReplyNull, error)
	// 删除用户信息
	ShDeleteUserMsg(ctx context.Context, in *UserIdAndMsgId, opts ...grpc.CallOption) (*ReplyNull, error)
	// 批量删除用户信息
	ShBatchDeleteUserMsg(ctx context.Context, in *UserIdAndWithIdAndMsgIds, opts ...grpc.CallOption) (*ReplyNull, error)
	// 删除信息
	ShDeleteUserMsgByUserIdAndWithIdAndEncry(ctx context.Context, in *UserIdAndWithIdAndTypeAndEncry, opts ...grpc.CallOption) (*ReplyNull, error)
	// 新增或者更新消息
	ShInsertOrUpdateChannelMsg(ctx context.Context, in *UserMsg, opts ...grpc.CallOption) (*ReplyNull, error)
	// 删除信息
	ShDeleteMsgs(ctx context.Context, in *ChannelIdAndMsgIds, opts ...grpc.CallOption) (*MsgId, error)
	// 超级群中删除指定用户信息
	ShDeleteUserHistory(ctx context.Context, in *ReqShDeleteUserHistory, opts ...grpc.CallOption) (*MsgsAndMaxId, error)
}

type searchMsgServerClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchMsgServerClient(cc grpc.ClientConnInterface) SearchMsgServerClient {
	return &searchMsgServerClient{cc}
}

func (c *searchMsgServerClient) ShInsertOrUpdateUserMsg(ctx context.Context, in *UserMsg, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.SearchMsgServer/ShInsertOrUpdateUserMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchMsgServerClient) ShDeleteUserMsg(ctx context.Context, in *UserIdAndMsgId, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.SearchMsgServer/ShDeleteUserMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchMsgServerClient) ShBatchDeleteUserMsg(ctx context.Context, in *UserIdAndWithIdAndMsgIds, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.SearchMsgServer/ShBatchDeleteUserMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchMsgServerClient) ShDeleteUserMsgByUserIdAndWithIdAndEncry(ctx context.Context, in *UserIdAndWithIdAndTypeAndEncry, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.SearchMsgServer/ShDeleteUserMsgByUserIdAndWithIdAndEncry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchMsgServerClient) ShInsertOrUpdateChannelMsg(ctx context.Context, in *UserMsg, opts ...grpc.CallOption) (*ReplyNull, error) {
	out := new(ReplyNull)
	err := c.cc.Invoke(ctx, "/messagedb.SearchMsgServer/ShInsertOrUpdateChannelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchMsgServerClient) ShDeleteMsgs(ctx context.Context, in *ChannelIdAndMsgIds, opts ...grpc.CallOption) (*MsgId, error) {
	out := new(MsgId)
	err := c.cc.Invoke(ctx, "/messagedb.SearchMsgServer/ShDeleteMsgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchMsgServerClient) ShDeleteUserHistory(ctx context.Context, in *ReqShDeleteUserHistory, opts ...grpc.CallOption) (*MsgsAndMaxId, error) {
	out := new(MsgsAndMaxId)
	err := c.cc.Invoke(ctx, "/messagedb.SearchMsgServer/ShDeleteUserHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchMsgServerServer is the server API for SearchMsgServer service.
// All implementations must embed UnimplementedSearchMsgServerServer
// for forward compatibility
type SearchMsgServerServer interface {
	// 插入单条 usermsg 内容
	ShInsertOrUpdateUserMsg(context.Context, *UserMsg) (*ReplyNull, error)
	// 删除用户信息
	ShDeleteUserMsg(context.Context, *UserIdAndMsgId) (*ReplyNull, error)
	// 批量删除用户信息
	ShBatchDeleteUserMsg(context.Context, *UserIdAndWithIdAndMsgIds) (*ReplyNull, error)
	// 删除信息
	ShDeleteUserMsgByUserIdAndWithIdAndEncry(context.Context, *UserIdAndWithIdAndTypeAndEncry) (*ReplyNull, error)
	// 新增或者更新消息
	ShInsertOrUpdateChannelMsg(context.Context, *UserMsg) (*ReplyNull, error)
	// 删除信息
	ShDeleteMsgs(context.Context, *ChannelIdAndMsgIds) (*MsgId, error)
	// 超级群中删除指定用户信息
	ShDeleteUserHistory(context.Context, *ReqShDeleteUserHistory) (*MsgsAndMaxId, error)
	mustEmbedUnimplementedSearchMsgServerServer()
}

// UnimplementedSearchMsgServerServer must be embedded to have forward compatible implementations.
type UnimplementedSearchMsgServerServer struct {
}

func (UnimplementedSearchMsgServerServer) ShInsertOrUpdateUserMsg(context.Context, *UserMsg) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShInsertOrUpdateUserMsg not implemented")
}
func (UnimplementedSearchMsgServerServer) ShDeleteUserMsg(context.Context, *UserIdAndMsgId) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShDeleteUserMsg not implemented")
}
func (UnimplementedSearchMsgServerServer) ShBatchDeleteUserMsg(context.Context, *UserIdAndWithIdAndMsgIds) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShBatchDeleteUserMsg not implemented")
}
func (UnimplementedSearchMsgServerServer) ShDeleteUserMsgByUserIdAndWithIdAndEncry(context.Context, *UserIdAndWithIdAndTypeAndEncry) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShDeleteUserMsgByUserIdAndWithIdAndEncry not implemented")
}
func (UnimplementedSearchMsgServerServer) ShInsertOrUpdateChannelMsg(context.Context, *UserMsg) (*ReplyNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShInsertOrUpdateChannelMsg not implemented")
}
func (UnimplementedSearchMsgServerServer) ShDeleteMsgs(context.Context, *ChannelIdAndMsgIds) (*MsgId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShDeleteMsgs not implemented")
}
func (UnimplementedSearchMsgServerServer) ShDeleteUserHistory(context.Context, *ReqShDeleteUserHistory) (*MsgsAndMaxId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShDeleteUserHistory not implemented")
}
func (UnimplementedSearchMsgServerServer) mustEmbedUnimplementedSearchMsgServerServer() {}

// UnsafeSearchMsgServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchMsgServerServer will
// result in compilation errors.
type UnsafeSearchMsgServerServer interface {
	mustEmbedUnimplementedSearchMsgServerServer()
}

func RegisterSearchMsgServerServer(s grpc.ServiceRegistrar, srv SearchMsgServerServer) {
	s.RegisterService(&SearchMsgServer_ServiceDesc, srv)
}

func _SearchMsgServer_ShInsertOrUpdateUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchMsgServerServer).ShInsertOrUpdateUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.SearchMsgServer/ShInsertOrUpdateUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchMsgServerServer).ShInsertOrUpdateUserMsg(ctx, req.(*UserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchMsgServer_ShDeleteUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdAndMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchMsgServerServer).ShDeleteUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.SearchMsgServer/ShDeleteUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchMsgServerServer).ShDeleteUserMsg(ctx, req.(*UserIdAndMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchMsgServer_ShBatchDeleteUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdAndWithIdAndMsgIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchMsgServerServer).ShBatchDeleteUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.SearchMsgServer/ShBatchDeleteUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchMsgServerServer).ShBatchDeleteUserMsg(ctx, req.(*UserIdAndWithIdAndMsgIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchMsgServer_ShDeleteUserMsgByUserIdAndWithIdAndEncry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdAndWithIdAndTypeAndEncry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchMsgServerServer).ShDeleteUserMsgByUserIdAndWithIdAndEncry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.SearchMsgServer/ShDeleteUserMsgByUserIdAndWithIdAndEncry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchMsgServerServer).ShDeleteUserMsgByUserIdAndWithIdAndEncry(ctx, req.(*UserIdAndWithIdAndTypeAndEncry))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchMsgServer_ShInsertOrUpdateChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchMsgServerServer).ShInsertOrUpdateChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.SearchMsgServer/ShInsertOrUpdateChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchMsgServerServer).ShInsertOrUpdateChannelMsg(ctx, req.(*UserMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchMsgServer_ShDeleteMsgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelIdAndMsgIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchMsgServerServer).ShDeleteMsgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.SearchMsgServer/ShDeleteMsgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchMsgServerServer).ShDeleteMsgs(ctx, req.(*ChannelIdAndMsgIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchMsgServer_ShDeleteUserHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqShDeleteUserHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchMsgServerServer).ShDeleteUserHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messagedb.SearchMsgServer/ShDeleteUserHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchMsgServerServer).ShDeleteUserHistory(ctx, req.(*ReqShDeleteUserHistory))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchMsgServer_ServiceDesc is the grpc.ServiceDesc for SearchMsgServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchMsgServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messagedb.SearchMsgServer",
	HandlerType: (*SearchMsgServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShInsertOrUpdateUserMsg",
			Handler:    _SearchMsgServer_ShInsertOrUpdateUserMsg_Handler,
		},
		{
			MethodName: "ShDeleteUserMsg",
			Handler:    _SearchMsgServer_ShDeleteUserMsg_Handler,
		},
		{
			MethodName: "ShBatchDeleteUserMsg",
			Handler:    _SearchMsgServer_ShBatchDeleteUserMsg_Handler,
		},
		{
			MethodName: "ShDeleteUserMsgByUserIdAndWithIdAndEncry",
			Handler:    _SearchMsgServer_ShDeleteUserMsgByUserIdAndWithIdAndEncry_Handler,
		},
		{
			MethodName: "ShInsertOrUpdateChannelMsg",
			Handler:    _SearchMsgServer_ShInsertOrUpdateChannelMsg_Handler,
		},
		{
			MethodName: "ShDeleteMsgs",
			Handler:    _SearchMsgServer_ShDeleteMsgs_Handler,
		},
		{
			MethodName: "ShDeleteUserHistory",
			Handler:    _SearchMsgServer_ShDeleteUserHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messagedb.proto",
}
