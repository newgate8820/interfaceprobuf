// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: getserver.proto

package getserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerServiceClient is the client API for ServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerServiceClient interface {
	//原help下getconfig方法,主要提供IP
	GetConfigServer(ctx context.Context, in *GetConfigServerReq, opts ...grpc.CallOption) (*SerRes, error)
	//原help下其他方法,获取其他内容：版本更新,InviteText等
	GetOtherHelpServer(ctx context.Context, in *GetOtherReq, opts ...grpc.CallOption) (*SerRes, error)
	// 获取group invite prefix配置
	GroupInvitePrefix(ctx context.Context, in *GroupInvitePrefixRequest, opts ...grpc.CallOption) (*GroupInvitePrefixReply, error)
	// 获取重复申请好友的间隔
	GetContactApplyExpire(ctx context.Context, in *GetContactApplyExpireRequest, opts ...grpc.CallOption) (*GetContactApplyExpireResponse, error)
}

type serverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerServiceClient(cc grpc.ClientConnInterface) ServerServiceClient {
	return &serverServiceClient{cc}
}

func (c *serverServiceClient) GetConfigServer(ctx context.Context, in *GetConfigServerReq, opts ...grpc.CallOption) (*SerRes, error) {
	out := new(SerRes)
	err := c.cc.Invoke(ctx, "/getserver.ServerService/GetConfigServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetOtherHelpServer(ctx context.Context, in *GetOtherReq, opts ...grpc.CallOption) (*SerRes, error) {
	out := new(SerRes)
	err := c.cc.Invoke(ctx, "/getserver.ServerService/GetOtherHelpServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GroupInvitePrefix(ctx context.Context, in *GroupInvitePrefixRequest, opts ...grpc.CallOption) (*GroupInvitePrefixReply, error) {
	out := new(GroupInvitePrefixReply)
	err := c.cc.Invoke(ctx, "/getserver.ServerService/GroupInvitePrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetContactApplyExpire(ctx context.Context, in *GetContactApplyExpireRequest, opts ...grpc.CallOption) (*GetContactApplyExpireResponse, error) {
	out := new(GetContactApplyExpireResponse)
	err := c.cc.Invoke(ctx, "/getserver.ServerService/GetContactApplyExpire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServiceServer is the server API for ServerService service.
// All implementations must embed UnimplementedServerServiceServer
// for forward compatibility
type ServerServiceServer interface {
	//原help下getconfig方法,主要提供IP
	GetConfigServer(context.Context, *GetConfigServerReq) (*SerRes, error)
	//原help下其他方法,获取其他内容：版本更新,InviteText等
	GetOtherHelpServer(context.Context, *GetOtherReq) (*SerRes, error)
	// 获取group invite prefix配置
	GroupInvitePrefix(context.Context, *GroupInvitePrefixRequest) (*GroupInvitePrefixReply, error)
	// 获取重复申请好友的间隔
	GetContactApplyExpire(context.Context, *GetContactApplyExpireRequest) (*GetContactApplyExpireResponse, error)
	mustEmbedUnimplementedServerServiceServer()
}

// UnimplementedServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerServiceServer struct {
}

func (UnimplementedServerServiceServer) GetConfigServer(context.Context, *GetConfigServerReq) (*SerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigServer not implemented")
}
func (UnimplementedServerServiceServer) GetOtherHelpServer(context.Context, *GetOtherReq) (*SerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOtherHelpServer not implemented")
}
func (UnimplementedServerServiceServer) GroupInvitePrefix(context.Context, *GroupInvitePrefixRequest) (*GroupInvitePrefixReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInvitePrefix not implemented")
}
func (UnimplementedServerServiceServer) GetContactApplyExpire(context.Context, *GetContactApplyExpireRequest) (*GetContactApplyExpireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactApplyExpire not implemented")
}
func (UnimplementedServerServiceServer) mustEmbedUnimplementedServerServiceServer() {}

// UnsafeServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServiceServer will
// result in compilation errors.
type UnsafeServerServiceServer interface {
	mustEmbedUnimplementedServerServiceServer()
}

func RegisterServerServiceServer(s grpc.ServiceRegistrar, srv ServerServiceServer) {
	s.RegisterService(&ServerService_ServiceDesc, srv)
}

func _ServerService_GetConfigServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetConfigServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/getserver.ServerService/GetConfigServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetConfigServer(ctx, req.(*GetConfigServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetOtherHelpServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOtherReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetOtherHelpServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/getserver.ServerService/GetOtherHelpServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetOtherHelpServer(ctx, req.(*GetOtherReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GroupInvitePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInvitePrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GroupInvitePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/getserver.ServerService/GroupInvitePrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GroupInvitePrefix(ctx, req.(*GroupInvitePrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetContactApplyExpire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactApplyExpireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetContactApplyExpire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/getserver.ServerService/GetContactApplyExpire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetContactApplyExpire(ctx, req.(*GetContactApplyExpireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerService_ServiceDesc is the grpc.ServiceDesc for ServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "getserver.ServerService",
	HandlerType: (*ServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfigServer",
			Handler:    _ServerService_GetConfigServer_Handler,
		},
		{
			MethodName: "GetOtherHelpServer",
			Handler:    _ServerService_GetOtherHelpServer_Handler,
		},
		{
			MethodName: "GroupInvitePrefix",
			Handler:    _ServerService_GroupInvitePrefix_Handler,
		},
		{
			MethodName: "GetContactApplyExpire",
			Handler:    _ServerService_GetContactApplyExpire_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "getserver.proto",
}
