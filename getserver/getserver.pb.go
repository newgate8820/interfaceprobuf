// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: getserver.proto

/*
Package getserver is a generated protocol buffer package.

It is generated from these files:

	getserver.proto

It has these top-level messages:

	GetConfigServerReq
	SerRes
	GetOtherReq
	GroupInvitePrefixRequest
	GroupInvitePrefixReply
	GetContactApplyExpireRequest
	GetContactApplyExpireResponse
*/
package getserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetConfigServerReq struct {
	ObjBin     []byte `protobuf:"bytes,1,opt,name=objBin,proto3" json:"objBin,omitempty"`
	CrcId      uint32 `protobuf:"varint,2,opt,name=crcId,proto3" json:"crcId,omitempty"`
	ReMessagId int64  `protobuf:"varint,3,opt,name=reMessagId,proto3" json:"reMessagId,omitempty"`
	UserId     int32  `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	KeyId      int64  `protobuf:"varint,5,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Layer      int32  `protobuf:"varint,6,opt,name=layer,proto3" json:"layer,omitempty"`
	ConfigTime int32  `protobuf:"varint,7,opt,name=configTime,proto3" json:"configTime,omitempty"`
	IsProxy    bool   `protobuf:"varint,8,opt,name=isProxy,proto3" json:"isProxy,omitempty"`
	ProxyIp    string `protobuf:"bytes,9,opt,name=proxyIp,proto3" json:"proxyIp,omitempty"`
	ClientIp   string `protobuf:"bytes,10,opt,name=clientIp,proto3" json:"clientIp,omitempty"`
	Phone      string `protobuf:"bytes,11,opt,name=phone,proto3" json:"phone,omitempty"`
	SessionId  uint64 `protobuf:"varint,12,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Ostype     uint32 `protobuf:"varint,13,opt,name=ostype,proto3" json:"ostype,omitempty"`
	AppVersion string `protobuf:"bytes,14,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	MessageId  uint64 `protobuf:"varint,15,opt,name=messageId,proto3" json:"messageId,omitempty"`
	ApiId      int32  `protobuf:"varint,16,opt,name=apiId,proto3" json:"apiId,omitempty"`
}

func (m *GetConfigServerReq) Reset()                    { *m = GetConfigServerReq{} }
func (m *GetConfigServerReq) String() string            { return proto.CompactTextString(m) }
func (*GetConfigServerReq) ProtoMessage()               {}
func (*GetConfigServerReq) Descriptor() ([]byte, []int) { return fileDescriptorGetserver, []int{0} }

func (m *GetConfigServerReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *GetConfigServerReq) GetCrcId() uint32 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *GetConfigServerReq) GetReMessagId() int64 {
	if m != nil {
		return m.ReMessagId
	}
	return 0
}

func (m *GetConfigServerReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetConfigServerReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *GetConfigServerReq) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *GetConfigServerReq) GetConfigTime() int32 {
	if m != nil {
		return m.ConfigTime
	}
	return 0
}

func (m *GetConfigServerReq) GetIsProxy() bool {
	if m != nil {
		return m.IsProxy
	}
	return false
}

func (m *GetConfigServerReq) GetProxyIp() string {
	if m != nil {
		return m.ProxyIp
	}
	return ""
}

func (m *GetConfigServerReq) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *GetConfigServerReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *GetConfigServerReq) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *GetConfigServerReq) GetOstype() uint32 {
	if m != nil {
		return m.Ostype
	}
	return 0
}

func (m *GetConfigServerReq) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *GetConfigServerReq) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *GetConfigServerReq) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

type SerRes struct {
	Result    []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (m *SerRes) Reset()                    { *m = SerRes{} }
func (m *SerRes) String() string            { return proto.CompactTextString(m) }
func (*SerRes) ProtoMessage()               {}
func (*SerRes) Descriptor() ([]byte, []int) { return fileDescriptorGetserver, []int{1} }

func (m *SerRes) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SerRes) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type GetOtherReq struct {
	ObjBin      []byte `protobuf:"bytes,1,opt,name=objBin,proto3" json:"objBin,omitempty"`
	CrcId       uint32 `protobuf:"varint,2,opt,name=crcId,proto3" json:"crcId,omitempty"`
	ReMessagId  int64  `protobuf:"varint,3,opt,name=reMessagId,proto3" json:"reMessagId,omitempty"`
	UserId      int32  `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	KeyId       int64  `protobuf:"varint,5,opt,name=keyId,proto3" json:"keyId,omitempty"`
	UserDcId    int32  `protobuf:"varint,6,opt,name=userDcId,proto3" json:"userDcId,omitempty"`
	MessageId   uint64 `protobuf:"varint,7,opt,name=messageId,proto3" json:"messageId,omitempty"`
	AppVersion  string `protobuf:"bytes,8,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	PlatForm    int32  `protobuf:"varint,9,opt,name=platForm,proto3" json:"platForm,omitempty"`
	Layer       int32  `protobuf:"varint,10,opt,name=layer,proto3" json:"layer,omitempty"`
	ApiId       int32  `protobuf:"varint,11,opt,name=apiId,proto3" json:"apiId,omitempty"`
	DeviceModel string `protobuf:"bytes,12,opt,name=deviceModel,proto3" json:"deviceModel,omitempty"`
	ClientIp    string `protobuf:"bytes,13,opt,name=clientIp,proto3" json:"clientIp,omitempty"`
	Phone       string `protobuf:"bytes,14,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (m *GetOtherReq) Reset()                    { *m = GetOtherReq{} }
func (m *GetOtherReq) String() string            { return proto.CompactTextString(m) }
func (*GetOtherReq) ProtoMessage()               {}
func (*GetOtherReq) Descriptor() ([]byte, []int) { return fileDescriptorGetserver, []int{2} }

func (m *GetOtherReq) GetObjBin() []byte {
	if m != nil {
		return m.ObjBin
	}
	return nil
}

func (m *GetOtherReq) GetCrcId() uint32 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *GetOtherReq) GetReMessagId() int64 {
	if m != nil {
		return m.ReMessagId
	}
	return 0
}

func (m *GetOtherReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetOtherReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *GetOtherReq) GetUserDcId() int32 {
	if m != nil {
		return m.UserDcId
	}
	return 0
}

func (m *GetOtherReq) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *GetOtherReq) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *GetOtherReq) GetPlatForm() int32 {
	if m != nil {
		return m.PlatForm
	}
	return 0
}

func (m *GetOtherReq) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *GetOtherReq) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

func (m *GetOtherReq) GetDeviceModel() string {
	if m != nil {
		return m.DeviceModel
	}
	return ""
}

func (m *GetOtherReq) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *GetOtherReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type GroupInvitePrefixRequest struct {
}

func (m *GroupInvitePrefixRequest) Reset()         { *m = GroupInvitePrefixRequest{} }
func (m *GroupInvitePrefixRequest) String() string { return proto.CompactTextString(m) }
func (*GroupInvitePrefixRequest) ProtoMessage()    {}
func (*GroupInvitePrefixRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorGetserver, []int{3}
}

type GroupInvitePrefixReply struct {
	GroupInvitePrefix string `protobuf:"bytes,1,opt,name=group_invite_prefix,json=groupInvitePrefix,proto3" json:"group_invite_prefix,omitempty"`
	ExpireMin         int64  `protobuf:"varint,2,opt,name=expire_min,json=expireMin,proto3" json:"expire_min,omitempty"`
}

func (m *GroupInvitePrefixReply) Reset()                    { *m = GroupInvitePrefixReply{} }
func (m *GroupInvitePrefixReply) String() string            { return proto.CompactTextString(m) }
func (*GroupInvitePrefixReply) ProtoMessage()               {}
func (*GroupInvitePrefixReply) Descriptor() ([]byte, []int) { return fileDescriptorGetserver, []int{4} }

func (m *GroupInvitePrefixReply) GetGroupInvitePrefix() string {
	if m != nil {
		return m.GroupInvitePrefix
	}
	return ""
}

func (m *GroupInvitePrefixReply) GetExpireMin() int64 {
	if m != nil {
		return m.ExpireMin
	}
	return 0
}

type GetContactApplyExpireRequest struct {
}

func (m *GetContactApplyExpireRequest) Reset()         { *m = GetContactApplyExpireRequest{} }
func (m *GetContactApplyExpireRequest) String() string { return proto.CompactTextString(m) }
func (*GetContactApplyExpireRequest) ProtoMessage()    {}
func (*GetContactApplyExpireRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorGetserver, []int{5}
}

type GetContactApplyExpireResponse struct {
	DurationHours int64 `protobuf:"varint,1,opt,name=duration_hours,json=durationHours,proto3" json:"duration_hours,omitempty"`
}

func (m *GetContactApplyExpireResponse) Reset()         { *m = GetContactApplyExpireResponse{} }
func (m *GetContactApplyExpireResponse) String() string { return proto.CompactTextString(m) }
func (*GetContactApplyExpireResponse) ProtoMessage()    {}
func (*GetContactApplyExpireResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorGetserver, []int{6}
}

func (m *GetContactApplyExpireResponse) GetDurationHours() int64 {
	if m != nil {
		return m.DurationHours
	}
	return 0
}

func init() {
	proto.RegisterType((*GetConfigServerReq)(nil), "getserver.GetConfigServerReq")
	proto.RegisterType((*SerRes)(nil), "getserver.SerRes")
	proto.RegisterType((*GetOtherReq)(nil), "getserver.GetOtherReq")
	proto.RegisterType((*GroupInvitePrefixRequest)(nil), "getserver.GroupInvitePrefixRequest")
	proto.RegisterType((*GroupInvitePrefixReply)(nil), "getserver.GroupInvitePrefixReply")
	proto.RegisterType((*GetContactApplyExpireRequest)(nil), "getserver.GetContactApplyExpireRequest")
	proto.RegisterType((*GetContactApplyExpireResponse)(nil), "getserver.GetContactApplyExpireResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServerService service

type ServerServiceClient interface {
	// 原help下getconfig方法,主要提供IP
	GetConfigServer(ctx context.Context, in *GetConfigServerReq, opts ...grpc.CallOption) (*SerRes, error)
	// 原help下其他方法,获取其他内容：版本更新,InviteText等
	GetOtherHelpServer(ctx context.Context, in *GetOtherReq, opts ...grpc.CallOption) (*SerRes, error)
	// 获取group invite prefix配置
	GroupInvitePrefix(ctx context.Context, in *GroupInvitePrefixRequest, opts ...grpc.CallOption) (*GroupInvitePrefixReply, error)
	// 获取重复申请好友的间隔
	GetContactApplyExpire(ctx context.Context, in *GetContactApplyExpireRequest, opts ...grpc.CallOption) (*GetContactApplyExpireResponse, error)
}

type serverServiceClient struct {
	cc *grpc.ClientConn
}

func NewServerServiceClient(cc *grpc.ClientConn) ServerServiceClient {
	return &serverServiceClient{cc}
}

func (c *serverServiceClient) GetConfigServer(ctx context.Context, in *GetConfigServerReq, opts ...grpc.CallOption) (*SerRes, error) {
	out := new(SerRes)
	err := grpc.Invoke(ctx, "/getserver.ServerService/GetConfigServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetOtherHelpServer(ctx context.Context, in *GetOtherReq, opts ...grpc.CallOption) (*SerRes, error) {
	out := new(SerRes)
	err := grpc.Invoke(ctx, "/getserver.ServerService/GetOtherHelpServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GroupInvitePrefix(ctx context.Context, in *GroupInvitePrefixRequest, opts ...grpc.CallOption) (*GroupInvitePrefixReply, error) {
	out := new(GroupInvitePrefixReply)
	err := grpc.Invoke(ctx, "/getserver.ServerService/GroupInvitePrefix", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetContactApplyExpire(ctx context.Context, in *GetContactApplyExpireRequest, opts ...grpc.CallOption) (*GetContactApplyExpireResponse, error) {
	out := new(GetContactApplyExpireResponse)
	err := grpc.Invoke(ctx, "/getserver.ServerService/GetContactApplyExpire", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServerService service

type ServerServiceServer interface {
	// 原help下getconfig方法,主要提供IP
	GetConfigServer(context.Context, *GetConfigServerReq) (*SerRes, error)
	// 原help下其他方法,获取其他内容：版本更新,InviteText等
	GetOtherHelpServer(context.Context, *GetOtherReq) (*SerRes, error)
	// 获取group invite prefix配置
	GroupInvitePrefix(context.Context, *GroupInvitePrefixRequest) (*GroupInvitePrefixReply, error)
	// 获取重复申请好友的间隔
	GetContactApplyExpire(context.Context, *GetContactApplyExpireRequest) (*GetContactApplyExpireResponse, error)
}

func RegisterServerServiceServer(s *grpc.Server, srv ServerServiceServer) {
	s.RegisterService(&_ServerService_serviceDesc, srv)
}

func _ServerService_GetConfigServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetConfigServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/getserver.ServerService/GetConfigServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetConfigServer(ctx, req.(*GetConfigServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetOtherHelpServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOtherReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetOtherHelpServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/getserver.ServerService/GetOtherHelpServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetOtherHelpServer(ctx, req.(*GetOtherReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GroupInvitePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInvitePrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GroupInvitePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/getserver.ServerService/GroupInvitePrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GroupInvitePrefix(ctx, req.(*GroupInvitePrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetContactApplyExpire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactApplyExpireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetContactApplyExpire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/getserver.ServerService/GetContactApplyExpire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetContactApplyExpire(ctx, req.(*GetContactApplyExpireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "getserver.ServerService",
	HandlerType: (*ServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfigServer",
			Handler:    _ServerService_GetConfigServer_Handler,
		},
		{
			MethodName: "GetOtherHelpServer",
			Handler:    _ServerService_GetOtherHelpServer_Handler,
		},
		{
			MethodName: "GroupInvitePrefix",
			Handler:    _ServerService_GroupInvitePrefix_Handler,
		},
		{
			MethodName: "GetContactApplyExpire",
			Handler:    _ServerService_GetContactApplyExpire_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "getserver.proto",
}

func (m *GetConfigServerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConfigServerReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.CrcId))
	}
	if m.ReMessagId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.ReMessagId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Layer != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.Layer))
	}
	if m.ConfigTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.ConfigTime))
	}
	if m.IsProxy {
		dAtA[i] = 0x40
		i++
		if m.IsProxy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ProxyIp) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(len(m.ProxyIp)))
		i += copy(dAtA[i:], m.ProxyIp)
	}
	if len(m.ClientIp) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(len(m.ClientIp)))
		i += copy(dAtA[i:], m.ClientIp)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.SessionId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.SessionId))
	}
	if m.Ostype != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.Ostype))
	}
	if len(m.AppVersion) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(len(m.AppVersion)))
		i += copy(dAtA[i:], m.AppVersion)
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.MessageId))
	}
	if m.ApiId != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.ApiId))
	}
	return i, nil
}

func (m *SerRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SerRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetOtherReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOtherReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjBin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(len(m.ObjBin)))
		i += copy(dAtA[i:], m.ObjBin)
	}
	if m.CrcId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.CrcId))
	}
	if m.ReMessagId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.ReMessagId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.KeyId))
	}
	if m.UserDcId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.UserDcId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.MessageId))
	}
	if len(m.AppVersion) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(len(m.AppVersion)))
		i += copy(dAtA[i:], m.AppVersion)
	}
	if m.PlatForm != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.PlatForm))
	}
	if m.Layer != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.Layer))
	}
	if m.ApiId != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.ApiId))
	}
	if len(m.DeviceModel) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(len(m.DeviceModel)))
		i += copy(dAtA[i:], m.DeviceModel)
	}
	if len(m.ClientIp) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(len(m.ClientIp)))
		i += copy(dAtA[i:], m.ClientIp)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	return i, nil
}

func (m *GroupInvitePrefixRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupInvitePrefixRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GroupInvitePrefixReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupInvitePrefixReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupInvitePrefix) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(len(m.GroupInvitePrefix)))
		i += copy(dAtA[i:], m.GroupInvitePrefix)
	}
	if m.ExpireMin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.ExpireMin))
	}
	return i, nil
}

func (m *GetContactApplyExpireRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContactApplyExpireRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetContactApplyExpireResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContactApplyExpireResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DurationHours != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGetserver(dAtA, i, uint64(m.DurationHours))
	}
	return i, nil
}

func encodeVarintGetserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetConfigServerReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovGetserver(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovGetserver(uint64(m.CrcId))
	}
	if m.ReMessagId != 0 {
		n += 1 + sovGetserver(uint64(m.ReMessagId))
	}
	if m.UserId != 0 {
		n += 1 + sovGetserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovGetserver(uint64(m.KeyId))
	}
	if m.Layer != 0 {
		n += 1 + sovGetserver(uint64(m.Layer))
	}
	if m.ConfigTime != 0 {
		n += 1 + sovGetserver(uint64(m.ConfigTime))
	}
	if m.IsProxy {
		n += 2
	}
	l = len(m.ProxyIp)
	if l > 0 {
		n += 1 + l + sovGetserver(uint64(l))
	}
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovGetserver(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovGetserver(uint64(l))
	}
	if m.SessionId != 0 {
		n += 1 + sovGetserver(uint64(m.SessionId))
	}
	if m.Ostype != 0 {
		n += 1 + sovGetserver(uint64(m.Ostype))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovGetserver(uint64(l))
	}
	if m.MessageId != 0 {
		n += 1 + sovGetserver(uint64(m.MessageId))
	}
	if m.ApiId != 0 {
		n += 2 + sovGetserver(uint64(m.ApiId))
	}
	return n
}

func (m *SerRes) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovGetserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovGetserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetOtherReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjBin)
	if l > 0 {
		n += 1 + l + sovGetserver(uint64(l))
	}
	if m.CrcId != 0 {
		n += 1 + sovGetserver(uint64(m.CrcId))
	}
	if m.ReMessagId != 0 {
		n += 1 + sovGetserver(uint64(m.ReMessagId))
	}
	if m.UserId != 0 {
		n += 1 + sovGetserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovGetserver(uint64(m.KeyId))
	}
	if m.UserDcId != 0 {
		n += 1 + sovGetserver(uint64(m.UserDcId))
	}
	if m.MessageId != 0 {
		n += 1 + sovGetserver(uint64(m.MessageId))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovGetserver(uint64(l))
	}
	if m.PlatForm != 0 {
		n += 1 + sovGetserver(uint64(m.PlatForm))
	}
	if m.Layer != 0 {
		n += 1 + sovGetserver(uint64(m.Layer))
	}
	if m.ApiId != 0 {
		n += 1 + sovGetserver(uint64(m.ApiId))
	}
	l = len(m.DeviceModel)
	if l > 0 {
		n += 1 + l + sovGetserver(uint64(l))
	}
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovGetserver(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovGetserver(uint64(l))
	}
	return n
}

func (m *GroupInvitePrefixRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GroupInvitePrefixReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.GroupInvitePrefix)
	if l > 0 {
		n += 1 + l + sovGetserver(uint64(l))
	}
	if m.ExpireMin != 0 {
		n += 1 + sovGetserver(uint64(m.ExpireMin))
	}
	return n
}

func (m *GetContactApplyExpireRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetContactApplyExpireResponse) Size() (n int) {
	var l int
	_ = l
	if m.DurationHours != 0 {
		n += 1 + sovGetserver(uint64(m.DurationHours))
	}
	return n
}

func sovGetserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGetserver(x uint64) (n int) {
	return sovGetserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetConfigServerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConfigServerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConfigServerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGetserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReMessagId", wireType)
			}
			m.ReMessagId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReMessagId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer", wireType)
			}
			m.Layer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigTime", wireType)
			}
			m.ConfigTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsProxy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsProxy = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ostype", wireType)
			}
			m.Ostype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ostype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiId", wireType)
			}
			m.ApiId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGetserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SerRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGetserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGetserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOtherReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOtherReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOtherReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjBin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGetserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjBin = append(m.ObjBin[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjBin == nil {
				m.ObjBin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcId", wireType)
			}
			m.CrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReMessagId", wireType)
			}
			m.ReMessagId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReMessagId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDcId", wireType)
			}
			m.UserDcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserDcId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatForm", wireType)
			}
			m.PlatForm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatForm |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer", wireType)
			}
			m.Layer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiId", wireType)
			}
			m.ApiId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGetserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupInvitePrefixRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupInvitePrefixRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupInvitePrefixRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGetserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupInvitePrefixReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupInvitePrefixReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupInvitePrefixReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInvitePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupInvitePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireMin", wireType)
			}
			m.ExpireMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireMin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGetserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContactApplyExpireRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContactApplyExpireRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContactApplyExpireRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGetserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContactApplyExpireResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContactApplyExpireResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContactApplyExpireResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationHours", wireType)
			}
			m.DurationHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationHours |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGetserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGetserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGetserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGetserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGetserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGetserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGetserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGetserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGetserver   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("getserver.proto", fileDescriptorGetserver) }

var fileDescriptorGetserver = []byte{
	// 653 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0x4d, 0x4f, 0x1b, 0x3b,
	0x14, 0x7d, 0x43, 0x48, 0x48, 0x6e, 0x08, 0x3c, 0xfc, 0xde, 0x43, 0xd6, 0x08, 0xa2, 0x79, 0x53,
	0x55, 0x9d, 0x15, 0x8b, 0x76, 0x5f, 0x09, 0x28, 0x1f, 0xb3, 0x40, 0x45, 0xa6, 0xea, 0xa6, 0x8b,
	0x68, 0x98, 0xb9, 0x04, 0xd3, 0xc9, 0xd8, 0xd8, 0x0e, 0x22, 0x7f, 0xac, 0xbf, 0xa1, 0xcb, 0xfe,
	0x84, 0x2a, 0x7f, 0xa4, 0x95, 0x3d, 0xf9, 0x98, 0x90, 0xd0, 0x2e, 0xbb, 0x89, 0x72, 0xce, 0xb1,
	0xaf, 0x6f, 0xce, 0xb9, 0xb9, 0xb0, 0xdd, 0x47, 0xa3, 0x51, 0x3d, 0xa0, 0x3a, 0x90, 0x4a, 0x18,
	0x41, 0x5a, 0x33, 0x22, 0xfc, 0x52, 0x03, 0x72, 0x86, 0xe6, 0x58, 0x14, 0x37, 0xbc, 0x7f, 0xe5,
	0x38, 0x86, 0xf7, 0x64, 0x17, 0x1a, 0xe2, 0xfa, 0xee, 0x88, 0x17, 0xd4, 0x0b, 0xbc, 0x68, 0x93,
	0x4d, 0x10, 0xf9, 0x17, 0xea, 0xa9, 0x4a, 0xe3, 0x8c, 0xae, 0x05, 0x5e, 0xd4, 0x61, 0x25, 0x20,
	0x5d, 0x00, 0x85, 0x17, 0xa8, 0x75, 0xd2, 0x8f, 0x33, 0x5a, 0x0b, 0xbc, 0xa8, 0xc6, 0x2a, 0x8c,
	0xad, 0x36, 0xd4, 0xa8, 0xe2, 0x8c, 0xae, 0x07, 0x5e, 0x54, 0x67, 0x13, 0x64, 0xab, 0x7d, 0xc6,
	0x51, 0x9c, 0xd1, 0xba, 0xbb, 0x52, 0x02, 0xcb, 0xe6, 0xc9, 0x08, 0x15, 0x6d, 0xb8, 0xc3, 0x25,
	0xb0, 0x6f, 0xa4, 0xae, 0xc9, 0x0f, 0x7c, 0x80, 0x74, 0xc3, 0x49, 0x15, 0x86, 0x50, 0xd8, 0xe0,
	0xfa, 0x52, 0x89, 0xc7, 0x11, 0x6d, 0x06, 0x5e, 0xd4, 0x64, 0x53, 0x68, 0x15, 0x69, 0xbf, 0xc4,
	0x92, 0xb6, 0x02, 0x2f, 0x6a, 0xb1, 0x29, 0x24, 0x3e, 0x34, 0xd3, 0x9c, 0x63, 0x61, 0x62, 0x49,
	0xc1, 0x49, 0x33, 0x6c, 0xbb, 0x90, 0xb7, 0xa2, 0x40, 0xda, 0x76, 0x42, 0x09, 0xc8, 0x1e, 0xb4,
	0x34, 0x6a, 0xcd, 0x45, 0x11, 0x67, 0x74, 0x33, 0xf0, 0xa2, 0x75, 0x36, 0x27, 0x9c, 0x6b, 0xda,
	0x8c, 0x24, 0xd2, 0x8e, 0xb3, 0x67, 0x82, 0x6c, 0xef, 0x89, 0x94, 0x1f, 0x51, 0xd9, 0x73, 0x74,
	0xcb, 0x15, 0xac, 0x30, 0xb6, 0xea, 0xc0, 0x79, 0x85, 0x71, 0x46, 0xb7, 0xcb, 0xaa, 0x33, 0xc2,
	0x76, 0x92, 0x48, 0x1e, 0x67, 0xf4, 0xef, 0xd2, 0x0f, 0x07, 0xc2, 0xb7, 0xd0, 0xb8, 0xb2, 0x59,
	0x69, 0xfb, 0xaa, 0x42, 0x3d, 0xcc, 0xcd, 0x34, 0xab, 0x12, 0xd9, 0xaa, 0xa8, 0x94, 0x50, 0xc7,
	0x22, 0x43, 0x97, 0x57, 0x9d, 0xcd, 0x89, 0xf0, 0xc7, 0x1a, 0xb4, 0xcf, 0xd0, 0xbc, 0x37, 0xb7,
	0x7f, 0x3e, 0x71, 0x1f, 0x9a, 0x56, 0x7f, 0x67, 0x9f, 0x29, 0x43, 0x9f, 0xe1, 0x45, 0x6f, 0x36,
	0x9e, 0x7a, 0xb3, 0xe8, 0x6c, 0x73, 0xc9, 0x59, 0x1f, 0x9a, 0x32, 0x4f, 0xcc, 0xa9, 0x50, 0x03,
	0x17, 0x7e, 0x9d, 0xcd, 0xf0, 0x7c, 0xce, 0xa0, 0x3a, 0x67, 0x33, 0xb7, 0xdb, 0x15, 0xb7, 0x49,
	0x00, 0xed, 0x0c, 0x1f, 0x78, 0x8a, 0x17, 0x22, 0xc3, 0xdc, 0x25, 0xdf, 0x62, 0x55, 0x6a, 0x61,
	0x96, 0x3a, 0xcf, 0xcd, 0xd2, 0x56, 0x65, 0x96, 0x42, 0x1f, 0xe8, 0x99, 0x12, 0x43, 0x19, 0x17,
	0x0f, 0xdc, 0xe0, 0xa5, 0xc2, 0x1b, 0xfe, 0xc8, 0xf0, 0x7e, 0x88, 0xda, 0x84, 0x7d, 0xd8, 0x5d,
	0xa1, 0xc9, 0x7c, 0x44, 0x0e, 0xe0, 0x9f, 0xbe, 0x55, 0x7a, 0xdc, 0x49, 0x3d, 0xe9, 0x34, 0x17,
	0x5a, 0x8b, 0xed, 0xf4, 0x9f, 0x5e, 0x22, 0xfb, 0x00, 0xf8, 0x28, 0xb9, 0xc2, 0xde, 0x80, 0x17,
	0x2e, 0xc4, 0x1a, 0x6b, 0x95, 0xcc, 0x05, 0x2f, 0xc2, 0x2e, 0xec, 0x95, 0x7f, 0x7f, 0x93, 0xa4,
	0xe6, 0x50, 0xca, 0x7c, 0x74, 0xe2, 0xb4, 0x69, 0x23, 0xa7, 0xb0, 0xff, 0x8c, 0xae, 0xa5, 0x28,
	0x34, 0x92, 0x97, 0xb0, 0x95, 0x0d, 0x55, 0x62, 0xb8, 0x28, 0x7a, 0xb7, 0x62, 0xa8, 0xb4, 0x6b,
	0xa5, 0xc6, 0x3a, 0x53, 0xf6, 0xdc, 0x92, 0xaf, 0xc7, 0x6b, 0xd0, 0x29, 0xd7, 0x8b, 0xfd, 0xe4,
	0x29, 0x92, 0x13, 0xd8, 0x7e, 0xb2, 0x78, 0xc8, 0xfe, 0xc1, 0x7c, 0x53, 0x2d, 0x2f, 0x25, 0x7f,
	0xa7, 0x22, 0x97, 0xb3, 0x1f, 0xfe, 0x45, 0x0e, 0xdd, 0xfe, 0x72, 0x63, 0x7c, 0x8e, 0xb9, 0x9c,
	0x54, 0xda, 0x5d, 0xac, 0x34, 0x9d, 0xf2, 0xd5, 0x25, 0x3e, 0xc1, 0xce, 0x92, 0xd9, 0xe4, 0x45,
	0xb5, 0xc2, 0x33, 0x31, 0xf9, 0xff, 0xff, 0xfa, 0x90, 0xcd, 0xeb, 0x0e, 0xfe, 0x5b, 0x69, 0x20,
	0x79, 0xb5, 0xf4, 0x63, 0x57, 0x47, 0xe0, 0x47, 0xbf, 0x3f, 0x58, 0x66, 0x71, 0xb4, 0xf9, 0x75,
	0xdc, 0xf5, 0xbe, 0x8d, 0xbb, 0xde, 0xf7, 0x71, 0xd7, 0xbb, 0x6e, 0xb8, 0x65, 0xff, 0xe6, 0x67,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x14, 0x73, 0x67, 0x1f, 0xff, 0x05, 0x00, 0x00,
}
