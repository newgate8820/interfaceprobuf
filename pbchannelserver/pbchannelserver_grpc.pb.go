// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pbchannelserver.proto

package pbchannelserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	pbmessageserver "interfaceprobuf/pbmessageserver"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChannelServerClient is the client API for ChannelServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelServerClient interface {
	// 编辑超级群地理位置
	EditChannelLocation(ctx context.Context, in *EditChannelLocationReq, opts ...grpc.CallOption) (*EditChannelLocationResp, error)
	// 创建超级群
	// 超级群转让群主
	TransferGroupOwner(ctx context.Context, in *TransferGroupOwnerReq, opts ...grpc.CallOption) (*TransferGroupOwnerResp, error)
	// 发送媒体
	SendChannelMedia(ctx context.Context, in *pbmessageserver.ReqSendMedia, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 转发消息
	ForwardMessageToChannel(ctx context.Context, in *ReqForwardMessageToChannel, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 获取历史
	GetHistory(ctx context.Context, in *pbmessageserver.ReqHistory, opts ...grpc.CallOption) (*pbmessageserver.ReplyHistory, error)
	// 发送消息
	SendChannelMessage(ctx context.Context, in *pbmessageserver.RequestSendMessage, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 创建频道
	CreateChannel(ctx context.Context, in *ReqCreateChannel, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 邀请用户进入超级群或者频道
	InviteChannelMember(ctx context.Context, in *ReqInviteChannelMember, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 踢人出超级群或者频道
	KickFromChannel(ctx context.Context, in *ReqKickFromChannel, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 离开超级群或者频道
	LeaveChannel(ctx context.Context, in *ReqLeaveChannel, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 编辑超级群或者频道的标题
	EditChannelTitle(ctx context.Context, in *ReqEditChannelTitle, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 升级或降级超级群或者频道的用户权限
	EditChannelAdmin(ctx context.Context, in *ReqEditChannelAdmin, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 修改超级群或者频道的头像
	EditChannelPhoto(ctx context.Context, in *ReqEditChannelPhoto, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 修改超级群或者频道的描述信息
	EditChannelAbout(ctx context.Context, in *ReqEditChannelAbout, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 删除超级群或者频道的消息
	DeleteChannelMsg(ctx context.Context, in *ReqDeleteChannelMsg, opts ...grpc.CallOption) (*ReplyChannelData, error)
	DeleteChannelSelfHistory(ctx context.Context, in *ReqDeleteChannelSelfHistory, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 清除超级群或者频道某用户的历史
	DeleteChannelHistory(ctx context.Context, in *ReqDeleteChannelHistory, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 置顶超级群或者频道的消息
	UpdatePinnedChannelMessage(ctx context.Context, in *ReqUpdatePinnedChannelMessage, opts ...grpc.CallOption) (*ReplyChannelData, error)
	//	rpc MigrateChatEvent (ReqMigrateChat) returns (ReplyMigrateChat) {
	//	}
	//
	// 修改超级群或者频道的消息读取状态
	ReadChannelHistory(ctx context.Context, in *ReqReadChannelHistory, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 获取超级群或者频道的修正信息
	GetChannelDifference(ctx context.Context, in *ReqGetChannelDifference, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 获取超级群或者频道的历史
	//
	//	rpc GetChannelHistory (ReqGetChannelMsgHistory) returns (ReplyChannelMsgs) {
	//	}
	//
	// 通过消息ID获取超级群或者频道的消息
	GetChannelMessagesByMsgsId(ctx context.Context, in *pbmessageserver.ReqGetChannelMsgsByMsgsId, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 主动加入超级群或者频道
	JoinChannel(ctx context.Context, in *ReqJoinChannel, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 解散超级群或者频道
	DeleteChannel(ctx context.Context, in *ReqDeleteChannel, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 通过用户ID获取超级群或者频道的最后一条消息
	GetChannelsLastMsgsByUserId(ctx context.Context, in *pbmessageserver.ReqGetChannelsLastMsgsByUserId, opts ...grpc.CallOption) (*pbmessageserver.ReplyGetChannelsLastMsgsByUserId, error)
	// 获取超级群或者频道的管理记录
	GetChannelAdminLog(ctx context.Context, in *ReqGetChannelAdminLog, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 通过link加入超级群或者频道
	ImportChatInvite(ctx context.Context, in *ReqImportChatInvite, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 踢人并进组其再次加入超级群或者频道，或者解除该禁止
	EditBanChannelUser(ctx context.Context, in *ReqEditBanChannelUser, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 获取full channel
	GetFullChannel(ctx context.Context, in *ReqGetFullChannel, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 获取full channel
	GetFullChannelV2(ctx context.Context, in *ReqGetFullChannelV2, opts ...grpc.CallOption) (*ReplyChannelData, error)
	GetParticipant(ctx context.Context, in *ReqGetParticipant, opts ...grpc.CallOption) (*ReplyChannelData, error)
	GetParticipants(ctx context.Context, in *ReqGetParticipants, opts ...grpc.CallOption) (*ReplyChannelData, error)
	ExportChannelLink(ctx context.Context, in *ReqExportChannelLink, opts ...grpc.CallOption) (*ReplyChannelData, error)
	ChannelToggleInvite(ctx context.Context, in *ReqChannelToggleInvite, opts ...grpc.CallOption) (*ReplyChannelData, error)
	GetChannels(ctx context.Context, in *ReqGetChannels, opts ...grpc.CallOption) (*ReplyChannelData, error)
	UpdateChannelUserName(ctx context.Context, in *ReqUpdateChannelUserName, opts ...grpc.CallOption) (*ReplyChannelData, error)
	CheckChannelUserName(ctx context.Context, in *ReqCheckChannelUserName, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 超级群全体禁言
	EditEveryoneQuiet(ctx context.Context, in *ReqEditEveryoneQuiet, opts ...grpc.CallOption) (*ReplyChannelData, error)
	GetChannelMessageExportLink(ctx context.Context, in *ReqGetChannelMessageExportLink, opts ...grpc.CallOption) (*ReplyChannelData, error)
	EditPrivateChat(ctx context.Context, in *ReqEditPrivateChat, opts ...grpc.CallOption) (*ReplyChannelData, error)
	ChannelsReadMessageContents(ctx context.Context, in *ReqChannelsReadMessageContents, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 普通群升级超级群
	MigrateChat(ctx context.Context, in *ReqMigrateToChannel, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 编辑消息
	EditChannelMessage(ctx context.Context, in *pbmessageserver.ReqEditMessage, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 编辑消息
	SearchChannelMessage(ctx context.Context, in *SearchChannelMsgReq, opts ...grpc.CallOption) (*SearchChannelMsgResp, error)
	// 搜尋超級群媒體消息
	SearchChannelMediaMessage(ctx context.Context, in *ReqSearchChannelMediaMessage, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 超級群日誌接口
	SendLogMsg(ctx context.Context, in *ReqSendLogMsg, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 超级群发送数字钱包红包
	RequestSendRpm(ctx context.Context, in *ReqSendRpm, opts ...grpc.CallOption) (*ReplySendRpm, error)
	RequestEditRpm(ctx context.Context, in *ReqEditRpm, opts ...grpc.CallOption) (*ReplyEditRpm, error)
	RequestEditRpmV2(ctx context.Context, in *ReqEditRpmV2, opts ...grpc.CallOption) (*ReplyEditRpm, error)
	RequestEditPayment(ctx context.Context, in *ReqEditPayment, opts ...grpc.CallOption) (*ReplyEditRpm, error)
	// 超级群领取红包
	RequestRecvRpm(ctx context.Context, in *ReqRecvRpm, opts ...grpc.CallOption) (*ReplyRecvRpm, error)
	// 獲取群成員個數
	GetChannelMembersCount(ctx context.Context, in *ReqGetChannelMembersCount, opts ...grpc.CallOption) (*ReplyGetChannelMembersCount, error)
	// 獲取是否是管理員
	IsChannelAdminOrCreator(ctx context.Context, in *ReqIsChannelAdminOrCreator, opts ...grpc.CallOption) (*ReplyChannelData, error)
	MessageReadMentions(ctx context.Context, in *ReqMessageReadMentions, opts ...grpc.CallOption) (*ReplyMessageReadMentions, error)
	// 创建超级群
	CreateSuperChat(ctx context.Context, in *ReqCreateSuperChat, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 105 发送投票
	SendVote(ctx context.Context, in *SendVoteReq, opts ...grpc.CallOption) (*SendVoteReply, error)
	// 获取投票结果
	GetPollResults(ctx context.Context, in *GetPollResultsReq, opts ...grpc.CallOption) (*GetPollResultsReply, error)
	// @ bgn add for edit channel's default banned rights by qingsong at 2019-10-28
	EditChatDefaultBannedRights(ctx context.Context, in *EditChatDefaultBannedRightsReq, opts ...grpc.CallOption) (*EditChatDefaultBannedRightsRsp, error)
	// @ add by Qingsong at 2019-11-06 for call channel server to handler toggle slow mode.
	HandleToggleSlowMode(ctx context.Context, in *HandleToggleSlowModeReq, opts ...grpc.CallOption) (*HandleToggleSlowModeRsp, error)
	// @ add by Qingsong at 2019-11-21 for channel toggle signatures
	HandleToggleSignatures(ctx context.Context, in *HandleToggleSignaturesReq, opts ...grpc.CallOption) (*HandleToggleSignaturesRsp, error)
	// @ add by Qingsong at 2019-12-02 for im call channel server to toggle channel's history hidden.
	HandleToggleHistoryHidden(ctx context.Context, in *ChannelToggleHistoryHiddenReq, opts ...grpc.CallOption) (*ChannelToggleHistoryHiddenRsp, error)
	// @ add by qingsong at 2019-12-23 for im call channel server to set channel ban mode.
	SetChannelBanMode(ctx context.Context, in *SetChannelBanModeReq, opts ...grpc.CallOption) (*SetChannelBanModeRsp, error)
	// @ add by qingsong at 2019-12-27 for get user own channels.
	CHsGetUserOwnChannels(ctx context.Context, in *CHsGetUserOwnChannelsReq, opts ...grpc.CallOption) (*CHsGetUserOwnChannelsRsp, error)
	// @ add by qingsong at 2020-04-21 for im call channel server to Restrict channel.
	RestrictChannel(ctx context.Context, in *RestrictChannelReq, opts ...grpc.CallOption) (*RestrictChannelRsp, error)
	TransferGroupOwnerById(ctx context.Context, in *TransferGroupOwnerByIdReq, opts ...grpc.CallOption) (*TransferGroupOwnerByIdRsp, error)
	// @ add by qingsong at 2020-06-04 for get hot groups.
	GetHotGroups(ctx context.Context, in *GetHotGroupsReq, opts ...grpc.CallOption) (*GetHotGroupsRsp, error)
	// @ added by qingsong at 2020.10.20 for set discussion group.
	SetDiscussionGroup(ctx context.Context, in *SetDiscussionGroupReq, opts ...grpc.CallOption) (*SetDiscussionGroupRsp, error)
	// @ added by qingsong at 2020.10.20 for get groups for discussion.
	GetGroupsForDiscussion(ctx context.Context, in *GetGroupsForDiscussionReq, opts ...grpc.CallOption) (*GetGroupsForDiscussionRsp, error)
	// @ added by qingsong at 2020.12.01 for live start
	GroupLiveStart(ctx context.Context, in *LiveStartReq, opts ...grpc.CallOption) (*LiveStartRsp, error)
	// @ added by qingsong at 2020.12.01 for live stop
	GroupLiveStop(ctx context.Context, in *LiveStopReq, opts ...grpc.CallOption) (*LiveStopRsp, error)
	// @ added by qingsong at 2020.12.01 for live user invite link
	GetLiveInviteUrl(ctx context.Context, in *GetLiveInviteUrlReq, opts ...grpc.CallOption) (*GetLiveInviteUrlRsp, error)
	// @ added by qingsong at 2020.12.11 for edit live info.
	EditLiveInfo(ctx context.Context, in *EditLiveInfoReq, opts ...grpc.CallOption) (*EditLiveInfoRsp, error)
	GetLiveInviteCnt(ctx context.Context, in *GetLiveInviteCntReq, opts ...grpc.CallOption) (*GetLiveInviteCntRsp, error)
	GroupLiveCheck(ctx context.Context, in *GroupLiveCheckReq, opts ...grpc.CallOption) (*GroupLiveCheckRsp, error)
	CheckUserInGroup(ctx context.Context, in *CheckUserInGroupReq, opts ...grpc.CallOption) (*CheckUserInGroupRsp, error)
	// @ brief : Get group user ID by paging.
	GetGroupUserIds(ctx context.Context, in *GetGroupUserIdsReq, opts ...grpc.CallOption) (*GetGroupUserIdsRsp, error)
}

type channelServerClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelServerClient(cc grpc.ClientConnInterface) ChannelServerClient {
	return &channelServerClient{cc}
}

func (c *channelServerClient) EditChannelLocation(ctx context.Context, in *EditChannelLocationReq, opts ...grpc.CallOption) (*EditChannelLocationResp, error) {
	out := new(EditChannelLocationResp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditChannelLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) TransferGroupOwner(ctx context.Context, in *TransferGroupOwnerReq, opts ...grpc.CallOption) (*TransferGroupOwnerResp, error) {
	out := new(TransferGroupOwnerResp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/TransferGroupOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) SendChannelMedia(ctx context.Context, in *pbmessageserver.ReqSendMedia, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/SendChannelMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) ForwardMessageToChannel(ctx context.Context, in *ReqForwardMessageToChannel, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/ForwardMessageToChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetHistory(ctx context.Context, in *pbmessageserver.ReqHistory, opts ...grpc.CallOption) (*pbmessageserver.ReplyHistory, error) {
	out := new(pbmessageserver.ReplyHistory)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) SendChannelMessage(ctx context.Context, in *pbmessageserver.RequestSendMessage, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/SendChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) CreateChannel(ctx context.Context, in *ReqCreateChannel, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) InviteChannelMember(ctx context.Context, in *ReqInviteChannelMember, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/InviteChannelMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) KickFromChannel(ctx context.Context, in *ReqKickFromChannel, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/KickFromChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) LeaveChannel(ctx context.Context, in *ReqLeaveChannel, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/LeaveChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditChannelTitle(ctx context.Context, in *ReqEditChannelTitle, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditChannelTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditChannelAdmin(ctx context.Context, in *ReqEditChannelAdmin, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditChannelAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditChannelPhoto(ctx context.Context, in *ReqEditChannelPhoto, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditChannelPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditChannelAbout(ctx context.Context, in *ReqEditChannelAbout, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditChannelAbout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) DeleteChannelMsg(ctx context.Context, in *ReqDeleteChannelMsg, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/DeleteChannelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) DeleteChannelSelfHistory(ctx context.Context, in *ReqDeleteChannelSelfHistory, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/DeleteChannelSelfHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) DeleteChannelHistory(ctx context.Context, in *ReqDeleteChannelHistory, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/DeleteChannelHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) UpdatePinnedChannelMessage(ctx context.Context, in *ReqUpdatePinnedChannelMessage, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/UpdatePinnedChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) ReadChannelHistory(ctx context.Context, in *ReqReadChannelHistory, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/ReadChannelHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetChannelDifference(ctx context.Context, in *ReqGetChannelDifference, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetChannelDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetChannelMessagesByMsgsId(ctx context.Context, in *pbmessageserver.ReqGetChannelMsgsByMsgsId, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetChannelMessagesByMsgsId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) JoinChannel(ctx context.Context, in *ReqJoinChannel, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/JoinChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) DeleteChannel(ctx context.Context, in *ReqDeleteChannel, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/DeleteChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetChannelsLastMsgsByUserId(ctx context.Context, in *pbmessageserver.ReqGetChannelsLastMsgsByUserId, opts ...grpc.CallOption) (*pbmessageserver.ReplyGetChannelsLastMsgsByUserId, error) {
	out := new(pbmessageserver.ReplyGetChannelsLastMsgsByUserId)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetChannelsLastMsgsByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetChannelAdminLog(ctx context.Context, in *ReqGetChannelAdminLog, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetChannelAdminLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) ImportChatInvite(ctx context.Context, in *ReqImportChatInvite, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/ImportChatInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditBanChannelUser(ctx context.Context, in *ReqEditBanChannelUser, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditBanChannelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetFullChannel(ctx context.Context, in *ReqGetFullChannel, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetFullChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetFullChannelV2(ctx context.Context, in *ReqGetFullChannelV2, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetFullChannelV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetParticipant(ctx context.Context, in *ReqGetParticipant, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetParticipants(ctx context.Context, in *ReqGetParticipants, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) ExportChannelLink(ctx context.Context, in *ReqExportChannelLink, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/ExportChannelLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) ChannelToggleInvite(ctx context.Context, in *ReqChannelToggleInvite, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/ChannelToggleInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetChannels(ctx context.Context, in *ReqGetChannels, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) UpdateChannelUserName(ctx context.Context, in *ReqUpdateChannelUserName, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/UpdateChannelUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) CheckChannelUserName(ctx context.Context, in *ReqCheckChannelUserName, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/CheckChannelUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditEveryoneQuiet(ctx context.Context, in *ReqEditEveryoneQuiet, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditEveryoneQuiet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetChannelMessageExportLink(ctx context.Context, in *ReqGetChannelMessageExportLink, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetChannelMessageExportLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditPrivateChat(ctx context.Context, in *ReqEditPrivateChat, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditPrivateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) ChannelsReadMessageContents(ctx context.Context, in *ReqChannelsReadMessageContents, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/ChannelsReadMessageContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) MigrateChat(ctx context.Context, in *ReqMigrateToChannel, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/MigrateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditChannelMessage(ctx context.Context, in *pbmessageserver.ReqEditMessage, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) SearchChannelMessage(ctx context.Context, in *SearchChannelMsgReq, opts ...grpc.CallOption) (*SearchChannelMsgResp, error) {
	out := new(SearchChannelMsgResp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/SearchChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) SearchChannelMediaMessage(ctx context.Context, in *ReqSearchChannelMediaMessage, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/SearchChannelMediaMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) SendLogMsg(ctx context.Context, in *ReqSendLogMsg, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/SendLogMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) RequestSendRpm(ctx context.Context, in *ReqSendRpm, opts ...grpc.CallOption) (*ReplySendRpm, error) {
	out := new(ReplySendRpm)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/RequestSendRpm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) RequestEditRpm(ctx context.Context, in *ReqEditRpm, opts ...grpc.CallOption) (*ReplyEditRpm, error) {
	out := new(ReplyEditRpm)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/RequestEditRpm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) RequestEditRpmV2(ctx context.Context, in *ReqEditRpmV2, opts ...grpc.CallOption) (*ReplyEditRpm, error) {
	out := new(ReplyEditRpm)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/RequestEditRpmV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) RequestEditPayment(ctx context.Context, in *ReqEditPayment, opts ...grpc.CallOption) (*ReplyEditRpm, error) {
	out := new(ReplyEditRpm)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/RequestEditPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) RequestRecvRpm(ctx context.Context, in *ReqRecvRpm, opts ...grpc.CallOption) (*ReplyRecvRpm, error) {
	out := new(ReplyRecvRpm)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/RequestRecvRpm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetChannelMembersCount(ctx context.Context, in *ReqGetChannelMembersCount, opts ...grpc.CallOption) (*ReplyGetChannelMembersCount, error) {
	out := new(ReplyGetChannelMembersCount)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetChannelMembersCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) IsChannelAdminOrCreator(ctx context.Context, in *ReqIsChannelAdminOrCreator, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/IsChannelAdminOrCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) MessageReadMentions(ctx context.Context, in *ReqMessageReadMentions, opts ...grpc.CallOption) (*ReplyMessageReadMentions, error) {
	out := new(ReplyMessageReadMentions)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/MessageReadMentions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) CreateSuperChat(ctx context.Context, in *ReqCreateSuperChat, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/CreateSuperChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) SendVote(ctx context.Context, in *SendVoteReq, opts ...grpc.CallOption) (*SendVoteReply, error) {
	out := new(SendVoteReply)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/SendVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetPollResults(ctx context.Context, in *GetPollResultsReq, opts ...grpc.CallOption) (*GetPollResultsReply, error) {
	out := new(GetPollResultsReply)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetPollResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditChatDefaultBannedRights(ctx context.Context, in *EditChatDefaultBannedRightsReq, opts ...grpc.CallOption) (*EditChatDefaultBannedRightsRsp, error) {
	out := new(EditChatDefaultBannedRightsRsp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditChatDefaultBannedRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) HandleToggleSlowMode(ctx context.Context, in *HandleToggleSlowModeReq, opts ...grpc.CallOption) (*HandleToggleSlowModeRsp, error) {
	out := new(HandleToggleSlowModeRsp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/HandleToggleSlowMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) HandleToggleSignatures(ctx context.Context, in *HandleToggleSignaturesReq, opts ...grpc.CallOption) (*HandleToggleSignaturesRsp, error) {
	out := new(HandleToggleSignaturesRsp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/HandleToggleSignatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) HandleToggleHistoryHidden(ctx context.Context, in *ChannelToggleHistoryHiddenReq, opts ...grpc.CallOption) (*ChannelToggleHistoryHiddenRsp, error) {
	out := new(ChannelToggleHistoryHiddenRsp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/HandleToggleHistoryHidden", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) SetChannelBanMode(ctx context.Context, in *SetChannelBanModeReq, opts ...grpc.CallOption) (*SetChannelBanModeRsp, error) {
	out := new(SetChannelBanModeRsp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/SetChannelBanMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) CHsGetUserOwnChannels(ctx context.Context, in *CHsGetUserOwnChannelsReq, opts ...grpc.CallOption) (*CHsGetUserOwnChannelsRsp, error) {
	out := new(CHsGetUserOwnChannelsRsp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/CHsGetUserOwnChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) RestrictChannel(ctx context.Context, in *RestrictChannelReq, opts ...grpc.CallOption) (*RestrictChannelRsp, error) {
	out := new(RestrictChannelRsp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/RestrictChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) TransferGroupOwnerById(ctx context.Context, in *TransferGroupOwnerByIdReq, opts ...grpc.CallOption) (*TransferGroupOwnerByIdRsp, error) {
	out := new(TransferGroupOwnerByIdRsp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/TransferGroupOwnerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetHotGroups(ctx context.Context, in *GetHotGroupsReq, opts ...grpc.CallOption) (*GetHotGroupsRsp, error) {
	out := new(GetHotGroupsRsp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetHotGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) SetDiscussionGroup(ctx context.Context, in *SetDiscussionGroupReq, opts ...grpc.CallOption) (*SetDiscussionGroupRsp, error) {
	out := new(SetDiscussionGroupRsp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/SetDiscussionGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetGroupsForDiscussion(ctx context.Context, in *GetGroupsForDiscussionReq, opts ...grpc.CallOption) (*GetGroupsForDiscussionRsp, error) {
	out := new(GetGroupsForDiscussionRsp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetGroupsForDiscussion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GroupLiveStart(ctx context.Context, in *LiveStartReq, opts ...grpc.CallOption) (*LiveStartRsp, error) {
	out := new(LiveStartRsp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GroupLiveStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GroupLiveStop(ctx context.Context, in *LiveStopReq, opts ...grpc.CallOption) (*LiveStopRsp, error) {
	out := new(LiveStopRsp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GroupLiveStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetLiveInviteUrl(ctx context.Context, in *GetLiveInviteUrlReq, opts ...grpc.CallOption) (*GetLiveInviteUrlRsp, error) {
	out := new(GetLiveInviteUrlRsp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetLiveInviteUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditLiveInfo(ctx context.Context, in *EditLiveInfoReq, opts ...grpc.CallOption) (*EditLiveInfoRsp, error) {
	out := new(EditLiveInfoRsp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditLiveInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetLiveInviteCnt(ctx context.Context, in *GetLiveInviteCntReq, opts ...grpc.CallOption) (*GetLiveInviteCntRsp, error) {
	out := new(GetLiveInviteCntRsp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetLiveInviteCnt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GroupLiveCheck(ctx context.Context, in *GroupLiveCheckReq, opts ...grpc.CallOption) (*GroupLiveCheckRsp, error) {
	out := new(GroupLiveCheckRsp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GroupLiveCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) CheckUserInGroup(ctx context.Context, in *CheckUserInGroupReq, opts ...grpc.CallOption) (*CheckUserInGroupRsp, error) {
	out := new(CheckUserInGroupRsp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/CheckUserInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetGroupUserIds(ctx context.Context, in *GetGroupUserIdsReq, opts ...grpc.CallOption) (*GetGroupUserIdsRsp, error) {
	out := new(GetGroupUserIdsRsp)
	err := c.cc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetGroupUserIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelServerServer is the server API for ChannelServer service.
// All implementations must embed UnimplementedChannelServerServer
// for forward compatibility
type ChannelServerServer interface {
	// 编辑超级群地理位置
	EditChannelLocation(context.Context, *EditChannelLocationReq) (*EditChannelLocationResp, error)
	// 创建超级群
	// 超级群转让群主
	TransferGroupOwner(context.Context, *TransferGroupOwnerReq) (*TransferGroupOwnerResp, error)
	// 发送媒体
	SendChannelMedia(context.Context, *pbmessageserver.ReqSendMedia) (*ReplyChannelData, error)
	// 转发消息
	ForwardMessageToChannel(context.Context, *ReqForwardMessageToChannel) (*ReplyChannelData, error)
	// 获取历史
	GetHistory(context.Context, *pbmessageserver.ReqHistory) (*pbmessageserver.ReplyHistory, error)
	// 发送消息
	SendChannelMessage(context.Context, *pbmessageserver.RequestSendMessage) (*ReplyChannelData, error)
	// 创建频道
	CreateChannel(context.Context, *ReqCreateChannel) (*ReplyChannelData, error)
	// 邀请用户进入超级群或者频道
	InviteChannelMember(context.Context, *ReqInviteChannelMember) (*ReplyChannelData, error)
	// 踢人出超级群或者频道
	KickFromChannel(context.Context, *ReqKickFromChannel) (*ReplyChannelData, error)
	// 离开超级群或者频道
	LeaveChannel(context.Context, *ReqLeaveChannel) (*ReplyChannelData, error)
	// 编辑超级群或者频道的标题
	EditChannelTitle(context.Context, *ReqEditChannelTitle) (*ReplyChannelData, error)
	// 升级或降级超级群或者频道的用户权限
	EditChannelAdmin(context.Context, *ReqEditChannelAdmin) (*ReplyChannelData, error)
	// 修改超级群或者频道的头像
	EditChannelPhoto(context.Context, *ReqEditChannelPhoto) (*ReplyChannelData, error)
	// 修改超级群或者频道的描述信息
	EditChannelAbout(context.Context, *ReqEditChannelAbout) (*ReplyChannelData, error)
	// 删除超级群或者频道的消息
	DeleteChannelMsg(context.Context, *ReqDeleteChannelMsg) (*ReplyChannelData, error)
	DeleteChannelSelfHistory(context.Context, *ReqDeleteChannelSelfHistory) (*ReplyChannelData, error)
	// 清除超级群或者频道某用户的历史
	DeleteChannelHistory(context.Context, *ReqDeleteChannelHistory) (*ReplyChannelData, error)
	// 置顶超级群或者频道的消息
	UpdatePinnedChannelMessage(context.Context, *ReqUpdatePinnedChannelMessage) (*ReplyChannelData, error)
	//	rpc MigrateChatEvent (ReqMigrateChat) returns (ReplyMigrateChat) {
	//	}
	//
	// 修改超级群或者频道的消息读取状态
	ReadChannelHistory(context.Context, *ReqReadChannelHistory) (*ReplyChannelData, error)
	// 获取超级群或者频道的修正信息
	GetChannelDifference(context.Context, *ReqGetChannelDifference) (*ReplyChannelData, error)
	// 获取超级群或者频道的历史
	//
	//	rpc GetChannelHistory (ReqGetChannelMsgHistory) returns (ReplyChannelMsgs) {
	//	}
	//
	// 通过消息ID获取超级群或者频道的消息
	GetChannelMessagesByMsgsId(context.Context, *pbmessageserver.ReqGetChannelMsgsByMsgsId) (*ReplyChannelData, error)
	// 主动加入超级群或者频道
	JoinChannel(context.Context, *ReqJoinChannel) (*ReplyChannelData, error)
	// 解散超级群或者频道
	DeleteChannel(context.Context, *ReqDeleteChannel) (*ReplyChannelData, error)
	// 通过用户ID获取超级群或者频道的最后一条消息
	GetChannelsLastMsgsByUserId(context.Context, *pbmessageserver.ReqGetChannelsLastMsgsByUserId) (*pbmessageserver.ReplyGetChannelsLastMsgsByUserId, error)
	// 获取超级群或者频道的管理记录
	GetChannelAdminLog(context.Context, *ReqGetChannelAdminLog) (*ReplyChannelData, error)
	// 通过link加入超级群或者频道
	ImportChatInvite(context.Context, *ReqImportChatInvite) (*ReplyChannelData, error)
	// 踢人并进组其再次加入超级群或者频道，或者解除该禁止
	EditBanChannelUser(context.Context, *ReqEditBanChannelUser) (*ReplyChannelData, error)
	// 获取full channel
	GetFullChannel(context.Context, *ReqGetFullChannel) (*ReplyChannelData, error)
	// 获取full channel
	GetFullChannelV2(context.Context, *ReqGetFullChannelV2) (*ReplyChannelData, error)
	GetParticipant(context.Context, *ReqGetParticipant) (*ReplyChannelData, error)
	GetParticipants(context.Context, *ReqGetParticipants) (*ReplyChannelData, error)
	ExportChannelLink(context.Context, *ReqExportChannelLink) (*ReplyChannelData, error)
	ChannelToggleInvite(context.Context, *ReqChannelToggleInvite) (*ReplyChannelData, error)
	GetChannels(context.Context, *ReqGetChannels) (*ReplyChannelData, error)
	UpdateChannelUserName(context.Context, *ReqUpdateChannelUserName) (*ReplyChannelData, error)
	CheckChannelUserName(context.Context, *ReqCheckChannelUserName) (*ReplyChannelData, error)
	// 超级群全体禁言
	EditEveryoneQuiet(context.Context, *ReqEditEveryoneQuiet) (*ReplyChannelData, error)
	GetChannelMessageExportLink(context.Context, *ReqGetChannelMessageExportLink) (*ReplyChannelData, error)
	EditPrivateChat(context.Context, *ReqEditPrivateChat) (*ReplyChannelData, error)
	ChannelsReadMessageContents(context.Context, *ReqChannelsReadMessageContents) (*ReplyChannelData, error)
	// 普通群升级超级群
	MigrateChat(context.Context, *ReqMigrateToChannel) (*ReplyChannelData, error)
	// 编辑消息
	EditChannelMessage(context.Context, *pbmessageserver.ReqEditMessage) (*ReplyChannelData, error)
	// 编辑消息
	SearchChannelMessage(context.Context, *SearchChannelMsgReq) (*SearchChannelMsgResp, error)
	// 搜尋超級群媒體消息
	SearchChannelMediaMessage(context.Context, *ReqSearchChannelMediaMessage) (*ReplyChannelData, error)
	// 超級群日誌接口
	SendLogMsg(context.Context, *ReqSendLogMsg) (*ReplyChannelData, error)
	// 超级群发送数字钱包红包
	RequestSendRpm(context.Context, *ReqSendRpm) (*ReplySendRpm, error)
	RequestEditRpm(context.Context, *ReqEditRpm) (*ReplyEditRpm, error)
	RequestEditRpmV2(context.Context, *ReqEditRpmV2) (*ReplyEditRpm, error)
	RequestEditPayment(context.Context, *ReqEditPayment) (*ReplyEditRpm, error)
	// 超级群领取红包
	RequestRecvRpm(context.Context, *ReqRecvRpm) (*ReplyRecvRpm, error)
	// 獲取群成員個數
	GetChannelMembersCount(context.Context, *ReqGetChannelMembersCount) (*ReplyGetChannelMembersCount, error)
	// 獲取是否是管理員
	IsChannelAdminOrCreator(context.Context, *ReqIsChannelAdminOrCreator) (*ReplyChannelData, error)
	MessageReadMentions(context.Context, *ReqMessageReadMentions) (*ReplyMessageReadMentions, error)
	// 创建超级群
	CreateSuperChat(context.Context, *ReqCreateSuperChat) (*ReplyChannelData, error)
	// 105 发送投票
	SendVote(context.Context, *SendVoteReq) (*SendVoteReply, error)
	// 获取投票结果
	GetPollResults(context.Context, *GetPollResultsReq) (*GetPollResultsReply, error)
	// @ bgn add for edit channel's default banned rights by qingsong at 2019-10-28
	EditChatDefaultBannedRights(context.Context, *EditChatDefaultBannedRightsReq) (*EditChatDefaultBannedRightsRsp, error)
	// @ add by Qingsong at 2019-11-06 for call channel server to handler toggle slow mode.
	HandleToggleSlowMode(context.Context, *HandleToggleSlowModeReq) (*HandleToggleSlowModeRsp, error)
	// @ add by Qingsong at 2019-11-21 for channel toggle signatures
	HandleToggleSignatures(context.Context, *HandleToggleSignaturesReq) (*HandleToggleSignaturesRsp, error)
	// @ add by Qingsong at 2019-12-02 for im call channel server to toggle channel's history hidden.
	HandleToggleHistoryHidden(context.Context, *ChannelToggleHistoryHiddenReq) (*ChannelToggleHistoryHiddenRsp, error)
	// @ add by qingsong at 2019-12-23 for im call channel server to set channel ban mode.
	SetChannelBanMode(context.Context, *SetChannelBanModeReq) (*SetChannelBanModeRsp, error)
	// @ add by qingsong at 2019-12-27 for get user own channels.
	CHsGetUserOwnChannels(context.Context, *CHsGetUserOwnChannelsReq) (*CHsGetUserOwnChannelsRsp, error)
	// @ add by qingsong at 2020-04-21 for im call channel server to Restrict channel.
	RestrictChannel(context.Context, *RestrictChannelReq) (*RestrictChannelRsp, error)
	TransferGroupOwnerById(context.Context, *TransferGroupOwnerByIdReq) (*TransferGroupOwnerByIdRsp, error)
	// @ add by qingsong at 2020-06-04 for get hot groups.
	GetHotGroups(context.Context, *GetHotGroupsReq) (*GetHotGroupsRsp, error)
	// @ added by qingsong at 2020.10.20 for set discussion group.
	SetDiscussionGroup(context.Context, *SetDiscussionGroupReq) (*SetDiscussionGroupRsp, error)
	// @ added by qingsong at 2020.10.20 for get groups for discussion.
	GetGroupsForDiscussion(context.Context, *GetGroupsForDiscussionReq) (*GetGroupsForDiscussionRsp, error)
	// @ added by qingsong at 2020.12.01 for live start
	GroupLiveStart(context.Context, *LiveStartReq) (*LiveStartRsp, error)
	// @ added by qingsong at 2020.12.01 for live stop
	GroupLiveStop(context.Context, *LiveStopReq) (*LiveStopRsp, error)
	// @ added by qingsong at 2020.12.01 for live user invite link
	GetLiveInviteUrl(context.Context, *GetLiveInviteUrlReq) (*GetLiveInviteUrlRsp, error)
	// @ added by qingsong at 2020.12.11 for edit live info.
	EditLiveInfo(context.Context, *EditLiveInfoReq) (*EditLiveInfoRsp, error)
	GetLiveInviteCnt(context.Context, *GetLiveInviteCntReq) (*GetLiveInviteCntRsp, error)
	GroupLiveCheck(context.Context, *GroupLiveCheckReq) (*GroupLiveCheckRsp, error)
	CheckUserInGroup(context.Context, *CheckUserInGroupReq) (*CheckUserInGroupRsp, error)
	// @ brief : Get group user ID by paging.
	GetGroupUserIds(context.Context, *GetGroupUserIdsReq) (*GetGroupUserIdsRsp, error)
	mustEmbedUnimplementedChannelServerServer()
}

// UnimplementedChannelServerServer must be embedded to have forward compatible implementations.
type UnimplementedChannelServerServer struct {
}

func (UnimplementedChannelServerServer) EditChannelLocation(context.Context, *EditChannelLocationReq) (*EditChannelLocationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelLocation not implemented")
}
func (UnimplementedChannelServerServer) TransferGroupOwner(context.Context, *TransferGroupOwnerReq) (*TransferGroupOwnerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferGroupOwner not implemented")
}
func (UnimplementedChannelServerServer) SendChannelMedia(context.Context, *pbmessageserver.ReqSendMedia) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChannelMedia not implemented")
}
func (UnimplementedChannelServerServer) ForwardMessageToChannel(context.Context, *ReqForwardMessageToChannel) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardMessageToChannel not implemented")
}
func (UnimplementedChannelServerServer) GetHistory(context.Context, *pbmessageserver.ReqHistory) (*pbmessageserver.ReplyHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedChannelServerServer) SendChannelMessage(context.Context, *pbmessageserver.RequestSendMessage) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChannelMessage not implemented")
}
func (UnimplementedChannelServerServer) CreateChannel(context.Context, *ReqCreateChannel) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedChannelServerServer) InviteChannelMember(context.Context, *ReqInviteChannelMember) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteChannelMember not implemented")
}
func (UnimplementedChannelServerServer) KickFromChannel(context.Context, *ReqKickFromChannel) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickFromChannel not implemented")
}
func (UnimplementedChannelServerServer) LeaveChannel(context.Context, *ReqLeaveChannel) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChannel not implemented")
}
func (UnimplementedChannelServerServer) EditChannelTitle(context.Context, *ReqEditChannelTitle) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelTitle not implemented")
}
func (UnimplementedChannelServerServer) EditChannelAdmin(context.Context, *ReqEditChannelAdmin) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelAdmin not implemented")
}
func (UnimplementedChannelServerServer) EditChannelPhoto(context.Context, *ReqEditChannelPhoto) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelPhoto not implemented")
}
func (UnimplementedChannelServerServer) EditChannelAbout(context.Context, *ReqEditChannelAbout) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelAbout not implemented")
}
func (UnimplementedChannelServerServer) DeleteChannelMsg(context.Context, *ReqDeleteChannelMsg) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelMsg not implemented")
}
func (UnimplementedChannelServerServer) DeleteChannelSelfHistory(context.Context, *ReqDeleteChannelSelfHistory) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelSelfHistory not implemented")
}
func (UnimplementedChannelServerServer) DeleteChannelHistory(context.Context, *ReqDeleteChannelHistory) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelHistory not implemented")
}
func (UnimplementedChannelServerServer) UpdatePinnedChannelMessage(context.Context, *ReqUpdatePinnedChannelMessage) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePinnedChannelMessage not implemented")
}
func (UnimplementedChannelServerServer) ReadChannelHistory(context.Context, *ReqReadChannelHistory) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadChannelHistory not implemented")
}
func (UnimplementedChannelServerServer) GetChannelDifference(context.Context, *ReqGetChannelDifference) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelDifference not implemented")
}
func (UnimplementedChannelServerServer) GetChannelMessagesByMsgsId(context.Context, *pbmessageserver.ReqGetChannelMsgsByMsgsId) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMessagesByMsgsId not implemented")
}
func (UnimplementedChannelServerServer) JoinChannel(context.Context, *ReqJoinChannel) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChannel not implemented")
}
func (UnimplementedChannelServerServer) DeleteChannel(context.Context, *ReqDeleteChannel) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedChannelServerServer) GetChannelsLastMsgsByUserId(context.Context, *pbmessageserver.ReqGetChannelsLastMsgsByUserId) (*pbmessageserver.ReplyGetChannelsLastMsgsByUserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelsLastMsgsByUserId not implemented")
}
func (UnimplementedChannelServerServer) GetChannelAdminLog(context.Context, *ReqGetChannelAdminLog) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelAdminLog not implemented")
}
func (UnimplementedChannelServerServer) ImportChatInvite(context.Context, *ReqImportChatInvite) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportChatInvite not implemented")
}
func (UnimplementedChannelServerServer) EditBanChannelUser(context.Context, *ReqEditBanChannelUser) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBanChannelUser not implemented")
}
func (UnimplementedChannelServerServer) GetFullChannel(context.Context, *ReqGetFullChannel) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullChannel not implemented")
}
func (UnimplementedChannelServerServer) GetFullChannelV2(context.Context, *ReqGetFullChannelV2) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullChannelV2 not implemented")
}
func (UnimplementedChannelServerServer) GetParticipant(context.Context, *ReqGetParticipant) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipant not implemented")
}
func (UnimplementedChannelServerServer) GetParticipants(context.Context, *ReqGetParticipants) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipants not implemented")
}
func (UnimplementedChannelServerServer) ExportChannelLink(context.Context, *ReqExportChannelLink) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportChannelLink not implemented")
}
func (UnimplementedChannelServerServer) ChannelToggleInvite(context.Context, *ReqChannelToggleInvite) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelToggleInvite not implemented")
}
func (UnimplementedChannelServerServer) GetChannels(context.Context, *ReqGetChannels) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannels not implemented")
}
func (UnimplementedChannelServerServer) UpdateChannelUserName(context.Context, *ReqUpdateChannelUserName) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelUserName not implemented")
}
func (UnimplementedChannelServerServer) CheckChannelUserName(context.Context, *ReqCheckChannelUserName) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChannelUserName not implemented")
}
func (UnimplementedChannelServerServer) EditEveryoneQuiet(context.Context, *ReqEditEveryoneQuiet) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditEveryoneQuiet not implemented")
}
func (UnimplementedChannelServerServer) GetChannelMessageExportLink(context.Context, *ReqGetChannelMessageExportLink) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMessageExportLink not implemented")
}
func (UnimplementedChannelServerServer) EditPrivateChat(context.Context, *ReqEditPrivateChat) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPrivateChat not implemented")
}
func (UnimplementedChannelServerServer) ChannelsReadMessageContents(context.Context, *ReqChannelsReadMessageContents) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsReadMessageContents not implemented")
}
func (UnimplementedChannelServerServer) MigrateChat(context.Context, *ReqMigrateToChannel) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateChat not implemented")
}
func (UnimplementedChannelServerServer) EditChannelMessage(context.Context, *pbmessageserver.ReqEditMessage) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelMessage not implemented")
}
func (UnimplementedChannelServerServer) SearchChannelMessage(context.Context, *SearchChannelMsgReq) (*SearchChannelMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchChannelMessage not implemented")
}
func (UnimplementedChannelServerServer) SearchChannelMediaMessage(context.Context, *ReqSearchChannelMediaMessage) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchChannelMediaMessage not implemented")
}
func (UnimplementedChannelServerServer) SendLogMsg(context.Context, *ReqSendLogMsg) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLogMsg not implemented")
}
func (UnimplementedChannelServerServer) RequestSendRpm(context.Context, *ReqSendRpm) (*ReplySendRpm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSendRpm not implemented")
}
func (UnimplementedChannelServerServer) RequestEditRpm(context.Context, *ReqEditRpm) (*ReplyEditRpm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestEditRpm not implemented")
}
func (UnimplementedChannelServerServer) RequestEditRpmV2(context.Context, *ReqEditRpmV2) (*ReplyEditRpm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestEditRpmV2 not implemented")
}
func (UnimplementedChannelServerServer) RequestEditPayment(context.Context, *ReqEditPayment) (*ReplyEditRpm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestEditPayment not implemented")
}
func (UnimplementedChannelServerServer) RequestRecvRpm(context.Context, *ReqRecvRpm) (*ReplyRecvRpm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRecvRpm not implemented")
}
func (UnimplementedChannelServerServer) GetChannelMembersCount(context.Context, *ReqGetChannelMembersCount) (*ReplyGetChannelMembersCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMembersCount not implemented")
}
func (UnimplementedChannelServerServer) IsChannelAdminOrCreator(context.Context, *ReqIsChannelAdminOrCreator) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsChannelAdminOrCreator not implemented")
}
func (UnimplementedChannelServerServer) MessageReadMentions(context.Context, *ReqMessageReadMentions) (*ReplyMessageReadMentions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageReadMentions not implemented")
}
func (UnimplementedChannelServerServer) CreateSuperChat(context.Context, *ReqCreateSuperChat) (*ReplyChannelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSuperChat not implemented")
}
func (UnimplementedChannelServerServer) SendVote(context.Context, *SendVoteReq) (*SendVoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVote not implemented")
}
func (UnimplementedChannelServerServer) GetPollResults(context.Context, *GetPollResultsReq) (*GetPollResultsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPollResults not implemented")
}
func (UnimplementedChannelServerServer) EditChatDefaultBannedRights(context.Context, *EditChatDefaultBannedRightsReq) (*EditChatDefaultBannedRightsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChatDefaultBannedRights not implemented")
}
func (UnimplementedChannelServerServer) HandleToggleSlowMode(context.Context, *HandleToggleSlowModeReq) (*HandleToggleSlowModeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleToggleSlowMode not implemented")
}
func (UnimplementedChannelServerServer) HandleToggleSignatures(context.Context, *HandleToggleSignaturesReq) (*HandleToggleSignaturesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleToggleSignatures not implemented")
}
func (UnimplementedChannelServerServer) HandleToggleHistoryHidden(context.Context, *ChannelToggleHistoryHiddenReq) (*ChannelToggleHistoryHiddenRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleToggleHistoryHidden not implemented")
}
func (UnimplementedChannelServerServer) SetChannelBanMode(context.Context, *SetChannelBanModeReq) (*SetChannelBanModeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChannelBanMode not implemented")
}
func (UnimplementedChannelServerServer) CHsGetUserOwnChannels(context.Context, *CHsGetUserOwnChannelsReq) (*CHsGetUserOwnChannelsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CHsGetUserOwnChannels not implemented")
}
func (UnimplementedChannelServerServer) RestrictChannel(context.Context, *RestrictChannelReq) (*RestrictChannelRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestrictChannel not implemented")
}
func (UnimplementedChannelServerServer) TransferGroupOwnerById(context.Context, *TransferGroupOwnerByIdReq) (*TransferGroupOwnerByIdRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferGroupOwnerById not implemented")
}
func (UnimplementedChannelServerServer) GetHotGroups(context.Context, *GetHotGroupsReq) (*GetHotGroupsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotGroups not implemented")
}
func (UnimplementedChannelServerServer) SetDiscussionGroup(context.Context, *SetDiscussionGroupReq) (*SetDiscussionGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDiscussionGroup not implemented")
}
func (UnimplementedChannelServerServer) GetGroupsForDiscussion(context.Context, *GetGroupsForDiscussionReq) (*GetGroupsForDiscussionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupsForDiscussion not implemented")
}
func (UnimplementedChannelServerServer) GroupLiveStart(context.Context, *LiveStartReq) (*LiveStartRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupLiveStart not implemented")
}
func (UnimplementedChannelServerServer) GroupLiveStop(context.Context, *LiveStopReq) (*LiveStopRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupLiveStop not implemented")
}
func (UnimplementedChannelServerServer) GetLiveInviteUrl(context.Context, *GetLiveInviteUrlReq) (*GetLiveInviteUrlRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveInviteUrl not implemented")
}
func (UnimplementedChannelServerServer) EditLiveInfo(context.Context, *EditLiveInfoReq) (*EditLiveInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditLiveInfo not implemented")
}
func (UnimplementedChannelServerServer) GetLiveInviteCnt(context.Context, *GetLiveInviteCntReq) (*GetLiveInviteCntRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveInviteCnt not implemented")
}
func (UnimplementedChannelServerServer) GroupLiveCheck(context.Context, *GroupLiveCheckReq) (*GroupLiveCheckRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupLiveCheck not implemented")
}
func (UnimplementedChannelServerServer) CheckUserInGroup(context.Context, *CheckUserInGroupReq) (*CheckUserInGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserInGroup not implemented")
}
func (UnimplementedChannelServerServer) GetGroupUserIds(context.Context, *GetGroupUserIdsReq) (*GetGroupUserIdsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupUserIds not implemented")
}
func (UnimplementedChannelServerServer) mustEmbedUnimplementedChannelServerServer() {}

// UnsafeChannelServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelServerServer will
// result in compilation errors.
type UnsafeChannelServerServer interface {
	mustEmbedUnimplementedChannelServerServer()
}

func RegisterChannelServerServer(s grpc.ServiceRegistrar, srv ChannelServerServer) {
	s.RegisterService(&ChannelServer_ServiceDesc, srv)
}

func _ChannelServer_EditChannelLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditChannelLocationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditChannelLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditChannelLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditChannelLocation(ctx, req.(*EditChannelLocationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_TransferGroupOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferGroupOwnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).TransferGroupOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/TransferGroupOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).TransferGroupOwner(ctx, req.(*TransferGroupOwnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_SendChannelMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbmessageserver.ReqSendMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).SendChannelMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/SendChannelMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).SendChannelMedia(ctx, req.(*pbmessageserver.ReqSendMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_ForwardMessageToChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqForwardMessageToChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).ForwardMessageToChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/ForwardMessageToChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).ForwardMessageToChannel(ctx, req.(*ReqForwardMessageToChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbmessageserver.ReqHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetHistory(ctx, req.(*pbmessageserver.ReqHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_SendChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbmessageserver.RequestSendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).SendChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/SendChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).SendChannelMessage(ctx, req.(*pbmessageserver.RequestSendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).CreateChannel(ctx, req.(*ReqCreateChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_InviteChannelMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInviteChannelMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).InviteChannelMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/InviteChannelMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).InviteChannelMember(ctx, req.(*ReqInviteChannelMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_KickFromChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqKickFromChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).KickFromChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/KickFromChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).KickFromChannel(ctx, req.(*ReqKickFromChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_LeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLeaveChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).LeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/LeaveChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).LeaveChannel(ctx, req.(*ReqLeaveChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditChannelTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditChannelTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditChannelTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditChannelTitle(ctx, req.(*ReqEditChannelTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditChannelAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditChannelAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditChannelAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditChannelAdmin(ctx, req.(*ReqEditChannelAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditChannelPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditChannelPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditChannelPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditChannelPhoto(ctx, req.(*ReqEditChannelPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditChannelAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditChannelAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditChannelAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditChannelAbout(ctx, req.(*ReqEditChannelAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_DeleteChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).DeleteChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/DeleteChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).DeleteChannelMsg(ctx, req.(*ReqDeleteChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_DeleteChannelSelfHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelSelfHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).DeleteChannelSelfHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/DeleteChannelSelfHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).DeleteChannelSelfHistory(ctx, req.(*ReqDeleteChannelSelfHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_DeleteChannelHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).DeleteChannelHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/DeleteChannelHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).DeleteChannelHistory(ctx, req.(*ReqDeleteChannelHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_UpdatePinnedChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdatePinnedChannelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).UpdatePinnedChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/UpdatePinnedChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).UpdatePinnedChannelMessage(ctx, req.(*ReqUpdatePinnedChannelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_ReadChannelHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReadChannelHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).ReadChannelHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/ReadChannelHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).ReadChannelHistory(ctx, req.(*ReqReadChannelHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetChannelDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetChannelDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetChannelDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetChannelDifference(ctx, req.(*ReqGetChannelDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetChannelMessagesByMsgsId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbmessageserver.ReqGetChannelMsgsByMsgsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetChannelMessagesByMsgsId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetChannelMessagesByMsgsId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetChannelMessagesByMsgsId(ctx, req.(*pbmessageserver.ReqGetChannelMsgsByMsgsId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_JoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqJoinChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).JoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/JoinChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).JoinChannel(ctx, req.(*ReqJoinChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/DeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).DeleteChannel(ctx, req.(*ReqDeleteChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetChannelsLastMsgsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbmessageserver.ReqGetChannelsLastMsgsByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetChannelsLastMsgsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetChannelsLastMsgsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetChannelsLastMsgsByUserId(ctx, req.(*pbmessageserver.ReqGetChannelsLastMsgsByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetChannelAdminLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelAdminLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetChannelAdminLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetChannelAdminLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetChannelAdminLog(ctx, req.(*ReqGetChannelAdminLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_ImportChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqImportChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).ImportChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/ImportChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).ImportChatInvite(ctx, req.(*ReqImportChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditBanChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditBanChannelUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditBanChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditBanChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditBanChannelUser(ctx, req.(*ReqEditBanChannelUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetFullChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetFullChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetFullChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetFullChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetFullChannel(ctx, req.(*ReqGetFullChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetFullChannelV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetFullChannelV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetFullChannelV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetFullChannelV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetFullChannelV2(ctx, req.(*ReqGetFullChannelV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetParticipant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetParticipant(ctx, req.(*ReqGetParticipant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetParticipants(ctx, req.(*ReqGetParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_ExportChannelLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqExportChannelLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).ExportChannelLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/ExportChannelLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).ExportChannelLink(ctx, req.(*ReqExportChannelLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_ChannelToggleInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelToggleInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).ChannelToggleInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/ChannelToggleInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).ChannelToggleInvite(ctx, req.(*ReqChannelToggleInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetChannels(ctx, req.(*ReqGetChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_UpdateChannelUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelUserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).UpdateChannelUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/UpdateChannelUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).UpdateChannelUserName(ctx, req.(*ReqUpdateChannelUserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_CheckChannelUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCheckChannelUserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).CheckChannelUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/CheckChannelUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).CheckChannelUserName(ctx, req.(*ReqCheckChannelUserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditEveryoneQuiet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditEveryoneQuiet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditEveryoneQuiet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditEveryoneQuiet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditEveryoneQuiet(ctx, req.(*ReqEditEveryoneQuiet))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetChannelMessageExportLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMessageExportLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetChannelMessageExportLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetChannelMessageExportLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetChannelMessageExportLink(ctx, req.(*ReqGetChannelMessageExportLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditPrivateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditPrivateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditPrivateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditPrivateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditPrivateChat(ctx, req.(*ReqEditPrivateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_ChannelsReadMessageContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelsReadMessageContents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).ChannelsReadMessageContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/ChannelsReadMessageContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).ChannelsReadMessageContents(ctx, req.(*ReqChannelsReadMessageContents))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_MigrateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMigrateToChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).MigrateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/MigrateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).MigrateChat(ctx, req.(*ReqMigrateToChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbmessageserver.ReqEditMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditChannelMessage(ctx, req.(*pbmessageserver.ReqEditMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_SearchChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchChannelMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).SearchChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/SearchChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).SearchChannelMessage(ctx, req.(*SearchChannelMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_SearchChannelMediaMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSearchChannelMediaMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).SearchChannelMediaMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/SearchChannelMediaMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).SearchChannelMediaMessage(ctx, req.(*ReqSearchChannelMediaMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_SendLogMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendLogMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).SendLogMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/SendLogMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).SendLogMsg(ctx, req.(*ReqSendLogMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_RequestSendRpm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendRpm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).RequestSendRpm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/RequestSendRpm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).RequestSendRpm(ctx, req.(*ReqSendRpm))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_RequestEditRpm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditRpm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).RequestEditRpm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/RequestEditRpm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).RequestEditRpm(ctx, req.(*ReqEditRpm))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_RequestEditRpmV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditRpmV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).RequestEditRpmV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/RequestEditRpmV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).RequestEditRpmV2(ctx, req.(*ReqEditRpmV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_RequestEditPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditPayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).RequestEditPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/RequestEditPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).RequestEditPayment(ctx, req.(*ReqEditPayment))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_RequestRecvRpm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRecvRpm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).RequestRecvRpm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/RequestRecvRpm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).RequestRecvRpm(ctx, req.(*ReqRecvRpm))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetChannelMembersCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMembersCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetChannelMembersCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetChannelMembersCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetChannelMembersCount(ctx, req.(*ReqGetChannelMembersCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_IsChannelAdminOrCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqIsChannelAdminOrCreator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).IsChannelAdminOrCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/IsChannelAdminOrCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).IsChannelAdminOrCreator(ctx, req.(*ReqIsChannelAdminOrCreator))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_MessageReadMentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMessageReadMentions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).MessageReadMentions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/MessageReadMentions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).MessageReadMentions(ctx, req.(*ReqMessageReadMentions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_CreateSuperChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateSuperChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).CreateSuperChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/CreateSuperChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).CreateSuperChat(ctx, req.(*ReqCreateSuperChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_SendVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).SendVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/SendVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).SendVote(ctx, req.(*SendVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetPollResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPollResultsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetPollResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetPollResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetPollResults(ctx, req.(*GetPollResultsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditChatDefaultBannedRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditChatDefaultBannedRightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditChatDefaultBannedRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditChatDefaultBannedRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditChatDefaultBannedRights(ctx, req.(*EditChatDefaultBannedRightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_HandleToggleSlowMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleToggleSlowModeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).HandleToggleSlowMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/HandleToggleSlowMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).HandleToggleSlowMode(ctx, req.(*HandleToggleSlowModeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_HandleToggleSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleToggleSignaturesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).HandleToggleSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/HandleToggleSignatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).HandleToggleSignatures(ctx, req.(*HandleToggleSignaturesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_HandleToggleHistoryHidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelToggleHistoryHiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).HandleToggleHistoryHidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/HandleToggleHistoryHidden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).HandleToggleHistoryHidden(ctx, req.(*ChannelToggleHistoryHiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_SetChannelBanMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChannelBanModeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).SetChannelBanMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/SetChannelBanMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).SetChannelBanMode(ctx, req.(*SetChannelBanModeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_CHsGetUserOwnChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CHsGetUserOwnChannelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).CHsGetUserOwnChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/CHsGetUserOwnChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).CHsGetUserOwnChannels(ctx, req.(*CHsGetUserOwnChannelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_RestrictChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestrictChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).RestrictChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/RestrictChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).RestrictChannel(ctx, req.(*RestrictChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_TransferGroupOwnerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferGroupOwnerByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).TransferGroupOwnerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/TransferGroupOwnerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).TransferGroupOwnerById(ctx, req.(*TransferGroupOwnerByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetHotGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetHotGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetHotGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetHotGroups(ctx, req.(*GetHotGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_SetDiscussionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDiscussionGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).SetDiscussionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/SetDiscussionGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).SetDiscussionGroup(ctx, req.(*SetDiscussionGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetGroupsForDiscussion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsForDiscussionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetGroupsForDiscussion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetGroupsForDiscussion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetGroupsForDiscussion(ctx, req.(*GetGroupsForDiscussionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GroupLiveStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GroupLiveStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GroupLiveStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GroupLiveStart(ctx, req.(*LiveStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GroupLiveStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GroupLiveStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GroupLiveStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GroupLiveStop(ctx, req.(*LiveStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetLiveInviteUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveInviteUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetLiveInviteUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetLiveInviteUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetLiveInviteUrl(ctx, req.(*GetLiveInviteUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditLiveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditLiveInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditLiveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditLiveInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditLiveInfo(ctx, req.(*EditLiveInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetLiveInviteCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveInviteCntReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetLiveInviteCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetLiveInviteCnt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetLiveInviteCnt(ctx, req.(*GetLiveInviteCntReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GroupLiveCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupLiveCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GroupLiveCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GroupLiveCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GroupLiveCheck(ctx, req.(*GroupLiveCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_CheckUserInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserInGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).CheckUserInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/CheckUserInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).CheckUserInGroup(ctx, req.(*CheckUserInGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetGroupUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupUserIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetGroupUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetGroupUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetGroupUserIds(ctx, req.(*GetGroupUserIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelServer_ServiceDesc is the grpc.ServiceDesc for ChannelServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbchannelserver.ChannelServer",
	HandlerType: (*ChannelServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EditChannelLocation",
			Handler:    _ChannelServer_EditChannelLocation_Handler,
		},
		{
			MethodName: "TransferGroupOwner",
			Handler:    _ChannelServer_TransferGroupOwner_Handler,
		},
		{
			MethodName: "SendChannelMedia",
			Handler:    _ChannelServer_SendChannelMedia_Handler,
		},
		{
			MethodName: "ForwardMessageToChannel",
			Handler:    _ChannelServer_ForwardMessageToChannel_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _ChannelServer_GetHistory_Handler,
		},
		{
			MethodName: "SendChannelMessage",
			Handler:    _ChannelServer_SendChannelMessage_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _ChannelServer_CreateChannel_Handler,
		},
		{
			MethodName: "InviteChannelMember",
			Handler:    _ChannelServer_InviteChannelMember_Handler,
		},
		{
			MethodName: "KickFromChannel",
			Handler:    _ChannelServer_KickFromChannel_Handler,
		},
		{
			MethodName: "LeaveChannel",
			Handler:    _ChannelServer_LeaveChannel_Handler,
		},
		{
			MethodName: "EditChannelTitle",
			Handler:    _ChannelServer_EditChannelTitle_Handler,
		},
		{
			MethodName: "EditChannelAdmin",
			Handler:    _ChannelServer_EditChannelAdmin_Handler,
		},
		{
			MethodName: "EditChannelPhoto",
			Handler:    _ChannelServer_EditChannelPhoto_Handler,
		},
		{
			MethodName: "EditChannelAbout",
			Handler:    _ChannelServer_EditChannelAbout_Handler,
		},
		{
			MethodName: "DeleteChannelMsg",
			Handler:    _ChannelServer_DeleteChannelMsg_Handler,
		},
		{
			MethodName: "DeleteChannelSelfHistory",
			Handler:    _ChannelServer_DeleteChannelSelfHistory_Handler,
		},
		{
			MethodName: "DeleteChannelHistory",
			Handler:    _ChannelServer_DeleteChannelHistory_Handler,
		},
		{
			MethodName: "UpdatePinnedChannelMessage",
			Handler:    _ChannelServer_UpdatePinnedChannelMessage_Handler,
		},
		{
			MethodName: "ReadChannelHistory",
			Handler:    _ChannelServer_ReadChannelHistory_Handler,
		},
		{
			MethodName: "GetChannelDifference",
			Handler:    _ChannelServer_GetChannelDifference_Handler,
		},
		{
			MethodName: "GetChannelMessagesByMsgsId",
			Handler:    _ChannelServer_GetChannelMessagesByMsgsId_Handler,
		},
		{
			MethodName: "JoinChannel",
			Handler:    _ChannelServer_JoinChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _ChannelServer_DeleteChannel_Handler,
		},
		{
			MethodName: "GetChannelsLastMsgsByUserId",
			Handler:    _ChannelServer_GetChannelsLastMsgsByUserId_Handler,
		},
		{
			MethodName: "GetChannelAdminLog",
			Handler:    _ChannelServer_GetChannelAdminLog_Handler,
		},
		{
			MethodName: "ImportChatInvite",
			Handler:    _ChannelServer_ImportChatInvite_Handler,
		},
		{
			MethodName: "EditBanChannelUser",
			Handler:    _ChannelServer_EditBanChannelUser_Handler,
		},
		{
			MethodName: "GetFullChannel",
			Handler:    _ChannelServer_GetFullChannel_Handler,
		},
		{
			MethodName: "GetFullChannelV2",
			Handler:    _ChannelServer_GetFullChannelV2_Handler,
		},
		{
			MethodName: "GetParticipant",
			Handler:    _ChannelServer_GetParticipant_Handler,
		},
		{
			MethodName: "GetParticipants",
			Handler:    _ChannelServer_GetParticipants_Handler,
		},
		{
			MethodName: "ExportChannelLink",
			Handler:    _ChannelServer_ExportChannelLink_Handler,
		},
		{
			MethodName: "ChannelToggleInvite",
			Handler:    _ChannelServer_ChannelToggleInvite_Handler,
		},
		{
			MethodName: "GetChannels",
			Handler:    _ChannelServer_GetChannels_Handler,
		},
		{
			MethodName: "UpdateChannelUserName",
			Handler:    _ChannelServer_UpdateChannelUserName_Handler,
		},
		{
			MethodName: "CheckChannelUserName",
			Handler:    _ChannelServer_CheckChannelUserName_Handler,
		},
		{
			MethodName: "EditEveryoneQuiet",
			Handler:    _ChannelServer_EditEveryoneQuiet_Handler,
		},
		{
			MethodName: "GetChannelMessageExportLink",
			Handler:    _ChannelServer_GetChannelMessageExportLink_Handler,
		},
		{
			MethodName: "EditPrivateChat",
			Handler:    _ChannelServer_EditPrivateChat_Handler,
		},
		{
			MethodName: "ChannelsReadMessageContents",
			Handler:    _ChannelServer_ChannelsReadMessageContents_Handler,
		},
		{
			MethodName: "MigrateChat",
			Handler:    _ChannelServer_MigrateChat_Handler,
		},
		{
			MethodName: "EditChannelMessage",
			Handler:    _ChannelServer_EditChannelMessage_Handler,
		},
		{
			MethodName: "SearchChannelMessage",
			Handler:    _ChannelServer_SearchChannelMessage_Handler,
		},
		{
			MethodName: "SearchChannelMediaMessage",
			Handler:    _ChannelServer_SearchChannelMediaMessage_Handler,
		},
		{
			MethodName: "SendLogMsg",
			Handler:    _ChannelServer_SendLogMsg_Handler,
		},
		{
			MethodName: "RequestSendRpm",
			Handler:    _ChannelServer_RequestSendRpm_Handler,
		},
		{
			MethodName: "RequestEditRpm",
			Handler:    _ChannelServer_RequestEditRpm_Handler,
		},
		{
			MethodName: "RequestEditRpmV2",
			Handler:    _ChannelServer_RequestEditRpmV2_Handler,
		},
		{
			MethodName: "RequestEditPayment",
			Handler:    _ChannelServer_RequestEditPayment_Handler,
		},
		{
			MethodName: "RequestRecvRpm",
			Handler:    _ChannelServer_RequestRecvRpm_Handler,
		},
		{
			MethodName: "GetChannelMembersCount",
			Handler:    _ChannelServer_GetChannelMembersCount_Handler,
		},
		{
			MethodName: "IsChannelAdminOrCreator",
			Handler:    _ChannelServer_IsChannelAdminOrCreator_Handler,
		},
		{
			MethodName: "MessageReadMentions",
			Handler:    _ChannelServer_MessageReadMentions_Handler,
		},
		{
			MethodName: "CreateSuperChat",
			Handler:    _ChannelServer_CreateSuperChat_Handler,
		},
		{
			MethodName: "SendVote",
			Handler:    _ChannelServer_SendVote_Handler,
		},
		{
			MethodName: "GetPollResults",
			Handler:    _ChannelServer_GetPollResults_Handler,
		},
		{
			MethodName: "EditChatDefaultBannedRights",
			Handler:    _ChannelServer_EditChatDefaultBannedRights_Handler,
		},
		{
			MethodName: "HandleToggleSlowMode",
			Handler:    _ChannelServer_HandleToggleSlowMode_Handler,
		},
		{
			MethodName: "HandleToggleSignatures",
			Handler:    _ChannelServer_HandleToggleSignatures_Handler,
		},
		{
			MethodName: "HandleToggleHistoryHidden",
			Handler:    _ChannelServer_HandleToggleHistoryHidden_Handler,
		},
		{
			MethodName: "SetChannelBanMode",
			Handler:    _ChannelServer_SetChannelBanMode_Handler,
		},
		{
			MethodName: "CHsGetUserOwnChannels",
			Handler:    _ChannelServer_CHsGetUserOwnChannels_Handler,
		},
		{
			MethodName: "RestrictChannel",
			Handler:    _ChannelServer_RestrictChannel_Handler,
		},
		{
			MethodName: "TransferGroupOwnerById",
			Handler:    _ChannelServer_TransferGroupOwnerById_Handler,
		},
		{
			MethodName: "GetHotGroups",
			Handler:    _ChannelServer_GetHotGroups_Handler,
		},
		{
			MethodName: "SetDiscussionGroup",
			Handler:    _ChannelServer_SetDiscussionGroup_Handler,
		},
		{
			MethodName: "GetGroupsForDiscussion",
			Handler:    _ChannelServer_GetGroupsForDiscussion_Handler,
		},
		{
			MethodName: "GroupLiveStart",
			Handler:    _ChannelServer_GroupLiveStart_Handler,
		},
		{
			MethodName: "GroupLiveStop",
			Handler:    _ChannelServer_GroupLiveStop_Handler,
		},
		{
			MethodName: "GetLiveInviteUrl",
			Handler:    _ChannelServer_GetLiveInviteUrl_Handler,
		},
		{
			MethodName: "EditLiveInfo",
			Handler:    _ChannelServer_EditLiveInfo_Handler,
		},
		{
			MethodName: "GetLiveInviteCnt",
			Handler:    _ChannelServer_GetLiveInviteCnt_Handler,
		},
		{
			MethodName: "GroupLiveCheck",
			Handler:    _ChannelServer_GroupLiveCheck_Handler,
		},
		{
			MethodName: "CheckUserInGroup",
			Handler:    _ChannelServer_CheckUserInGroup_Handler,
		},
		{
			MethodName: "GetGroupUserIds",
			Handler:    _ChannelServer_GetGroupUserIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pbchannelserver.proto",
}
