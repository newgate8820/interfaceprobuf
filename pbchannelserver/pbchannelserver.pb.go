//protoc --gogofast_out=plugins=grpc:. *.proto
//protoc --gogofast_out=plugins=grpc:. .\gitlab.potato.im\potatoprotobufs\channelserver\pbchannelserver.proto
//protoc --gogofast_out=plugins=grpc:. ./gitlab.chatserver.im/im/potatoprotobufs/channelserver/pbchannelserver.proto

//protoc --gogofast_out=plugins=grpc:. ./gitlab.chatserver.im/interfaceprobuf/pbchannelserver/pbchannelserver.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: pbchannelserver.proto

package pbchannelserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pbcomm "interfaceprobuf/pbcomm"
	pbmessagedb "interfaceprobuf/pbmessagedb"
	pbmessageserver "interfaceprobuf/pbmessageserver"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GroupLiveReplyCode int32

const (
	GroupLiveReplyCode_Successfuly GroupLiveReplyCode = 0
	GroupLiveReplyCode_UserUnknown GroupLiveReplyCode = 90001 // 用户不存在
	GroupLiveReplyCode_ChanUnknown GroupLiveReplyCode = 90002 // 群组不存在
	GroupLiveReplyCode_LiveUnknown GroupLiveReplyCode = 90003 // 直播不存在
	GroupLiveReplyCode_LiveOnGoing GroupLiveReplyCode = 90004 // 直播进行中
	GroupLiveReplyCode_HaveNoPower GroupLiveReplyCode = 90005 // 没有权限
	GroupLiveReplyCode_IllegalArgs GroupLiveReplyCode = 90006 // 非法参数
	GroupLiveReplyCode_InternalErr GroupLiveReplyCode = 90007 // 服务内部错误
)

// Enum value maps for GroupLiveReplyCode.
var (
	GroupLiveReplyCode_name = map[int32]string{
		0:     "Successfuly",
		90001: "UserUnknown",
		90002: "ChanUnknown",
		90003: "LiveUnknown",
		90004: "LiveOnGoing",
		90005: "HaveNoPower",
		90006: "IllegalArgs",
		90007: "InternalErr",
	}
	GroupLiveReplyCode_value = map[string]int32{
		"Successfuly": 0,
		"UserUnknown": 90001,
		"ChanUnknown": 90002,
		"LiveUnknown": 90003,
		"LiveOnGoing": 90004,
		"HaveNoPower": 90005,
		"IllegalArgs": 90006,
		"InternalErr": 90007,
	}
)

func (x GroupLiveReplyCode) Enum() *GroupLiveReplyCode {
	p := new(GroupLiveReplyCode)
	*p = x
	return p
}

func (x GroupLiveReplyCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupLiveReplyCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbchannelserver_proto_enumTypes[0].Descriptor()
}

func (GroupLiveReplyCode) Type() protoreflect.EnumType {
	return &file_pbchannelserver_proto_enumTypes[0]
}

func (x GroupLiveReplyCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupLiveReplyCode.Descriptor instead.
func (GroupLiveReplyCode) EnumDescriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{0}
}

// @ added by qingsong at 2020.10.20 for get groups for discussion.
type GetGroupsForDiscussionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *GetGroupsForDiscussionReq) Reset() {
	*x = GetGroupsForDiscussionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupsForDiscussionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsForDiscussionReq) ProtoMessage() {}

func (x *GetGroupsForDiscussionReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsForDiscussionReq.ProtoReflect.Descriptor instead.
func (*GetGroupsForDiscussionReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{0}
}

func (x *GetGroupsForDiscussionReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetGroupsForDiscussionReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GetGroupsForDiscussionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32         `protobuf:"varint,1,opt,name=Error,proto3" json:"Error,omitempty"`
	Reply []byte        `protobuf:"bytes,2,opt,name=Reply,proto3" json:"Reply,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *GetGroupsForDiscussionRsp) Reset() {
	*x = GetGroupsForDiscussionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupsForDiscussionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsForDiscussionRsp) ProtoMessage() {}

func (x *GetGroupsForDiscussionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsForDiscussionRsp.ProtoReflect.Descriptor instead.
func (*GetGroupsForDiscussionRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{1}
}

func (x *GetGroupsForDiscussionRsp) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetGroupsForDiscussionRsp) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *GetGroupsForDiscussionRsp) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// @ added by qingsong at 2020.10.20 for set discussion group.
type SetDiscussionGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcast int32         `protobuf:"varint,1,opt,name=Broadcast,proto3" json:"Broadcast,omitempty"`
	Megagroup int32         `protobuf:"varint,2,opt,name=Megagroup,proto3" json:"Megagroup,omitempty"`
	FromId    int32         `protobuf:"varint,3,opt,name=FromId,proto3" json:"FromId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *SetDiscussionGroupReq) Reset() {
	*x = SetDiscussionGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDiscussionGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDiscussionGroupReq) ProtoMessage() {}

func (x *SetDiscussionGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDiscussionGroupReq.ProtoReflect.Descriptor instead.
func (*SetDiscussionGroupReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{2}
}

func (x *SetDiscussionGroupReq) GetBroadcast() int32 {
	if x != nil {
		return x.Broadcast
	}
	return 0
}

func (x *SetDiscussionGroupReq) GetMegagroup() int32 {
	if x != nil {
		return x.Megagroup
	}
	return 0
}

func (x *SetDiscussionGroupReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *SetDiscussionGroupReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type SetDiscussionGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetDiscussionGroupRsp) Reset() {
	*x = SetDiscussionGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDiscussionGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDiscussionGroupRsp) ProtoMessage() {}

func (x *SetDiscussionGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDiscussionGroupRsp.ProtoReflect.Descriptor instead.
func (*SetDiscussionGroupRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{3}
}

// 创建超级群
type ReqCreateSuperChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply     []byte        `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32         `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"` //1: 无法获取 2: 数据过去超时 3: 崩溃 4: 发起id为0
	Obj       []byte        `protobuf:"bytes,3,opt,name=Obj,proto3" json:"Obj,omitempty"`              //请求的协议结构
	UserId    int32         `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId     int64         `protobuf:"varint,5,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqCreateSuperChat) Reset() {
	*x = ReqCreateSuperChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCreateSuperChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCreateSuperChat) ProtoMessage() {}

func (x *ReqCreateSuperChat) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCreateSuperChat.ProtoReflect.Descriptor instead.
func (*ReqCreateSuperChat) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{4}
}

func (x *ReqCreateSuperChat) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReqCreateSuperChat) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ReqCreateSuperChat) GetObj() []byte {
	if x != nil {
		return x.Obj
	}
	return nil
}

func (x *ReqCreateSuperChat) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqCreateSuperChat) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ReqCreateSuperChat) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqIsChannelAdminOrCreator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId int64         `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqIsChannelAdminOrCreator) Reset() {
	*x = ReqIsChannelAdminOrCreator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqIsChannelAdminOrCreator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqIsChannelAdminOrCreator) ProtoMessage() {}

func (x *ReqIsChannelAdminOrCreator) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqIsChannelAdminOrCreator.ProtoReflect.Descriptor instead.
func (*ReqIsChannelAdminOrCreator) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{5}
}

func (x *ReqIsChannelAdminOrCreator) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqIsChannelAdminOrCreator) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqIsChannelAdminOrCreator) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetChannelMembersCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId int32         `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChannelMembersCount) Reset() {
	*x = ReqGetChannelMembersCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMembersCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMembersCount) ProtoMessage() {}

func (x *ReqGetChannelMembersCount) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMembersCount.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMembersCount) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{6}
}

func (x *ReqGetChannelMembersCount) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetChannelMembersCount) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelMembersCount) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelMembersCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMembersCount int32 `protobuf:"varint,1,opt,name=ChannelMembersCount,proto3" json:"ChannelMembersCount,omitempty"`
	ErrorCode           int32 `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (x *ReplyGetChannelMembersCount) Reset() {
	*x = ReplyGetChannelMembersCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelMembersCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelMembersCount) ProtoMessage() {}

func (x *ReplyGetChannelMembersCount) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelMembersCount.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelMembersCount) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{7}
}

func (x *ReplyGetChannelMembersCount) GetChannelMembersCount() int32 {
	if x != nil {
		return x.ChannelMembersCount
	}
	return 0
}

func (x *ReplyGetChannelMembersCount) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ReqSendLogMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"` //消息
	Author  string `protobuf:"bytes,2,opt,name=Author,proto3" json:"Author,omitempty"`   //作者
	Level   string `protobuf:"bytes,3,opt,name=Level,proto3" json:"Level,omitempty"`     //日誌層級
}

func (x *ReqSendLogMsg) Reset() {
	*x = ReqSendLogMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendLogMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendLogMsg) ProtoMessage() {}

func (x *ReqSendLogMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendLogMsg.ProtoReflect.Descriptor instead.
func (*ReqSendLogMsg) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{8}
}

func (x *ReqSendLogMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReqSendLogMsg) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ReqSendLogMsg) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

type ForwardMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date        int32    `protobuf:"varint,1,opt,name=Date,proto3" json:"Date,omitempty"`                                 // 时间
	Message     string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`                            // 消息内容
	Media       int64    `protobuf:"varint,3,opt,name=Media,proto3" json:"Media,omitempty"`                               // 媒体id
	Meidadata   []byte   `protobuf:"bytes,4,opt,name=Meidadata,proto3" json:"Meidadata,omitempty"`                        // 媒体二进制
	ReplyMarkup []byte   `protobuf:"bytes,5,opt,name=Reply_markup,json=ReplyMarkup,proto3" json:"Reply_markup,omitempty"` //	小键盘
	Entities    [][]byte `protobuf:"bytes,6,rep,name=Entities,proto3" json:"Entities,omitempty"`                          // 高亮
	Fromid      int32    `protobuf:"varint,7,opt,name=Fromid,proto3" json:"Fromid,omitempty"`                             // 发送方
	Encry       int32    `protobuf:"varint,8,opt,name=Encry,proto3" json:"Encry,omitempty"`                               // 是否加密
	FwdFrom     []byte   `protobuf:"bytes,9,opt,name=FwdFrom,proto3" json:"FwdFrom,omitempty"`
	View        int32    `protobuf:"varint,10,opt,name=View,proto3" json:"View,omitempty"` // 频道小眼睛
	Groupid     int64    `protobuf:"varint,11,opt,name=Groupid,proto3" json:"Groupid,omitempty"`
	ViaBotId    int32    `protobuf:"varint,12,opt,name=ViaBotId,proto3" json:"ViaBotId,omitempty"` // 消息来自与于机器人Id
}

func (x *ForwardMsg) Reset() {
	*x = ForwardMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardMsg) ProtoMessage() {}

func (x *ForwardMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardMsg.ProtoReflect.Descriptor instead.
func (*ForwardMsg) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{9}
}

func (x *ForwardMsg) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ForwardMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ForwardMsg) GetMedia() int64 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *ForwardMsg) GetMeidadata() []byte {
	if x != nil {
		return x.Meidadata
	}
	return nil
}

func (x *ForwardMsg) GetReplyMarkup() []byte {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *ForwardMsg) GetEntities() [][]byte {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *ForwardMsg) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ForwardMsg) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ForwardMsg) GetFwdFrom() []byte {
	if x != nil {
		return x.FwdFrom
	}
	return nil
}

func (x *ForwardMsg) GetView() int32 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *ForwardMsg) GetGroupid() int64 {
	if x != nil {
		return x.Groupid
	}
	return 0
}

func (x *ForwardMsg) GetViaBotId() int32 {
	if x != nil {
		return x.ViaBotId
	}
	return 0
}

type ReqForwardMessageToChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid      int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 发送方id
	Flags       int32         `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`   // 标识
	Silent      bool          `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"` // 是否无声音
	Background  bool          `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	WithMyScore bool          `protobuf:"varint,5,opt,name=with_my_score,json=withMyScore,proto3" json:"with_my_score,omitempty"`
	FromPeer    []byte        `protobuf:"bytes,6,opt,name=from_peer,json=fromPeer,proto3" json:"from_peer,omitempty"`
	Id          []int32       `protobuf:"varint,7,rep,packed,name=id,proto3" json:"id,omitempty"`
	RandomId    []int64       `protobuf:"varint,8,rep,packed,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ToPeer      []byte        `protobuf:"bytes,9,opt,name=to_peer,json=toPeer,proto3" json:"to_peer,omitempty"`
	FromKeyid   uint64        `protobuf:"varint,10,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	MsgList     []*ForwardMsg `protobuf:"bytes,11,rep,name=MsgList,proto3" json:"MsgList,omitempty"`
	Encry       int32         `protobuf:"varint,12,opt,name=encry,proto3" json:"encry,omitempty"`
	Userlist    []int32       `protobuf:"varint,13,rep,packed,name=userlist,proto3" json:"userlist,omitempty"`
	Chatlist    []int32       `protobuf:"varint,14,rep,packed,name=chatlist,proto3" json:"chatlist,omitempty"`
	Channellist []int32       `protobuf:"varint,15,rep,packed,name=channellist,proto3" json:"channellist,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,16,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqForwardMessageToChannel) Reset() {
	*x = ReqForwardMessageToChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqForwardMessageToChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqForwardMessageToChannel) ProtoMessage() {}

func (x *ReqForwardMessageToChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqForwardMessageToChannel.ProtoReflect.Descriptor instead.
func (*ReqForwardMessageToChannel) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{10}
}

func (x *ReqForwardMessageToChannel) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqForwardMessageToChannel) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqForwardMessageToChannel) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *ReqForwardMessageToChannel) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

func (x *ReqForwardMessageToChannel) GetWithMyScore() bool {
	if x != nil {
		return x.WithMyScore
	}
	return false
}

func (x *ReqForwardMessageToChannel) GetFromPeer() []byte {
	if x != nil {
		return x.FromPeer
	}
	return nil
}

func (x *ReqForwardMessageToChannel) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReqForwardMessageToChannel) GetRandomId() []int64 {
	if x != nil {
		return x.RandomId
	}
	return nil
}

func (x *ReqForwardMessageToChannel) GetToPeer() []byte {
	if x != nil {
		return x.ToPeer
	}
	return nil
}

func (x *ReqForwardMessageToChannel) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqForwardMessageToChannel) GetMsgList() []*ForwardMsg {
	if x != nil {
		return x.MsgList
	}
	return nil
}

func (x *ReqForwardMessageToChannel) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ReqForwardMessageToChannel) GetUserlist() []int32 {
	if x != nil {
		return x.Userlist
	}
	return nil
}

func (x *ReqForwardMessageToChannel) GetChatlist() []int32 {
	if x != nil {
		return x.Chatlist
	}
	return nil
}

func (x *ReqForwardMessageToChannel) GetChannellist() []int32 {
	if x != nil {
		return x.Channellist
	}
	return nil
}

func (x *ReqForwardMessageToChannel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqMigrateToChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug  *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	FromID int32         `protobuf:"varint,2,opt,name=FromID,proto3" json:"FromID,omitempty"`
	ChatID int32         `protobuf:"varint,3,opt,name=ChatID,proto3" json:"ChatID,omitempty"`
	MsgId  int32         `protobuf:"varint,4,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
}

func (x *ReqMigrateToChannel) Reset() {
	*x = ReqMigrateToChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqMigrateToChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqMigrateToChannel) ProtoMessage() {}

func (x *ReqMigrateToChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqMigrateToChannel.ProtoReflect.Descriptor instead.
func (*ReqMigrateToChannel) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{11}
}

func (x *ReqMigrateToChannel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ReqMigrateToChannel) GetFromID() int32 {
	if x != nil {
		return x.FromID
	}
	return 0
}

func (x *ReqMigrateToChannel) GetChatID() int32 {
	if x != nil {
		return x.ChatID
	}
	return 0
}

func (x *ReqMigrateToChannel) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type ReplyMigrateToChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMsgId int32  `protobuf:"varint,1,opt,name=ChannelMsgId,proto3" json:"ChannelMsgId,omitempty"`
	ChannelPts   int32  `protobuf:"varint,2,opt,name=ChannelPts,proto3" json:"ChannelPts,omitempty"`
	ChannelID    int32  `protobuf:"varint,3,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Title        string `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
}

func (x *ReplyMigrateToChannel) Reset() {
	*x = ReplyMigrateToChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyMigrateToChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyMigrateToChannel) ProtoMessage() {}

func (x *ReplyMigrateToChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyMigrateToChannel.ProtoReflect.Descriptor instead.
func (*ReplyMigrateToChannel) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{12}
}

func (x *ReplyMigrateToChannel) GetChannelMsgId() int32 {
	if x != nil {
		return x.ChannelMsgId
	}
	return 0
}

func (x *ReplyMigrateToChannel) GetChannelPts() int32 {
	if x != nil {
		return x.ChannelPts
	}
	return 0
}

func (x *ReplyMigrateToChannel) GetChannelID() int32 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *ReplyMigrateToChannel) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type ReqSearchChannelMediaMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqMessageSearch *pbmessageserver.ReqMessageSearch `protobuf:"bytes,1,opt,name=ReqMessageSearch,proto3" json:"ReqMessageSearch,omitempty"`
	SType            string                            `protobuf:"bytes,2,opt,name=SType,proto3" json:"SType,omitempty"`
	Withid           int32                             `protobuf:"varint,3,opt,name=withid,proto3" json:"withid,omitempty"`
	WithType         int32                             `protobuf:"varint,4,opt,name=withType,proto3" json:"withType,omitempty"`
	Encry            int32                             `protobuf:"varint,5,opt,name=encry,proto3" json:"encry,omitempty"`
}

func (x *ReqSearchChannelMediaMessage) Reset() {
	*x = ReqSearchChannelMediaMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSearchChannelMediaMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSearchChannelMediaMessage) ProtoMessage() {}

func (x *ReqSearchChannelMediaMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSearchChannelMediaMessage.ProtoReflect.Descriptor instead.
func (*ReqSearchChannelMediaMessage) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{13}
}

func (x *ReqSearchChannelMediaMessage) GetReqMessageSearch() *pbmessageserver.ReqMessageSearch {
	if x != nil {
		return x.ReqMessageSearch
	}
	return nil
}

func (x *ReqSearchChannelMediaMessage) GetSType() string {
	if x != nil {
		return x.SType
	}
	return ""
}

func (x *ReqSearchChannelMediaMessage) GetWithid() int32 {
	if x != nil {
		return x.Withid
	}
	return 0
}

func (x *ReqSearchChannelMediaMessage) GetWithType() int32 {
	if x != nil {
		return x.WithType
	}
	return 0
}

func (x *ReqSearchChannelMediaMessage) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

type SearchChannelMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    int32   `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`        // 消息查询者（更具UserID 查询deleteMarkID）
	ChannelID int32   `protobuf:"varint,2,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`  // 消息接收者
	FromID    int32   `protobuf:"varint,3,opt,name=FromID,proto3" json:"FromID,omitempty"`        // 消息发送者
	Medias    []int32 `protobuf:"varint,4,rep,packed,name=Medias,proto3" json:"Medias,omitempty"` // 媒体类型
	OffsetID  int32   `protobuf:"varint,5,opt,name=OffsetID,proto3" json:"OffsetID,omitempty"`    // 偏移的MsgID
	AddOffset int32   `protobuf:"varint,6,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`  // 向后偏移量 （包括OffsetID）
	Encry     int32   `protobuf:"varint,7,opt,name=Encry,proto3" json:"Encry,omitempty"`          // 是否是加密库
	Limit     int32   `protobuf:"varint,8,opt,name=Limit,proto3" json:"Limit,omitempty"`          // 获取消息的条数限制
	MinDate   int32   `protobuf:"varint,9,opt,name=MinDate,proto3" json:"MinDate,omitempty"`      // 最小日期 暂时不用
	MaxDate   int32   `protobuf:"varint,10,opt,name=MaxDate,proto3" json:"MaxDate,omitempty"`     // 最大日期 暂时不用
	MinID     int32   `protobuf:"varint,11,opt,name=MinID,proto3" json:"MinID,omitempty"`         // 最小MsgID
	MaxID     int32   `protobuf:"varint,12,opt,name=MaxID,proto3" json:"MaxID,omitempty"`         // 最大MsgID 暂时不用
}

func (x *SearchChannelMsgReq) Reset() {
	*x = SearchChannelMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchChannelMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchChannelMsgReq) ProtoMessage() {}

func (x *SearchChannelMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchChannelMsgReq.ProtoReflect.Descriptor instead.
func (*SearchChannelMsgReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{14}
}

func (x *SearchChannelMsgReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *SearchChannelMsgReq) GetChannelID() int32 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *SearchChannelMsgReq) GetFromID() int32 {
	if x != nil {
		return x.FromID
	}
	return 0
}

func (x *SearchChannelMsgReq) GetMedias() []int32 {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *SearchChannelMsgReq) GetOffsetID() int32 {
	if x != nil {
		return x.OffsetID
	}
	return 0
}

func (x *SearchChannelMsgReq) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *SearchChannelMsgReq) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *SearchChannelMsgReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchChannelMsgReq) GetMinDate() int32 {
	if x != nil {
		return x.MinDate
	}
	return 0
}

func (x *SearchChannelMsgReq) GetMaxDate() int32 {
	if x != nil {
		return x.MaxDate
	}
	return 0
}

func (x *SearchChannelMsgReq) GetMinID() int32 {
	if x != nil {
		return x.MinID
	}
	return 0
}

func (x *SearchChannelMsgReq) GetMaxID() int32 {
	if x != nil {
		return x.MaxID
	}
	return 0
}

type SearchChannelMsgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*pbmessagedb.UserMsg `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
}

func (x *SearchChannelMsgResp) Reset() {
	*x = SearchChannelMsgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchChannelMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchChannelMsgResp) ProtoMessage() {}

func (x *SearchChannelMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchChannelMsgResp.ProtoReflect.Descriptor instead.
func (*SearchChannelMsgResp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{15}
}

func (x *SearchChannelMsgResp) GetMessages() []*pbmessagedb.UserMsg {
	if x != nil {
		return x.Messages
	}
	return nil
}

type ReplyChannelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply        []byte        `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode    int32         `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"` //1: 无法获取 2: 数据过去超时 3: 崩溃 4: 发起id为0
	DialogAction *DialogAction `protobuf:"bytes,3,opt,name=dialogAction,proto3" json:"dialogAction,omitempty"`
	ChannelId    int32         `protobuf:"varint,4,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 是否超级群
	AccessHash   int64         `protobuf:"varint,5,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FromId       int32         `protobuf:"varint,6,opt,name=FromId,proto3" json:"FromId,omitempty"`
}

func (x *ReplyChannelData) Reset() {
	*x = ReplyChannelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChannelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChannelData) ProtoMessage() {}

func (x *ReplyChannelData) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChannelData.ProtoReflect.Descriptor instead.
func (*ReplyChannelData) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{16}
}

func (x *ReplyChannelData) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyChannelData) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ReplyChannelData) GetDialogAction() *DialogAction {
	if x != nil {
		return x.DialogAction
	}
	return nil
}

func (x *ReplyChannelData) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReplyChannelData) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReplyChannelData) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

type DialogAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckOrInsertDialog                    []*CheckOrInsertDialog                    `protobuf:"bytes,1,rep,name=CheckOrInsertDialog,proto3" json:"CheckOrInsertDialog,omitempty"`
	DeleteUserDialog                       []*DeleteUserDialog                       `protobuf:"bytes,2,rep,name=DeleteUserDialog,proto3" json:"DeleteUserDialog,omitempty"`
	UpdatePeerDialogIncr                   []*UpdatePeerDialogIncr                   `protobuf:"bytes,3,rep,name=UpdatePeerDialogIncr,proto3" json:"UpdatePeerDialogIncr,omitempty"`
	UpdatePeerDialogIncrCounter            []*UpdatePeerDialogIncrCounter            `protobuf:"bytes,4,rep,name=UpdatePeerDialogIncrCounter,proto3" json:"UpdatePeerDialogIncrCounter,omitempty"`
	CreateChannelDialog                    []*CreateChannelDialog                    `protobuf:"bytes,5,rep,name=CreateChannelDialog,proto3" json:"CreateChannelDialog,omitempty"`
	CheckRecDialog                         []*CheckRecDialog                         `protobuf:"bytes,6,rep,name=CheckRecDialog,proto3" json:"CheckRecDialog,omitempty"`
	UpdateOrInsertUserChanDlg              []*UpdateOrInsertUserChanDlg              `protobuf:"bytes,7,rep,name=UpdateOrInsertUserChanDlg,proto3" json:"UpdateOrInsertUserChanDlg,omitempty"`
	CheckChannelOrInsert                   []*CheckChannelOrInsert                   `protobuf:"bytes,8,rep,name=CheckChannelOrInsert,proto3" json:"CheckChannelOrInsert,omitempty"`
	SetSuperGroupMsg                       []*SetSuperGroupMsg                       `protobuf:"bytes,9,rep,name=SetSuperGroupMsg,proto3" json:"SetSuperGroupMsg,omitempty"`
	CheckChannelOrInsertDlgNotClearDraft   []*CheckChannelOrInsertDlgNotClearDraft   `protobuf:"bytes,10,rep,name=CheckChannelOrInsertDlgNotClearDraft,proto3" json:"CheckChannelOrInsertDlgNotClearDraft,omitempty"`
	UpdateOrInsertUserChanDlgNotClearDraft []*UpdateOrInsertUserChanDlgNotClearDraft `protobuf:"bytes,11,rep,name=UpdateOrInsertUserChanDlgNotClearDraft,proto3" json:"UpdateOrInsertUserChanDlgNotClearDraft,omitempty"`
	UpdateChannelReadoutbox                []*UpdateChannelReadoutbox                `protobuf:"bytes,12,rep,name=UpdateChannelReadoutbox,proto3" json:"UpdateChannelReadoutbox,omitempty"`
	CreateChannelDialogClearUnread         []*CreateChannelDialogClearUnread         `protobuf:"bytes,13,rep,name=CreateChannelDialogClearUnread,proto3" json:"CreateChannelDialogClearUnread,omitempty"`
}

func (x *DialogAction) Reset() {
	*x = DialogAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DialogAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialogAction) ProtoMessage() {}

func (x *DialogAction) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialogAction.ProtoReflect.Descriptor instead.
func (*DialogAction) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{17}
}

func (x *DialogAction) GetCheckOrInsertDialog() []*CheckOrInsertDialog {
	if x != nil {
		return x.CheckOrInsertDialog
	}
	return nil
}

func (x *DialogAction) GetDeleteUserDialog() []*DeleteUserDialog {
	if x != nil {
		return x.DeleteUserDialog
	}
	return nil
}

func (x *DialogAction) GetUpdatePeerDialogIncr() []*UpdatePeerDialogIncr {
	if x != nil {
		return x.UpdatePeerDialogIncr
	}
	return nil
}

func (x *DialogAction) GetUpdatePeerDialogIncrCounter() []*UpdatePeerDialogIncrCounter {
	if x != nil {
		return x.UpdatePeerDialogIncrCounter
	}
	return nil
}

func (x *DialogAction) GetCreateChannelDialog() []*CreateChannelDialog {
	if x != nil {
		return x.CreateChannelDialog
	}
	return nil
}

func (x *DialogAction) GetCheckRecDialog() []*CheckRecDialog {
	if x != nil {
		return x.CheckRecDialog
	}
	return nil
}

func (x *DialogAction) GetUpdateOrInsertUserChanDlg() []*UpdateOrInsertUserChanDlg {
	if x != nil {
		return x.UpdateOrInsertUserChanDlg
	}
	return nil
}

func (x *DialogAction) GetCheckChannelOrInsert() []*CheckChannelOrInsert {
	if x != nil {
		return x.CheckChannelOrInsert
	}
	return nil
}

func (x *DialogAction) GetSetSuperGroupMsg() []*SetSuperGroupMsg {
	if x != nil {
		return x.SetSuperGroupMsg
	}
	return nil
}

func (x *DialogAction) GetCheckChannelOrInsertDlgNotClearDraft() []*CheckChannelOrInsertDlgNotClearDraft {
	if x != nil {
		return x.CheckChannelOrInsertDlgNotClearDraft
	}
	return nil
}

func (x *DialogAction) GetUpdateOrInsertUserChanDlgNotClearDraft() []*UpdateOrInsertUserChanDlgNotClearDraft {
	if x != nil {
		return x.UpdateOrInsertUserChanDlgNotClearDraft
	}
	return nil
}

func (x *DialogAction) GetUpdateChannelReadoutbox() []*UpdateChannelReadoutbox {
	if x != nil {
		return x.UpdateChannelReadoutbox
	}
	return nil
}

func (x *DialogAction) GetCreateChannelDialogClearUnread() []*CreateChannelDialogClearUnread {
	if x != nil {
		return x.CreateChannelDialogClearUnread
	}
	return nil
}

// 编辑超级群/channel 地理位置
type EditChannelLocationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug     *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`                        //请求方的userId
	KeyId     int64         `protobuf:"varint,3,opt,name=Key_id,json=KeyId,proto3" json:"Key_id,omitempty"`             //请求放的User_id
	MessageId int64         `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //请求协议的messagId
	ReqBytes  []byte        `protobuf:"bytes,5,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`                     //请求的协议的整个包
}

func (x *EditChannelLocationReq) Reset() {
	*x = EditChannelLocationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditChannelLocationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditChannelLocationReq) ProtoMessage() {}

func (x *EditChannelLocationReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditChannelLocationReq.ProtoReflect.Descriptor instead.
func (*EditChannelLocationReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{18}
}

func (x *EditChannelLocationReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *EditChannelLocationReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *EditChannelLocationReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *EditChannelLocationReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *EditChannelLocationReq) GetReqBytes() []byte {
	if x != nil {
		return x.ReqBytes
	}
	return nil
}

// 编辑超级群/channel 地理位置
type EditChannelLocationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespBytes []byte `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"` //请求的协议的整个包
}

func (x *EditChannelLocationResp) Reset() {
	*x = EditChannelLocationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditChannelLocationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditChannelLocationResp) ProtoMessage() {}

func (x *EditChannelLocationResp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditChannelLocationResp.ProtoReflect.Descriptor instead.
func (*EditChannelLocationResp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{19}
}

func (x *EditChannelLocationResp) GetRespBytes() []byte {
	if x != nil {
		return x.RespBytes
	}
	return nil
}

// 转让群主请求
type TransferGroupOwnerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug     *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`                        //请求方的userId
	KeyId     int64         `protobuf:"varint,3,opt,name=Key_id,json=KeyId,proto3" json:"Key_id,omitempty"`             //请求放的User_id
	MessageId int64         `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` //请求协议的messagId
	ReqBytes  []byte        `protobuf:"bytes,5,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`                     //请求的协议的整个包
}

func (x *TransferGroupOwnerReq) Reset() {
	*x = TransferGroupOwnerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferGroupOwnerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferGroupOwnerReq) ProtoMessage() {}

func (x *TransferGroupOwnerReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferGroupOwnerReq.ProtoReflect.Descriptor instead.
func (*TransferGroupOwnerReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{20}
}

func (x *TransferGroupOwnerReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *TransferGroupOwnerReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TransferGroupOwnerReq) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *TransferGroupOwnerReq) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *TransferGroupOwnerReq) GetReqBytes() []byte {
	if x != nil {
		return x.ReqBytes
	}
	return nil
}

// 转让群主返回
type TransferGroupOwnerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespBytes    []byte        `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"` //请求的协议的整个包
	DialogAction *DialogAction `protobuf:"bytes,2,opt,name=dialogAction,proto3" json:"dialogAction,omitempty"`
}

func (x *TransferGroupOwnerResp) Reset() {
	*x = TransferGroupOwnerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferGroupOwnerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferGroupOwnerResp) ProtoMessage() {}

func (x *TransferGroupOwnerResp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferGroupOwnerResp.ProtoReflect.Descriptor instead.
func (*TransferGroupOwnerResp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{21}
}

func (x *TransferGroupOwnerResp) GetRespBytes() []byte {
	if x != nil {
		return x.RespBytes
	}
	return nil
}

func (x *TransferGroupOwnerResp) GetDialogAction() *DialogAction {
	if x != nil {
		return x.DialogAction
	}
	return nil
}

// 转让群主请求
type TransferGroupOwnerByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debugs *pbcomm.Debug `protobuf:"bytes,1,opt,name=Debugs,proto3" json:"Debugs,omitempty"`
	FromId int32         `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"` // 请求方的userId
	ChanId int32         `protobuf:"varint,3,opt,name=ChanId,proto3" json:"ChanId,omitempty"`
	DestId int32         `protobuf:"varint,4,opt,name=DestId,proto3" json:"DestId,omitempty"` //
}

func (x *TransferGroupOwnerByIdReq) Reset() {
	*x = TransferGroupOwnerByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferGroupOwnerByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferGroupOwnerByIdReq) ProtoMessage() {}

func (x *TransferGroupOwnerByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferGroupOwnerByIdReq.ProtoReflect.Descriptor instead.
func (*TransferGroupOwnerByIdReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{22}
}

func (x *TransferGroupOwnerByIdReq) GetDebugs() *pbcomm.Debug {
	if x != nil {
		return x.Debugs
	}
	return nil
}

func (x *TransferGroupOwnerByIdReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *TransferGroupOwnerByIdReq) GetChanId() int32 {
	if x != nil {
		return x.ChanId
	}
	return 0
}

func (x *TransferGroupOwnerByIdReq) GetDestId() int32 {
	if x != nil {
		return x.DestId
	}
	return 0
}

// 转让群主返回
type TransferGroupOwnerByIdRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyCode int32  `protobuf:"varint,1,opt,name=Reply_code,json=ReplyCode,proto3" json:"Reply_code,omitempty"`
	ReplyInfo string `protobuf:"bytes,2,opt,name=Reply_info,json=ReplyInfo,proto3" json:"Reply_info,omitempty"`
}

func (x *TransferGroupOwnerByIdRsp) Reset() {
	*x = TransferGroupOwnerByIdRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferGroupOwnerByIdRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferGroupOwnerByIdRsp) ProtoMessage() {}

func (x *TransferGroupOwnerByIdRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferGroupOwnerByIdRsp.ProtoReflect.Descriptor instead.
func (*TransferGroupOwnerByIdRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{23}
}

func (x *TransferGroupOwnerByIdRsp) GetReplyCode() int32 {
	if x != nil {
		return x.ReplyCode
	}
	return 0
}

func (x *TransferGroupOwnerByIdRsp) GetReplyInfo() string {
	if x != nil {
		return x.ReplyInfo
	}
	return ""
}

type UpdateChannelReadoutbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug      *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	ReadOutMax int32         `protobuf:"varint,3,opt,name=readOutMax,proto3" json:"readOutMax,omitempty"`
	ChannelId  int32         `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
}

func (x *UpdateChannelReadoutbox) Reset() {
	*x = UpdateChannelReadoutbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelReadoutbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelReadoutbox) ProtoMessage() {}

func (x *UpdateChannelReadoutbox) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelReadoutbox.ProtoReflect.Descriptor instead.
func (*UpdateChannelReadoutbox) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateChannelReadoutbox) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *UpdateChannelReadoutbox) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateChannelReadoutbox) GetReadOutMax() int32 {
	if x != nil {
		return x.ReadOutMax
	}
	return 0
}

func (x *UpdateChannelReadoutbox) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

type CheckChannelOrInsertDlgNotClearDraft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug      *pbcomm.Debug        `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	Selfid     int32                `protobuf:"varint,2,opt,name=Selfid,proto3" json:"Selfid,omitempty"`
	Withid     int32                `protobuf:"varint,3,opt,name=Withid,proto3" json:"Withid,omitempty"`
	Type       int32                `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty"` // 1: empty 2: self 3: chat  4: user 5: channel
	Msg        *pbmessagedb.UserMsg `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	HandleType string               `protobuf:"bytes,6,opt,name=handleType,proto3" json:"handleType,omitempty"`
}

func (x *CheckChannelOrInsertDlgNotClearDraft) Reset() {
	*x = CheckChannelOrInsertDlgNotClearDraft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChannelOrInsertDlgNotClearDraft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChannelOrInsertDlgNotClearDraft) ProtoMessage() {}

func (x *CheckChannelOrInsertDlgNotClearDraft) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChannelOrInsertDlgNotClearDraft.ProtoReflect.Descriptor instead.
func (*CheckChannelOrInsertDlgNotClearDraft) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{25}
}

func (x *CheckChannelOrInsertDlgNotClearDraft) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *CheckChannelOrInsertDlgNotClearDraft) GetSelfid() int32 {
	if x != nil {
		return x.Selfid
	}
	return 0
}

func (x *CheckChannelOrInsertDlgNotClearDraft) GetWithid() int32 {
	if x != nil {
		return x.Withid
	}
	return 0
}

func (x *CheckChannelOrInsertDlgNotClearDraft) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CheckChannelOrInsertDlgNotClearDraft) GetMsg() *pbmessagedb.UserMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *CheckChannelOrInsertDlgNotClearDraft) GetHandleType() string {
	if x != nil {
		return x.HandleType
	}
	return ""
}

type UpdateOrInsertUserChanDlgNotClearDraft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug      *pbcomm.Debug        `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	Selfid     int32                `protobuf:"varint,2,opt,name=Selfid,proto3" json:"Selfid,omitempty"`
	Withid     int32                `protobuf:"varint,3,opt,name=Withid,proto3" json:"Withid,omitempty"`
	Type       int32                `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty"` // 1: empty 2: self 3: chat  4: user 5: channel
	Msg        *pbmessagedb.UserMsg `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	HandleType string               `protobuf:"bytes,6,opt,name=handleType,proto3" json:"handleType,omitempty"`
}

func (x *UpdateOrInsertUserChanDlgNotClearDraft) Reset() {
	*x = UpdateOrInsertUserChanDlgNotClearDraft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrInsertUserChanDlgNotClearDraft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrInsertUserChanDlgNotClearDraft) ProtoMessage() {}

func (x *UpdateOrInsertUserChanDlgNotClearDraft) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrInsertUserChanDlgNotClearDraft.ProtoReflect.Descriptor instead.
func (*UpdateOrInsertUserChanDlgNotClearDraft) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateOrInsertUserChanDlgNotClearDraft) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *UpdateOrInsertUserChanDlgNotClearDraft) GetSelfid() int32 {
	if x != nil {
		return x.Selfid
	}
	return 0
}

func (x *UpdateOrInsertUserChanDlgNotClearDraft) GetWithid() int32 {
	if x != nil {
		return x.Withid
	}
	return 0
}

func (x *UpdateOrInsertUserChanDlgNotClearDraft) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UpdateOrInsertUserChanDlgNotClearDraft) GetMsg() *pbmessagedb.UserMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *UpdateOrInsertUserChanDlgNotClearDraft) GetHandleType() string {
	if x != nil {
		return x.HandleType
	}
	return ""
}

type SetSuperGroupMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug     *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	Userid    int32         `protobuf:"varint,2,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Channelid int32         `protobuf:"varint,3,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Date      int64         `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	Msgbin    []byte        `protobuf:"bytes,5,opt,name=msgbin,proto3" json:"msgbin,omitempty"`
}

func (x *SetSuperGroupMsg) Reset() {
	*x = SetSuperGroupMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSuperGroupMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSuperGroupMsg) ProtoMessage() {}

func (x *SetSuperGroupMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSuperGroupMsg.ProtoReflect.Descriptor instead.
func (*SetSuperGroupMsg) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{27}
}

func (x *SetSuperGroupMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *SetSuperGroupMsg) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *SetSuperGroupMsg) GetChannelid() int32 {
	if x != nil {
		return x.Channelid
	}
	return 0
}

func (x *SetSuperGroupMsg) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *SetSuperGroupMsg) GetMsgbin() []byte {
	if x != nil {
		return x.Msgbin
	}
	return nil
}

type UpdateOrInsertUserChanDlg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug      *pbcomm.Debug        `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	Selfid     int32                `protobuf:"varint,2,opt,name=Selfid,proto3" json:"Selfid,omitempty"`
	Withid     int32                `protobuf:"varint,3,opt,name=Withid,proto3" json:"Withid,omitempty"`
	Type       int32                `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty"` // 1: empty 2: self 3: chat  4: user 5: channel
	Msg        *pbmessagedb.UserMsg `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	HandleType string               `protobuf:"bytes,6,opt,name=handleType,proto3" json:"handleType,omitempty"`
}

func (x *UpdateOrInsertUserChanDlg) Reset() {
	*x = UpdateOrInsertUserChanDlg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrInsertUserChanDlg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrInsertUserChanDlg) ProtoMessage() {}

func (x *UpdateOrInsertUserChanDlg) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrInsertUserChanDlg.ProtoReflect.Descriptor instead.
func (*UpdateOrInsertUserChanDlg) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateOrInsertUserChanDlg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *UpdateOrInsertUserChanDlg) GetSelfid() int32 {
	if x != nil {
		return x.Selfid
	}
	return 0
}

func (x *UpdateOrInsertUserChanDlg) GetWithid() int32 {
	if x != nil {
		return x.Withid
	}
	return 0
}

func (x *UpdateOrInsertUserChanDlg) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UpdateOrInsertUserChanDlg) GetMsg() *pbmessagedb.UserMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *UpdateOrInsertUserChanDlg) GetHandleType() string {
	if x != nil {
		return x.HandleType
	}
	return ""
}

type CheckChannelOrInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug      *pbcomm.Debug        `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	Selfid     int32                `protobuf:"varint,2,opt,name=Selfid,proto3" json:"Selfid,omitempty"`
	Withid     int32                `protobuf:"varint,3,opt,name=Withid,proto3" json:"Withid,omitempty"`
	Type       int32                `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty"` // 1: empty 2: self 3: chat  4: user 5: channel
	Msg        *pbmessagedb.UserMsg `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	HandleType string               `protobuf:"bytes,6,opt,name=handleType,proto3" json:"handleType,omitempty"`
}

func (x *CheckChannelOrInsert) Reset() {
	*x = CheckChannelOrInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChannelOrInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChannelOrInsert) ProtoMessage() {}

func (x *CheckChannelOrInsert) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChannelOrInsert.ProtoReflect.Descriptor instead.
func (*CheckChannelOrInsert) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{29}
}

func (x *CheckChannelOrInsert) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *CheckChannelOrInsert) GetSelfid() int32 {
	if x != nil {
		return x.Selfid
	}
	return 0
}

func (x *CheckChannelOrInsert) GetWithid() int32 {
	if x != nil {
		return x.Withid
	}
	return 0
}

func (x *CheckChannelOrInsert) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CheckChannelOrInsert) GetMsg() *pbmessagedb.UserMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *CheckChannelOrInsert) GetHandleType() string {
	if x != nil {
		return x.HandleType
	}
	return ""
}

type CheckRecDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug     *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"` // 是否频道
	Channelid int32         `protobuf:"varint,3,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Msgid     int32         `protobuf:"varint,4,opt,name=msgid,proto3" json:"msgid,omitempty"`
	Readin    int32         `protobuf:"varint,5,opt,name=readin,proto3" json:"readin,omitempty"`
	Pts       int32         `protobuf:"varint,6,opt,name=pts,proto3" json:"pts,omitempty"`
}

func (x *CheckRecDialog) Reset() {
	*x = CheckRecDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRecDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRecDialog) ProtoMessage() {}

func (x *CheckRecDialog) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRecDialog.ProtoReflect.Descriptor instead.
func (*CheckRecDialog) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{30}
}

func (x *CheckRecDialog) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *CheckRecDialog) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckRecDialog) GetChannelid() int32 {
	if x != nil {
		return x.Channelid
	}
	return 0
}

func (x *CheckRecDialog) GetMsgid() int32 {
	if x != nil {
		return x.Msgid
	}
	return 0
}

func (x *CheckRecDialog) GetReadin() int32 {
	if x != nil {
		return x.Readin
	}
	return 0
}

func (x *CheckRecDialog) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

type CheckOrInsertDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug      *pbcomm.Debug        `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	Selfid     int32                `protobuf:"varint,2,opt,name=Selfid,proto3" json:"Selfid,omitempty"`
	Withid     int32                `protobuf:"varint,3,opt,name=Withid,proto3" json:"Withid,omitempty"`
	Type       int32                `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty"` // 1: empty 2: self 3: chat  4: user 5: channel
	Msg        *pbmessagedb.UserMsg `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	HandleType string               `protobuf:"bytes,6,opt,name=handleType,proto3" json:"handleType,omitempty"`
}

func (x *CheckOrInsertDialog) Reset() {
	*x = CheckOrInsertDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckOrInsertDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckOrInsertDialog) ProtoMessage() {}

func (x *CheckOrInsertDialog) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckOrInsertDialog.ProtoReflect.Descriptor instead.
func (*CheckOrInsertDialog) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{31}
}

func (x *CheckOrInsertDialog) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *CheckOrInsertDialog) GetSelfid() int32 {
	if x != nil {
		return x.Selfid
	}
	return 0
}

func (x *CheckOrInsertDialog) GetWithid() int32 {
	if x != nil {
		return x.Withid
	}
	return 0
}

func (x *CheckOrInsertDialog) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CheckOrInsertDialog) GetMsg() *pbmessagedb.UserMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *CheckOrInsertDialog) GetHandleType() string {
	if x != nil {
		return x.HandleType
	}
	return ""
}

type DeleteUserDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug  *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	Selfid int32         `protobuf:"varint,2,opt,name=Selfid,proto3" json:"Selfid,omitempty"`
	Withid int32         `protobuf:"varint,3,opt,name=Withid,proto3" json:"Withid,omitempty"`
	Peer   int32         `protobuf:"varint,4,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (x *DeleteUserDialog) Reset() {
	*x = DeleteUserDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserDialog) ProtoMessage() {}

func (x *DeleteUserDialog) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserDialog.ProtoReflect.Descriptor instead.
func (*DeleteUserDialog) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteUserDialog) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *DeleteUserDialog) GetSelfid() int32 {
	if x != nil {
		return x.Selfid
	}
	return 0
}

func (x *DeleteUserDialog) GetWithid() int32 {
	if x != nil {
		return x.Withid
	}
	return 0
}

func (x *DeleteUserDialog) GetPeer() int32 {
	if x != nil {
		return x.Peer
	}
	return 0
}

type UpdatePeerDialogIncr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug                 *pbcomm.Debug                      `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	UpdateUserDialogParam *pbmessagedb.UpdateUserDialogParam `protobuf:"bytes,2,opt,name=UpdateUserDialogParam,proto3" json:"UpdateUserDialogParam,omitempty"`
}

func (x *UpdatePeerDialogIncr) Reset() {
	*x = UpdatePeerDialogIncr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePeerDialogIncr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePeerDialogIncr) ProtoMessage() {}

func (x *UpdatePeerDialogIncr) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePeerDialogIncr.ProtoReflect.Descriptor instead.
func (*UpdatePeerDialogIncr) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{33}
}

func (x *UpdatePeerDialogIncr) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *UpdatePeerDialogIncr) GetUpdateUserDialogParam() *pbmessagedb.UpdateUserDialogParam {
	if x != nil {
		return x.UpdateUserDialogParam
	}
	return nil
}

type UpdatePeerDialogIncrCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug                 *pbcomm.Debug                      `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	UpdateUserDialogParam *pbmessagedb.UpdateUserDialogParam `protobuf:"bytes,2,opt,name=UpdateUserDialogParam,proto3" json:"UpdateUserDialogParam,omitempty"`
}

func (x *UpdatePeerDialogIncrCounter) Reset() {
	*x = UpdatePeerDialogIncrCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePeerDialogIncrCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePeerDialogIncrCounter) ProtoMessage() {}

func (x *UpdatePeerDialogIncrCounter) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePeerDialogIncrCounter.ProtoReflect.Descriptor instead.
func (*UpdatePeerDialogIncrCounter) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{34}
}

func (x *UpdatePeerDialogIncrCounter) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *UpdatePeerDialogIncrCounter) GetUpdateUserDialogParam() *pbmessagedb.UpdateUserDialogParam {
	if x != nil {
		return x.UpdateUserDialogParam
	}
	return nil
}

type CreateChannelDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug     *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"` // 是否频道
	Channelid int32         `protobuf:"varint,3,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Msgid     int32         `protobuf:"varint,4,opt,name=msgid,proto3" json:"msgid,omitempty"`
	Readin    int32         `protobuf:"varint,5,opt,name=readin,proto3" json:"readin,omitempty"`
	Pts       int32         `protobuf:"varint,6,opt,name=pts,proto3" json:"pts,omitempty"`
	Pinned    bool          `protobuf:"varint,7,opt,name=pinned,proto3" json:"pinned,omitempty"`
}

func (x *CreateChannelDialog) Reset() {
	*x = CreateChannelDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelDialog) ProtoMessage() {}

func (x *CreateChannelDialog) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelDialog.ProtoReflect.Descriptor instead.
func (*CreateChannelDialog) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{35}
}

func (x *CreateChannelDialog) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *CreateChannelDialog) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateChannelDialog) GetChannelid() int32 {
	if x != nil {
		return x.Channelid
	}
	return 0
}

func (x *CreateChannelDialog) GetMsgid() int32 {
	if x != nil {
		return x.Msgid
	}
	return 0
}

func (x *CreateChannelDialog) GetReadin() int32 {
	if x != nil {
		return x.Readin
	}
	return 0
}

func (x *CreateChannelDialog) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *CreateChannelDialog) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

type CreateChannelDialogClearUnread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug     *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"` // 是否频道
	Channelid int32         `protobuf:"varint,3,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Msgid     int32         `protobuf:"varint,4,opt,name=msgid,proto3" json:"msgid,omitempty"`
	Readin    int32         `protobuf:"varint,5,opt,name=readin,proto3" json:"readin,omitempty"`
	Pts       int32         `protobuf:"varint,6,opt,name=pts,proto3" json:"pts,omitempty"`
	Pinned    bool          `protobuf:"varint,7,opt,name=pinned,proto3" json:"pinned,omitempty"`
}

func (x *CreateChannelDialogClearUnread) Reset() {
	*x = CreateChannelDialogClearUnread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelDialogClearUnread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelDialogClearUnread) ProtoMessage() {}

func (x *CreateChannelDialogClearUnread) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelDialogClearUnread.ProtoReflect.Descriptor instead.
func (*CreateChannelDialogClearUnread) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{36}
}

func (x *CreateChannelDialogClearUnread) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *CreateChannelDialogClearUnread) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateChannelDialogClearUnread) GetChannelid() int32 {
	if x != nil {
		return x.Channelid
	}
	return 0
}

func (x *CreateChannelDialogClearUnread) GetMsgid() int32 {
	if x != nil {
		return x.Msgid
	}
	return 0
}

func (x *CreateChannelDialogClearUnread) GetReadin() int32 {
	if x != nil {
		return x.Readin
	}
	return 0
}

func (x *CreateChannelDialogClearUnread) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *CreateChannelDialogClearUnread) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

type ReqChannelsReadMessageContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyid  uint64        `protobuf:"varint,1,opt,name=keyid,proto3" json:"keyid,omitempty"`   // 创建者的KEYID
	UserId int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"` // 是否频道
	Result []byte        `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqChannelsReadMessageContents) Reset() {
	*x = ReqChannelsReadMessageContents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqChannelsReadMessageContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqChannelsReadMessageContents) ProtoMessage() {}

func (x *ReqChannelsReadMessageContents) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqChannelsReadMessageContents.ProtoReflect.Descriptor instead.
func (*ReqChannelsReadMessageContents) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{37}
}

func (x *ReqChannelsReadMessageContents) GetKeyid() uint64 {
	if x != nil {
		return x.Keyid
	}
	return 0
}

func (x *ReqChannelsReadMessageContents) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqChannelsReadMessageContents) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReqChannelsReadMessageContents) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// message ReplyChannelsReadMessageContents {
// int32 error = 1; //1: 无法获取 2: 数据过去超时 3: 崩溃 4: 发起id为0
// }
type ReqEditPrivateChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`       // 是否频道
	ChannelId int32         `protobuf:"varint,2,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 是否超级群
	Ok        bool          `protobuf:"varint,3,opt,name=ok,proto3" json:"ok,omitempty"`               // infoserver给的ID
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditPrivateChat) Reset() {
	*x = ReqEditPrivateChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditPrivateChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditPrivateChat) ProtoMessage() {}

func (x *ReqEditPrivateChat) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditPrivateChat.ProtoReflect.Descriptor instead.
func (*ReqEditPrivateChat) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{38}
}

func (x *ReqEditPrivateChat) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqEditPrivateChat) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqEditPrivateChat) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *ReqEditPrivateChat) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// message ReplyEditPrivateChat {
// bytes result = 1;
// int32 error = 2; //1: 无法获取 2: 数据过去超时 3: 崩溃 4: 发起id为0
// }
type ReqGetChannelMessageExportLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte        `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChannelMessageExportLink) Reset() {
	*x = ReqGetChannelMessageExportLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMessageExportLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMessageExportLink) ProtoMessage() {}

func (x *ReqGetChannelMessageExportLink) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMessageExportLink.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMessageExportLink) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{39}
}

func (x *ReqGetChannelMessageExportLink) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReqGetChannelMessageExportLink) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqEditEveryoneQuiet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`       // 是否频道
	ChannelId int32         `protobuf:"varint,2,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 是否超级群
	Quiet     bool          `protobuf:"varint,3,opt,name=quiet,proto3" json:"quiet,omitempty"`         // infoserver给的ID
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditEveryoneQuiet) Reset() {
	*x = ReqEditEveryoneQuiet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditEveryoneQuiet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditEveryoneQuiet) ProtoMessage() {}

func (x *ReqEditEveryoneQuiet) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditEveryoneQuiet.ProtoReflect.Descriptor instead.
func (*ReqEditEveryoneQuiet) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{40}
}

func (x *ReqEditEveryoneQuiet) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqEditEveryoneQuiet) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqEditEveryoneQuiet) GetQuiet() bool {
	if x != nil {
		return x.Quiet
	}
	return false
}

func (x *ReqEditEveryoneQuiet) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags             int32  `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Creator           bool   `protobuf:"varint,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Kicked            bool   `protobuf:"varint,3,opt,name=kicked,proto3" json:"kicked,omitempty"`
	Left              bool   `protobuf:"varint,4,opt,name=left,proto3" json:"left,omitempty"`
	Editor            bool   `protobuf:"varint,5,opt,name=editor,proto3" json:"editor,omitempty"`
	Moderator         bool   `protobuf:"varint,6,opt,name=moderator,proto3" json:"moderator,omitempty"`
	Broadcast         bool   `protobuf:"varint,7,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Verified          bool   `protobuf:"varint,8,opt,name=verified,proto3" json:"verified,omitempty"`
	Megagroup         bool   `protobuf:"varint,9,opt,name=megagroup,proto3" json:"megagroup,omitempty"`
	Restricted        bool   `protobuf:"varint,10,opt,name=restricted,proto3" json:"restricted,omitempty"`
	Democracy         bool   `protobuf:"varint,11,opt,name=democracy,proto3" json:"democracy,omitempty"`
	Signatures        bool   `protobuf:"varint,12,opt,name=signatures,proto3" json:"signatures,omitempty"`
	Min               bool   `protobuf:"varint,13,opt,name=min,proto3" json:"min,omitempty"`
	Id                int32  `protobuf:"varint,14,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash        int64  `protobuf:"varint,15,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Title             string `protobuf:"bytes,16,opt,name=title,proto3" json:"title,omitempty"`
	Username          string `protobuf:"bytes,17,opt,name=username,proto3" json:"username,omitempty"`
	Photo             int32  `protobuf:"varint,18,opt,name=photo,proto3" json:"photo,omitempty"`
	Date              int32  `protobuf:"varint,19,opt,name=date,proto3" json:"date,omitempty"`
	Version           int32  `protobuf:"varint,20,opt,name=version,proto3" json:"version,omitempty"`
	RestrictionReason bool   `protobuf:"varint,21,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{41}
}

func (x *Channel) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Channel) GetCreator() bool {
	if x != nil {
		return x.Creator
	}
	return false
}

func (x *Channel) GetKicked() bool {
	if x != nil {
		return x.Kicked
	}
	return false
}

func (x *Channel) GetLeft() bool {
	if x != nil {
		return x.Left
	}
	return false
}

func (x *Channel) GetEditor() bool {
	if x != nil {
		return x.Editor
	}
	return false
}

func (x *Channel) GetModerator() bool {
	if x != nil {
		return x.Moderator
	}
	return false
}

func (x *Channel) GetBroadcast() bool {
	if x != nil {
		return x.Broadcast
	}
	return false
}

func (x *Channel) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *Channel) GetMegagroup() bool {
	if x != nil {
		return x.Megagroup
	}
	return false
}

func (x *Channel) GetRestricted() bool {
	if x != nil {
		return x.Restricted
	}
	return false
}

func (x *Channel) GetDemocracy() bool {
	if x != nil {
		return x.Democracy
	}
	return false
}

func (x *Channel) GetSignatures() bool {
	if x != nil {
		return x.Signatures
	}
	return false
}

func (x *Channel) GetMin() bool {
	if x != nil {
		return x.Min
	}
	return false
}

func (x *Channel) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Channel) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *Channel) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Channel) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Channel) GetPhoto() int32 {
	if x != nil {
		return x.Photo
	}
	return 0
}

func (x *Channel) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *Channel) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Channel) GetRestrictionReason() bool {
	if x != nil {
		return x.RestrictionReason
	}
	return false
}

type UpdateNewChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags        int32  `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Out          bool   `protobuf:"varint,2,opt,name=out,proto3" json:"out,omitempty"`
	Mentioned    bool   `protobuf:"varint,3,opt,name=mentioned,proto3" json:"mentioned,omitempty"`
	MediaUnread  bool   `protobuf:"varint,4,opt,name=media_unread,json=mediaUnread,proto3" json:"media_unread,omitempty"`
	Silent       bool   `protobuf:"varint,5,opt,name=silent,proto3" json:"silent,omitempty"`
	Post         bool   `protobuf:"varint,6,opt,name=post,proto3" json:"post,omitempty"`
	Id           int32  `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	FromId       int32  `protobuf:"varint,8,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ToId         int32  `protobuf:"varint,9,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`
	ReplyToMsgId bool   `protobuf:"varint,10,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Date         int32  `protobuf:"varint,11,opt,name=date,proto3" json:"date,omitempty"`
	Action       []byte `protobuf:"bytes,12,opt,name=action,proto3" json:"action,omitempty"`
	Pts          int32  `protobuf:"varint,13,opt,name=pts,proto3" json:"pts,omitempty"`
	PtsCount     int32  `protobuf:"varint,14,opt,name=pts_count,json=ptsCount,proto3" json:"pts_count,omitempty"`
}

func (x *UpdateNewChannelMessage) Reset() {
	*x = UpdateNewChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNewChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNewChannelMessage) ProtoMessage() {}

func (x *UpdateNewChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNewChannelMessage.ProtoReflect.Descriptor instead.
func (*UpdateNewChannelMessage) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateNewChannelMessage) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *UpdateNewChannelMessage) GetOut() bool {
	if x != nil {
		return x.Out
	}
	return false
}

func (x *UpdateNewChannelMessage) GetMentioned() bool {
	if x != nil {
		return x.Mentioned
	}
	return false
}

func (x *UpdateNewChannelMessage) GetMediaUnread() bool {
	if x != nil {
		return x.MediaUnread
	}
	return false
}

func (x *UpdateNewChannelMessage) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *UpdateNewChannelMessage) GetPost() bool {
	if x != nil {
		return x.Post
	}
	return false
}

func (x *UpdateNewChannelMessage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateNewChannelMessage) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *UpdateNewChannelMessage) GetToId() int32 {
	if x != nil {
		return x.ToId
	}
	return 0
}

func (x *UpdateNewChannelMessage) GetReplyToMsgId() bool {
	if x != nil {
		return x.ReplyToMsgId
	}
	return false
}

func (x *UpdateNewChannelMessage) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *UpdateNewChannelMessage) GetAction() []byte {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *UpdateNewChannelMessage) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *UpdateNewChannelMessage) GetPtsCount() int32 {
	if x != nil {
		return x.PtsCount
	}
	return 0
}

// 创建channel
// channels.createChannel#f4893d7f flags:# broadcast:flags.0?true megagroup:flags.1?true title:string about:string = Updates;
type ReqCreateChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId     int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`                                 // channelid
	UserId        int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`                                       // userid
	Title         string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                          // 群标题
	About         string        `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`                                          // 描述
	FromKeyid     int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`                // 创建者的KEYID
	BroadCast     bool          `protobuf:"varint,6,opt,name=broadCast,proto3" json:"broadCast,omitempty"`                                 // 是否频道
	Megagroup     bool          `protobuf:"varint,7,opt,name=megagroup,proto3" json:"megagroup,omitempty"`                                 // 是否超级群
	ReplyMsgId    uint64        `protobuf:"varint,8,opt,name=replyMsgId,proto3" json:"replyMsgId,omitempty"`                               // infoserver给的ID
	HasGeo        bool          `protobuf:"varint,9,opt,name=has_geo,json=hasGeo,proto3" json:"has_geo,omitempty"`                         //是否创建具有地理位置坐标的群
	Location      []byte        `protobuf:"bytes,10,opt,name=Location,proto3" json:"Location,omitempty"`                                   //超级群
	Addr          string        `protobuf:"bytes,11,opt,name=Addr,proto3" json:"Addr,omitempty"`                                           //群位置信息
	BanAddContact bool          `protobuf:"varint,12,opt,name=Ban_add_contact,json=BanAddContact,proto3" json:"Ban_add_contact,omitempty"` // for 禁止加好友 add by qingsong at 2019-12-25
	Debug         *pbcomm.Debug `protobuf:"bytes,13,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqCreateChannel) Reset() {
	*x = ReqCreateChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCreateChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCreateChannel) ProtoMessage() {}

func (x *ReqCreateChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCreateChannel.ProtoReflect.Descriptor instead.
func (*ReqCreateChannel) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{43}
}

func (x *ReqCreateChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqCreateChannel) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqCreateChannel) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ReqCreateChannel) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *ReqCreateChannel) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqCreateChannel) GetBroadCast() bool {
	if x != nil {
		return x.BroadCast
	}
	return false
}

func (x *ReqCreateChannel) GetMegagroup() bool {
	if x != nil {
		return x.Megagroup
	}
	return false
}

func (x *ReqCreateChannel) GetReplyMsgId() uint64 {
	if x != nil {
		return x.ReplyMsgId
	}
	return 0
}

func (x *ReqCreateChannel) GetHasGeo() bool {
	if x != nil {
		return x.HasGeo
	}
	return false
}

func (x *ReqCreateChannel) GetLocation() []byte {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ReqCreateChannel) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ReqCreateChannel) GetBanAddContact() bool {
	if x != nil {
		return x.BanAddContact
	}
	return false
}

func (x *ReqCreateChannel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 邀请用户进入超级群
type ReqInviteChannelMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`                  // 频道超级群ID
	Title      string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                           // 标题
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`                        // 邀请者的ID
	PeerId     []int32       `protobuf:"varint,4,rep,packed,name=peerId,proto3" json:"peerId,omitempty"`                 // 被邀请者的ID
	FromKeyid  int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"` // 邀请者的KEYID
	AccessHash int64         `protobuf:"varint,6,opt,name=accessHash,proto3" json:"accessHash,omitempty"`                // 频道超级群的哈希
	IsForce    bool          `protobuf:"varint,7,opt,name=is_force,json=isForce,proto3" json:"is_force,omitempty"`       // add by QingSong at 2019-12-12 for 判别是否来自管理平台批量拉群：true or false
	Debug      *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqInviteChannelMember) Reset() {
	*x = ReqInviteChannelMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqInviteChannelMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqInviteChannelMember) ProtoMessage() {}

func (x *ReqInviteChannelMember) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqInviteChannelMember.ProtoReflect.Descriptor instead.
func (*ReqInviteChannelMember) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{44}
}

func (x *ReqInviteChannelMember) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqInviteChannelMember) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ReqInviteChannelMember) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqInviteChannelMember) GetPeerId() []int32 {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *ReqInviteChannelMember) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqInviteChannelMember) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqInviteChannelMember) GetIsForce() bool {
	if x != nil {
		return x.IsForce
	}
	return false
}

func (x *ReqInviteChannelMember) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 邀请用户进入超级群
type ReqJoinChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`                  //超级群ID
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`                        // 自己的ID
	FromKeyid  int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"` //自己的KEYID
	AccessHash int64         `protobuf:"varint,6,opt,name=accessHash,proto3" json:"accessHash,omitempty"`                //超级群的哈希
	ByLink     bool          `protobuf:"varint,7,opt,name=byLink,proto3" json:"byLink,omitempty"`                        //是否通过链接加入
	Invitor    int32         `protobuf:"varint,8,opt,name=invitor,proto3" json:"invitor,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,9,opt,name=debug,proto3" json:"debug,omitempty"`
	InviteType int32         `protobuf:"varint,10,opt,name=invite_type,json=inviteType,proto3" json:"invite_type,omitempty"` //邀请类型 1-二维码邀请
}

func (x *ReqJoinChannel) Reset() {
	*x = ReqJoinChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqJoinChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqJoinChannel) ProtoMessage() {}

func (x *ReqJoinChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqJoinChannel.ProtoReflect.Descriptor instead.
func (*ReqJoinChannel) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{45}
}

func (x *ReqJoinChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqJoinChannel) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqJoinChannel) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqJoinChannel) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqJoinChannel) GetByLink() bool {
	if x != nil {
		return x.ByLink
	}
	return false
}

func (x *ReqJoinChannel) GetInvitor() int32 {
	if x != nil {
		return x.Invitor
	}
	return 0
}

func (x *ReqJoinChannel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ReqJoinChannel) GetInviteType() int32 {
	if x != nil {
		return x.InviteType
	}
	return 0
}

// 踢人
type ReqKickFromChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Kicker    int32         `protobuf:"varint,2,opt,name=kicker,proto3" json:"kicker,omitempty"`                          //谁踢人
	Kickee    int32         `protobuf:"varint,3,opt,name=kickee,proto3" json:"kickee,omitempty"`                          //谁被踢
	IsBotUser bool          `protobuf:"varint,4,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"` //被邀请者是不是机器人
	IsKicked  bool          `protobuf:"varint,5,opt,name=is_kicked,json=isKicked,proto3" json:"is_kicked,omitempty"`      // 是否是离开超级群\频道
	KickedId  int32         `protobuf:"varint,6,opt,name=Kicked_id,json=KickedId,proto3" json:"Kicked_id,omitempty"`      //如果是超级群被踢的话将，此用户保存到被踢列表中
	FromKeyid int64         `protobuf:"varint,7,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`   //踢人者的KEYID
	Debug     *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqKickFromChannel) Reset() {
	*x = ReqKickFromChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqKickFromChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqKickFromChannel) ProtoMessage() {}

func (x *ReqKickFromChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqKickFromChannel.ProtoReflect.Descriptor instead.
func (*ReqKickFromChannel) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{46}
}

func (x *ReqKickFromChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqKickFromChannel) GetKicker() int32 {
	if x != nil {
		return x.Kicker
	}
	return 0
}

func (x *ReqKickFromChannel) GetKickee() int32 {
	if x != nil {
		return x.Kickee
	}
	return 0
}

func (x *ReqKickFromChannel) GetIsBotUser() bool {
	if x != nil {
		return x.IsBotUser
	}
	return false
}

func (x *ReqKickFromChannel) GetIsKicked() bool {
	if x != nil {
		return x.IsKicked
	}
	return false
}

func (x *ReqKickFromChannel) GetKickedId() int32 {
	if x != nil {
		return x.KickedId
	}
	return 0
}

func (x *ReqKickFromChannel) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqKickFromChannel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 退出超级群
type ReqLeaveChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`                  //退出的超级群ID
	UserId    int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`                        // 退出的用户
	FromKeyid int64         `protobuf:"varint,3,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"` //退出用户的KEYID
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqLeaveChannel) Reset() {
	*x = ReqLeaveChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLeaveChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLeaveChannel) ProtoMessage() {}

func (x *ReqLeaveChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLeaveChannel.ProtoReflect.Descriptor instead.
func (*ReqLeaveChannel) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{47}
}

func (x *ReqLeaveChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqLeaveChannel) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqLeaveChannel) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqLeaveChannel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// edit title
type ReqEditChannelTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Title     string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	UserId    int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyid int64         `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditChannelTitle) Reset() {
	*x = ReqEditChannelTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditChannelTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditChannelTitle) ProtoMessage() {}

func (x *ReqEditChannelTitle) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditChannelTitle.ProtoReflect.Descriptor instead.
func (*ReqEditChannelTitle) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{48}
}

func (x *ReqEditChannelTitle) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqEditChannelTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ReqEditChannelTitle) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqEditChannelTitle) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqEditChannelTitle) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 请求参数
type ReqEditChannelAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"` //请求者ID
	ChannelId  int32         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`         //频道ID
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`               //被升级或降级的人
	FromKeyId  int64         `protobuf:"varint,4,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`         //请求者的KEYID
	Role       []byte        `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`                    //admin rights
	KeyId      uint64        `protobuf:"varint,6,opt,name=keyId,proto3" json:"keyId,omitempty"`
	AccessHash int64         `protobuf:"varint,7,opt,name=accessHash,proto3" json:"accessHash,omitempty"` //哈希
	Rank       string        `protobuf:"bytes,8,opt,name=rank,proto3" json:"rank,omitempty"`              // 标签
	Debug      *pbcomm.Debug `protobuf:"bytes,9,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditChannelAdmin) Reset() {
	*x = ReqEditChannelAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditChannelAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditChannelAdmin) ProtoMessage() {}

func (x *ReqEditChannelAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditChannelAdmin.ProtoReflect.Descriptor instead.
func (*ReqEditChannelAdmin) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{49}
}

func (x *ReqEditChannelAdmin) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqEditChannelAdmin) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqEditChannelAdmin) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqEditChannelAdmin) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqEditChannelAdmin) GetRole() []byte {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *ReqEditChannelAdmin) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ReqEditChannelAdmin) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqEditChannelAdmin) GetRank() string {
	if x != nil {
		return x.Rank
	}
	return ""
}

func (x *ReqEditChannelAdmin) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// edit photo
type ReqEditChannelPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Photo     []byte        `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	FromKeyid int64         `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditChannelPhoto) Reset() {
	*x = ReqEditChannelPhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditChannelPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditChannelPhoto) ProtoMessage() {}

func (x *ReqEditChannelPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditChannelPhoto.ProtoReflect.Descriptor instead.
func (*ReqEditChannelPhoto) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{50}
}

func (x *ReqEditChannelPhoto) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqEditChannelPhoto) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqEditChannelPhoto) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *ReqEditChannelPhoto) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqEditChannelPhoto) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ChatInviteExported struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link  string        `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ChatInviteExported) Reset() {
	*x = ChatInviteExported{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatInviteExported) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatInviteExported) ProtoMessage() {}

func (x *ChatInviteExported) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatInviteExported.ProtoReflect.Descriptor instead.
func (*ChatInviteExported) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{51}
}

func (x *ChatInviteExported) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *ChatInviteExported) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// ################################ 编辑超级群群说明信息 editAbout ######################
// 请求参数
type ReqEditChannelAbout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	FromKeyId  int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId  int32         `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	About      string        `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
	AccessHash int64         `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditChannelAbout) Reset() {
	*x = ReqEditChannelAbout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditChannelAbout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditChannelAbout) ProtoMessage() {}

func (x *ReqEditChannelAbout) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditChannelAbout.ProtoReflect.Descriptor instead.
func (*ReqEditChannelAbout) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{52}
}

func (x *ReqEditChannelAbout) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqEditChannelAbout) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqEditChannelAbout) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqEditChannelAbout) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *ReqEditChannelAbout) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqEditChannelAbout) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回参数
//
//	message ReplyEditChannelAbout {
//	   bool succeed = 1;
//	   int32 error_code = 2;
//	}
//
// ################################ 超级群删除指定人发送的消息 deleteUserHistory ######################
// 请求参数
type ReqDeleteChannelMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"` // 删除方id
	FromKeyid uint64        `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Flags     int32         `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`   //标识
	Revoke    bool          `protobuf:"varint,4,opt,name=revoke,proto3" json:"revoke,omitempty"` // shifou wei duifang shanchu
	Id        []int32       `protobuf:"varint,5,rep,packed,name=id,proto3" json:"id,omitempty"`
	Channelid int32         `protobuf:"varint,6,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDeleteChannelMsg) Reset() {
	*x = ReqDeleteChannelMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteChannelMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteChannelMsg) ProtoMessage() {}

func (x *ReqDeleteChannelMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteChannelMsg.ProtoReflect.Descriptor instead.
func (*ReqDeleteChannelMsg) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{53}
}

func (x *ReqDeleteChannelMsg) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqDeleteChannelMsg) GetFromKeyid() uint64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqDeleteChannelMsg) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqDeleteChannelMsg) GetRevoke() bool {
	if x != nil {
		return x.Revoke
	}
	return false
}

func (x *ReqDeleteChannelMsg) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReqDeleteChannelMsg) GetChannelid() int32 {
	if x != nil {
		return x.Channelid
	}
	return 0
}

func (x *ReqDeleteChannelMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回参数
//
//	message ReplyDeleteChannelMsg {
//	   bytes result = 1;
//	   int32 error = 2; // 1.获取失败 2.删除失败
//	}
//
// ################################ 超级群删除自己端的历史 ###################################
type ReqDeleteChannelSelfHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ChannelId  int32         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FromKeyid  int64         `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	FromidPts  int32         `protobuf:"varint,5,opt,name=fromid_pts,json=fromidPts,proto3" json:"fromid_pts,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDeleteChannelSelfHistory) Reset() {
	*x = ReqDeleteChannelSelfHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteChannelSelfHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteChannelSelfHistory) ProtoMessage() {}

func (x *ReqDeleteChannelSelfHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteChannelSelfHistory.ProtoReflect.Descriptor instead.
func (*ReqDeleteChannelSelfHistory) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{54}
}

func (x *ReqDeleteChannelSelfHistory) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqDeleteChannelSelfHistory) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqDeleteChannelSelfHistory) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqDeleteChannelSelfHistory) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqDeleteChannelSelfHistory) GetFromidPts() int32 {
	if x != nil {
		return x.FromidPts
	}
	return 0
}

func (x *ReqDeleteChannelSelfHistory) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// ################################ 超级群删除指定条消息 deleteMessages ######################
// 请求参数
type ReqDeleteChannelHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ChannelId  int32         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UsreId     int32         `protobuf:"varint,3,opt,name=usreId,proto3" json:"usreId,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FromKeyid  int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDeleteChannelHistory) Reset() {
	*x = ReqDeleteChannelHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteChannelHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteChannelHistory) ProtoMessage() {}

func (x *ReqDeleteChannelHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteChannelHistory.ProtoReflect.Descriptor instead.
func (*ReqDeleteChannelHistory) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{55}
}

func (x *ReqDeleteChannelHistory) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqDeleteChannelHistory) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqDeleteChannelHistory) GetUsreId() int32 {
	if x != nil {
		return x.UsreId
	}
	return 0
}

func (x *ReqDeleteChannelHistory) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqDeleteChannelHistory) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqDeleteChannelHistory) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回参数
//
//	message ReplyDeleteChannelHistory {
//	   bytes result = 1;
//	   int32 error_code = 6;
//	}
//
// ################################ 超级群中置顶一条消息 updatePinnedMessage ######################
// 请求参数
type ReqUpdatePinnedChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId int32 `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Flags  int32 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Silent bool  `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	// InputChannel channel = 4;
	ChannelId int32         `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Id        int32         `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	FromKeyid int64         `protobuf:"varint,6,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqUpdatePinnedChannelMessage) Reset() {
	*x = ReqUpdatePinnedChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdatePinnedChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdatePinnedChannelMessage) ProtoMessage() {}

func (x *ReqUpdatePinnedChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdatePinnedChannelMessage.ProtoReflect.Descriptor instead.
func (*ReqUpdatePinnedChannelMessage) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{56}
}

func (x *ReqUpdatePinnedChannelMessage) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *ReqUpdatePinnedChannelMessage) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqUpdatePinnedChannelMessage) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 返回参数
//
//	message ReplyUpdatePinnedChannelMessage {
//	   bytes reply = 1; // 二进制，真实类型是mtproto.tl_updates_layer62
//	   int32 error_code = 2;
//	}
//
// ################################ 频道设置username checkUsername updateUsername ######################
// // 请求参数
//
//	message ReqCheckChannelUsername {
//	   int32 from_id = 1;
//	   InputChannel channel = 2;
//	   string username = 3;
//	   pbcomm.Debug debug = 4;
//	}
//
// // 返回参数
//
//	message ReplyCheckChannelUsername {
//	   int32 msgid = 1;
//	   int32 date = 2;
//	   int32 pts = 3;
//	   bool check_user_name = 4;
//	}
//
// // 请求参数
//
//	message ReqUpdateChannelUsername {
//	   int32 from_id = 1;
//	   InputChannel channel = 2;
//	   string username = 3;
//	   pbcomm.Debug debug = 4;
//	}
//
// // 返回参数
//
//	message ReplyUpdateChannelUsername {
//	   int32 msgid = 1;
//	   int32 date = 2;
//	   int32 pts = 3;
//	   bool update_user_name = 4;
//	}
//
// //################################ 频道生成邀请链接 exportInvite ######################
// // 请求参数
//
//	message ReqExportChannelInvite {
//	   int32 from_id = 1;
//	   InputChannel channel = 2;
//	   string link = 3;
//	   pbcomm.Debug debug = 4;
//	}
//
// // 返回参数
//
//	message ReplyExportChannelInvite {
//	   int32 msgid = 1;
//	   int32 date = 2;
//	   int32 pts = 3;
//	}
//
// ################################ 删除超级群 deletechannel ######################
// deletechannel 请求参数
type ReqDeleteChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId  int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId  int32         `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDeleteChannel) Reset() {
	*x = ReqDeleteChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteChannel) ProtoMessage() {}

func (x *ReqDeleteChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteChannel.ProtoReflect.Descriptor instead.
func (*ReqDeleteChannel) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{57}
}

func (x *ReqDeleteChannel) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqDeleteChannel) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqDeleteChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqDeleteChannel) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqDeleteChannel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// ############################### 读取channel历史 #########################
type ReqReadChannelHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid        int32                         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	FromKeyid     int64                         `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	ChannelId     int32                         `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	TopMsgId      int32                         `protobuf:"varint,4,opt,name=topMsgId,proto3" json:"topMsgId,omitempty"`
	Debug         *pbcomm.Debug                 `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
	ChannelDialog *pbmessagedb.UserDialogAndMsg `protobuf:"bytes,6,opt,name=ChannelDialog,proto3" json:"ChannelDialog,omitempty"`
}

func (x *ReqReadChannelHistory) Reset() {
	*x = ReqReadChannelHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqReadChannelHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqReadChannelHistory) ProtoMessage() {}

func (x *ReqReadChannelHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqReadChannelHistory.ProtoReflect.Descriptor instead.
func (*ReqReadChannelHistory) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{58}
}

func (x *ReqReadChannelHistory) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *ReqReadChannelHistory) GetFromKeyid() int64 {
	if x != nil {
		return x.FromKeyid
	}
	return 0
}

func (x *ReqReadChannelHistory) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqReadChannelHistory) GetTopMsgId() int32 {
	if x != nil {
		return x.TopMsgId
	}
	return 0
}

func (x *ReqReadChannelHistory) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ReqReadChannelHistory) GetChannelDialog() *pbmessagedb.UserDialogAndMsg {
	if x != nil {
		return x.ChannelDialog
	}
	return nil
}

type ReqUpdateChannelReadOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	MaxId     int32         `protobuf:"varint,2,opt,name=maxId,proto3" json:"maxId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqUpdateChannelReadOut) Reset() {
	*x = ReqUpdateChannelReadOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateChannelReadOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateChannelReadOut) ProtoMessage() {}

func (x *ReqUpdateChannelReadOut) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateChannelReadOut.ProtoReflect.Descriptor instead.
func (*ReqUpdateChannelReadOut) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{59}
}

func (x *ReqUpdateChannelReadOut) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqUpdateChannelReadOut) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *ReqUpdateChannelReadOut) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUpdateChannelReadOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Maxid int32 `protobuf:"varint,1,opt,name=maxid,proto3" json:"maxid,omitempty"`
	Pts   int32 `protobuf:"varint,2,opt,name=pts,proto3" json:"pts,omitempty"`
}

func (x *ReplyUpdateChannelReadOut) Reset() {
	*x = ReplyUpdateChannelReadOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUpdateChannelReadOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUpdateChannelReadOut) ProtoMessage() {}

func (x *ReplyUpdateChannelReadOut) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUpdateChannelReadOut.ProtoReflect.Descriptor instead.
func (*ReplyUpdateChannelReadOut) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{60}
}

func (x *ReplyUpdateChannelReadOut) GetMaxid() int32 {
	if x != nil {
		return x.Maxid
	}
	return 0
}

func (x *ReplyUpdateChannelReadOut) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

// #####################超级群get diff###################
type ReqGetChannelDifference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId        int32                         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId     int64                         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Flags         int32                         `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	Force         bool                          `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	ChannelId     int32                         `protobuf:"varint,5,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Pts           int32                         `protobuf:"varint,6,opt,name=pts,proto3" json:"pts,omitempty"`
	Limit         int32                         `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Range_MinId   int32                         `protobuf:"varint,8,opt,name=range_MinId,json=rangeMinId,proto3" json:"range_MinId,omitempty"`
	Range_MaxId   int32                         `protobuf:"varint,9,opt,name=range_MaxId,json=rangeMaxId,proto3" json:"range_MaxId,omitempty"`
	Device        int32                         `protobuf:"varint,10,opt,name=device,proto3" json:"device,omitempty"` //1, pc 2, android 3, ios
	Debug         *pbcomm.Debug                 `protobuf:"bytes,11,opt,name=debug,proto3" json:"debug,omitempty"`
	ChannelDialog *pbmessagedb.UserDialogAndMsg `protobuf:"bytes,12,opt,name=ChannelDialog,proto3" json:"ChannelDialog,omitempty"`
}

func (x *ReqGetChannelDifference) Reset() {
	*x = ReqGetChannelDifference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelDifference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelDifference) ProtoMessage() {}

func (x *ReqGetChannelDifference) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelDifference.ProtoReflect.Descriptor instead.
func (*ReqGetChannelDifference) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{61}
}

func (x *ReqGetChannelDifference) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetChannelDifference) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqGetChannelDifference) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqGetChannelDifference) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *ReqGetChannelDifference) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelDifference) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReqGetChannelDifference) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetChannelDifference) GetRange_MinId() int32 {
	if x != nil {
		return x.Range_MinId
	}
	return 0
}

func (x *ReqGetChannelDifference) GetRange_MaxId() int32 {
	if x != nil {
		return x.Range_MaxId
	}
	return 0
}

func (x *ReqGetChannelDifference) GetDevice() int32 {
	if x != nil {
		return x.Device
	}
	return 0
}

func (x *ReqGetChannelDifference) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ReqGetChannelDifference) GetChannelDialog() *pbmessagedb.UserDialogAndMsg {
	if x != nil {
		return x.ChannelDialog
	}
	return nil
}

type ReplyGetChannelDifferenceEmpty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags   int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Final   bool  `protobuf:"varint,2,opt,name=final,proto3" json:"final,omitempty"`
	Pts     int32 `protobuf:"varint,3,opt,name=pts,proto3" json:"pts,omitempty"`
	Timeout int32 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *ReplyGetChannelDifferenceEmpty) Reset() {
	*x = ReplyGetChannelDifferenceEmpty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelDifferenceEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelDifferenceEmpty) ProtoMessage() {}

func (x *ReplyGetChannelDifferenceEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelDifferenceEmpty.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelDifferenceEmpty) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{62}
}

func (x *ReplyGetChannelDifferenceEmpty) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReplyGetChannelDifferenceEmpty) GetFinal() bool {
	if x != nil {
		return x.Final
	}
	return false
}

func (x *ReplyGetChannelDifferenceEmpty) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReplyGetChannelDifferenceEmpty) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type ReplyGetChannelDifferenceTooLong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags           int32    `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Final           bool     `protobuf:"varint,2,opt,name=final,proto3" json:"final,omitempty"`
	Pts             int32    `protobuf:"varint,3,opt,name=pts,proto3" json:"pts,omitempty"`
	Timeout         int32    `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	TopMessage      int32    `protobuf:"varint,5,opt,name=top_message,json=topMessage,proto3" json:"top_message,omitempty"`
	ReadInboxMaxId  int32    `protobuf:"varint,6,opt,name=read_inbox_max_id,json=readInboxMaxId,proto3" json:"read_inbox_max_id,omitempty"`
	ReadOutboxMaxId int32    `protobuf:"varint,7,opt,name=read_outbox_max_id,json=readOutboxMaxId,proto3" json:"read_outbox_max_id,omitempty"`
	UnreadCount     int32    `protobuf:"varint,8,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	Msgs            [][]byte `protobuf:"bytes,9,rep,name=msgs,proto3" json:"msgs,omitempty"`
	ErrorCode       int32    `protobuf:"varint,10,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ReplyGetChannelDifferenceTooLong) Reset() {
	*x = ReplyGetChannelDifferenceTooLong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelDifferenceTooLong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelDifferenceTooLong) ProtoMessage() {}

func (x *ReplyGetChannelDifferenceTooLong) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelDifferenceTooLong.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelDifferenceTooLong) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{63}
}

func (x *ReplyGetChannelDifferenceTooLong) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReplyGetChannelDifferenceTooLong) GetFinal() bool {
	if x != nil {
		return x.Final
	}
	return false
}

func (x *ReplyGetChannelDifferenceTooLong) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReplyGetChannelDifferenceTooLong) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ReplyGetChannelDifferenceTooLong) GetTopMessage() int32 {
	if x != nil {
		return x.TopMessage
	}
	return 0
}

func (x *ReplyGetChannelDifferenceTooLong) GetReadInboxMaxId() int32 {
	if x != nil {
		return x.ReadInboxMaxId
	}
	return 0
}

func (x *ReplyGetChannelDifferenceTooLong) GetReadOutboxMaxId() int32 {
	if x != nil {
		return x.ReadOutboxMaxId
	}
	return 0
}

func (x *ReplyGetChannelDifferenceTooLong) GetUnreadCount() int32 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

func (x *ReplyGetChannelDifferenceTooLong) GetMsgs() [][]byte {
	if x != nil {
		return x.Msgs
	}
	return nil
}

func (x *ReplyGetChannelDifferenceTooLong) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// ######超级群get history##########
type ReqGetChannelMsgHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	OffsetId   int32         `protobuf:"varint,2,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`
	OffsetDate int32         `protobuf:"varint,3,opt,name=OffsetDate,proto3" json:"OffsetDate,omitempty"`
	AddOffset  int32         `protobuf:"varint,4,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`
	MinId      int32         `protobuf:"varint,5,opt,name=MinId,proto3" json:"MinId,omitempty"`
	MaxId      int32         `protobuf:"varint,6,opt,name=MaxId,proto3" json:"MaxId,omitempty"`
	Limit      int32         `protobuf:"varint,7,opt,name=Limit,proto3" json:"Limit,omitempty"`
	FromId     int32         `protobuf:"varint,8,opt,name=fromId,proto3" json:"fromId,omitempty"`
	KeyId      uint64        `protobuf:"varint,9,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChannelMsgHistory) Reset() {
	*x = ReqGetChannelMsgHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMsgHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMsgHistory) ProtoMessage() {}

func (x *ReqGetChannelMsgHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMsgHistory.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMsgHistory) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{64}
}

func (x *ReqGetChannelMsgHistory) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取participants
type ReqGetParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffSet    int32         `protobuf:"varint,1,opt,name=offSet,proto3" json:"offSet,omitempty"`
	Limit     int32         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	PartiType int32         `protobuf:"varint,3,opt,name=partiType,proto3" json:"partiType,omitempty"`
	ChannelId int32         `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId    int32         `protobuf:"varint,5,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Q         string        `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	Hash      int32         `protobuf:"varint,7,opt,name=Hash,proto3" json:"Hash,omitempty"` // 校验唯一的， 如果不为0 则要进行唯一判断
	Debug     *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetParticipants) Reset() {
	*x = ReqGetParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetParticipants) ProtoMessage() {}

func (x *ReqGetParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetParticipants.ProtoReflect.Descriptor instead.
func (*ReqGetParticipants) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{65}
}

func (x *ReqGetParticipants) GetOffSet() int32 {
	if x != nil {
		return x.OffSet
	}
	return 0
}

func (x *ReqGetParticipants) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetParticipants) GetPartiType() int32 {
	if x != nil {
		return x.PartiType
	}
	return 0
}

func (x *ReqGetParticipants) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetParticipants) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetParticipants) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ReqGetParticipants) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *ReqGetParticipants) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取participant
type ReqGetParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channelid  int32         `protobuf:"varint,1,opt,name=channelid,proto3" json:"channelid,omitempty"`
	FromId     int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetParticipant) Reset() {
	*x = ReqGetParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetParticipant) ProtoMessage() {}

func (x *ReqGetParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetParticipant.ProtoReflect.Descriptor instead.
func (*ReqGetParticipant) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{66}
}

func (x *ReqGetParticipant) GetChannelid() int32 {
	if x != nil {
		return x.Channelid
	}
	return 0
}

func (x *ReqGetParticipant) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetParticipant) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetParticipant) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqGetParticipant) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// #####超级群get messages by messages id#####
type ReqGetChannelMessagesByMsgsId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	MsgsId    []int32       `protobuf:"varint,2,rep,packed,name=msgsId,proto3" json:"msgsId,omitempty"`
	FromId    int32         `protobuf:"varint,3,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChannelMessagesByMsgsId) Reset() {
	*x = ReqGetChannelMessagesByMsgsId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMessagesByMsgsId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMessagesByMsgsId) ProtoMessage() {}

func (x *ReqGetChannelMessagesByMsgsId) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMessagesByMsgsId.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMessagesByMsgsId) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{67}
}

func (x *ReqGetChannelMessagesByMsgsId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelMessagesByMsgsId) GetMsgsId() []int32 {
	if x != nil {
		return x.MsgsId
	}
	return nil
}

func (x *ReqGetChannelMessagesByMsgsId) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetChannelMessagesByMsgsId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetChannelCommonDialogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId   int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChannIds []int32       `protobuf:"varint,2,rep,packed,name=channIds,proto3" json:"channIds,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChannelCommonDialogs) Reset() {
	*x = ReqGetChannelCommonDialogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelCommonDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelCommonDialogs) ProtoMessage() {}

func (x *ReqGetChannelCommonDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelCommonDialogs.ProtoReflect.Descriptor instead.
func (*ReqGetChannelCommonDialogs) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{68}
}

func (x *ReqGetChannelCommonDialogs) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetChannelCommonDialogs) GetChannIds() []int32 {
	if x != nil {
		return x.ChannIds
	}
	return nil
}

func (x *ReqGetChannelCommonDialogs) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ChannelDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId   int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`     // 超级群唯一ID
	TopMessage  int32 `protobuf:"varint,2,opt,name=TopMessage,proto3" json:"TopMessage,omitempty"`   //
	MaxReadInId int32 `protobuf:"varint,3,opt,name=MaxReadInId,proto3" json:"MaxReadInId,omitempty"` // 已读最大ID
	Encry       int32 `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`             // 是否加密
}

func (x *ChannelDialog) Reset() {
	*x = ChannelDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDialog) ProtoMessage() {}

func (x *ChannelDialog) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDialog.ProtoReflect.Descriptor instead.
func (*ChannelDialog) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{69}
}

func (x *ChannelDialog) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelDialog) GetTopMessage() int32 {
	if x != nil {
		return x.TopMessage
	}
	return 0
}

func (x *ChannelDialog) GetMaxReadInId() int32 {
	if x != nil {
		return x.MaxReadInId
	}
	return 0
}

func (x *ChannelDialog) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

type ChannelDialogAndMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelDialog *ChannelDialog `protobuf:"bytes,1,opt,name=ChannelDialog,proto3" json:"ChannelDialog,omitempty"`
	ChannelMsg    *UserMsg       `protobuf:"bytes,2,opt,name=ChannelMsg,proto3" json:"ChannelMsg,omitempty"`
}

func (x *ChannelDialogAndMsg) Reset() {
	*x = ChannelDialogAndMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelDialogAndMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDialogAndMsg) ProtoMessage() {}

func (x *ChannelDialogAndMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDialogAndMsg.ProtoReflect.Descriptor instead.
func (*ChannelDialogAndMsg) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{70}
}

func (x *ChannelDialogAndMsg) GetChannelDialog() *ChannelDialog {
	if x != nil {
		return x.ChannelDialog
	}
	return nil
}

func (x *ChannelDialogAndMsg) GetChannelMsg() *UserMsg {
	if x != nil {
		return x.ChannelMsg
	}
	return nil
}

type ChannelDialogAndMsgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelDialogAndMsg []*ChannelDialogAndMsg `protobuf:"bytes,1,rep,name=channelDialogAndMsg,proto3" json:"channelDialogAndMsg,omitempty"`
}

func (x *ChannelDialogAndMsgs) Reset() {
	*x = ChannelDialogAndMsgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelDialogAndMsgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDialogAndMsgs) ProtoMessage() {}

func (x *ChannelDialogAndMsgs) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDialogAndMsgs.ProtoReflect.Descriptor instead.
func (*ChannelDialogAndMsgs) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{71}
}

func (x *ChannelDialogAndMsgs) GetChannelDialogAndMsg() []*ChannelDialogAndMsg {
	if x != nil {
		return x.ChannelDialogAndMsg
	}
	return nil
}

type UserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserId       int32    `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId       int32    `protobuf:"varint,3,opt,name=WithId,proto3" json:"WithId,omitempty"`              // 消息交互方
	WithIdType   int32    `protobuf:"varint,4,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`      // 1.user 2:chat 3:channel
	MessageType  int32    `protobuf:"varint,5,opt,name=MessageType,proto3" json:"MessageType,omitempty"`    // 消息类型
	Flags        int32    `protobuf:"varint,6,opt,name=Flags,proto3" json:"Flags,omitempty"`                // 消息标识
	Out          bool     `protobuf:"varint,7,opt,name=Out,proto3" json:"Out,omitempty"`                    // 是否为自己发送
	Mentioned    bool     `protobuf:"varint,8,opt,name=Mentioned,proto3" json:"Mentioned,omitempty"`        // 是否提及他人
	MediaUnread  bool     `protobuf:"varint,9,opt,name=MediaUnread,proto3" json:"MediaUnread,omitempty"`    // 媒体是否已读
	Silent       bool     `protobuf:"varint,10,opt,name=Silent,proto3" json:"Silent,omitempty"`             // 是否静音
	Post         bool     `protobuf:"varint,11,opt,name=Post,proto3" json:"Post,omitempty"`                 // 是否邮递
	MsgId        int32    `protobuf:"varint,12,opt,name=MsgId,proto3" json:"MsgId,omitempty"`               // 消息id
	ToId         int32    `protobuf:"varint,13,opt,name=ToId,proto3" json:"ToId,omitempty"`                 // 接收方id
	Pts          int32    `protobuf:"varint,14,opt,name=Pts,proto3" json:"Pts,omitempty"`                   // 消息的pts
	FwdFrom      []byte   `protobuf:"bytes,15,opt,name=FwdFrom,proto3" json:"FwdFrom,omitempty"`            // 引用
	ViaBotId     int32    `protobuf:"varint,16,opt,name=ViaBotId,proto3" json:"ViaBotId,omitempty"`         // 机器人id
	ReplyToMsgId int32    `protobuf:"varint,17,opt,name=ReplyToMsgId,proto3" json:"ReplyToMsgId,omitempty"` // 回复id
	Date         int32    `protobuf:"varint,18,opt,name=Date,proto3" json:"Date,omitempty"`                 // 时间
	Message      string   `protobuf:"bytes,19,opt,name=Message,proto3" json:"Message,omitempty"`            // 消息内容
	Media        int64    `protobuf:"varint,20,opt,name=Media,proto3" json:"Media,omitempty"`               // 媒体id
	MediaData    []byte   `protobuf:"bytes,21,opt,name=MediaData,proto3" json:"MediaData,omitempty"`        // 媒体二进制
	ReplyMarkup  []byte   `protobuf:"bytes,22,opt,name=ReplyMarkup,proto3" json:"ReplyMarkup,omitempty"`    // 小键盘
	Entities     [][]byte `protobuf:"bytes,23,rep,name=Entities,proto3" json:"Entities,omitempty"`          // 高亮
	FromId       int32    `protobuf:"varint,24,opt,name=FromId,proto3" json:"FromId,omitempty"`             // 发送方
	Views        int32    `protobuf:"varint,25,opt,name=Views,proto3" json:"Views,omitempty"`               // 查看人数
	EditDate     int32    `protobuf:"varint,26,opt,name=EditDate,proto3" json:"EditDate,omitempty"`         // 编辑时间
	Action       []byte   `protobuf:"bytes,27,opt,name=Action,proto3" json:"Action,omitempty"`              // 行为
	RandomId     int64    `protobuf:"varint,28,opt,name=RandomId,proto3" json:"RandomId,omitempty"`         // 随机id
	Uuid         int64    `protobuf:"varint,29,opt,name=Uuid,proto3" json:"Uuid,omitempty"`                 // 消息全局唯一id
	InsertDate   int32    `protobuf:"varint,30,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
	UpdateDate   int32    `protobuf:"varint,31,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`
	Encry        int32    `protobuf:"varint,32,opt,name=Encry,proto3" json:"Encry,omitempty"` // 0: 不加密 1：加密
}

func (x *UserMsg) Reset() {
	*x = UserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMsg) ProtoMessage() {}

func (x *UserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMsg.ProtoReflect.Descriptor instead.
func (*UserMsg) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{72}
}

func (x *UserMsg) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserMsg) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *UserMsg) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *UserMsg) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *UserMsg) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *UserMsg) GetOut() bool {
	if x != nil {
		return x.Out
	}
	return false
}

func (x *UserMsg) GetMentioned() bool {
	if x != nil {
		return x.Mentioned
	}
	return false
}

func (x *UserMsg) GetMediaUnread() bool {
	if x != nil {
		return x.MediaUnread
	}
	return false
}

func (x *UserMsg) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *UserMsg) GetPost() bool {
	if x != nil {
		return x.Post
	}
	return false
}

func (x *UserMsg) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *UserMsg) GetToId() int32 {
	if x != nil {
		return x.ToId
	}
	return 0
}

func (x *UserMsg) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *UserMsg) GetFwdFrom() []byte {
	if x != nil {
		return x.FwdFrom
	}
	return nil
}

func (x *UserMsg) GetViaBotId() int32 {
	if x != nil {
		return x.ViaBotId
	}
	return 0
}

func (x *UserMsg) GetReplyToMsgId() int32 {
	if x != nil {
		return x.ReplyToMsgId
	}
	return 0
}

func (x *UserMsg) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *UserMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserMsg) GetMedia() int64 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *UserMsg) GetMediaData() []byte {
	if x != nil {
		return x.MediaData
	}
	return nil
}

func (x *UserMsg) GetReplyMarkup() []byte {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *UserMsg) GetEntities() [][]byte {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *UserMsg) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *UserMsg) GetViews() int32 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *UserMsg) GetEditDate() int32 {
	if x != nil {
		return x.EditDate
	}
	return 0
}

func (x *UserMsg) GetAction() []byte {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *UserMsg) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *UserMsg) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *UserMsg) GetInsertDate() int32 {
	if x != nil {
		return x.InsertDate
	}
	return 0
}

func (x *UserMsg) GetUpdateDate() int32 {
	if x != nil {
		return x.UpdateDate
	}
	return 0
}

func (x *UserMsg) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

// #############Admin Logs#############
type ReqGetChannelAdminLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId   int32                       `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId      int32                       `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId   int64                       `protobuf:"varint,3,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	AccessHash  int64                       `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Q           string                      `protobuf:"bytes,5,opt,name=q,proto3" json:"q,omitempty"`
	EventFilter *ChannelAdminLogEventFilter `protobuf:"bytes,6,opt,name=eventFilter,proto3" json:"eventFilter,omitempty"`
	Admins      []int32                     `protobuf:"varint,7,rep,packed,name=admins,proto3" json:"admins,omitempty"`
	MaxId       int32                       `protobuf:"varint,8,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId       int32                       `protobuf:"varint,9,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	Limit       int32                       `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
	Debug       *pbcomm.Debug               `protobuf:"bytes,11,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChannelAdminLog) Reset() {
	*x = ReqGetChannelAdminLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelAdminLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelAdminLog) ProtoMessage() {}

func (x *ReqGetChannelAdminLog) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelAdminLog.ProtoReflect.Descriptor instead.
func (*ReqGetChannelAdminLog) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{73}
}

func (x *ReqGetChannelAdminLog) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelAdminLog) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetChannelAdminLog) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqGetChannelAdminLog) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqGetChannelAdminLog) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ReqGetChannelAdminLog) GetEventFilter() *ChannelAdminLogEventFilter {
	if x != nil {
		return x.EventFilter
	}
	return nil
}

func (x *ReqGetChannelAdminLog) GetAdmins() []int32 {
	if x != nil {
		return x.Admins
	}
	return nil
}

func (x *ReqGetChannelAdminLog) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *ReqGetChannelAdminLog) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *ReqGetChannelAdminLog) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetChannelAdminLog) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ChannelAdminLogEventFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags   int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Join    bool  `protobuf:"varint,2,opt,name=join,proto3" json:"join,omitempty"`
	Leave   bool  `protobuf:"varint,3,opt,name=leave,proto3" json:"leave,omitempty"`
	Invite  bool  `protobuf:"varint,4,opt,name=invite,proto3" json:"invite,omitempty"`
	Ban     bool  `protobuf:"varint,5,opt,name=ban,proto3" json:"ban,omitempty"`
	Unban   bool  `protobuf:"varint,6,opt,name=unban,proto3" json:"unban,omitempty"`
	Kick    bool  `protobuf:"varint,7,opt,name=kick,proto3" json:"kick,omitempty"`
	Unkick  bool  `protobuf:"varint,8,opt,name=unkick,proto3" json:"unkick,omitempty"`
	Promote bool  `protobuf:"varint,9,opt,name=promote,proto3" json:"promote,omitempty"`
	Demote  bool  `protobuf:"varint,10,opt,name=demote,proto3" json:"demote,omitempty"`
	Info    bool  `protobuf:"varint,11,opt,name=info,proto3" json:"info,omitempty"`
	Setting bool  `protobuf:"varint,12,opt,name=setting,proto3" json:"setting,omitempty"`
	Pinned  bool  `protobuf:"varint,13,opt,name=pinned,proto3" json:"pinned,omitempty"`
	Edit    bool  `protobuf:"varint,14,opt,name=edit,proto3" json:"edit,omitempty"`
	Delete  bool  `protobuf:"varint,15,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *ChannelAdminLogEventFilter) Reset() {
	*x = ChannelAdminLogEventFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelAdminLogEventFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelAdminLogEventFilter) ProtoMessage() {}

func (x *ChannelAdminLogEventFilter) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelAdminLogEventFilter.ProtoReflect.Descriptor instead.
func (*ChannelAdminLogEventFilter) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{74}
}

func (x *ChannelAdminLogEventFilter) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ChannelAdminLogEventFilter) GetJoin() bool {
	if x != nil {
		return x.Join
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetLeave() bool {
	if x != nil {
		return x.Leave
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetInvite() bool {
	if x != nil {
		return x.Invite
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetBan() bool {
	if x != nil {
		return x.Ban
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetUnban() bool {
	if x != nil {
		return x.Unban
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetKick() bool {
	if x != nil {
		return x.Kick
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetUnkick() bool {
	if x != nil {
		return x.Unkick
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetPromote() bool {
	if x != nil {
		return x.Promote
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetDemote() bool {
	if x != nil {
		return x.Demote
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetSetting() bool {
	if x != nil {
		return x.Setting
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetEdit() bool {
	if x != nil {
		return x.Edit
	}
	return false
}

func (x *ChannelAdminLogEventFilter) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// ################Import Chat Invite##################
type ReqImportChatInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId    int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Hash      string        `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqImportChatInvite) Reset() {
	*x = ReqImportChatInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqImportChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqImportChatInvite) ProtoMessage() {}

func (x *ReqImportChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqImportChatInvite.ProtoReflect.Descriptor instead.
func (*ReqImportChatInvite) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{75}
}

func (x *ReqImportChatInvite) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqImportChatInvite) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqImportChatInvite) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ReqImportChatInvite) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqEditBanChannelUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId              int32                `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId           int64                `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId           int32                `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	BannedUserId        int32                `protobuf:"varint,4,opt,name=bannedUserId,proto3" json:"bannedUserId,omitempty"`
	AccessHash          int64                `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	UtilDate            int32                `protobuf:"varint,6,opt,name=util_date,json=utilDate,proto3" json:"util_date,omitempty"`
	ChannelBannedRights *ChannelBannedRights `protobuf:"bytes,7,opt,name=channelBannedRights,proto3" json:"channelBannedRights,omitempty"`
	Debug               *pbcomm.Debug        `protobuf:"bytes,8,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqEditBanChannelUser) Reset() {
	*x = ReqEditBanChannelUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditBanChannelUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditBanChannelUser) ProtoMessage() {}

func (x *ReqEditBanChannelUser) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditBanChannelUser.ProtoReflect.Descriptor instead.
func (*ReqEditBanChannelUser) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{76}
}

func (x *ReqEditBanChannelUser) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqEditBanChannelUser) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqEditBanChannelUser) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqEditBanChannelUser) GetBannedUserId() int32 {
	if x != nil {
		return x.BannedUserId
	}
	return 0
}

func (x *ReqEditBanChannelUser) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqEditBanChannelUser) GetUtilDate() int32 {
	if x != nil {
		return x.UtilDate
	}
	return 0
}

func (x *ReqEditBanChannelUser) GetChannelBannedRights() *ChannelBannedRights {
	if x != nil {
		return x.ChannelBannedRights
	}
	return nil
}

func (x *ReqEditBanChannelUser) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 获取fullchannel
type ReqGetFullChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId        int32                         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChannelId     int32                         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash    int64                         `protobuf:"varint,3,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug         *pbcomm.Debug                 `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
	ChannelDialog *pbmessagedb.UserDialogAndMsg `protobuf:"bytes,5,opt,name=ChannelDialog,proto3" json:"ChannelDialog,omitempty"`
	MsgMeta       *ChatMsgMeta                  `protobuf:"bytes,6,opt,name=msgMeta,proto3" json:"msgMeta,omitempty"`
}

func (x *ReqGetFullChannel) Reset() {
	*x = ReqGetFullChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetFullChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetFullChannel) ProtoMessage() {}

func (x *ReqGetFullChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetFullChannel.ProtoReflect.Descriptor instead.
func (*ReqGetFullChannel) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{77}
}

func (x *ReqGetFullChannel) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetFullChannel) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetFullChannel) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqGetFullChannel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ReqGetFullChannel) GetChannelDialog() *pbmessagedb.UserDialogAndMsg {
	if x != nil {
		return x.ChannelDialog
	}
	return nil
}

func (x *ReqGetFullChannel) GetMsgMeta() *ChatMsgMeta {
	if x != nil {
		return x.MsgMeta
	}
	return nil
}

// 获取fullchannelV2
type ReqGetFullChannelV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId        int32                         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChannelId     int32                         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash    int64                         `protobuf:"varint,3,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug         *pbcomm.Debug                 `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
	ChannelDialog *pbmessagedb.UserDialogAndMsg `protobuf:"bytes,5,opt,name=ChannelDialog,proto3" json:"ChannelDialog,omitempty"`
	MsgMeta       *ChatMsgMeta                  `protobuf:"bytes,6,opt,name=msgMeta,proto3" json:"msgMeta,omitempty"`
}

func (x *ReqGetFullChannelV2) Reset() {
	*x = ReqGetFullChannelV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetFullChannelV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetFullChannelV2) ProtoMessage() {}

func (x *ReqGetFullChannelV2) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetFullChannelV2.ProtoReflect.Descriptor instead.
func (*ReqGetFullChannelV2) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{78}
}

func (x *ReqGetFullChannelV2) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetFullChannelV2) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetFullChannelV2) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqGetFullChannelV2) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *ReqGetFullChannelV2) GetChannelDialog() *pbmessagedb.UserDialogAndMsg {
	if x != nil {
		return x.ChannelDialog
	}
	return nil
}

func (x *ReqGetFullChannelV2) GetMsgMeta() *ChatMsgMeta {
	if x != nil {
		return x.MsgMeta
	}
	return nil
}

// 升级超级群之前的普通群消息元数据
type ChatMsgMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopMsg int32 `protobuf:"varint,1,opt,name=topMsg,proto3" json:"topMsg,omitempty"`
	TopPts int32 `protobuf:"varint,2,opt,name=topPts,proto3" json:"topPts,omitempty"`
	ToDate int32 `protobuf:"varint,3,opt,name=toDate,proto3" json:"toDate,omitempty"`
}

func (x *ChatMsgMeta) Reset() {
	*x = ChatMsgMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMsgMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMsgMeta) ProtoMessage() {}

func (x *ChatMsgMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMsgMeta.ProtoReflect.Descriptor instead.
func (*ChatMsgMeta) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{79}
}

func (x *ChatMsgMeta) GetTopMsg() int32 {
	if x != nil {
		return x.TopMsg
	}
	return 0
}

func (x *ChatMsgMeta) GetTopPts() int32 {
	if x != nil {
		return x.TopPts
	}
	return 0
}

func (x *ChatMsgMeta) GetToDate() int32 {
	if x != nil {
		return x.ToDate
	}
	return 0
}

// 创建超级群的邀请链接
type ReqExportChannelLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqExportChannelLink) Reset() {
	*x = ReqExportChannelLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqExportChannelLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqExportChannelLink) ProtoMessage() {}

func (x *ReqExportChannelLink) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqExportChannelLink.ProtoReflect.Descriptor instead.
func (*ReqExportChannelLink) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{80}
}

func (x *ReqExportChannelLink) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqExportChannelLink) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqExportChannelLink) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ChannelBannedRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags        int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	ViewMessages bool  `protobuf:"varint,2,opt,name=view_messages,json=viewMessages,proto3" json:"view_messages,omitempty"`
	SendMessages bool  `protobuf:"varint,3,opt,name=send_messages,json=sendMessages,proto3" json:"send_messages,omitempty"`
	SendMedia    bool  `protobuf:"varint,4,opt,name=send_media,json=sendMedia,proto3" json:"send_media,omitempty"`
	SendStickers bool  `protobuf:"varint,5,opt,name=send_stickers,json=sendStickers,proto3" json:"send_stickers,omitempty"`
	SendGifs     bool  `protobuf:"varint,6,opt,name=send_gifs,json=sendGifs,proto3" json:"send_gifs,omitempty"`
	SendGames    bool  `protobuf:"varint,7,opt,name=send_games,json=sendGames,proto3" json:"send_games,omitempty"`
	SendInline   bool  `protobuf:"varint,8,opt,name=send_inline,json=sendInline,proto3" json:"send_inline,omitempty"`
	EmbedLinks   bool  `protobuf:"varint,9,opt,name=embed_links,json=embedLinks,proto3" json:"embed_links,omitempty"`
	UntilDate    int32 `protobuf:"varint,10,opt,name=until_date,json=untilDate,proto3" json:"until_date,omitempty"`
	// @ add by Qingsong at 2019-11-14 for ban member rights.
	InviteUser      bool `protobuf:"varint,11,opt,name=invite_user,json=inviteUser,proto3" json:"invite_user,omitempty"`                  // 邀請用戶
	PinMessage      bool `protobuf:"varint,12,opt,name=pin_message,json=pinMessage,proto3" json:"pin_message,omitempty"`                  // 置頂消息
	ChangeGroupInfo bool `protobuf:"varint,13,opt,name=change_group_info,json=changeGroupInfo,proto3" json:"change_group_info,omitempty"` // 修群组信息
	SendPolls       bool `protobuf:"varint,14,opt,name=send_polls,json=sendPolls,proto3" json:"send_polls,omitempty"`                     // 发起投票权限
}

func (x *ChannelBannedRights) Reset() {
	*x = ChannelBannedRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelBannedRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelBannedRights) ProtoMessage() {}

func (x *ChannelBannedRights) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelBannedRights.ProtoReflect.Descriptor instead.
func (*ChannelBannedRights) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{81}
}

func (x *ChannelBannedRights) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ChannelBannedRights) GetViewMessages() bool {
	if x != nil {
		return x.ViewMessages
	}
	return false
}

func (x *ChannelBannedRights) GetSendMessages() bool {
	if x != nil {
		return x.SendMessages
	}
	return false
}

func (x *ChannelBannedRights) GetSendMedia() bool {
	if x != nil {
		return x.SendMedia
	}
	return false
}

func (x *ChannelBannedRights) GetSendStickers() bool {
	if x != nil {
		return x.SendStickers
	}
	return false
}

func (x *ChannelBannedRights) GetSendGifs() bool {
	if x != nil {
		return x.SendGifs
	}
	return false
}

func (x *ChannelBannedRights) GetSendGames() bool {
	if x != nil {
		return x.SendGames
	}
	return false
}

func (x *ChannelBannedRights) GetSendInline() bool {
	if x != nil {
		return x.SendInline
	}
	return false
}

func (x *ChannelBannedRights) GetEmbedLinks() bool {
	if x != nil {
		return x.EmbedLinks
	}
	return false
}

func (x *ChannelBannedRights) GetUntilDate() int32 {
	if x != nil {
		return x.UntilDate
	}
	return 0
}

func (x *ChannelBannedRights) GetInviteUser() bool {
	if x != nil {
		return x.InviteUser
	}
	return false
}

func (x *ChannelBannedRights) GetPinMessage() bool {
	if x != nil {
		return x.PinMessage
	}
	return false
}

func (x *ChannelBannedRights) GetChangeGroupInfo() bool {
	if x != nil {
		return x.ChangeGroupInfo
	}
	return false
}

func (x *ChannelBannedRights) GetSendPolls() bool {
	if x != nil {
		return x.SendPolls
	}
	return false
}

// 是否允许普通成员邀请人
type ReqChannelToggleInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Enabled    bool          `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqChannelToggleInvite) Reset() {
	*x = ReqChannelToggleInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqChannelToggleInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqChannelToggleInvite) ProtoMessage() {}

func (x *ReqChannelToggleInvite) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqChannelToggleInvite.ProtoReflect.Descriptor instead.
func (*ReqChannelToggleInvite) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{82}
}

func (x *ReqChannelToggleInvite) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqChannelToggleInvite) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqChannelToggleInvite) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ReqChannelToggleInvite) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqChannelToggleInvite) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 请求给定channel
type ReqGetChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelIds []int32       `protobuf:"varint,1,rep,packed,name=channelIds,proto3" json:"channelIds,omitempty"`
	FromId     int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChannels) Reset() {
	*x = ReqGetChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannels) ProtoMessage() {}

func (x *ReqGetChannels) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannels.ProtoReflect.Descriptor instead.
func (*ReqGetChannels) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{83}
}

func (x *ReqGetChannels) GetChannelIds() []int32 {
	if x != nil {
		return x.ChannelIds
	}
	return nil
}

func (x *ReqGetChannels) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqGetChannels) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 修改channel user name
type ReqUpdateChannelUserName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	FromId     int32         `protobuf:"varint,3,opt,name=fromId,proto3" json:"fromId,omitempty"`
	UserName   string        `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqUpdateChannelUserName) Reset() {
	*x = ReqUpdateChannelUserName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateChannelUserName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateChannelUserName) ProtoMessage() {}

func (x *ReqUpdateChannelUserName) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateChannelUserName.ProtoReflect.Descriptor instead.
func (*ReqUpdateChannelUserName) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{84}
}

func (x *ReqUpdateChannelUserName) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqUpdateChannelUserName) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqUpdateChannelUserName) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqUpdateChannelUserName) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ReqUpdateChannelUserName) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 修改channel user name
type ReqCheckChannelUserName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	FromId     int32         `protobuf:"varint,3,opt,name=fromId,proto3" json:"fromId,omitempty"`
	UserName   string        `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqCheckChannelUserName) Reset() {
	*x = ReqCheckChannelUserName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCheckChannelUserName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCheckChannelUserName) ProtoMessage() {}

func (x *ReqCheckChannelUserName) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCheckChannelUserName.ProtoReflect.Descriptor instead.
func (*ReqCheckChannelUserName) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{85}
}

func (x *ReqCheckChannelUserName) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqCheckChannelUserName) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ReqCheckChannelUserName) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqCheckChannelUserName) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ReqCheckChannelUserName) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 转移群主
type ReqChangeGroupAndChannelCrator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    int32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	FromId     int32 `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	OperatorId int32 `protobuf:"varint,3,opt,name=OperatorId,proto3" json:"OperatorId,omitempty"`
	IsChat     bool  `protobuf:"varint,4,opt,name=IsChat,proto3" json:"IsChat,omitempty"`
}

func (x *ReqChangeGroupAndChannelCrator) Reset() {
	*x = ReqChangeGroupAndChannelCrator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqChangeGroupAndChannelCrator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqChangeGroupAndChannelCrator) ProtoMessage() {}

func (x *ReqChangeGroupAndChannelCrator) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqChangeGroupAndChannelCrator.ProtoReflect.Descriptor instead.
func (*ReqChangeGroupAndChannelCrator) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{86}
}

func (x *ReqChangeGroupAndChannelCrator) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ReqChangeGroupAndChannelCrator) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqChangeGroupAndChannelCrator) GetOperatorId() int32 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *ReqChangeGroupAndChannelCrator) GetIsChat() bool {
	if x != nil {
		return x.IsChat
	}
	return false
}

// 超级群发送数字钱包红包
type ReqSendRpm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromKeyId int64         `protobuf:"varint,1,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Req       []byte        `protobuf:"bytes,3,opt,name=req,proto3" json:"req,omitempty"`
	RpmResp   []byte        `protobuf:"bytes,4,opt,name=rpmResp,proto3" json:"rpmResp,omitempty"`
	Dbg       *pbcomm.Debug `protobuf:"bytes,5,opt,name=dbg,proto3" json:"dbg,omitempty"`
}

func (x *ReqSendRpm) Reset() {
	*x = ReqSendRpm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendRpm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendRpm) ProtoMessage() {}

func (x *ReqSendRpm) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendRpm.ProtoReflect.Descriptor instead.
func (*ReqSendRpm) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{87}
}

func (x *ReqSendRpm) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqSendRpm) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqSendRpm) GetReq() []byte {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *ReqSendRpm) GetRpmResp() []byte {
	if x != nil {
		return x.RpmResp
	}
	return nil
}

func (x *ReqSendRpm) GetDbg() *pbcomm.Debug {
	if x != nil {
		return x.Dbg
	}
	return nil
}

// 超级群发送数字钱包红包返回结果
type ReplySendRpm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  []byte       `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	Meta    *ChatMsgMeta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	ErrCode int32        `protobuf:"varint,3,opt,name=errCode,proto3" json:"errCode,omitempty"`
	Error   string       `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReplySendRpm) Reset() {
	*x = ReplySendRpm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplySendRpm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplySendRpm) ProtoMessage() {}

func (x *ReplySendRpm) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplySendRpm.ProtoReflect.Descriptor instead.
func (*ReplySendRpm) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{88}
}

func (x *ReplySendRpm) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplySendRpm) GetMeta() *ChatMsgMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ReplySendRpm) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *ReplySendRpm) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ReqEditRpm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromKeyId     int64         `protobuf:"varint,1,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	FromId        int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChanId        int32         `protobuf:"varint,3,opt,name=chanId,proto3" json:"chanId,omitempty"`
	MsgId         int32         `protobuf:"varint,4,opt,name=msgId,proto3" json:"msgId,omitempty"`
	ChanAccHash   int64         `protobuf:"varint,5,opt,name=chanAccHash,proto3" json:"chanAccHash,omitempty"`
	RpmResultCode int32         `protobuf:"varint,6,opt,name=rpmResultCode,proto3" json:"rpmResultCode,omitempty"`
	Dbg           *pbcomm.Debug `protobuf:"bytes,7,opt,name=dbg,proto3" json:"dbg,omitempty"`
}

func (x *ReqEditRpm) Reset() {
	*x = ReqEditRpm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditRpm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditRpm) ProtoMessage() {}

func (x *ReqEditRpm) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditRpm.ProtoReflect.Descriptor instead.
func (*ReqEditRpm) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{89}
}

func (x *ReqEditRpm) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqEditRpm) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqEditRpm) GetChanId() int32 {
	if x != nil {
		return x.ChanId
	}
	return 0
}

func (x *ReqEditRpm) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqEditRpm) GetChanAccHash() int64 {
	if x != nil {
		return x.ChanAccHash
	}
	return 0
}

func (x *ReqEditRpm) GetRpmResultCode() int32 {
	if x != nil {
		return x.RpmResultCode
	}
	return 0
}

func (x *ReqEditRpm) GetDbg() *pbcomm.Debug {
	if x != nil {
		return x.Dbg
	}
	return nil
}

type ReqEditRpmV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromKeyId   int64         `protobuf:"varint,1,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	FromId      int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChanId      int32         `protobuf:"varint,3,opt,name=chanId,proto3" json:"chanId,omitempty"`
	MsgId       int32         `protobuf:"varint,4,opt,name=msgId,proto3" json:"msgId,omitempty"`
	ChanAccHash int64         `protobuf:"varint,5,opt,name=chanAccHash,proto3" json:"chanAccHash,omitempty"`
	RpmResult   []byte        `protobuf:"bytes,6,opt,name=rpmResult,proto3" json:"rpmResult,omitempty"`
	Dbg         *pbcomm.Debug `protobuf:"bytes,7,opt,name=dbg,proto3" json:"dbg,omitempty"`
}

func (x *ReqEditRpmV2) Reset() {
	*x = ReqEditRpmV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditRpmV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditRpmV2) ProtoMessage() {}

func (x *ReqEditRpmV2) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditRpmV2.ProtoReflect.Descriptor instead.
func (*ReqEditRpmV2) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{90}
}

func (x *ReqEditRpmV2) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqEditRpmV2) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqEditRpmV2) GetChanId() int32 {
	if x != nil {
		return x.ChanId
	}
	return 0
}

func (x *ReqEditRpmV2) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqEditRpmV2) GetChanAccHash() int64 {
	if x != nil {
		return x.ChanAccHash
	}
	return 0
}

func (x *ReqEditRpmV2) GetRpmResult() []byte {
	if x != nil {
		return x.RpmResult
	}
	return nil
}

func (x *ReqEditRpmV2) GetDbg() *pbcomm.Debug {
	if x != nil {
		return x.Dbg
	}
	return nil
}

type ReqEditPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromKeyId   int64         `protobuf:"varint,1,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	FromId      int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChanId      int32         `protobuf:"varint,3,opt,name=chanId,proto3" json:"chanId,omitempty"`
	MsgId       int32         `protobuf:"varint,4,opt,name=msgId,proto3" json:"msgId,omitempty"`
	Flags       int32         `protobuf:"varint,5,opt,name=flags,proto3" json:"flags,omitempty"`
	ChanAccHash int64         `protobuf:"varint,6,opt,name=chanAccHash,proto3" json:"chanAccHash,omitempty"`
	RpmResult   []byte        `protobuf:"bytes,7,opt,name=rpmResult,proto3" json:"rpmResult,omitempty"`
	Options     []byte        `protobuf:"bytes,8,opt,name=options,proto3" json:"options,omitempty"`
	Dbg         *pbcomm.Debug `protobuf:"bytes,9,opt,name=dbg,proto3" json:"dbg,omitempty"`
}

func (x *ReqEditPayment) Reset() {
	*x = ReqEditPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEditPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEditPayment) ProtoMessage() {}

func (x *ReqEditPayment) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEditPayment.ProtoReflect.Descriptor instead.
func (*ReqEditPayment) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{91}
}

func (x *ReqEditPayment) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqEditPayment) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqEditPayment) GetChanId() int32 {
	if x != nil {
		return x.ChanId
	}
	return 0
}

func (x *ReqEditPayment) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqEditPayment) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReqEditPayment) GetChanAccHash() int64 {
	if x != nil {
		return x.ChanAccHash
	}
	return 0
}

func (x *ReqEditPayment) GetRpmResult() []byte {
	if x != nil {
		return x.RpmResult
	}
	return nil
}

func (x *ReqEditPayment) GetOptions() []byte {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ReqEditPayment) GetDbg() *pbcomm.Debug {
	if x != nil {
		return x.Dbg
	}
	return nil
}

type ReplyEditRpm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  []byte `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ErrCode int32  `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReplyEditRpm) Reset() {
	*x = ReplyEditRpm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyEditRpm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyEditRpm) ProtoMessage() {}

func (x *ReplyEditRpm) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyEditRpm.ProtoReflect.Descriptor instead.
func (*ReplyEditRpm) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{92}
}

func (x *ReplyEditRpm) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyEditRpm) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *ReplyEditRpm) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// 领取超级群红包请求
type ReqRecvRpm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromKeyId int64         `protobuf:"varint,1,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Req       []byte        `protobuf:"bytes,3,opt,name=req,proto3" json:"req,omitempty"`
	MetaData  []byte        `protobuf:"bytes,4,opt,name=metaData,proto3" json:"metaData,omitempty"`
	Dbg       *pbcomm.Debug `protobuf:"bytes,5,opt,name=dbg,proto3" json:"dbg,omitempty"`
}

func (x *ReqRecvRpm) Reset() {
	*x = ReqRecvRpm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqRecvRpm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqRecvRpm) ProtoMessage() {}

func (x *ReqRecvRpm) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqRecvRpm.ProtoReflect.Descriptor instead.
func (*ReqRecvRpm) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{93}
}

func (x *ReqRecvRpm) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqRecvRpm) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqRecvRpm) GetReq() []byte {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *ReqRecvRpm) GetMetaData() []byte {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *ReqRecvRpm) GetDbg() *pbcomm.Debug {
	if x != nil {
		return x.Dbg
	}
	return nil
}

type ReplyRecvRpm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  []byte `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ErrCode int32  `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReplyRecvRpm) Reset() {
	*x = ReplyRecvRpm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyRecvRpm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyRecvRpm) ProtoMessage() {}

func (x *ReplyRecvRpm) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyRecvRpm.ProtoReflect.Descriptor instead.
func (*ReplyRecvRpm) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{94}
}

func (x *ReplyRecvRpm) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyRecvRpm) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *ReplyRecvRpm) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ReqMessageReadMentions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId    int32         `protobuf:"varint,1,opt,name=FromId,proto3" json:"FromId,omitempty"`
	FromKeyId int64         `protobuf:"varint,2,opt,name=FromKeyId,proto3" json:"FromKeyId,omitempty"`
	ChanId    int32         `protobuf:"varint,3,opt,name=ChanId,proto3" json:"ChanId,omitempty"`
	Dbg       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dbg,proto3" json:"Dbg,omitempty"`
}

func (x *ReqMessageReadMentions) Reset() {
	*x = ReqMessageReadMentions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqMessageReadMentions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqMessageReadMentions) ProtoMessage() {}

func (x *ReqMessageReadMentions) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqMessageReadMentions.ProtoReflect.Descriptor instead.
func (*ReqMessageReadMentions) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{95}
}

func (x *ReqMessageReadMentions) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ReqMessageReadMentions) GetFromKeyId() int64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *ReqMessageReadMentions) GetChanId() int32 {
	if x != nil {
		return x.ChanId
	}
	return 0
}

func (x *ReqMessageReadMentions) GetDbg() *pbcomm.Debug {
	if x != nil {
		return x.Dbg
	}
	return nil
}

type ReplyMessageReadMentions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pts      int32  `protobuf:"varint,1,opt,name=Pts,proto3" json:"Pts,omitempty"`
	PtsCount int32  `protobuf:"varint,2,opt,name=PtsCount,proto3" json:"PtsCount,omitempty"`
	OffsetId int32  `protobuf:"varint,3,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`
	ErrCode  int32  `protobuf:"varint,4,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	ErrStr   string `protobuf:"bytes,5,opt,name=ErrStr,proto3" json:"ErrStr,omitempty"`
}

func (x *ReplyMessageReadMentions) Reset() {
	*x = ReplyMessageReadMentions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyMessageReadMentions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyMessageReadMentions) ProtoMessage() {}

func (x *ReplyMessageReadMentions) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyMessageReadMentions.ProtoReflect.Descriptor instead.
func (*ReplyMessageReadMentions) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{96}
}

func (x *ReplyMessageReadMentions) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReplyMessageReadMentions) GetPtsCount() int32 {
	if x != nil {
		return x.PtsCount
	}
	return 0
}

func (x *ReplyMessageReadMentions) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *ReplyMessageReadMentions) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *ReplyMessageReadMentions) GetErrStr() string {
	if x != nil {
		return x.ErrStr
	}
	return ""
}

// 发送投票
type SendVoteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid  int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`            // 发送方id
	Peer    []byte        `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`                 // 发送对象
	MsgId   int32         `protobuf:"varint,3,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"` // 投票id
	Options []string      `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`           // 内容
	FromKey int64         `protobuf:"varint,5,opt,name=fromKey,proto3" json:"fromKey,omitempty"`
	Stop    bool          `protobuf:"varint,6,opt,name=stop,proto3" json:"stop,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *SendVoteReq) Reset() {
	*x = SendVoteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendVoteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendVoteReq) ProtoMessage() {}

func (x *SendVoteReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendVoteReq.ProtoReflect.Descriptor instead.
func (*SendVoteReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{97}
}

func (x *SendVoteReq) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *SendVoteReq) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *SendVoteReq) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *SendVoteReq) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *SendVoteReq) GetFromKey() int64 {
	if x != nil {
		return x.FromKey
	}
	return 0
}

func (x *SendVoteReq) GetStop() bool {
	if x != nil {
		return x.Stop
	}
	return false
}

func (x *SendVoteReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type SendVoteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`  //0: ok 1: err
	Error int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` //1: 存储失败 2:发送失败 3: 其他错误
}

func (x *SendVoteReply) Reset() {
	*x = SendVoteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendVoteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendVoteReply) ProtoMessage() {}

func (x *SendVoteReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendVoteReply.ProtoReflect.Descriptor instead.
func (*SendVoteReply) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{98}
}

func (x *SendVoteReply) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *SendVoteReply) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

// 获取投票结果
type GetPollResultsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromid  int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`            // 发送方id
	Peer    []byte        `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`                 // 发送对象
	MsgId   int32         `protobuf:"varint,3,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"` // 投票id
	FromKey int64         `protobuf:"varint,4,opt,name=fromKey,proto3" json:"fromKey,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *GetPollResultsReq) Reset() {
	*x = GetPollResultsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPollResultsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPollResultsReq) ProtoMessage() {}

func (x *GetPollResultsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPollResultsReq.ProtoReflect.Descriptor instead.
func (*GetPollResultsReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{99}
}

func (x *GetPollResultsReq) GetFromid() int32 {
	if x != nil {
		return x.Fromid
	}
	return 0
}

func (x *GetPollResultsReq) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *GetPollResultsReq) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *GetPollResultsReq) GetFromKey() int64 {
	if x != nil {
		return x.FromKey
	}
	return 0
}

func (x *GetPollResultsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GetPollResultsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`  //0: ok 1: err
	Error int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"` //1: 存储失败 2:发送失败 3: 其他错误
}

func (x *GetPollResultsReply) Reset() {
	*x = GetPollResultsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPollResultsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPollResultsReply) ProtoMessage() {}

func (x *GetPollResultsReply) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPollResultsReply.ProtoReflect.Descriptor instead.
func (*GetPollResultsReply) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{100}
}

func (x *GetPollResultsReply) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *GetPollResultsReply) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type ChatBannedRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags        int32 `protobuf:"varint,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
	ViewMessages bool  `protobuf:"varint,2,opt,name=View_messages,json=ViewMessages,proto3" json:"View_messages,omitempty"`
	SendMessages bool  `protobuf:"varint,3,opt,name=Send_messages,json=SendMessages,proto3" json:"Send_messages,omitempty"`
	SendMedia    bool  `protobuf:"varint,4,opt,name=Send_media,json=SendMedia,proto3" json:"Send_media,omitempty"`
	SendStickers bool  `protobuf:"varint,5,opt,name=Send_stickers,json=SendStickers,proto3" json:"Send_stickers,omitempty"`
	SendGifs     bool  `protobuf:"varint,6,opt,name=Send_gifs,json=SendGifs,proto3" json:"Send_gifs,omitempty"`
	SendGames    bool  `protobuf:"varint,7,opt,name=Send_games,json=SendGames,proto3" json:"Send_games,omitempty"`
	SendInline   bool  `protobuf:"varint,8,opt,name=Send_inline,json=SendInline,proto3" json:"Send_inline,omitempty"`
	EmbedLinks   bool  `protobuf:"varint,9,opt,name=Embed_links,json=EmbedLinks,proto3" json:"Embed_links,omitempty"`
	SendPolls    bool  `protobuf:"varint,10,opt,name=Send_polls,json=SendPolls,proto3" json:"Send_polls,omitempty"`
	ChangeInfo   bool  `protobuf:"varint,11,opt,name=Change_info,json=ChangeInfo,proto3" json:"Change_info,omitempty"`
	InviteUsers  bool  `protobuf:"varint,12,opt,name=Invite_users,json=InviteUsers,proto3" json:"Invite_users,omitempty"`
	PinMessages  bool  `protobuf:"varint,13,opt,name=Pin_messages,json=PinMessages,proto3" json:"Pin_messages,omitempty"`
	UntilDate    int32 `protobuf:"varint,14,opt,name=Until_date,json=UntilDate,proto3" json:"Until_date,omitempty"`
}

func (x *ChatBannedRights) Reset() {
	*x = ChatBannedRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatBannedRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatBannedRights) ProtoMessage() {}

func (x *ChatBannedRights) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatBannedRights.ProtoReflect.Descriptor instead.
func (*ChatBannedRights) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{101}
}

func (x *ChatBannedRights) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ChatBannedRights) GetViewMessages() bool {
	if x != nil {
		return x.ViewMessages
	}
	return false
}

func (x *ChatBannedRights) GetSendMessages() bool {
	if x != nil {
		return x.SendMessages
	}
	return false
}

func (x *ChatBannedRights) GetSendMedia() bool {
	if x != nil {
		return x.SendMedia
	}
	return false
}

func (x *ChatBannedRights) GetSendStickers() bool {
	if x != nil {
		return x.SendStickers
	}
	return false
}

func (x *ChatBannedRights) GetSendGifs() bool {
	if x != nil {
		return x.SendGifs
	}
	return false
}

func (x *ChatBannedRights) GetSendGames() bool {
	if x != nil {
		return x.SendGames
	}
	return false
}

func (x *ChatBannedRights) GetSendInline() bool {
	if x != nil {
		return x.SendInline
	}
	return false
}

func (x *ChatBannedRights) GetEmbedLinks() bool {
	if x != nil {
		return x.EmbedLinks
	}
	return false
}

func (x *ChatBannedRights) GetSendPolls() bool {
	if x != nil {
		return x.SendPolls
	}
	return false
}

func (x *ChatBannedRights) GetChangeInfo() bool {
	if x != nil {
		return x.ChangeInfo
	}
	return false
}

func (x *ChatBannedRights) GetInviteUsers() bool {
	if x != nil {
		return x.InviteUsers
	}
	return false
}

func (x *ChatBannedRights) GetPinMessages() bool {
	if x != nil {
		return x.PinMessages
	}
	return false
}

func (x *ChatBannedRights) GetUntilDate() int32 {
	if x != nil {
		return x.UntilDate
	}
	return 0
}

// for request.
type EditChatDefaultBannedRightsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqMessageId int64             `protobuf:"varint,1,opt,name=ReqMessageId,proto3" json:"ReqMessageId,omitempty"`
	ChannelId    int32             `protobuf:"varint,2,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	AccessHash   int64             `protobuf:"varint,3,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"`
	BannedFlag   *ChatBannedRights `protobuf:"bytes,4,opt,name=Banned_flag,json=BannedFlag,proto3" json:"Banned_flag,omitempty"`
	UserId       int32             `protobuf:"varint,5,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	FromId       int32             `protobuf:"varint,6,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`
	FromKeyId    uint64            `protobuf:"varint,7,opt,name=From_key_id,json=FromKeyId,proto3" json:"From_key_id,omitempty"`
	Debug        *pbcomm.Debug     `protobuf:"bytes,8,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *EditChatDefaultBannedRightsReq) Reset() {
	*x = EditChatDefaultBannedRightsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditChatDefaultBannedRightsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditChatDefaultBannedRightsReq) ProtoMessage() {}

func (x *EditChatDefaultBannedRightsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditChatDefaultBannedRightsReq.ProtoReflect.Descriptor instead.
func (*EditChatDefaultBannedRightsReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{102}
}

func (x *EditChatDefaultBannedRightsReq) GetReqMessageId() int64 {
	if x != nil {
		return x.ReqMessageId
	}
	return 0
}

func (x *EditChatDefaultBannedRightsReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *EditChatDefaultBannedRightsReq) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *EditChatDefaultBannedRightsReq) GetBannedFlag() *ChatBannedRights {
	if x != nil {
		return x.BannedFlag
	}
	return nil
}

func (x *EditChatDefaultBannedRightsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *EditChatDefaultBannedRightsReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *EditChatDefaultBannedRightsReq) GetFromKeyId() uint64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *EditChatDefaultBannedRightsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// for respond.
type EditChatDefaultBannedRightsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // TL_rpc_result_layer62
}

func (x *EditChatDefaultBannedRightsRsp) Reset() {
	*x = EditChatDefaultBannedRightsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditChatDefaultBannedRightsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditChatDefaultBannedRightsRsp) ProtoMessage() {}

func (x *EditChatDefaultBannedRightsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditChatDefaultBannedRightsRsp.ProtoReflect.Descriptor instead.
func (*EditChatDefaultBannedRightsRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{103}
}

func (x *EditChatDefaultBannedRightsRsp) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

// add by Qingsong at 2019-11-06 for call channel server to handler toggle slow mode
type HandleToggleSlowModeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChnlId    int32         `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`
	HashId    int64         `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`
	Seconds   int32         `protobuf:"varint,3,opt,name=Seconds,proto3" json:"Seconds,omitempty"`
	FromId    int32         `protobuf:"varint,4,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`
	FromKeyId uint64        `protobuf:"varint,5,opt,name=From_key_id,json=FromKeyId,proto3" json:"From_key_id,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *HandleToggleSlowModeReq) Reset() {
	*x = HandleToggleSlowModeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleToggleSlowModeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleToggleSlowModeReq) ProtoMessage() {}

func (x *HandleToggleSlowModeReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleToggleSlowModeReq.ProtoReflect.Descriptor instead.
func (*HandleToggleSlowModeReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{104}
}

func (x *HandleToggleSlowModeReq) GetChnlId() int32 {
	if x != nil {
		return x.ChnlId
	}
	return 0
}

func (x *HandleToggleSlowModeReq) GetHashId() int64 {
	if x != nil {
		return x.HashId
	}
	return 0
}

func (x *HandleToggleSlowModeReq) GetSeconds() int32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *HandleToggleSlowModeReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *HandleToggleSlowModeReq) GetFromKeyId() uint64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

func (x *HandleToggleSlowModeReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type HandleToggleSlowModeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results int32  `protobuf:"varint,1,opt,name=Results,proto3" json:"Results,omitempty"` // 返回给IM成功或失败
	Updates []byte `protobuf:"bytes,2,opt,name=Updates,proto3" json:"Updates,omitempty"`  //
}

func (x *HandleToggleSlowModeRsp) Reset() {
	*x = HandleToggleSlowModeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleToggleSlowModeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleToggleSlowModeRsp) ProtoMessage() {}

func (x *HandleToggleSlowModeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleToggleSlowModeRsp.ProtoReflect.Descriptor instead.
func (*HandleToggleSlowModeRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{105}
}

func (x *HandleToggleSlowModeRsp) GetResults() int32 {
	if x != nil {
		return x.Results
	}
	return 0
}

func (x *HandleToggleSlowModeRsp) GetUpdates() []byte {
	if x != nil {
		return x.Updates
	}
	return nil
}

// @ add by Qingsong at 2019-11-21 for channel toggle signatures
type HandleToggleSignaturesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChnlId    int32  `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`
	HashId    int64  `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`
	IsSign    bool   `protobuf:"varint,3,opt,name=Is_sign,json=IsSign,proto3" json:"Is_sign,omitempty"`
	FromId    int32  `protobuf:"varint,4,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`
	FromKeyId uint64 `protobuf:"varint,5,opt,name=From_key_id,json=FromKeyId,proto3" json:"From_key_id,omitempty"`
}

func (x *HandleToggleSignaturesReq) Reset() {
	*x = HandleToggleSignaturesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleToggleSignaturesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleToggleSignaturesReq) ProtoMessage() {}

func (x *HandleToggleSignaturesReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleToggleSignaturesReq.ProtoReflect.Descriptor instead.
func (*HandleToggleSignaturesReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{106}
}

func (x *HandleToggleSignaturesReq) GetChnlId() int32 {
	if x != nil {
		return x.ChnlId
	}
	return 0
}

func (x *HandleToggleSignaturesReq) GetHashId() int64 {
	if x != nil {
		return x.HashId
	}
	return 0
}

func (x *HandleToggleSignaturesReq) GetIsSign() bool {
	if x != nil {
		return x.IsSign
	}
	return false
}

func (x *HandleToggleSignaturesReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *HandleToggleSignaturesReq) GetFromKeyId() uint64 {
	if x != nil {
		return x.FromKeyId
	}
	return 0
}

type HandleToggleSignaturesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results   bool   `protobuf:"varint,1,opt,name=Results,proto3" json:"Results,omitempty"` // 返回给IM成功或失败
	ReplyByte []byte `protobuf:"bytes,2,opt,name=ReplyByte,proto3" json:"ReplyByte,omitempty"`
}

func (x *HandleToggleSignaturesRsp) Reset() {
	*x = HandleToggleSignaturesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleToggleSignaturesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleToggleSignaturesRsp) ProtoMessage() {}

func (x *HandleToggleSignaturesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleToggleSignaturesRsp.ProtoReflect.Descriptor instead.
func (*HandleToggleSignaturesRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{107}
}

func (x *HandleToggleSignaturesRsp) GetResults() bool {
	if x != nil {
		return x.Results
	}
	return false
}

func (x *HandleToggleSignaturesRsp) GetReplyByte() []byte {
	if x != nil {
		return x.ReplyByte
	}
	return nil
}

// @ add by Qingsong at 2019-12-02 for im call channel server to toggle channel's history hidden.
type ChannelToggleHistoryHiddenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChnlId int32 `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`
	HashId int64 `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`
	FromId int32 `protobuf:"varint,3,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`
	UserId int32 `protobuf:"varint,4,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	IsHide bool  `protobuf:"varint,5,opt,name=Is_hide,json=IsHide,proto3" json:"Is_hide,omitempty"`
}

func (x *ChannelToggleHistoryHiddenReq) Reset() {
	*x = ChannelToggleHistoryHiddenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelToggleHistoryHiddenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelToggleHistoryHiddenReq) ProtoMessage() {}

func (x *ChannelToggleHistoryHiddenReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelToggleHistoryHiddenReq.ProtoReflect.Descriptor instead.
func (*ChannelToggleHistoryHiddenReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{108}
}

func (x *ChannelToggleHistoryHiddenReq) GetChnlId() int32 {
	if x != nil {
		return x.ChnlId
	}
	return 0
}

func (x *ChannelToggleHistoryHiddenReq) GetHashId() int64 {
	if x != nil {
		return x.HashId
	}
	return 0
}

func (x *ChannelToggleHistoryHiddenReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ChannelToggleHistoryHiddenReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChannelToggleHistoryHiddenReq) GetIsHide() bool {
	if x != nil {
		return x.IsHide
	}
	return false
}

type ChannelToggleHistoryHiddenRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results   bool   `protobuf:"varint,1,opt,name=Results,proto3" json:"Results,omitempty"`    // handler success or failed.
	ReplyByte []byte `protobuf:"bytes,2,opt,name=ReplyByte,proto3" json:"ReplyByte,omitempty"` // mtproto.TL_updates_layer62
}

func (x *ChannelToggleHistoryHiddenRsp) Reset() {
	*x = ChannelToggleHistoryHiddenRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelToggleHistoryHiddenRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelToggleHistoryHiddenRsp) ProtoMessage() {}

func (x *ChannelToggleHistoryHiddenRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelToggleHistoryHiddenRsp.ProtoReflect.Descriptor instead.
func (*ChannelToggleHistoryHiddenRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{109}
}

func (x *ChannelToggleHistoryHiddenRsp) GetResults() bool {
	if x != nil {
		return x.Results
	}
	return false
}

func (x *ChannelToggleHistoryHiddenRsp) GetReplyByte() []byte {
	if x != nil {
		return x.ReplyByte
	}
	return nil
}

// @ add by qingsong at 2019-12-23 for im call channel server to set channel ban mode.
type SetChannelBanModeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChnlId  int32         `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`    // channel id
	HashId  int64         `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`    // access hash
	FromId  int32         `protobuf:"varint,3,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`    // form id
	BanMode bool          `protobuf:"varint,4,opt,name=Ban_mode,json=BanMode,proto3" json:"Ban_mode,omitempty"` // ban mode
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *SetChannelBanModeReq) Reset() {
	*x = SetChannelBanModeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChannelBanModeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChannelBanModeReq) ProtoMessage() {}

func (x *SetChannelBanModeReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChannelBanModeReq.ProtoReflect.Descriptor instead.
func (*SetChannelBanModeReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{110}
}

func (x *SetChannelBanModeReq) GetChnlId() int32 {
	if x != nil {
		return x.ChnlId
	}
	return 0
}

func (x *SetChannelBanModeReq) GetHashId() int64 {
	if x != nil {
		return x.HashId
	}
	return 0
}

func (x *SetChannelBanModeReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *SetChannelBanModeReq) GetBanMode() bool {
	if x != nil {
		return x.BanMode
	}
	return false
}

func (x *SetChannelBanModeReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type SetChannelBanModeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyCode int32  `protobuf:"varint,1,opt,name=Reply_code,json=ReplyCode,proto3" json:"Reply_code,omitempty"` // reply code
	ReplyBuff []byte `protobuf:"bytes,2,opt,name=Reply_buff,json=ReplyBuff,proto3" json:"Reply_buff,omitempty"`  // reply buff
}

func (x *SetChannelBanModeRsp) Reset() {
	*x = SetChannelBanModeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChannelBanModeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChannelBanModeRsp) ProtoMessage() {}

func (x *SetChannelBanModeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChannelBanModeRsp.ProtoReflect.Descriptor instead.
func (*SetChannelBanModeRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{111}
}

func (x *SetChannelBanModeRsp) GetReplyCode() int32 {
	if x != nil {
		return x.ReplyCode
	}
	return 0
}

func (x *SetChannelBanModeRsp) GetReplyBuff() []byte {
	if x != nil {
		return x.ReplyBuff
	}
	return nil
}

// @ add by qingsong at 2019-12-23 for get user own channels.
type CHsGetUserOwnChannelsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"` // user id.
}

func (x *CHsGetUserOwnChannelsReq) Reset() {
	*x = CHsGetUserOwnChannelsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHsGetUserOwnChannelsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHsGetUserOwnChannelsReq) ProtoMessage() {}

func (x *CHsGetUserOwnChannelsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHsGetUserOwnChannelsReq.ProtoReflect.Descriptor instead.
func (*CHsGetUserOwnChannelsReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{112}
}

func (x *CHsGetUserOwnChannelsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ChannelBrief struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChnlId               int32  `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`
	HashId               int64  `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`
	BroadcastOrMegagroup bool   `protobuf:"varint,3,opt,name=Broadcast_or_megagroup,json=BroadcastOrMegagroup,proto3" json:"Broadcast_or_megagroup,omitempty"`
	Title                string `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
}

func (x *ChannelBrief) Reset() {
	*x = ChannelBrief{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelBrief) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelBrief) ProtoMessage() {}

func (x *ChannelBrief) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelBrief.ProtoReflect.Descriptor instead.
func (*ChannelBrief) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{113}
}

func (x *ChannelBrief) GetChnlId() int32 {
	if x != nil {
		return x.ChnlId
	}
	return 0
}

func (x *ChannelBrief) GetHashId() int64 {
	if x != nil {
		return x.HashId
	}
	return 0
}

func (x *ChannelBrief) GetBroadcastOrMegagroup() bool {
	if x != nil {
		return x.BroadcastOrMegagroup
	}
	return false
}

func (x *ChannelBrief) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type CHsGetUserOwnChannelsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chnls []*ChannelBrief `protobuf:"bytes,1,rep,name=Chnls,proto3" json:"Chnls,omitempty"`
}

func (x *CHsGetUserOwnChannelsRsp) Reset() {
	*x = CHsGetUserOwnChannelsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHsGetUserOwnChannelsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHsGetUserOwnChannelsRsp) ProtoMessage() {}

func (x *CHsGetUserOwnChannelsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHsGetUserOwnChannelsRsp.ProtoReflect.Descriptor instead.
func (*CHsGetUserOwnChannelsRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{114}
}

func (x *CHsGetUserOwnChannelsRsp) GetChnls() []*ChannelBrief {
	if x != nil {
		return x.Chnls
	}
	return nil
}

// add by qingsong at 2020-04-20 for restrict channel.
type RestrictChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32  `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	Platform  string `protobuf:"bytes,2,opt,name=Platform,proto3" json:"Platform,omitempty"`
	Reason    string `protobuf:"bytes,3,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Text      string `protobuf:"bytes,4,opt,name=Text,proto3" json:"Text,omitempty"`
}

func (x *RestrictChannelReq) Reset() {
	*x = RestrictChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestrictChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestrictChannelReq) ProtoMessage() {}

func (x *RestrictChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestrictChannelReq.ProtoReflect.Descriptor instead.
func (*RestrictChannelReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{115}
}

func (x *RestrictChannelReq) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *RestrictChannelReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *RestrictChannelReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RestrictChannelReq) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type RestrictChannelRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyCode int32  `protobuf:"varint,1,opt,name=Reply_code,json=ReplyCode,proto3" json:"Reply_code,omitempty"`
	ReplyInfo string `protobuf:"bytes,2,opt,name=Reply_info,json=ReplyInfo,proto3" json:"Reply_info,omitempty"`
}

func (x *RestrictChannelRsp) Reset() {
	*x = RestrictChannelRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestrictChannelRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestrictChannelRsp) ProtoMessage() {}

func (x *RestrictChannelRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestrictChannelRsp.ProtoReflect.Descriptor instead.
func (*RestrictChannelRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{116}
}

func (x *RestrictChannelRsp) GetReplyCode() int32 {
	if x != nil {
		return x.ReplyCode
	}
	return 0
}

func (x *RestrictChannelRsp) GetReplyInfo() string {
	if x != nil {
		return x.ReplyInfo
	}
	return ""
}

// @ added by qingsong for join channel by qr-code.
type JoinByQrCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	QrCode string `protobuf:"bytes,2,opt,name=QrCode,proto3" json:"QrCode,omitempty"`
}

func (x *JoinByQrCodeReq) Reset() {
	*x = JoinByQrCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinByQrCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinByQrCodeReq) ProtoMessage() {}

func (x *JoinByQrCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinByQrCodeReq.ProtoReflect.Descriptor instead.
func (*JoinByQrCodeReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{117}
}

func (x *JoinByQrCodeReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *JoinByQrCodeReq) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

type JoinByQrCodeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JoinByQrCodeRsp) Reset() {
	*x = JoinByQrCodeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinByQrCodeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinByQrCodeRsp) ProtoMessage() {}

func (x *JoinByQrCodeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinByQrCodeRsp.ProtoReflect.Descriptor instead.
func (*JoinByQrCodeRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{118}
}

// @ added by qingsong at 2020.12.01 for live start
// rpc GroupLiveStart(LiveStartReq) returns (LiveStarRsp) {}
// 开播请求
type LiveStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginAt  int32  `protobuf:"varint,1,opt,name=BeginAt,proto3" json:"BeginAt,omitempty"` // 必填：开播时间
	GroupId  int32  `protobuf:"varint,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"` // 必填：直播群组 ID
	LiveStat int32  `protobuf:"varint,3,opt,name=LiveStat,proto3" json:"LiveStat,omitempty"`
	LiveType int32  `protobuf:"varint,4,opt,name=LiveType,proto3" json:"LiveType,omitempty"` // 必填：直播类型（公开，私密，...）
	LiveUser int32  `protobuf:"varint,5,opt,name=LiveUser,proto3" json:"LiveUser,omitempty"` // 必填：主播用户 ID
	LiveRoom int32  `protobuf:"varint,6,opt,name=LiveRoom,proto3" json:"LiveRoom,omitempty"`
	LivePkId int64  `protobuf:"varint,7,opt,name=LivePkId,proto3" json:"LivePkId,omitempty"` // 必填：直播房间唯一ID
	LiveFlag string `protobuf:"bytes,8,opt,name=LiveFlag,proto3" json:"LiveFlag,omitempty"`  // 必填：直播标签(热舞，游戏 等)
	LiveName string `protobuf:"bytes,9,opt,name=LiveName,proto3" json:"LiveName,omitempty"`  // 必填：直播房间名称
	LiveIcon string `protobuf:"bytes,10,opt,name=LiveIcon,proto3" json:"LiveIcon,omitempty"` // 必填：直播封面图片
}

func (x *LiveStartReq) Reset() {
	*x = LiveStartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveStartReq) ProtoMessage() {}

func (x *LiveStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveStartReq.ProtoReflect.Descriptor instead.
func (*LiveStartReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{119}
}

func (x *LiveStartReq) GetBeginAt() int32 {
	if x != nil {
		return x.BeginAt
	}
	return 0
}

func (x *LiveStartReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *LiveStartReq) GetLiveStat() int32 {
	if x != nil {
		return x.LiveStat
	}
	return 0
}

func (x *LiveStartReq) GetLiveType() int32 {
	if x != nil {
		return x.LiveType
	}
	return 0
}

func (x *LiveStartReq) GetLiveUser() int32 {
	if x != nil {
		return x.LiveUser
	}
	return 0
}

func (x *LiveStartReq) GetLiveRoom() int32 {
	if x != nil {
		return x.LiveRoom
	}
	return 0
}

func (x *LiveStartReq) GetLivePkId() int64 {
	if x != nil {
		return x.LivePkId
	}
	return 0
}

func (x *LiveStartReq) GetLiveFlag() string {
	if x != nil {
		return x.LiveFlag
	}
	return ""
}

func (x *LiveStartReq) GetLiveName() string {
	if x != nil {
		return x.LiveName
	}
	return ""
}

func (x *LiveStartReq) GetLiveIcon() string {
	if x != nil {
		return x.LiveIcon
	}
	return ""
}

// 开播返回
type LiveStartRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyCode GroupLiveReplyCode `protobuf:"varint,1,opt,name=ReplyCode,proto3,enum=pbchannelserver.GroupLiveReplyCode" json:"ReplyCode,omitempty"` //
	InviteUrl string             `protobuf:"bytes,2,opt,name=InviteUrl,proto3" json:"InviteUrl,omitempty"`                                          // 主播直播期间邀请入群链接
}

func (x *LiveStartRsp) Reset() {
	*x = LiveStartRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveStartRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveStartRsp) ProtoMessage() {}

func (x *LiveStartRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveStartRsp.ProtoReflect.Descriptor instead.
func (*LiveStartRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{120}
}

func (x *LiveStartRsp) GetReplyCode() GroupLiveReplyCode {
	if x != nil {
		return x.ReplyCode
	}
	return GroupLiveReplyCode_Successfuly
}

func (x *LiveStartRsp) GetInviteUrl() string {
	if x != nil {
		return x.InviteUrl
	}
	return ""
}

// @ added by qingsong at 2020.12.01 for live stop
// rpc GroupLiveStop(LiveStopReq) returns (LiveStopRsp) {}
// 停播请求
type LiveStopReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  int32  `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	LiveUser int32  `protobuf:"varint,2,opt,name=LiveUser,proto3" json:"LiveUser,omitempty"`
	LiveStat int32  `protobuf:"varint,3,opt,name=LiveStat,proto3" json:"LiveStat,omitempty"`
	LiveCode string `protobuf:"bytes,4,opt,name=LiveCode,proto3" json:"LiveCode,omitempty"` // 直播房间唯一识别码
}

func (x *LiveStopReq) Reset() {
	*x = LiveStopReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveStopReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveStopReq) ProtoMessage() {}

func (x *LiveStopReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveStopReq.ProtoReflect.Descriptor instead.
func (*LiveStopReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{121}
}

func (x *LiveStopReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *LiveStopReq) GetLiveUser() int32 {
	if x != nil {
		return x.LiveUser
	}
	return 0
}

func (x *LiveStopReq) GetLiveStat() int32 {
	if x != nil {
		return x.LiveStat
	}
	return 0
}

func (x *LiveStopReq) GetLiveCode() string {
	if x != nil {
		return x.LiveCode
	}
	return ""
}

// 停播应答
type LiveStopRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode GroupLiveReplyCode `protobuf:"varint,1,opt,name=RetCode,proto3,enum=pbchannelserver.GroupLiveReplyCode" json:"RetCode,omitempty"`
	Invited int32              `protobuf:"varint,2,opt,name=Invited,proto3" json:"Invited,omitempty"` // 主播本场直播邀请入群人数
}

func (x *LiveStopRsp) Reset() {
	*x = LiveStopRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveStopRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveStopRsp) ProtoMessage() {}

func (x *LiveStopRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveStopRsp.ProtoReflect.Descriptor instead.
func (*LiveStopRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{122}
}

func (x *LiveStopRsp) GetRetCode() GroupLiveReplyCode {
	if x != nil {
		return x.RetCode
	}
	return GroupLiveReplyCode_Successfuly
}

func (x *LiveStopRsp) GetInvited() int32 {
	if x != nil {
		return x.Invited
	}
	return 0
}

// @ added by qingsong at 2020.12.01 for live user invite link
// 获取主播邀请链接
type GetLiveInviteUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginAt  int32 `protobuf:"varint,1,opt,name=BeginAt,proto3" json:"BeginAt,omitempty"`
	GroupId  int32 `protobuf:"varint,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`   // 必填：直播群组 ID
	LiveUser int32 `protobuf:"varint,3,opt,name=LiveUser,proto3" json:"LiveUser,omitempty"` // 必填：主播用户 ID
}

func (x *GetLiveInviteUrlReq) Reset() {
	*x = GetLiveInviteUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveInviteUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveInviteUrlReq) ProtoMessage() {}

func (x *GetLiveInviteUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveInviteUrlReq.ProtoReflect.Descriptor instead.
func (*GetLiveInviteUrlReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{123}
}

func (x *GetLiveInviteUrlReq) GetBeginAt() int32 {
	if x != nil {
		return x.BeginAt
	}
	return 0
}

func (x *GetLiveInviteUrlReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetLiveInviteUrlReq) GetLiveUser() int32 {
	if x != nil {
		return x.LiveUser
	}
	return 0
}

type GetLiveInviteUrlRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyCode GroupLiveReplyCode `protobuf:"varint,1,opt,name=ReplyCode,proto3,enum=pbchannelserver.GroupLiveReplyCode" json:"ReplyCode,omitempty"` //
	InviteUrl string             `protobuf:"bytes,2,opt,name=InviteUrl,proto3" json:"InviteUrl,omitempty"`                                          // 主播直播期间邀请入群链接
}

func (x *GetLiveInviteUrlRsp) Reset() {
	*x = GetLiveInviteUrlRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveInviteUrlRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveInviteUrlRsp) ProtoMessage() {}

func (x *GetLiveInviteUrlRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveInviteUrlRsp.ProtoReflect.Descriptor instead.
func (*GetLiveInviteUrlRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{124}
}

func (x *GetLiveInviteUrlRsp) GetReplyCode() GroupLiveReplyCode {
	if x != nil {
		return x.ReplyCode
	}
	return GroupLiveReplyCode_Successfuly
}

func (x *GetLiveInviteUrlRsp) GetInviteUrl() string {
	if x != nil {
		return x.InviteUrl
	}
	return ""
}

// rpc EditLiveInfo(EditLiveInfoReq) returns (EditLiveInfoRsp) {}
// 编辑请求
type EditLiveInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginAt  int32  `protobuf:"varint,1,opt,name=BeginAt,proto3" json:"BeginAt,omitempty"` // 必填：开播时间
	GroupId  int32  `protobuf:"varint,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"` // 必填：直播群组 ID
	LiveStat int32  `protobuf:"varint,3,opt,name=LiveStat,proto3" json:"LiveStat,omitempty"`
	LiveType int32  `protobuf:"varint,4,opt,name=LiveType,proto3" json:"LiveType,omitempty"` // 必填：直播类型（公开，私密，...）
	LiveUser int32  `protobuf:"varint,5,opt,name=LiveUser,proto3" json:"LiveUser,omitempty"` // 必填：主播用户 ID
	LiveRoom int32  `protobuf:"varint,6,opt,name=LiveRoom,proto3" json:"LiveRoom,omitempty"`
	LiveFlag string `protobuf:"bytes,7,opt,name=LiveFlag,proto3" json:"LiveFlag,omitempty"` // 必填：直播标签(热舞，游戏 等)
	LiveName string `protobuf:"bytes,8,opt,name=LiveName,proto3" json:"LiveName,omitempty"` // 必填：直播房间名称
	LiveIcon string `protobuf:"bytes,9,opt,name=LiveIcon,proto3" json:"LiveIcon,omitempty"` // 必填：直播封面图片
}

func (x *EditLiveInfoReq) Reset() {
	*x = EditLiveInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditLiveInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditLiveInfoReq) ProtoMessage() {}

func (x *EditLiveInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditLiveInfoReq.ProtoReflect.Descriptor instead.
func (*EditLiveInfoReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{125}
}

func (x *EditLiveInfoReq) GetBeginAt() int32 {
	if x != nil {
		return x.BeginAt
	}
	return 0
}

func (x *EditLiveInfoReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *EditLiveInfoReq) GetLiveStat() int32 {
	if x != nil {
		return x.LiveStat
	}
	return 0
}

func (x *EditLiveInfoReq) GetLiveType() int32 {
	if x != nil {
		return x.LiveType
	}
	return 0
}

func (x *EditLiveInfoReq) GetLiveUser() int32 {
	if x != nil {
		return x.LiveUser
	}
	return 0
}

func (x *EditLiveInfoReq) GetLiveRoom() int32 {
	if x != nil {
		return x.LiveRoom
	}
	return 0
}

func (x *EditLiveInfoReq) GetLiveFlag() string {
	if x != nil {
		return x.LiveFlag
	}
	return ""
}

func (x *EditLiveInfoReq) GetLiveName() string {
	if x != nil {
		return x.LiveName
	}
	return ""
}

func (x *EditLiveInfoReq) GetLiveIcon() string {
	if x != nil {
		return x.LiveIcon
	}
	return ""
}

type EditLiveInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyCode GroupLiveReplyCode `protobuf:"varint,1,opt,name=ReplyCode,proto3,enum=pbchannelserver.GroupLiveReplyCode" json:"ReplyCode,omitempty"` //
	ReplyData string             `protobuf:"bytes,2,opt,name=ReplyData,proto3" json:"ReplyData,omitempty"`                                          // error information.
}

func (x *EditLiveInfoRsp) Reset() {
	*x = EditLiveInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditLiveInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditLiveInfoRsp) ProtoMessage() {}

func (x *EditLiveInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditLiveInfoRsp.ProtoReflect.Descriptor instead.
func (*EditLiveInfoRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{126}
}

func (x *EditLiveInfoRsp) GetReplyCode() GroupLiveReplyCode {
	if x != nil {
		return x.ReplyCode
	}
	return GroupLiveReplyCode_Successfuly
}

func (x *EditLiveInfoRsp) GetReplyData() string {
	if x != nil {
		return x.ReplyData
	}
	return ""
}

// @ brief : group live rights check.
// rpc GroupLiveCheck(GroupLiveCheckReq)returns(GroupLiveCheckRsp){}
type GroupLiveCheckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  int32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	LiveUser int32 `protobuf:"varint,2,opt,name=LiveUser,proto3" json:"LiveUser,omitempty"`
}

func (x *GroupLiveCheckReq) Reset() {
	*x = GroupLiveCheckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupLiveCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupLiveCheckReq) ProtoMessage() {}

func (x *GroupLiveCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupLiveCheckReq.ProtoReflect.Descriptor instead.
func (*GroupLiveCheckReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{127}
}

func (x *GroupLiveCheckReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupLiveCheckReq) GetLiveUser() int32 {
	if x != nil {
		return x.LiveUser
	}
	return 0
}

type GroupLiveCheckRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyCode GroupLiveReplyCode `protobuf:"varint,1,opt,name=ReplyCode,proto3,enum=pbchannelserver.GroupLiveReplyCode" json:"ReplyCode,omitempty"` //
	ReplyData string             `protobuf:"bytes,2,opt,name=ReplyData,proto3" json:"ReplyData,omitempty"`                                          // error information.
}

func (x *GroupLiveCheckRsp) Reset() {
	*x = GroupLiveCheckRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupLiveCheckRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupLiveCheckRsp) ProtoMessage() {}

func (x *GroupLiveCheckRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupLiveCheckRsp.ProtoReflect.Descriptor instead.
func (*GroupLiveCheckRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{128}
}

func (x *GroupLiveCheckRsp) GetReplyCode() GroupLiveReplyCode {
	if x != nil {
		return x.ReplyCode
	}
	return GroupLiveReplyCode_Successfuly
}

func (x *GroupLiveCheckRsp) GetReplyData() string {
	if x != nil {
		return x.ReplyData
	}
	return ""
}

// @ brief : get live invite user count.
// rpc GetLiveInviteCnt(GetLiveInviteCntReq) returns (GetLiveInviteCntRsp) {}
type GetLiveInviteCntReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  int32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	LiveUser int32 `protobuf:"varint,2,opt,name=LiveUser,proto3" json:"LiveUser,omitempty"`
}

func (x *GetLiveInviteCntReq) Reset() {
	*x = GetLiveInviteCntReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveInviteCntReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveInviteCntReq) ProtoMessage() {}

func (x *GetLiveInviteCntReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveInviteCntReq.ProtoReflect.Descriptor instead.
func (*GetLiveInviteCntReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{129}
}

func (x *GetLiveInviteCntReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetLiveInviteCntReq) GetLiveUser() int32 {
	if x != nil {
		return x.LiveUser
	}
	return 0
}

type GetLiveInviteCntRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode GroupLiveReplyCode `protobuf:"varint,1,opt,name=RetCode,proto3,enum=pbchannelserver.GroupLiveReplyCode" json:"RetCode,omitempty"` // // error information.
	Invited int32              `protobuf:"varint,2,opt,name=Invited,proto3" json:"Invited,omitempty"`
}

func (x *GetLiveInviteCntRsp) Reset() {
	*x = GetLiveInviteCntRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveInviteCntRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveInviteCntRsp) ProtoMessage() {}

func (x *GetLiveInviteCntRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveInviteCntRsp.ProtoReflect.Descriptor instead.
func (*GetLiveInviteCntRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{130}
}

func (x *GetLiveInviteCntRsp) GetRetCode() GroupLiveReplyCode {
	if x != nil {
		return x.RetCode
	}
	return GroupLiveReplyCode_Successfuly
}

func (x *GetLiveInviteCntRsp) GetInvited() int32 {
	if x != nil {
		return x.Invited
	}
	return 0
}

// rpc CheckUserInGroup(CheckUserInGroupReq) returns (CheckUserInGroupRsp)
type CheckUserInGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	UserId  int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *CheckUserInGroupReq) Reset() {
	*x = CheckUserInGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserInGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserInGroupReq) ProtoMessage() {}

func (x *CheckUserInGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserInGroupReq.ProtoReflect.Descriptor instead.
func (*CheckUserInGroupReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{131}
}

func (x *CheckUserInGroupReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CheckUserInGroupReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CheckUserInGroupRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InGroup bool `protobuf:"varint,1,opt,name=InGroup,proto3" json:"InGroup,omitempty"`
}

func (x *CheckUserInGroupRsp) Reset() {
	*x = CheckUserInGroupRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserInGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserInGroupRsp) ProtoMessage() {}

func (x *CheckUserInGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserInGroupRsp.ProtoReflect.Descriptor instead.
func (*CheckUserInGroupRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{132}
}

func (x *CheckUserInGroupRsp) GetInGroup() bool {
	if x != nil {
		return x.InGroup
	}
	return false
}

// @ brief : Get group user ID by paging.
// rpc GetGroupUserIds(GetGroupUserIdsReq) returns (GetGroupUserIdsRsp) {}
type GetGroupUserIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChanId int32 `protobuf:"varint,1,opt,name=chanId,proto3" json:"chanId,omitempty"` // 群组频道id
	UserId int32 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"` // userid
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"` // offset
	Length int32 `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"` // length
}

func (x *GetGroupUserIdsReq) Reset() {
	*x = GetGroupUserIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupUserIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupUserIdsReq) ProtoMessage() {}

func (x *GetGroupUserIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupUserIdsReq.ProtoReflect.Descriptor instead.
func (*GetGroupUserIdsReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{133}
}

func (x *GetGroupUserIdsReq) GetChanId() int32 {
	if x != nil {
		return x.ChanId
	}
	return 0
}

func (x *GetGroupUserIdsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetGroupUserIdsReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetGroupUserIdsReq) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type GetGroupUserIdsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetNo GroupLiveReplyCode `protobuf:"varint,1,opt,name=RetNo,proto3,enum=pbchannelserver.GroupLiveReplyCode" json:"RetNo,omitempty"` // 返回错误码
	Total int32              `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`                                         // 群组成员总数
	Count int32              `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`                                         // 本次获取成员数
	Users []int32            `protobuf:"varint,4,rep,packed,name=Users,proto3" json:"Users,omitempty"`                                  // 成员ID列表
}

func (x *GetGroupUserIdsRsp) Reset() {
	*x = GetGroupUserIdsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupUserIdsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupUserIdsRsp) ProtoMessage() {}

func (x *GetGroupUserIdsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupUserIdsRsp.ProtoReflect.Descriptor instead.
func (*GetGroupUserIdsRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{134}
}

func (x *GetGroupUserIdsRsp) GetRetNo() GroupLiveReplyCode {
	if x != nil {
		return x.RetNo
	}
	return GroupLiveReplyCode_Successfuly
}

func (x *GetGroupUserIdsRsp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetGroupUserIdsRsp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetGroupUserIdsRsp) GetUsers() []int32 {
	if x != nil {
		return x.Users
	}
	return nil
}

// rpc GetHotGroups(GetHotGroupsReq) returns (GetHotGroupsRsp){}
type GetHotGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId int32         `protobuf:"varint,1,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`
	Limit  int32         `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Level  int32         `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`
	VerNo  int32         `protobuf:"varint,4,opt,name=VerNo,proto3" json:"VerNo,omitempty"`
	Hash   uint32        `protobuf:"varint,5,opt,name=Hash,proto3" json:"Hash,omitempty"` // add by qingsong at 2020-07-01
	Debug  *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *GetHotGroupsReq) Reset() {
	*x = GetHotGroupsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHotGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHotGroupsReq) ProtoMessage() {}

func (x *GetHotGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHotGroupsReq.ProtoReflect.Descriptor instead.
func (*GetHotGroupsReq) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{135}
}

func (x *GetHotGroupsReq) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *GetHotGroupsReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetHotGroupsReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GetHotGroupsReq) GetVerNo() int32 {
	if x != nil {
		return x.VerNo
	}
	return 0
}

func (x *GetHotGroupsReq) GetHash() uint32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *GetHotGroupsReq) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type GetHotGroupsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error int32         `protobuf:"varint,1,opt,name=Error,proto3" json:"Error,omitempty"`
	Bytes []byte        `protobuf:"bytes,2,opt,name=Bytes,proto3" json:"Bytes,omitempty"` // TL_channels_Chats_layer105
	Hash  uint32        `protobuf:"varint,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *GetHotGroupsRsp) Reset() {
	*x = GetHotGroupsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbchannelserver_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHotGroupsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHotGroupsRsp) ProtoMessage() {}

func (x *GetHotGroupsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pbchannelserver_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHotGroupsRsp.ProtoReflect.Descriptor instead.
func (*GetHotGroupsRsp) Descriptor() ([]byte, []int) {
	return file_pbchannelserver_proto_rawDescGZIP(), []int{136}
}

func (x *GetHotGroupsRsp) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GetHotGroupsRsp) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *GetHotGroupsRsp) GetHash() uint32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *GetHotGroupsRsp) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

var File_pbchannelserver_proto protoreflect.FileDescriptor

var file_pbchannelserver_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x13, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2f, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x62, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x58, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x46, 0x6f,
	0x72, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x6c, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x63, 0x75,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x53, 0x65,
	0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x17, 0x0a, 0x15,
	0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x73, 0x70, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x4f, 0x62, 0x6a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4f,
	0x62, 0x6a, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x79, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x49, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x78, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x6d, 0x0a, 0x1b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x57, 0x0a, 0x0d, 0x52, 0x65,
	0x71, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0xbf, 0x02, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d,
	0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x69, 0x64, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x4d, 0x65, 0x69, 0x64, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x77, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x46, 0x77, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x56,
	0x69, 0x65, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x69, 0x61,
	0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x56, 0x69, 0x61,
	0x42, 0x6f, 0x74, 0x49, 0x64, 0x22, 0xf4, 0x03, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x6d, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x4d, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x50, 0x65, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64,
	0x12, 0x35, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x07,
	0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x74, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x74, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x80, 0x01, 0x0a,
	0x13, 0x52, 0x65, 0x71, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f,
	0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x43, 0x68, 0x61, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22,
	0x8f, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x22, 0xcd, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x71, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x10, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x53, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x74, 0x68, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69, 0x74, 0x68, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x22, 0xc1, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x69, 0x6e,
	0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x69, 0x6e, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4d, 0x61, 0x78, 0x49, 0x44, 0x22, 0x46, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a,
	0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x52, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xe0, 0x01,
	0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x22, 0xb0, 0x0a, 0x0a, 0x0c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x56, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x72, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x52, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x72, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x4d, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x59, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x63, 0x72,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x63, 0x72, 0x52, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49,
	0x6e, 0x63, 0x72, 0x12, 0x6e, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65,
	0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x63, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x63, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x63, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x47, 0x0a, 0x0e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x52, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x12, 0x68, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x44, 0x6c,
	0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x44, 0x6c, 0x67, 0x52, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x44, 0x6c, 0x67, 0x12, 0x59,
	0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x72,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4f, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x4d, 0x0a, 0x10, 0x53, 0x65, 0x74,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x52, 0x10, 0x53, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x89, 0x01, 0x0a, 0x24, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x44, 0x6c, 0x67, 0x4e, 0x6f, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x6c,
	0x67, 0x4e, 0x6f, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x24,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x44, 0x6c, 0x67, 0x4e, 0x6f, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x44,
	0x6c, 0x67, 0x4e, 0x6f, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x44, 0x6c,
	0x67, 0x4e, 0x6f, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x26,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x44, 0x6c, 0x67, 0x4e, 0x6f, 0x74, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x62, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x78, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x78, 0x52, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x12, 0x77, 0x0a, 0x1e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x16, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x4b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x71, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x37, 0x0a,
	0x17, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x70,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x52, 0x65, 0x73,
	0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x4b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x71, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22,
	0x79, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x73,
	0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x52, 0x65,
	0x73, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x06, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x06, 0x44, 0x65, 0x62, 0x75, 0x67, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x44, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x44, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x94, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x24, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x44, 0x6c, 0x67, 0x4e, 0x6f, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x66, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x6c, 0x66, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x57, 0x69, 0x74, 0x68, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xd7, 0x01, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x44, 0x6c, 0x67, 0x4e,
	0x6f, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x66, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x53, 0x65, 0x6c, 0x66, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74,
	0x68, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x10,
	0x53, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x62, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x6d, 0x73, 0x67, 0x62, 0x69, 0x6e, 0x22, 0xca, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x44, 0x6c, 0x67, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65,
	0x6c, 0x66, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x6c, 0x66,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x66, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x6c, 0x66, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69,
	0x74, 0x68, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xab, 0x01, 0x0a,
	0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73,
	0x67, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x13, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4f, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x66, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x6c, 0x66, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x57, 0x69, 0x74, 0x68, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x7b, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65,
	0x6c, 0x66, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x6c, 0x66,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x93,
	0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x63, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x56, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0x9a, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x63, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x56, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x22, 0xc8, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x70, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x22, 0xd3, 0x01, 0x0a,
	0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73,
	0x67, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x7f, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x5d, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x87, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x72,
	0x79, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x69, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x69, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x71, 0x75, 0x69, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xb9, 0x04, 0x0a, 0x07, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x65,
	0x66, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xee, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74,
	0x6f, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x85, 0x03, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73,
	0x5f, 0x67, 0x65, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x47,
	0x65, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x42, 0x61, 0x6e,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0xfb, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xfd, 0x01,
	0x0a, 0x0e, 0x52, 0x65, 0x71, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b,
	0x65, 0x79, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d,
	0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x80, 0x02,
	0x0a, 0x12, 0x52, 0x65, 0x71, 0x4b, 0x69, 0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x69,
	0x63, 0x6b, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6b, 0x69, 0x63, 0x6b,
	0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xa5,
	0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x85, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x45, 0x64,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xa5,
	0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4d, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xc5, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xcd, 0x01,
	0x0a, 0x13, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xd8, 0x01,
	0x0a, 0x1b, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65,
	0x79, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b,
	0x65, 0x79, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x5f, 0x70,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64,
	0x50, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xcd, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x72, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x72,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65,
	0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xd8, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x71,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0xab, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0xf0, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x52, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x41, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41,
	0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x22, 0x72, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61,
	0x78, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x43, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x61, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x22, 0x83, 0x03,
	0x0a, 0x17, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x4d, 0x61, 0x78, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61,
	0x78, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x12, 0x41, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e,
	0x64, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x22, 0x78, 0x0a, 0x1e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x70, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xc9, 0x02,
	0x0a, 0x20, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x6f, 0x4c, 0x6f,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x62, 0x6f,
	0x78, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f,
	0x75, 0x74, 0x62, 0x6f, 0x78, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x4d, 0x61,
	0x78, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa6, 0x02, 0x0a, 0x17, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x22, 0xdd, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x53, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x71,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x22, 0xa6, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x92, 0x01, 0x0a, 0x1d,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x73, 0x67, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x73, 0x67, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x73, 0x67,
	0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x75, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x49,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x49,
	0x64, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x70,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x52, 0x65,
	0x61, 0x64, 0x49, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x61,
	0x78, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x22,
	0x95, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x44, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x0d,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x38, 0x0a,
	0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x22, 0x6e, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x73, 0x12,
	0x56, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d,
	0x73, 0x67, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x22, 0xbd, 0x06, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4f,
	0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53,
	0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x6f, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54,
	0x6f, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x50, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x77, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x46, 0x77, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x56, 0x69, 0x61, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x56, 0x69, 0x61, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72,
	0x6b, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x69, 0x65, 0x77, 0x73,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x45, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x45, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x22, 0xe9, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x71, 0x12, 0x4d, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0xec, 0x02, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x65, 0x61,
	0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x61,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x62, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x6e, 0x62, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x75, 0x6e, 0x62,
	0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x6b, 0x69, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x6b, 0x69, 0x63, 0x6b,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x6b, 0x69, 0x63, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x65, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xc9, 0x02, 0x0a, 0x15, 0x52, 0x65,
	0x71, 0x45, 0x64, 0x69, 0x74, 0x42, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x75, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x13, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x89, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x41, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x73, 0x67,
	0x4d, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x73, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x4d, 0x65, 0x74,
	0x61, 0x22, 0x8b, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x12, 0x41, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x41, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x4d, 0x65,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x73, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x22,
	0x55, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x74, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x50, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x50, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x22, 0x71, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xe3, 0x03, 0x0a, 0x13, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x69,
	0x66, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x47, 0x69,
	0x66, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x69, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x22,
	0xad, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x6d, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xb1,
	0x01, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x22, 0xb0, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x8a, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73,
	0x43, 0x68, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x43, 0x68,
	0x61, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x70,
	0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x70, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x70, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x03, 0x64, 0x62, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x03, 0x64, 0x62, 0x67, 0x22, 0x88, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x70, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x73, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0xd9, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x52, 0x70, 0x6d, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x41, 0x63, 0x63,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x70, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x70, 0x6d,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x03, 0x64, 0x62,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x03, 0x64, 0x62, 0x67, 0x22, 0xd3, 0x01, 0x0a, 0x0c,
	0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x52, 0x70, 0x6d, 0x56, 0x32, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x70, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x70, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1f, 0x0a, 0x03, 0x64, 0x62, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x03, 0x64, 0x62,
	0x67, 0x22, 0x85, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x70, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x70, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x03, 0x64, 0x62, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x03, 0x64, 0x62, 0x67, 0x22, 0x56, 0x0a, 0x0c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x52, 0x70, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x91, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x52, 0x65, 0x63, 0x76, 0x52, 0x70, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x03, 0x64, 0x62, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x03, 0x64, 0x62, 0x67, 0x22, 0x56, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x63, 0x76, 0x52, 0x70, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x87, 0x01,
	0x0a, 0x16, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x43, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x44, 0x62, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x03, 0x44, 0x62, 0x67, 0x22, 0x96, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x74, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x74, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x53,
	0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x45, 0x72, 0x72, 0x53, 0x74, 0x72,
	0x22, 0xbd, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x3b, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x95, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12,
	0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x41, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xd9, 0x03, 0x0a, 0x10, 0x43, 0x68, 0x61,
	0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x56, 0x69, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x56, 0x69, 0x65, 0x77,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x53, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x23, 0x0a, 0x0d,
	0x53, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x69, 0x66, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x53, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x50, 0x69, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x55, 0x6e, 0x74, 0x69, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x1e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x52,
	0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x0b, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x17, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x38, 0x0a, 0x1e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xc3, 0x01, 0x0a, 0x17, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x53, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x43, 0x68, 0x6e, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43,
	0x68, 0x6e, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x61, 0x73, 0x68, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4d, 0x0a, 0x17, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x19, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x43, 0x68, 0x6e, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x68, 0x6e, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x48, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48,
	0x61, 0x73, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x49, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x46, 0x72,
	0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x19, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x74, 0x65, 0x22, 0x9c, 0x01, 0x0a,
	0x1d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x43, 0x68, 0x6e, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x43, 0x68, 0x6e, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x61, 0x73, 0x68, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x55, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x49, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x48, 0x69, 0x64, 0x65, 0x22, 0x57, 0x0a, 0x1d, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42,
	0x79, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x42, 0x79, 0x74, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x43, 0x68, 0x6e, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x43, 0x68, 0x6e, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x61, 0x73, 0x68, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x42, 0x61, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x54, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x75, 0x66, 0x66, 0x22, 0x33,
	0x0a, 0x18, 0x43, 0x48, 0x73, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x55, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x72, 0x69, 0x65, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x43, 0x68, 0x6e, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x68, 0x6e, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x48, 0x61, 0x73, 0x68, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x4f, 0x72, 0x4d, 0x65, 0x67, 0x61, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x22, 0x4f, 0x0a, 0x18, 0x43, 0x48, 0x73, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x77, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x73, 0x70, 0x12, 0x33,
	0x0a, 0x05, 0x43, 0x68, 0x6e, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x05, 0x43, 0x68,
	0x6e, 0x6c, 0x73, 0x22, 0x7b, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74,
	0x22, 0x52, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x41, 0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x79, 0x51, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x51, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x51, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x42,
	0x79, 0x51, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x22, 0xa2, 0x02, 0x0a, 0x0c, 0x4c,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c,
	0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x6b, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c,
	0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x22,
	0x6f, 0x0a, 0x0c, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x73, 0x70, 0x12,
	0x41, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c,
	0x22, 0x7b, 0x0a, 0x0b, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x66, 0x0a,
	0x0b, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x07,
	0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x64, 0x22, 0x65, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0x76, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c,
	0x52, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x55, 0x72, 0x6c, 0x22, 0x89, 0x02, 0x0a, 0x0f, 0x45, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4c, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x22, 0x72, 0x0a, 0x0f, 0x45, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x49, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x76,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22,
	0x74, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x22, 0x6e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x43, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x07, 0x52, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x62, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x64, 0x22, 0x47, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x74, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x22, 0x91, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x05, 0x52, 0x65, 0x74,
	0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x52,
	0x65, 0x74, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x6f,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x46, 0x72,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x56, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x76,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x2a, 0xaa, 0x01, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x79, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x91, 0xbf,
	0x05, 0x12, 0x11, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x92, 0xbf, 0x05, 0x12, 0x11, 0x0a, 0x0b, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x93, 0xbf, 0x05, 0x12, 0x11, 0x0a, 0x0b, 0x4c, 0x69, 0x76, 0x65, 0x4f,
	0x6e, 0x47, 0x6f, 0x69, 0x6e, 0x67, 0x10, 0x94, 0xbf, 0x05, 0x12, 0x11, 0x0a, 0x0b, 0x48, 0x61,
	0x76, 0x65, 0x4e, 0x6f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x95, 0xbf, 0x05, 0x12, 0x11, 0x0a,
	0x0b, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x72, 0x67, 0x73, 0x10, 0x96, 0xbf, 0x05,
	0x12, 0x11, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x10,
	0x97, 0xbf, 0x05, 0x32, 0xee, 0x39, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x13, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x70,
	0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45,
	0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x67, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x27, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1d,
	0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x21, 0x2e,
	0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x00, 0x12, 0x6b, 0x0a, 0x17, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2b, 0x2e,
	0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12,
	0x4a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x2e,
	0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x12, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x21, 0x2e, 0x70,
	0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a,
	0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x70, 0x62,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0f, 0x4b, 0x69, 0x63,
	0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x23, 0x2e, 0x70,
	0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x4b, 0x69, 0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5d, 0x0a,
	0x10, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10,
	0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x24, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x45,
	0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12,
	0x24, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x45, 0x64,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x24,
	0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41,
	0x62, 0x6f, 0x75, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x2e,
	0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x73, 0x67, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x28, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x71,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x2e, 0x70,
	0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x21, 0x2e, 0x70,
	0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x00, 0x12, 0x61, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x52, 0x65, 0x61,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a,
	0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x70,
	0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x42, 0x79, 0x4d, 0x73, 0x67, 0x73, 0x49, 0x64, 0x12, 0x2a, 0x2e, 0x70, 0x62, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x73, 0x42, 0x79, 0x4d,
	0x73, 0x67, 0x73, 0x49, 0x64, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b, 0x4a, 0x6f,
	0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x4a,
	0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12,
	0x57, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x73,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67,
	0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x31, 0x2e, 0x70, 0x62, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4c, 0x61, 0x73, 0x74,
	0x4d, 0x73, 0x67, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x21, 0x2e, 0x70,
	0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x00, 0x12, 0x5d, 0x0a, 0x10, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x21, 0x2e, 0x70, 0x62,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00,
	0x12, 0x61, 0x0a, 0x12, 0x45, 0x64, 0x69, 0x74, 0x42, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74,
	0x42, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x21,
	0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x46, 0x75,
	0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x56, 0x32, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x32, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12,
	0x22, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x62,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x27, 0x2e,
	0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x21, 0x2e, 0x70, 0x62,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00,
	0x12, 0x67, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x62, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x21, 0x2e, 0x70, 0x62,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x11, 0x45, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65,
	0x51, 0x75, 0x69, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x45,
	0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x69, 0x65, 0x74, 0x1a, 0x21, 0x2e, 0x70,
	0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x00, 0x12, 0x73, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x2f, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0f, 0x45, 0x64, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x45,
	0x64, 0x69, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x1a, 0x21,
	0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2f, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0b, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x21, 0x2e,
	0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x00, 0x12, 0x5a, 0x0a, 0x12, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x45, 0x64,
	0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x65,
	0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70,
	0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2d, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f,
	0x67, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f,
	0x67, 0x4d, 0x73, 0x67, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x70, 0x6d, 0x12, 0x1b, 0x2e, 0x70, 0x62,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x70, 0x6d, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x70, 0x6d, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x52, 0x70, 0x6d, 0x12, 0x1b, 0x2e, 0x70, 0x62,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x45, 0x64, 0x69, 0x74, 0x52, 0x70, 0x6d, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x45, 0x64, 0x69, 0x74, 0x52, 0x70, 0x6d, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x10, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x52, 0x70, 0x6d, 0x56, 0x32, 0x12, 0x1d, 0x2e,
	0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x52, 0x70, 0x6d, 0x56, 0x32, 0x1a, 0x1d, 0x2e, 0x70,
	0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x52, 0x70, 0x6d, 0x22, 0x00, 0x12, 0x56, 0x0a,
	0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x45, 0x64, 0x69, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74,
	0x52, 0x70, 0x6d, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x76, 0x52, 0x70, 0x6d, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x52, 0x65, 0x63,
	0x76, 0x52, 0x70, 0x6d, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x76,
	0x52, 0x70, 0x6d, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x62,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x17, 0x49,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x49, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x27, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x1a, 0x21, 0x2e,
	0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x1c,
	0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70,
	0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x22, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a,
	0x1b, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x70,
	0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45,
	0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e,
	0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x6c, 0x0a, 0x14, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x53, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x53, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x72,
	0x0a, 0x16, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x7d, 0x0a, 0x19, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12,
	0x2e, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x2e, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x63, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x15, 0x43, 0x48, 0x73, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x29, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x48, 0x73, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x48, 0x73,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x2a, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70,
	0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x48, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70,
	0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x66, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x26,
	0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x46, 0x6f,
	0x72, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2a,
	0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x69, 0x73,
	0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d,
	0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e,
	0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x12,
	0x1c, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x60, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x54, 0x0a, 0x0c, 0x45, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x20, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x24, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43,
	0x6e, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x76, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e,
	0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x42, 0x21, 0x5a, 0x1f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x62, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbchannelserver_proto_rawDescOnce sync.Once
	file_pbchannelserver_proto_rawDescData = file_pbchannelserver_proto_rawDesc
)

func file_pbchannelserver_proto_rawDescGZIP() []byte {
	file_pbchannelserver_proto_rawDescOnce.Do(func() {
		file_pbchannelserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbchannelserver_proto_rawDescData)
	})
	return file_pbchannelserver_proto_rawDescData
}

var file_pbchannelserver_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pbchannelserver_proto_msgTypes = make([]protoimpl.MessageInfo, 137)
var file_pbchannelserver_proto_goTypes = []interface{}{
	(GroupLiveReplyCode)(0),                                  // 0: pbchannelserver.GroupLiveReplyCode
	(*GetGroupsForDiscussionReq)(nil),                        // 1: pbchannelserver.GetGroupsForDiscussionReq
	(*GetGroupsForDiscussionRsp)(nil),                        // 2: pbchannelserver.GetGroupsForDiscussionRsp
	(*SetDiscussionGroupReq)(nil),                            // 3: pbchannelserver.SetDiscussionGroupReq
	(*SetDiscussionGroupRsp)(nil),                            // 4: pbchannelserver.SetDiscussionGroupRsp
	(*ReqCreateSuperChat)(nil),                               // 5: pbchannelserver.ReqCreateSuperChat
	(*ReqIsChannelAdminOrCreator)(nil),                       // 6: pbchannelserver.ReqIsChannelAdminOrCreator
	(*ReqGetChannelMembersCount)(nil),                        // 7: pbchannelserver.ReqGetChannelMembersCount
	(*ReplyGetChannelMembersCount)(nil),                      // 8: pbchannelserver.ReplyGetChannelMembersCount
	(*ReqSendLogMsg)(nil),                                    // 9: pbchannelserver.ReqSendLogMsg
	(*ForwardMsg)(nil),                                       // 10: pbchannelserver.ForwardMsg
	(*ReqForwardMessageToChannel)(nil),                       // 11: pbchannelserver.ReqForwardMessageToChannel
	(*ReqMigrateToChannel)(nil),                              // 12: pbchannelserver.ReqMigrateToChannel
	(*ReplyMigrateToChannel)(nil),                            // 13: pbchannelserver.ReplyMigrateToChannel
	(*ReqSearchChannelMediaMessage)(nil),                     // 14: pbchannelserver.ReqSearchChannelMediaMessage
	(*SearchChannelMsgReq)(nil),                              // 15: pbchannelserver.SearchChannelMsgReq
	(*SearchChannelMsgResp)(nil),                             // 16: pbchannelserver.SearchChannelMsgResp
	(*ReplyChannelData)(nil),                                 // 17: pbchannelserver.ReplyChannelData
	(*DialogAction)(nil),                                     // 18: pbchannelserver.DialogAction
	(*EditChannelLocationReq)(nil),                           // 19: pbchannelserver.EditChannelLocationReq
	(*EditChannelLocationResp)(nil),                          // 20: pbchannelserver.EditChannelLocationResp
	(*TransferGroupOwnerReq)(nil),                            // 21: pbchannelserver.TransferGroupOwnerReq
	(*TransferGroupOwnerResp)(nil),                           // 22: pbchannelserver.TransferGroupOwnerResp
	(*TransferGroupOwnerByIdReq)(nil),                        // 23: pbchannelserver.TransferGroupOwnerByIdReq
	(*TransferGroupOwnerByIdRsp)(nil),                        // 24: pbchannelserver.TransferGroupOwnerByIdRsp
	(*UpdateChannelReadoutbox)(nil),                          // 25: pbchannelserver.UpdateChannelReadoutbox
	(*CheckChannelOrInsertDlgNotClearDraft)(nil),             // 26: pbchannelserver.CheckChannelOrInsertDlgNotClearDraft
	(*UpdateOrInsertUserChanDlgNotClearDraft)(nil),           // 27: pbchannelserver.UpdateOrInsertUserChanDlgNotClearDraft
	(*SetSuperGroupMsg)(nil),                                 // 28: pbchannelserver.SetSuperGroupMsg
	(*UpdateOrInsertUserChanDlg)(nil),                        // 29: pbchannelserver.UpdateOrInsertUserChanDlg
	(*CheckChannelOrInsert)(nil),                             // 30: pbchannelserver.CheckChannelOrInsert
	(*CheckRecDialog)(nil),                                   // 31: pbchannelserver.CheckRecDialog
	(*CheckOrInsertDialog)(nil),                              // 32: pbchannelserver.CheckOrInsertDialog
	(*DeleteUserDialog)(nil),                                 // 33: pbchannelserver.DeleteUserDialog
	(*UpdatePeerDialogIncr)(nil),                             // 34: pbchannelserver.UpdatePeerDialogIncr
	(*UpdatePeerDialogIncrCounter)(nil),                      // 35: pbchannelserver.UpdatePeerDialogIncrCounter
	(*CreateChannelDialog)(nil),                              // 36: pbchannelserver.CreateChannelDialog
	(*CreateChannelDialogClearUnread)(nil),                   // 37: pbchannelserver.CreateChannelDialogClearUnread
	(*ReqChannelsReadMessageContents)(nil),                   // 38: pbchannelserver.ReqChannelsReadMessageContents
	(*ReqEditPrivateChat)(nil),                               // 39: pbchannelserver.ReqEditPrivateChat
	(*ReqGetChannelMessageExportLink)(nil),                   // 40: pbchannelserver.ReqGetChannelMessageExportLink
	(*ReqEditEveryoneQuiet)(nil),                             // 41: pbchannelserver.ReqEditEveryoneQuiet
	(*Channel)(nil),                                          // 42: pbchannelserver.Channel
	(*UpdateNewChannelMessage)(nil),                          // 43: pbchannelserver.UpdateNewChannelMessage
	(*ReqCreateChannel)(nil),                                 // 44: pbchannelserver.ReqCreateChannel
	(*ReqInviteChannelMember)(nil),                           // 45: pbchannelserver.ReqInviteChannelMember
	(*ReqJoinChannel)(nil),                                   // 46: pbchannelserver.ReqJoinChannel
	(*ReqKickFromChannel)(nil),                               // 47: pbchannelserver.ReqKickFromChannel
	(*ReqLeaveChannel)(nil),                                  // 48: pbchannelserver.ReqLeaveChannel
	(*ReqEditChannelTitle)(nil),                              // 49: pbchannelserver.ReqEditChannelTitle
	(*ReqEditChannelAdmin)(nil),                              // 50: pbchannelserver.ReqEditChannelAdmin
	(*ReqEditChannelPhoto)(nil),                              // 51: pbchannelserver.ReqEditChannelPhoto
	(*ChatInviteExported)(nil),                               // 52: pbchannelserver.chatInviteExported
	(*ReqEditChannelAbout)(nil),                              // 53: pbchannelserver.ReqEditChannelAbout
	(*ReqDeleteChannelMsg)(nil),                              // 54: pbchannelserver.ReqDeleteChannelMsg
	(*ReqDeleteChannelSelfHistory)(nil),                      // 55: pbchannelserver.ReqDeleteChannelSelfHistory
	(*ReqDeleteChannelHistory)(nil),                          // 56: pbchannelserver.ReqDeleteChannelHistory
	(*ReqUpdatePinnedChannelMessage)(nil),                    // 57: pbchannelserver.ReqUpdatePinnedChannelMessage
	(*ReqDeleteChannel)(nil),                                 // 58: pbchannelserver.ReqDeleteChannel
	(*ReqReadChannelHistory)(nil),                            // 59: pbchannelserver.ReqReadChannelHistory
	(*ReqUpdateChannelReadOut)(nil),                          // 60: pbchannelserver.ReqUpdateChannelReadOut
	(*ReplyUpdateChannelReadOut)(nil),                        // 61: pbchannelserver.ReplyUpdateChannelReadOut
	(*ReqGetChannelDifference)(nil),                          // 62: pbchannelserver.ReqGetChannelDifference
	(*ReplyGetChannelDifferenceEmpty)(nil),                   // 63: pbchannelserver.ReplyGetChannelDifferenceEmpty
	(*ReplyGetChannelDifferenceTooLong)(nil),                 // 64: pbchannelserver.ReplyGetChannelDifferenceTooLong
	(*ReqGetChannelMsgHistory)(nil),                          // 65: pbchannelserver.ReqGetChannelMsgHistory
	(*ReqGetParticipants)(nil),                               // 66: pbchannelserver.ReqGetParticipants
	(*ReqGetParticipant)(nil),                                // 67: pbchannelserver.ReqGetParticipant
	(*ReqGetChannelMessagesByMsgsId)(nil),                    // 68: pbchannelserver.ReqGetChannelMessagesByMsgsId
	(*ReqGetChannelCommonDialogs)(nil),                       // 69: pbchannelserver.ReqGetChannelCommonDialogs
	(*ChannelDialog)(nil),                                    // 70: pbchannelserver.ChannelDialog
	(*ChannelDialogAndMsg)(nil),                              // 71: pbchannelserver.ChannelDialogAndMsg
	(*ChannelDialogAndMsgs)(nil),                             // 72: pbchannelserver.ChannelDialogAndMsgs
	(*UserMsg)(nil),                                          // 73: pbchannelserver.UserMsg
	(*ReqGetChannelAdminLog)(nil),                            // 74: pbchannelserver.ReqGetChannelAdminLog
	(*ChannelAdminLogEventFilter)(nil),                       // 75: pbchannelserver.ChannelAdminLogEventFilter
	(*ReqImportChatInvite)(nil),                              // 76: pbchannelserver.ReqImportChatInvite
	(*ReqEditBanChannelUser)(nil),                            // 77: pbchannelserver.ReqEditBanChannelUser
	(*ReqGetFullChannel)(nil),                                // 78: pbchannelserver.ReqGetFullChannel
	(*ReqGetFullChannelV2)(nil),                              // 79: pbchannelserver.ReqGetFullChannelV2
	(*ChatMsgMeta)(nil),                                      // 80: pbchannelserver.ChatMsgMeta
	(*ReqExportChannelLink)(nil),                             // 81: pbchannelserver.ReqExportChannelLink
	(*ChannelBannedRights)(nil),                              // 82: pbchannelserver.ChannelBannedRights
	(*ReqChannelToggleInvite)(nil),                           // 83: pbchannelserver.ReqChannelToggleInvite
	(*ReqGetChannels)(nil),                                   // 84: pbchannelserver.ReqGetChannels
	(*ReqUpdateChannelUserName)(nil),                         // 85: pbchannelserver.ReqUpdateChannelUserName
	(*ReqCheckChannelUserName)(nil),                          // 86: pbchannelserver.ReqCheckChannelUserName
	(*ReqChangeGroupAndChannelCrator)(nil),                   // 87: pbchannelserver.ReqChangeGroupAndChannelCrator
	(*ReqSendRpm)(nil),                                       // 88: pbchannelserver.ReqSendRpm
	(*ReplySendRpm)(nil),                                     // 89: pbchannelserver.ReplySendRpm
	(*ReqEditRpm)(nil),                                       // 90: pbchannelserver.ReqEditRpm
	(*ReqEditRpmV2)(nil),                                     // 91: pbchannelserver.ReqEditRpmV2
	(*ReqEditPayment)(nil),                                   // 92: pbchannelserver.ReqEditPayment
	(*ReplyEditRpm)(nil),                                     // 93: pbchannelserver.ReplyEditRpm
	(*ReqRecvRpm)(nil),                                       // 94: pbchannelserver.ReqRecvRpm
	(*ReplyRecvRpm)(nil),                                     // 95: pbchannelserver.ReplyRecvRpm
	(*ReqMessageReadMentions)(nil),                           // 96: pbchannelserver.ReqMessageReadMentions
	(*ReplyMessageReadMentions)(nil),                         // 97: pbchannelserver.ReplyMessageReadMentions
	(*SendVoteReq)(nil),                                      // 98: pbchannelserver.SendVoteReq
	(*SendVoteReply)(nil),                                    // 99: pbchannelserver.SendVoteReply
	(*GetPollResultsReq)(nil),                                // 100: pbchannelserver.GetPollResultsReq
	(*GetPollResultsReply)(nil),                              // 101: pbchannelserver.GetPollResultsReply
	(*ChatBannedRights)(nil),                                 // 102: pbchannelserver.ChatBannedRights
	(*EditChatDefaultBannedRightsReq)(nil),                   // 103: pbchannelserver.EditChatDefaultBannedRightsReq
	(*EditChatDefaultBannedRightsRsp)(nil),                   // 104: pbchannelserver.EditChatDefaultBannedRightsRsp
	(*HandleToggleSlowModeReq)(nil),                          // 105: pbchannelserver.HandleToggleSlowModeReq
	(*HandleToggleSlowModeRsp)(nil),                          // 106: pbchannelserver.HandleToggleSlowModeRsp
	(*HandleToggleSignaturesReq)(nil),                        // 107: pbchannelserver.HandleToggleSignaturesReq
	(*HandleToggleSignaturesRsp)(nil),                        // 108: pbchannelserver.HandleToggleSignaturesRsp
	(*ChannelToggleHistoryHiddenReq)(nil),                    // 109: pbchannelserver.ChannelToggleHistoryHiddenReq
	(*ChannelToggleHistoryHiddenRsp)(nil),                    // 110: pbchannelserver.ChannelToggleHistoryHiddenRsp
	(*SetChannelBanModeReq)(nil),                             // 111: pbchannelserver.SetChannelBanModeReq
	(*SetChannelBanModeRsp)(nil),                             // 112: pbchannelserver.SetChannelBanModeRsp
	(*CHsGetUserOwnChannelsReq)(nil),                         // 113: pbchannelserver.CHsGetUserOwnChannelsReq
	(*ChannelBrief)(nil),                                     // 114: pbchannelserver.ChannelBrief
	(*CHsGetUserOwnChannelsRsp)(nil),                         // 115: pbchannelserver.CHsGetUserOwnChannelsRsp
	(*RestrictChannelReq)(nil),                               // 116: pbchannelserver.RestrictChannelReq
	(*RestrictChannelRsp)(nil),                               // 117: pbchannelserver.RestrictChannelRsp
	(*JoinByQrCodeReq)(nil),                                  // 118: pbchannelserver.JoinByQrCodeReq
	(*JoinByQrCodeRsp)(nil),                                  // 119: pbchannelserver.JoinByQrCodeRsp
	(*LiveStartReq)(nil),                                     // 120: pbchannelserver.LiveStartReq
	(*LiveStartRsp)(nil),                                     // 121: pbchannelserver.LiveStartRsp
	(*LiveStopReq)(nil),                                      // 122: pbchannelserver.LiveStopReq
	(*LiveStopRsp)(nil),                                      // 123: pbchannelserver.LiveStopRsp
	(*GetLiveInviteUrlReq)(nil),                              // 124: pbchannelserver.GetLiveInviteUrlReq
	(*GetLiveInviteUrlRsp)(nil),                              // 125: pbchannelserver.GetLiveInviteUrlRsp
	(*EditLiveInfoReq)(nil),                                  // 126: pbchannelserver.EditLiveInfoReq
	(*EditLiveInfoRsp)(nil),                                  // 127: pbchannelserver.EditLiveInfoRsp
	(*GroupLiveCheckReq)(nil),                                // 128: pbchannelserver.GroupLiveCheckReq
	(*GroupLiveCheckRsp)(nil),                                // 129: pbchannelserver.GroupLiveCheckRsp
	(*GetLiveInviteCntReq)(nil),                              // 130: pbchannelserver.GetLiveInviteCntReq
	(*GetLiveInviteCntRsp)(nil),                              // 131: pbchannelserver.GetLiveInviteCntRsp
	(*CheckUserInGroupReq)(nil),                              // 132: pbchannelserver.CheckUserInGroupReq
	(*CheckUserInGroupRsp)(nil),                              // 133: pbchannelserver.CheckUserInGroupRsp
	(*GetGroupUserIdsReq)(nil),                               // 134: pbchannelserver.GetGroupUserIdsReq
	(*GetGroupUserIdsRsp)(nil),                               // 135: pbchannelserver.GetGroupUserIdsRsp
	(*GetHotGroupsReq)(nil),                                  // 136: pbchannelserver.GetHotGroupsReq
	(*GetHotGroupsRsp)(nil),                                  // 137: pbchannelserver.GetHotGroupsRsp
	(*pbcomm.Debug)(nil),                                     // 138: pbcomm.Debug
	(*pbmessageserver.ReqMessageSearch)(nil),                 // 139: pbmessageserver.ReqMessageSearch
	(*pbmessagedb.UserMsg)(nil),                              // 140: messagedb.UserMsg
	(*pbmessagedb.UpdateUserDialogParam)(nil),                // 141: messagedb.UpdateUserDialogParam
	(*pbmessagedb.UserDialogAndMsg)(nil),                     // 142: messagedb.UserDialogAndMsg
	(*pbmessageserver.ReqSendMedia)(nil),                     // 143: pbmessageserver.ReqSendMedia
	(*pbmessageserver.ReqHistory)(nil),                       // 144: pbmessageserver.ReqHistory
	(*pbmessageserver.RequestSendMessage)(nil),               // 145: pbmessageserver.RequestSendMessage
	(*pbmessageserver.ReqGetChannelMsgsByMsgsId)(nil),        // 146: pbmessageserver.ReqGetChannelMsgsByMsgsId
	(*pbmessageserver.ReqGetChannelsLastMsgsByUserId)(nil),   // 147: pbmessageserver.ReqGetChannelsLastMsgsByUserId
	(*pbmessageserver.ReqEditMessage)(nil),                   // 148: pbmessageserver.ReqEditMessage
	(*pbmessageserver.ReplyHistory)(nil),                     // 149: pbmessageserver.ReplyHistory
	(*pbmessageserver.ReplyGetChannelsLastMsgsByUserId)(nil), // 150: pbmessageserver.ReplyGetChannelsLastMsgsByUserId
}
var file_pbchannelserver_proto_depIdxs = []int32{
	138, // 0: pbchannelserver.GetGroupsForDiscussionReq.Debug:type_name -> pbcomm.Debug
	138, // 1: pbchannelserver.GetGroupsForDiscussionRsp.Debug:type_name -> pbcomm.Debug
	138, // 2: pbchannelserver.SetDiscussionGroupReq.Debug:type_name -> pbcomm.Debug
	138, // 3: pbchannelserver.ReqCreateSuperChat.debug:type_name -> pbcomm.Debug
	138, // 4: pbchannelserver.ReqIsChannelAdminOrCreator.debug:type_name -> pbcomm.Debug
	138, // 5: pbchannelserver.ReqGetChannelMembersCount.debug:type_name -> pbcomm.Debug
	10,  // 6: pbchannelserver.ReqForwardMessageToChannel.MsgList:type_name -> pbchannelserver.ForwardMsg
	138, // 7: pbchannelserver.ReqForwardMessageToChannel.debug:type_name -> pbcomm.Debug
	138, // 8: pbchannelserver.ReqMigrateToChannel.debug:type_name -> pbcomm.Debug
	139, // 9: pbchannelserver.ReqSearchChannelMediaMessage.ReqMessageSearch:type_name -> pbmessageserver.ReqMessageSearch
	140, // 10: pbchannelserver.SearchChannelMsgResp.Messages:type_name -> messagedb.UserMsg
	18,  // 11: pbchannelserver.ReplyChannelData.dialogAction:type_name -> pbchannelserver.DialogAction
	32,  // 12: pbchannelserver.DialogAction.CheckOrInsertDialog:type_name -> pbchannelserver.CheckOrInsertDialog
	33,  // 13: pbchannelserver.DialogAction.DeleteUserDialog:type_name -> pbchannelserver.DeleteUserDialog
	34,  // 14: pbchannelserver.DialogAction.UpdatePeerDialogIncr:type_name -> pbchannelserver.UpdatePeerDialogIncr
	35,  // 15: pbchannelserver.DialogAction.UpdatePeerDialogIncrCounter:type_name -> pbchannelserver.UpdatePeerDialogIncrCounter
	36,  // 16: pbchannelserver.DialogAction.CreateChannelDialog:type_name -> pbchannelserver.CreateChannelDialog
	31,  // 17: pbchannelserver.DialogAction.CheckRecDialog:type_name -> pbchannelserver.CheckRecDialog
	29,  // 18: pbchannelserver.DialogAction.UpdateOrInsertUserChanDlg:type_name -> pbchannelserver.UpdateOrInsertUserChanDlg
	30,  // 19: pbchannelserver.DialogAction.CheckChannelOrInsert:type_name -> pbchannelserver.CheckChannelOrInsert
	28,  // 20: pbchannelserver.DialogAction.SetSuperGroupMsg:type_name -> pbchannelserver.SetSuperGroupMsg
	26,  // 21: pbchannelserver.DialogAction.CheckChannelOrInsertDlgNotClearDraft:type_name -> pbchannelserver.CheckChannelOrInsertDlgNotClearDraft
	27,  // 22: pbchannelserver.DialogAction.UpdateOrInsertUserChanDlgNotClearDraft:type_name -> pbchannelserver.UpdateOrInsertUserChanDlgNotClearDraft
	25,  // 23: pbchannelserver.DialogAction.UpdateChannelReadoutbox:type_name -> pbchannelserver.UpdateChannelReadoutbox
	37,  // 24: pbchannelserver.DialogAction.CreateChannelDialogClearUnread:type_name -> pbchannelserver.CreateChannelDialogClearUnread
	138, // 25: pbchannelserver.EditChannelLocationReq.debug:type_name -> pbcomm.Debug
	138, // 26: pbchannelserver.TransferGroupOwnerReq.debug:type_name -> pbcomm.Debug
	18,  // 27: pbchannelserver.TransferGroupOwnerResp.dialogAction:type_name -> pbchannelserver.DialogAction
	138, // 28: pbchannelserver.TransferGroupOwnerByIdReq.Debugs:type_name -> pbcomm.Debug
	138, // 29: pbchannelserver.UpdateChannelReadoutbox.debug:type_name -> pbcomm.Debug
	138, // 30: pbchannelserver.CheckChannelOrInsertDlgNotClearDraft.debug:type_name -> pbcomm.Debug
	140, // 31: pbchannelserver.CheckChannelOrInsertDlgNotClearDraft.msg:type_name -> messagedb.UserMsg
	138, // 32: pbchannelserver.UpdateOrInsertUserChanDlgNotClearDraft.debug:type_name -> pbcomm.Debug
	140, // 33: pbchannelserver.UpdateOrInsertUserChanDlgNotClearDraft.msg:type_name -> messagedb.UserMsg
	138, // 34: pbchannelserver.SetSuperGroupMsg.debug:type_name -> pbcomm.Debug
	138, // 35: pbchannelserver.UpdateOrInsertUserChanDlg.debug:type_name -> pbcomm.Debug
	140, // 36: pbchannelserver.UpdateOrInsertUserChanDlg.msg:type_name -> messagedb.UserMsg
	138, // 37: pbchannelserver.CheckChannelOrInsert.debug:type_name -> pbcomm.Debug
	140, // 38: pbchannelserver.CheckChannelOrInsert.msg:type_name -> messagedb.UserMsg
	138, // 39: pbchannelserver.CheckRecDialog.debug:type_name -> pbcomm.Debug
	138, // 40: pbchannelserver.CheckOrInsertDialog.debug:type_name -> pbcomm.Debug
	140, // 41: pbchannelserver.CheckOrInsertDialog.msg:type_name -> messagedb.UserMsg
	138, // 42: pbchannelserver.DeleteUserDialog.debug:type_name -> pbcomm.Debug
	138, // 43: pbchannelserver.UpdatePeerDialogIncr.debug:type_name -> pbcomm.Debug
	141, // 44: pbchannelserver.UpdatePeerDialogIncr.UpdateUserDialogParam:type_name -> messagedb.UpdateUserDialogParam
	138, // 45: pbchannelserver.UpdatePeerDialogIncrCounter.debug:type_name -> pbcomm.Debug
	141, // 46: pbchannelserver.UpdatePeerDialogIncrCounter.UpdateUserDialogParam:type_name -> messagedb.UpdateUserDialogParam
	138, // 47: pbchannelserver.CreateChannelDialog.debug:type_name -> pbcomm.Debug
	138, // 48: pbchannelserver.CreateChannelDialogClearUnread.debug:type_name -> pbcomm.Debug
	138, // 49: pbchannelserver.ReqChannelsReadMessageContents.debug:type_name -> pbcomm.Debug
	138, // 50: pbchannelserver.ReqEditPrivateChat.debug:type_name -> pbcomm.Debug
	138, // 51: pbchannelserver.ReqGetChannelMessageExportLink.debug:type_name -> pbcomm.Debug
	138, // 52: pbchannelserver.ReqEditEveryoneQuiet.debug:type_name -> pbcomm.Debug
	138, // 53: pbchannelserver.ReqCreateChannel.debug:type_name -> pbcomm.Debug
	138, // 54: pbchannelserver.ReqInviteChannelMember.debug:type_name -> pbcomm.Debug
	138, // 55: pbchannelserver.ReqJoinChannel.debug:type_name -> pbcomm.Debug
	138, // 56: pbchannelserver.ReqKickFromChannel.debug:type_name -> pbcomm.Debug
	138, // 57: pbchannelserver.ReqLeaveChannel.debug:type_name -> pbcomm.Debug
	138, // 58: pbchannelserver.ReqEditChannelTitle.debug:type_name -> pbcomm.Debug
	138, // 59: pbchannelserver.ReqEditChannelAdmin.debug:type_name -> pbcomm.Debug
	138, // 60: pbchannelserver.ReqEditChannelPhoto.debug:type_name -> pbcomm.Debug
	138, // 61: pbchannelserver.chatInviteExported.debug:type_name -> pbcomm.Debug
	138, // 62: pbchannelserver.ReqEditChannelAbout.debug:type_name -> pbcomm.Debug
	138, // 63: pbchannelserver.ReqDeleteChannelMsg.debug:type_name -> pbcomm.Debug
	138, // 64: pbchannelserver.ReqDeleteChannelSelfHistory.debug:type_name -> pbcomm.Debug
	138, // 65: pbchannelserver.ReqDeleteChannelHistory.debug:type_name -> pbcomm.Debug
	138, // 66: pbchannelserver.ReqUpdatePinnedChannelMessage.debug:type_name -> pbcomm.Debug
	138, // 67: pbchannelserver.ReqDeleteChannel.debug:type_name -> pbcomm.Debug
	138, // 68: pbchannelserver.ReqReadChannelHistory.debug:type_name -> pbcomm.Debug
	142, // 69: pbchannelserver.ReqReadChannelHistory.ChannelDialog:type_name -> messagedb.UserDialogAndMsg
	138, // 70: pbchannelserver.ReqUpdateChannelReadOut.debug:type_name -> pbcomm.Debug
	138, // 71: pbchannelserver.ReqGetChannelDifference.debug:type_name -> pbcomm.Debug
	142, // 72: pbchannelserver.ReqGetChannelDifference.ChannelDialog:type_name -> messagedb.UserDialogAndMsg
	138, // 73: pbchannelserver.ReqGetChannelMsgHistory.debug:type_name -> pbcomm.Debug
	138, // 74: pbchannelserver.ReqGetParticipants.debug:type_name -> pbcomm.Debug
	138, // 75: pbchannelserver.ReqGetParticipant.debug:type_name -> pbcomm.Debug
	138, // 76: pbchannelserver.ReqGetChannelMessagesByMsgsId.debug:type_name -> pbcomm.Debug
	138, // 77: pbchannelserver.ReqGetChannelCommonDialogs.debug:type_name -> pbcomm.Debug
	70,  // 78: pbchannelserver.ChannelDialogAndMsg.ChannelDialog:type_name -> pbchannelserver.ChannelDialog
	73,  // 79: pbchannelserver.ChannelDialogAndMsg.ChannelMsg:type_name -> pbchannelserver.UserMsg
	71,  // 80: pbchannelserver.ChannelDialogAndMsgs.channelDialogAndMsg:type_name -> pbchannelserver.ChannelDialogAndMsg
	75,  // 81: pbchannelserver.ReqGetChannelAdminLog.eventFilter:type_name -> pbchannelserver.ChannelAdminLogEventFilter
	138, // 82: pbchannelserver.ReqGetChannelAdminLog.debug:type_name -> pbcomm.Debug
	138, // 83: pbchannelserver.ReqImportChatInvite.debug:type_name -> pbcomm.Debug
	82,  // 84: pbchannelserver.ReqEditBanChannelUser.channelBannedRights:type_name -> pbchannelserver.ChannelBannedRights
	138, // 85: pbchannelserver.ReqEditBanChannelUser.debug:type_name -> pbcomm.Debug
	138, // 86: pbchannelserver.ReqGetFullChannel.debug:type_name -> pbcomm.Debug
	142, // 87: pbchannelserver.ReqGetFullChannel.ChannelDialog:type_name -> messagedb.UserDialogAndMsg
	80,  // 88: pbchannelserver.ReqGetFullChannel.msgMeta:type_name -> pbchannelserver.ChatMsgMeta
	138, // 89: pbchannelserver.ReqGetFullChannelV2.debug:type_name -> pbcomm.Debug
	142, // 90: pbchannelserver.ReqGetFullChannelV2.ChannelDialog:type_name -> messagedb.UserDialogAndMsg
	80,  // 91: pbchannelserver.ReqGetFullChannelV2.msgMeta:type_name -> pbchannelserver.ChatMsgMeta
	138, // 92: pbchannelserver.ReqExportChannelLink.debug:type_name -> pbcomm.Debug
	138, // 93: pbchannelserver.ReqChannelToggleInvite.debug:type_name -> pbcomm.Debug
	138, // 94: pbchannelserver.ReqGetChannels.debug:type_name -> pbcomm.Debug
	138, // 95: pbchannelserver.ReqUpdateChannelUserName.debug:type_name -> pbcomm.Debug
	138, // 96: pbchannelserver.ReqCheckChannelUserName.debug:type_name -> pbcomm.Debug
	138, // 97: pbchannelserver.ReqSendRpm.dbg:type_name -> pbcomm.Debug
	80,  // 98: pbchannelserver.ReplySendRpm.meta:type_name -> pbchannelserver.ChatMsgMeta
	138, // 99: pbchannelserver.ReqEditRpm.dbg:type_name -> pbcomm.Debug
	138, // 100: pbchannelserver.ReqEditRpmV2.dbg:type_name -> pbcomm.Debug
	138, // 101: pbchannelserver.ReqEditPayment.dbg:type_name -> pbcomm.Debug
	138, // 102: pbchannelserver.ReqRecvRpm.dbg:type_name -> pbcomm.Debug
	138, // 103: pbchannelserver.ReqMessageReadMentions.Dbg:type_name -> pbcomm.Debug
	138, // 104: pbchannelserver.SendVoteReq.debug:type_name -> pbcomm.Debug
	138, // 105: pbchannelserver.GetPollResultsReq.debug:type_name -> pbcomm.Debug
	102, // 106: pbchannelserver.EditChatDefaultBannedRightsReq.Banned_flag:type_name -> pbchannelserver.ChatBannedRights
	138, // 107: pbchannelserver.EditChatDefaultBannedRightsReq.Debug:type_name -> pbcomm.Debug
	138, // 108: pbchannelserver.HandleToggleSlowModeReq.Debug:type_name -> pbcomm.Debug
	138, // 109: pbchannelserver.SetChannelBanModeReq.Debug:type_name -> pbcomm.Debug
	114, // 110: pbchannelserver.CHsGetUserOwnChannelsRsp.Chnls:type_name -> pbchannelserver.ChannelBrief
	0,   // 111: pbchannelserver.LiveStartRsp.ReplyCode:type_name -> pbchannelserver.GroupLiveReplyCode
	0,   // 112: pbchannelserver.LiveStopRsp.RetCode:type_name -> pbchannelserver.GroupLiveReplyCode
	0,   // 113: pbchannelserver.GetLiveInviteUrlRsp.ReplyCode:type_name -> pbchannelserver.GroupLiveReplyCode
	0,   // 114: pbchannelserver.EditLiveInfoRsp.ReplyCode:type_name -> pbchannelserver.GroupLiveReplyCode
	0,   // 115: pbchannelserver.GroupLiveCheckRsp.ReplyCode:type_name -> pbchannelserver.GroupLiveReplyCode
	0,   // 116: pbchannelserver.GetLiveInviteCntRsp.RetCode:type_name -> pbchannelserver.GroupLiveReplyCode
	0,   // 117: pbchannelserver.GetGroupUserIdsRsp.RetNo:type_name -> pbchannelserver.GroupLiveReplyCode
	138, // 118: pbchannelserver.GetHotGroupsReq.Debug:type_name -> pbcomm.Debug
	138, // 119: pbchannelserver.GetHotGroupsRsp.Debug:type_name -> pbcomm.Debug
	19,  // 120: pbchannelserver.ChannelServer.EditChannelLocation:input_type -> pbchannelserver.EditChannelLocationReq
	21,  // 121: pbchannelserver.ChannelServer.TransferGroupOwner:input_type -> pbchannelserver.TransferGroupOwnerReq
	143, // 122: pbchannelserver.ChannelServer.SendChannelMedia:input_type -> pbmessageserver.ReqSendMedia
	11,  // 123: pbchannelserver.ChannelServer.ForwardMessageToChannel:input_type -> pbchannelserver.ReqForwardMessageToChannel
	144, // 124: pbchannelserver.ChannelServer.GetHistory:input_type -> pbmessageserver.ReqHistory
	145, // 125: pbchannelserver.ChannelServer.SendChannelMessage:input_type -> pbmessageserver.RequestSendMessage
	44,  // 126: pbchannelserver.ChannelServer.CreateChannel:input_type -> pbchannelserver.ReqCreateChannel
	45,  // 127: pbchannelserver.ChannelServer.InviteChannelMember:input_type -> pbchannelserver.ReqInviteChannelMember
	47,  // 128: pbchannelserver.ChannelServer.KickFromChannel:input_type -> pbchannelserver.ReqKickFromChannel
	48,  // 129: pbchannelserver.ChannelServer.LeaveChannel:input_type -> pbchannelserver.ReqLeaveChannel
	49,  // 130: pbchannelserver.ChannelServer.EditChannelTitle:input_type -> pbchannelserver.ReqEditChannelTitle
	50,  // 131: pbchannelserver.ChannelServer.EditChannelAdmin:input_type -> pbchannelserver.ReqEditChannelAdmin
	51,  // 132: pbchannelserver.ChannelServer.EditChannelPhoto:input_type -> pbchannelserver.ReqEditChannelPhoto
	53,  // 133: pbchannelserver.ChannelServer.EditChannelAbout:input_type -> pbchannelserver.ReqEditChannelAbout
	54,  // 134: pbchannelserver.ChannelServer.DeleteChannelMsg:input_type -> pbchannelserver.ReqDeleteChannelMsg
	55,  // 135: pbchannelserver.ChannelServer.DeleteChannelSelfHistory:input_type -> pbchannelserver.ReqDeleteChannelSelfHistory
	56,  // 136: pbchannelserver.ChannelServer.DeleteChannelHistory:input_type -> pbchannelserver.ReqDeleteChannelHistory
	57,  // 137: pbchannelserver.ChannelServer.UpdatePinnedChannelMessage:input_type -> pbchannelserver.ReqUpdatePinnedChannelMessage
	59,  // 138: pbchannelserver.ChannelServer.ReadChannelHistory:input_type -> pbchannelserver.ReqReadChannelHistory
	62,  // 139: pbchannelserver.ChannelServer.GetChannelDifference:input_type -> pbchannelserver.ReqGetChannelDifference
	146, // 140: pbchannelserver.ChannelServer.GetChannelMessagesByMsgsId:input_type -> pbmessageserver.ReqGetChannelMsgsByMsgsId
	46,  // 141: pbchannelserver.ChannelServer.JoinChannel:input_type -> pbchannelserver.ReqJoinChannel
	58,  // 142: pbchannelserver.ChannelServer.DeleteChannel:input_type -> pbchannelserver.ReqDeleteChannel
	147, // 143: pbchannelserver.ChannelServer.GetChannelsLastMsgsByUserId:input_type -> pbmessageserver.ReqGetChannelsLastMsgsByUserId
	74,  // 144: pbchannelserver.ChannelServer.GetChannelAdminLog:input_type -> pbchannelserver.ReqGetChannelAdminLog
	76,  // 145: pbchannelserver.ChannelServer.ImportChatInvite:input_type -> pbchannelserver.ReqImportChatInvite
	77,  // 146: pbchannelserver.ChannelServer.EditBanChannelUser:input_type -> pbchannelserver.ReqEditBanChannelUser
	78,  // 147: pbchannelserver.ChannelServer.GetFullChannel:input_type -> pbchannelserver.ReqGetFullChannel
	79,  // 148: pbchannelserver.ChannelServer.GetFullChannelV2:input_type -> pbchannelserver.ReqGetFullChannelV2
	67,  // 149: pbchannelserver.ChannelServer.GetParticipant:input_type -> pbchannelserver.ReqGetParticipant
	66,  // 150: pbchannelserver.ChannelServer.GetParticipants:input_type -> pbchannelserver.ReqGetParticipants
	81,  // 151: pbchannelserver.ChannelServer.ExportChannelLink:input_type -> pbchannelserver.ReqExportChannelLink
	83,  // 152: pbchannelserver.ChannelServer.ChannelToggleInvite:input_type -> pbchannelserver.ReqChannelToggleInvite
	84,  // 153: pbchannelserver.ChannelServer.GetChannels:input_type -> pbchannelserver.ReqGetChannels
	85,  // 154: pbchannelserver.ChannelServer.UpdateChannelUserName:input_type -> pbchannelserver.ReqUpdateChannelUserName
	86,  // 155: pbchannelserver.ChannelServer.CheckChannelUserName:input_type -> pbchannelserver.ReqCheckChannelUserName
	41,  // 156: pbchannelserver.ChannelServer.EditEveryoneQuiet:input_type -> pbchannelserver.ReqEditEveryoneQuiet
	40,  // 157: pbchannelserver.ChannelServer.GetChannelMessageExportLink:input_type -> pbchannelserver.ReqGetChannelMessageExportLink
	39,  // 158: pbchannelserver.ChannelServer.EditPrivateChat:input_type -> pbchannelserver.ReqEditPrivateChat
	38,  // 159: pbchannelserver.ChannelServer.ChannelsReadMessageContents:input_type -> pbchannelserver.ReqChannelsReadMessageContents
	12,  // 160: pbchannelserver.ChannelServer.MigrateChat:input_type -> pbchannelserver.ReqMigrateToChannel
	148, // 161: pbchannelserver.ChannelServer.EditChannelMessage:input_type -> pbmessageserver.ReqEditMessage
	15,  // 162: pbchannelserver.ChannelServer.SearchChannelMessage:input_type -> pbchannelserver.SearchChannelMsgReq
	14,  // 163: pbchannelserver.ChannelServer.SearchChannelMediaMessage:input_type -> pbchannelserver.ReqSearchChannelMediaMessage
	9,   // 164: pbchannelserver.ChannelServer.SendLogMsg:input_type -> pbchannelserver.ReqSendLogMsg
	88,  // 165: pbchannelserver.ChannelServer.RequestSendRpm:input_type -> pbchannelserver.ReqSendRpm
	90,  // 166: pbchannelserver.ChannelServer.RequestEditRpm:input_type -> pbchannelserver.ReqEditRpm
	91,  // 167: pbchannelserver.ChannelServer.RequestEditRpmV2:input_type -> pbchannelserver.ReqEditRpmV2
	92,  // 168: pbchannelserver.ChannelServer.RequestEditPayment:input_type -> pbchannelserver.ReqEditPayment
	94,  // 169: pbchannelserver.ChannelServer.RequestRecvRpm:input_type -> pbchannelserver.ReqRecvRpm
	7,   // 170: pbchannelserver.ChannelServer.GetChannelMembersCount:input_type -> pbchannelserver.ReqGetChannelMembersCount
	6,   // 171: pbchannelserver.ChannelServer.IsChannelAdminOrCreator:input_type -> pbchannelserver.ReqIsChannelAdminOrCreator
	96,  // 172: pbchannelserver.ChannelServer.MessageReadMentions:input_type -> pbchannelserver.ReqMessageReadMentions
	5,   // 173: pbchannelserver.ChannelServer.CreateSuperChat:input_type -> pbchannelserver.ReqCreateSuperChat
	98,  // 174: pbchannelserver.ChannelServer.SendVote:input_type -> pbchannelserver.SendVoteReq
	100, // 175: pbchannelserver.ChannelServer.GetPollResults:input_type -> pbchannelserver.GetPollResultsReq
	103, // 176: pbchannelserver.ChannelServer.EditChatDefaultBannedRights:input_type -> pbchannelserver.EditChatDefaultBannedRightsReq
	105, // 177: pbchannelserver.ChannelServer.HandleToggleSlowMode:input_type -> pbchannelserver.HandleToggleSlowModeReq
	107, // 178: pbchannelserver.ChannelServer.HandleToggleSignatures:input_type -> pbchannelserver.HandleToggleSignaturesReq
	109, // 179: pbchannelserver.ChannelServer.HandleToggleHistoryHidden:input_type -> pbchannelserver.ChannelToggleHistoryHiddenReq
	111, // 180: pbchannelserver.ChannelServer.SetChannelBanMode:input_type -> pbchannelserver.SetChannelBanModeReq
	113, // 181: pbchannelserver.ChannelServer.CHsGetUserOwnChannels:input_type -> pbchannelserver.CHsGetUserOwnChannelsReq
	116, // 182: pbchannelserver.ChannelServer.RestrictChannel:input_type -> pbchannelserver.RestrictChannelReq
	23,  // 183: pbchannelserver.ChannelServer.TransferGroupOwnerById:input_type -> pbchannelserver.TransferGroupOwnerByIdReq
	136, // 184: pbchannelserver.ChannelServer.GetHotGroups:input_type -> pbchannelserver.GetHotGroupsReq
	3,   // 185: pbchannelserver.ChannelServer.SetDiscussionGroup:input_type -> pbchannelserver.SetDiscussionGroupReq
	1,   // 186: pbchannelserver.ChannelServer.GetGroupsForDiscussion:input_type -> pbchannelserver.GetGroupsForDiscussionReq
	120, // 187: pbchannelserver.ChannelServer.GroupLiveStart:input_type -> pbchannelserver.LiveStartReq
	122, // 188: pbchannelserver.ChannelServer.GroupLiveStop:input_type -> pbchannelserver.LiveStopReq
	124, // 189: pbchannelserver.ChannelServer.GetLiveInviteUrl:input_type -> pbchannelserver.GetLiveInviteUrlReq
	126, // 190: pbchannelserver.ChannelServer.EditLiveInfo:input_type -> pbchannelserver.EditLiveInfoReq
	130, // 191: pbchannelserver.ChannelServer.GetLiveInviteCnt:input_type -> pbchannelserver.GetLiveInviteCntReq
	128, // 192: pbchannelserver.ChannelServer.GroupLiveCheck:input_type -> pbchannelserver.GroupLiveCheckReq
	132, // 193: pbchannelserver.ChannelServer.CheckUserInGroup:input_type -> pbchannelserver.CheckUserInGroupReq
	134, // 194: pbchannelserver.ChannelServer.GetGroupUserIds:input_type -> pbchannelserver.GetGroupUserIdsReq
	20,  // 195: pbchannelserver.ChannelServer.EditChannelLocation:output_type -> pbchannelserver.EditChannelLocationResp
	22,  // 196: pbchannelserver.ChannelServer.TransferGroupOwner:output_type -> pbchannelserver.TransferGroupOwnerResp
	17,  // 197: pbchannelserver.ChannelServer.SendChannelMedia:output_type -> pbchannelserver.ReplyChannelData
	17,  // 198: pbchannelserver.ChannelServer.ForwardMessageToChannel:output_type -> pbchannelserver.ReplyChannelData
	149, // 199: pbchannelserver.ChannelServer.GetHistory:output_type -> pbmessageserver.ReplyHistory
	17,  // 200: pbchannelserver.ChannelServer.SendChannelMessage:output_type -> pbchannelserver.ReplyChannelData
	17,  // 201: pbchannelserver.ChannelServer.CreateChannel:output_type -> pbchannelserver.ReplyChannelData
	17,  // 202: pbchannelserver.ChannelServer.InviteChannelMember:output_type -> pbchannelserver.ReplyChannelData
	17,  // 203: pbchannelserver.ChannelServer.KickFromChannel:output_type -> pbchannelserver.ReplyChannelData
	17,  // 204: pbchannelserver.ChannelServer.LeaveChannel:output_type -> pbchannelserver.ReplyChannelData
	17,  // 205: pbchannelserver.ChannelServer.EditChannelTitle:output_type -> pbchannelserver.ReplyChannelData
	17,  // 206: pbchannelserver.ChannelServer.EditChannelAdmin:output_type -> pbchannelserver.ReplyChannelData
	17,  // 207: pbchannelserver.ChannelServer.EditChannelPhoto:output_type -> pbchannelserver.ReplyChannelData
	17,  // 208: pbchannelserver.ChannelServer.EditChannelAbout:output_type -> pbchannelserver.ReplyChannelData
	17,  // 209: pbchannelserver.ChannelServer.DeleteChannelMsg:output_type -> pbchannelserver.ReplyChannelData
	17,  // 210: pbchannelserver.ChannelServer.DeleteChannelSelfHistory:output_type -> pbchannelserver.ReplyChannelData
	17,  // 211: pbchannelserver.ChannelServer.DeleteChannelHistory:output_type -> pbchannelserver.ReplyChannelData
	17,  // 212: pbchannelserver.ChannelServer.UpdatePinnedChannelMessage:output_type -> pbchannelserver.ReplyChannelData
	17,  // 213: pbchannelserver.ChannelServer.ReadChannelHistory:output_type -> pbchannelserver.ReplyChannelData
	17,  // 214: pbchannelserver.ChannelServer.GetChannelDifference:output_type -> pbchannelserver.ReplyChannelData
	17,  // 215: pbchannelserver.ChannelServer.GetChannelMessagesByMsgsId:output_type -> pbchannelserver.ReplyChannelData
	17,  // 216: pbchannelserver.ChannelServer.JoinChannel:output_type -> pbchannelserver.ReplyChannelData
	17,  // 217: pbchannelserver.ChannelServer.DeleteChannel:output_type -> pbchannelserver.ReplyChannelData
	150, // 218: pbchannelserver.ChannelServer.GetChannelsLastMsgsByUserId:output_type -> pbmessageserver.ReplyGetChannelsLastMsgsByUserId
	17,  // 219: pbchannelserver.ChannelServer.GetChannelAdminLog:output_type -> pbchannelserver.ReplyChannelData
	17,  // 220: pbchannelserver.ChannelServer.ImportChatInvite:output_type -> pbchannelserver.ReplyChannelData
	17,  // 221: pbchannelserver.ChannelServer.EditBanChannelUser:output_type -> pbchannelserver.ReplyChannelData
	17,  // 222: pbchannelserver.ChannelServer.GetFullChannel:output_type -> pbchannelserver.ReplyChannelData
	17,  // 223: pbchannelserver.ChannelServer.GetFullChannelV2:output_type -> pbchannelserver.ReplyChannelData
	17,  // 224: pbchannelserver.ChannelServer.GetParticipant:output_type -> pbchannelserver.ReplyChannelData
	17,  // 225: pbchannelserver.ChannelServer.GetParticipants:output_type -> pbchannelserver.ReplyChannelData
	17,  // 226: pbchannelserver.ChannelServer.ExportChannelLink:output_type -> pbchannelserver.ReplyChannelData
	17,  // 227: pbchannelserver.ChannelServer.ChannelToggleInvite:output_type -> pbchannelserver.ReplyChannelData
	17,  // 228: pbchannelserver.ChannelServer.GetChannels:output_type -> pbchannelserver.ReplyChannelData
	17,  // 229: pbchannelserver.ChannelServer.UpdateChannelUserName:output_type -> pbchannelserver.ReplyChannelData
	17,  // 230: pbchannelserver.ChannelServer.CheckChannelUserName:output_type -> pbchannelserver.ReplyChannelData
	17,  // 231: pbchannelserver.ChannelServer.EditEveryoneQuiet:output_type -> pbchannelserver.ReplyChannelData
	17,  // 232: pbchannelserver.ChannelServer.GetChannelMessageExportLink:output_type -> pbchannelserver.ReplyChannelData
	17,  // 233: pbchannelserver.ChannelServer.EditPrivateChat:output_type -> pbchannelserver.ReplyChannelData
	17,  // 234: pbchannelserver.ChannelServer.ChannelsReadMessageContents:output_type -> pbchannelserver.ReplyChannelData
	17,  // 235: pbchannelserver.ChannelServer.MigrateChat:output_type -> pbchannelserver.ReplyChannelData
	17,  // 236: pbchannelserver.ChannelServer.EditChannelMessage:output_type -> pbchannelserver.ReplyChannelData
	16,  // 237: pbchannelserver.ChannelServer.SearchChannelMessage:output_type -> pbchannelserver.SearchChannelMsgResp
	17,  // 238: pbchannelserver.ChannelServer.SearchChannelMediaMessage:output_type -> pbchannelserver.ReplyChannelData
	17,  // 239: pbchannelserver.ChannelServer.SendLogMsg:output_type -> pbchannelserver.ReplyChannelData
	89,  // 240: pbchannelserver.ChannelServer.RequestSendRpm:output_type -> pbchannelserver.ReplySendRpm
	93,  // 241: pbchannelserver.ChannelServer.RequestEditRpm:output_type -> pbchannelserver.ReplyEditRpm
	93,  // 242: pbchannelserver.ChannelServer.RequestEditRpmV2:output_type -> pbchannelserver.ReplyEditRpm
	93,  // 243: pbchannelserver.ChannelServer.RequestEditPayment:output_type -> pbchannelserver.ReplyEditRpm
	95,  // 244: pbchannelserver.ChannelServer.RequestRecvRpm:output_type -> pbchannelserver.ReplyRecvRpm
	8,   // 245: pbchannelserver.ChannelServer.GetChannelMembersCount:output_type -> pbchannelserver.ReplyGetChannelMembersCount
	17,  // 246: pbchannelserver.ChannelServer.IsChannelAdminOrCreator:output_type -> pbchannelserver.ReplyChannelData
	97,  // 247: pbchannelserver.ChannelServer.MessageReadMentions:output_type -> pbchannelserver.ReplyMessageReadMentions
	17,  // 248: pbchannelserver.ChannelServer.CreateSuperChat:output_type -> pbchannelserver.ReplyChannelData
	99,  // 249: pbchannelserver.ChannelServer.SendVote:output_type -> pbchannelserver.SendVoteReply
	101, // 250: pbchannelserver.ChannelServer.GetPollResults:output_type -> pbchannelserver.GetPollResultsReply
	104, // 251: pbchannelserver.ChannelServer.EditChatDefaultBannedRights:output_type -> pbchannelserver.EditChatDefaultBannedRightsRsp
	106, // 252: pbchannelserver.ChannelServer.HandleToggleSlowMode:output_type -> pbchannelserver.HandleToggleSlowModeRsp
	108, // 253: pbchannelserver.ChannelServer.HandleToggleSignatures:output_type -> pbchannelserver.HandleToggleSignaturesRsp
	110, // 254: pbchannelserver.ChannelServer.HandleToggleHistoryHidden:output_type -> pbchannelserver.ChannelToggleHistoryHiddenRsp
	112, // 255: pbchannelserver.ChannelServer.SetChannelBanMode:output_type -> pbchannelserver.SetChannelBanModeRsp
	115, // 256: pbchannelserver.ChannelServer.CHsGetUserOwnChannels:output_type -> pbchannelserver.CHsGetUserOwnChannelsRsp
	117, // 257: pbchannelserver.ChannelServer.RestrictChannel:output_type -> pbchannelserver.RestrictChannelRsp
	24,  // 258: pbchannelserver.ChannelServer.TransferGroupOwnerById:output_type -> pbchannelserver.TransferGroupOwnerByIdRsp
	137, // 259: pbchannelserver.ChannelServer.GetHotGroups:output_type -> pbchannelserver.GetHotGroupsRsp
	4,   // 260: pbchannelserver.ChannelServer.SetDiscussionGroup:output_type -> pbchannelserver.SetDiscussionGroupRsp
	2,   // 261: pbchannelserver.ChannelServer.GetGroupsForDiscussion:output_type -> pbchannelserver.GetGroupsForDiscussionRsp
	121, // 262: pbchannelserver.ChannelServer.GroupLiveStart:output_type -> pbchannelserver.LiveStartRsp
	123, // 263: pbchannelserver.ChannelServer.GroupLiveStop:output_type -> pbchannelserver.LiveStopRsp
	125, // 264: pbchannelserver.ChannelServer.GetLiveInviteUrl:output_type -> pbchannelserver.GetLiveInviteUrlRsp
	127, // 265: pbchannelserver.ChannelServer.EditLiveInfo:output_type -> pbchannelserver.EditLiveInfoRsp
	131, // 266: pbchannelserver.ChannelServer.GetLiveInviteCnt:output_type -> pbchannelserver.GetLiveInviteCntRsp
	129, // 267: pbchannelserver.ChannelServer.GroupLiveCheck:output_type -> pbchannelserver.GroupLiveCheckRsp
	133, // 268: pbchannelserver.ChannelServer.CheckUserInGroup:output_type -> pbchannelserver.CheckUserInGroupRsp
	135, // 269: pbchannelserver.ChannelServer.GetGroupUserIds:output_type -> pbchannelserver.GetGroupUserIdsRsp
	195, // [195:270] is the sub-list for method output_type
	120, // [120:195] is the sub-list for method input_type
	120, // [120:120] is the sub-list for extension type_name
	120, // [120:120] is the sub-list for extension extendee
	0,   // [0:120] is the sub-list for field type_name
}

func init() { file_pbchannelserver_proto_init() }
func file_pbchannelserver_proto_init() {
	if File_pbchannelserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pbchannelserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupsForDiscussionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupsForDiscussionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDiscussionGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDiscussionGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCreateSuperChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqIsChannelAdminOrCreator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMembersCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelMembersCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendLogMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqForwardMessageToChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqMigrateToChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyMigrateToChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSearchChannelMediaMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchChannelMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchChannelMsgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChannelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DialogAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditChannelLocationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditChannelLocationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferGroupOwnerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferGroupOwnerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferGroupOwnerByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferGroupOwnerByIdRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelReadoutbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChannelOrInsertDlgNotClearDraft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrInsertUserChanDlgNotClearDraft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSuperGroupMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrInsertUserChanDlg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChannelOrInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRecDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckOrInsertDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePeerDialogIncr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePeerDialogIncrCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannelDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannelDialogClearUnread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqChannelsReadMessageContents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditPrivateChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMessageExportLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditEveryoneQuiet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNewChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCreateChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqInviteChannelMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqJoinChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqKickFromChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLeaveChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditChannelTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditChannelAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditChannelPhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatInviteExported); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditChannelAbout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteChannelMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteChannelSelfHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteChannelHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdatePinnedChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqReadChannelHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateChannelReadOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUpdateChannelReadOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelDifference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelDifferenceEmpty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelDifferenceTooLong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMsgHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMessagesByMsgsId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelCommonDialogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelDialogAndMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelDialogAndMsgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelAdminLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelAdminLogEventFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqImportChatInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditBanChannelUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetFullChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetFullChannelV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMsgMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqExportChannelLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelBannedRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqChannelToggleInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateChannelUserName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCheckChannelUserName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqChangeGroupAndChannelCrator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendRpm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplySendRpm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditRpm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditRpmV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEditPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyEditRpm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqRecvRpm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyRecvRpm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqMessageReadMentions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyMessageReadMentions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendVoteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendVoteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPollResultsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPollResultsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatBannedRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditChatDefaultBannedRightsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditChatDefaultBannedRightsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleToggleSlowModeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleToggleSlowModeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleToggleSignaturesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleToggleSignaturesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelToggleHistoryHiddenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelToggleHistoryHiddenRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChannelBanModeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChannelBanModeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHsGetUserOwnChannelsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelBrief); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHsGetUserOwnChannelsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestrictChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestrictChannelRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinByQrCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinByQrCodeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveStartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveStartRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveStopReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveStopRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveInviteUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveInviteUrlRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditLiveInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditLiveInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupLiveCheckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupLiveCheckRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveInviteCntReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveInviteCntRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserInGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserInGroupRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupUserIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupUserIdsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHotGroupsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbchannelserver_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHotGroupsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbchannelserver_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   137,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pbchannelserver_proto_goTypes,
		DependencyIndexes: file_pbchannelserver_proto_depIdxs,
		EnumInfos:         file_pbchannelserver_proto_enumTypes,
		MessageInfos:      file_pbchannelserver_proto_msgTypes,
	}.Build()
	File_pbchannelserver_proto = out.File
	file_pbchannelserver_proto_rawDesc = nil
	file_pbchannelserver_proto_goTypes = nil
	file_pbchannelserver_proto_depIdxs = nil
}
