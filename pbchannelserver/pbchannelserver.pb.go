// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/pbchannelserver/pbchannelserver.proto

/*
Package pbchannelserver is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/pbchannelserver/pbchannelserver.proto

It has these top-level messages:

	GetGroupsForDiscussionReq
	GetGroupsForDiscussionRsp
	SetDiscussionGroupReq
	SetDiscussionGroupRsp
	ReqCreateSuperChat
	ReqIsChannelAdminOrCreator
	ReqGetChannelMembersCount
	ReplyGetChannelMembersCount
	ReqSendLogMsg
	ForwardMsg
	ReqForwardMessageToChannel
	ReqMigrateToChannel
	ReplyMigrateToChannel
	ReqSearchChannelMediaMessage
	SearchChannelMsgReq
	SearchChannelMsgResp
	ReplyChannelData
	DialogAction
	EditChannelLocationReq
	EditChannelLocationResp
	TransferGroupOwnerReq
	TransferGroupOwnerResp
	TransferGroupOwnerByIdReq
	TransferGroupOwnerByIdRsp
	UpdateChannelReadoutbox
	CheckChannelOrInsertDlgNotClearDraft
	UpdateOrInsertUserChanDlgNotClearDraft
	SetSuperGroupMsg
	UpdateOrInsertUserChanDlg
	CheckChannelOrInsert
	CheckRecDialog
	CheckOrInsertDialog
	DeleteUserDialog
	UpdatePeerDialogIncr
	UpdatePeerDialogIncrCounter
	CreateChannelDialog
	CreateChannelDialogClearUnread
	ReqChannelsReadMessageContents
	ReqEditPrivateChat
	ReqGetChannelMessageExportLink
	ReqEditEveryoneQuiet
	Channel
	UpdateNewChannelMessage
	ReqCreateChannel
	ReqInviteChannelMember
	ReqJoinChannel
	ReqKickFromChannel
	ReqLeaveChannel
	ReqEditChannelTitle
	ReqEditChannelAdmin
	ReqEditChannelPhoto
	ChatInviteExported
	ReqEditChannelAbout
	ReqDeleteChannelMsg
	ReqDeleteChannelSelfHistory
	ReqDeleteChannelHistory
	ReqUpdatePinnedChannelMessage
	ReqDeleteChannel
	ReqReadChannelHistory
	ReqUpdateChannelReadOut
	ReplyUpdateChannelReadOut
	ReqGetChannelDifference
	ReplyGetChannelDifferenceEmpty
	ReplyGetChannelDifferenceTooLong
	ReqGetChannelMsgHistory
	ReqGetParticipants
	ReqGetParticipant
	ReqGetChannelMessagesByMsgsId
	ReqGetChannelCommonDialogs
	ChannelDialog
	ChannelDialogAndMsg
	ChannelDialogAndMsgs
	UserMsg
	ReqGetChannelAdminLog
	ChannelAdminLogEventFilter
	ReqImportChatInvite
	ReqEditBanChannelUser
	ReqGetFullChannel
	ReqGetFullChannelV2
	ChatMsgMeta
	ReqExportChannelLink
	ChannelBannedRights
	ReqChannelToggleInvite
	ReqGetChannels
	ReqUpdateChannelUserName
	ReqCheckChannelUserName
	ReqChangeGroupAndChannelCrator
	ReqSendRpm
	ReplySendRpm
	ReqEditRpm
	ReqEditRpmV2
	ReqEditPayment
	ReplyEditRpm
	ReqRecvRpm
	ReplyRecvRpm
	ReqMessageReadMentions
	ReplyMessageReadMentions
	SendVoteReq
	SendVoteReply
	GetPollResultsReq
	GetPollResultsReply
	ChatBannedRights
	EditChatDefaultBannedRightsReq
	EditChatDefaultBannedRightsRsp
	HandleToggleSlowModeReq
	HandleToggleSlowModeRsp
	HandleToggleSignaturesReq
	HandleToggleSignaturesRsp
	ChannelToggleHistoryHiddenReq
	ChannelToggleHistoryHiddenRsp
	SetChannelBanModeReq
	SetChannelBanModeRsp
	CHsGetUserOwnChannelsReq
	ChannelBrief
	CHsGetUserOwnChannelsRsp
	RestrictChannelReq
	RestrictChannelRsp
	JoinByQrCodeReq
	JoinByQrCodeRsp
	LiveStartReq
	LiveStartRsp
	LiveStopReq
	LiveStopRsp
	GetLiveInviteUrlReq
	GetLiveInviteUrlRsp
	EditLiveInfoReq
	EditLiveInfoRsp
	GroupLiveCheckReq
	GroupLiveCheckRsp
	GetLiveInviteCntReq
	GetLiveInviteCntRsp
	CheckUserInGroupReq
	CheckUserInGroupRsp
	GetGroupUserIdsReq
	GetGroupUserIdsRsp
	GetHotGroupsReq
	GetHotGroupsRsp
*/
package pbchannelserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pbcomm "gitlab.chatserver.im/interfaceprobuf/pbcomm"
import messagedb "gitlab.chatserver.im/interfaceprobuf/pbmessagedb"
import pbmessageserver "gitlab.chatserver.im/interfaceprobuf/pbmessageserver"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GroupLiveReplyCode int32

const (
	GroupLiveReplyCode_Successfuly GroupLiveReplyCode = 0
	GroupLiveReplyCode_UserUnknown GroupLiveReplyCode = 90001
	GroupLiveReplyCode_ChanUnknown GroupLiveReplyCode = 90002
	GroupLiveReplyCode_LiveUnknown GroupLiveReplyCode = 90003
	GroupLiveReplyCode_LiveOnGoing GroupLiveReplyCode = 90004
	GroupLiveReplyCode_HaveNoPower GroupLiveReplyCode = 90005
	GroupLiveReplyCode_IllegalArgs GroupLiveReplyCode = 90006
	GroupLiveReplyCode_InternalErr GroupLiveReplyCode = 90007
)

var GroupLiveReplyCode_name = map[int32]string{
	0:     "Successfuly",
	90001: "UserUnknown",
	90002: "ChanUnknown",
	90003: "LiveUnknown",
	90004: "LiveOnGoing",
	90005: "HaveNoPower",
	90006: "IllegalArgs",
	90007: "InternalErr",
}
var GroupLiveReplyCode_value = map[string]int32{
	"Successfuly": 0,
	"UserUnknown": 90001,
	"ChanUnknown": 90002,
	"LiveUnknown": 90003,
	"LiveOnGoing": 90004,
	"HaveNoPower": 90005,
	"IllegalArgs": 90006,
	"InternalErr": 90007,
}

func (x GroupLiveReplyCode) String() string {
	return proto.EnumName(GroupLiveReplyCode_name, int32(x))
}
func (GroupLiveReplyCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{0}
}

// @ added by qingsong at 2020.10.20 for get groups for discussion.
type GetGroupsForDiscussionReq struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *GetGroupsForDiscussionReq) Reset()         { *m = GetGroupsForDiscussionReq{} }
func (m *GetGroupsForDiscussionReq) String() string { return proto.CompactTextString(m) }
func (*GetGroupsForDiscussionReq) ProtoMessage()    {}
func (*GetGroupsForDiscussionReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{0}
}

func (m *GetGroupsForDiscussionReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetGroupsForDiscussionReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type GetGroupsForDiscussionRsp struct {
	Error int32         `protobuf:"varint,1,opt,name=Error,proto3" json:"Error,omitempty"`
	Reply []byte        `protobuf:"bytes,2,opt,name=Reply,proto3" json:"Reply,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *GetGroupsForDiscussionRsp) Reset()         { *m = GetGroupsForDiscussionRsp{} }
func (m *GetGroupsForDiscussionRsp) String() string { return proto.CompactTextString(m) }
func (*GetGroupsForDiscussionRsp) ProtoMessage()    {}
func (*GetGroupsForDiscussionRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{1}
}

func (m *GetGroupsForDiscussionRsp) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *GetGroupsForDiscussionRsp) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *GetGroupsForDiscussionRsp) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// @ added by qingsong at 2020.10.20 for set discussion group.
type SetDiscussionGroupReq struct {
	Broadcast int32         `protobuf:"varint,1,opt,name=Broadcast,proto3" json:"Broadcast,omitempty"`
	Megagroup int32         `protobuf:"varint,2,opt,name=Megagroup,proto3" json:"Megagroup,omitempty"`
	FromId    int32         `protobuf:"varint,3,opt,name=FromId,proto3" json:"FromId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *SetDiscussionGroupReq) Reset()         { *m = SetDiscussionGroupReq{} }
func (m *SetDiscussionGroupReq) String() string { return proto.CompactTextString(m) }
func (*SetDiscussionGroupReq) ProtoMessage()    {}
func (*SetDiscussionGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{2}
}

func (m *SetDiscussionGroupReq) GetBroadcast() int32 {
	if m != nil {
		return m.Broadcast
	}
	return 0
}

func (m *SetDiscussionGroupReq) GetMegagroup() int32 {
	if m != nil {
		return m.Megagroup
	}
	return 0
}

func (m *SetDiscussionGroupReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *SetDiscussionGroupReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type SetDiscussionGroupRsp struct {
}

func (m *SetDiscussionGroupRsp) Reset()         { *m = SetDiscussionGroupRsp{} }
func (m *SetDiscussionGroupRsp) String() string { return proto.CompactTextString(m) }
func (*SetDiscussionGroupRsp) ProtoMessage()    {}
func (*SetDiscussionGroupRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{3}
}

// 创建超级群
type ReqCreateSuperChat struct {
	Reply     []byte        `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32         `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	Obj       []byte        `protobuf:"bytes,3,opt,name=Obj,proto3" json:"Obj,omitempty"`
	UserId    int32         `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId     int64         `protobuf:"varint,5,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqCreateSuperChat) Reset()         { *m = ReqCreateSuperChat{} }
func (m *ReqCreateSuperChat) String() string { return proto.CompactTextString(m) }
func (*ReqCreateSuperChat) ProtoMessage()    {}
func (*ReqCreateSuperChat) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{4}
}

func (m *ReqCreateSuperChat) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReqCreateSuperChat) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ReqCreateSuperChat) GetObj() []byte {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *ReqCreateSuperChat) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqCreateSuperChat) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReqCreateSuperChat) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqIsChannelAdminOrCreator struct {
	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId int64         `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqIsChannelAdminOrCreator) Reset()         { *m = ReqIsChannelAdminOrCreator{} }
func (m *ReqIsChannelAdminOrCreator) String() string { return proto.CompactTextString(m) }
func (*ReqIsChannelAdminOrCreator) ProtoMessage()    {}
func (*ReqIsChannelAdminOrCreator) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{5}
}

func (m *ReqIsChannelAdminOrCreator) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqIsChannelAdminOrCreator) GetChannelId() int64 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqIsChannelAdminOrCreator) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetChannelMembersCount struct {
	UserId    int32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId int32         `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetChannelMembersCount) Reset()         { *m = ReqGetChannelMembersCount{} }
func (m *ReqGetChannelMembersCount) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelMembersCount) ProtoMessage()    {}
func (*ReqGetChannelMembersCount) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{6}
}

func (m *ReqGetChannelMembersCount) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetChannelMembersCount) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelMembersCount) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelMembersCount struct {
	ChannelMembersCount int32 `protobuf:"varint,1,opt,name=ChannelMembersCount,proto3" json:"ChannelMembersCount,omitempty"`
	ErrorCode           int32 `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *ReplyGetChannelMembersCount) Reset()         { *m = ReplyGetChannelMembersCount{} }
func (m *ReplyGetChannelMembersCount) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelMembersCount) ProtoMessage()    {}
func (*ReplyGetChannelMembersCount) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{7}
}

func (m *ReplyGetChannelMembersCount) GetChannelMembersCount() int32 {
	if m != nil {
		return m.ChannelMembersCount
	}
	return 0
}

func (m *ReplyGetChannelMembersCount) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqSendLogMsg struct {
	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Author  string `protobuf:"bytes,2,opt,name=Author,proto3" json:"Author,omitempty"`
	Level   string `protobuf:"bytes,3,opt,name=Level,proto3" json:"Level,omitempty"`
}

func (m *ReqSendLogMsg) Reset()                    { *m = ReqSendLogMsg{} }
func (m *ReqSendLogMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqSendLogMsg) ProtoMessage()               {}
func (*ReqSendLogMsg) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{8} }

func (m *ReqSendLogMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReqSendLogMsg) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *ReqSendLogMsg) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

type ForwardMsg struct {
	Date        int32    `protobuf:"varint,1,opt,name=Date,proto3" json:"Date,omitempty"`
	Message     string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Media       int64    `protobuf:"varint,3,opt,name=Media,proto3" json:"Media,omitempty"`
	Meidadata   []byte   `protobuf:"bytes,4,opt,name=Meidadata,proto3" json:"Meidadata,omitempty"`
	ReplyMarkup []byte   `protobuf:"bytes,5,opt,name=Reply_markup,json=ReplyMarkup,proto3" json:"Reply_markup,omitempty"`
	Entities    [][]byte `protobuf:"bytes,6,rep,name=Entities" json:"Entities,omitempty"`
	Fromid      int32    `protobuf:"varint,7,opt,name=Fromid,proto3" json:"Fromid,omitempty"`
	Encry       int32    `protobuf:"varint,8,opt,name=Encry,proto3" json:"Encry,omitempty"`
	FwdFrom     []byte   `protobuf:"bytes,9,opt,name=FwdFrom,proto3" json:"FwdFrom,omitempty"`
	View        int32    `protobuf:"varint,10,opt,name=View,proto3" json:"View,omitempty"`
	Groupid     int64    `protobuf:"varint,11,opt,name=Groupid,proto3" json:"Groupid,omitempty"`
	ViaBotId    int32    `protobuf:"varint,12,opt,name=ViaBotId,proto3" json:"ViaBotId,omitempty"`
}

func (m *ForwardMsg) Reset()                    { *m = ForwardMsg{} }
func (m *ForwardMsg) String() string            { return proto.CompactTextString(m) }
func (*ForwardMsg) ProtoMessage()               {}
func (*ForwardMsg) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{9} }

func (m *ForwardMsg) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ForwardMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ForwardMsg) GetMedia() int64 {
	if m != nil {
		return m.Media
	}
	return 0
}

func (m *ForwardMsg) GetMeidadata() []byte {
	if m != nil {
		return m.Meidadata
	}
	return nil
}

func (m *ForwardMsg) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *ForwardMsg) GetEntities() [][]byte {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *ForwardMsg) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ForwardMsg) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *ForwardMsg) GetFwdFrom() []byte {
	if m != nil {
		return m.FwdFrom
	}
	return nil
}

func (m *ForwardMsg) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *ForwardMsg) GetGroupid() int64 {
	if m != nil {
		return m.Groupid
	}
	return 0
}

func (m *ForwardMsg) GetViaBotId() int32 {
	if m != nil {
		return m.ViaBotId
	}
	return 0
}

type ReqForwardMessageToChannel struct {
	Fromid      int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Flags       int32         `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Silent      bool          `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Background  bool          `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	WithMyScore bool          `protobuf:"varint,5,opt,name=with_my_score,json=withMyScore,proto3" json:"with_my_score,omitempty"`
	FromPeer    []byte        `protobuf:"bytes,6,opt,name=from_peer,json=fromPeer,proto3" json:"from_peer,omitempty"`
	Id          []int32       `protobuf:"varint,7,rep,packed,name=id" json:"id,omitempty"`
	RandomId    []int64       `protobuf:"varint,8,rep,packed,name=random_id,json=randomId" json:"random_id,omitempty"`
	ToPeer      []byte        `protobuf:"bytes,9,opt,name=to_peer,json=toPeer,proto3" json:"to_peer,omitempty"`
	FromKeyid   uint64        `protobuf:"varint,10,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	MsgList     []*ForwardMsg `protobuf:"bytes,11,rep,name=MsgList" json:"MsgList,omitempty"`
	Encry       int32         `protobuf:"varint,12,opt,name=encry,proto3" json:"encry,omitempty"`
	Userlist    []int32       `protobuf:"varint,13,rep,packed,name=userlist" json:"userlist,omitempty"`
	Chatlist    []int32       `protobuf:"varint,14,rep,packed,name=chatlist" json:"chatlist,omitempty"`
	Channellist []int32       `protobuf:"varint,15,rep,packed,name=channellist" json:"channellist,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,16,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqForwardMessageToChannel) Reset()         { *m = ReqForwardMessageToChannel{} }
func (m *ReqForwardMessageToChannel) String() string { return proto.CompactTextString(m) }
func (*ReqForwardMessageToChannel) ProtoMessage()    {}
func (*ReqForwardMessageToChannel) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{10}
}

func (m *ReqForwardMessageToChannel) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqForwardMessageToChannel) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqForwardMessageToChannel) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *ReqForwardMessageToChannel) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *ReqForwardMessageToChannel) GetWithMyScore() bool {
	if m != nil {
		return m.WithMyScore
	}
	return false
}

func (m *ReqForwardMessageToChannel) GetFromPeer() []byte {
	if m != nil {
		return m.FromPeer
	}
	return nil
}

func (m *ReqForwardMessageToChannel) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReqForwardMessageToChannel) GetRandomId() []int64 {
	if m != nil {
		return m.RandomId
	}
	return nil
}

func (m *ReqForwardMessageToChannel) GetToPeer() []byte {
	if m != nil {
		return m.ToPeer
	}
	return nil
}

func (m *ReqForwardMessageToChannel) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqForwardMessageToChannel) GetMsgList() []*ForwardMsg {
	if m != nil {
		return m.MsgList
	}
	return nil
}

func (m *ReqForwardMessageToChannel) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *ReqForwardMessageToChannel) GetUserlist() []int32 {
	if m != nil {
		return m.Userlist
	}
	return nil
}

func (m *ReqForwardMessageToChannel) GetChatlist() []int32 {
	if m != nil {
		return m.Chatlist
	}
	return nil
}

func (m *ReqForwardMessageToChannel) GetChannellist() []int32 {
	if m != nil {
		return m.Channellist
	}
	return nil
}

func (m *ReqForwardMessageToChannel) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqMigrateToChannel struct {
	Debug  *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	FromID int32         `protobuf:"varint,2,opt,name=FromID,proto3" json:"FromID,omitempty"`
	ChatID int32         `protobuf:"varint,3,opt,name=ChatID,proto3" json:"ChatID,omitempty"`
	MsgId  int32         `protobuf:"varint,4,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
}

func (m *ReqMigrateToChannel) Reset()         { *m = ReqMigrateToChannel{} }
func (m *ReqMigrateToChannel) String() string { return proto.CompactTextString(m) }
func (*ReqMigrateToChannel) ProtoMessage()    {}
func (*ReqMigrateToChannel) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{11}
}

func (m *ReqMigrateToChannel) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *ReqMigrateToChannel) GetFromID() int32 {
	if m != nil {
		return m.FromID
	}
	return 0
}

func (m *ReqMigrateToChannel) GetChatID() int32 {
	if m != nil {
		return m.ChatID
	}
	return 0
}

func (m *ReqMigrateToChannel) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type ReplyMigrateToChannel struct {
	ChannelMsgId int32  `protobuf:"varint,1,opt,name=ChannelMsgId,proto3" json:"ChannelMsgId,omitempty"`
	ChannelPts   int32  `protobuf:"varint,2,opt,name=ChannelPts,proto3" json:"ChannelPts,omitempty"`
	ChannelID    int32  `protobuf:"varint,3,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Title        string `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
}

func (m *ReplyMigrateToChannel) Reset()         { *m = ReplyMigrateToChannel{} }
func (m *ReplyMigrateToChannel) String() string { return proto.CompactTextString(m) }
func (*ReplyMigrateToChannel) ProtoMessage()    {}
func (*ReplyMigrateToChannel) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{12}
}

func (m *ReplyMigrateToChannel) GetChannelMsgId() int32 {
	if m != nil {
		return m.ChannelMsgId
	}
	return 0
}

func (m *ReplyMigrateToChannel) GetChannelPts() int32 {
	if m != nil {
		return m.ChannelPts
	}
	return 0
}

func (m *ReplyMigrateToChannel) GetChannelID() int32 {
	if m != nil {
		return m.ChannelID
	}
	return 0
}

func (m *ReplyMigrateToChannel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type ReqSearchChannelMediaMessage struct {
	ReqMessageSearch *pbmessageserver.ReqMessageSearch `protobuf:"bytes,1,opt,name=ReqMessageSearch" json:"ReqMessageSearch,omitempty"`
	SType            string                            `protobuf:"bytes,2,opt,name=SType,proto3" json:"SType,omitempty"`
	Withid           int32                             `protobuf:"varint,3,opt,name=withid,proto3" json:"withid,omitempty"`
	WithType         int32                             `protobuf:"varint,4,opt,name=withType,proto3" json:"withType,omitempty"`
	Encry            int32                             `protobuf:"varint,5,opt,name=encry,proto3" json:"encry,omitempty"`
}

func (m *ReqSearchChannelMediaMessage) Reset()         { *m = ReqSearchChannelMediaMessage{} }
func (m *ReqSearchChannelMediaMessage) String() string { return proto.CompactTextString(m) }
func (*ReqSearchChannelMediaMessage) ProtoMessage()    {}
func (*ReqSearchChannelMediaMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{13}
}

func (m *ReqSearchChannelMediaMessage) GetReqMessageSearch() *pbmessageserver.ReqMessageSearch {
	if m != nil {
		return m.ReqMessageSearch
	}
	return nil
}

func (m *ReqSearchChannelMediaMessage) GetSType() string {
	if m != nil {
		return m.SType
	}
	return ""
}

func (m *ReqSearchChannelMediaMessage) GetWithid() int32 {
	if m != nil {
		return m.Withid
	}
	return 0
}

func (m *ReqSearchChannelMediaMessage) GetWithType() int32 {
	if m != nil {
		return m.WithType
	}
	return 0
}

func (m *ReqSearchChannelMediaMessage) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

type SearchChannelMsgReq struct {
	UserID    int32   `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ChannelID int32   `protobuf:"varint,2,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	FromID    int32   `protobuf:"varint,3,opt,name=FromID,proto3" json:"FromID,omitempty"`
	Medias    []int32 `protobuf:"varint,4,rep,packed,name=Medias" json:"Medias,omitempty"`
	OffsetID  int32   `protobuf:"varint,5,opt,name=OffsetID,proto3" json:"OffsetID,omitempty"`
	AddOffset int32   `protobuf:"varint,6,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`
	Encry     int32   `protobuf:"varint,7,opt,name=Encry,proto3" json:"Encry,omitempty"`
	Limit     int32   `protobuf:"varint,8,opt,name=Limit,proto3" json:"Limit,omitempty"`
	MinDate   int32   `protobuf:"varint,9,opt,name=MinDate,proto3" json:"MinDate,omitempty"`
	MaxDate   int32   `protobuf:"varint,10,opt,name=MaxDate,proto3" json:"MaxDate,omitempty"`
	MinID     int32   `protobuf:"varint,11,opt,name=MinID,proto3" json:"MinID,omitempty"`
	MaxID     int32   `protobuf:"varint,12,opt,name=MaxID,proto3" json:"MaxID,omitempty"`
}

func (m *SearchChannelMsgReq) Reset()         { *m = SearchChannelMsgReq{} }
func (m *SearchChannelMsgReq) String() string { return proto.CompactTextString(m) }
func (*SearchChannelMsgReq) ProtoMessage()    {}
func (*SearchChannelMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{14}
}

func (m *SearchChannelMsgReq) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *SearchChannelMsgReq) GetChannelID() int32 {
	if m != nil {
		return m.ChannelID
	}
	return 0
}

func (m *SearchChannelMsgReq) GetFromID() int32 {
	if m != nil {
		return m.FromID
	}
	return 0
}

func (m *SearchChannelMsgReq) GetMedias() []int32 {
	if m != nil {
		return m.Medias
	}
	return nil
}

func (m *SearchChannelMsgReq) GetOffsetID() int32 {
	if m != nil {
		return m.OffsetID
	}
	return 0
}

func (m *SearchChannelMsgReq) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *SearchChannelMsgReq) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *SearchChannelMsgReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchChannelMsgReq) GetMinDate() int32 {
	if m != nil {
		return m.MinDate
	}
	return 0
}

func (m *SearchChannelMsgReq) GetMaxDate() int32 {
	if m != nil {
		return m.MaxDate
	}
	return 0
}

func (m *SearchChannelMsgReq) GetMinID() int32 {
	if m != nil {
		return m.MinID
	}
	return 0
}

func (m *SearchChannelMsgReq) GetMaxID() int32 {
	if m != nil {
		return m.MaxID
	}
	return 0
}

type SearchChannelMsgResp struct {
	Messages []*messagedb.UserMsg `protobuf:"bytes,1,rep,name=Messages" json:"Messages,omitempty"`
}

func (m *SearchChannelMsgResp) Reset()         { *m = SearchChannelMsgResp{} }
func (m *SearchChannelMsgResp) String() string { return proto.CompactTextString(m) }
func (*SearchChannelMsgResp) ProtoMessage()    {}
func (*SearchChannelMsgResp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{15}
}

func (m *SearchChannelMsgResp) GetMessages() []*messagedb.UserMsg {
	if m != nil {
		return m.Messages
	}
	return nil
}

type ReplyChannelData struct {
	Reply        []byte        `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode    int32         `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	DialogAction *DialogAction `protobuf:"bytes,3,opt,name=dialogAction" json:"dialogAction,omitempty"`
	ChannelId    int32         `protobuf:"varint,4,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	AccessHash   int64         `protobuf:"varint,5,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FromId       int32         `protobuf:"varint,6,opt,name=FromId,proto3" json:"FromId,omitempty"`
}

func (m *ReplyChannelData) Reset()         { *m = ReplyChannelData{} }
func (m *ReplyChannelData) String() string { return proto.CompactTextString(m) }
func (*ReplyChannelData) ProtoMessage()    {}
func (*ReplyChannelData) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{16}
}

func (m *ReplyChannelData) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyChannelData) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ReplyChannelData) GetDialogAction() *DialogAction {
	if m != nil {
		return m.DialogAction
	}
	return nil
}

func (m *ReplyChannelData) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReplyChannelData) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReplyChannelData) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

type DialogAction struct {
	CheckOrInsertDialog                    []*CheckOrInsertDialog                    `protobuf:"bytes,1,rep,name=CheckOrInsertDialog" json:"CheckOrInsertDialog,omitempty"`
	DeleteUserDialog                       []*DeleteUserDialog                       `protobuf:"bytes,2,rep,name=DeleteUserDialog" json:"DeleteUserDialog,omitempty"`
	UpdatePeerDialogIncr                   []*UpdatePeerDialogIncr                   `protobuf:"bytes,3,rep,name=UpdatePeerDialogIncr" json:"UpdatePeerDialogIncr,omitempty"`
	UpdatePeerDialogIncrCounter            []*UpdatePeerDialogIncrCounter            `protobuf:"bytes,4,rep,name=UpdatePeerDialogIncrCounter" json:"UpdatePeerDialogIncrCounter,omitempty"`
	CreateChannelDialog                    []*CreateChannelDialog                    `protobuf:"bytes,5,rep,name=CreateChannelDialog" json:"CreateChannelDialog,omitempty"`
	CheckRecDialog                         []*CheckRecDialog                         `protobuf:"bytes,6,rep,name=CheckRecDialog" json:"CheckRecDialog,omitempty"`
	UpdateOrInsertUserChanDlg              []*UpdateOrInsertUserChanDlg              `protobuf:"bytes,7,rep,name=UpdateOrInsertUserChanDlg" json:"UpdateOrInsertUserChanDlg,omitempty"`
	CheckChannelOrInsert                   []*CheckChannelOrInsert                   `protobuf:"bytes,8,rep,name=CheckChannelOrInsert" json:"CheckChannelOrInsert,omitempty"`
	SetSuperGroupMsg                       []*SetSuperGroupMsg                       `protobuf:"bytes,9,rep,name=SetSuperGroupMsg" json:"SetSuperGroupMsg,omitempty"`
	CheckChannelOrInsertDlgNotClearDraft   []*CheckChannelOrInsertDlgNotClearDraft   `protobuf:"bytes,10,rep,name=CheckChannelOrInsertDlgNotClearDraft" json:"CheckChannelOrInsertDlgNotClearDraft,omitempty"`
	UpdateOrInsertUserChanDlgNotClearDraft []*UpdateOrInsertUserChanDlgNotClearDraft `protobuf:"bytes,11,rep,name=UpdateOrInsertUserChanDlgNotClearDraft" json:"UpdateOrInsertUserChanDlgNotClearDraft,omitempty"`
	UpdateChannelReadoutbox                []*UpdateChannelReadoutbox                `protobuf:"bytes,12,rep,name=UpdateChannelReadoutbox" json:"UpdateChannelReadoutbox,omitempty"`
	CreateChannelDialogClearUnread         []*CreateChannelDialogClearUnread         `protobuf:"bytes,13,rep,name=CreateChannelDialogClearUnread" json:"CreateChannelDialogClearUnread,omitempty"`
}

func (m *DialogAction) Reset()                    { *m = DialogAction{} }
func (m *DialogAction) String() string            { return proto.CompactTextString(m) }
func (*DialogAction) ProtoMessage()               {}
func (*DialogAction) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{17} }

func (m *DialogAction) GetCheckOrInsertDialog() []*CheckOrInsertDialog {
	if m != nil {
		return m.CheckOrInsertDialog
	}
	return nil
}

func (m *DialogAction) GetDeleteUserDialog() []*DeleteUserDialog {
	if m != nil {
		return m.DeleteUserDialog
	}
	return nil
}

func (m *DialogAction) GetUpdatePeerDialogIncr() []*UpdatePeerDialogIncr {
	if m != nil {
		return m.UpdatePeerDialogIncr
	}
	return nil
}

func (m *DialogAction) GetUpdatePeerDialogIncrCounter() []*UpdatePeerDialogIncrCounter {
	if m != nil {
		return m.UpdatePeerDialogIncrCounter
	}
	return nil
}

func (m *DialogAction) GetCreateChannelDialog() []*CreateChannelDialog {
	if m != nil {
		return m.CreateChannelDialog
	}
	return nil
}

func (m *DialogAction) GetCheckRecDialog() []*CheckRecDialog {
	if m != nil {
		return m.CheckRecDialog
	}
	return nil
}

func (m *DialogAction) GetUpdateOrInsertUserChanDlg() []*UpdateOrInsertUserChanDlg {
	if m != nil {
		return m.UpdateOrInsertUserChanDlg
	}
	return nil
}

func (m *DialogAction) GetCheckChannelOrInsert() []*CheckChannelOrInsert {
	if m != nil {
		return m.CheckChannelOrInsert
	}
	return nil
}

func (m *DialogAction) GetSetSuperGroupMsg() []*SetSuperGroupMsg {
	if m != nil {
		return m.SetSuperGroupMsg
	}
	return nil
}

func (m *DialogAction) GetCheckChannelOrInsertDlgNotClearDraft() []*CheckChannelOrInsertDlgNotClearDraft {
	if m != nil {
		return m.CheckChannelOrInsertDlgNotClearDraft
	}
	return nil
}

func (m *DialogAction) GetUpdateOrInsertUserChanDlgNotClearDraft() []*UpdateOrInsertUserChanDlgNotClearDraft {
	if m != nil {
		return m.UpdateOrInsertUserChanDlgNotClearDraft
	}
	return nil
}

func (m *DialogAction) GetUpdateChannelReadoutbox() []*UpdateChannelReadoutbox {
	if m != nil {
		return m.UpdateChannelReadoutbox
	}
	return nil
}

func (m *DialogAction) GetCreateChannelDialogClearUnread() []*CreateChannelDialogClearUnread {
	if m != nil {
		return m.CreateChannelDialogClearUnread
	}
	return nil
}

// 编辑超级群/channel 地理位置
type EditChannelLocationReq struct {
	Debug     *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	KeyId     int64         `protobuf:"varint,3,opt,name=Key_id,json=KeyId,proto3" json:"Key_id,omitempty"`
	MessageId int64         `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	ReqBytes  []byte        `protobuf:"bytes,5,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`
}

func (m *EditChannelLocationReq) Reset()         { *m = EditChannelLocationReq{} }
func (m *EditChannelLocationReq) String() string { return proto.CompactTextString(m) }
func (*EditChannelLocationReq) ProtoMessage()    {}
func (*EditChannelLocationReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{18}
}

func (m *EditChannelLocationReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *EditChannelLocationReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *EditChannelLocationReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *EditChannelLocationReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *EditChannelLocationReq) GetReqBytes() []byte {
	if m != nil {
		return m.ReqBytes
	}
	return nil
}

// 编辑超级群/channel 地理位置
type EditChannelLocationResp struct {
	RespBytes []byte `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"`
}

func (m *EditChannelLocationResp) Reset()         { *m = EditChannelLocationResp{} }
func (m *EditChannelLocationResp) String() string { return proto.CompactTextString(m) }
func (*EditChannelLocationResp) ProtoMessage()    {}
func (*EditChannelLocationResp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{19}
}

func (m *EditChannelLocationResp) GetRespBytes() []byte {
	if m != nil {
		return m.RespBytes
	}
	return nil
}

// 转让群主请求
type TransferGroupOwnerReq struct {
	Debug     *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	KeyId     int64         `protobuf:"varint,3,opt,name=Key_id,json=KeyId,proto3" json:"Key_id,omitempty"`
	MessageId int64         `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	ReqBytes  []byte        `protobuf:"bytes,5,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`
}

func (m *TransferGroupOwnerReq) Reset()         { *m = TransferGroupOwnerReq{} }
func (m *TransferGroupOwnerReq) String() string { return proto.CompactTextString(m) }
func (*TransferGroupOwnerReq) ProtoMessage()    {}
func (*TransferGroupOwnerReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{20}
}

func (m *TransferGroupOwnerReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *TransferGroupOwnerReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TransferGroupOwnerReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *TransferGroupOwnerReq) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *TransferGroupOwnerReq) GetReqBytes() []byte {
	if m != nil {
		return m.ReqBytes
	}
	return nil
}

// 转让群主返回
type TransferGroupOwnerResp struct {
	RespBytes    []byte        `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"`
	DialogAction *DialogAction `protobuf:"bytes,2,opt,name=dialogAction" json:"dialogAction,omitempty"`
}

func (m *TransferGroupOwnerResp) Reset()         { *m = TransferGroupOwnerResp{} }
func (m *TransferGroupOwnerResp) String() string { return proto.CompactTextString(m) }
func (*TransferGroupOwnerResp) ProtoMessage()    {}
func (*TransferGroupOwnerResp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{21}
}

func (m *TransferGroupOwnerResp) GetRespBytes() []byte {
	if m != nil {
		return m.RespBytes
	}
	return nil
}

func (m *TransferGroupOwnerResp) GetDialogAction() *DialogAction {
	if m != nil {
		return m.DialogAction
	}
	return nil
}

// 转让群主请求
type TransferGroupOwnerByIdReq struct {
	Debugs *pbcomm.Debug `protobuf:"bytes,1,opt,name=Debugs" json:"Debugs,omitempty"`
	FromId int32         `protobuf:"varint,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	ChanId int32         `protobuf:"varint,3,opt,name=ChanId,proto3" json:"ChanId,omitempty"`
	DestId int32         `protobuf:"varint,4,opt,name=DestId,proto3" json:"DestId,omitempty"`
}

func (m *TransferGroupOwnerByIdReq) Reset()         { *m = TransferGroupOwnerByIdReq{} }
func (m *TransferGroupOwnerByIdReq) String() string { return proto.CompactTextString(m) }
func (*TransferGroupOwnerByIdReq) ProtoMessage()    {}
func (*TransferGroupOwnerByIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{22}
}

func (m *TransferGroupOwnerByIdReq) GetDebugs() *pbcomm.Debug {
	if m != nil {
		return m.Debugs
	}
	return nil
}

func (m *TransferGroupOwnerByIdReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *TransferGroupOwnerByIdReq) GetChanId() int32 {
	if m != nil {
		return m.ChanId
	}
	return 0
}

func (m *TransferGroupOwnerByIdReq) GetDestId() int32 {
	if m != nil {
		return m.DestId
	}
	return 0
}

// 转让群主返回
type TransferGroupOwnerByIdRsp struct {
	ReplyCode int32  `protobuf:"varint,1,opt,name=Reply_code,json=ReplyCode,proto3" json:"Reply_code,omitempty"`
	ReplyInfo string `protobuf:"bytes,2,opt,name=Reply_info,json=ReplyInfo,proto3" json:"Reply_info,omitempty"`
}

func (m *TransferGroupOwnerByIdRsp) Reset()         { *m = TransferGroupOwnerByIdRsp{} }
func (m *TransferGroupOwnerByIdRsp) String() string { return proto.CompactTextString(m) }
func (*TransferGroupOwnerByIdRsp) ProtoMessage()    {}
func (*TransferGroupOwnerByIdRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{23}
}

func (m *TransferGroupOwnerByIdRsp) GetReplyCode() int32 {
	if m != nil {
		return m.ReplyCode
	}
	return 0
}

func (m *TransferGroupOwnerByIdRsp) GetReplyInfo() string {
	if m != nil {
		return m.ReplyInfo
	}
	return ""
}

type UpdateChannelReadoutbox struct {
	Debug      *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	ReadOutMax int32         `protobuf:"varint,3,opt,name=readOutMax,proto3" json:"readOutMax,omitempty"`
	ChannelId  int32         `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
}

func (m *UpdateChannelReadoutbox) Reset()         { *m = UpdateChannelReadoutbox{} }
func (m *UpdateChannelReadoutbox) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelReadoutbox) ProtoMessage()    {}
func (*UpdateChannelReadoutbox) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{24}
}

func (m *UpdateChannelReadoutbox) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *UpdateChannelReadoutbox) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateChannelReadoutbox) GetReadOutMax() int32 {
	if m != nil {
		return m.ReadOutMax
	}
	return 0
}

func (m *UpdateChannelReadoutbox) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

type CheckChannelOrInsertDlgNotClearDraft struct {
	Debug      *pbcomm.Debug      `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	Selfid     int32              `protobuf:"varint,2,opt,name=Selfid,proto3" json:"Selfid,omitempty"`
	Withid     int32              `protobuf:"varint,3,opt,name=Withid,proto3" json:"Withid,omitempty"`
	Type       int32              `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Msg        *messagedb.UserMsg `protobuf:"bytes,5,opt,name=msg" json:"msg,omitempty"`
	HandleType string             `protobuf:"bytes,6,opt,name=handleType,proto3" json:"handleType,omitempty"`
}

func (m *CheckChannelOrInsertDlgNotClearDraft) Reset()         { *m = CheckChannelOrInsertDlgNotClearDraft{} }
func (m *CheckChannelOrInsertDlgNotClearDraft) String() string { return proto.CompactTextString(m) }
func (*CheckChannelOrInsertDlgNotClearDraft) ProtoMessage()    {}
func (*CheckChannelOrInsertDlgNotClearDraft) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{25}
}

func (m *CheckChannelOrInsertDlgNotClearDraft) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *CheckChannelOrInsertDlgNotClearDraft) GetSelfid() int32 {
	if m != nil {
		return m.Selfid
	}
	return 0
}

func (m *CheckChannelOrInsertDlgNotClearDraft) GetWithid() int32 {
	if m != nil {
		return m.Withid
	}
	return 0
}

func (m *CheckChannelOrInsertDlgNotClearDraft) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CheckChannelOrInsertDlgNotClearDraft) GetMsg() *messagedb.UserMsg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *CheckChannelOrInsertDlgNotClearDraft) GetHandleType() string {
	if m != nil {
		return m.HandleType
	}
	return ""
}

type UpdateOrInsertUserChanDlgNotClearDraft struct {
	Debug      *pbcomm.Debug      `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	Selfid     int32              `protobuf:"varint,2,opt,name=Selfid,proto3" json:"Selfid,omitempty"`
	Withid     int32              `protobuf:"varint,3,opt,name=Withid,proto3" json:"Withid,omitempty"`
	Type       int32              `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Msg        *messagedb.UserMsg `protobuf:"bytes,5,opt,name=msg" json:"msg,omitempty"`
	HandleType string             `protobuf:"bytes,6,opt,name=handleType,proto3" json:"handleType,omitempty"`
}

func (m *UpdateOrInsertUserChanDlgNotClearDraft) Reset() {
	*m = UpdateOrInsertUserChanDlgNotClearDraft{}
}
func (m *UpdateOrInsertUserChanDlgNotClearDraft) String() string { return proto.CompactTextString(m) }
func (*UpdateOrInsertUserChanDlgNotClearDraft) ProtoMessage()    {}
func (*UpdateOrInsertUserChanDlgNotClearDraft) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{26}
}

func (m *UpdateOrInsertUserChanDlgNotClearDraft) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *UpdateOrInsertUserChanDlgNotClearDraft) GetSelfid() int32 {
	if m != nil {
		return m.Selfid
	}
	return 0
}

func (m *UpdateOrInsertUserChanDlgNotClearDraft) GetWithid() int32 {
	if m != nil {
		return m.Withid
	}
	return 0
}

func (m *UpdateOrInsertUserChanDlgNotClearDraft) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *UpdateOrInsertUserChanDlgNotClearDraft) GetMsg() *messagedb.UserMsg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *UpdateOrInsertUserChanDlgNotClearDraft) GetHandleType() string {
	if m != nil {
		return m.HandleType
	}
	return ""
}

type SetSuperGroupMsg struct {
	Debug     *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	Userid    int32         `protobuf:"varint,2,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Channelid int32         `protobuf:"varint,3,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Date      int64         `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	Msgbin    []byte        `protobuf:"bytes,5,opt,name=msgbin,proto3" json:"msgbin,omitempty"`
}

func (m *SetSuperGroupMsg) Reset()         { *m = SetSuperGroupMsg{} }
func (m *SetSuperGroupMsg) String() string { return proto.CompactTextString(m) }
func (*SetSuperGroupMsg) ProtoMessage()    {}
func (*SetSuperGroupMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{27}
}

func (m *SetSuperGroupMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *SetSuperGroupMsg) GetUserid() int32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *SetSuperGroupMsg) GetChannelid() int32 {
	if m != nil {
		return m.Channelid
	}
	return 0
}

func (m *SetSuperGroupMsg) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *SetSuperGroupMsg) GetMsgbin() []byte {
	if m != nil {
		return m.Msgbin
	}
	return nil
}

type UpdateOrInsertUserChanDlg struct {
	Debug      *pbcomm.Debug      `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	Selfid     int32              `protobuf:"varint,2,opt,name=Selfid,proto3" json:"Selfid,omitempty"`
	Withid     int32              `protobuf:"varint,3,opt,name=Withid,proto3" json:"Withid,omitempty"`
	Type       int32              `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Msg        *messagedb.UserMsg `protobuf:"bytes,5,opt,name=msg" json:"msg,omitempty"`
	HandleType string             `protobuf:"bytes,6,opt,name=handleType,proto3" json:"handleType,omitempty"`
}

func (m *UpdateOrInsertUserChanDlg) Reset()         { *m = UpdateOrInsertUserChanDlg{} }
func (m *UpdateOrInsertUserChanDlg) String() string { return proto.CompactTextString(m) }
func (*UpdateOrInsertUserChanDlg) ProtoMessage()    {}
func (*UpdateOrInsertUserChanDlg) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{28}
}

func (m *UpdateOrInsertUserChanDlg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *UpdateOrInsertUserChanDlg) GetSelfid() int32 {
	if m != nil {
		return m.Selfid
	}
	return 0
}

func (m *UpdateOrInsertUserChanDlg) GetWithid() int32 {
	if m != nil {
		return m.Withid
	}
	return 0
}

func (m *UpdateOrInsertUserChanDlg) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *UpdateOrInsertUserChanDlg) GetMsg() *messagedb.UserMsg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *UpdateOrInsertUserChanDlg) GetHandleType() string {
	if m != nil {
		return m.HandleType
	}
	return ""
}

type CheckChannelOrInsert struct {
	Debug      *pbcomm.Debug      `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	Selfid     int32              `protobuf:"varint,2,opt,name=Selfid,proto3" json:"Selfid,omitempty"`
	Withid     int32              `protobuf:"varint,3,opt,name=Withid,proto3" json:"Withid,omitempty"`
	Type       int32              `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Msg        *messagedb.UserMsg `protobuf:"bytes,5,opt,name=msg" json:"msg,omitempty"`
	HandleType string             `protobuf:"bytes,6,opt,name=handleType,proto3" json:"handleType,omitempty"`
}

func (m *CheckChannelOrInsert) Reset()         { *m = CheckChannelOrInsert{} }
func (m *CheckChannelOrInsert) String() string { return proto.CompactTextString(m) }
func (*CheckChannelOrInsert) ProtoMessage()    {}
func (*CheckChannelOrInsert) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{29}
}

func (m *CheckChannelOrInsert) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *CheckChannelOrInsert) GetSelfid() int32 {
	if m != nil {
		return m.Selfid
	}
	return 0
}

func (m *CheckChannelOrInsert) GetWithid() int32 {
	if m != nil {
		return m.Withid
	}
	return 0
}

func (m *CheckChannelOrInsert) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CheckChannelOrInsert) GetMsg() *messagedb.UserMsg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *CheckChannelOrInsert) GetHandleType() string {
	if m != nil {
		return m.HandleType
	}
	return ""
}

type CheckRecDialog struct {
	Debug     *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Channelid int32         `protobuf:"varint,3,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Msgid     int32         `protobuf:"varint,4,opt,name=msgid,proto3" json:"msgid,omitempty"`
	Readin    int32         `protobuf:"varint,5,opt,name=readin,proto3" json:"readin,omitempty"`
	Pts       int32         `protobuf:"varint,6,opt,name=pts,proto3" json:"pts,omitempty"`
}

func (m *CheckRecDialog) Reset()                    { *m = CheckRecDialog{} }
func (m *CheckRecDialog) String() string            { return proto.CompactTextString(m) }
func (*CheckRecDialog) ProtoMessage()               {}
func (*CheckRecDialog) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{30} }

func (m *CheckRecDialog) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *CheckRecDialog) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckRecDialog) GetChannelid() int32 {
	if m != nil {
		return m.Channelid
	}
	return 0
}

func (m *CheckRecDialog) GetMsgid() int32 {
	if m != nil {
		return m.Msgid
	}
	return 0
}

func (m *CheckRecDialog) GetReadin() int32 {
	if m != nil {
		return m.Readin
	}
	return 0
}

func (m *CheckRecDialog) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

type CheckOrInsertDialog struct {
	Debug      *pbcomm.Debug      `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	Selfid     int32              `protobuf:"varint,2,opt,name=Selfid,proto3" json:"Selfid,omitempty"`
	Withid     int32              `protobuf:"varint,3,opt,name=Withid,proto3" json:"Withid,omitempty"`
	Type       int32              `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Msg        *messagedb.UserMsg `protobuf:"bytes,5,opt,name=msg" json:"msg,omitempty"`
	HandleType string             `protobuf:"bytes,6,opt,name=handleType,proto3" json:"handleType,omitempty"`
}

func (m *CheckOrInsertDialog) Reset()         { *m = CheckOrInsertDialog{} }
func (m *CheckOrInsertDialog) String() string { return proto.CompactTextString(m) }
func (*CheckOrInsertDialog) ProtoMessage()    {}
func (*CheckOrInsertDialog) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{31}
}

func (m *CheckOrInsertDialog) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *CheckOrInsertDialog) GetSelfid() int32 {
	if m != nil {
		return m.Selfid
	}
	return 0
}

func (m *CheckOrInsertDialog) GetWithid() int32 {
	if m != nil {
		return m.Withid
	}
	return 0
}

func (m *CheckOrInsertDialog) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CheckOrInsertDialog) GetMsg() *messagedb.UserMsg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *CheckOrInsertDialog) GetHandleType() string {
	if m != nil {
		return m.HandleType
	}
	return ""
}

type DeleteUserDialog struct {
	Debug  *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	Selfid int32         `protobuf:"varint,2,opt,name=Selfid,proto3" json:"Selfid,omitempty"`
	Withid int32         `protobuf:"varint,3,opt,name=Withid,proto3" json:"Withid,omitempty"`
	Peer   int32         `protobuf:"varint,4,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *DeleteUserDialog) Reset()         { *m = DeleteUserDialog{} }
func (m *DeleteUserDialog) String() string { return proto.CompactTextString(m) }
func (*DeleteUserDialog) ProtoMessage()    {}
func (*DeleteUserDialog) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{32}
}

func (m *DeleteUserDialog) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *DeleteUserDialog) GetSelfid() int32 {
	if m != nil {
		return m.Selfid
	}
	return 0
}

func (m *DeleteUserDialog) GetWithid() int32 {
	if m != nil {
		return m.Withid
	}
	return 0
}

func (m *DeleteUserDialog) GetPeer() int32 {
	if m != nil {
		return m.Peer
	}
	return 0
}

type UpdatePeerDialogIncr struct {
	Debug                 *pbcomm.Debug                    `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	UpdateUserDialogParam *messagedb.UpdateUserDialogParam `protobuf:"bytes,2,opt,name=UpdateUserDialogParam" json:"UpdateUserDialogParam,omitempty"`
}

func (m *UpdatePeerDialogIncr) Reset()         { *m = UpdatePeerDialogIncr{} }
func (m *UpdatePeerDialogIncr) String() string { return proto.CompactTextString(m) }
func (*UpdatePeerDialogIncr) ProtoMessage()    {}
func (*UpdatePeerDialogIncr) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{33}
}

func (m *UpdatePeerDialogIncr) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *UpdatePeerDialogIncr) GetUpdateUserDialogParam() *messagedb.UpdateUserDialogParam {
	if m != nil {
		return m.UpdateUserDialogParam
	}
	return nil
}

type UpdatePeerDialogIncrCounter struct {
	Debug                 *pbcomm.Debug                    `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	UpdateUserDialogParam *messagedb.UpdateUserDialogParam `protobuf:"bytes,2,opt,name=UpdateUserDialogParam" json:"UpdateUserDialogParam,omitempty"`
}

func (m *UpdatePeerDialogIncrCounter) Reset()         { *m = UpdatePeerDialogIncrCounter{} }
func (m *UpdatePeerDialogIncrCounter) String() string { return proto.CompactTextString(m) }
func (*UpdatePeerDialogIncrCounter) ProtoMessage()    {}
func (*UpdatePeerDialogIncrCounter) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{34}
}

func (m *UpdatePeerDialogIncrCounter) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *UpdatePeerDialogIncrCounter) GetUpdateUserDialogParam() *messagedb.UpdateUserDialogParam {
	if m != nil {
		return m.UpdateUserDialogParam
	}
	return nil
}

type CreateChannelDialog struct {
	Debug     *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Channelid int32         `protobuf:"varint,3,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Msgid     int32         `protobuf:"varint,4,opt,name=msgid,proto3" json:"msgid,omitempty"`
	Readin    int32         `protobuf:"varint,5,opt,name=readin,proto3" json:"readin,omitempty"`
	Pts       int32         `protobuf:"varint,6,opt,name=pts,proto3" json:"pts,omitempty"`
	Pinned    bool          `protobuf:"varint,7,opt,name=pinned,proto3" json:"pinned,omitempty"`
}

func (m *CreateChannelDialog) Reset()         { *m = CreateChannelDialog{} }
func (m *CreateChannelDialog) String() string { return proto.CompactTextString(m) }
func (*CreateChannelDialog) ProtoMessage()    {}
func (*CreateChannelDialog) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{35}
}

func (m *CreateChannelDialog) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *CreateChannelDialog) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateChannelDialog) GetChannelid() int32 {
	if m != nil {
		return m.Channelid
	}
	return 0
}

func (m *CreateChannelDialog) GetMsgid() int32 {
	if m != nil {
		return m.Msgid
	}
	return 0
}

func (m *CreateChannelDialog) GetReadin() int32 {
	if m != nil {
		return m.Readin
	}
	return 0
}

func (m *CreateChannelDialog) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *CreateChannelDialog) GetPinned() bool {
	if m != nil {
		return m.Pinned
	}
	return false
}

type CreateChannelDialogClearUnread struct {
	Debug     *pbcomm.Debug `protobuf:"bytes,1,opt,name=debug" json:"debug,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Channelid int32         `protobuf:"varint,3,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Msgid     int32         `protobuf:"varint,4,opt,name=msgid,proto3" json:"msgid,omitempty"`
	Readin    int32         `protobuf:"varint,5,opt,name=readin,proto3" json:"readin,omitempty"`
	Pts       int32         `protobuf:"varint,6,opt,name=pts,proto3" json:"pts,omitempty"`
	Pinned    bool          `protobuf:"varint,7,opt,name=pinned,proto3" json:"pinned,omitempty"`
}

func (m *CreateChannelDialogClearUnread) Reset()         { *m = CreateChannelDialogClearUnread{} }
func (m *CreateChannelDialogClearUnread) String() string { return proto.CompactTextString(m) }
func (*CreateChannelDialogClearUnread) ProtoMessage()    {}
func (*CreateChannelDialogClearUnread) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{36}
}

func (m *CreateChannelDialogClearUnread) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *CreateChannelDialogClearUnread) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateChannelDialogClearUnread) GetChannelid() int32 {
	if m != nil {
		return m.Channelid
	}
	return 0
}

func (m *CreateChannelDialogClearUnread) GetMsgid() int32 {
	if m != nil {
		return m.Msgid
	}
	return 0
}

func (m *CreateChannelDialogClearUnread) GetReadin() int32 {
	if m != nil {
		return m.Readin
	}
	return 0
}

func (m *CreateChannelDialogClearUnread) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *CreateChannelDialogClearUnread) GetPinned() bool {
	if m != nil {
		return m.Pinned
	}
	return false
}

type ReqChannelsReadMessageContents struct {
	Keyid  uint64        `protobuf:"varint,1,opt,name=keyid,proto3" json:"keyid,omitempty"`
	UserId int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Result []byte        `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqChannelsReadMessageContents) Reset()         { *m = ReqChannelsReadMessageContents{} }
func (m *ReqChannelsReadMessageContents) String() string { return proto.CompactTextString(m) }
func (*ReqChannelsReadMessageContents) ProtoMessage()    {}
func (*ReqChannelsReadMessageContents) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{37}
}

func (m *ReqChannelsReadMessageContents) GetKeyid() uint64 {
	if m != nil {
		return m.Keyid
	}
	return 0
}

func (m *ReqChannelsReadMessageContents) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqChannelsReadMessageContents) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReqChannelsReadMessageContents) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// message ReplyChannelsReadMessageContents {
// int32 error = 1; //1: 无法获取 2: 数据过去超时 3: 崩溃 4: 发起id为0
// }
type ReqEditPrivateChat struct {
	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChannelId int32         `protobuf:"varint,2,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Ok        bool          `protobuf:"varint,3,opt,name=ok,proto3" json:"ok,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditPrivateChat) Reset()         { *m = ReqEditPrivateChat{} }
func (m *ReqEditPrivateChat) String() string { return proto.CompactTextString(m) }
func (*ReqEditPrivateChat) ProtoMessage()    {}
func (*ReqEditPrivateChat) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{38}
}

func (m *ReqEditPrivateChat) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqEditPrivateChat) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditPrivateChat) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ReqEditPrivateChat) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// message ReplyEditPrivateChat {
// bytes result = 1;
// int32 error = 2; //1: 无法获取 2: 数据过去超时 3: 崩溃 4: 发起id为0
// }
type ReqGetChannelMessageExportLink struct {
	Result []byte        `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetChannelMessageExportLink) Reset()         { *m = ReqGetChannelMessageExportLink{} }
func (m *ReqGetChannelMessageExportLink) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelMessageExportLink) ProtoMessage()    {}
func (*ReqGetChannelMessageExportLink) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{39}
}

func (m *ReqGetChannelMessageExportLink) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReqGetChannelMessageExportLink) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqEditEveryoneQuiet struct {
	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChannelId int32         `protobuf:"varint,2,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Quiet     bool          `protobuf:"varint,3,opt,name=quiet,proto3" json:"quiet,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditEveryoneQuiet) Reset()         { *m = ReqEditEveryoneQuiet{} }
func (m *ReqEditEveryoneQuiet) String() string { return proto.CompactTextString(m) }
func (*ReqEditEveryoneQuiet) ProtoMessage()    {}
func (*ReqEditEveryoneQuiet) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{40}
}

func (m *ReqEditEveryoneQuiet) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqEditEveryoneQuiet) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditEveryoneQuiet) GetQuiet() bool {
	if m != nil {
		return m.Quiet
	}
	return false
}

func (m *ReqEditEveryoneQuiet) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type Channel struct {
	Flags             int32  `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Creator           bool   `protobuf:"varint,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Kicked            bool   `protobuf:"varint,3,opt,name=kicked,proto3" json:"kicked,omitempty"`
	Left              bool   `protobuf:"varint,4,opt,name=left,proto3" json:"left,omitempty"`
	Editor            bool   `protobuf:"varint,5,opt,name=editor,proto3" json:"editor,omitempty"`
	Moderator         bool   `protobuf:"varint,6,opt,name=moderator,proto3" json:"moderator,omitempty"`
	Broadcast         bool   `protobuf:"varint,7,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Verified          bool   `protobuf:"varint,8,opt,name=verified,proto3" json:"verified,omitempty"`
	Megagroup         bool   `protobuf:"varint,9,opt,name=megagroup,proto3" json:"megagroup,omitempty"`
	Restricted        bool   `protobuf:"varint,10,opt,name=restricted,proto3" json:"restricted,omitempty"`
	Democracy         bool   `protobuf:"varint,11,opt,name=democracy,proto3" json:"democracy,omitempty"`
	Signatures        bool   `protobuf:"varint,12,opt,name=signatures,proto3" json:"signatures,omitempty"`
	Min               bool   `protobuf:"varint,13,opt,name=min,proto3" json:"min,omitempty"`
	Id                int32  `protobuf:"varint,14,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash        int64  `protobuf:"varint,15,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Title             string `protobuf:"bytes,16,opt,name=title,proto3" json:"title,omitempty"`
	Username          string `protobuf:"bytes,17,opt,name=username,proto3" json:"username,omitempty"`
	Photo             int32  `protobuf:"varint,18,opt,name=photo,proto3" json:"photo,omitempty"`
	Date              int32  `protobuf:"varint,19,opt,name=date,proto3" json:"date,omitempty"`
	Version           int32  `protobuf:"varint,20,opt,name=version,proto3" json:"version,omitempty"`
	RestrictionReason bool   `protobuf:"varint,21,opt,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty"`
}

func (m *Channel) Reset()                    { *m = Channel{} }
func (m *Channel) String() string            { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()               {}
func (*Channel) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{41} }

func (m *Channel) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Channel) GetCreator() bool {
	if m != nil {
		return m.Creator
	}
	return false
}

func (m *Channel) GetKicked() bool {
	if m != nil {
		return m.Kicked
	}
	return false
}

func (m *Channel) GetLeft() bool {
	if m != nil {
		return m.Left
	}
	return false
}

func (m *Channel) GetEditor() bool {
	if m != nil {
		return m.Editor
	}
	return false
}

func (m *Channel) GetModerator() bool {
	if m != nil {
		return m.Moderator
	}
	return false
}

func (m *Channel) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

func (m *Channel) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *Channel) GetMegagroup() bool {
	if m != nil {
		return m.Megagroup
	}
	return false
}

func (m *Channel) GetRestricted() bool {
	if m != nil {
		return m.Restricted
	}
	return false
}

func (m *Channel) GetDemocracy() bool {
	if m != nil {
		return m.Democracy
	}
	return false
}

func (m *Channel) GetSignatures() bool {
	if m != nil {
		return m.Signatures
	}
	return false
}

func (m *Channel) GetMin() bool {
	if m != nil {
		return m.Min
	}
	return false
}

func (m *Channel) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Channel) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *Channel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Channel) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Channel) GetPhoto() int32 {
	if m != nil {
		return m.Photo
	}
	return 0
}

func (m *Channel) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *Channel) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Channel) GetRestrictionReason() bool {
	if m != nil {
		return m.RestrictionReason
	}
	return false
}

type UpdateNewChannelMessage struct {
	Flags        int32  `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Out          bool   `protobuf:"varint,2,opt,name=out,proto3" json:"out,omitempty"`
	Mentioned    bool   `protobuf:"varint,3,opt,name=mentioned,proto3" json:"mentioned,omitempty"`
	MediaUnread  bool   `protobuf:"varint,4,opt,name=media_unread,json=mediaUnread,proto3" json:"media_unread,omitempty"`
	Silent       bool   `protobuf:"varint,5,opt,name=silent,proto3" json:"silent,omitempty"`
	Post         bool   `protobuf:"varint,6,opt,name=post,proto3" json:"post,omitempty"`
	Id           int32  `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	FromId       int32  `protobuf:"varint,8,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ToId         int32  `protobuf:"varint,9,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`
	ReplyToMsgId bool   `protobuf:"varint,10,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Date         int32  `protobuf:"varint,11,opt,name=date,proto3" json:"date,omitempty"`
	Action       []byte `protobuf:"bytes,12,opt,name=action,proto3" json:"action,omitempty"`
	Pts          int32  `protobuf:"varint,13,opt,name=pts,proto3" json:"pts,omitempty"`
	PtsCount     int32  `protobuf:"varint,14,opt,name=pts_count,json=ptsCount,proto3" json:"pts_count,omitempty"`
}

func (m *UpdateNewChannelMessage) Reset()         { *m = UpdateNewChannelMessage{} }
func (m *UpdateNewChannelMessage) String() string { return proto.CompactTextString(m) }
func (*UpdateNewChannelMessage) ProtoMessage()    {}
func (*UpdateNewChannelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{42}
}

func (m *UpdateNewChannelMessage) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *UpdateNewChannelMessage) GetOut() bool {
	if m != nil {
		return m.Out
	}
	return false
}

func (m *UpdateNewChannelMessage) GetMentioned() bool {
	if m != nil {
		return m.Mentioned
	}
	return false
}

func (m *UpdateNewChannelMessage) GetMediaUnread() bool {
	if m != nil {
		return m.MediaUnread
	}
	return false
}

func (m *UpdateNewChannelMessage) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *UpdateNewChannelMessage) GetPost() bool {
	if m != nil {
		return m.Post
	}
	return false
}

func (m *UpdateNewChannelMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateNewChannelMessage) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *UpdateNewChannelMessage) GetToId() int32 {
	if m != nil {
		return m.ToId
	}
	return 0
}

func (m *UpdateNewChannelMessage) GetReplyToMsgId() bool {
	if m != nil {
		return m.ReplyToMsgId
	}
	return false
}

func (m *UpdateNewChannelMessage) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UpdateNewChannelMessage) GetAction() []byte {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *UpdateNewChannelMessage) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *UpdateNewChannelMessage) GetPtsCount() int32 {
	if m != nil {
		return m.PtsCount
	}
	return 0
}

// 创建channel
// channels.createChannel#f4893d7f flags:# broadcast:flags.0?true megagroup:flags.1?true title:string about:string = Updates;
type ReqCreateChannel struct {
	ChannelId     int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId        int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Title         string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	About         string        `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
	FromKeyid     int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	BroadCast     bool          `protobuf:"varint,6,opt,name=broadCast,proto3" json:"broadCast,omitempty"`
	Megagroup     bool          `protobuf:"varint,7,opt,name=megagroup,proto3" json:"megagroup,omitempty"`
	ReplyMsgId    uint64        `protobuf:"varint,8,opt,name=replyMsgId,proto3" json:"replyMsgId,omitempty"`
	HasGeo        bool          `protobuf:"varint,9,opt,name=has_geo,json=hasGeo,proto3" json:"has_geo,omitempty"`
	Location      []byte        `protobuf:"bytes,10,opt,name=Location,proto3" json:"Location,omitempty"`
	Addr          string        `protobuf:"bytes,11,opt,name=Addr,proto3" json:"Addr,omitempty"`
	BanAddContact bool          `protobuf:"varint,12,opt,name=Ban_add_contact,json=BanAddContact,proto3" json:"Ban_add_contact,omitempty"`
	Debug         *pbcomm.Debug `protobuf:"bytes,13,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqCreateChannel) Reset()         { *m = ReqCreateChannel{} }
func (m *ReqCreateChannel) String() string { return proto.CompactTextString(m) }
func (*ReqCreateChannel) ProtoMessage()    {}
func (*ReqCreateChannel) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{43}
}

func (m *ReqCreateChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqCreateChannel) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqCreateChannel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqCreateChannel) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *ReqCreateChannel) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqCreateChannel) GetBroadCast() bool {
	if m != nil {
		return m.BroadCast
	}
	return false
}

func (m *ReqCreateChannel) GetMegagroup() bool {
	if m != nil {
		return m.Megagroup
	}
	return false
}

func (m *ReqCreateChannel) GetReplyMsgId() uint64 {
	if m != nil {
		return m.ReplyMsgId
	}
	return 0
}

func (m *ReqCreateChannel) GetHasGeo() bool {
	if m != nil {
		return m.HasGeo
	}
	return false
}

func (m *ReqCreateChannel) GetLocation() []byte {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *ReqCreateChannel) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReqCreateChannel) GetBanAddContact() bool {
	if m != nil {
		return m.BanAddContact
	}
	return false
}

func (m *ReqCreateChannel) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 邀请用户进入超级群
type ReqInviteChannelMember struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Title      string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	PeerId     []int32       `protobuf:"varint,4,rep,packed,name=peerId" json:"peerId,omitempty"`
	FromKeyid  int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	AccessHash int64         `protobuf:"varint,6,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	IsForce    bool          `protobuf:"varint,7,opt,name=is_force,json=isForce,proto3" json:"is_force,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqInviteChannelMember) Reset()         { *m = ReqInviteChannelMember{} }
func (m *ReqInviteChannelMember) String() string { return proto.CompactTextString(m) }
func (*ReqInviteChannelMember) ProtoMessage()    {}
func (*ReqInviteChannelMember) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{44}
}

func (m *ReqInviteChannelMember) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqInviteChannelMember) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqInviteChannelMember) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqInviteChannelMember) GetPeerId() []int32 {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *ReqInviteChannelMember) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqInviteChannelMember) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqInviteChannelMember) GetIsForce() bool {
	if m != nil {
		return m.IsForce
	}
	return false
}

func (m *ReqInviteChannelMember) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 邀请用户进入超级群
type ReqJoinChannel struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyid  int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	AccessHash int64         `protobuf:"varint,6,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	ByLink     bool          `protobuf:"varint,7,opt,name=byLink,proto3" json:"byLink,omitempty"`
	Invitor    int32         `protobuf:"varint,8,opt,name=invitor,proto3" json:"invitor,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,9,opt,name=debug" json:"debug,omitempty"`
	InviteType int32         `protobuf:"varint,10,opt,name=invite_type,json=inviteType,proto3" json:"invite_type,omitempty"`
}

func (m *ReqJoinChannel) Reset()                    { *m = ReqJoinChannel{} }
func (m *ReqJoinChannel) String() string            { return proto.CompactTextString(m) }
func (*ReqJoinChannel) ProtoMessage()               {}
func (*ReqJoinChannel) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{45} }

func (m *ReqJoinChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqJoinChannel) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqJoinChannel) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqJoinChannel) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqJoinChannel) GetByLink() bool {
	if m != nil {
		return m.ByLink
	}
	return false
}

func (m *ReqJoinChannel) GetInvitor() int32 {
	if m != nil {
		return m.Invitor
	}
	return 0
}

func (m *ReqJoinChannel) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *ReqJoinChannel) GetInviteType() int32 {
	if m != nil {
		return m.InviteType
	}
	return 0
}

// 踢人
type ReqKickFromChannel struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Kicker    int32         `protobuf:"varint,2,opt,name=kicker,proto3" json:"kicker,omitempty"`
	Kickee    int32         `protobuf:"varint,3,opt,name=kickee,proto3" json:"kickee,omitempty"`
	IsBotUser bool          `protobuf:"varint,4,opt,name=is_bot_user,json=isBotUser,proto3" json:"is_bot_user,omitempty"`
	IsKicked  bool          `protobuf:"varint,5,opt,name=is_kicked,json=isKicked,proto3" json:"is_kicked,omitempty"`
	KickedId  int32         `protobuf:"varint,6,opt,name=Kicked_id,json=KickedId,proto3" json:"Kicked_id,omitempty"`
	FromKeyid int64         `protobuf:"varint,7,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqKickFromChannel) Reset()         { *m = ReqKickFromChannel{} }
func (m *ReqKickFromChannel) String() string { return proto.CompactTextString(m) }
func (*ReqKickFromChannel) ProtoMessage()    {}
func (*ReqKickFromChannel) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{46}
}

func (m *ReqKickFromChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqKickFromChannel) GetKicker() int32 {
	if m != nil {
		return m.Kicker
	}
	return 0
}

func (m *ReqKickFromChannel) GetKickee() int32 {
	if m != nil {
		return m.Kickee
	}
	return 0
}

func (m *ReqKickFromChannel) GetIsBotUser() bool {
	if m != nil {
		return m.IsBotUser
	}
	return false
}

func (m *ReqKickFromChannel) GetIsKicked() bool {
	if m != nil {
		return m.IsKicked
	}
	return false
}

func (m *ReqKickFromChannel) GetKickedId() int32 {
	if m != nil {
		return m.KickedId
	}
	return 0
}

func (m *ReqKickFromChannel) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqKickFromChannel) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 退出超级群
type ReqLeaveChannel struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyid int64         `protobuf:"varint,3,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqLeaveChannel) Reset()                    { *m = ReqLeaveChannel{} }
func (m *ReqLeaveChannel) String() string            { return proto.CompactTextString(m) }
func (*ReqLeaveChannel) ProtoMessage()               {}
func (*ReqLeaveChannel) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{47} }

func (m *ReqLeaveChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqLeaveChannel) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqLeaveChannel) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqLeaveChannel) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// edit title
type ReqEditChannelTitle struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Title     string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	UserId    int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyid int64         `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditChannelTitle) Reset()         { *m = ReqEditChannelTitle{} }
func (m *ReqEditChannelTitle) String() string { return proto.CompactTextString(m) }
func (*ReqEditChannelTitle) ProtoMessage()    {}
func (*ReqEditChannelTitle) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{48}
}

func (m *ReqEditChannelTitle) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditChannelTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqEditChannelTitle) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqEditChannelTitle) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqEditChannelTitle) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 请求参数
type ReqEditChannelAdmin struct {
	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ChannelId  int32         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	FromKeyId  int64         `protobuf:"varint,4,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Role       []byte        `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	KeyId      uint64        `protobuf:"varint,6,opt,name=keyId,proto3" json:"keyId,omitempty"`
	AccessHash int64         `protobuf:"varint,7,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Rank       string        `protobuf:"bytes,8,opt,name=rank,proto3" json:"rank,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,9,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditChannelAdmin) Reset()         { *m = ReqEditChannelAdmin{} }
func (m *ReqEditChannelAdmin) String() string { return proto.CompactTextString(m) }
func (*ReqEditChannelAdmin) ProtoMessage()    {}
func (*ReqEditChannelAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{49}
}

func (m *ReqEditChannelAdmin) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqEditChannelAdmin) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditChannelAdmin) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqEditChannelAdmin) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqEditChannelAdmin) GetRole() []byte {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *ReqEditChannelAdmin) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReqEditChannelAdmin) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqEditChannelAdmin) GetRank() string {
	if m != nil {
		return m.Rank
	}
	return ""
}

func (m *ReqEditChannelAdmin) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// edit photo
type ReqEditChannelPhoto struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Photo     []byte        `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	FromKeyid int64         `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditChannelPhoto) Reset()         { *m = ReqEditChannelPhoto{} }
func (m *ReqEditChannelPhoto) String() string { return proto.CompactTextString(m) }
func (*ReqEditChannelPhoto) ProtoMessage()    {}
func (*ReqEditChannelPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{50}
}

func (m *ReqEditChannelPhoto) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditChannelPhoto) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqEditChannelPhoto) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *ReqEditChannelPhoto) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqEditChannelPhoto) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ChatInviteExported struct {
	Link  string        `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *ChatInviteExported) Reset()         { *m = ChatInviteExported{} }
func (m *ChatInviteExported) String() string { return proto.CompactTextString(m) }
func (*ChatInviteExported) ProtoMessage()    {}
func (*ChatInviteExported) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{51}
}

func (m *ChatInviteExported) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *ChatInviteExported) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// ################################ 编辑超级群群说明信息 editAbout ######################
// 请求参数
type ReqEditChannelAbout struct {
	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	FromKeyId  int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId  int32         `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	About      string        `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
	AccessHash int64         `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditChannelAbout) Reset()         { *m = ReqEditChannelAbout{} }
func (m *ReqEditChannelAbout) String() string { return proto.CompactTextString(m) }
func (*ReqEditChannelAbout) ProtoMessage()    {}
func (*ReqEditChannelAbout) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{52}
}

func (m *ReqEditChannelAbout) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqEditChannelAbout) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqEditChannelAbout) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditChannelAbout) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *ReqEditChannelAbout) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqEditChannelAbout) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回参数
//
//	message ReplyEditChannelAbout {
//	   bool succeed = 1;
//	   int32 error_code = 2;
//	}
//
// ################################ 超级群删除指定人发送的消息 deleteUserHistory ######################
// 请求参数
type ReqDeleteChannelMsg struct {
	Fromid    int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	FromKeyid uint64        `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Flags     int32         `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	Revoke    bool          `protobuf:"varint,4,opt,name=revoke,proto3" json:"revoke,omitempty"`
	Id        []int32       `protobuf:"varint,5,rep,packed,name=id" json:"id,omitempty"`
	Channelid int32         `protobuf:"varint,6,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqDeleteChannelMsg) Reset()         { *m = ReqDeleteChannelMsg{} }
func (m *ReqDeleteChannelMsg) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteChannelMsg) ProtoMessage()    {}
func (*ReqDeleteChannelMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{53}
}

func (m *ReqDeleteChannelMsg) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqDeleteChannelMsg) GetFromKeyid() uint64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqDeleteChannelMsg) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqDeleteChannelMsg) GetRevoke() bool {
	if m != nil {
		return m.Revoke
	}
	return false
}

func (m *ReqDeleteChannelMsg) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReqDeleteChannelMsg) GetChannelid() int32 {
	if m != nil {
		return m.Channelid
	}
	return 0
}

func (m *ReqDeleteChannelMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回参数
//
//	message ReplyDeleteChannelMsg {
//	   bytes result = 1;
//	   int32 error = 2; // 1.获取失败 2.删除失败
//	}
//
// ################################ 超级群删除自己端的历史 ###################################
type ReqDeleteChannelSelfHistory struct {
	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ChannelId  int32         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FromKeyid  int64         `protobuf:"varint,4,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	FromidPts  int32         `protobuf:"varint,5,opt,name=fromid_pts,json=fromidPts,proto3" json:"fromid_pts,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqDeleteChannelSelfHistory) Reset()         { *m = ReqDeleteChannelSelfHistory{} }
func (m *ReqDeleteChannelSelfHistory) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteChannelSelfHistory) ProtoMessage()    {}
func (*ReqDeleteChannelSelfHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{54}
}

func (m *ReqDeleteChannelSelfHistory) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqDeleteChannelSelfHistory) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqDeleteChannelSelfHistory) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqDeleteChannelSelfHistory) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqDeleteChannelSelfHistory) GetFromidPts() int32 {
	if m != nil {
		return m.FromidPts
	}
	return 0
}

func (m *ReqDeleteChannelSelfHistory) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// ################################ 超级群删除指定条消息 deleteMessages ######################
// 请求参数
type ReqDeleteChannelHistory struct {
	FromId     int32         `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ChannelId  int32         `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UsreId     int32         `protobuf:"varint,3,opt,name=usreId,proto3" json:"usreId,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FromKeyid  int64         `protobuf:"varint,5,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqDeleteChannelHistory) Reset()         { *m = ReqDeleteChannelHistory{} }
func (m *ReqDeleteChannelHistory) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteChannelHistory) ProtoMessage()    {}
func (*ReqDeleteChannelHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{55}
}

func (m *ReqDeleteChannelHistory) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqDeleteChannelHistory) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqDeleteChannelHistory) GetUsreId() int32 {
	if m != nil {
		return m.UsreId
	}
	return 0
}

func (m *ReqDeleteChannelHistory) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqDeleteChannelHistory) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqDeleteChannelHistory) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回参数
//
//	message ReplyDeleteChannelHistory {
//	   bytes result = 1;
//	   int32 error_code = 6;
//	}
//
// ################################ 超级群中置顶一条消息 updatePinnedMessage ######################
// 请求参数
type ReqUpdatePinnedChannelMessage struct {
	FromId int32 `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Flags  int32 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Silent bool  `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	//    InputChannel channel = 4;
	ChannelId int32         `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Id        int32         `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	FromKeyid int64         `protobuf:"varint,6,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqUpdatePinnedChannelMessage) Reset()         { *m = ReqUpdatePinnedChannelMessage{} }
func (m *ReqUpdatePinnedChannelMessage) String() string { return proto.CompactTextString(m) }
func (*ReqUpdatePinnedChannelMessage) ProtoMessage()    {}
func (*ReqUpdatePinnedChannelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{56}
}

func (m *ReqUpdatePinnedChannelMessage) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *ReqUpdatePinnedChannelMessage) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqUpdatePinnedChannelMessage) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 返回参数
//
//	message ReplyUpdatePinnedChannelMessage {
//	   bytes reply = 1; // 二进制，真实类型是mtproto.tl_updates_layer62
//	   int32 error_code = 2;
//	}
//
// ################################ 频道设置username checkUsername updateUsername ######################
// // 请求参数
//
//	message ReqCheckChannelUsername {
//	   int32 from_id = 1;
//	   InputChannel channel = 2;
//	   string username = 3;
//	   pbcomm.Debug debug = 4;
//	}
//
// // 返回参数
//
//	message ReplyCheckChannelUsername {
//	   int32 msgid = 1;
//	   int32 date = 2;
//	   int32 pts = 3;
//	   bool check_user_name = 4;
//	}
//
// // 请求参数
//
//	message ReqUpdateChannelUsername {
//	   int32 from_id = 1;
//	   InputChannel channel = 2;
//	   string username = 3;
//	   pbcomm.Debug debug = 4;
//	}
//
// // 返回参数
//
//	message ReplyUpdateChannelUsername {
//	   int32 msgid = 1;
//	   int32 date = 2;
//	   int32 pts = 3;
//	   bool update_user_name = 4;
//	}
//
// //################################ 频道生成邀请链接 exportInvite ######################
// // 请求参数
//
//	message ReqExportChannelInvite {
//	   int32 from_id = 1;
//	   InputChannel channel = 2;
//	   string link = 3;
//	   pbcomm.Debug debug = 4;
//	}
//
// // 返回参数
//
//	message ReplyExportChannelInvite {
//	   int32 msgid = 1;
//	   int32 date = 2;
//	   int32 pts = 3;
//	}
//
// ################################ 删除超级群 deletechannel ######################
// deletechannel 请求参数
type ReqDeleteChannel struct {
	FromId     int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId  int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId  int32         `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqDeleteChannel) Reset()         { *m = ReqDeleteChannel{} }
func (m *ReqDeleteChannel) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteChannel) ProtoMessage()    {}
func (*ReqDeleteChannel) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{57}
}

func (m *ReqDeleteChannel) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqDeleteChannel) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqDeleteChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqDeleteChannel) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqDeleteChannel) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// ############################### 读取channel历史 #########################
type ReqReadChannelHistory struct {
	Fromid        int32                       `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	FromKeyid     int64                       `protobuf:"varint,2,opt,name=from_keyid,json=fromKeyid,proto3" json:"from_keyid,omitempty"`
	ChannelId     int32                       `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	TopMsgId      int32                       `protobuf:"varint,4,opt,name=topMsgId,proto3" json:"topMsgId,omitempty"`
	Debug         *pbcomm.Debug               `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
	ChannelDialog *messagedb.UserDialogAndMsg `protobuf:"bytes,6,opt,name=ChannelDialog" json:"ChannelDialog,omitempty"`
}

func (m *ReqReadChannelHistory) Reset()         { *m = ReqReadChannelHistory{} }
func (m *ReqReadChannelHistory) String() string { return proto.CompactTextString(m) }
func (*ReqReadChannelHistory) ProtoMessage()    {}
func (*ReqReadChannelHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{58}
}

func (m *ReqReadChannelHistory) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *ReqReadChannelHistory) GetFromKeyid() int64 {
	if m != nil {
		return m.FromKeyid
	}
	return 0
}

func (m *ReqReadChannelHistory) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqReadChannelHistory) GetTopMsgId() int32 {
	if m != nil {
		return m.TopMsgId
	}
	return 0
}

func (m *ReqReadChannelHistory) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *ReqReadChannelHistory) GetChannelDialog() *messagedb.UserDialogAndMsg {
	if m != nil {
		return m.ChannelDialog
	}
	return nil
}

type ReqUpdateChannelReadOut struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	MaxId     int32         `protobuf:"varint,2,opt,name=maxId,proto3" json:"maxId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqUpdateChannelReadOut) Reset()         { *m = ReqUpdateChannelReadOut{} }
func (m *ReqUpdateChannelReadOut) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateChannelReadOut) ProtoMessage()    {}
func (*ReqUpdateChannelReadOut) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{59}
}

func (m *ReqUpdateChannelReadOut) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqUpdateChannelReadOut) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ReqUpdateChannelReadOut) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUpdateChannelReadOut struct {
	Maxid int32 `protobuf:"varint,1,opt,name=maxid,proto3" json:"maxid,omitempty"`
	Pts   int32 `protobuf:"varint,2,opt,name=pts,proto3" json:"pts,omitempty"`
}

func (m *ReplyUpdateChannelReadOut) Reset()         { *m = ReplyUpdateChannelReadOut{} }
func (m *ReplyUpdateChannelReadOut) String() string { return proto.CompactTextString(m) }
func (*ReplyUpdateChannelReadOut) ProtoMessage()    {}
func (*ReplyUpdateChannelReadOut) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{60}
}

func (m *ReplyUpdateChannelReadOut) GetMaxid() int32 {
	if m != nil {
		return m.Maxid
	}
	return 0
}

func (m *ReplyUpdateChannelReadOut) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

// #####################超级群get diff###################
type ReqGetChannelDifference struct {
	FromId        int32                       `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId     int64                       `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Flags         int32                       `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	Force         bool                        `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	ChannelId     int32                       `protobuf:"varint,5,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Pts           int32                       `protobuf:"varint,6,opt,name=pts,proto3" json:"pts,omitempty"`
	Limit         int32                       `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Range_MinId   int32                       `protobuf:"varint,8,opt,name=range_MinId,json=rangeMinId,proto3" json:"range_MinId,omitempty"`
	Range_MaxId   int32                       `protobuf:"varint,9,opt,name=range_MaxId,json=rangeMaxId,proto3" json:"range_MaxId,omitempty"`
	Device        int32                       `protobuf:"varint,10,opt,name=device,proto3" json:"device,omitempty"`
	Debug         *pbcomm.Debug               `protobuf:"bytes,11,opt,name=debug" json:"debug,omitempty"`
	ChannelDialog *messagedb.UserDialogAndMsg `protobuf:"bytes,12,opt,name=ChannelDialog" json:"ChannelDialog,omitempty"`
}

func (m *ReqGetChannelDifference) Reset()         { *m = ReqGetChannelDifference{} }
func (m *ReqGetChannelDifference) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelDifference) ProtoMessage()    {}
func (*ReqGetChannelDifference) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{61}
}

func (m *ReqGetChannelDifference) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetChannelDifference) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqGetChannelDifference) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqGetChannelDifference) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *ReqGetChannelDifference) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelDifference) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReqGetChannelDifference) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetChannelDifference) GetRange_MinId() int32 {
	if m != nil {
		return m.Range_MinId
	}
	return 0
}

func (m *ReqGetChannelDifference) GetRange_MaxId() int32 {
	if m != nil {
		return m.Range_MaxId
	}
	return 0
}

func (m *ReqGetChannelDifference) GetDevice() int32 {
	if m != nil {
		return m.Device
	}
	return 0
}

func (m *ReqGetChannelDifference) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *ReqGetChannelDifference) GetChannelDialog() *messagedb.UserDialogAndMsg {
	if m != nil {
		return m.ChannelDialog
	}
	return nil
}

type ReplyGetChannelDifferenceEmpty struct {
	Flags   int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Final   bool  `protobuf:"varint,2,opt,name=final,proto3" json:"final,omitempty"`
	Pts     int32 `protobuf:"varint,3,opt,name=pts,proto3" json:"pts,omitempty"`
	Timeout int32 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (m *ReplyGetChannelDifferenceEmpty) Reset()         { *m = ReplyGetChannelDifferenceEmpty{} }
func (m *ReplyGetChannelDifferenceEmpty) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelDifferenceEmpty) ProtoMessage()    {}
func (*ReplyGetChannelDifferenceEmpty) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{62}
}

func (m *ReplyGetChannelDifferenceEmpty) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReplyGetChannelDifferenceEmpty) GetFinal() bool {
	if m != nil {
		return m.Final
	}
	return false
}

func (m *ReplyGetChannelDifferenceEmpty) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReplyGetChannelDifferenceEmpty) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type ReplyGetChannelDifferenceTooLong struct {
	Flags           int32    `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Final           bool     `protobuf:"varint,2,opt,name=final,proto3" json:"final,omitempty"`
	Pts             int32    `protobuf:"varint,3,opt,name=pts,proto3" json:"pts,omitempty"`
	Timeout         int32    `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	TopMessage      int32    `protobuf:"varint,5,opt,name=top_message,json=topMessage,proto3" json:"top_message,omitempty"`
	ReadInboxMaxId  int32    `protobuf:"varint,6,opt,name=read_inbox_max_id,json=readInboxMaxId,proto3" json:"read_inbox_max_id,omitempty"`
	ReadOutboxMaxId int32    `protobuf:"varint,7,opt,name=read_outbox_max_id,json=readOutboxMaxId,proto3" json:"read_outbox_max_id,omitempty"`
	UnreadCount     int32    `protobuf:"varint,8,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	Msgs            [][]byte `protobuf:"bytes,9,rep,name=msgs" json:"msgs,omitempty"`
	ErrorCode       int32    `protobuf:"varint,10,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ReplyGetChannelDifferenceTooLong) Reset()         { *m = ReplyGetChannelDifferenceTooLong{} }
func (m *ReplyGetChannelDifferenceTooLong) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelDifferenceTooLong) ProtoMessage()    {}
func (*ReplyGetChannelDifferenceTooLong) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{63}
}

func (m *ReplyGetChannelDifferenceTooLong) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReplyGetChannelDifferenceTooLong) GetFinal() bool {
	if m != nil {
		return m.Final
	}
	return false
}

func (m *ReplyGetChannelDifferenceTooLong) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReplyGetChannelDifferenceTooLong) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *ReplyGetChannelDifferenceTooLong) GetTopMessage() int32 {
	if m != nil {
		return m.TopMessage
	}
	return 0
}

func (m *ReplyGetChannelDifferenceTooLong) GetReadInboxMaxId() int32 {
	if m != nil {
		return m.ReadInboxMaxId
	}
	return 0
}

func (m *ReplyGetChannelDifferenceTooLong) GetReadOutboxMaxId() int32 {
	if m != nil {
		return m.ReadOutboxMaxId
	}
	return 0
}

func (m *ReplyGetChannelDifferenceTooLong) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *ReplyGetChannelDifferenceTooLong) GetMsgs() [][]byte {
	if m != nil {
		return m.Msgs
	}
	return nil
}

func (m *ReplyGetChannelDifferenceTooLong) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

// ######超级群get history##########
type ReqGetChannelMsgHistory struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	OffsetId   int32         `protobuf:"varint,2,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`
	OffsetDate int32         `protobuf:"varint,3,opt,name=OffsetDate,proto3" json:"OffsetDate,omitempty"`
	AddOffset  int32         `protobuf:"varint,4,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`
	MinId      int32         `protobuf:"varint,5,opt,name=MinId,proto3" json:"MinId,omitempty"`
	MaxId      int32         `protobuf:"varint,6,opt,name=MaxId,proto3" json:"MaxId,omitempty"`
	Limit      int32         `protobuf:"varint,7,opt,name=Limit,proto3" json:"Limit,omitempty"`
	FromId     int32         `protobuf:"varint,8,opt,name=fromId,proto3" json:"fromId,omitempty"`
	KeyId      uint64        `protobuf:"varint,9,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,10,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetChannelMsgHistory) Reset()         { *m = ReqGetChannelMsgHistory{} }
func (m *ReqGetChannelMsgHistory) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelMsgHistory) ProtoMessage()    {}
func (*ReqGetChannelMsgHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{64}
}

func (m *ReqGetChannelMsgHistory) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取participants
type ReqGetParticipants struct {
	OffSet    int32         `protobuf:"varint,1,opt,name=offSet,proto3" json:"offSet,omitempty"`
	Limit     int32         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	PartiType int32         `protobuf:"varint,3,opt,name=partiType,proto3" json:"partiType,omitempty"`
	ChannelId int32         `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId    int32         `protobuf:"varint,5,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Q         string        `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	Hash      int32         `protobuf:"varint,7,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetParticipants) Reset()         { *m = ReqGetParticipants{} }
func (m *ReqGetParticipants) String() string { return proto.CompactTextString(m) }
func (*ReqGetParticipants) ProtoMessage()    {}
func (*ReqGetParticipants) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{65}
}

func (m *ReqGetParticipants) GetOffSet() int32 {
	if m != nil {
		return m.OffSet
	}
	return 0
}

func (m *ReqGetParticipants) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetParticipants) GetPartiType() int32 {
	if m != nil {
		return m.PartiType
	}
	return 0
}

func (m *ReqGetParticipants) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetParticipants) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetParticipants) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *ReqGetParticipants) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *ReqGetParticipants) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取participant
type ReqGetParticipant struct {
	Channelid  int32         `protobuf:"varint,1,opt,name=channelid,proto3" json:"channelid,omitempty"`
	FromId     int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	UserId     int32         `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetParticipant) Reset()         { *m = ReqGetParticipant{} }
func (m *ReqGetParticipant) String() string { return proto.CompactTextString(m) }
func (*ReqGetParticipant) ProtoMessage()    {}
func (*ReqGetParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{66}
}

func (m *ReqGetParticipant) GetChannelid() int32 {
	if m != nil {
		return m.Channelid
	}
	return 0
}

func (m *ReqGetParticipant) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetParticipant) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetParticipant) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqGetParticipant) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// #####超级群get messages by messages id#####
type ReqGetChannelMessagesByMsgsId struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	MsgsId    []int32       `protobuf:"varint,2,rep,packed,name=msgsId" json:"msgsId,omitempty"`
	FromId    int32         `protobuf:"varint,3,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetChannelMessagesByMsgsId) Reset()         { *m = ReqGetChannelMessagesByMsgsId{} }
func (m *ReqGetChannelMessagesByMsgsId) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelMessagesByMsgsId) ProtoMessage()    {}
func (*ReqGetChannelMessagesByMsgsId) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{67}
}

func (m *ReqGetChannelMessagesByMsgsId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelMessagesByMsgsId) GetMsgsId() []int32 {
	if m != nil {
		return m.MsgsId
	}
	return nil
}

func (m *ReqGetChannelMessagesByMsgsId) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetChannelMessagesByMsgsId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetChannelCommonDialogs struct {
	FromId   int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChannIds []int32       `protobuf:"varint,2,rep,packed,name=channIds" json:"channIds,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,6,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetChannelCommonDialogs) Reset()         { *m = ReqGetChannelCommonDialogs{} }
func (m *ReqGetChannelCommonDialogs) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelCommonDialogs) ProtoMessage()    {}
func (*ReqGetChannelCommonDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{68}
}

func (m *ReqGetChannelCommonDialogs) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetChannelCommonDialogs) GetChannIds() []int32 {
	if m != nil {
		return m.ChannIds
	}
	return nil
}

func (m *ReqGetChannelCommonDialogs) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ChannelDialog struct {
	ChannelId   int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	TopMessage  int32 `protobuf:"varint,2,opt,name=TopMessage,proto3" json:"TopMessage,omitempty"`
	MaxReadInId int32 `protobuf:"varint,3,opt,name=MaxReadInId,proto3" json:"MaxReadInId,omitempty"`
	Encry       int32 `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
}

func (m *ChannelDialog) Reset()                    { *m = ChannelDialog{} }
func (m *ChannelDialog) String() string            { return proto.CompactTextString(m) }
func (*ChannelDialog) ProtoMessage()               {}
func (*ChannelDialog) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{69} }

func (m *ChannelDialog) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelDialog) GetTopMessage() int32 {
	if m != nil {
		return m.TopMessage
	}
	return 0
}

func (m *ChannelDialog) GetMaxReadInId() int32 {
	if m != nil {
		return m.MaxReadInId
	}
	return 0
}

func (m *ChannelDialog) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

type ChannelDialogAndMsg struct {
	ChannelDialog *ChannelDialog `protobuf:"bytes,1,opt,name=ChannelDialog" json:"ChannelDialog,omitempty"`
	ChannelMsg    *UserMsg       `protobuf:"bytes,2,opt,name=ChannelMsg" json:"ChannelMsg,omitempty"`
}

func (m *ChannelDialogAndMsg) Reset()         { *m = ChannelDialogAndMsg{} }
func (m *ChannelDialogAndMsg) String() string { return proto.CompactTextString(m) }
func (*ChannelDialogAndMsg) ProtoMessage()    {}
func (*ChannelDialogAndMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{70}
}

func (m *ChannelDialogAndMsg) GetChannelDialog() *ChannelDialog {
	if m != nil {
		return m.ChannelDialog
	}
	return nil
}

func (m *ChannelDialogAndMsg) GetChannelMsg() *UserMsg {
	if m != nil {
		return m.ChannelMsg
	}
	return nil
}

type ChannelDialogAndMsgs struct {
	ChannelDialogAndMsg []*ChannelDialogAndMsg `protobuf:"bytes,1,rep,name=channelDialogAndMsg" json:"channelDialogAndMsg,omitempty"`
}

func (m *ChannelDialogAndMsgs) Reset()         { *m = ChannelDialogAndMsgs{} }
func (m *ChannelDialogAndMsgs) String() string { return proto.CompactTextString(m) }
func (*ChannelDialogAndMsgs) ProtoMessage()    {}
func (*ChannelDialogAndMsgs) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{71}
}

func (m *ChannelDialogAndMsgs) GetChannelDialogAndMsg() []*ChannelDialogAndMsg {
	if m != nil {
		return m.ChannelDialogAndMsg
	}
	return nil
}

type UserMsg struct {
	Id           int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserId       int32    `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId       int32    `protobuf:"varint,3,opt,name=WithId,proto3" json:"WithId,omitempty"`
	WithIdType   int32    `protobuf:"varint,4,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`
	MessageType  int32    `protobuf:"varint,5,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	Flags        int32    `protobuf:"varint,6,opt,name=Flags,proto3" json:"Flags,omitempty"`
	Out          bool     `protobuf:"varint,7,opt,name=Out,proto3" json:"Out,omitempty"`
	Mentioned    bool     `protobuf:"varint,8,opt,name=Mentioned,proto3" json:"Mentioned,omitempty"`
	MediaUnread  bool     `protobuf:"varint,9,opt,name=MediaUnread,proto3" json:"MediaUnread,omitempty"`
	Silent       bool     `protobuf:"varint,10,opt,name=Silent,proto3" json:"Silent,omitempty"`
	Post         bool     `protobuf:"varint,11,opt,name=Post,proto3" json:"Post,omitempty"`
	MsgId        int32    `protobuf:"varint,12,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	ToId         int32    `protobuf:"varint,13,opt,name=ToId,proto3" json:"ToId,omitempty"`
	Pts          int32    `protobuf:"varint,14,opt,name=Pts,proto3" json:"Pts,omitempty"`
	FwdFrom      []byte   `protobuf:"bytes,15,opt,name=FwdFrom,proto3" json:"FwdFrom,omitempty"`
	ViaBotId     int32    `protobuf:"varint,16,opt,name=ViaBotId,proto3" json:"ViaBotId,omitempty"`
	ReplyToMsgId int32    `protobuf:"varint,17,opt,name=ReplyToMsgId,proto3" json:"ReplyToMsgId,omitempty"`
	Date         int32    `protobuf:"varint,18,opt,name=Date,proto3" json:"Date,omitempty"`
	Message      string   `protobuf:"bytes,19,opt,name=Message,proto3" json:"Message,omitempty"`
	Media        int64    `protobuf:"varint,20,opt,name=Media,proto3" json:"Media,omitempty"`
	MediaData    []byte   `protobuf:"bytes,21,opt,name=MediaData,proto3" json:"MediaData,omitempty"`
	ReplyMarkup  []byte   `protobuf:"bytes,22,opt,name=ReplyMarkup,proto3" json:"ReplyMarkup,omitempty"`
	Entities     [][]byte `protobuf:"bytes,23,rep,name=Entities" json:"Entities,omitempty"`
	FromId       int32    `protobuf:"varint,24,opt,name=FromId,proto3" json:"FromId,omitempty"`
	Views        int32    `protobuf:"varint,25,opt,name=Views,proto3" json:"Views,omitempty"`
	EditDate     int32    `protobuf:"varint,26,opt,name=EditDate,proto3" json:"EditDate,omitempty"`
	Action       []byte   `protobuf:"bytes,27,opt,name=Action,proto3" json:"Action,omitempty"`
	RandomId     int64    `protobuf:"varint,28,opt,name=RandomId,proto3" json:"RandomId,omitempty"`
	Uuid         int64    `protobuf:"varint,29,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	InsertDate   int32    `protobuf:"varint,30,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
	UpdateDate   int32    `protobuf:"varint,31,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`
	Encry        int32    `protobuf:"varint,32,opt,name=Encry,proto3" json:"Encry,omitempty"`
}

func (m *UserMsg) Reset()                    { *m = UserMsg{} }
func (m *UserMsg) String() string            { return proto.CompactTextString(m) }
func (*UserMsg) ProtoMessage()               {}
func (*UserMsg) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{72} }

func (m *UserMsg) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserMsg) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *UserMsg) GetWithIdType() int32 {
	if m != nil {
		return m.WithIdType
	}
	return 0
}

func (m *UserMsg) GetMessageType() int32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *UserMsg) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *UserMsg) GetOut() bool {
	if m != nil {
		return m.Out
	}
	return false
}

func (m *UserMsg) GetMentioned() bool {
	if m != nil {
		return m.Mentioned
	}
	return false
}

func (m *UserMsg) GetMediaUnread() bool {
	if m != nil {
		return m.MediaUnread
	}
	return false
}

func (m *UserMsg) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *UserMsg) GetPost() bool {
	if m != nil {
		return m.Post
	}
	return false
}

func (m *UserMsg) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *UserMsg) GetToId() int32 {
	if m != nil {
		return m.ToId
	}
	return 0
}

func (m *UserMsg) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *UserMsg) GetFwdFrom() []byte {
	if m != nil {
		return m.FwdFrom
	}
	return nil
}

func (m *UserMsg) GetViaBotId() int32 {
	if m != nil {
		return m.ViaBotId
	}
	return 0
}

func (m *UserMsg) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *UserMsg) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UserMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UserMsg) GetMedia() int64 {
	if m != nil {
		return m.Media
	}
	return 0
}

func (m *UserMsg) GetMediaData() []byte {
	if m != nil {
		return m.MediaData
	}
	return nil
}

func (m *UserMsg) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *UserMsg) GetEntities() [][]byte {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *UserMsg) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *UserMsg) GetViews() int32 {
	if m != nil {
		return m.Views
	}
	return 0
}

func (m *UserMsg) GetEditDate() int32 {
	if m != nil {
		return m.EditDate
	}
	return 0
}

func (m *UserMsg) GetAction() []byte {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *UserMsg) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *UserMsg) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *UserMsg) GetInsertDate() int32 {
	if m != nil {
		return m.InsertDate
	}
	return 0
}

func (m *UserMsg) GetUpdateDate() int32 {
	if m != nil {
		return m.UpdateDate
	}
	return 0
}

func (m *UserMsg) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

// #############Admin Logs#############
type ReqGetChannelAdminLog struct {
	ChannelId   int32                       `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId      int32                       `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId   int64                       `protobuf:"varint,3,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	AccessHash  int64                       `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Q           string                      `protobuf:"bytes,5,opt,name=q,proto3" json:"q,omitempty"`
	EventFilter *ChannelAdminLogEventFilter `protobuf:"bytes,6,opt,name=eventFilter" json:"eventFilter,omitempty"`
	Admins      []int32                     `protobuf:"varint,7,rep,packed,name=admins" json:"admins,omitempty"`
	MaxId       int32                       `protobuf:"varint,8,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId       int32                       `protobuf:"varint,9,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	Limit       int32                       `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
	Debug       *pbcomm.Debug               `protobuf:"bytes,11,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetChannelAdminLog) Reset()         { *m = ReqGetChannelAdminLog{} }
func (m *ReqGetChannelAdminLog) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelAdminLog) ProtoMessage()    {}
func (*ReqGetChannelAdminLog) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{73}
}

func (m *ReqGetChannelAdminLog) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelAdminLog) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetChannelAdminLog) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqGetChannelAdminLog) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqGetChannelAdminLog) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *ReqGetChannelAdminLog) GetEventFilter() *ChannelAdminLogEventFilter {
	if m != nil {
		return m.EventFilter
	}
	return nil
}

func (m *ReqGetChannelAdminLog) GetAdmins() []int32 {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *ReqGetChannelAdminLog) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ReqGetChannelAdminLog) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *ReqGetChannelAdminLog) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetChannelAdminLog) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ChannelAdminLogEventFilter struct {
	Flags   int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Join    bool  `protobuf:"varint,2,opt,name=join,proto3" json:"join,omitempty"`
	Leave   bool  `protobuf:"varint,3,opt,name=leave,proto3" json:"leave,omitempty"`
	Invite  bool  `protobuf:"varint,4,opt,name=invite,proto3" json:"invite,omitempty"`
	Ban     bool  `protobuf:"varint,5,opt,name=ban,proto3" json:"ban,omitempty"`
	Unban   bool  `protobuf:"varint,6,opt,name=unban,proto3" json:"unban,omitempty"`
	Kick    bool  `protobuf:"varint,7,opt,name=kick,proto3" json:"kick,omitempty"`
	Unkick  bool  `protobuf:"varint,8,opt,name=unkick,proto3" json:"unkick,omitempty"`
	Promote bool  `protobuf:"varint,9,opt,name=promote,proto3" json:"promote,omitempty"`
	Demote  bool  `protobuf:"varint,10,opt,name=demote,proto3" json:"demote,omitempty"`
	Info    bool  `protobuf:"varint,11,opt,name=info,proto3" json:"info,omitempty"`
	Setting bool  `protobuf:"varint,12,opt,name=setting,proto3" json:"setting,omitempty"`
	Pinned  bool  `protobuf:"varint,13,opt,name=pinned,proto3" json:"pinned,omitempty"`
	Edit    bool  `protobuf:"varint,14,opt,name=edit,proto3" json:"edit,omitempty"`
	Delete  bool  `protobuf:"varint,15,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (m *ChannelAdminLogEventFilter) Reset()         { *m = ChannelAdminLogEventFilter{} }
func (m *ChannelAdminLogEventFilter) String() string { return proto.CompactTextString(m) }
func (*ChannelAdminLogEventFilter) ProtoMessage()    {}
func (*ChannelAdminLogEventFilter) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{74}
}

func (m *ChannelAdminLogEventFilter) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ChannelAdminLogEventFilter) GetJoin() bool {
	if m != nil {
		return m.Join
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetLeave() bool {
	if m != nil {
		return m.Leave
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetInvite() bool {
	if m != nil {
		return m.Invite
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetBan() bool {
	if m != nil {
		return m.Ban
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetUnban() bool {
	if m != nil {
		return m.Unban
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetKick() bool {
	if m != nil {
		return m.Kick
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetUnkick() bool {
	if m != nil {
		return m.Unkick
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetPromote() bool {
	if m != nil {
		return m.Promote
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetDemote() bool {
	if m != nil {
		return m.Demote
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetInfo() bool {
	if m != nil {
		return m.Info
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetSetting() bool {
	if m != nil {
		return m.Setting
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetPinned() bool {
	if m != nil {
		return m.Pinned
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetEdit() bool {
	if m != nil {
		return m.Edit
	}
	return false
}

func (m *ChannelAdminLogEventFilter) GetDelete() bool {
	if m != nil {
		return m.Delete
	}
	return false
}

// ################Import Chat Invite##################
type ReqImportChatInvite struct {
	FromId    int32         `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId int64         `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	Hash      string        `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqImportChatInvite) Reset()         { *m = ReqImportChatInvite{} }
func (m *ReqImportChatInvite) String() string { return proto.CompactTextString(m) }
func (*ReqImportChatInvite) ProtoMessage()    {}
func (*ReqImportChatInvite) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{75}
}

func (m *ReqImportChatInvite) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqImportChatInvite) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqImportChatInvite) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *ReqImportChatInvite) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqEditBanChannelUser struct {
	FromId              int32                `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	FromKeyId           int64                `protobuf:"varint,2,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	ChannelId           int32                `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	BannedUserId        int32                `protobuf:"varint,4,opt,name=bannedUserId,proto3" json:"bannedUserId,omitempty"`
	AccessHash          int64                `protobuf:"varint,5,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	UtilDate            int32                `protobuf:"varint,6,opt,name=util_date,json=utilDate,proto3" json:"util_date,omitempty"`
	ChannelBannedRights *ChannelBannedRights `protobuf:"bytes,7,opt,name=channelBannedRights" json:"channelBannedRights,omitempty"`
	Debug               *pbcomm.Debug        `protobuf:"bytes,8,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqEditBanChannelUser) Reset()         { *m = ReqEditBanChannelUser{} }
func (m *ReqEditBanChannelUser) String() string { return proto.CompactTextString(m) }
func (*ReqEditBanChannelUser) ProtoMessage()    {}
func (*ReqEditBanChannelUser) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{76}
}

func (m *ReqEditBanChannelUser) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqEditBanChannelUser) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqEditBanChannelUser) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqEditBanChannelUser) GetBannedUserId() int32 {
	if m != nil {
		return m.BannedUserId
	}
	return 0
}

func (m *ReqEditBanChannelUser) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqEditBanChannelUser) GetUtilDate() int32 {
	if m != nil {
		return m.UtilDate
	}
	return 0
}

func (m *ReqEditBanChannelUser) GetChannelBannedRights() *ChannelBannedRights {
	if m != nil {
		return m.ChannelBannedRights
	}
	return nil
}

func (m *ReqEditBanChannelUser) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 获取fullchannel
type ReqGetFullChannel struct {
	FromId        int32                       `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChannelId     int32                       `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash    int64                       `protobuf:"varint,3,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug         *pbcomm.Debug               `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
	ChannelDialog *messagedb.UserDialogAndMsg `protobuf:"bytes,5,opt,name=ChannelDialog" json:"ChannelDialog,omitempty"`
	MsgMeta       *ChatMsgMeta                `protobuf:"bytes,6,opt,name=msgMeta" json:"msgMeta,omitempty"`
}

func (m *ReqGetFullChannel) Reset()         { *m = ReqGetFullChannel{} }
func (m *ReqGetFullChannel) String() string { return proto.CompactTextString(m) }
func (*ReqGetFullChannel) ProtoMessage()    {}
func (*ReqGetFullChannel) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{77}
}

func (m *ReqGetFullChannel) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetFullChannel) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetFullChannel) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqGetFullChannel) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *ReqGetFullChannel) GetChannelDialog() *messagedb.UserDialogAndMsg {
	if m != nil {
		return m.ChannelDialog
	}
	return nil
}

func (m *ReqGetFullChannel) GetMsgMeta() *ChatMsgMeta {
	if m != nil {
		return m.MsgMeta
	}
	return nil
}

// 获取fullchannelV2
type ReqGetFullChannelV2 struct {
	FromId        int32                       `protobuf:"varint,1,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChannelId     int32                       `protobuf:"varint,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash    int64                       `protobuf:"varint,3,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug         *pbcomm.Debug               `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
	ChannelDialog *messagedb.UserDialogAndMsg `protobuf:"bytes,5,opt,name=ChannelDialog" json:"ChannelDialog,omitempty"`
	MsgMeta       *ChatMsgMeta                `protobuf:"bytes,6,opt,name=msgMeta" json:"msgMeta,omitempty"`
}

func (m *ReqGetFullChannelV2) Reset()         { *m = ReqGetFullChannelV2{} }
func (m *ReqGetFullChannelV2) String() string { return proto.CompactTextString(m) }
func (*ReqGetFullChannelV2) ProtoMessage()    {}
func (*ReqGetFullChannelV2) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{78}
}

func (m *ReqGetFullChannelV2) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetFullChannelV2) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetFullChannelV2) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqGetFullChannelV2) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *ReqGetFullChannelV2) GetChannelDialog() *messagedb.UserDialogAndMsg {
	if m != nil {
		return m.ChannelDialog
	}
	return nil
}

func (m *ReqGetFullChannelV2) GetMsgMeta() *ChatMsgMeta {
	if m != nil {
		return m.MsgMeta
	}
	return nil
}

// 升级超级群之前的普通群消息元数据
type ChatMsgMeta struct {
	TopMsg int32 `protobuf:"varint,1,opt,name=topMsg,proto3" json:"topMsg,omitempty"`
	TopPts int32 `protobuf:"varint,2,opt,name=topPts,proto3" json:"topPts,omitempty"`
	ToDate int32 `protobuf:"varint,3,opt,name=toDate,proto3" json:"toDate,omitempty"`
}

func (m *ChatMsgMeta) Reset()                    { *m = ChatMsgMeta{} }
func (m *ChatMsgMeta) String() string            { return proto.CompactTextString(m) }
func (*ChatMsgMeta) ProtoMessage()               {}
func (*ChatMsgMeta) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{79} }

func (m *ChatMsgMeta) GetTopMsg() int32 {
	if m != nil {
		return m.TopMsg
	}
	return 0
}

func (m *ChatMsgMeta) GetTopPts() int32 {
	if m != nil {
		return m.TopPts
	}
	return 0
}

func (m *ChatMsgMeta) GetToDate() int32 {
	if m != nil {
		return m.ToDate
	}
	return 0
}

// 创建超级群的邀请链接
type ReqExportChannelLink struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqExportChannelLink) Reset()         { *m = ReqExportChannelLink{} }
func (m *ReqExportChannelLink) String() string { return proto.CompactTextString(m) }
func (*ReqExportChannelLink) ProtoMessage()    {}
func (*ReqExportChannelLink) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{80}
}

func (m *ReqExportChannelLink) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqExportChannelLink) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqExportChannelLink) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ChannelBannedRights struct {
	Flags        int32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	ViewMessages bool  `protobuf:"varint,2,opt,name=view_messages,json=viewMessages,proto3" json:"view_messages,omitempty"`
	SendMessages bool  `protobuf:"varint,3,opt,name=send_messages,json=sendMessages,proto3" json:"send_messages,omitempty"`
	SendMedia    bool  `protobuf:"varint,4,opt,name=send_media,json=sendMedia,proto3" json:"send_media,omitempty"`
	SendStickers bool  `protobuf:"varint,5,opt,name=send_stickers,json=sendStickers,proto3" json:"send_stickers,omitempty"`
	SendGifs     bool  `protobuf:"varint,6,opt,name=send_gifs,json=sendGifs,proto3" json:"send_gifs,omitempty"`
	SendGames    bool  `protobuf:"varint,7,opt,name=send_games,json=sendGames,proto3" json:"send_games,omitempty"`
	SendInline   bool  `protobuf:"varint,8,opt,name=send_inline,json=sendInline,proto3" json:"send_inline,omitempty"`
	EmbedLinks   bool  `protobuf:"varint,9,opt,name=embed_links,json=embedLinks,proto3" json:"embed_links,omitempty"`
	UntilDate    int32 `protobuf:"varint,10,opt,name=until_date,json=untilDate,proto3" json:"until_date,omitempty"`
	// @ add by Qingsong at 2019-11-14 for ban member rights.
	InviteUser      bool `protobuf:"varint,11,opt,name=invite_user,json=inviteUser,proto3" json:"invite_user,omitempty"`
	PinMessage      bool `protobuf:"varint,12,opt,name=pin_message,json=pinMessage,proto3" json:"pin_message,omitempty"`
	ChangeGroupInfo bool `protobuf:"varint,13,opt,name=change_group_info,json=changeGroupInfo,proto3" json:"change_group_info,omitempty"`
	SendPolls       bool `protobuf:"varint,14,opt,name=send_polls,json=sendPolls,proto3" json:"send_polls,omitempty"`
}

func (m *ChannelBannedRights) Reset()         { *m = ChannelBannedRights{} }
func (m *ChannelBannedRights) String() string { return proto.CompactTextString(m) }
func (*ChannelBannedRights) ProtoMessage()    {}
func (*ChannelBannedRights) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{81}
}

func (m *ChannelBannedRights) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ChannelBannedRights) GetViewMessages() bool {
	if m != nil {
		return m.ViewMessages
	}
	return false
}

func (m *ChannelBannedRights) GetSendMessages() bool {
	if m != nil {
		return m.SendMessages
	}
	return false
}

func (m *ChannelBannedRights) GetSendMedia() bool {
	if m != nil {
		return m.SendMedia
	}
	return false
}

func (m *ChannelBannedRights) GetSendStickers() bool {
	if m != nil {
		return m.SendStickers
	}
	return false
}

func (m *ChannelBannedRights) GetSendGifs() bool {
	if m != nil {
		return m.SendGifs
	}
	return false
}

func (m *ChannelBannedRights) GetSendGames() bool {
	if m != nil {
		return m.SendGames
	}
	return false
}

func (m *ChannelBannedRights) GetSendInline() bool {
	if m != nil {
		return m.SendInline
	}
	return false
}

func (m *ChannelBannedRights) GetEmbedLinks() bool {
	if m != nil {
		return m.EmbedLinks
	}
	return false
}

func (m *ChannelBannedRights) GetUntilDate() int32 {
	if m != nil {
		return m.UntilDate
	}
	return 0
}

func (m *ChannelBannedRights) GetInviteUser() bool {
	if m != nil {
		return m.InviteUser
	}
	return false
}

func (m *ChannelBannedRights) GetPinMessage() bool {
	if m != nil {
		return m.PinMessage
	}
	return false
}

func (m *ChannelBannedRights) GetChangeGroupInfo() bool {
	if m != nil {
		return m.ChangeGroupInfo
	}
	return false
}

func (m *ChannelBannedRights) GetSendPolls() bool {
	if m != nil {
		return m.SendPolls
	}
	return false
}

// 是否允许普通成员邀请人
type ReqChannelToggleInvite struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Enabled    bool          `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	AccessHash int64         `protobuf:"varint,4,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqChannelToggleInvite) Reset()         { *m = ReqChannelToggleInvite{} }
func (m *ReqChannelToggleInvite) String() string { return proto.CompactTextString(m) }
func (*ReqChannelToggleInvite) ProtoMessage()    {}
func (*ReqChannelToggleInvite) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{82}
}

func (m *ReqChannelToggleInvite) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqChannelToggleInvite) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqChannelToggleInvite) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *ReqChannelToggleInvite) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqChannelToggleInvite) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 请求给定channel
type ReqGetChannels struct {
	ChannelIds []int32       `protobuf:"varint,1,rep,packed,name=channelIds" json:"channelIds,omitempty"`
	FromId     int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqGetChannels) Reset()                    { *m = ReqGetChannels{} }
func (m *ReqGetChannels) String() string            { return proto.CompactTextString(m) }
func (*ReqGetChannels) ProtoMessage()               {}
func (*ReqGetChannels) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{83} }

func (m *ReqGetChannels) GetChannelIds() []int32 {
	if m != nil {
		return m.ChannelIds
	}
	return nil
}

func (m *ReqGetChannels) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqGetChannels) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 修改channel user name
type ReqUpdateChannelUserName struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	FromId     int32         `protobuf:"varint,3,opt,name=fromId,proto3" json:"fromId,omitempty"`
	UserName   string        `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqUpdateChannelUserName) Reset()         { *m = ReqUpdateChannelUserName{} }
func (m *ReqUpdateChannelUserName) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateChannelUserName) ProtoMessage()    {}
func (*ReqUpdateChannelUserName) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{84}
}

func (m *ReqUpdateChannelUserName) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqUpdateChannelUserName) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqUpdateChannelUserName) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqUpdateChannelUserName) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ReqUpdateChannelUserName) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 修改channel user name
type ReqCheckChannelUserName struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	AccessHash int64         `protobuf:"varint,2,opt,name=accessHash,proto3" json:"accessHash,omitempty"`
	FromId     int32         `protobuf:"varint,3,opt,name=fromId,proto3" json:"fromId,omitempty"`
	UserName   string        `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *ReqCheckChannelUserName) Reset()         { *m = ReqCheckChannelUserName{} }
func (m *ReqCheckChannelUserName) String() string { return proto.CompactTextString(m) }
func (*ReqCheckChannelUserName) ProtoMessage()    {}
func (*ReqCheckChannelUserName) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{85}
}

func (m *ReqCheckChannelUserName) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqCheckChannelUserName) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ReqCheckChannelUserName) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqCheckChannelUserName) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ReqCheckChannelUserName) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// 转移群主
type ReqChangeGroupAndChannelCrator struct {
	GroupId    int32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	FromId     int32 `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	OperatorId int32 `protobuf:"varint,3,opt,name=OperatorId,proto3" json:"OperatorId,omitempty"`
	IsChat     bool  `protobuf:"varint,4,opt,name=IsChat,proto3" json:"IsChat,omitempty"`
}

func (m *ReqChangeGroupAndChannelCrator) Reset()         { *m = ReqChangeGroupAndChannelCrator{} }
func (m *ReqChangeGroupAndChannelCrator) String() string { return proto.CompactTextString(m) }
func (*ReqChangeGroupAndChannelCrator) ProtoMessage()    {}
func (*ReqChangeGroupAndChannelCrator) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{86}
}

func (m *ReqChangeGroupAndChannelCrator) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *ReqChangeGroupAndChannelCrator) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqChangeGroupAndChannelCrator) GetOperatorId() int32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *ReqChangeGroupAndChannelCrator) GetIsChat() bool {
	if m != nil {
		return m.IsChat
	}
	return false
}

// 超级群发送数字钱包红包
type ReqSendRpm struct {
	FromKeyId int64         `protobuf:"varint,1,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Req       []byte        `protobuf:"bytes,3,opt,name=req,proto3" json:"req,omitempty"`
	RpmResp   []byte        `protobuf:"bytes,4,opt,name=rpmResp,proto3" json:"rpmResp,omitempty"`
	Dbg       *pbcomm.Debug `protobuf:"bytes,5,opt,name=dbg" json:"dbg,omitempty"`
}

func (m *ReqSendRpm) Reset()                    { *m = ReqSendRpm{} }
func (m *ReqSendRpm) String() string            { return proto.CompactTextString(m) }
func (*ReqSendRpm) ProtoMessage()               {}
func (*ReqSendRpm) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{87} }

func (m *ReqSendRpm) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqSendRpm) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqSendRpm) GetReq() []byte {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *ReqSendRpm) GetRpmResp() []byte {
	if m != nil {
		return m.RpmResp
	}
	return nil
}

func (m *ReqSendRpm) GetDbg() *pbcomm.Debug {
	if m != nil {
		return m.Dbg
	}
	return nil
}

// 超级群发送数字钱包红包返回结果
type ReplySendRpm struct {
	Result  []byte       `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	Meta    *ChatMsgMeta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	ErrCode int32        `protobuf:"varint,3,opt,name=errCode,proto3" json:"errCode,omitempty"`
	Error   string       `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplySendRpm) Reset()                    { *m = ReplySendRpm{} }
func (m *ReplySendRpm) String() string            { return proto.CompactTextString(m) }
func (*ReplySendRpm) ProtoMessage()               {}
func (*ReplySendRpm) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{88} }

func (m *ReplySendRpm) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplySendRpm) GetMeta() *ChatMsgMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ReplySendRpm) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ReplySendRpm) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ReqEditRpm struct {
	FromKeyId     int64         `protobuf:"varint,1,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	FromId        int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChanId        int32         `protobuf:"varint,3,opt,name=chanId,proto3" json:"chanId,omitempty"`
	MsgId         int32         `protobuf:"varint,4,opt,name=msgId,proto3" json:"msgId,omitempty"`
	ChanAccHash   int64         `protobuf:"varint,5,opt,name=chanAccHash,proto3" json:"chanAccHash,omitempty"`
	RpmResultCode int32         `protobuf:"varint,6,opt,name=rpmResultCode,proto3" json:"rpmResultCode,omitempty"`
	Dbg           *pbcomm.Debug `protobuf:"bytes,7,opt,name=dbg" json:"dbg,omitempty"`
}

func (m *ReqEditRpm) Reset()                    { *m = ReqEditRpm{} }
func (m *ReqEditRpm) String() string            { return proto.CompactTextString(m) }
func (*ReqEditRpm) ProtoMessage()               {}
func (*ReqEditRpm) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{89} }

func (m *ReqEditRpm) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqEditRpm) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqEditRpm) GetChanId() int32 {
	if m != nil {
		return m.ChanId
	}
	return 0
}

func (m *ReqEditRpm) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqEditRpm) GetChanAccHash() int64 {
	if m != nil {
		return m.ChanAccHash
	}
	return 0
}

func (m *ReqEditRpm) GetRpmResultCode() int32 {
	if m != nil {
		return m.RpmResultCode
	}
	return 0
}

func (m *ReqEditRpm) GetDbg() *pbcomm.Debug {
	if m != nil {
		return m.Dbg
	}
	return nil
}

type ReqEditRpmV2 struct {
	FromKeyId   int64         `protobuf:"varint,1,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	FromId      int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChanId      int32         `protobuf:"varint,3,opt,name=chanId,proto3" json:"chanId,omitempty"`
	MsgId       int32         `protobuf:"varint,4,opt,name=msgId,proto3" json:"msgId,omitempty"`
	ChanAccHash int64         `protobuf:"varint,5,opt,name=chanAccHash,proto3" json:"chanAccHash,omitempty"`
	RpmResult   []byte        `protobuf:"bytes,6,opt,name=rpmResult,proto3" json:"rpmResult,omitempty"`
	Dbg         *pbcomm.Debug `protobuf:"bytes,7,opt,name=dbg" json:"dbg,omitempty"`
}

func (m *ReqEditRpmV2) Reset()                    { *m = ReqEditRpmV2{} }
func (m *ReqEditRpmV2) String() string            { return proto.CompactTextString(m) }
func (*ReqEditRpmV2) ProtoMessage()               {}
func (*ReqEditRpmV2) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{90} }

func (m *ReqEditRpmV2) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqEditRpmV2) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqEditRpmV2) GetChanId() int32 {
	if m != nil {
		return m.ChanId
	}
	return 0
}

func (m *ReqEditRpmV2) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqEditRpmV2) GetChanAccHash() int64 {
	if m != nil {
		return m.ChanAccHash
	}
	return 0
}

func (m *ReqEditRpmV2) GetRpmResult() []byte {
	if m != nil {
		return m.RpmResult
	}
	return nil
}

func (m *ReqEditRpmV2) GetDbg() *pbcomm.Debug {
	if m != nil {
		return m.Dbg
	}
	return nil
}

type ReqEditPayment struct {
	FromKeyId   int64         `protobuf:"varint,1,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	FromId      int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ChanId      int32         `protobuf:"varint,3,opt,name=chanId,proto3" json:"chanId,omitempty"`
	MsgId       int32         `protobuf:"varint,4,opt,name=msgId,proto3" json:"msgId,omitempty"`
	Flags       int32         `protobuf:"varint,5,opt,name=flags,proto3" json:"flags,omitempty"`
	ChanAccHash int64         `protobuf:"varint,6,opt,name=chanAccHash,proto3" json:"chanAccHash,omitempty"`
	RpmResult   []byte        `protobuf:"bytes,7,opt,name=rpmResult,proto3" json:"rpmResult,omitempty"`
	Options     []byte        `protobuf:"bytes,8,opt,name=options,proto3" json:"options,omitempty"`
	Dbg         *pbcomm.Debug `protobuf:"bytes,9,opt,name=dbg" json:"dbg,omitempty"`
}

func (m *ReqEditPayment) Reset()                    { *m = ReqEditPayment{} }
func (m *ReqEditPayment) String() string            { return proto.CompactTextString(m) }
func (*ReqEditPayment) ProtoMessage()               {}
func (*ReqEditPayment) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{91} }

func (m *ReqEditPayment) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqEditPayment) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqEditPayment) GetChanId() int32 {
	if m != nil {
		return m.ChanId
	}
	return 0
}

func (m *ReqEditPayment) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqEditPayment) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ReqEditPayment) GetChanAccHash() int64 {
	if m != nil {
		return m.ChanAccHash
	}
	return 0
}

func (m *ReqEditPayment) GetRpmResult() []byte {
	if m != nil {
		return m.RpmResult
	}
	return nil
}

func (m *ReqEditPayment) GetOptions() []byte {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ReqEditPayment) GetDbg() *pbcomm.Debug {
	if m != nil {
		return m.Dbg
	}
	return nil
}

type ReplyEditRpm struct {
	Result  []byte `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ErrCode int32  `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyEditRpm) Reset()                    { *m = ReplyEditRpm{} }
func (m *ReplyEditRpm) String() string            { return proto.CompactTextString(m) }
func (*ReplyEditRpm) ProtoMessage()               {}
func (*ReplyEditRpm) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{92} }

func (m *ReplyEditRpm) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyEditRpm) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ReplyEditRpm) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// 领取超级群红包请求
type ReqRecvRpm struct {
	FromKeyId int64         `protobuf:"varint,1,opt,name=fromKeyId,proto3" json:"fromKeyId,omitempty"`
	FromId    int32         `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	Req       []byte        `protobuf:"bytes,3,opt,name=req,proto3" json:"req,omitempty"`
	MetaData  []byte        `protobuf:"bytes,4,opt,name=metaData,proto3" json:"metaData,omitempty"`
	Dbg       *pbcomm.Debug `protobuf:"bytes,5,opt,name=dbg" json:"dbg,omitempty"`
}

func (m *ReqRecvRpm) Reset()                    { *m = ReqRecvRpm{} }
func (m *ReqRecvRpm) String() string            { return proto.CompactTextString(m) }
func (*ReqRecvRpm) ProtoMessage()               {}
func (*ReqRecvRpm) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{93} }

func (m *ReqRecvRpm) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqRecvRpm) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqRecvRpm) GetReq() []byte {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *ReqRecvRpm) GetMetaData() []byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *ReqRecvRpm) GetDbg() *pbcomm.Debug {
	if m != nil {
		return m.Dbg
	}
	return nil
}

type ReplyRecvRpm struct {
	Result  []byte `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ErrCode int32  `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ReplyRecvRpm) Reset()                    { *m = ReplyRecvRpm{} }
func (m *ReplyRecvRpm) String() string            { return proto.CompactTextString(m) }
func (*ReplyRecvRpm) ProtoMessage()               {}
func (*ReplyRecvRpm) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{94} }

func (m *ReplyRecvRpm) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyRecvRpm) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ReplyRecvRpm) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ReqMessageReadMentions struct {
	FromId    int32         `protobuf:"varint,1,opt,name=FromId,proto3" json:"FromId,omitempty"`
	FromKeyId int64         `protobuf:"varint,2,opt,name=FromKeyId,proto3" json:"FromKeyId,omitempty"`
	ChanId    int32         `protobuf:"varint,3,opt,name=ChanId,proto3" json:"ChanId,omitempty"`
	Dbg       *pbcomm.Debug `protobuf:"bytes,4,opt,name=Dbg" json:"Dbg,omitempty"`
}

func (m *ReqMessageReadMentions) Reset()         { *m = ReqMessageReadMentions{} }
func (m *ReqMessageReadMentions) String() string { return proto.CompactTextString(m) }
func (*ReqMessageReadMentions) ProtoMessage()    {}
func (*ReqMessageReadMentions) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{95}
}

func (m *ReqMessageReadMentions) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ReqMessageReadMentions) GetFromKeyId() int64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *ReqMessageReadMentions) GetChanId() int32 {
	if m != nil {
		return m.ChanId
	}
	return 0
}

func (m *ReqMessageReadMentions) GetDbg() *pbcomm.Debug {
	if m != nil {
		return m.Dbg
	}
	return nil
}

type ReplyMessageReadMentions struct {
	Pts      int32  `protobuf:"varint,1,opt,name=Pts,proto3" json:"Pts,omitempty"`
	PtsCount int32  `protobuf:"varint,2,opt,name=PtsCount,proto3" json:"PtsCount,omitempty"`
	OffsetId int32  `protobuf:"varint,3,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`
	ErrCode  int32  `protobuf:"varint,4,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	ErrStr   string `protobuf:"bytes,5,opt,name=ErrStr,proto3" json:"ErrStr,omitempty"`
}

func (m *ReplyMessageReadMentions) Reset()         { *m = ReplyMessageReadMentions{} }
func (m *ReplyMessageReadMentions) String() string { return proto.CompactTextString(m) }
func (*ReplyMessageReadMentions) ProtoMessage()    {}
func (*ReplyMessageReadMentions) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{96}
}

func (m *ReplyMessageReadMentions) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReplyMessageReadMentions) GetPtsCount() int32 {
	if m != nil {
		return m.PtsCount
	}
	return 0
}

func (m *ReplyMessageReadMentions) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *ReplyMessageReadMentions) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ReplyMessageReadMentions) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

// 发送投票
type SendVoteReq struct {
	Fromid  int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Peer    []byte        `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId   int32         `protobuf:"varint,3,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Options []string      `protobuf:"bytes,4,rep,name=options" json:"options,omitempty"`
	FromKey int64         `protobuf:"varint,5,opt,name=fromKey,proto3" json:"fromKey,omitempty"`
	Stop    bool          `protobuf:"varint,6,opt,name=stop,proto3" json:"stop,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,7,opt,name=debug" json:"debug,omitempty"`
}

func (m *SendVoteReq) Reset()                    { *m = SendVoteReq{} }
func (m *SendVoteReq) String() string            { return proto.CompactTextString(m) }
func (*SendVoteReq) ProtoMessage()               {}
func (*SendVoteReq) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{97} }

func (m *SendVoteReq) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *SendVoteReq) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *SendVoteReq) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *SendVoteReq) GetOptions() []string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *SendVoteReq) GetFromKey() int64 {
	if m != nil {
		return m.FromKey
	}
	return 0
}

func (m *SendVoteReq) GetStop() bool {
	if m != nil {
		return m.Stop
	}
	return false
}

func (m *SendVoteReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type SendVoteReply struct {
	Reply []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	Error int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *SendVoteReply) Reset()                    { *m = SendVoteReply{} }
func (m *SendVoteReply) String() string            { return proto.CompactTextString(m) }
func (*SendVoteReply) ProtoMessage()               {}
func (*SendVoteReply) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{98} }

func (m *SendVoteReply) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *SendVoteReply) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 获取投票结果
type GetPollResultsReq struct {
	Fromid  int32         `protobuf:"varint,1,opt,name=fromid,proto3" json:"fromid,omitempty"`
	Peer    []byte        `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId   int32         `protobuf:"varint,3,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	FromKey int64         `protobuf:"varint,4,opt,name=fromKey,proto3" json:"fromKey,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
}

func (m *GetPollResultsReq) Reset()         { *m = GetPollResultsReq{} }
func (m *GetPollResultsReq) String() string { return proto.CompactTextString(m) }
func (*GetPollResultsReq) ProtoMessage()    {}
func (*GetPollResultsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{99}
}

func (m *GetPollResultsReq) GetFromid() int32 {
	if m != nil {
		return m.Fromid
	}
	return 0
}

func (m *GetPollResultsReq) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *GetPollResultsReq) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *GetPollResultsReq) GetFromKey() int64 {
	if m != nil {
		return m.FromKey
	}
	return 0
}

func (m *GetPollResultsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type GetPollResultsReply struct {
	Reply []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	Error int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *GetPollResultsReply) Reset()         { *m = GetPollResultsReply{} }
func (m *GetPollResultsReply) String() string { return proto.CompactTextString(m) }
func (*GetPollResultsReply) ProtoMessage()    {}
func (*GetPollResultsReply) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{100}
}

func (m *GetPollResultsReply) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *GetPollResultsReply) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

type ChatBannedRights struct {
	Flags        int32 `protobuf:"varint,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
	ViewMessages bool  `protobuf:"varint,2,opt,name=View_messages,json=ViewMessages,proto3" json:"View_messages,omitempty"`
	SendMessages bool  `protobuf:"varint,3,opt,name=Send_messages,json=SendMessages,proto3" json:"Send_messages,omitempty"`
	SendMedia    bool  `protobuf:"varint,4,opt,name=Send_media,json=SendMedia,proto3" json:"Send_media,omitempty"`
	SendStickers bool  `protobuf:"varint,5,opt,name=Send_stickers,json=SendStickers,proto3" json:"Send_stickers,omitempty"`
	SendGifs     bool  `protobuf:"varint,6,opt,name=Send_gifs,json=SendGifs,proto3" json:"Send_gifs,omitempty"`
	SendGames    bool  `protobuf:"varint,7,opt,name=Send_games,json=SendGames,proto3" json:"Send_games,omitempty"`
	SendInline   bool  `protobuf:"varint,8,opt,name=Send_inline,json=SendInline,proto3" json:"Send_inline,omitempty"`
	EmbedLinks   bool  `protobuf:"varint,9,opt,name=Embed_links,json=EmbedLinks,proto3" json:"Embed_links,omitempty"`
	SendPolls    bool  `protobuf:"varint,10,opt,name=Send_polls,json=SendPolls,proto3" json:"Send_polls,omitempty"`
	ChangeInfo   bool  `protobuf:"varint,11,opt,name=Change_info,json=ChangeInfo,proto3" json:"Change_info,omitempty"`
	InviteUsers  bool  `protobuf:"varint,12,opt,name=Invite_users,json=InviteUsers,proto3" json:"Invite_users,omitempty"`
	PinMessages  bool  `protobuf:"varint,13,opt,name=Pin_messages,json=PinMessages,proto3" json:"Pin_messages,omitempty"`
	UntilDate    int32 `protobuf:"varint,14,opt,name=Until_date,json=UntilDate,proto3" json:"Until_date,omitempty"`
}

func (m *ChatBannedRights) Reset()         { *m = ChatBannedRights{} }
func (m *ChatBannedRights) String() string { return proto.CompactTextString(m) }
func (*ChatBannedRights) ProtoMessage()    {}
func (*ChatBannedRights) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{101}
}

func (m *ChatBannedRights) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ChatBannedRights) GetViewMessages() bool {
	if m != nil {
		return m.ViewMessages
	}
	return false
}

func (m *ChatBannedRights) GetSendMessages() bool {
	if m != nil {
		return m.SendMessages
	}
	return false
}

func (m *ChatBannedRights) GetSendMedia() bool {
	if m != nil {
		return m.SendMedia
	}
	return false
}

func (m *ChatBannedRights) GetSendStickers() bool {
	if m != nil {
		return m.SendStickers
	}
	return false
}

func (m *ChatBannedRights) GetSendGifs() bool {
	if m != nil {
		return m.SendGifs
	}
	return false
}

func (m *ChatBannedRights) GetSendGames() bool {
	if m != nil {
		return m.SendGames
	}
	return false
}

func (m *ChatBannedRights) GetSendInline() bool {
	if m != nil {
		return m.SendInline
	}
	return false
}

func (m *ChatBannedRights) GetEmbedLinks() bool {
	if m != nil {
		return m.EmbedLinks
	}
	return false
}

func (m *ChatBannedRights) GetSendPolls() bool {
	if m != nil {
		return m.SendPolls
	}
	return false
}

func (m *ChatBannedRights) GetChangeInfo() bool {
	if m != nil {
		return m.ChangeInfo
	}
	return false
}

func (m *ChatBannedRights) GetInviteUsers() bool {
	if m != nil {
		return m.InviteUsers
	}
	return false
}

func (m *ChatBannedRights) GetPinMessages() bool {
	if m != nil {
		return m.PinMessages
	}
	return false
}

func (m *ChatBannedRights) GetUntilDate() int32 {
	if m != nil {
		return m.UntilDate
	}
	return 0
}

// for request.
type EditChatDefaultBannedRightsReq struct {
	ReqMessageId int64             `protobuf:"varint,1,opt,name=ReqMessageId,proto3" json:"ReqMessageId,omitempty"`
	ChannelId    int32             `protobuf:"varint,2,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	AccessHash   int64             `protobuf:"varint,3,opt,name=Access_hash,json=AccessHash,proto3" json:"Access_hash,omitempty"`
	BannedFlag   *ChatBannedRights `protobuf:"bytes,4,opt,name=Banned_flag,json=BannedFlag" json:"Banned_flag,omitempty"`
	UserId       int32             `protobuf:"varint,5,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	FromId       int32             `protobuf:"varint,6,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`
	FromKeyId    uint64            `protobuf:"varint,7,opt,name=From_key_id,json=FromKeyId,proto3" json:"From_key_id,omitempty"`
	Debug        *pbcomm.Debug     `protobuf:"bytes,8,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *EditChatDefaultBannedRightsReq) Reset()         { *m = EditChatDefaultBannedRightsReq{} }
func (m *EditChatDefaultBannedRightsReq) String() string { return proto.CompactTextString(m) }
func (*EditChatDefaultBannedRightsReq) ProtoMessage()    {}
func (*EditChatDefaultBannedRightsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{102}
}

func (m *EditChatDefaultBannedRightsReq) GetReqMessageId() int64 {
	if m != nil {
		return m.ReqMessageId
	}
	return 0
}

func (m *EditChatDefaultBannedRightsReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *EditChatDefaultBannedRightsReq) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *EditChatDefaultBannedRightsReq) GetBannedFlag() *ChatBannedRights {
	if m != nil {
		return m.BannedFlag
	}
	return nil
}

func (m *EditChatDefaultBannedRightsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *EditChatDefaultBannedRightsReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *EditChatDefaultBannedRightsReq) GetFromKeyId() uint64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *EditChatDefaultBannedRightsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

// for respond.
type EditChatDefaultBannedRightsRsp struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *EditChatDefaultBannedRightsRsp) Reset()         { *m = EditChatDefaultBannedRightsRsp{} }
func (m *EditChatDefaultBannedRightsRsp) String() string { return proto.CompactTextString(m) }
func (*EditChatDefaultBannedRightsRsp) ProtoMessage()    {}
func (*EditChatDefaultBannedRightsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{103}
}

func (m *EditChatDefaultBannedRightsRsp) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

// add by Qingsong at 2019-11-06 for call channel server to handler toggle slow mode
type HandleToggleSlowModeReq struct {
	ChnlId    int32         `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`
	HashId    int64         `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`
	Seconds   int32         `protobuf:"varint,3,opt,name=Seconds,proto3" json:"Seconds,omitempty"`
	FromId    int32         `protobuf:"varint,4,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`
	FromKeyId uint64        `protobuf:"varint,5,opt,name=From_key_id,json=FromKeyId,proto3" json:"From_key_id,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *HandleToggleSlowModeReq) Reset()         { *m = HandleToggleSlowModeReq{} }
func (m *HandleToggleSlowModeReq) String() string { return proto.CompactTextString(m) }
func (*HandleToggleSlowModeReq) ProtoMessage()    {}
func (*HandleToggleSlowModeReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{104}
}

func (m *HandleToggleSlowModeReq) GetChnlId() int32 {
	if m != nil {
		return m.ChnlId
	}
	return 0
}

func (m *HandleToggleSlowModeReq) GetHashId() int64 {
	if m != nil {
		return m.HashId
	}
	return 0
}

func (m *HandleToggleSlowModeReq) GetSeconds() int32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *HandleToggleSlowModeReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *HandleToggleSlowModeReq) GetFromKeyId() uint64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

func (m *HandleToggleSlowModeReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type HandleToggleSlowModeRsp struct {
	Results int32  `protobuf:"varint,1,opt,name=Results,proto3" json:"Results,omitempty"`
	Updates []byte `protobuf:"bytes,2,opt,name=Updates,proto3" json:"Updates,omitempty"`
}

func (m *HandleToggleSlowModeRsp) Reset()         { *m = HandleToggleSlowModeRsp{} }
func (m *HandleToggleSlowModeRsp) String() string { return proto.CompactTextString(m) }
func (*HandleToggleSlowModeRsp) ProtoMessage()    {}
func (*HandleToggleSlowModeRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{105}
}

func (m *HandleToggleSlowModeRsp) GetResults() int32 {
	if m != nil {
		return m.Results
	}
	return 0
}

func (m *HandleToggleSlowModeRsp) GetUpdates() []byte {
	if m != nil {
		return m.Updates
	}
	return nil
}

// @ add by Qingsong at 2019-11-21 for channel toggle signatures
type HandleToggleSignaturesReq struct {
	ChnlId    int32  `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`
	HashId    int64  `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`
	IsSign    bool   `protobuf:"varint,3,opt,name=Is_sign,json=IsSign,proto3" json:"Is_sign,omitempty"`
	FromId    int32  `protobuf:"varint,4,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`
	FromKeyId uint64 `protobuf:"varint,5,opt,name=From_key_id,json=FromKeyId,proto3" json:"From_key_id,omitempty"`
}

func (m *HandleToggleSignaturesReq) Reset()         { *m = HandleToggleSignaturesReq{} }
func (m *HandleToggleSignaturesReq) String() string { return proto.CompactTextString(m) }
func (*HandleToggleSignaturesReq) ProtoMessage()    {}
func (*HandleToggleSignaturesReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{106}
}

func (m *HandleToggleSignaturesReq) GetChnlId() int32 {
	if m != nil {
		return m.ChnlId
	}
	return 0
}

func (m *HandleToggleSignaturesReq) GetHashId() int64 {
	if m != nil {
		return m.HashId
	}
	return 0
}

func (m *HandleToggleSignaturesReq) GetIsSign() bool {
	if m != nil {
		return m.IsSign
	}
	return false
}

func (m *HandleToggleSignaturesReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *HandleToggleSignaturesReq) GetFromKeyId() uint64 {
	if m != nil {
		return m.FromKeyId
	}
	return 0
}

type HandleToggleSignaturesRsp struct {
	Results   bool   `protobuf:"varint,1,opt,name=Results,proto3" json:"Results,omitempty"`
	ReplyByte []byte `protobuf:"bytes,2,opt,name=ReplyByte,proto3" json:"ReplyByte,omitempty"`
}

func (m *HandleToggleSignaturesRsp) Reset()         { *m = HandleToggleSignaturesRsp{} }
func (m *HandleToggleSignaturesRsp) String() string { return proto.CompactTextString(m) }
func (*HandleToggleSignaturesRsp) ProtoMessage()    {}
func (*HandleToggleSignaturesRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{107}
}

func (m *HandleToggleSignaturesRsp) GetResults() bool {
	if m != nil {
		return m.Results
	}
	return false
}

func (m *HandleToggleSignaturesRsp) GetReplyByte() []byte {
	if m != nil {
		return m.ReplyByte
	}
	return nil
}

// @ add by Qingsong at 2019-12-02 for im call channel server to toggle channel's history hidden.
type ChannelToggleHistoryHiddenReq struct {
	ChnlId int32 `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`
	HashId int64 `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`
	FromId int32 `protobuf:"varint,3,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`
	UserId int32 `protobuf:"varint,4,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
	IsHide bool  `protobuf:"varint,5,opt,name=Is_hide,json=IsHide,proto3" json:"Is_hide,omitempty"`
}

func (m *ChannelToggleHistoryHiddenReq) Reset()         { *m = ChannelToggleHistoryHiddenReq{} }
func (m *ChannelToggleHistoryHiddenReq) String() string { return proto.CompactTextString(m) }
func (*ChannelToggleHistoryHiddenReq) ProtoMessage()    {}
func (*ChannelToggleHistoryHiddenReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{108}
}

func (m *ChannelToggleHistoryHiddenReq) GetChnlId() int32 {
	if m != nil {
		return m.ChnlId
	}
	return 0
}

func (m *ChannelToggleHistoryHiddenReq) GetHashId() int64 {
	if m != nil {
		return m.HashId
	}
	return 0
}

func (m *ChannelToggleHistoryHiddenReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ChannelToggleHistoryHiddenReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChannelToggleHistoryHiddenReq) GetIsHide() bool {
	if m != nil {
		return m.IsHide
	}
	return false
}

type ChannelToggleHistoryHiddenRsp struct {
	Results   bool   `protobuf:"varint,1,opt,name=Results,proto3" json:"Results,omitempty"`
	ReplyByte []byte `protobuf:"bytes,2,opt,name=ReplyByte,proto3" json:"ReplyByte,omitempty"`
}

func (m *ChannelToggleHistoryHiddenRsp) Reset()         { *m = ChannelToggleHistoryHiddenRsp{} }
func (m *ChannelToggleHistoryHiddenRsp) String() string { return proto.CompactTextString(m) }
func (*ChannelToggleHistoryHiddenRsp) ProtoMessage()    {}
func (*ChannelToggleHistoryHiddenRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{109}
}

func (m *ChannelToggleHistoryHiddenRsp) GetResults() bool {
	if m != nil {
		return m.Results
	}
	return false
}

func (m *ChannelToggleHistoryHiddenRsp) GetReplyByte() []byte {
	if m != nil {
		return m.ReplyByte
	}
	return nil
}

// @ add by qingsong at 2019-12-23 for im call channel server to set channel ban mode.
type SetChannelBanModeReq struct {
	ChnlId  int32         `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`
	HashId  int64         `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`
	FromId  int32         `protobuf:"varint,3,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`
	BanMode bool          `protobuf:"varint,4,opt,name=Ban_mode,json=BanMode,proto3" json:"Ban_mode,omitempty"`
	Debug   *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *SetChannelBanModeReq) Reset()         { *m = SetChannelBanModeReq{} }
func (m *SetChannelBanModeReq) String() string { return proto.CompactTextString(m) }
func (*SetChannelBanModeReq) ProtoMessage()    {}
func (*SetChannelBanModeReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{110}
}

func (m *SetChannelBanModeReq) GetChnlId() int32 {
	if m != nil {
		return m.ChnlId
	}
	return 0
}

func (m *SetChannelBanModeReq) GetHashId() int64 {
	if m != nil {
		return m.HashId
	}
	return 0
}

func (m *SetChannelBanModeReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *SetChannelBanModeReq) GetBanMode() bool {
	if m != nil {
		return m.BanMode
	}
	return false
}

func (m *SetChannelBanModeReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type SetChannelBanModeRsp struct {
	ReplyCode int32  `protobuf:"varint,1,opt,name=Reply_code,json=ReplyCode,proto3" json:"Reply_code,omitempty"`
	ReplyBuff []byte `protobuf:"bytes,2,opt,name=Reply_buff,json=ReplyBuff,proto3" json:"Reply_buff,omitempty"`
}

func (m *SetChannelBanModeRsp) Reset()         { *m = SetChannelBanModeRsp{} }
func (m *SetChannelBanModeRsp) String() string { return proto.CompactTextString(m) }
func (*SetChannelBanModeRsp) ProtoMessage()    {}
func (*SetChannelBanModeRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{111}
}

func (m *SetChannelBanModeRsp) GetReplyCode() int32 {
	if m != nil {
		return m.ReplyCode
	}
	return 0
}

func (m *SetChannelBanModeRsp) GetReplyBuff() []byte {
	if m != nil {
		return m.ReplyBuff
	}
	return nil
}

// @ add by qingsong at 2019-12-23 for get user own channels.
type CHsGetUserOwnChannelsReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=User_id,json=UserId,proto3" json:"User_id,omitempty"`
}

func (m *CHsGetUserOwnChannelsReq) Reset()         { *m = CHsGetUserOwnChannelsReq{} }
func (m *CHsGetUserOwnChannelsReq) String() string { return proto.CompactTextString(m) }
func (*CHsGetUserOwnChannelsReq) ProtoMessage()    {}
func (*CHsGetUserOwnChannelsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{112}
}

func (m *CHsGetUserOwnChannelsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type ChannelBrief struct {
	ChnlId               int32  `protobuf:"varint,1,opt,name=Chnl_id,json=ChnlId,proto3" json:"Chnl_id,omitempty"`
	HashId               int64  `protobuf:"varint,2,opt,name=Hash_id,json=HashId,proto3" json:"Hash_id,omitempty"`
	BroadcastOrMegagroup bool   `protobuf:"varint,3,opt,name=Broadcast_or_megagroup,json=BroadcastOrMegagroup,proto3" json:"Broadcast_or_megagroup,omitempty"`
	Title                string `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
}

func (m *ChannelBrief) Reset()                    { *m = ChannelBrief{} }
func (m *ChannelBrief) String() string            { return proto.CompactTextString(m) }
func (*ChannelBrief) ProtoMessage()               {}
func (*ChannelBrief) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{113} }

func (m *ChannelBrief) GetChnlId() int32 {
	if m != nil {
		return m.ChnlId
	}
	return 0
}

func (m *ChannelBrief) GetHashId() int64 {
	if m != nil {
		return m.HashId
	}
	return 0
}

func (m *ChannelBrief) GetBroadcastOrMegagroup() bool {
	if m != nil {
		return m.BroadcastOrMegagroup
	}
	return false
}

func (m *ChannelBrief) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type CHsGetUserOwnChannelsRsp struct {
	Chnls []*ChannelBrief `protobuf:"bytes,1,rep,name=Chnls" json:"Chnls,omitempty"`
}

func (m *CHsGetUserOwnChannelsRsp) Reset()         { *m = CHsGetUserOwnChannelsRsp{} }
func (m *CHsGetUserOwnChannelsRsp) String() string { return proto.CompactTextString(m) }
func (*CHsGetUserOwnChannelsRsp) ProtoMessage()    {}
func (*CHsGetUserOwnChannelsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{114}
}

func (m *CHsGetUserOwnChannelsRsp) GetChnls() []*ChannelBrief {
	if m != nil {
		return m.Chnls
	}
	return nil
}

// add by qingsong at 2020-04-20 for restrict channel.
type RestrictChannelReq struct {
	ChannelId int32  `protobuf:"varint,1,opt,name=Channel_id,json=ChannelId,proto3" json:"Channel_id,omitempty"`
	Platform  string `protobuf:"bytes,2,opt,name=Platform,proto3" json:"Platform,omitempty"`
	Reason    string `protobuf:"bytes,3,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Text      string `protobuf:"bytes,4,opt,name=Text,proto3" json:"Text,omitempty"`
}

func (m *RestrictChannelReq) Reset()         { *m = RestrictChannelReq{} }
func (m *RestrictChannelReq) String() string { return proto.CompactTextString(m) }
func (*RestrictChannelReq) ProtoMessage()    {}
func (*RestrictChannelReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{115}
}

func (m *RestrictChannelReq) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *RestrictChannelReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *RestrictChannelReq) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *RestrictChannelReq) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type RestrictChannelRsp struct {
	ReplyCode int32  `protobuf:"varint,1,opt,name=Reply_code,json=ReplyCode,proto3" json:"Reply_code,omitempty"`
	ReplyInfo string `protobuf:"bytes,2,opt,name=Reply_info,json=ReplyInfo,proto3" json:"Reply_info,omitempty"`
}

func (m *RestrictChannelRsp) Reset()         { *m = RestrictChannelRsp{} }
func (m *RestrictChannelRsp) String() string { return proto.CompactTextString(m) }
func (*RestrictChannelRsp) ProtoMessage()    {}
func (*RestrictChannelRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{116}
}

func (m *RestrictChannelRsp) GetReplyCode() int32 {
	if m != nil {
		return m.ReplyCode
	}
	return 0
}

func (m *RestrictChannelRsp) GetReplyInfo() string {
	if m != nil {
		return m.ReplyInfo
	}
	return ""
}

// @ added by qingsong for join channel by qr-code.
type JoinByQrCodeReq struct {
	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	QrCode string `protobuf:"bytes,2,opt,name=QrCode,proto3" json:"QrCode,omitempty"`
}

func (m *JoinByQrCodeReq) Reset()         { *m = JoinByQrCodeReq{} }
func (m *JoinByQrCodeReq) String() string { return proto.CompactTextString(m) }
func (*JoinByQrCodeReq) ProtoMessage()    {}
func (*JoinByQrCodeReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{117}
}

func (m *JoinByQrCodeReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *JoinByQrCodeReq) GetQrCode() string {
	if m != nil {
		return m.QrCode
	}
	return ""
}

type JoinByQrCodeRsp struct {
}

func (m *JoinByQrCodeRsp) Reset()         { *m = JoinByQrCodeRsp{} }
func (m *JoinByQrCodeRsp) String() string { return proto.CompactTextString(m) }
func (*JoinByQrCodeRsp) ProtoMessage()    {}
func (*JoinByQrCodeRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{118}
}

// @ added by qingsong at 2020.12.01 for live start
// rpc GroupLiveStart(LiveStartReq) returns (LiveStarRsp) {}
// 开播请求
type LiveStartReq struct {
	BeginAt  int32  `protobuf:"varint,1,opt,name=BeginAt,proto3" json:"BeginAt,omitempty"`
	GroupId  int32  `protobuf:"varint,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	LiveStat int32  `protobuf:"varint,3,opt,name=LiveStat,proto3" json:"LiveStat,omitempty"`
	LiveType int32  `protobuf:"varint,4,opt,name=LiveType,proto3" json:"LiveType,omitempty"`
	LiveUser int32  `protobuf:"varint,5,opt,name=LiveUser,proto3" json:"LiveUser,omitempty"`
	LiveRoom int32  `protobuf:"varint,6,opt,name=LiveRoom,proto3" json:"LiveRoom,omitempty"`
	LivePkId int64  `protobuf:"varint,7,opt,name=LivePkId,proto3" json:"LivePkId,omitempty"`
	LiveFlag string `protobuf:"bytes,8,opt,name=LiveFlag,proto3" json:"LiveFlag,omitempty"`
	LiveName string `protobuf:"bytes,9,opt,name=LiveName,proto3" json:"LiveName,omitempty"`
	LiveIcon string `protobuf:"bytes,10,opt,name=LiveIcon,proto3" json:"LiveIcon,omitempty"`
}

func (m *LiveStartReq) Reset()                    { *m = LiveStartReq{} }
func (m *LiveStartReq) String() string            { return proto.CompactTextString(m) }
func (*LiveStartReq) ProtoMessage()               {}
func (*LiveStartReq) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{119} }

func (m *LiveStartReq) GetBeginAt() int32 {
	if m != nil {
		return m.BeginAt
	}
	return 0
}

func (m *LiveStartReq) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *LiveStartReq) GetLiveStat() int32 {
	if m != nil {
		return m.LiveStat
	}
	return 0
}

func (m *LiveStartReq) GetLiveType() int32 {
	if m != nil {
		return m.LiveType
	}
	return 0
}

func (m *LiveStartReq) GetLiveUser() int32 {
	if m != nil {
		return m.LiveUser
	}
	return 0
}

func (m *LiveStartReq) GetLiveRoom() int32 {
	if m != nil {
		return m.LiveRoom
	}
	return 0
}

func (m *LiveStartReq) GetLivePkId() int64 {
	if m != nil {
		return m.LivePkId
	}
	return 0
}

func (m *LiveStartReq) GetLiveFlag() string {
	if m != nil {
		return m.LiveFlag
	}
	return ""
}

func (m *LiveStartReq) GetLiveName() string {
	if m != nil {
		return m.LiveName
	}
	return ""
}

func (m *LiveStartReq) GetLiveIcon() string {
	if m != nil {
		return m.LiveIcon
	}
	return ""
}

// 开播返回
type LiveStartRsp struct {
	ReplyCode GroupLiveReplyCode `protobuf:"varint,1,opt,name=ReplyCode,proto3,enum=pbchannelserver.GroupLiveReplyCode" json:"ReplyCode,omitempty"`
	InviteUrl string             `protobuf:"bytes,2,opt,name=InviteUrl,proto3" json:"InviteUrl,omitempty"`
}

func (m *LiveStartRsp) Reset()                    { *m = LiveStartRsp{} }
func (m *LiveStartRsp) String() string            { return proto.CompactTextString(m) }
func (*LiveStartRsp) ProtoMessage()               {}
func (*LiveStartRsp) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{120} }

func (m *LiveStartRsp) GetReplyCode() GroupLiveReplyCode {
	if m != nil {
		return m.ReplyCode
	}
	return GroupLiveReplyCode_Successfuly
}

func (m *LiveStartRsp) GetInviteUrl() string {
	if m != nil {
		return m.InviteUrl
	}
	return ""
}

// @ added by qingsong at 2020.12.01 for live stop
// rpc GroupLiveStop(LiveStopReq) returns (LiveStopRsp) {}
// 停播请求
type LiveStopReq struct {
	GroupId  int32  `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	LiveUser int32  `protobuf:"varint,2,opt,name=LiveUser,proto3" json:"LiveUser,omitempty"`
	LiveStat int32  `protobuf:"varint,3,opt,name=LiveStat,proto3" json:"LiveStat,omitempty"`
	LiveCode string `protobuf:"bytes,4,opt,name=LiveCode,proto3" json:"LiveCode,omitempty"`
}

func (m *LiveStopReq) Reset()                    { *m = LiveStopReq{} }
func (m *LiveStopReq) String() string            { return proto.CompactTextString(m) }
func (*LiveStopReq) ProtoMessage()               {}
func (*LiveStopReq) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{121} }

func (m *LiveStopReq) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *LiveStopReq) GetLiveUser() int32 {
	if m != nil {
		return m.LiveUser
	}
	return 0
}

func (m *LiveStopReq) GetLiveStat() int32 {
	if m != nil {
		return m.LiveStat
	}
	return 0
}

func (m *LiveStopReq) GetLiveCode() string {
	if m != nil {
		return m.LiveCode
	}
	return ""
}

// 停播应答
type LiveStopRsp struct {
	RetCode GroupLiveReplyCode `protobuf:"varint,1,opt,name=RetCode,proto3,enum=pbchannelserver.GroupLiveReplyCode" json:"RetCode,omitempty"`
	Invited int32              `protobuf:"varint,2,opt,name=Invited,proto3" json:"Invited,omitempty"`
}

func (m *LiveStopRsp) Reset()                    { *m = LiveStopRsp{} }
func (m *LiveStopRsp) String() string            { return proto.CompactTextString(m) }
func (*LiveStopRsp) ProtoMessage()               {}
func (*LiveStopRsp) Descriptor() ([]byte, []int) { return fileDescriptorPbchannelserver, []int{122} }

func (m *LiveStopRsp) GetRetCode() GroupLiveReplyCode {
	if m != nil {
		return m.RetCode
	}
	return GroupLiveReplyCode_Successfuly
}

func (m *LiveStopRsp) GetInvited() int32 {
	if m != nil {
		return m.Invited
	}
	return 0
}

// @ added by qingsong at 2020.12.01 for live user invite link
// 获取主播邀请链接
type GetLiveInviteUrlReq struct {
	BeginAt  int32 `protobuf:"varint,1,opt,name=BeginAt,proto3" json:"BeginAt,omitempty"`
	GroupId  int32 `protobuf:"varint,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	LiveUser int32 `protobuf:"varint,3,opt,name=LiveUser,proto3" json:"LiveUser,omitempty"`
}

func (m *GetLiveInviteUrlReq) Reset()         { *m = GetLiveInviteUrlReq{} }
func (m *GetLiveInviteUrlReq) String() string { return proto.CompactTextString(m) }
func (*GetLiveInviteUrlReq) ProtoMessage()    {}
func (*GetLiveInviteUrlReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{123}
}

func (m *GetLiveInviteUrlReq) GetBeginAt() int32 {
	if m != nil {
		return m.BeginAt
	}
	return 0
}

func (m *GetLiveInviteUrlReq) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GetLiveInviteUrlReq) GetLiveUser() int32 {
	if m != nil {
		return m.LiveUser
	}
	return 0
}

type GetLiveInviteUrlRsp struct {
	ReplyCode GroupLiveReplyCode `protobuf:"varint,1,opt,name=ReplyCode,proto3,enum=pbchannelserver.GroupLiveReplyCode" json:"ReplyCode,omitempty"`
	InviteUrl string             `protobuf:"bytes,2,opt,name=InviteUrl,proto3" json:"InviteUrl,omitempty"`
}

func (m *GetLiveInviteUrlRsp) Reset()         { *m = GetLiveInviteUrlRsp{} }
func (m *GetLiveInviteUrlRsp) String() string { return proto.CompactTextString(m) }
func (*GetLiveInviteUrlRsp) ProtoMessage()    {}
func (*GetLiveInviteUrlRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{124}
}

func (m *GetLiveInviteUrlRsp) GetReplyCode() GroupLiveReplyCode {
	if m != nil {
		return m.ReplyCode
	}
	return GroupLiveReplyCode_Successfuly
}

func (m *GetLiveInviteUrlRsp) GetInviteUrl() string {
	if m != nil {
		return m.InviteUrl
	}
	return ""
}

// rpc EditLiveInfo(EditLiveInfoReq) returns (EditLiveInfoRsp) {}
// 编辑请求
type EditLiveInfoReq struct {
	BeginAt  int32  `protobuf:"varint,1,opt,name=BeginAt,proto3" json:"BeginAt,omitempty"`
	GroupId  int32  `protobuf:"varint,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	LiveStat int32  `protobuf:"varint,3,opt,name=LiveStat,proto3" json:"LiveStat,omitempty"`
	LiveType int32  `protobuf:"varint,4,opt,name=LiveType,proto3" json:"LiveType,omitempty"`
	LiveUser int32  `protobuf:"varint,5,opt,name=LiveUser,proto3" json:"LiveUser,omitempty"`
	LiveRoom int32  `protobuf:"varint,6,opt,name=LiveRoom,proto3" json:"LiveRoom,omitempty"`
	LiveFlag string `protobuf:"bytes,7,opt,name=LiveFlag,proto3" json:"LiveFlag,omitempty"`
	LiveName string `protobuf:"bytes,8,opt,name=LiveName,proto3" json:"LiveName,omitempty"`
	LiveIcon string `protobuf:"bytes,9,opt,name=LiveIcon,proto3" json:"LiveIcon,omitempty"`
}

func (m *EditLiveInfoReq) Reset()         { *m = EditLiveInfoReq{} }
func (m *EditLiveInfoReq) String() string { return proto.CompactTextString(m) }
func (*EditLiveInfoReq) ProtoMessage()    {}
func (*EditLiveInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{125}
}

func (m *EditLiveInfoReq) GetBeginAt() int32 {
	if m != nil {
		return m.BeginAt
	}
	return 0
}

func (m *EditLiveInfoReq) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *EditLiveInfoReq) GetLiveStat() int32 {
	if m != nil {
		return m.LiveStat
	}
	return 0
}

func (m *EditLiveInfoReq) GetLiveType() int32 {
	if m != nil {
		return m.LiveType
	}
	return 0
}

func (m *EditLiveInfoReq) GetLiveUser() int32 {
	if m != nil {
		return m.LiveUser
	}
	return 0
}

func (m *EditLiveInfoReq) GetLiveRoom() int32 {
	if m != nil {
		return m.LiveRoom
	}
	return 0
}

func (m *EditLiveInfoReq) GetLiveFlag() string {
	if m != nil {
		return m.LiveFlag
	}
	return ""
}

func (m *EditLiveInfoReq) GetLiveName() string {
	if m != nil {
		return m.LiveName
	}
	return ""
}

func (m *EditLiveInfoReq) GetLiveIcon() string {
	if m != nil {
		return m.LiveIcon
	}
	return ""
}

type EditLiveInfoRsp struct {
	ReplyCode GroupLiveReplyCode `protobuf:"varint,1,opt,name=ReplyCode,proto3,enum=pbchannelserver.GroupLiveReplyCode" json:"ReplyCode,omitempty"`
	ReplyData string             `protobuf:"bytes,2,opt,name=ReplyData,proto3" json:"ReplyData,omitempty"`
}

func (m *EditLiveInfoRsp) Reset()         { *m = EditLiveInfoRsp{} }
func (m *EditLiveInfoRsp) String() string { return proto.CompactTextString(m) }
func (*EditLiveInfoRsp) ProtoMessage()    {}
func (*EditLiveInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{126}
}

func (m *EditLiveInfoRsp) GetReplyCode() GroupLiveReplyCode {
	if m != nil {
		return m.ReplyCode
	}
	return GroupLiveReplyCode_Successfuly
}

func (m *EditLiveInfoRsp) GetReplyData() string {
	if m != nil {
		return m.ReplyData
	}
	return ""
}

// @ brief : group live rights check.
// rpc GroupLiveCheck(GroupLiveCheckReq)returns(GroupLiveCheckRsp){}
type GroupLiveCheckReq struct {
	GroupId  int32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	LiveUser int32 `protobuf:"varint,2,opt,name=LiveUser,proto3" json:"LiveUser,omitempty"`
}

func (m *GroupLiveCheckReq) Reset()         { *m = GroupLiveCheckReq{} }
func (m *GroupLiveCheckReq) String() string { return proto.CompactTextString(m) }
func (*GroupLiveCheckReq) ProtoMessage()    {}
func (*GroupLiveCheckReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{127}
}

func (m *GroupLiveCheckReq) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupLiveCheckReq) GetLiveUser() int32 {
	if m != nil {
		return m.LiveUser
	}
	return 0
}

type GroupLiveCheckRsp struct {
	ReplyCode GroupLiveReplyCode `protobuf:"varint,1,opt,name=ReplyCode,proto3,enum=pbchannelserver.GroupLiveReplyCode" json:"ReplyCode,omitempty"`
	ReplyData string             `protobuf:"bytes,2,opt,name=ReplyData,proto3" json:"ReplyData,omitempty"`
}

func (m *GroupLiveCheckRsp) Reset()         { *m = GroupLiveCheckRsp{} }
func (m *GroupLiveCheckRsp) String() string { return proto.CompactTextString(m) }
func (*GroupLiveCheckRsp) ProtoMessage()    {}
func (*GroupLiveCheckRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{128}
}

func (m *GroupLiveCheckRsp) GetReplyCode() GroupLiveReplyCode {
	if m != nil {
		return m.ReplyCode
	}
	return GroupLiveReplyCode_Successfuly
}

func (m *GroupLiveCheckRsp) GetReplyData() string {
	if m != nil {
		return m.ReplyData
	}
	return ""
}

// @ brief : get live invite user count.
// rpc GetLiveInviteCnt(GetLiveInviteCntReq) returns (GetLiveInviteCntRsp) {}
type GetLiveInviteCntReq struct {
	GroupId  int32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	LiveUser int32 `protobuf:"varint,2,opt,name=LiveUser,proto3" json:"LiveUser,omitempty"`
}

func (m *GetLiveInviteCntReq) Reset()         { *m = GetLiveInviteCntReq{} }
func (m *GetLiveInviteCntReq) String() string { return proto.CompactTextString(m) }
func (*GetLiveInviteCntReq) ProtoMessage()    {}
func (*GetLiveInviteCntReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{129}
}

func (m *GetLiveInviteCntReq) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GetLiveInviteCntReq) GetLiveUser() int32 {
	if m != nil {
		return m.LiveUser
	}
	return 0
}

type GetLiveInviteCntRsp struct {
	RetCode GroupLiveReplyCode `protobuf:"varint,1,opt,name=RetCode,proto3,enum=pbchannelserver.GroupLiveReplyCode" json:"RetCode,omitempty"`
	Invited int32              `protobuf:"varint,2,opt,name=Invited,proto3" json:"Invited,omitempty"`
}

func (m *GetLiveInviteCntRsp) Reset()         { *m = GetLiveInviteCntRsp{} }
func (m *GetLiveInviteCntRsp) String() string { return proto.CompactTextString(m) }
func (*GetLiveInviteCntRsp) ProtoMessage()    {}
func (*GetLiveInviteCntRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{130}
}

func (m *GetLiveInviteCntRsp) GetRetCode() GroupLiveReplyCode {
	if m != nil {
		return m.RetCode
	}
	return GroupLiveReplyCode_Successfuly
}

func (m *GetLiveInviteCntRsp) GetInvited() int32 {
	if m != nil {
		return m.Invited
	}
	return 0
}

// rpc CheckUserInGroup(CheckUserInGroupReq) returns (CheckUserInGroupRsp)
type CheckUserInGroupReq struct {
	GroupId int32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	UserId  int32 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *CheckUserInGroupReq) Reset()         { *m = CheckUserInGroupReq{} }
func (m *CheckUserInGroupReq) String() string { return proto.CompactTextString(m) }
func (*CheckUserInGroupReq) ProtoMessage()    {}
func (*CheckUserInGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{131}
}

func (m *CheckUserInGroupReq) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *CheckUserInGroupReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CheckUserInGroupRsp struct {
	InGroup bool `protobuf:"varint,1,opt,name=InGroup,proto3" json:"InGroup,omitempty"`
}

func (m *CheckUserInGroupRsp) Reset()         { *m = CheckUserInGroupRsp{} }
func (m *CheckUserInGroupRsp) String() string { return proto.CompactTextString(m) }
func (*CheckUserInGroupRsp) ProtoMessage()    {}
func (*CheckUserInGroupRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{132}
}

func (m *CheckUserInGroupRsp) GetInGroup() bool {
	if m != nil {
		return m.InGroup
	}
	return false
}

// @ brief : Get group user ID by paging.
// rpc GetGroupUserIds(GetGroupUserIdsReq) returns (GetGroupUserIdsRsp) {}
type GetGroupUserIdsReq struct {
	ChanId int32 `protobuf:"varint,1,opt,name=chanId,proto3" json:"chanId,omitempty"`
	UserId int32 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Length int32 `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
}

func (m *GetGroupUserIdsReq) Reset()         { *m = GetGroupUserIdsReq{} }
func (m *GetGroupUserIdsReq) String() string { return proto.CompactTextString(m) }
func (*GetGroupUserIdsReq) ProtoMessage()    {}
func (*GetGroupUserIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{133}
}

func (m *GetGroupUserIdsReq) GetChanId() int32 {
	if m != nil {
		return m.ChanId
	}
	return 0
}

func (m *GetGroupUserIdsReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetGroupUserIdsReq) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetGroupUserIdsReq) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

type GetGroupUserIdsRsp struct {
	RetNo GroupLiveReplyCode `protobuf:"varint,1,opt,name=RetNo,proto3,enum=pbchannelserver.GroupLiveReplyCode" json:"RetNo,omitempty"`
	Total int32              `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Count int32              `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`
	Users []int32            `protobuf:"varint,4,rep,packed,name=Users" json:"Users,omitempty"`
}

func (m *GetGroupUserIdsRsp) Reset()         { *m = GetGroupUserIdsRsp{} }
func (m *GetGroupUserIdsRsp) String() string { return proto.CompactTextString(m) }
func (*GetGroupUserIdsRsp) ProtoMessage()    {}
func (*GetGroupUserIdsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{134}
}

func (m *GetGroupUserIdsRsp) GetRetNo() GroupLiveReplyCode {
	if m != nil {
		return m.RetNo
	}
	return GroupLiveReplyCode_Successfuly
}

func (m *GetGroupUserIdsRsp) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *GetGroupUserIdsRsp) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetGroupUserIdsRsp) GetUsers() []int32 {
	if m != nil {
		return m.Users
	}
	return nil
}

// rpc GetHotGroups(GetHotGroupsReq) returns (GetHotGroupsRsp){}
type GetHotGroupsReq struct {
	FromId int32         `protobuf:"varint,1,opt,name=From_id,json=FromId,proto3" json:"From_id,omitempty"`
	Limit  int32         `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Level  int32         `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`
	VerNo  int32         `protobuf:"varint,4,opt,name=VerNo,proto3" json:"VerNo,omitempty"`
	Hash   uint32        `protobuf:"varint,5,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *GetHotGroupsReq) Reset()         { *m = GetHotGroupsReq{} }
func (m *GetHotGroupsReq) String() string { return proto.CompactTextString(m) }
func (*GetHotGroupsReq) ProtoMessage()    {}
func (*GetHotGroupsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{135}
}

func (m *GetHotGroupsReq) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *GetHotGroupsReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetHotGroupsReq) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GetHotGroupsReq) GetVerNo() int32 {
	if m != nil {
		return m.VerNo
	}
	return 0
}

func (m *GetHotGroupsReq) GetHash() uint32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *GetHotGroupsReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type GetHotGroupsRsp struct {
	Error int32         `protobuf:"varint,1,opt,name=Error,proto3" json:"Error,omitempty"`
	Bytes []byte        `protobuf:"bytes,2,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	Hash  uint32        `protobuf:"varint,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Debug *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *GetHotGroupsRsp) Reset()         { *m = GetHotGroupsRsp{} }
func (m *GetHotGroupsRsp) String() string { return proto.CompactTextString(m) }
func (*GetHotGroupsRsp) ProtoMessage()    {}
func (*GetHotGroupsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorPbchannelserver, []int{136}
}

func (m *GetHotGroupsRsp) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *GetHotGroupsRsp) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *GetHotGroupsRsp) GetHash() uint32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *GetHotGroupsRsp) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func init() {
	proto.RegisterType((*GetGroupsForDiscussionReq)(nil), "pbchannelserver.GetGroupsForDiscussionReq")
	proto.RegisterType((*GetGroupsForDiscussionRsp)(nil), "pbchannelserver.GetGroupsForDiscussionRsp")
	proto.RegisterType((*SetDiscussionGroupReq)(nil), "pbchannelserver.SetDiscussionGroupReq")
	proto.RegisterType((*SetDiscussionGroupRsp)(nil), "pbchannelserver.SetDiscussionGroupRsp")
	proto.RegisterType((*ReqCreateSuperChat)(nil), "pbchannelserver.ReqCreateSuperChat")
	proto.RegisterType((*ReqIsChannelAdminOrCreator)(nil), "pbchannelserver.ReqIsChannelAdminOrCreator")
	proto.RegisterType((*ReqGetChannelMembersCount)(nil), "pbchannelserver.ReqGetChannelMembersCount")
	proto.RegisterType((*ReplyGetChannelMembersCount)(nil), "pbchannelserver.ReplyGetChannelMembersCount")
	proto.RegisterType((*ReqSendLogMsg)(nil), "pbchannelserver.ReqSendLogMsg")
	proto.RegisterType((*ForwardMsg)(nil), "pbchannelserver.ForwardMsg")
	proto.RegisterType((*ReqForwardMessageToChannel)(nil), "pbchannelserver.ReqForwardMessageToChannel")
	proto.RegisterType((*ReqMigrateToChannel)(nil), "pbchannelserver.ReqMigrateToChannel")
	proto.RegisterType((*ReplyMigrateToChannel)(nil), "pbchannelserver.ReplyMigrateToChannel")
	proto.RegisterType((*ReqSearchChannelMediaMessage)(nil), "pbchannelserver.ReqSearchChannelMediaMessage")
	proto.RegisterType((*SearchChannelMsgReq)(nil), "pbchannelserver.SearchChannelMsgReq")
	proto.RegisterType((*SearchChannelMsgResp)(nil), "pbchannelserver.SearchChannelMsgResp")
	proto.RegisterType((*ReplyChannelData)(nil), "pbchannelserver.ReplyChannelData")
	proto.RegisterType((*DialogAction)(nil), "pbchannelserver.DialogAction")
	proto.RegisterType((*EditChannelLocationReq)(nil), "pbchannelserver.EditChannelLocationReq")
	proto.RegisterType((*EditChannelLocationResp)(nil), "pbchannelserver.EditChannelLocationResp")
	proto.RegisterType((*TransferGroupOwnerReq)(nil), "pbchannelserver.TransferGroupOwnerReq")
	proto.RegisterType((*TransferGroupOwnerResp)(nil), "pbchannelserver.TransferGroupOwnerResp")
	proto.RegisterType((*TransferGroupOwnerByIdReq)(nil), "pbchannelserver.TransferGroupOwnerByIdReq")
	proto.RegisterType((*TransferGroupOwnerByIdRsp)(nil), "pbchannelserver.TransferGroupOwnerByIdRsp")
	proto.RegisterType((*UpdateChannelReadoutbox)(nil), "pbchannelserver.UpdateChannelReadoutbox")
	proto.RegisterType((*CheckChannelOrInsertDlgNotClearDraft)(nil), "pbchannelserver.CheckChannelOrInsertDlgNotClearDraft")
	proto.RegisterType((*UpdateOrInsertUserChanDlgNotClearDraft)(nil), "pbchannelserver.UpdateOrInsertUserChanDlgNotClearDraft")
	proto.RegisterType((*SetSuperGroupMsg)(nil), "pbchannelserver.SetSuperGroupMsg")
	proto.RegisterType((*UpdateOrInsertUserChanDlg)(nil), "pbchannelserver.UpdateOrInsertUserChanDlg")
	proto.RegisterType((*CheckChannelOrInsert)(nil), "pbchannelserver.CheckChannelOrInsert")
	proto.RegisterType((*CheckRecDialog)(nil), "pbchannelserver.CheckRecDialog")
	proto.RegisterType((*CheckOrInsertDialog)(nil), "pbchannelserver.CheckOrInsertDialog")
	proto.RegisterType((*DeleteUserDialog)(nil), "pbchannelserver.DeleteUserDialog")
	proto.RegisterType((*UpdatePeerDialogIncr)(nil), "pbchannelserver.UpdatePeerDialogIncr")
	proto.RegisterType((*UpdatePeerDialogIncrCounter)(nil), "pbchannelserver.UpdatePeerDialogIncrCounter")
	proto.RegisterType((*CreateChannelDialog)(nil), "pbchannelserver.CreateChannelDialog")
	proto.RegisterType((*CreateChannelDialogClearUnread)(nil), "pbchannelserver.CreateChannelDialogClearUnread")
	proto.RegisterType((*ReqChannelsReadMessageContents)(nil), "pbchannelserver.ReqChannelsReadMessageContents")
	proto.RegisterType((*ReqEditPrivateChat)(nil), "pbchannelserver.ReqEditPrivateChat")
	proto.RegisterType((*ReqGetChannelMessageExportLink)(nil), "pbchannelserver.ReqGetChannelMessageExportLink")
	proto.RegisterType((*ReqEditEveryoneQuiet)(nil), "pbchannelserver.ReqEditEveryoneQuiet")
	proto.RegisterType((*Channel)(nil), "pbchannelserver.Channel")
	proto.RegisterType((*UpdateNewChannelMessage)(nil), "pbchannelserver.UpdateNewChannelMessage")
	proto.RegisterType((*ReqCreateChannel)(nil), "pbchannelserver.ReqCreateChannel")
	proto.RegisterType((*ReqInviteChannelMember)(nil), "pbchannelserver.ReqInviteChannelMember")
	proto.RegisterType((*ReqJoinChannel)(nil), "pbchannelserver.ReqJoinChannel")
	proto.RegisterType((*ReqKickFromChannel)(nil), "pbchannelserver.ReqKickFromChannel")
	proto.RegisterType((*ReqLeaveChannel)(nil), "pbchannelserver.ReqLeaveChannel")
	proto.RegisterType((*ReqEditChannelTitle)(nil), "pbchannelserver.ReqEditChannelTitle")
	proto.RegisterType((*ReqEditChannelAdmin)(nil), "pbchannelserver.ReqEditChannelAdmin")
	proto.RegisterType((*ReqEditChannelPhoto)(nil), "pbchannelserver.ReqEditChannelPhoto")
	proto.RegisterType((*ChatInviteExported)(nil), "pbchannelserver.chatInviteExported")
	proto.RegisterType((*ReqEditChannelAbout)(nil), "pbchannelserver.ReqEditChannelAbout")
	proto.RegisterType((*ReqDeleteChannelMsg)(nil), "pbchannelserver.ReqDeleteChannelMsg")
	proto.RegisterType((*ReqDeleteChannelSelfHistory)(nil), "pbchannelserver.ReqDeleteChannelSelfHistory")
	proto.RegisterType((*ReqDeleteChannelHistory)(nil), "pbchannelserver.ReqDeleteChannelHistory")
	proto.RegisterType((*ReqUpdatePinnedChannelMessage)(nil), "pbchannelserver.ReqUpdatePinnedChannelMessage")
	proto.RegisterType((*ReqDeleteChannel)(nil), "pbchannelserver.ReqDeleteChannel")
	proto.RegisterType((*ReqReadChannelHistory)(nil), "pbchannelserver.ReqReadChannelHistory")
	proto.RegisterType((*ReqUpdateChannelReadOut)(nil), "pbchannelserver.ReqUpdateChannelReadOut")
	proto.RegisterType((*ReplyUpdateChannelReadOut)(nil), "pbchannelserver.ReplyUpdateChannelReadOut")
	proto.RegisterType((*ReqGetChannelDifference)(nil), "pbchannelserver.ReqGetChannelDifference")
	proto.RegisterType((*ReplyGetChannelDifferenceEmpty)(nil), "pbchannelserver.ReplyGetChannelDifferenceEmpty")
	proto.RegisterType((*ReplyGetChannelDifferenceTooLong)(nil), "pbchannelserver.ReplyGetChannelDifferenceTooLong")
	proto.RegisterType((*ReqGetChannelMsgHistory)(nil), "pbchannelserver.ReqGetChannelMsgHistory")
	proto.RegisterType((*ReqGetParticipants)(nil), "pbchannelserver.ReqGetParticipants")
	proto.RegisterType((*ReqGetParticipant)(nil), "pbchannelserver.ReqGetParticipant")
	proto.RegisterType((*ReqGetChannelMessagesByMsgsId)(nil), "pbchannelserver.ReqGetChannelMessagesByMsgsId")
	proto.RegisterType((*ReqGetChannelCommonDialogs)(nil), "pbchannelserver.ReqGetChannelCommonDialogs")
	proto.RegisterType((*ChannelDialog)(nil), "pbchannelserver.ChannelDialog")
	proto.RegisterType((*ChannelDialogAndMsg)(nil), "pbchannelserver.ChannelDialogAndMsg")
	proto.RegisterType((*ChannelDialogAndMsgs)(nil), "pbchannelserver.ChannelDialogAndMsgs")
	proto.RegisterType((*UserMsg)(nil), "pbchannelserver.UserMsg")
	proto.RegisterType((*ReqGetChannelAdminLog)(nil), "pbchannelserver.ReqGetChannelAdminLog")
	proto.RegisterType((*ChannelAdminLogEventFilter)(nil), "pbchannelserver.ChannelAdminLogEventFilter")
	proto.RegisterType((*ReqImportChatInvite)(nil), "pbchannelserver.ReqImportChatInvite")
	proto.RegisterType((*ReqEditBanChannelUser)(nil), "pbchannelserver.ReqEditBanChannelUser")
	proto.RegisterType((*ReqGetFullChannel)(nil), "pbchannelserver.ReqGetFullChannel")
	proto.RegisterType((*ReqGetFullChannelV2)(nil), "pbchannelserver.ReqGetFullChannelV2")
	proto.RegisterType((*ChatMsgMeta)(nil), "pbchannelserver.ChatMsgMeta")
	proto.RegisterType((*ReqExportChannelLink)(nil), "pbchannelserver.ReqExportChannelLink")
	proto.RegisterType((*ChannelBannedRights)(nil), "pbchannelserver.ChannelBannedRights")
	proto.RegisterType((*ReqChannelToggleInvite)(nil), "pbchannelserver.ReqChannelToggleInvite")
	proto.RegisterType((*ReqGetChannels)(nil), "pbchannelserver.ReqGetChannels")
	proto.RegisterType((*ReqUpdateChannelUserName)(nil), "pbchannelserver.ReqUpdateChannelUserName")
	proto.RegisterType((*ReqCheckChannelUserName)(nil), "pbchannelserver.ReqCheckChannelUserName")
	proto.RegisterType((*ReqChangeGroupAndChannelCrator)(nil), "pbchannelserver.ReqChangeGroupAndChannelCrator")
	proto.RegisterType((*ReqSendRpm)(nil), "pbchannelserver.ReqSendRpm")
	proto.RegisterType((*ReplySendRpm)(nil), "pbchannelserver.ReplySendRpm")
	proto.RegisterType((*ReqEditRpm)(nil), "pbchannelserver.ReqEditRpm")
	proto.RegisterType((*ReqEditRpmV2)(nil), "pbchannelserver.ReqEditRpmV2")
	proto.RegisterType((*ReqEditPayment)(nil), "pbchannelserver.ReqEditPayment")
	proto.RegisterType((*ReplyEditRpm)(nil), "pbchannelserver.ReplyEditRpm")
	proto.RegisterType((*ReqRecvRpm)(nil), "pbchannelserver.ReqRecvRpm")
	proto.RegisterType((*ReplyRecvRpm)(nil), "pbchannelserver.ReplyRecvRpm")
	proto.RegisterType((*ReqMessageReadMentions)(nil), "pbchannelserver.ReqMessageReadMentions")
	proto.RegisterType((*ReplyMessageReadMentions)(nil), "pbchannelserver.ReplyMessageReadMentions")
	proto.RegisterType((*SendVoteReq)(nil), "pbchannelserver.SendVoteReq")
	proto.RegisterType((*SendVoteReply)(nil), "pbchannelserver.SendVoteReply")
	proto.RegisterType((*GetPollResultsReq)(nil), "pbchannelserver.GetPollResultsReq")
	proto.RegisterType((*GetPollResultsReply)(nil), "pbchannelserver.GetPollResultsReply")
	proto.RegisterType((*ChatBannedRights)(nil), "pbchannelserver.ChatBannedRights")
	proto.RegisterType((*EditChatDefaultBannedRightsReq)(nil), "pbchannelserver.EditChatDefaultBannedRightsReq")
	proto.RegisterType((*EditChatDefaultBannedRightsRsp)(nil), "pbchannelserver.EditChatDefaultBannedRightsRsp")
	proto.RegisterType((*HandleToggleSlowModeReq)(nil), "pbchannelserver.HandleToggleSlowModeReq")
	proto.RegisterType((*HandleToggleSlowModeRsp)(nil), "pbchannelserver.HandleToggleSlowModeRsp")
	proto.RegisterType((*HandleToggleSignaturesReq)(nil), "pbchannelserver.HandleToggleSignaturesReq")
	proto.RegisterType((*HandleToggleSignaturesRsp)(nil), "pbchannelserver.HandleToggleSignaturesRsp")
	proto.RegisterType((*ChannelToggleHistoryHiddenReq)(nil), "pbchannelserver.ChannelToggleHistoryHiddenReq")
	proto.RegisterType((*ChannelToggleHistoryHiddenRsp)(nil), "pbchannelserver.ChannelToggleHistoryHiddenRsp")
	proto.RegisterType((*SetChannelBanModeReq)(nil), "pbchannelserver.SetChannelBanModeReq")
	proto.RegisterType((*SetChannelBanModeRsp)(nil), "pbchannelserver.SetChannelBanModeRsp")
	proto.RegisterType((*CHsGetUserOwnChannelsReq)(nil), "pbchannelserver.CHsGetUserOwnChannelsReq")
	proto.RegisterType((*ChannelBrief)(nil), "pbchannelserver.ChannelBrief")
	proto.RegisterType((*CHsGetUserOwnChannelsRsp)(nil), "pbchannelserver.CHsGetUserOwnChannelsRsp")
	proto.RegisterType((*RestrictChannelReq)(nil), "pbchannelserver.RestrictChannelReq")
	proto.RegisterType((*RestrictChannelRsp)(nil), "pbchannelserver.RestrictChannelRsp")
	proto.RegisterType((*JoinByQrCodeReq)(nil), "pbchannelserver.JoinByQrCodeReq")
	proto.RegisterType((*JoinByQrCodeRsp)(nil), "pbchannelserver.JoinByQrCodeRsp")
	proto.RegisterType((*LiveStartReq)(nil), "pbchannelserver.LiveStartReq")
	proto.RegisterType((*LiveStartRsp)(nil), "pbchannelserver.LiveStartRsp")
	proto.RegisterType((*LiveStopReq)(nil), "pbchannelserver.LiveStopReq")
	proto.RegisterType((*LiveStopRsp)(nil), "pbchannelserver.LiveStopRsp")
	proto.RegisterType((*GetLiveInviteUrlReq)(nil), "pbchannelserver.GetLiveInviteUrlReq")
	proto.RegisterType((*GetLiveInviteUrlRsp)(nil), "pbchannelserver.GetLiveInviteUrlRsp")
	proto.RegisterType((*EditLiveInfoReq)(nil), "pbchannelserver.EditLiveInfoReq")
	proto.RegisterType((*EditLiveInfoRsp)(nil), "pbchannelserver.EditLiveInfoRsp")
	proto.RegisterType((*GroupLiveCheckReq)(nil), "pbchannelserver.GroupLiveCheckReq")
	proto.RegisterType((*GroupLiveCheckRsp)(nil), "pbchannelserver.GroupLiveCheckRsp")
	proto.RegisterType((*GetLiveInviteCntReq)(nil), "pbchannelserver.GetLiveInviteCntReq")
	proto.RegisterType((*GetLiveInviteCntRsp)(nil), "pbchannelserver.GetLiveInviteCntRsp")
	proto.RegisterType((*CheckUserInGroupReq)(nil), "pbchannelserver.CheckUserInGroupReq")
	proto.RegisterType((*CheckUserInGroupRsp)(nil), "pbchannelserver.CheckUserInGroupRsp")
	proto.RegisterType((*GetGroupUserIdsReq)(nil), "pbchannelserver.GetGroupUserIdsReq")
	proto.RegisterType((*GetGroupUserIdsRsp)(nil), "pbchannelserver.GetGroupUserIdsRsp")
	proto.RegisterType((*GetHotGroupsReq)(nil), "pbchannelserver.GetHotGroupsReq")
	proto.RegisterType((*GetHotGroupsRsp)(nil), "pbchannelserver.GetHotGroupsRsp")
	proto.RegisterEnum("pbchannelserver.GroupLiveReplyCode", GroupLiveReplyCode_name, GroupLiveReplyCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChannelServer service

type ChannelServerClient interface {
	// 编辑超级群地理位置
	EditChannelLocation(ctx context.Context, in *EditChannelLocationReq, opts ...grpc.CallOption) (*EditChannelLocationResp, error)
	// 创建超级群
	// 超级群转让群主
	TransferGroupOwner(ctx context.Context, in *TransferGroupOwnerReq, opts ...grpc.CallOption) (*TransferGroupOwnerResp, error)
	// 发送媒体
	SendChannelMedia(ctx context.Context, in *pbmessageserver.ReqSendMedia, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 转发消息
	ForwardMessageToChannel(ctx context.Context, in *ReqForwardMessageToChannel, opts ...grpc.CallOption) (*ReplyChannelData, error)
	//    获取历史
	GetHistory(ctx context.Context, in *pbmessageserver.ReqHistory, opts ...grpc.CallOption) (*pbmessageserver.ReplyHistory, error)
	//    发送消息
	SendChannelMessage(ctx context.Context, in *pbmessageserver.RequestSendMessage, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 创建频道
	CreateChannel(ctx context.Context, in *ReqCreateChannel, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 邀请用户进入超级群或者频道
	InviteChannelMember(ctx context.Context, in *ReqInviteChannelMember, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 踢人出超级群或者频道
	KickFromChannel(ctx context.Context, in *ReqKickFromChannel, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 离开超级群或者频道
	LeaveChannel(ctx context.Context, in *ReqLeaveChannel, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 编辑超级群或者频道的标题
	EditChannelTitle(ctx context.Context, in *ReqEditChannelTitle, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 升级或降级超级群或者频道的用户权限
	EditChannelAdmin(ctx context.Context, in *ReqEditChannelAdmin, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 修改超级群或者频道的头像
	EditChannelPhoto(ctx context.Context, in *ReqEditChannelPhoto, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 修改超级群或者频道的描述信息
	EditChannelAbout(ctx context.Context, in *ReqEditChannelAbout, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 删除超级群或者频道的消息
	DeleteChannelMsg(ctx context.Context, in *ReqDeleteChannelMsg, opts ...grpc.CallOption) (*ReplyChannelData, error)
	DeleteChannelSelfHistory(ctx context.Context, in *ReqDeleteChannelSelfHistory, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 清除超级群或者频道某用户的历史
	DeleteChannelHistory(ctx context.Context, in *ReqDeleteChannelHistory, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 置顶超级群或者频道的消息
	UpdatePinnedChannelMessage(ctx context.Context, in *ReqUpdatePinnedChannelMessage, opts ...grpc.CallOption) (*ReplyChannelData, error)
	//    rpc MigrateChatEvent (ReqMigrateChat) returns (ReplyMigrateChat) {
	//    }
	// 修改超级群或者频道的消息读取状态
	ReadChannelHistory(ctx context.Context, in *ReqReadChannelHistory, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 获取超级群或者频道的修正信息
	GetChannelDifference(ctx context.Context, in *ReqGetChannelDifference, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 获取超级群或者频道的历史
	//    rpc GetChannelHistory (ReqGetChannelMsgHistory) returns (ReplyChannelMsgs) {
	//    }
	// 通过消息ID获取超级群或者频道的消息
	GetChannelMessagesByMsgsId(ctx context.Context, in *pbmessageserver.ReqGetChannelMsgsByMsgsId, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 主动加入超级群或者频道
	JoinChannel(ctx context.Context, in *ReqJoinChannel, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 解散超级群或者频道
	DeleteChannel(ctx context.Context, in *ReqDeleteChannel, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 通过用户ID获取超级群或者频道的最后一条消息
	GetChannelsLastMsgsByUserId(ctx context.Context, in *pbmessageserver.ReqGetChannelsLastMsgsByUserId, opts ...grpc.CallOption) (*pbmessageserver.ReplyGetChannelsLastMsgsByUserId, error)
	// 获取超级群或者频道的管理记录
	GetChannelAdminLog(ctx context.Context, in *ReqGetChannelAdminLog, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 通过link加入超级群或者频道
	ImportChatInvite(ctx context.Context, in *ReqImportChatInvite, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 踢人并进组其再次加入超级群或者频道，或者解除该禁止
	EditBanChannelUser(ctx context.Context, in *ReqEditBanChannelUser, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 获取full channel
	GetFullChannel(ctx context.Context, in *ReqGetFullChannel, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 获取full channel
	GetFullChannelV2(ctx context.Context, in *ReqGetFullChannelV2, opts ...grpc.CallOption) (*ReplyChannelData, error)
	GetParticipant(ctx context.Context, in *ReqGetParticipant, opts ...grpc.CallOption) (*ReplyChannelData, error)
	GetParticipants(ctx context.Context, in *ReqGetParticipants, opts ...grpc.CallOption) (*ReplyChannelData, error)
	ExportChannelLink(ctx context.Context, in *ReqExportChannelLink, opts ...grpc.CallOption) (*ReplyChannelData, error)
	ChannelToggleInvite(ctx context.Context, in *ReqChannelToggleInvite, opts ...grpc.CallOption) (*ReplyChannelData, error)
	GetChannels(ctx context.Context, in *ReqGetChannels, opts ...grpc.CallOption) (*ReplyChannelData, error)
	UpdateChannelUserName(ctx context.Context, in *ReqUpdateChannelUserName, opts ...grpc.CallOption) (*ReplyChannelData, error)
	CheckChannelUserName(ctx context.Context, in *ReqCheckChannelUserName, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 超级群全体禁言
	EditEveryoneQuiet(ctx context.Context, in *ReqEditEveryoneQuiet, opts ...grpc.CallOption) (*ReplyChannelData, error)
	GetChannelMessageExportLink(ctx context.Context, in *ReqGetChannelMessageExportLink, opts ...grpc.CallOption) (*ReplyChannelData, error)
	EditPrivateChat(ctx context.Context, in *ReqEditPrivateChat, opts ...grpc.CallOption) (*ReplyChannelData, error)
	ChannelsReadMessageContents(ctx context.Context, in *ReqChannelsReadMessageContents, opts ...grpc.CallOption) (*ReplyChannelData, error)
	//    普通群升级超级群
	MigrateChat(ctx context.Context, in *ReqMigrateToChannel, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 编辑消息
	EditChannelMessage(ctx context.Context, in *pbmessageserver.ReqEditMessage, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 编辑消息
	SearchChannelMessage(ctx context.Context, in *SearchChannelMsgReq, opts ...grpc.CallOption) (*SearchChannelMsgResp, error)
	// 搜尋超級群媒體消息
	SearchChannelMediaMessage(ctx context.Context, in *ReqSearchChannelMediaMessage, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 超級群日誌接口
	SendLogMsg(ctx context.Context, in *ReqSendLogMsg, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 超级群发送数字钱包红包
	RequestSendRpm(ctx context.Context, in *ReqSendRpm, opts ...grpc.CallOption) (*ReplySendRpm, error)
	RequestEditRpm(ctx context.Context, in *ReqEditRpm, opts ...grpc.CallOption) (*ReplyEditRpm, error)
	RequestEditRpmV2(ctx context.Context, in *ReqEditRpmV2, opts ...grpc.CallOption) (*ReplyEditRpm, error)
	RequestEditPayment(ctx context.Context, in *ReqEditPayment, opts ...grpc.CallOption) (*ReplyEditRpm, error)
	// 超级群领取红包
	RequestRecvRpm(ctx context.Context, in *ReqRecvRpm, opts ...grpc.CallOption) (*ReplyRecvRpm, error)
	// 獲取群成員個數
	GetChannelMembersCount(ctx context.Context, in *ReqGetChannelMembersCount, opts ...grpc.CallOption) (*ReplyGetChannelMembersCount, error)
	// 獲取是否是管理員
	IsChannelAdminOrCreator(ctx context.Context, in *ReqIsChannelAdminOrCreator, opts ...grpc.CallOption) (*ReplyChannelData, error)
	MessageReadMentions(ctx context.Context, in *ReqMessageReadMentions, opts ...grpc.CallOption) (*ReplyMessageReadMentions, error)
	// 创建超级群
	CreateSuperChat(ctx context.Context, in *ReqCreateSuperChat, opts ...grpc.CallOption) (*ReplyChannelData, error)
	// 105 发送投票
	SendVote(ctx context.Context, in *SendVoteReq, opts ...grpc.CallOption) (*SendVoteReply, error)
	// 获取投票结果
	GetPollResults(ctx context.Context, in *GetPollResultsReq, opts ...grpc.CallOption) (*GetPollResultsReply, error)
	// @ bgn add for edit channel's default banned rights by qingsong at 2019-10-28
	EditChatDefaultBannedRights(ctx context.Context, in *EditChatDefaultBannedRightsReq, opts ...grpc.CallOption) (*EditChatDefaultBannedRightsRsp, error)
	// @ add by Qingsong at 2019-11-06 for call channel server to handler toggle slow mode.
	HandleToggleSlowMode(ctx context.Context, in *HandleToggleSlowModeReq, opts ...grpc.CallOption) (*HandleToggleSlowModeRsp, error)
	// @ add by Qingsong at 2019-11-21 for channel toggle signatures
	HandleToggleSignatures(ctx context.Context, in *HandleToggleSignaturesReq, opts ...grpc.CallOption) (*HandleToggleSignaturesRsp, error)
	// @ add by Qingsong at 2019-12-02 for im call channel server to toggle channel's history hidden.
	HandleToggleHistoryHidden(ctx context.Context, in *ChannelToggleHistoryHiddenReq, opts ...grpc.CallOption) (*ChannelToggleHistoryHiddenRsp, error)
	// @ add by qingsong at 2019-12-23 for im call channel server to set channel ban mode.
	SetChannelBanMode(ctx context.Context, in *SetChannelBanModeReq, opts ...grpc.CallOption) (*SetChannelBanModeRsp, error)
	// @ add by qingsong at 2019-12-27 for get user own channels.
	CHsGetUserOwnChannels(ctx context.Context, in *CHsGetUserOwnChannelsReq, opts ...grpc.CallOption) (*CHsGetUserOwnChannelsRsp, error)
	// @ add by qingsong at 2020-04-21 for im call channel server to Restrict channel.
	RestrictChannel(ctx context.Context, in *RestrictChannelReq, opts ...grpc.CallOption) (*RestrictChannelRsp, error)
	TransferGroupOwnerById(ctx context.Context, in *TransferGroupOwnerByIdReq, opts ...grpc.CallOption) (*TransferGroupOwnerByIdRsp, error)
	// @ add by qingsong at 2020-06-04 for get hot groups.
	GetHotGroups(ctx context.Context, in *GetHotGroupsReq, opts ...grpc.CallOption) (*GetHotGroupsRsp, error)
	// @ added by qingsong at 2020.10.20 for set discussion group.
	SetDiscussionGroup(ctx context.Context, in *SetDiscussionGroupReq, opts ...grpc.CallOption) (*SetDiscussionGroupRsp, error)
	// @ added by qingsong at 2020.10.20 for get groups for discussion.
	GetGroupsForDiscussion(ctx context.Context, in *GetGroupsForDiscussionReq, opts ...grpc.CallOption) (*GetGroupsForDiscussionRsp, error)
	// @ added by qingsong at 2020.12.01 for live start
	GroupLiveStart(ctx context.Context, in *LiveStartReq, opts ...grpc.CallOption) (*LiveStartRsp, error)
	// @ added by qingsong at 2020.12.01 for live stop
	GroupLiveStop(ctx context.Context, in *LiveStopReq, opts ...grpc.CallOption) (*LiveStopRsp, error)
	// @ added by qingsong at 2020.12.01 for live user invite link
	GetLiveInviteUrl(ctx context.Context, in *GetLiveInviteUrlReq, opts ...grpc.CallOption) (*GetLiveInviteUrlRsp, error)
	// @ added by qingsong at 2020.12.11 for edit live info.
	EditLiveInfo(ctx context.Context, in *EditLiveInfoReq, opts ...grpc.CallOption) (*EditLiveInfoRsp, error)
	GetLiveInviteCnt(ctx context.Context, in *GetLiveInviteCntReq, opts ...grpc.CallOption) (*GetLiveInviteCntRsp, error)
	GroupLiveCheck(ctx context.Context, in *GroupLiveCheckReq, opts ...grpc.CallOption) (*GroupLiveCheckRsp, error)
	CheckUserInGroup(ctx context.Context, in *CheckUserInGroupReq, opts ...grpc.CallOption) (*CheckUserInGroupRsp, error)
	// @ brief : Get group user ID by paging.
	GetGroupUserIds(ctx context.Context, in *GetGroupUserIdsReq, opts ...grpc.CallOption) (*GetGroupUserIdsRsp, error)
}

type channelServerClient struct {
	cc *grpc.ClientConn
}

func NewChannelServerClient(cc *grpc.ClientConn) ChannelServerClient {
	return &channelServerClient{cc}
}

func (c *channelServerClient) EditChannelLocation(ctx context.Context, in *EditChannelLocationReq, opts ...grpc.CallOption) (*EditChannelLocationResp, error) {
	out := new(EditChannelLocationResp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditChannelLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) TransferGroupOwner(ctx context.Context, in *TransferGroupOwnerReq, opts ...grpc.CallOption) (*TransferGroupOwnerResp, error) {
	out := new(TransferGroupOwnerResp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/TransferGroupOwner", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) SendChannelMedia(ctx context.Context, in *pbmessageserver.ReqSendMedia, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/SendChannelMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) ForwardMessageToChannel(ctx context.Context, in *ReqForwardMessageToChannel, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/ForwardMessageToChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetHistory(ctx context.Context, in *pbmessageserver.ReqHistory, opts ...grpc.CallOption) (*pbmessageserver.ReplyHistory, error) {
	out := new(pbmessageserver.ReplyHistory)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) SendChannelMessage(ctx context.Context, in *pbmessageserver.RequestSendMessage, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/SendChannelMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) CreateChannel(ctx context.Context, in *ReqCreateChannel, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/CreateChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) InviteChannelMember(ctx context.Context, in *ReqInviteChannelMember, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/InviteChannelMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) KickFromChannel(ctx context.Context, in *ReqKickFromChannel, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/KickFromChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) LeaveChannel(ctx context.Context, in *ReqLeaveChannel, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/LeaveChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditChannelTitle(ctx context.Context, in *ReqEditChannelTitle, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditChannelTitle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditChannelAdmin(ctx context.Context, in *ReqEditChannelAdmin, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditChannelAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditChannelPhoto(ctx context.Context, in *ReqEditChannelPhoto, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditChannelPhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditChannelAbout(ctx context.Context, in *ReqEditChannelAbout, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditChannelAbout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) DeleteChannelMsg(ctx context.Context, in *ReqDeleteChannelMsg, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/DeleteChannelMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) DeleteChannelSelfHistory(ctx context.Context, in *ReqDeleteChannelSelfHistory, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/DeleteChannelSelfHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) DeleteChannelHistory(ctx context.Context, in *ReqDeleteChannelHistory, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/DeleteChannelHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) UpdatePinnedChannelMessage(ctx context.Context, in *ReqUpdatePinnedChannelMessage, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/UpdatePinnedChannelMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) ReadChannelHistory(ctx context.Context, in *ReqReadChannelHistory, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/ReadChannelHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetChannelDifference(ctx context.Context, in *ReqGetChannelDifference, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetChannelDifference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetChannelMessagesByMsgsId(ctx context.Context, in *pbmessageserver.ReqGetChannelMsgsByMsgsId, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetChannelMessagesByMsgsId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) JoinChannel(ctx context.Context, in *ReqJoinChannel, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/JoinChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) DeleteChannel(ctx context.Context, in *ReqDeleteChannel, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/DeleteChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetChannelsLastMsgsByUserId(ctx context.Context, in *pbmessageserver.ReqGetChannelsLastMsgsByUserId, opts ...grpc.CallOption) (*pbmessageserver.ReplyGetChannelsLastMsgsByUserId, error) {
	out := new(pbmessageserver.ReplyGetChannelsLastMsgsByUserId)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetChannelsLastMsgsByUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetChannelAdminLog(ctx context.Context, in *ReqGetChannelAdminLog, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetChannelAdminLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) ImportChatInvite(ctx context.Context, in *ReqImportChatInvite, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/ImportChatInvite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditBanChannelUser(ctx context.Context, in *ReqEditBanChannelUser, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditBanChannelUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetFullChannel(ctx context.Context, in *ReqGetFullChannel, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetFullChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetFullChannelV2(ctx context.Context, in *ReqGetFullChannelV2, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetFullChannelV2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetParticipant(ctx context.Context, in *ReqGetParticipant, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetParticipant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetParticipants(ctx context.Context, in *ReqGetParticipants, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetParticipants", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) ExportChannelLink(ctx context.Context, in *ReqExportChannelLink, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/ExportChannelLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) ChannelToggleInvite(ctx context.Context, in *ReqChannelToggleInvite, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/ChannelToggleInvite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetChannels(ctx context.Context, in *ReqGetChannels, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetChannels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) UpdateChannelUserName(ctx context.Context, in *ReqUpdateChannelUserName, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/UpdateChannelUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) CheckChannelUserName(ctx context.Context, in *ReqCheckChannelUserName, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/CheckChannelUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditEveryoneQuiet(ctx context.Context, in *ReqEditEveryoneQuiet, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditEveryoneQuiet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetChannelMessageExportLink(ctx context.Context, in *ReqGetChannelMessageExportLink, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetChannelMessageExportLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditPrivateChat(ctx context.Context, in *ReqEditPrivateChat, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditPrivateChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) ChannelsReadMessageContents(ctx context.Context, in *ReqChannelsReadMessageContents, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/ChannelsReadMessageContents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) MigrateChat(ctx context.Context, in *ReqMigrateToChannel, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/MigrateChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditChannelMessage(ctx context.Context, in *pbmessageserver.ReqEditMessage, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditChannelMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) SearchChannelMessage(ctx context.Context, in *SearchChannelMsgReq, opts ...grpc.CallOption) (*SearchChannelMsgResp, error) {
	out := new(SearchChannelMsgResp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/SearchChannelMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) SearchChannelMediaMessage(ctx context.Context, in *ReqSearchChannelMediaMessage, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/SearchChannelMediaMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) SendLogMsg(ctx context.Context, in *ReqSendLogMsg, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/SendLogMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) RequestSendRpm(ctx context.Context, in *ReqSendRpm, opts ...grpc.CallOption) (*ReplySendRpm, error) {
	out := new(ReplySendRpm)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/RequestSendRpm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) RequestEditRpm(ctx context.Context, in *ReqEditRpm, opts ...grpc.CallOption) (*ReplyEditRpm, error) {
	out := new(ReplyEditRpm)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/RequestEditRpm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) RequestEditRpmV2(ctx context.Context, in *ReqEditRpmV2, opts ...grpc.CallOption) (*ReplyEditRpm, error) {
	out := new(ReplyEditRpm)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/RequestEditRpmV2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) RequestEditPayment(ctx context.Context, in *ReqEditPayment, opts ...grpc.CallOption) (*ReplyEditRpm, error) {
	out := new(ReplyEditRpm)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/RequestEditPayment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) RequestRecvRpm(ctx context.Context, in *ReqRecvRpm, opts ...grpc.CallOption) (*ReplyRecvRpm, error) {
	out := new(ReplyRecvRpm)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/RequestRecvRpm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetChannelMembersCount(ctx context.Context, in *ReqGetChannelMembersCount, opts ...grpc.CallOption) (*ReplyGetChannelMembersCount, error) {
	out := new(ReplyGetChannelMembersCount)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetChannelMembersCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) IsChannelAdminOrCreator(ctx context.Context, in *ReqIsChannelAdminOrCreator, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/IsChannelAdminOrCreator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) MessageReadMentions(ctx context.Context, in *ReqMessageReadMentions, opts ...grpc.CallOption) (*ReplyMessageReadMentions, error) {
	out := new(ReplyMessageReadMentions)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/MessageReadMentions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) CreateSuperChat(ctx context.Context, in *ReqCreateSuperChat, opts ...grpc.CallOption) (*ReplyChannelData, error) {
	out := new(ReplyChannelData)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/CreateSuperChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) SendVote(ctx context.Context, in *SendVoteReq, opts ...grpc.CallOption) (*SendVoteReply, error) {
	out := new(SendVoteReply)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/SendVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetPollResults(ctx context.Context, in *GetPollResultsReq, opts ...grpc.CallOption) (*GetPollResultsReply, error) {
	out := new(GetPollResultsReply)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetPollResults", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditChatDefaultBannedRights(ctx context.Context, in *EditChatDefaultBannedRightsReq, opts ...grpc.CallOption) (*EditChatDefaultBannedRightsRsp, error) {
	out := new(EditChatDefaultBannedRightsRsp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditChatDefaultBannedRights", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) HandleToggleSlowMode(ctx context.Context, in *HandleToggleSlowModeReq, opts ...grpc.CallOption) (*HandleToggleSlowModeRsp, error) {
	out := new(HandleToggleSlowModeRsp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/HandleToggleSlowMode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) HandleToggleSignatures(ctx context.Context, in *HandleToggleSignaturesReq, opts ...grpc.CallOption) (*HandleToggleSignaturesRsp, error) {
	out := new(HandleToggleSignaturesRsp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/HandleToggleSignatures", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) HandleToggleHistoryHidden(ctx context.Context, in *ChannelToggleHistoryHiddenReq, opts ...grpc.CallOption) (*ChannelToggleHistoryHiddenRsp, error) {
	out := new(ChannelToggleHistoryHiddenRsp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/HandleToggleHistoryHidden", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) SetChannelBanMode(ctx context.Context, in *SetChannelBanModeReq, opts ...grpc.CallOption) (*SetChannelBanModeRsp, error) {
	out := new(SetChannelBanModeRsp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/SetChannelBanMode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) CHsGetUserOwnChannels(ctx context.Context, in *CHsGetUserOwnChannelsReq, opts ...grpc.CallOption) (*CHsGetUserOwnChannelsRsp, error) {
	out := new(CHsGetUserOwnChannelsRsp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/CHsGetUserOwnChannels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) RestrictChannel(ctx context.Context, in *RestrictChannelReq, opts ...grpc.CallOption) (*RestrictChannelRsp, error) {
	out := new(RestrictChannelRsp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/RestrictChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) TransferGroupOwnerById(ctx context.Context, in *TransferGroupOwnerByIdReq, opts ...grpc.CallOption) (*TransferGroupOwnerByIdRsp, error) {
	out := new(TransferGroupOwnerByIdRsp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/TransferGroupOwnerById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetHotGroups(ctx context.Context, in *GetHotGroupsReq, opts ...grpc.CallOption) (*GetHotGroupsRsp, error) {
	out := new(GetHotGroupsRsp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetHotGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) SetDiscussionGroup(ctx context.Context, in *SetDiscussionGroupReq, opts ...grpc.CallOption) (*SetDiscussionGroupRsp, error) {
	out := new(SetDiscussionGroupRsp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/SetDiscussionGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetGroupsForDiscussion(ctx context.Context, in *GetGroupsForDiscussionReq, opts ...grpc.CallOption) (*GetGroupsForDiscussionRsp, error) {
	out := new(GetGroupsForDiscussionRsp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetGroupsForDiscussion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GroupLiveStart(ctx context.Context, in *LiveStartReq, opts ...grpc.CallOption) (*LiveStartRsp, error) {
	out := new(LiveStartRsp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GroupLiveStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GroupLiveStop(ctx context.Context, in *LiveStopReq, opts ...grpc.CallOption) (*LiveStopRsp, error) {
	out := new(LiveStopRsp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GroupLiveStop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetLiveInviteUrl(ctx context.Context, in *GetLiveInviteUrlReq, opts ...grpc.CallOption) (*GetLiveInviteUrlRsp, error) {
	out := new(GetLiveInviteUrlRsp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetLiveInviteUrl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) EditLiveInfo(ctx context.Context, in *EditLiveInfoReq, opts ...grpc.CallOption) (*EditLiveInfoRsp, error) {
	out := new(EditLiveInfoRsp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/EditLiveInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetLiveInviteCnt(ctx context.Context, in *GetLiveInviteCntReq, opts ...grpc.CallOption) (*GetLiveInviteCntRsp, error) {
	out := new(GetLiveInviteCntRsp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetLiveInviteCnt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GroupLiveCheck(ctx context.Context, in *GroupLiveCheckReq, opts ...grpc.CallOption) (*GroupLiveCheckRsp, error) {
	out := new(GroupLiveCheckRsp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GroupLiveCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) CheckUserInGroup(ctx context.Context, in *CheckUserInGroupReq, opts ...grpc.CallOption) (*CheckUserInGroupRsp, error) {
	out := new(CheckUserInGroupRsp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/CheckUserInGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServerClient) GetGroupUserIds(ctx context.Context, in *GetGroupUserIdsReq, opts ...grpc.CallOption) (*GetGroupUserIdsRsp, error) {
	out := new(GetGroupUserIdsRsp)
	err := grpc.Invoke(ctx, "/pbchannelserver.ChannelServer/GetGroupUserIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChannelServer service

type ChannelServerServer interface {
	// 编辑超级群地理位置
	EditChannelLocation(context.Context, *EditChannelLocationReq) (*EditChannelLocationResp, error)
	// 创建超级群
	// 超级群转让群主
	TransferGroupOwner(context.Context, *TransferGroupOwnerReq) (*TransferGroupOwnerResp, error)
	// 发送媒体
	SendChannelMedia(context.Context, *pbmessageserver.ReqSendMedia) (*ReplyChannelData, error)
	// 转发消息
	ForwardMessageToChannel(context.Context, *ReqForwardMessageToChannel) (*ReplyChannelData, error)
	//    获取历史
	GetHistory(context.Context, *pbmessageserver.ReqHistory) (*pbmessageserver.ReplyHistory, error)
	//    发送消息
	SendChannelMessage(context.Context, *pbmessageserver.RequestSendMessage) (*ReplyChannelData, error)
	// 创建频道
	CreateChannel(context.Context, *ReqCreateChannel) (*ReplyChannelData, error)
	// 邀请用户进入超级群或者频道
	InviteChannelMember(context.Context, *ReqInviteChannelMember) (*ReplyChannelData, error)
	// 踢人出超级群或者频道
	KickFromChannel(context.Context, *ReqKickFromChannel) (*ReplyChannelData, error)
	// 离开超级群或者频道
	LeaveChannel(context.Context, *ReqLeaveChannel) (*ReplyChannelData, error)
	// 编辑超级群或者频道的标题
	EditChannelTitle(context.Context, *ReqEditChannelTitle) (*ReplyChannelData, error)
	// 升级或降级超级群或者频道的用户权限
	EditChannelAdmin(context.Context, *ReqEditChannelAdmin) (*ReplyChannelData, error)
	// 修改超级群或者频道的头像
	EditChannelPhoto(context.Context, *ReqEditChannelPhoto) (*ReplyChannelData, error)
	// 修改超级群或者频道的描述信息
	EditChannelAbout(context.Context, *ReqEditChannelAbout) (*ReplyChannelData, error)
	// 删除超级群或者频道的消息
	DeleteChannelMsg(context.Context, *ReqDeleteChannelMsg) (*ReplyChannelData, error)
	DeleteChannelSelfHistory(context.Context, *ReqDeleteChannelSelfHistory) (*ReplyChannelData, error)
	// 清除超级群或者频道某用户的历史
	DeleteChannelHistory(context.Context, *ReqDeleteChannelHistory) (*ReplyChannelData, error)
	// 置顶超级群或者频道的消息
	UpdatePinnedChannelMessage(context.Context, *ReqUpdatePinnedChannelMessage) (*ReplyChannelData, error)
	//    rpc MigrateChatEvent (ReqMigrateChat) returns (ReplyMigrateChat) {
	//    }
	// 修改超级群或者频道的消息读取状态
	ReadChannelHistory(context.Context, *ReqReadChannelHistory) (*ReplyChannelData, error)
	// 获取超级群或者频道的修正信息
	GetChannelDifference(context.Context, *ReqGetChannelDifference) (*ReplyChannelData, error)
	// 获取超级群或者频道的历史
	//    rpc GetChannelHistory (ReqGetChannelMsgHistory) returns (ReplyChannelMsgs) {
	//    }
	// 通过消息ID获取超级群或者频道的消息
	GetChannelMessagesByMsgsId(context.Context, *pbmessageserver.ReqGetChannelMsgsByMsgsId) (*ReplyChannelData, error)
	// 主动加入超级群或者频道
	JoinChannel(context.Context, *ReqJoinChannel) (*ReplyChannelData, error)
	// 解散超级群或者频道
	DeleteChannel(context.Context, *ReqDeleteChannel) (*ReplyChannelData, error)
	// 通过用户ID获取超级群或者频道的最后一条消息
	GetChannelsLastMsgsByUserId(context.Context, *pbmessageserver.ReqGetChannelsLastMsgsByUserId) (*pbmessageserver.ReplyGetChannelsLastMsgsByUserId, error)
	// 获取超级群或者频道的管理记录
	GetChannelAdminLog(context.Context, *ReqGetChannelAdminLog) (*ReplyChannelData, error)
	// 通过link加入超级群或者频道
	ImportChatInvite(context.Context, *ReqImportChatInvite) (*ReplyChannelData, error)
	// 踢人并进组其再次加入超级群或者频道，或者解除该禁止
	EditBanChannelUser(context.Context, *ReqEditBanChannelUser) (*ReplyChannelData, error)
	// 获取full channel
	GetFullChannel(context.Context, *ReqGetFullChannel) (*ReplyChannelData, error)
	// 获取full channel
	GetFullChannelV2(context.Context, *ReqGetFullChannelV2) (*ReplyChannelData, error)
	GetParticipant(context.Context, *ReqGetParticipant) (*ReplyChannelData, error)
	GetParticipants(context.Context, *ReqGetParticipants) (*ReplyChannelData, error)
	ExportChannelLink(context.Context, *ReqExportChannelLink) (*ReplyChannelData, error)
	ChannelToggleInvite(context.Context, *ReqChannelToggleInvite) (*ReplyChannelData, error)
	GetChannels(context.Context, *ReqGetChannels) (*ReplyChannelData, error)
	UpdateChannelUserName(context.Context, *ReqUpdateChannelUserName) (*ReplyChannelData, error)
	CheckChannelUserName(context.Context, *ReqCheckChannelUserName) (*ReplyChannelData, error)
	// 超级群全体禁言
	EditEveryoneQuiet(context.Context, *ReqEditEveryoneQuiet) (*ReplyChannelData, error)
	GetChannelMessageExportLink(context.Context, *ReqGetChannelMessageExportLink) (*ReplyChannelData, error)
	EditPrivateChat(context.Context, *ReqEditPrivateChat) (*ReplyChannelData, error)
	ChannelsReadMessageContents(context.Context, *ReqChannelsReadMessageContents) (*ReplyChannelData, error)
	//    普通群升级超级群
	MigrateChat(context.Context, *ReqMigrateToChannel) (*ReplyChannelData, error)
	// 编辑消息
	EditChannelMessage(context.Context, *pbmessageserver.ReqEditMessage) (*ReplyChannelData, error)
	// 编辑消息
	SearchChannelMessage(context.Context, *SearchChannelMsgReq) (*SearchChannelMsgResp, error)
	// 搜尋超級群媒體消息
	SearchChannelMediaMessage(context.Context, *ReqSearchChannelMediaMessage) (*ReplyChannelData, error)
	// 超級群日誌接口
	SendLogMsg(context.Context, *ReqSendLogMsg) (*ReplyChannelData, error)
	// 超级群发送数字钱包红包
	RequestSendRpm(context.Context, *ReqSendRpm) (*ReplySendRpm, error)
	RequestEditRpm(context.Context, *ReqEditRpm) (*ReplyEditRpm, error)
	RequestEditRpmV2(context.Context, *ReqEditRpmV2) (*ReplyEditRpm, error)
	RequestEditPayment(context.Context, *ReqEditPayment) (*ReplyEditRpm, error)
	// 超级群领取红包
	RequestRecvRpm(context.Context, *ReqRecvRpm) (*ReplyRecvRpm, error)
	// 獲取群成員個數
	GetChannelMembersCount(context.Context, *ReqGetChannelMembersCount) (*ReplyGetChannelMembersCount, error)
	// 獲取是否是管理員
	IsChannelAdminOrCreator(context.Context, *ReqIsChannelAdminOrCreator) (*ReplyChannelData, error)
	MessageReadMentions(context.Context, *ReqMessageReadMentions) (*ReplyMessageReadMentions, error)
	// 创建超级群
	CreateSuperChat(context.Context, *ReqCreateSuperChat) (*ReplyChannelData, error)
	// 105 发送投票
	SendVote(context.Context, *SendVoteReq) (*SendVoteReply, error)
	// 获取投票结果
	GetPollResults(context.Context, *GetPollResultsReq) (*GetPollResultsReply, error)
	// @ bgn add for edit channel's default banned rights by qingsong at 2019-10-28
	EditChatDefaultBannedRights(context.Context, *EditChatDefaultBannedRightsReq) (*EditChatDefaultBannedRightsRsp, error)
	// @ add by Qingsong at 2019-11-06 for call channel server to handler toggle slow mode.
	HandleToggleSlowMode(context.Context, *HandleToggleSlowModeReq) (*HandleToggleSlowModeRsp, error)
	// @ add by Qingsong at 2019-11-21 for channel toggle signatures
	HandleToggleSignatures(context.Context, *HandleToggleSignaturesReq) (*HandleToggleSignaturesRsp, error)
	// @ add by Qingsong at 2019-12-02 for im call channel server to toggle channel's history hidden.
	HandleToggleHistoryHidden(context.Context, *ChannelToggleHistoryHiddenReq) (*ChannelToggleHistoryHiddenRsp, error)
	// @ add by qingsong at 2019-12-23 for im call channel server to set channel ban mode.
	SetChannelBanMode(context.Context, *SetChannelBanModeReq) (*SetChannelBanModeRsp, error)
	// @ add by qingsong at 2019-12-27 for get user own channels.
	CHsGetUserOwnChannels(context.Context, *CHsGetUserOwnChannelsReq) (*CHsGetUserOwnChannelsRsp, error)
	// @ add by qingsong at 2020-04-21 for im call channel server to Restrict channel.
	RestrictChannel(context.Context, *RestrictChannelReq) (*RestrictChannelRsp, error)
	TransferGroupOwnerById(context.Context, *TransferGroupOwnerByIdReq) (*TransferGroupOwnerByIdRsp, error)
	// @ add by qingsong at 2020-06-04 for get hot groups.
	GetHotGroups(context.Context, *GetHotGroupsReq) (*GetHotGroupsRsp, error)
	// @ added by qingsong at 2020.10.20 for set discussion group.
	SetDiscussionGroup(context.Context, *SetDiscussionGroupReq) (*SetDiscussionGroupRsp, error)
	// @ added by qingsong at 2020.10.20 for get groups for discussion.
	GetGroupsForDiscussion(context.Context, *GetGroupsForDiscussionReq) (*GetGroupsForDiscussionRsp, error)
	// @ added by qingsong at 2020.12.01 for live start
	GroupLiveStart(context.Context, *LiveStartReq) (*LiveStartRsp, error)
	// @ added by qingsong at 2020.12.01 for live stop
	GroupLiveStop(context.Context, *LiveStopReq) (*LiveStopRsp, error)
	// @ added by qingsong at 2020.12.01 for live user invite link
	GetLiveInviteUrl(context.Context, *GetLiveInviteUrlReq) (*GetLiveInviteUrlRsp, error)
	// @ added by qingsong at 2020.12.11 for edit live info.
	EditLiveInfo(context.Context, *EditLiveInfoReq) (*EditLiveInfoRsp, error)
	GetLiveInviteCnt(context.Context, *GetLiveInviteCntReq) (*GetLiveInviteCntRsp, error)
	GroupLiveCheck(context.Context, *GroupLiveCheckReq) (*GroupLiveCheckRsp, error)
	CheckUserInGroup(context.Context, *CheckUserInGroupReq) (*CheckUserInGroupRsp, error)
	// @ brief : Get group user ID by paging.
	GetGroupUserIds(context.Context, *GetGroupUserIdsReq) (*GetGroupUserIdsRsp, error)
}

func RegisterChannelServerServer(s *grpc.Server, srv ChannelServerServer) {
	s.RegisterService(&_ChannelServer_serviceDesc, srv)
}

func _ChannelServer_EditChannelLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditChannelLocationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditChannelLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditChannelLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditChannelLocation(ctx, req.(*EditChannelLocationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_TransferGroupOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferGroupOwnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).TransferGroupOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/TransferGroupOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).TransferGroupOwner(ctx, req.(*TransferGroupOwnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_SendChannelMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbmessageserver.ReqSendMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).SendChannelMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/SendChannelMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).SendChannelMedia(ctx, req.(*pbmessageserver.ReqSendMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_ForwardMessageToChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqForwardMessageToChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).ForwardMessageToChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/ForwardMessageToChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).ForwardMessageToChannel(ctx, req.(*ReqForwardMessageToChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbmessageserver.ReqHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetHistory(ctx, req.(*pbmessageserver.ReqHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_SendChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbmessageserver.RequestSendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).SendChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/SendChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).SendChannelMessage(ctx, req.(*pbmessageserver.RequestSendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).CreateChannel(ctx, req.(*ReqCreateChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_InviteChannelMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInviteChannelMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).InviteChannelMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/InviteChannelMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).InviteChannelMember(ctx, req.(*ReqInviteChannelMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_KickFromChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqKickFromChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).KickFromChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/KickFromChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).KickFromChannel(ctx, req.(*ReqKickFromChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_LeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLeaveChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).LeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/LeaveChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).LeaveChannel(ctx, req.(*ReqLeaveChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditChannelTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditChannelTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditChannelTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditChannelTitle(ctx, req.(*ReqEditChannelTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditChannelAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditChannelAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditChannelAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditChannelAdmin(ctx, req.(*ReqEditChannelAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditChannelPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditChannelPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditChannelPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditChannelPhoto(ctx, req.(*ReqEditChannelPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditChannelAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditChannelAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditChannelAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditChannelAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditChannelAbout(ctx, req.(*ReqEditChannelAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_DeleteChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).DeleteChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/DeleteChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).DeleteChannelMsg(ctx, req.(*ReqDeleteChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_DeleteChannelSelfHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelSelfHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).DeleteChannelSelfHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/DeleteChannelSelfHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).DeleteChannelSelfHistory(ctx, req.(*ReqDeleteChannelSelfHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_DeleteChannelHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).DeleteChannelHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/DeleteChannelHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).DeleteChannelHistory(ctx, req.(*ReqDeleteChannelHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_UpdatePinnedChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdatePinnedChannelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).UpdatePinnedChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/UpdatePinnedChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).UpdatePinnedChannelMessage(ctx, req.(*ReqUpdatePinnedChannelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_ReadChannelHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReadChannelHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).ReadChannelHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/ReadChannelHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).ReadChannelHistory(ctx, req.(*ReqReadChannelHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetChannelDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetChannelDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetChannelDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetChannelDifference(ctx, req.(*ReqGetChannelDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetChannelMessagesByMsgsId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbmessageserver.ReqGetChannelMsgsByMsgsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetChannelMessagesByMsgsId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetChannelMessagesByMsgsId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetChannelMessagesByMsgsId(ctx, req.(*pbmessageserver.ReqGetChannelMsgsByMsgsId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_JoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqJoinChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).JoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/JoinChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).JoinChannel(ctx, req.(*ReqJoinChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/DeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).DeleteChannel(ctx, req.(*ReqDeleteChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetChannelsLastMsgsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbmessageserver.ReqGetChannelsLastMsgsByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetChannelsLastMsgsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetChannelsLastMsgsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetChannelsLastMsgsByUserId(ctx, req.(*pbmessageserver.ReqGetChannelsLastMsgsByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetChannelAdminLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelAdminLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetChannelAdminLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetChannelAdminLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetChannelAdminLog(ctx, req.(*ReqGetChannelAdminLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_ImportChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqImportChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).ImportChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/ImportChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).ImportChatInvite(ctx, req.(*ReqImportChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditBanChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditBanChannelUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditBanChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditBanChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditBanChannelUser(ctx, req.(*ReqEditBanChannelUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetFullChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetFullChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetFullChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetFullChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetFullChannel(ctx, req.(*ReqGetFullChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetFullChannelV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetFullChannelV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetFullChannelV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetFullChannelV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetFullChannelV2(ctx, req.(*ReqGetFullChannelV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetParticipant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetParticipant(ctx, req.(*ReqGetParticipant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetParticipants(ctx, req.(*ReqGetParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_ExportChannelLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqExportChannelLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).ExportChannelLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/ExportChannelLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).ExportChannelLink(ctx, req.(*ReqExportChannelLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_ChannelToggleInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelToggleInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).ChannelToggleInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/ChannelToggleInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).ChannelToggleInvite(ctx, req.(*ReqChannelToggleInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetChannels(ctx, req.(*ReqGetChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_UpdateChannelUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelUserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).UpdateChannelUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/UpdateChannelUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).UpdateChannelUserName(ctx, req.(*ReqUpdateChannelUserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_CheckChannelUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCheckChannelUserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).CheckChannelUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/CheckChannelUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).CheckChannelUserName(ctx, req.(*ReqCheckChannelUserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditEveryoneQuiet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditEveryoneQuiet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditEveryoneQuiet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditEveryoneQuiet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditEveryoneQuiet(ctx, req.(*ReqEditEveryoneQuiet))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetChannelMessageExportLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMessageExportLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetChannelMessageExportLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetChannelMessageExportLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetChannelMessageExportLink(ctx, req.(*ReqGetChannelMessageExportLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditPrivateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditPrivateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditPrivateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditPrivateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditPrivateChat(ctx, req.(*ReqEditPrivateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_ChannelsReadMessageContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelsReadMessageContents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).ChannelsReadMessageContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/ChannelsReadMessageContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).ChannelsReadMessageContents(ctx, req.(*ReqChannelsReadMessageContents))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_MigrateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMigrateToChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).MigrateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/MigrateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).MigrateChat(ctx, req.(*ReqMigrateToChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbmessageserver.ReqEditMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditChannelMessage(ctx, req.(*pbmessageserver.ReqEditMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_SearchChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchChannelMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).SearchChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/SearchChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).SearchChannelMessage(ctx, req.(*SearchChannelMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_SearchChannelMediaMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSearchChannelMediaMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).SearchChannelMediaMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/SearchChannelMediaMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).SearchChannelMediaMessage(ctx, req.(*ReqSearchChannelMediaMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_SendLogMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendLogMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).SendLogMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/SendLogMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).SendLogMsg(ctx, req.(*ReqSendLogMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_RequestSendRpm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendRpm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).RequestSendRpm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/RequestSendRpm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).RequestSendRpm(ctx, req.(*ReqSendRpm))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_RequestEditRpm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditRpm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).RequestEditRpm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/RequestEditRpm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).RequestEditRpm(ctx, req.(*ReqEditRpm))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_RequestEditRpmV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditRpmV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).RequestEditRpmV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/RequestEditRpmV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).RequestEditRpmV2(ctx, req.(*ReqEditRpmV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_RequestEditPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEditPayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).RequestEditPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/RequestEditPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).RequestEditPayment(ctx, req.(*ReqEditPayment))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_RequestRecvRpm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRecvRpm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).RequestRecvRpm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/RequestRecvRpm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).RequestRecvRpm(ctx, req.(*ReqRecvRpm))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetChannelMembersCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMembersCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetChannelMembersCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetChannelMembersCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetChannelMembersCount(ctx, req.(*ReqGetChannelMembersCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_IsChannelAdminOrCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqIsChannelAdminOrCreator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).IsChannelAdminOrCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/IsChannelAdminOrCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).IsChannelAdminOrCreator(ctx, req.(*ReqIsChannelAdminOrCreator))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_MessageReadMentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMessageReadMentions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).MessageReadMentions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/MessageReadMentions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).MessageReadMentions(ctx, req.(*ReqMessageReadMentions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_CreateSuperChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateSuperChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).CreateSuperChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/CreateSuperChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).CreateSuperChat(ctx, req.(*ReqCreateSuperChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_SendVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).SendVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/SendVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).SendVote(ctx, req.(*SendVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetPollResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPollResultsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetPollResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetPollResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetPollResults(ctx, req.(*GetPollResultsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditChatDefaultBannedRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditChatDefaultBannedRightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditChatDefaultBannedRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditChatDefaultBannedRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditChatDefaultBannedRights(ctx, req.(*EditChatDefaultBannedRightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_HandleToggleSlowMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleToggleSlowModeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).HandleToggleSlowMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/HandleToggleSlowMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).HandleToggleSlowMode(ctx, req.(*HandleToggleSlowModeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_HandleToggleSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleToggleSignaturesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).HandleToggleSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/HandleToggleSignatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).HandleToggleSignatures(ctx, req.(*HandleToggleSignaturesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_HandleToggleHistoryHidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelToggleHistoryHiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).HandleToggleHistoryHidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/HandleToggleHistoryHidden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).HandleToggleHistoryHidden(ctx, req.(*ChannelToggleHistoryHiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_SetChannelBanMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChannelBanModeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).SetChannelBanMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/SetChannelBanMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).SetChannelBanMode(ctx, req.(*SetChannelBanModeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_CHsGetUserOwnChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CHsGetUserOwnChannelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).CHsGetUserOwnChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/CHsGetUserOwnChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).CHsGetUserOwnChannels(ctx, req.(*CHsGetUserOwnChannelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_RestrictChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestrictChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).RestrictChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/RestrictChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).RestrictChannel(ctx, req.(*RestrictChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_TransferGroupOwnerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferGroupOwnerByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).TransferGroupOwnerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/TransferGroupOwnerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).TransferGroupOwnerById(ctx, req.(*TransferGroupOwnerByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetHotGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetHotGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetHotGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetHotGroups(ctx, req.(*GetHotGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_SetDiscussionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDiscussionGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).SetDiscussionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/SetDiscussionGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).SetDiscussionGroup(ctx, req.(*SetDiscussionGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetGroupsForDiscussion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsForDiscussionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetGroupsForDiscussion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetGroupsForDiscussion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetGroupsForDiscussion(ctx, req.(*GetGroupsForDiscussionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GroupLiveStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GroupLiveStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GroupLiveStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GroupLiveStart(ctx, req.(*LiveStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GroupLiveStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GroupLiveStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GroupLiveStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GroupLiveStop(ctx, req.(*LiveStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetLiveInviteUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveInviteUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetLiveInviteUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetLiveInviteUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetLiveInviteUrl(ctx, req.(*GetLiveInviteUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_EditLiveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditLiveInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).EditLiveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/EditLiveInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).EditLiveInfo(ctx, req.(*EditLiveInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetLiveInviteCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveInviteCntReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetLiveInviteCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetLiveInviteCnt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetLiveInviteCnt(ctx, req.(*GetLiveInviteCntReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GroupLiveCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupLiveCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GroupLiveCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GroupLiveCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GroupLiveCheck(ctx, req.(*GroupLiveCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_CheckUserInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserInGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).CheckUserInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/CheckUserInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).CheckUserInGroup(ctx, req.(*CheckUserInGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelServer_GetGroupUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupUserIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServerServer).GetGroupUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbchannelserver.ChannelServer/GetGroupUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServerServer).GetGroupUserIds(ctx, req.(*GetGroupUserIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChannelServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbchannelserver.ChannelServer",
	HandlerType: (*ChannelServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EditChannelLocation",
			Handler:    _ChannelServer_EditChannelLocation_Handler,
		},
		{
			MethodName: "TransferGroupOwner",
			Handler:    _ChannelServer_TransferGroupOwner_Handler,
		},
		{
			MethodName: "SendChannelMedia",
			Handler:    _ChannelServer_SendChannelMedia_Handler,
		},
		{
			MethodName: "ForwardMessageToChannel",
			Handler:    _ChannelServer_ForwardMessageToChannel_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _ChannelServer_GetHistory_Handler,
		},
		{
			MethodName: "SendChannelMessage",
			Handler:    _ChannelServer_SendChannelMessage_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _ChannelServer_CreateChannel_Handler,
		},
		{
			MethodName: "InviteChannelMember",
			Handler:    _ChannelServer_InviteChannelMember_Handler,
		},
		{
			MethodName: "KickFromChannel",
			Handler:    _ChannelServer_KickFromChannel_Handler,
		},
		{
			MethodName: "LeaveChannel",
			Handler:    _ChannelServer_LeaveChannel_Handler,
		},
		{
			MethodName: "EditChannelTitle",
			Handler:    _ChannelServer_EditChannelTitle_Handler,
		},
		{
			MethodName: "EditChannelAdmin",
			Handler:    _ChannelServer_EditChannelAdmin_Handler,
		},
		{
			MethodName: "EditChannelPhoto",
			Handler:    _ChannelServer_EditChannelPhoto_Handler,
		},
		{
			MethodName: "EditChannelAbout",
			Handler:    _ChannelServer_EditChannelAbout_Handler,
		},
		{
			MethodName: "DeleteChannelMsg",
			Handler:    _ChannelServer_DeleteChannelMsg_Handler,
		},
		{
			MethodName: "DeleteChannelSelfHistory",
			Handler:    _ChannelServer_DeleteChannelSelfHistory_Handler,
		},
		{
			MethodName: "DeleteChannelHistory",
			Handler:    _ChannelServer_DeleteChannelHistory_Handler,
		},
		{
			MethodName: "UpdatePinnedChannelMessage",
			Handler:    _ChannelServer_UpdatePinnedChannelMessage_Handler,
		},
		{
			MethodName: "ReadChannelHistory",
			Handler:    _ChannelServer_ReadChannelHistory_Handler,
		},
		{
			MethodName: "GetChannelDifference",
			Handler:    _ChannelServer_GetChannelDifference_Handler,
		},
		{
			MethodName: "GetChannelMessagesByMsgsId",
			Handler:    _ChannelServer_GetChannelMessagesByMsgsId_Handler,
		},
		{
			MethodName: "JoinChannel",
			Handler:    _ChannelServer_JoinChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _ChannelServer_DeleteChannel_Handler,
		},
		{
			MethodName: "GetChannelsLastMsgsByUserId",
			Handler:    _ChannelServer_GetChannelsLastMsgsByUserId_Handler,
		},
		{
			MethodName: "GetChannelAdminLog",
			Handler:    _ChannelServer_GetChannelAdminLog_Handler,
		},
		{
			MethodName: "ImportChatInvite",
			Handler:    _ChannelServer_ImportChatInvite_Handler,
		},
		{
			MethodName: "EditBanChannelUser",
			Handler:    _ChannelServer_EditBanChannelUser_Handler,
		},
		{
			MethodName: "GetFullChannel",
			Handler:    _ChannelServer_GetFullChannel_Handler,
		},
		{
			MethodName: "GetFullChannelV2",
			Handler:    _ChannelServer_GetFullChannelV2_Handler,
		},
		{
			MethodName: "GetParticipant",
			Handler:    _ChannelServer_GetParticipant_Handler,
		},
		{
			MethodName: "GetParticipants",
			Handler:    _ChannelServer_GetParticipants_Handler,
		},
		{
			MethodName: "ExportChannelLink",
			Handler:    _ChannelServer_ExportChannelLink_Handler,
		},
		{
			MethodName: "ChannelToggleInvite",
			Handler:    _ChannelServer_ChannelToggleInvite_Handler,
		},
		{
			MethodName: "GetChannels",
			Handler:    _ChannelServer_GetChannels_Handler,
		},
		{
			MethodName: "UpdateChannelUserName",
			Handler:    _ChannelServer_UpdateChannelUserName_Handler,
		},
		{
			MethodName: "CheckChannelUserName",
			Handler:    _ChannelServer_CheckChannelUserName_Handler,
		},
		{
			MethodName: "EditEveryoneQuiet",
			Handler:    _ChannelServer_EditEveryoneQuiet_Handler,
		},
		{
			MethodName: "GetChannelMessageExportLink",
			Handler:    _ChannelServer_GetChannelMessageExportLink_Handler,
		},
		{
			MethodName: "EditPrivateChat",
			Handler:    _ChannelServer_EditPrivateChat_Handler,
		},
		{
			MethodName: "ChannelsReadMessageContents",
			Handler:    _ChannelServer_ChannelsReadMessageContents_Handler,
		},
		{
			MethodName: "MigrateChat",
			Handler:    _ChannelServer_MigrateChat_Handler,
		},
		{
			MethodName: "EditChannelMessage",
			Handler:    _ChannelServer_EditChannelMessage_Handler,
		},
		{
			MethodName: "SearchChannelMessage",
			Handler:    _ChannelServer_SearchChannelMessage_Handler,
		},
		{
			MethodName: "SearchChannelMediaMessage",
			Handler:    _ChannelServer_SearchChannelMediaMessage_Handler,
		},
		{
			MethodName: "SendLogMsg",
			Handler:    _ChannelServer_SendLogMsg_Handler,
		},
		{
			MethodName: "RequestSendRpm",
			Handler:    _ChannelServer_RequestSendRpm_Handler,
		},
		{
			MethodName: "RequestEditRpm",
			Handler:    _ChannelServer_RequestEditRpm_Handler,
		},
		{
			MethodName: "RequestEditRpmV2",
			Handler:    _ChannelServer_RequestEditRpmV2_Handler,
		},
		{
			MethodName: "RequestEditPayment",
			Handler:    _ChannelServer_RequestEditPayment_Handler,
		},
		{
			MethodName: "RequestRecvRpm",
			Handler:    _ChannelServer_RequestRecvRpm_Handler,
		},
		{
			MethodName: "GetChannelMembersCount",
			Handler:    _ChannelServer_GetChannelMembersCount_Handler,
		},
		{
			MethodName: "IsChannelAdminOrCreator",
			Handler:    _ChannelServer_IsChannelAdminOrCreator_Handler,
		},
		{
			MethodName: "MessageReadMentions",
			Handler:    _ChannelServer_MessageReadMentions_Handler,
		},
		{
			MethodName: "CreateSuperChat",
			Handler:    _ChannelServer_CreateSuperChat_Handler,
		},
		{
			MethodName: "SendVote",
			Handler:    _ChannelServer_SendVote_Handler,
		},
		{
			MethodName: "GetPollResults",
			Handler:    _ChannelServer_GetPollResults_Handler,
		},
		{
			MethodName: "EditChatDefaultBannedRights",
			Handler:    _ChannelServer_EditChatDefaultBannedRights_Handler,
		},
		{
			MethodName: "HandleToggleSlowMode",
			Handler:    _ChannelServer_HandleToggleSlowMode_Handler,
		},
		{
			MethodName: "HandleToggleSignatures",
			Handler:    _ChannelServer_HandleToggleSignatures_Handler,
		},
		{
			MethodName: "HandleToggleHistoryHidden",
			Handler:    _ChannelServer_HandleToggleHistoryHidden_Handler,
		},
		{
			MethodName: "SetChannelBanMode",
			Handler:    _ChannelServer_SetChannelBanMode_Handler,
		},
		{
			MethodName: "CHsGetUserOwnChannels",
			Handler:    _ChannelServer_CHsGetUserOwnChannels_Handler,
		},
		{
			MethodName: "RestrictChannel",
			Handler:    _ChannelServer_RestrictChannel_Handler,
		},
		{
			MethodName: "TransferGroupOwnerById",
			Handler:    _ChannelServer_TransferGroupOwnerById_Handler,
		},
		{
			MethodName: "GetHotGroups",
			Handler:    _ChannelServer_GetHotGroups_Handler,
		},
		{
			MethodName: "SetDiscussionGroup",
			Handler:    _ChannelServer_SetDiscussionGroup_Handler,
		},
		{
			MethodName: "GetGroupsForDiscussion",
			Handler:    _ChannelServer_GetGroupsForDiscussion_Handler,
		},
		{
			MethodName: "GroupLiveStart",
			Handler:    _ChannelServer_GroupLiveStart_Handler,
		},
		{
			MethodName: "GroupLiveStop",
			Handler:    _ChannelServer_GroupLiveStop_Handler,
		},
		{
			MethodName: "GetLiveInviteUrl",
			Handler:    _ChannelServer_GetLiveInviteUrl_Handler,
		},
		{
			MethodName: "EditLiveInfo",
			Handler:    _ChannelServer_EditLiveInfo_Handler,
		},
		{
			MethodName: "GetLiveInviteCnt",
			Handler:    _ChannelServer_GetLiveInviteCnt_Handler,
		},
		{
			MethodName: "GroupLiveCheck",
			Handler:    _ChannelServer_GroupLiveCheck_Handler,
		},
		{
			MethodName: "CheckUserInGroup",
			Handler:    _ChannelServer_CheckUserInGroup_Handler,
		},
		{
			MethodName: "GetGroupUserIds",
			Handler:    _ChannelServer_GetGroupUserIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/pbchannelserver/pbchannelserver.proto",
}

func (m *GetGroupsForDiscussionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGroupsForDiscussionReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n1, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GetGroupsForDiscussionRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGroupsForDiscussionRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Error))
	}
	if len(m.Reply) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n2, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *SetDiscussionGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDiscussionGroupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Broadcast != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Broadcast))
	}
	if m.Megagroup != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Megagroup))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n3, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *SetDiscussionGroupRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDiscussionGroupRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqCreateSuperChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateSuperChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Obj) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Obj)))
		i += copy(dAtA[i:], m.Obj)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n4, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ReqIsChannelAdminOrCreator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqIsChannelAdminOrCreator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n5, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *ReqGetChannelMembersCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMembersCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n6, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *ReplyGetChannelMembersCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelMembersCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMembersCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelMembersCount))
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqSendLogMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendLogMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Author) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Author)))
		i += copy(dAtA[i:], m.Author)
	}
	if len(m.Level) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Level)))
		i += copy(dAtA[i:], m.Level)
	}
	return i, nil
}

func (m *ForwardMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Date != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Date))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Media != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Media))
	}
	if len(m.Meidadata) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Meidadata)))
		i += copy(dAtA[i:], m.Meidadata)
	}
	if len(m.ReplyMarkup) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.ReplyMarkup)))
		i += copy(dAtA[i:], m.ReplyMarkup)
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			dAtA[i] = 0x32
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Fromid != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Fromid))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Encry))
	}
	if len(m.FwdFrom) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.FwdFrom)))
		i += copy(dAtA[i:], m.FwdFrom)
	}
	if m.View != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.View))
	}
	if m.Groupid != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Groupid))
	}
	if m.ViaBotId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ViaBotId))
	}
	return i, nil
}

func (m *ReqForwardMessageToChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqForwardMessageToChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Fromid))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Flags))
	}
	if m.Silent {
		dAtA[i] = 0x18
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Background {
		dAtA[i] = 0x20
		i++
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WithMyScore {
		dAtA[i] = 0x28
		i++
		if m.WithMyScore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.FromPeer) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.FromPeer)))
		i += copy(dAtA[i:], m.FromPeer)
	}
	if len(m.Id) > 0 {
		dAtA8 := make([]byte, len(m.Id)*10)
		var j7 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if len(m.RandomId) > 0 {
		dAtA10 := make([]byte, len(m.RandomId)*10)
		var j9 int
		for _, num1 := range m.RandomId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if len(m.ToPeer) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.ToPeer)))
		i += copy(dAtA[i:], m.ToPeer)
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyid))
	}
	if len(m.MsgList) > 0 {
		for _, msg := range m.MsgList {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Encry != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Encry))
	}
	if len(m.Userlist) > 0 {
		dAtA12 := make([]byte, len(m.Userlist)*10)
		var j11 int
		for _, num1 := range m.Userlist {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		dAtA[i] = 0x6a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(j11))
		i += copy(dAtA[i:], dAtA12[:j11])
	}
	if len(m.Chatlist) > 0 {
		dAtA14 := make([]byte, len(m.Chatlist)*10)
		var j13 int
		for _, num1 := range m.Chatlist {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		dAtA[i] = 0x72
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(j13))
		i += copy(dAtA[i:], dAtA14[:j13])
	}
	if len(m.Channellist) > 0 {
		dAtA16 := make([]byte, len(m.Channellist)*10)
		var j15 int
		for _, num1 := range m.Channellist {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		dAtA[i] = 0x7a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(j15))
		i += copy(dAtA[i:], dAtA16[:j15])
	}
	if m.Debug != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n17, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *ReqMigrateToChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMigrateToChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n18, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.FromID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromID))
	}
	if m.ChatID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChatID))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MsgId))
	}
	return i, nil
}

func (m *ReplyMigrateToChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyMigrateToChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelMsgId))
	}
	if m.ChannelPts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelPts))
	}
	if m.ChannelID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelID))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	return i, nil
}

func (m *ReqSearchChannelMediaMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSearchChannelMediaMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReqMessageSearch != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ReqMessageSearch.Size()))
		n19, err := m.ReqMessageSearch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if len(m.SType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.SType)))
		i += copy(dAtA[i:], m.SType)
	}
	if m.Withid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Withid))
	}
	if m.WithType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.WithType))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Encry))
	}
	return i, nil
}

func (m *SearchChannelMsgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchChannelMsgReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserID))
	}
	if m.ChannelID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelID))
	}
	if m.FromID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromID))
	}
	if len(m.Medias) > 0 {
		dAtA21 := make([]byte, len(m.Medias)*10)
		var j20 int
		for _, num1 := range m.Medias {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			dAtA21[j20] = uint8(num)
			j20++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(j20))
		i += copy(dAtA[i:], dAtA21[:j20])
	}
	if m.OffsetID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.OffsetID))
	}
	if m.AddOffset != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AddOffset))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Encry))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Limit))
	}
	if m.MinDate != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MinDate))
	}
	if m.MaxDate != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MaxDate))
	}
	if m.MinID != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MinID))
	}
	if m.MaxID != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MaxID))
	}
	return i, nil
}

func (m *SearchChannelMsgResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchChannelMsgResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReplyChannelData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannelData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ErrorCode))
	}
	if m.DialogAction != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.DialogAction.Size()))
		n22, err := m.DialogAction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	return i, nil
}

func (m *DialogAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialogAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CheckOrInsertDialog) > 0 {
		for _, msg := range m.CheckOrInsertDialog {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DeleteUserDialog) > 0 {
		for _, msg := range m.DeleteUserDialog {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UpdatePeerDialogIncr) > 0 {
		for _, msg := range m.UpdatePeerDialogIncr {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UpdatePeerDialogIncrCounter) > 0 {
		for _, msg := range m.UpdatePeerDialogIncrCounter {
			dAtA[i] = 0x22
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CreateChannelDialog) > 0 {
		for _, msg := range m.CreateChannelDialog {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CheckRecDialog) > 0 {
		for _, msg := range m.CheckRecDialog {
			dAtA[i] = 0x32
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UpdateOrInsertUserChanDlg) > 0 {
		for _, msg := range m.UpdateOrInsertUserChanDlg {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CheckChannelOrInsert) > 0 {
		for _, msg := range m.CheckChannelOrInsert {
			dAtA[i] = 0x42
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SetSuperGroupMsg) > 0 {
		for _, msg := range m.SetSuperGroupMsg {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CheckChannelOrInsertDlgNotClearDraft) > 0 {
		for _, msg := range m.CheckChannelOrInsertDlgNotClearDraft {
			dAtA[i] = 0x52
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UpdateOrInsertUserChanDlgNotClearDraft) > 0 {
		for _, msg := range m.UpdateOrInsertUserChanDlgNotClearDraft {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UpdateChannelReadoutbox) > 0 {
		for _, msg := range m.UpdateChannelReadoutbox {
			dAtA[i] = 0x62
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CreateChannelDialogClearUnread) > 0 {
		for _, msg := range m.CreateChannelDialogClearUnread {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EditChannelLocationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditChannelLocationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n23, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.KeyId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MessageId))
	}
	if len(m.ReqBytes) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.ReqBytes)))
		i += copy(dAtA[i:], m.ReqBytes)
	}
	return i, nil
}

func (m *EditChannelLocationResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditChannelLocationResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RespBytes) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.RespBytes)))
		i += copy(dAtA[i:], m.RespBytes)
	}
	return i, nil
}

func (m *TransferGroupOwnerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferGroupOwnerReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n24, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.KeyId))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MessageId))
	}
	if len(m.ReqBytes) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.ReqBytes)))
		i += copy(dAtA[i:], m.ReqBytes)
	}
	return i, nil
}

func (m *TransferGroupOwnerResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferGroupOwnerResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RespBytes) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.RespBytes)))
		i += copy(dAtA[i:], m.RespBytes)
	}
	if m.DialogAction != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.DialogAction.Size()))
		n25, err := m.DialogAction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func (m *TransferGroupOwnerByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferGroupOwnerByIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debugs != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debugs.Size()))
		n26, err := m.Debugs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.ChanId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChanId))
	}
	if m.DestId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.DestId))
	}
	return i, nil
}

func (m *TransferGroupOwnerByIdRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferGroupOwnerByIdRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ReplyCode))
	}
	if len(m.ReplyInfo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.ReplyInfo)))
		i += copy(dAtA[i:], m.ReplyInfo)
	}
	return i, nil
}

func (m *UpdateChannelReadoutbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChannelReadoutbox) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n27, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.ReadOutMax != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ReadOutMax))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	return i, nil
}

func (m *CheckChannelOrInsertDlgNotClearDraft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckChannelOrInsertDlgNotClearDraft) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n28, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.Selfid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Selfid))
	}
	if m.Withid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Withid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Type))
	}
	if m.Msg != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Msg.Size()))
		n29, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if len(m.HandleType) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.HandleType)))
		i += copy(dAtA[i:], m.HandleType)
	}
	return i, nil
}

func (m *UpdateOrInsertUserChanDlgNotClearDraft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOrInsertUserChanDlgNotClearDraft) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n30, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.Selfid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Selfid))
	}
	if m.Withid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Withid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Type))
	}
	if m.Msg != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Msg.Size()))
		n31, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if len(m.HandleType) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.HandleType)))
		i += copy(dAtA[i:], m.HandleType)
	}
	return i, nil
}

func (m *SetSuperGroupMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetSuperGroupMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n32, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.Userid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Userid))
	}
	if m.Channelid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Channelid))
	}
	if m.Date != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Date))
	}
	if len(m.Msgbin) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Msgbin)))
		i += copy(dAtA[i:], m.Msgbin)
	}
	return i, nil
}

func (m *UpdateOrInsertUserChanDlg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOrInsertUserChanDlg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n33, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.Selfid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Selfid))
	}
	if m.Withid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Withid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Type))
	}
	if m.Msg != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Msg.Size()))
		n34, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if len(m.HandleType) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.HandleType)))
		i += copy(dAtA[i:], m.HandleType)
	}
	return i, nil
}

func (m *CheckChannelOrInsert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckChannelOrInsert) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n35, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.Selfid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Selfid))
	}
	if m.Withid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Withid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Type))
	}
	if m.Msg != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Msg.Size()))
		n36, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if len(m.HandleType) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.HandleType)))
		i += copy(dAtA[i:], m.HandleType)
	}
	return i, nil
}

func (m *CheckRecDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckRecDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n37, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.Channelid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Channelid))
	}
	if m.Msgid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Msgid))
	}
	if m.Readin != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Readin))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Pts))
	}
	return i, nil
}

func (m *CheckOrInsertDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckOrInsertDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n38, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if m.Selfid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Selfid))
	}
	if m.Withid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Withid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Type))
	}
	if m.Msg != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Msg.Size()))
		n39, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	if len(m.HandleType) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.HandleType)))
		i += copy(dAtA[i:], m.HandleType)
	}
	return i, nil
}

func (m *DeleteUserDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUserDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n40, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if m.Selfid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Selfid))
	}
	if m.Withid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Withid))
	}
	if m.Peer != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Peer))
	}
	return i, nil
}

func (m *UpdatePeerDialogIncr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePeerDialogIncr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n41, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if m.UpdateUserDialogParam != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UpdateUserDialogParam.Size()))
		n42, err := m.UpdateUserDialogParam.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}

func (m *UpdatePeerDialogIncrCounter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePeerDialogIncrCounter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n43, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.UpdateUserDialogParam != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UpdateUserDialogParam.Size()))
		n44, err := m.UpdateUserDialogParam.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}

func (m *CreateChannelDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChannelDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n45, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.Channelid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Channelid))
	}
	if m.Msgid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Msgid))
	}
	if m.Readin != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Readin))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Pts))
	}
	if m.Pinned {
		dAtA[i] = 0x38
		i++
		if m.Pinned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CreateChannelDialogClearUnread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChannelDialogClearUnread) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n46, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.Channelid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Channelid))
	}
	if m.Msgid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Msgid))
	}
	if m.Readin != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Readin))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Pts))
	}
	if m.Pinned {
		dAtA[i] = 0x38
		i++
		if m.Pinned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReqChannelsReadMessageContents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChannelsReadMessageContents) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Keyid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Keyid))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Result) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n47, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}

func (m *ReqEditPrivateChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditPrivateChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.Ok {
		dAtA[i] = 0x18
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n48, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}

func (m *ReqGetChannelMessageExportLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMessageExportLink) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n49, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}

func (m *ReqEditEveryoneQuiet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditEveryoneQuiet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.Quiet {
		dAtA[i] = 0x18
		i++
		if m.Quiet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n50, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}

func (m *Channel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Channel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Flags))
	}
	if m.Creator {
		dAtA[i] = 0x10
		i++
		if m.Creator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Kicked {
		dAtA[i] = 0x18
		i++
		if m.Kicked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Left {
		dAtA[i] = 0x20
		i++
		if m.Left {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Editor {
		dAtA[i] = 0x28
		i++
		if m.Editor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Moderator {
		dAtA[i] = 0x30
		i++
		if m.Moderator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Broadcast {
		dAtA[i] = 0x38
		i++
		if m.Broadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Verified {
		dAtA[i] = 0x40
		i++
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Megagroup {
		dAtA[i] = 0x48
		i++
		if m.Megagroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Restricted {
		dAtA[i] = 0x50
		i++
		if m.Restricted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Democracy {
		dAtA[i] = 0x58
		i++
		if m.Democracy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Signatures {
		dAtA[i] = 0x60
		i++
		if m.Signatures {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Min {
		dAtA[i] = 0x68
		i++
		if m.Min {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Id != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Id))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.Photo != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Photo))
	}
	if m.Date != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Date))
	}
	if m.Version != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Version))
	}
	if m.RestrictionReason {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.RestrictionReason {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateNewChannelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNewChannelMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Flags))
	}
	if m.Out {
		dAtA[i] = 0x10
		i++
		if m.Out {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Mentioned {
		dAtA[i] = 0x18
		i++
		if m.Mentioned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MediaUnread {
		dAtA[i] = 0x20
		i++
		if m.MediaUnread {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Silent {
		dAtA[i] = 0x28
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Post {
		dAtA[i] = 0x30
		i++
		if m.Post {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Id != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Id))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.ToId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ToId))
	}
	if m.ReplyToMsgId {
		dAtA[i] = 0x50
		i++
		if m.ReplyToMsgId {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Date != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Date))
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if m.Pts != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Pts))
	}
	if m.PtsCount != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.PtsCount))
	}
	return i, nil
}

func (m *ReqCreateChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCreateChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.BroadCast {
		dAtA[i] = 0x30
		i++
		if m.BroadCast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Megagroup {
		dAtA[i] = 0x38
		i++
		if m.Megagroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ReplyMsgId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ReplyMsgId))
	}
	if m.HasGeo {
		dAtA[i] = 0x48
		i++
		if m.HasGeo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Location) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Location)))
		i += copy(dAtA[i:], m.Location)
	}
	if len(m.Addr) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if m.BanAddContact {
		dAtA[i] = 0x60
		i++
		if m.BanAddContact {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n51, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}

func (m *ReqInviteChannelMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqInviteChannelMember) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.PeerId) > 0 {
		dAtA53 := make([]byte, len(m.PeerId)*10)
		var j52 int
		for _, num1 := range m.PeerId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA53[j52] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j52++
			}
			dAtA53[j52] = uint8(num)
			j52++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(j52))
		i += copy(dAtA[i:], dAtA53[:j52])
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.IsForce {
		dAtA[i] = 0x38
		i++
		if m.IsForce {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n54, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}

func (m *ReqJoinChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqJoinChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.ByLink {
		dAtA[i] = 0x38
		i++
		if m.ByLink {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Invitor != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Invitor))
	}
	if m.Debug != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n55, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	if m.InviteType != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.InviteType))
	}
	return i, nil
}

func (m *ReqKickFromChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqKickFromChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.Kicker != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Kicker))
	}
	if m.Kickee != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Kickee))
	}
	if m.IsBotUser {
		dAtA[i] = 0x20
		i++
		if m.IsBotUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsKicked {
		dAtA[i] = 0x28
		i++
		if m.IsKicked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.KickedId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.KickedId))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n56, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	return i, nil
}

func (m *ReqLeaveChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqLeaveChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n57, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	return i, nil
}

func (m *ReqEditChannelTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChannelTitle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n58, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}

func (m *ReqEditChannelAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChannelAdmin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyId))
	}
	if len(m.Role) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Role)))
		i += copy(dAtA[i:], m.Role)
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.KeyId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.Rank) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Rank)))
		i += copy(dAtA[i:], m.Rank)
	}
	if m.Debug != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n59, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	return i, nil
}

func (m *ReqEditChannelPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChannelPhoto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n60, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	return i, nil
}

func (m *ChatInviteExported) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatInviteExported) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Link) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n61, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	return i, nil
}

func (m *ReqEditChannelAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditChannelAbout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n62, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	return i, nil
}

func (m *ReqDeleteChannelMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteChannelMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Flags))
	}
	if m.Revoke {
		dAtA[i] = 0x20
		i++
		if m.Revoke {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Id) > 0 {
		dAtA64 := make([]byte, len(m.Id)*10)
		var j63 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA64[j63] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j63++
			}
			dAtA64[j63] = uint8(num)
			j63++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(j63))
		i += copy(dAtA[i:], dAtA64[:j63])
	}
	if m.Channelid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Channelid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n65, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	return i, nil
}

func (m *ReqDeleteChannelSelfHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteChannelSelfHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.FromidPts != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromidPts))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n66, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	return i, nil
}

func (m *ReqDeleteChannelHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteChannelHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UsreId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UsreId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n67, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	return i, nil
}

func (m *ReqUpdatePinnedChannelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdatePinnedChannelMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Flags))
	}
	if m.Silent {
		dAtA[i] = 0x18
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.Id != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Id))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n68, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	return i, nil
}

func (m *ReqDeleteChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n69, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	return i, nil
}

func (m *ReqReadChannelHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqReadChannelHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyid))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.TopMsgId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.TopMsgId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n70, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	if m.ChannelDialog != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelDialog.Size()))
		n71, err := m.ChannelDialog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	return i, nil
}

func (m *ReqUpdateChannelReadOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateChannelReadOut) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MaxId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n72, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	return i, nil
}

func (m *ReplyUpdateChannelReadOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUpdateChannelReadOut) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Maxid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Maxid))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Pts))
	}
	return i, nil
}

func (m *ReqGetChannelDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelDifference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Flags))
	}
	if m.Force {
		dAtA[i] = 0x20
		i++
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Pts))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Limit))
	}
	if m.Range_MinId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Range_MinId))
	}
	if m.Range_MaxId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Range_MaxId))
	}
	if m.Device != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Device))
	}
	if m.Debug != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n73, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	if m.ChannelDialog != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelDialog.Size()))
		n74, err := m.ChannelDialog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	return i, nil
}

func (m *ReplyGetChannelDifferenceEmpty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelDifferenceEmpty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Flags))
	}
	if m.Final {
		dAtA[i] = 0x10
		i++
		if m.Final {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Pts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Pts))
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Timeout))
	}
	return i, nil
}

func (m *ReplyGetChannelDifferenceTooLong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelDifferenceTooLong) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Flags))
	}
	if m.Final {
		dAtA[i] = 0x10
		i++
		if m.Final {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Pts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Pts))
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Timeout))
	}
	if m.TopMessage != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.TopMessage))
	}
	if m.ReadInboxMaxId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ReadInboxMaxId))
	}
	if m.ReadOutboxMaxId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ReadOutboxMaxId))
	}
	if m.UnreadCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UnreadCount))
	}
	if len(m.Msgs) > 0 {
		for _, b := range m.Msgs {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ReqGetChannelMsgHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMsgHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.OffsetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.OffsetId))
	}
	if m.OffsetDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.OffsetDate))
	}
	if m.AddOffset != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AddOffset))
	}
	if m.MinId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MinId))
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MaxId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Limit))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.KeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n75, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}

func (m *ReqGetParticipants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetParticipants) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OffSet != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.OffSet))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Limit))
	}
	if m.PartiType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.PartiType))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if len(m.Q) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	if m.Hash != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Hash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n76, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}

func (m *ReqGetParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetParticipant) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channelid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Channelid))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n77, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}

func (m *ReqGetChannelMessagesByMsgsId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMessagesByMsgsId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.MsgsId) > 0 {
		dAtA79 := make([]byte, len(m.MsgsId)*10)
		var j78 int
		for _, num1 := range m.MsgsId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA79[j78] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j78++
			}
			dAtA79[j78] = uint8(num)
			j78++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(j78))
		i += copy(dAtA[i:], dAtA79[:j78])
	}
	if m.FromId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n80, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	return i, nil
}

func (m *ReqGetChannelCommonDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelCommonDialogs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if len(m.ChannIds) > 0 {
		dAtA82 := make([]byte, len(m.ChannIds)*10)
		var j81 int
		for _, num1 := range m.ChannIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA82[j81] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j81++
			}
			dAtA82[j81] = uint8(num)
			j81++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(j81))
		i += copy(dAtA[i:], dAtA82[:j81])
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n83, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	return i, nil
}

func (m *ChannelDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.TopMessage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.TopMessage))
	}
	if m.MaxReadInId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MaxReadInId))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Encry))
	}
	return i, nil
}

func (m *ChannelDialogAndMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelDialogAndMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelDialog != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelDialog.Size()))
		n84, err := m.ChannelDialog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	if m.ChannelMsg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelMsg.Size()))
		n85, err := m.ChannelMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n85
	}
	return i, nil
}

func (m *ChannelDialogAndMsgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelDialogAndMsgs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelDialogAndMsg) > 0 {
		for _, msg := range m.ChannelDialogAndMsg {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Id))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.WithIdType))
	}
	if m.MessageType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MessageType))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Flags))
	}
	if m.Out {
		dAtA[i] = 0x38
		i++
		if m.Out {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Mentioned {
		dAtA[i] = 0x40
		i++
		if m.Mentioned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MediaUnread {
		dAtA[i] = 0x48
		i++
		if m.MediaUnread {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Silent {
		dAtA[i] = 0x50
		i++
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Post {
		dAtA[i] = 0x58
		i++
		if m.Post {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MsgId))
	}
	if m.ToId != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ToId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Pts))
	}
	if len(m.FwdFrom) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.FwdFrom)))
		i += copy(dAtA[i:], m.FwdFrom)
	}
	if m.ViaBotId != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ViaBotId))
	}
	if m.ReplyToMsgId != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ReplyToMsgId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Date))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Media != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Media))
	}
	if len(m.MediaData) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.MediaData)))
		i += copy(dAtA[i:], m.MediaData)
	}
	if len(m.ReplyMarkup) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.ReplyMarkup)))
		i += copy(dAtA[i:], m.ReplyMarkup)
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			dAtA[i] = 0xba
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.FromId != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.Views != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Views))
	}
	if m.EditDate != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.EditDate))
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if m.RandomId != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.RandomId))
	}
	if m.Uuid != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Uuid))
	}
	if m.InsertDate != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.InsertDate))
	}
	if m.UpdateDate != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UpdateDate))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Encry))
	}
	return i, nil
}

func (m *ReqGetChannelAdminLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelAdminLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AccessHash))
	}
	if len(m.Q) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	if m.EventFilter != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.EventFilter.Size()))
		n86, err := m.EventFilter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n86
	}
	if len(m.Admins) > 0 {
		dAtA88 := make([]byte, len(m.Admins)*10)
		var j87 int
		for _, num1 := range m.Admins {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA88[j87] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j87++
			}
			dAtA88[j87] = uint8(num)
			j87++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(j87))
		i += copy(dAtA[i:], dAtA88[:j87])
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MaxId))
	}
	if m.MinId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MinId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n89, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n89
	}
	return i, nil
}

func (m *ChannelAdminLogEventFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelAdminLogEventFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Flags))
	}
	if m.Join {
		dAtA[i] = 0x10
		i++
		if m.Join {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Leave {
		dAtA[i] = 0x18
		i++
		if m.Leave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Invite {
		dAtA[i] = 0x20
		i++
		if m.Invite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ban {
		dAtA[i] = 0x28
		i++
		if m.Ban {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Unban {
		dAtA[i] = 0x30
		i++
		if m.Unban {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Kick {
		dAtA[i] = 0x38
		i++
		if m.Kick {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Unkick {
		dAtA[i] = 0x40
		i++
		if m.Unkick {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Promote {
		dAtA[i] = 0x48
		i++
		if m.Promote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Demote {
		dAtA[i] = 0x50
		i++
		if m.Demote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Info {
		dAtA[i] = 0x58
		i++
		if m.Info {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Setting {
		dAtA[i] = 0x60
		i++
		if m.Setting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Pinned {
		dAtA[i] = 0x68
		i++
		if m.Pinned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Edit {
		dAtA[i] = 0x70
		i++
		if m.Edit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Delete {
		dAtA[i] = 0x78
		i++
		if m.Delete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReqImportChatInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqImportChatInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyId))
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n90, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n90
	}
	return i, nil
}

func (m *ReqEditBanChannelUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditBanChannelUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.BannedUserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.BannedUserId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.UtilDate != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UtilDate))
	}
	if m.ChannelBannedRights != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelBannedRights.Size()))
		n91, err := m.ChannelBannedRights.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n91
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n92, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n92
	}
	return i, nil
}

func (m *ReqGetFullChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetFullChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n93, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n93
	}
	if m.ChannelDialog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelDialog.Size()))
		n94, err := m.ChannelDialog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n94
	}
	if m.MsgMeta != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MsgMeta.Size()))
		n95, err := m.MsgMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n95
	}
	return i, nil
}

func (m *ReqGetFullChannelV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetFullChannelV2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n96, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n96
	}
	if m.ChannelDialog != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelDialog.Size()))
		n97, err := m.ChannelDialog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n97
	}
	if m.MsgMeta != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MsgMeta.Size()))
		n98, err := m.MsgMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n98
	}
	return i, nil
}

func (m *ChatMsgMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatMsgMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopMsg != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.TopMsg))
	}
	if m.TopPts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.TopPts))
	}
	if m.ToDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ToDate))
	}
	return i, nil
}

func (m *ReqExportChannelLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqExportChannelLink) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n99, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n99
	}
	return i, nil
}

func (m *ChannelBannedRights) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelBannedRights) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Flags))
	}
	if m.ViewMessages {
		dAtA[i] = 0x10
		i++
		if m.ViewMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendMessages {
		dAtA[i] = 0x18
		i++
		if m.SendMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendMedia {
		dAtA[i] = 0x20
		i++
		if m.SendMedia {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendStickers {
		dAtA[i] = 0x28
		i++
		if m.SendStickers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendGifs {
		dAtA[i] = 0x30
		i++
		if m.SendGifs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendGames {
		dAtA[i] = 0x38
		i++
		if m.SendGames {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendInline {
		dAtA[i] = 0x40
		i++
		if m.SendInline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EmbedLinks {
		dAtA[i] = 0x48
		i++
		if m.EmbedLinks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UntilDate != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UntilDate))
	}
	if m.InviteUser {
		dAtA[i] = 0x58
		i++
		if m.InviteUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PinMessage {
		dAtA[i] = 0x60
		i++
		if m.PinMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChangeGroupInfo {
		dAtA[i] = 0x68
		i++
		if m.ChangeGroupInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendPolls {
		dAtA[i] = 0x70
		i++
		if m.SendPolls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReqChannelToggleInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChannelToggleInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.Enabled {
		dAtA[i] = 0x18
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n100, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n100
	}
	return i, nil
}

func (m *ReqGetChannels) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannels) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelIds) > 0 {
		dAtA102 := make([]byte, len(m.ChannelIds)*10)
		var j101 int
		for _, num1 := range m.ChannelIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA102[j101] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j101++
			}
			dAtA102[j101] = uint8(num)
			j101++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(j101))
		i += copy(dAtA[i:], dAtA102[:j101])
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n103, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n103
	}
	return i, nil
}

func (m *ReqUpdateChannelUserName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateChannelUserName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n104, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n104
	}
	return i, nil
}

func (m *ReqCheckChannelUserName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCheckChannelUserName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n105, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n105
	}
	return i, nil
}

func (m *ReqChangeGroupAndChannelCrator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChangeGroupAndChannelCrator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.GroupId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.OperatorId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.OperatorId))
	}
	if m.IsChat {
		dAtA[i] = 0x20
		i++
		if m.IsChat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReqSendRpm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSendRpm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromKeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if len(m.Req) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Req)))
		i += copy(dAtA[i:], m.Req)
	}
	if len(m.RpmResp) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.RpmResp)))
		i += copy(dAtA[i:], m.RpmResp)
	}
	if m.Dbg != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Dbg.Size()))
		n106, err := m.Dbg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n106
	}
	return i, nil
}

func (m *ReplySendRpm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplySendRpm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.Meta != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Meta.Size()))
		n107, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n107
	}
	if m.ErrCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *ReqEditRpm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditRpm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromKeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.ChanId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChanId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MsgId))
	}
	if m.ChanAccHash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChanAccHash))
	}
	if m.RpmResultCode != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.RpmResultCode))
	}
	if m.Dbg != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Dbg.Size()))
		n108, err := m.Dbg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n108
	}
	return i, nil
}

func (m *ReqEditRpmV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditRpmV2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromKeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.ChanId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChanId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MsgId))
	}
	if m.ChanAccHash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChanAccHash))
	}
	if len(m.RpmResult) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.RpmResult)))
		i += copy(dAtA[i:], m.RpmResult)
	}
	if m.Dbg != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Dbg.Size()))
		n109, err := m.Dbg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n109
	}
	return i, nil
}

func (m *ReqEditPayment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqEditPayment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromKeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.ChanId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChanId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MsgId))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Flags))
	}
	if m.ChanAccHash != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChanAccHash))
	}
	if len(m.RpmResult) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.RpmResult)))
		i += copy(dAtA[i:], m.RpmResult)
	}
	if len(m.Options) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Options)))
		i += copy(dAtA[i:], m.Options)
	}
	if m.Dbg != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Dbg.Size()))
		n110, err := m.Dbg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n110
	}
	return i, nil
}

func (m *ReplyEditRpm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyEditRpm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.ErrCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *ReqRecvRpm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRecvRpm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromKeyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if len(m.Req) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Req)))
		i += copy(dAtA[i:], m.Req)
	}
	if len(m.MetaData) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.MetaData)))
		i += copy(dAtA[i:], m.MetaData)
	}
	if m.Dbg != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Dbg.Size()))
		n111, err := m.Dbg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n111
	}
	return i, nil
}

func (m *ReplyRecvRpm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyRecvRpm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.ErrCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *ReqMessageReadMentions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMessageReadMentions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.ChanId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChanId))
	}
	if m.Dbg != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Dbg.Size()))
		n112, err := m.Dbg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n112
	}
	return i, nil
}

func (m *ReplyMessageReadMentions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyMessageReadMentions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pts != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Pts))
	}
	if m.PtsCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.PtsCount))
	}
	if m.OffsetId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.OffsetId))
	}
	if m.ErrCode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.ErrStr) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.ErrStr)))
		i += copy(dAtA[i:], m.ErrStr)
	}
	return i, nil
}

func (m *SendVoteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendVoteReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Fromid))
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MsgId))
	}
	if len(m.Options) > 0 {
		for _, s := range m.Options {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.FromKey != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKey))
	}
	if m.Stop {
		dAtA[i] = 0x30
		i++
		if m.Stop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n113, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n113
	}
	return i, nil
}

func (m *SendVoteReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendVoteReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *GetPollResultsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPollResultsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fromid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Fromid))
	}
	if len(m.Peer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Peer)))
		i += copy(dAtA[i:], m.Peer)
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.MsgId))
	}
	if m.FromKey != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKey))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n114, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n114
	}
	return i, nil
}

func (m *GetPollResultsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPollResultsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Reply)))
		i += copy(dAtA[i:], m.Reply)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *ChatBannedRights) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatBannedRights) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Flags))
	}
	if m.ViewMessages {
		dAtA[i] = 0x10
		i++
		if m.ViewMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendMessages {
		dAtA[i] = 0x18
		i++
		if m.SendMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendMedia {
		dAtA[i] = 0x20
		i++
		if m.SendMedia {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendStickers {
		dAtA[i] = 0x28
		i++
		if m.SendStickers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendGifs {
		dAtA[i] = 0x30
		i++
		if m.SendGifs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendGames {
		dAtA[i] = 0x38
		i++
		if m.SendGames {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendInline {
		dAtA[i] = 0x40
		i++
		if m.SendInline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EmbedLinks {
		dAtA[i] = 0x48
		i++
		if m.EmbedLinks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendPolls {
		dAtA[i] = 0x50
		i++
		if m.SendPolls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChangeInfo {
		dAtA[i] = 0x58
		i++
		if m.ChangeInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InviteUsers {
		dAtA[i] = 0x60
		i++
		if m.InviteUsers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PinMessages {
		dAtA[i] = 0x68
		i++
		if m.PinMessages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UntilDate != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UntilDate))
	}
	return i, nil
}

func (m *EditChatDefaultBannedRightsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditChatDefaultBannedRightsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReqMessageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ReqMessageId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.AccessHash))
	}
	if m.BannedFlag != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.BannedFlag.Size()))
		n115, err := m.BannedFlag.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n115
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n116, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n116
	}
	return i, nil
}

func (m *EditChatDefaultBannedRightsRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditChatDefaultBannedRightsRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	return i, nil
}

func (m *HandleToggleSlowModeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleToggleSlowModeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChnlId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChnlId))
	}
	if m.HashId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.HashId))
	}
	if m.Seconds != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Seconds))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n117, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n117
	}
	return i, nil
}

func (m *HandleToggleSlowModeRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleToggleSlowModeRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Results != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Results))
	}
	if len(m.Updates) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Updates)))
		i += copy(dAtA[i:], m.Updates)
	}
	return i, nil
}

func (m *HandleToggleSignaturesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleToggleSignaturesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChnlId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChnlId))
	}
	if m.HashId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.HashId))
	}
	if m.IsSign {
		dAtA[i] = 0x18
		i++
		if m.IsSign {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FromId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromKeyId))
	}
	return i, nil
}

func (m *HandleToggleSignaturesRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleToggleSignaturesRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Results {
		dAtA[i] = 0x8
		i++
		if m.Results {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ReplyByte) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.ReplyByte)))
		i += copy(dAtA[i:], m.ReplyByte)
	}
	return i, nil
}

func (m *ChannelToggleHistoryHiddenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelToggleHistoryHiddenReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChnlId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChnlId))
	}
	if m.HashId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.HashId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.IsHide {
		dAtA[i] = 0x28
		i++
		if m.IsHide {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ChannelToggleHistoryHiddenRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelToggleHistoryHiddenRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Results {
		dAtA[i] = 0x8
		i++
		if m.Results {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ReplyByte) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.ReplyByte)))
		i += copy(dAtA[i:], m.ReplyByte)
	}
	return i, nil
}

func (m *SetChannelBanModeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetChannelBanModeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChnlId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChnlId))
	}
	if m.HashId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.HashId))
	}
	if m.FromId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.BanMode {
		dAtA[i] = 0x20
		i++
		if m.BanMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n118, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n118
	}
	return i, nil
}

func (m *SetChannelBanModeRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetChannelBanModeRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ReplyCode))
	}
	if len(m.ReplyBuff) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.ReplyBuff)))
		i += copy(dAtA[i:], m.ReplyBuff)
	}
	return i, nil
}

func (m *CHsGetUserOwnChannelsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CHsGetUserOwnChannelsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *ChannelBrief) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelBrief) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChnlId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChnlId))
	}
	if m.HashId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.HashId))
	}
	if m.BroadcastOrMegagroup {
		dAtA[i] = 0x18
		i++
		if m.BroadcastOrMegagroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	return i, nil
}

func (m *CHsGetUserOwnChannelsRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CHsGetUserOwnChannelsRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Chnls) > 0 {
		for _, msg := range m.Chnls {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPbchannelserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RestrictChannelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestrictChannelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *RestrictChannelRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestrictChannelRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ReplyCode))
	}
	if len(m.ReplyInfo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.ReplyInfo)))
		i += copy(dAtA[i:], m.ReplyInfo)
	}
	return i, nil
}

func (m *JoinByQrCodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinByQrCodeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.QrCode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.QrCode)))
		i += copy(dAtA[i:], m.QrCode)
	}
	return i, nil
}

func (m *JoinByQrCodeRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinByQrCodeRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LiveStartReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveStartReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BeginAt != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.BeginAt))
	}
	if m.GroupId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.GroupId))
	}
	if m.LiveStat != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.LiveStat))
	}
	if m.LiveType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.LiveType))
	}
	if m.LiveUser != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.LiveUser))
	}
	if m.LiveRoom != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.LiveRoom))
	}
	if m.LivePkId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.LivePkId))
	}
	if len(m.LiveFlag) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.LiveFlag)))
		i += copy(dAtA[i:], m.LiveFlag)
	}
	if len(m.LiveName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.LiveName)))
		i += copy(dAtA[i:], m.LiveName)
	}
	if len(m.LiveIcon) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.LiveIcon)))
		i += copy(dAtA[i:], m.LiveIcon)
	}
	return i, nil
}

func (m *LiveStartRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveStartRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ReplyCode))
	}
	if len(m.InviteUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.InviteUrl)))
		i += copy(dAtA[i:], m.InviteUrl)
	}
	return i, nil
}

func (m *LiveStopReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveStopReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.GroupId))
	}
	if m.LiveUser != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.LiveUser))
	}
	if m.LiveStat != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.LiveStat))
	}
	if len(m.LiveCode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.LiveCode)))
		i += copy(dAtA[i:], m.LiveCode)
	}
	return i, nil
}

func (m *LiveStopRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveStopRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RetCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.RetCode))
	}
	if m.Invited != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Invited))
	}
	return i, nil
}

func (m *GetLiveInviteUrlReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLiveInviteUrlReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BeginAt != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.BeginAt))
	}
	if m.GroupId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.GroupId))
	}
	if m.LiveUser != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.LiveUser))
	}
	return i, nil
}

func (m *GetLiveInviteUrlRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLiveInviteUrlRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ReplyCode))
	}
	if len(m.InviteUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.InviteUrl)))
		i += copy(dAtA[i:], m.InviteUrl)
	}
	return i, nil
}

func (m *EditLiveInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditLiveInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BeginAt != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.BeginAt))
	}
	if m.GroupId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.GroupId))
	}
	if m.LiveStat != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.LiveStat))
	}
	if m.LiveType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.LiveType))
	}
	if m.LiveUser != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.LiveUser))
	}
	if m.LiveRoom != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.LiveRoom))
	}
	if len(m.LiveFlag) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.LiveFlag)))
		i += copy(dAtA[i:], m.LiveFlag)
	}
	if len(m.LiveName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.LiveName)))
		i += copy(dAtA[i:], m.LiveName)
	}
	if len(m.LiveIcon) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.LiveIcon)))
		i += copy(dAtA[i:], m.LiveIcon)
	}
	return i, nil
}

func (m *EditLiveInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditLiveInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ReplyCode))
	}
	if len(m.ReplyData) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.ReplyData)))
		i += copy(dAtA[i:], m.ReplyData)
	}
	return i, nil
}

func (m *GroupLiveCheckReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupLiveCheckReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.GroupId))
	}
	if m.LiveUser != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.LiveUser))
	}
	return i, nil
}

func (m *GroupLiveCheckRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupLiveCheckRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ReplyCode))
	}
	if len(m.ReplyData) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.ReplyData)))
		i += copy(dAtA[i:], m.ReplyData)
	}
	return i, nil
}

func (m *GetLiveInviteCntReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLiveInviteCntReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.GroupId))
	}
	if m.LiveUser != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.LiveUser))
	}
	return i, nil
}

func (m *GetLiveInviteCntRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLiveInviteCntRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RetCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.RetCode))
	}
	if m.Invited != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Invited))
	}
	return i, nil
}

func (m *CheckUserInGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserInGroupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.GroupId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *CheckUserInGroupRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserInGroupRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InGroup {
		dAtA[i] = 0x8
		i++
		if m.InGroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetGroupUserIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGroupUserIdsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChanId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.ChanId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.UserId))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Offset))
	}
	if m.Length != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Length))
	}
	return i, nil
}

func (m *GetGroupUserIdsRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGroupUserIdsRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RetNo != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.RetNo))
	}
	if m.Total != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Total))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Count))
	}
	if len(m.Users) > 0 {
		dAtA120 := make([]byte, len(m.Users)*10)
		var j119 int
		for _, num1 := range m.Users {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA120[j119] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j119++
			}
			dAtA120[j119] = uint8(num)
			j119++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(j119))
		i += copy(dAtA[i:], dAtA120[:j119])
	}
	return i, nil
}

func (m *GetHotGroupsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHotGroupsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.FromId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Limit))
	}
	if m.Level != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Level))
	}
	if m.VerNo != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.VerNo))
	}
	if m.Hash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Hash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n121, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n121
	}
	return i, nil
}

func (m *GetHotGroupsRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHotGroupsRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Error))
	}
	if len(m.Bytes) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(len(m.Bytes)))
		i += copy(dAtA[i:], m.Bytes)
	}
	if m.Hash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Hash))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbchannelserver(dAtA, i, uint64(m.Debug.Size()))
		n122, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n122
	}
	return i, nil
}

func encodeVarintPbchannelserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetGroupsForDiscussionReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *GetGroupsForDiscussionRsp) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Error))
	}
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *SetDiscussionGroupReq) Size() (n int) {
	var l int
	_ = l
	if m.Broadcast != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Broadcast))
	}
	if m.Megagroup != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Megagroup))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *SetDiscussionGroupRsp) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqCreateSuperChat) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ErrorCode))
	}
	l = len(m.Obj)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.KeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqIsChannelAdminOrCreator) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqGetChannelMembersCount) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelMembersCount) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMembersCount != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelMembersCount))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqSendLogMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ForwardMsg) Size() (n int) {
	var l int
	_ = l
	if m.Date != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Date))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Media != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Media))
	}
	l = len(m.Meidadata)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.ReplyMarkup)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			l = len(b)
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	if m.Fromid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Fromid))
	}
	if m.Encry != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Encry))
	}
	l = len(m.FwdFrom)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.View != 0 {
		n += 1 + sovPbchannelserver(uint64(m.View))
	}
	if m.Groupid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Groupid))
	}
	if m.ViaBotId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ViaBotId))
	}
	return n
}

func (m *ReqForwardMessageToChannel) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Fromid))
	}
	if m.Flags != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Flags))
	}
	if m.Silent {
		n += 2
	}
	if m.Background {
		n += 2
	}
	if m.WithMyScore {
		n += 2
	}
	l = len(m.FromPeer)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovPbchannelserver(uint64(e))
		}
		n += 1 + sovPbchannelserver(uint64(l)) + l
	}
	if len(m.RandomId) > 0 {
		l = 0
		for _, e := range m.RandomId {
			l += sovPbchannelserver(uint64(e))
		}
		n += 1 + sovPbchannelserver(uint64(l)) + l
	}
	l = len(m.ToPeer)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyid))
	}
	if len(m.MsgList) > 0 {
		for _, e := range m.MsgList {
			l = e.Size()
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	if m.Encry != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Encry))
	}
	if len(m.Userlist) > 0 {
		l = 0
		for _, e := range m.Userlist {
			l += sovPbchannelserver(uint64(e))
		}
		n += 1 + sovPbchannelserver(uint64(l)) + l
	}
	if len(m.Chatlist) > 0 {
		l = 0
		for _, e := range m.Chatlist {
			l += sovPbchannelserver(uint64(e))
		}
		n += 1 + sovPbchannelserver(uint64(l)) + l
	}
	if len(m.Channellist) > 0 {
		l = 0
		for _, e := range m.Channellist {
			l += sovPbchannelserver(uint64(e))
		}
		n += 1 + sovPbchannelserver(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 2 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqMigrateToChannel) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.FromID != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromID))
	}
	if m.ChatID != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChatID))
	}
	if m.MsgId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MsgId))
	}
	return n
}

func (m *ReplyMigrateToChannel) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMsgId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelMsgId))
	}
	if m.ChannelPts != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelPts))
	}
	if m.ChannelID != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqSearchChannelMediaMessage) Size() (n int) {
	var l int
	_ = l
	if m.ReqMessageSearch != nil {
		l = m.ReqMessageSearch.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.SType)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Withid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Withid))
	}
	if m.WithType != 0 {
		n += 1 + sovPbchannelserver(uint64(m.WithType))
	}
	if m.Encry != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Encry))
	}
	return n
}

func (m *SearchChannelMsgReq) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserID))
	}
	if m.ChannelID != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelID))
	}
	if m.FromID != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromID))
	}
	if len(m.Medias) > 0 {
		l = 0
		for _, e := range m.Medias {
			l += sovPbchannelserver(uint64(e))
		}
		n += 1 + sovPbchannelserver(uint64(l)) + l
	}
	if m.OffsetID != 0 {
		n += 1 + sovPbchannelserver(uint64(m.OffsetID))
	}
	if m.AddOffset != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AddOffset))
	}
	if m.Encry != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Encry))
	}
	if m.Limit != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Limit))
	}
	if m.MinDate != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MinDate))
	}
	if m.MaxDate != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MaxDate))
	}
	if m.MinID != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MinID))
	}
	if m.MaxID != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MaxID))
	}
	return n
}

func (m *SearchChannelMsgResp) Size() (n int) {
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	return n
}

func (m *ReplyChannelData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ErrorCode))
	}
	if m.DialogAction != nil {
		l = m.DialogAction.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AccessHash))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	return n
}

func (m *DialogAction) Size() (n int) {
	var l int
	_ = l
	if len(m.CheckOrInsertDialog) > 0 {
		for _, e := range m.CheckOrInsertDialog {
			l = e.Size()
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	if len(m.DeleteUserDialog) > 0 {
		for _, e := range m.DeleteUserDialog {
			l = e.Size()
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	if len(m.UpdatePeerDialogIncr) > 0 {
		for _, e := range m.UpdatePeerDialogIncr {
			l = e.Size()
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	if len(m.UpdatePeerDialogIncrCounter) > 0 {
		for _, e := range m.UpdatePeerDialogIncrCounter {
			l = e.Size()
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	if len(m.CreateChannelDialog) > 0 {
		for _, e := range m.CreateChannelDialog {
			l = e.Size()
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	if len(m.CheckRecDialog) > 0 {
		for _, e := range m.CheckRecDialog {
			l = e.Size()
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	if len(m.UpdateOrInsertUserChanDlg) > 0 {
		for _, e := range m.UpdateOrInsertUserChanDlg {
			l = e.Size()
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	if len(m.CheckChannelOrInsert) > 0 {
		for _, e := range m.CheckChannelOrInsert {
			l = e.Size()
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	if len(m.SetSuperGroupMsg) > 0 {
		for _, e := range m.SetSuperGroupMsg {
			l = e.Size()
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	if len(m.CheckChannelOrInsertDlgNotClearDraft) > 0 {
		for _, e := range m.CheckChannelOrInsertDlgNotClearDraft {
			l = e.Size()
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	if len(m.UpdateOrInsertUserChanDlgNotClearDraft) > 0 {
		for _, e := range m.UpdateOrInsertUserChanDlgNotClearDraft {
			l = e.Size()
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	if len(m.UpdateChannelReadoutbox) > 0 {
		for _, e := range m.UpdateChannelReadoutbox {
			l = e.Size()
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	if len(m.CreateChannelDialogClearUnread) > 0 {
		for _, e := range m.CreateChannelDialogClearUnread {
			l = e.Size()
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	return n
}

func (m *EditChannelLocationReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.KeyId))
	}
	if m.MessageId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MessageId))
	}
	l = len(m.ReqBytes)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *EditChannelLocationResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.RespBytes)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *TransferGroupOwnerReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.KeyId))
	}
	if m.MessageId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MessageId))
	}
	l = len(m.ReqBytes)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *TransferGroupOwnerResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.RespBytes)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.DialogAction != nil {
		l = m.DialogAction.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *TransferGroupOwnerByIdReq) Size() (n int) {
	var l int
	_ = l
	if m.Debugs != nil {
		l = m.Debugs.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.ChanId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChanId))
	}
	if m.DestId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.DestId))
	}
	return n
}

func (m *TransferGroupOwnerByIdRsp) Size() (n int) {
	var l int
	_ = l
	if m.ReplyCode != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ReplyCode))
	}
	l = len(m.ReplyInfo)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *UpdateChannelReadoutbox) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.ReadOutMax != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ReadOutMax))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	return n
}

func (m *CheckChannelOrInsertDlgNotClearDraft) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Selfid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Selfid))
	}
	if m.Withid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Withid))
	}
	if m.Type != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Type))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.HandleType)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *UpdateOrInsertUserChanDlgNotClearDraft) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Selfid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Selfid))
	}
	if m.Withid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Withid))
	}
	if m.Type != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Type))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.HandleType)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *SetSuperGroupMsg) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Userid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Userid))
	}
	if m.Channelid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Channelid))
	}
	if m.Date != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Date))
	}
	l = len(m.Msgbin)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *UpdateOrInsertUserChanDlg) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Selfid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Selfid))
	}
	if m.Withid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Withid))
	}
	if m.Type != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Type))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.HandleType)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *CheckChannelOrInsert) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Selfid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Selfid))
	}
	if m.Withid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Withid))
	}
	if m.Type != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Type))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.HandleType)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *CheckRecDialog) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.Channelid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Channelid))
	}
	if m.Msgid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Msgid))
	}
	if m.Readin != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Readin))
	}
	if m.Pts != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Pts))
	}
	return n
}

func (m *CheckOrInsertDialog) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Selfid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Selfid))
	}
	if m.Withid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Withid))
	}
	if m.Type != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Type))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.HandleType)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *DeleteUserDialog) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Selfid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Selfid))
	}
	if m.Withid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Withid))
	}
	if m.Peer != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Peer))
	}
	return n
}

func (m *UpdatePeerDialogIncr) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.UpdateUserDialogParam != nil {
		l = m.UpdateUserDialogParam.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *UpdatePeerDialogIncrCounter) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.UpdateUserDialogParam != nil {
		l = m.UpdateUserDialogParam.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *CreateChannelDialog) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.Channelid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Channelid))
	}
	if m.Msgid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Msgid))
	}
	if m.Readin != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Readin))
	}
	if m.Pts != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Pts))
	}
	if m.Pinned {
		n += 2
	}
	return n
}

func (m *CreateChannelDialogClearUnread) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.Channelid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Channelid))
	}
	if m.Msgid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Msgid))
	}
	if m.Readin != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Readin))
	}
	if m.Pts != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Pts))
	}
	if m.Pinned {
		n += 2
	}
	return n
}

func (m *ReqChannelsReadMessageContents) Size() (n int) {
	var l int
	_ = l
	if m.Keyid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Keyid))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqEditPrivateChat) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.Ok {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqGetChannelMessageExportLink) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqEditEveryoneQuiet) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.Quiet {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *Channel) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Flags))
	}
	if m.Creator {
		n += 2
	}
	if m.Kicked {
		n += 2
	}
	if m.Left {
		n += 2
	}
	if m.Editor {
		n += 2
	}
	if m.Moderator {
		n += 2
	}
	if m.Broadcast {
		n += 2
	}
	if m.Verified {
		n += 2
	}
	if m.Megagroup {
		n += 2
	}
	if m.Restricted {
		n += 2
	}
	if m.Democracy {
		n += 2
	}
	if m.Signatures {
		n += 2
	}
	if m.Min {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Id))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AccessHash))
	}
	l = len(m.Title)
	if l > 0 {
		n += 2 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 2 + l + sovPbchannelserver(uint64(l))
	}
	if m.Photo != 0 {
		n += 2 + sovPbchannelserver(uint64(m.Photo))
	}
	if m.Date != 0 {
		n += 2 + sovPbchannelserver(uint64(m.Date))
	}
	if m.Version != 0 {
		n += 2 + sovPbchannelserver(uint64(m.Version))
	}
	if m.RestrictionReason {
		n += 3
	}
	return n
}

func (m *UpdateNewChannelMessage) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Flags))
	}
	if m.Out {
		n += 2
	}
	if m.Mentioned {
		n += 2
	}
	if m.MediaUnread {
		n += 2
	}
	if m.Silent {
		n += 2
	}
	if m.Post {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Id))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.ToId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ToId))
	}
	if m.ReplyToMsgId {
		n += 2
	}
	if m.Date != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Date))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Pts != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Pts))
	}
	if m.PtsCount != 0 {
		n += 1 + sovPbchannelserver(uint64(m.PtsCount))
	}
	return n
}

func (m *ReqCreateChannel) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyid))
	}
	if m.BroadCast {
		n += 2
	}
	if m.Megagroup {
		n += 2
	}
	if m.ReplyMsgId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ReplyMsgId))
	}
	if m.HasGeo {
		n += 2
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.BanAddContact {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqInviteChannelMember) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if len(m.PeerId) > 0 {
		l = 0
		for _, e := range m.PeerId {
			l += sovPbchannelserver(uint64(e))
		}
		n += 1 + sovPbchannelserver(uint64(l)) + l
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AccessHash))
	}
	if m.IsForce {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqJoinChannel) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AccessHash))
	}
	if m.ByLink {
		n += 2
	}
	if m.Invitor != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Invitor))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.InviteType != 0 {
		n += 1 + sovPbchannelserver(uint64(m.InviteType))
	}
	return n
}

func (m *ReqKickFromChannel) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.Kicker != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Kicker))
	}
	if m.Kickee != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Kickee))
	}
	if m.IsBotUser {
		n += 2
	}
	if m.IsKicked {
		n += 2
	}
	if m.KickedId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.KickedId))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqLeaveChannel) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqEditChannelTitle) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqEditChannelAdmin) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyId))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.KeyId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AccessHash))
	}
	l = len(m.Rank)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqEditChannelPhoto) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ChatInviteExported) Size() (n int) {
	var l int
	_ = l
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqEditChannelAbout) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqDeleteChannelMsg) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyid))
	}
	if m.Flags != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Flags))
	}
	if m.Revoke {
		n += 2
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovPbchannelserver(uint64(e))
		}
		n += 1 + sovPbchannelserver(uint64(l)) + l
	}
	if m.Channelid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Channelid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqDeleteChannelSelfHistory) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AccessHash))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyid))
	}
	if m.FromidPts != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromidPts))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqDeleteChannelHistory) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.UsreId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UsreId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AccessHash))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqUpdatePinnedChannelMessage) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.Flags != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Flags))
	}
	if m.Silent {
		n += 2
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.Id != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Id))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyid))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqDeleteChannel) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqReadChannelHistory) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Fromid))
	}
	if m.FromKeyid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyid))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.TopMsgId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.TopMsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.ChannelDialog != nil {
		l = m.ChannelDialog.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqUpdateChannelReadOut) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.MaxId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MaxId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReplyUpdateChannelReadOut) Size() (n int) {
	var l int
	_ = l
	if m.Maxid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Maxid))
	}
	if m.Pts != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Pts))
	}
	return n
}

func (m *ReqGetChannelDifference) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyId))
	}
	if m.Flags != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Flags))
	}
	if m.Force {
		n += 2
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.Pts != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Pts))
	}
	if m.Limit != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Limit))
	}
	if m.Range_MinId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Range_MinId))
	}
	if m.Range_MaxId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Range_MaxId))
	}
	if m.Device != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Device))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.ChannelDialog != nil {
		l = m.ChannelDialog.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelDifferenceEmpty) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Flags))
	}
	if m.Final {
		n += 2
	}
	if m.Pts != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Pts))
	}
	if m.Timeout != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Timeout))
	}
	return n
}

func (m *ReplyGetChannelDifferenceTooLong) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Flags))
	}
	if m.Final {
		n += 2
	}
	if m.Pts != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Pts))
	}
	if m.Timeout != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Timeout))
	}
	if m.TopMessage != 0 {
		n += 1 + sovPbchannelserver(uint64(m.TopMessage))
	}
	if m.ReadInboxMaxId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ReadInboxMaxId))
	}
	if m.ReadOutboxMaxId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ReadOutboxMaxId))
	}
	if m.UnreadCount != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UnreadCount))
	}
	if len(m.Msgs) > 0 {
		for _, b := range m.Msgs {
			l = len(b)
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	if m.ErrorCode != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ErrorCode))
	}
	return n
}

func (m *ReqGetChannelMsgHistory) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.OffsetId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.OffsetId))
	}
	if m.OffsetDate != 0 {
		n += 1 + sovPbchannelserver(uint64(m.OffsetDate))
	}
	if m.AddOffset != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AddOffset))
	}
	if m.MinId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MinId))
	}
	if m.MaxId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MaxId))
	}
	if m.Limit != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Limit))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.KeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.KeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqGetParticipants) Size() (n int) {
	var l int
	_ = l
	if m.OffSet != 0 {
		n += 1 + sovPbchannelserver(uint64(m.OffSet))
	}
	if m.Limit != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Limit))
	}
	if m.PartiType != 0 {
		n += 1 + sovPbchannelserver(uint64(m.PartiType))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Hash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Hash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqGetParticipant) Size() (n int) {
	var l int
	_ = l
	if m.Channelid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Channelid))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqGetChannelMessagesByMsgsId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if len(m.MsgsId) > 0 {
		l = 0
		for _, e := range m.MsgsId {
			l += sovPbchannelserver(uint64(e))
		}
		n += 1 + sovPbchannelserver(uint64(l)) + l
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqGetChannelCommonDialogs) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if len(m.ChannIds) > 0 {
		l = 0
		for _, e := range m.ChannIds {
			l += sovPbchannelserver(uint64(e))
		}
		n += 1 + sovPbchannelserver(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ChannelDialog) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.TopMessage != 0 {
		n += 1 + sovPbchannelserver(uint64(m.TopMessage))
	}
	if m.MaxReadInId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MaxReadInId))
	}
	if m.Encry != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Encry))
	}
	return n
}

func (m *ChannelDialogAndMsg) Size() (n int) {
	var l int
	_ = l
	if m.ChannelDialog != nil {
		l = m.ChannelDialog.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.ChannelMsg != nil {
		l = m.ChannelMsg.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ChannelDialogAndMsgs) Size() (n int) {
	var l int
	_ = l
	if len(m.ChannelDialogAndMsg) > 0 {
		for _, e := range m.ChannelDialogAndMsg {
			l = e.Size()
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	return n
}

func (m *UserMsg) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.WithId))
	}
	if m.WithIdType != 0 {
		n += 1 + sovPbchannelserver(uint64(m.WithIdType))
	}
	if m.MessageType != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MessageType))
	}
	if m.Flags != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Flags))
	}
	if m.Out {
		n += 2
	}
	if m.Mentioned {
		n += 2
	}
	if m.MediaUnread {
		n += 2
	}
	if m.Silent {
		n += 2
	}
	if m.Post {
		n += 2
	}
	if m.MsgId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MsgId))
	}
	if m.ToId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ToId))
	}
	if m.Pts != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Pts))
	}
	l = len(m.FwdFrom)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.ViaBotId != 0 {
		n += 2 + sovPbchannelserver(uint64(m.ViaBotId))
	}
	if m.ReplyToMsgId != 0 {
		n += 2 + sovPbchannelserver(uint64(m.ReplyToMsgId))
	}
	if m.Date != 0 {
		n += 2 + sovPbchannelserver(uint64(m.Date))
	}
	l = len(m.Message)
	if l > 0 {
		n += 2 + l + sovPbchannelserver(uint64(l))
	}
	if m.Media != 0 {
		n += 2 + sovPbchannelserver(uint64(m.Media))
	}
	l = len(m.MediaData)
	if l > 0 {
		n += 2 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.ReplyMarkup)
	if l > 0 {
		n += 2 + l + sovPbchannelserver(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			l = len(b)
			n += 2 + l + sovPbchannelserver(uint64(l))
		}
	}
	if m.FromId != 0 {
		n += 2 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.Views != 0 {
		n += 2 + sovPbchannelserver(uint64(m.Views))
	}
	if m.EditDate != 0 {
		n += 2 + sovPbchannelserver(uint64(m.EditDate))
	}
	l = len(m.Action)
	if l > 0 {
		n += 2 + l + sovPbchannelserver(uint64(l))
	}
	if m.RandomId != 0 {
		n += 2 + sovPbchannelserver(uint64(m.RandomId))
	}
	if m.Uuid != 0 {
		n += 2 + sovPbchannelserver(uint64(m.Uuid))
	}
	if m.InsertDate != 0 {
		n += 2 + sovPbchannelserver(uint64(m.InsertDate))
	}
	if m.UpdateDate != 0 {
		n += 2 + sovPbchannelserver(uint64(m.UpdateDate))
	}
	if m.Encry != 0 {
		n += 2 + sovPbchannelserver(uint64(m.Encry))
	}
	return n
}

func (m *ReqGetChannelAdminLog) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AccessHash))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.EventFilter != nil {
		l = m.EventFilter.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if len(m.Admins) > 0 {
		l = 0
		for _, e := range m.Admins {
			l += sovPbchannelserver(uint64(e))
		}
		n += 1 + sovPbchannelserver(uint64(l)) + l
	}
	if m.MaxId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MaxId))
	}
	if m.MinId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MinId))
	}
	if m.Limit != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ChannelAdminLogEventFilter) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Flags))
	}
	if m.Join {
		n += 2
	}
	if m.Leave {
		n += 2
	}
	if m.Invite {
		n += 2
	}
	if m.Ban {
		n += 2
	}
	if m.Unban {
		n += 2
	}
	if m.Kick {
		n += 2
	}
	if m.Unkick {
		n += 2
	}
	if m.Promote {
		n += 2
	}
	if m.Demote {
		n += 2
	}
	if m.Info {
		n += 2
	}
	if m.Setting {
		n += 2
	}
	if m.Pinned {
		n += 2
	}
	if m.Edit {
		n += 2
	}
	if m.Delete {
		n += 2
	}
	return n
}

func (m *ReqImportChatInvite) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyId))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqEditBanChannelUser) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.BannedUserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.BannedUserId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AccessHash))
	}
	if m.UtilDate != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UtilDate))
	}
	if m.ChannelBannedRights != nil {
		l = m.ChannelBannedRights.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqGetFullChannel) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.ChannelDialog != nil {
		l = m.ChannelDialog.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.MsgMeta != nil {
		l = m.MsgMeta.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqGetFullChannelV2) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.ChannelDialog != nil {
		l = m.ChannelDialog.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.MsgMeta != nil {
		l = m.MsgMeta.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ChatMsgMeta) Size() (n int) {
	var l int
	_ = l
	if m.TopMsg != 0 {
		n += 1 + sovPbchannelserver(uint64(m.TopMsg))
	}
	if m.TopPts != 0 {
		n += 1 + sovPbchannelserver(uint64(m.TopPts))
	}
	if m.ToDate != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ToDate))
	}
	return n
}

func (m *ReqExportChannelLink) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ChannelBannedRights) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Flags))
	}
	if m.ViewMessages {
		n += 2
	}
	if m.SendMessages {
		n += 2
	}
	if m.SendMedia {
		n += 2
	}
	if m.SendStickers {
		n += 2
	}
	if m.SendGifs {
		n += 2
	}
	if m.SendGames {
		n += 2
	}
	if m.SendInline {
		n += 2
	}
	if m.EmbedLinks {
		n += 2
	}
	if m.UntilDate != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UntilDate))
	}
	if m.InviteUser {
		n += 2
	}
	if m.PinMessage {
		n += 2
	}
	if m.ChangeGroupInfo {
		n += 2
	}
	if m.SendPolls {
		n += 2
	}
	return n
}

func (m *ReqChannelToggleInvite) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.Enabled {
		n += 2
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AccessHash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqGetChannels) Size() (n int) {
	var l int
	_ = l
	if len(m.ChannelIds) > 0 {
		l = 0
		for _, e := range m.ChannelIds {
			l += sovPbchannelserver(uint64(e))
		}
		n += 1 + sovPbchannelserver(uint64(l)) + l
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqUpdateChannelUserName) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AccessHash))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqCheckChannelUserName) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AccessHash))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqChangeGroupAndChannelCrator) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.GroupId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.OperatorId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.OperatorId))
	}
	if m.IsChat {
		n += 2
	}
	return n
}

func (m *ReqSendRpm) Size() (n int) {
	var l int
	_ = l
	if m.FromKeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	l = len(m.Req)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.RpmResp)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Dbg != nil {
		l = m.Dbg.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReplySendRpm) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.ErrCode != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ErrCode))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqEditRpm) Size() (n int) {
	var l int
	_ = l
	if m.FromKeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.ChanId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChanId))
	}
	if m.MsgId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MsgId))
	}
	if m.ChanAccHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChanAccHash))
	}
	if m.RpmResultCode != 0 {
		n += 1 + sovPbchannelserver(uint64(m.RpmResultCode))
	}
	if m.Dbg != nil {
		l = m.Dbg.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqEditRpmV2) Size() (n int) {
	var l int
	_ = l
	if m.FromKeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.ChanId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChanId))
	}
	if m.MsgId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MsgId))
	}
	if m.ChanAccHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChanAccHash))
	}
	l = len(m.RpmResult)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Dbg != nil {
		l = m.Dbg.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqEditPayment) Size() (n int) {
	var l int
	_ = l
	if m.FromKeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.ChanId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChanId))
	}
	if m.MsgId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MsgId))
	}
	if m.Flags != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Flags))
	}
	if m.ChanAccHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChanAccHash))
	}
	l = len(m.RpmResult)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.Options)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Dbg != nil {
		l = m.Dbg.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReplyEditRpm) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.ErrCode != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ErrCode))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqRecvRpm) Size() (n int) {
	var l int
	_ = l
	if m.FromKeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	l = len(m.Req)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.MetaData)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Dbg != nil {
		l = m.Dbg.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReplyRecvRpm) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.ErrCode != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ErrCode))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReqMessageReadMentions) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyId))
	}
	if m.ChanId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChanId))
	}
	if m.Dbg != nil {
		l = m.Dbg.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ReplyMessageReadMentions) Size() (n int) {
	var l int
	_ = l
	if m.Pts != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Pts))
	}
	if m.PtsCount != 0 {
		n += 1 + sovPbchannelserver(uint64(m.PtsCount))
	}
	if m.OffsetId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.OffsetId))
	}
	if m.ErrCode != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ErrCode))
	}
	l = len(m.ErrStr)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *SendVoteReq) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Fromid))
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.MsgId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MsgId))
	}
	if len(m.Options) > 0 {
		for _, s := range m.Options {
			l = len(s)
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	if m.FromKey != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKey))
	}
	if m.Stop {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *SendVoteReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Error))
	}
	return n
}

func (m *GetPollResultsReq) Size() (n int) {
	var l int
	_ = l
	if m.Fromid != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Fromid))
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.MsgId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.MsgId))
	}
	if m.FromKey != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKey))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *GetPollResultsReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Error))
	}
	return n
}

func (m *ChatBannedRights) Size() (n int) {
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Flags))
	}
	if m.ViewMessages {
		n += 2
	}
	if m.SendMessages {
		n += 2
	}
	if m.SendMedia {
		n += 2
	}
	if m.SendStickers {
		n += 2
	}
	if m.SendGifs {
		n += 2
	}
	if m.SendGames {
		n += 2
	}
	if m.SendInline {
		n += 2
	}
	if m.EmbedLinks {
		n += 2
	}
	if m.SendPolls {
		n += 2
	}
	if m.ChangeInfo {
		n += 2
	}
	if m.InviteUsers {
		n += 2
	}
	if m.PinMessages {
		n += 2
	}
	if m.UntilDate != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UntilDate))
	}
	return n
}

func (m *EditChatDefaultBannedRightsReq) Size() (n int) {
	var l int
	_ = l
	if m.ReqMessageId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ReqMessageId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.AccessHash))
	}
	if m.BannedFlag != nil {
		l = m.BannedFlag.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *EditChatDefaultBannedRightsRsp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *HandleToggleSlowModeReq) Size() (n int) {
	var l int
	_ = l
	if m.ChnlId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChnlId))
	}
	if m.HashId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.HashId))
	}
	if m.Seconds != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Seconds))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *HandleToggleSlowModeRsp) Size() (n int) {
	var l int
	_ = l
	if m.Results != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Results))
	}
	l = len(m.Updates)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *HandleToggleSignaturesReq) Size() (n int) {
	var l int
	_ = l
	if m.ChnlId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChnlId))
	}
	if m.HashId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.HashId))
	}
	if m.IsSign {
		n += 2
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.FromKeyId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromKeyId))
	}
	return n
}

func (m *HandleToggleSignaturesRsp) Size() (n int) {
	var l int
	_ = l
	if m.Results {
		n += 2
	}
	l = len(m.ReplyByte)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *ChannelToggleHistoryHiddenReq) Size() (n int) {
	var l int
	_ = l
	if m.ChnlId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChnlId))
	}
	if m.HashId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.HashId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.IsHide {
		n += 2
	}
	return n
}

func (m *ChannelToggleHistoryHiddenRsp) Size() (n int) {
	var l int
	_ = l
	if m.Results {
		n += 2
	}
	l = len(m.ReplyByte)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *SetChannelBanModeReq) Size() (n int) {
	var l int
	_ = l
	if m.ChnlId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChnlId))
	}
	if m.HashId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.HashId))
	}
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.BanMode {
		n += 2
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *SetChannelBanModeRsp) Size() (n int) {
	var l int
	_ = l
	if m.ReplyCode != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ReplyCode))
	}
	l = len(m.ReplyBuff)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *CHsGetUserOwnChannelsReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	return n
}

func (m *ChannelBrief) Size() (n int) {
	var l int
	_ = l
	if m.ChnlId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChnlId))
	}
	if m.HashId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.HashId))
	}
	if m.BroadcastOrMegagroup {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *CHsGetUserOwnChannelsRsp) Size() (n int) {
	var l int
	_ = l
	if len(m.Chnls) > 0 {
		for _, e := range m.Chnls {
			l = e.Size()
			n += 1 + l + sovPbchannelserver(uint64(l))
		}
	}
	return n
}

func (m *RestrictChannelReq) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChannelId))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *RestrictChannelRsp) Size() (n int) {
	var l int
	_ = l
	if m.ReplyCode != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ReplyCode))
	}
	l = len(m.ReplyInfo)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *JoinByQrCodeReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	l = len(m.QrCode)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *JoinByQrCodeRsp) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LiveStartReq) Size() (n int) {
	var l int
	_ = l
	if m.BeginAt != 0 {
		n += 1 + sovPbchannelserver(uint64(m.BeginAt))
	}
	if m.GroupId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.GroupId))
	}
	if m.LiveStat != 0 {
		n += 1 + sovPbchannelserver(uint64(m.LiveStat))
	}
	if m.LiveType != 0 {
		n += 1 + sovPbchannelserver(uint64(m.LiveType))
	}
	if m.LiveUser != 0 {
		n += 1 + sovPbchannelserver(uint64(m.LiveUser))
	}
	if m.LiveRoom != 0 {
		n += 1 + sovPbchannelserver(uint64(m.LiveRoom))
	}
	if m.LivePkId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.LivePkId))
	}
	l = len(m.LiveFlag)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.LiveName)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.LiveIcon)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *LiveStartRsp) Size() (n int) {
	var l int
	_ = l
	if m.ReplyCode != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ReplyCode))
	}
	l = len(m.InviteUrl)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *LiveStopReq) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.GroupId))
	}
	if m.LiveUser != 0 {
		n += 1 + sovPbchannelserver(uint64(m.LiveUser))
	}
	if m.LiveStat != 0 {
		n += 1 + sovPbchannelserver(uint64(m.LiveStat))
	}
	l = len(m.LiveCode)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *LiveStopRsp) Size() (n int) {
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovPbchannelserver(uint64(m.RetCode))
	}
	if m.Invited != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Invited))
	}
	return n
}

func (m *GetLiveInviteUrlReq) Size() (n int) {
	var l int
	_ = l
	if m.BeginAt != 0 {
		n += 1 + sovPbchannelserver(uint64(m.BeginAt))
	}
	if m.GroupId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.GroupId))
	}
	if m.LiveUser != 0 {
		n += 1 + sovPbchannelserver(uint64(m.LiveUser))
	}
	return n
}

func (m *GetLiveInviteUrlRsp) Size() (n int) {
	var l int
	_ = l
	if m.ReplyCode != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ReplyCode))
	}
	l = len(m.InviteUrl)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *EditLiveInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.BeginAt != 0 {
		n += 1 + sovPbchannelserver(uint64(m.BeginAt))
	}
	if m.GroupId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.GroupId))
	}
	if m.LiveStat != 0 {
		n += 1 + sovPbchannelserver(uint64(m.LiveStat))
	}
	if m.LiveType != 0 {
		n += 1 + sovPbchannelserver(uint64(m.LiveType))
	}
	if m.LiveUser != 0 {
		n += 1 + sovPbchannelserver(uint64(m.LiveUser))
	}
	if m.LiveRoom != 0 {
		n += 1 + sovPbchannelserver(uint64(m.LiveRoom))
	}
	l = len(m.LiveFlag)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.LiveName)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	l = len(m.LiveIcon)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *EditLiveInfoRsp) Size() (n int) {
	var l int
	_ = l
	if m.ReplyCode != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ReplyCode))
	}
	l = len(m.ReplyData)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *GroupLiveCheckReq) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.GroupId))
	}
	if m.LiveUser != 0 {
		n += 1 + sovPbchannelserver(uint64(m.LiveUser))
	}
	return n
}

func (m *GroupLiveCheckRsp) Size() (n int) {
	var l int
	_ = l
	if m.ReplyCode != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ReplyCode))
	}
	l = len(m.ReplyData)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *GetLiveInviteCntReq) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.GroupId))
	}
	if m.LiveUser != 0 {
		n += 1 + sovPbchannelserver(uint64(m.LiveUser))
	}
	return n
}

func (m *GetLiveInviteCntRsp) Size() (n int) {
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovPbchannelserver(uint64(m.RetCode))
	}
	if m.Invited != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Invited))
	}
	return n
}

func (m *CheckUserInGroupReq) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.GroupId))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	return n
}

func (m *CheckUserInGroupRsp) Size() (n int) {
	var l int
	_ = l
	if m.InGroup {
		n += 2
	}
	return n
}

func (m *GetGroupUserIdsReq) Size() (n int) {
	var l int
	_ = l
	if m.ChanId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.ChanId))
	}
	if m.UserId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.UserId))
	}
	if m.Offset != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Offset))
	}
	if m.Length != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Length))
	}
	return n
}

func (m *GetGroupUserIdsRsp) Size() (n int) {
	var l int
	_ = l
	if m.RetNo != 0 {
		n += 1 + sovPbchannelserver(uint64(m.RetNo))
	}
	if m.Total != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Total))
	}
	if m.Count != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Count))
	}
	if len(m.Users) > 0 {
		l = 0
		for _, e := range m.Users {
			l += sovPbchannelserver(uint64(e))
		}
		n += 1 + sovPbchannelserver(uint64(l)) + l
	}
	return n
}

func (m *GetHotGroupsReq) Size() (n int) {
	var l int
	_ = l
	if m.FromId != 0 {
		n += 1 + sovPbchannelserver(uint64(m.FromId))
	}
	if m.Limit != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Limit))
	}
	if m.Level != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Level))
	}
	if m.VerNo != 0 {
		n += 1 + sovPbchannelserver(uint64(m.VerNo))
	}
	if m.Hash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Hash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func (m *GetHotGroupsRsp) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Error))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	if m.Hash != 0 {
		n += 1 + sovPbchannelserver(uint64(m.Hash))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovPbchannelserver(uint64(l))
	}
	return n
}

func sovPbchannelserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPbchannelserver(x uint64) (n int) {
	return sovPbchannelserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetGroupsForDiscussionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGroupsForDiscussionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGroupsForDiscussionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGroupsForDiscussionRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGroupsForDiscussionRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGroupsForDiscussionRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDiscussionGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDiscussionGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDiscussionGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			m.Broadcast = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Broadcast |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Megagroup", wireType)
			}
			m.Megagroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Megagroup |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDiscussionGroupRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDiscussionGroupRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDiscussionGroupRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateSuperChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateSuperChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateSuperChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Obj", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Obj = append(m.Obj[:0], dAtA[iNdEx:postIndex]...)
			if m.Obj == nil {
				m.Obj = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqIsChannelAdminOrCreator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqIsChannelAdminOrCreator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqIsChannelAdminOrCreator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMembersCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMembersCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMembersCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelMembersCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelMembersCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelMembersCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMembersCount", wireType)
			}
			m.ChannelMembersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelMembersCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendLogMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendLogMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendLogMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			m.Media = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Media |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meidadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meidadata = append(m.Meidadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Meidadata == nil {
				m.Meidadata = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyMarkup = append(m.ReplyMarkup[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, make([]byte, postIndex-iNdEx))
			copy(m.Entities[len(m.Entities)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FwdFrom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FwdFrom = append(m.FwdFrom[:0], dAtA[iNdEx:postIndex]...)
			if m.FwdFrom == nil {
				m.FwdFrom = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groupid", wireType)
			}
			m.Groupid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Groupid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViaBotId", wireType)
			}
			m.ViaBotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViaBotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqForwardMessageToChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqForwardMessageToChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqForwardMessageToChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithMyScore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithMyScore = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPeer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromPeer = append(m.FromPeer[:0], dAtA[iNdEx:postIndex]...)
			if m.FromPeer == nil {
				m.FromPeer = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbchannelserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbchannelserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RandomId = append(m.RandomId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbchannelserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbchannelserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RandomId = append(m.RandomId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPeer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToPeer = append(m.ToPeer[:0], dAtA[iNdEx:postIndex]...)
			if m.ToPeer == nil {
				m.ToPeer = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgList = append(m.MsgList, &ForwardMsg{})
			if err := m.MsgList[len(m.MsgList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Userlist = append(m.Userlist, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbchannelserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbchannelserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Userlist = append(m.Userlist, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Userlist", wireType)
			}
		case 14:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Chatlist = append(m.Chatlist, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbchannelserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbchannelserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Chatlist = append(m.Chatlist, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatlist", wireType)
			}
		case 15:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Channellist = append(m.Channellist, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbchannelserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbchannelserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Channellist = append(m.Channellist, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Channellist", wireType)
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqMigrateToChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMigrateToChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMigrateToChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromID", wireType)
			}
			m.FromID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatID", wireType)
			}
			m.ChatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyMigrateToChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyMigrateToChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyMigrateToChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMsgId", wireType)
			}
			m.ChannelMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelPts", wireType)
			}
			m.ChannelPts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelPts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			m.ChannelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSearchChannelMediaMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSearchChannelMediaMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSearchChannelMediaMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMessageSearch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReqMessageSearch == nil {
				m.ReqMessageSearch = &pbmessageserver.ReqMessageSearch{}
			}
			if err := m.ReqMessageSearch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withid", wireType)
			}
			m.Withid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Withid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithType", wireType)
			}
			m.WithType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchChannelMsgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchChannelMsgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchChannelMsgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			m.ChannelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromID", wireType)
			}
			m.FromID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Medias = append(m.Medias, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbchannelserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbchannelserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Medias = append(m.Medias, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Medias", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetID", wireType)
			}
			m.OffsetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOffset", wireType)
			}
			m.AddOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOffset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDate", wireType)
			}
			m.MinDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDate", wireType)
			}
			m.MaxDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinID", wireType)
			}
			m.MinID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxID", wireType)
			}
			m.MaxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchChannelMsgResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchChannelMsgResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchChannelMsgResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &messagedb.UserMsg{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChannelData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannelData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannelData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialogAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DialogAction == nil {
				m.DialogAction = &DialogAction{}
			}
			if err := m.DialogAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialogAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialogAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialogAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckOrInsertDialog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckOrInsertDialog = append(m.CheckOrInsertDialog, &CheckOrInsertDialog{})
			if err := m.CheckOrInsertDialog[len(m.CheckOrInsertDialog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteUserDialog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeleteUserDialog = append(m.DeleteUserDialog, &DeleteUserDialog{})
			if err := m.DeleteUserDialog[len(m.DeleteUserDialog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePeerDialogIncr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatePeerDialogIncr = append(m.UpdatePeerDialogIncr, &UpdatePeerDialogIncr{})
			if err := m.UpdatePeerDialogIncr[len(m.UpdatePeerDialogIncr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePeerDialogIncrCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatePeerDialogIncrCounter = append(m.UpdatePeerDialogIncrCounter, &UpdatePeerDialogIncrCounter{})
			if err := m.UpdatePeerDialogIncrCounter[len(m.UpdatePeerDialogIncrCounter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateChannelDialog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateChannelDialog = append(m.CreateChannelDialog, &CreateChannelDialog{})
			if err := m.CreateChannelDialog[len(m.CreateChannelDialog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckRecDialog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckRecDialog = append(m.CheckRecDialog, &CheckRecDialog{})
			if err := m.CheckRecDialog[len(m.CheckRecDialog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateOrInsertUserChanDlg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateOrInsertUserChanDlg = append(m.UpdateOrInsertUserChanDlg, &UpdateOrInsertUserChanDlg{})
			if err := m.UpdateOrInsertUserChanDlg[len(m.UpdateOrInsertUserChanDlg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckChannelOrInsert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckChannelOrInsert = append(m.CheckChannelOrInsert, &CheckChannelOrInsert{})
			if err := m.CheckChannelOrInsert[len(m.CheckChannelOrInsert)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetSuperGroupMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SetSuperGroupMsg = append(m.SetSuperGroupMsg, &SetSuperGroupMsg{})
			if err := m.SetSuperGroupMsg[len(m.SetSuperGroupMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckChannelOrInsertDlgNotClearDraft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckChannelOrInsertDlgNotClearDraft = append(m.CheckChannelOrInsertDlgNotClearDraft, &CheckChannelOrInsertDlgNotClearDraft{})
			if err := m.CheckChannelOrInsertDlgNotClearDraft[len(m.CheckChannelOrInsertDlgNotClearDraft)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateOrInsertUserChanDlgNotClearDraft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateOrInsertUserChanDlgNotClearDraft = append(m.UpdateOrInsertUserChanDlgNotClearDraft, &UpdateOrInsertUserChanDlgNotClearDraft{})
			if err := m.UpdateOrInsertUserChanDlgNotClearDraft[len(m.UpdateOrInsertUserChanDlgNotClearDraft)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateChannelReadoutbox", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateChannelReadoutbox = append(m.UpdateChannelReadoutbox, &UpdateChannelReadoutbox{})
			if err := m.UpdateChannelReadoutbox[len(m.UpdateChannelReadoutbox)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateChannelDialogClearUnread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateChannelDialogClearUnread = append(m.CreateChannelDialogClearUnread, &CreateChannelDialogClearUnread{})
			if err := m.CreateChannelDialogClearUnread[len(m.CreateChannelDialogClearUnread)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditChannelLocationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditChannelLocationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditChannelLocationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqBytes = append(m.ReqBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqBytes == nil {
				m.ReqBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditChannelLocationResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditChannelLocationResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditChannelLocationResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBytes = append(m.RespBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RespBytes == nil {
				m.RespBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferGroupOwnerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferGroupOwnerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferGroupOwnerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqBytes = append(m.ReqBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqBytes == nil {
				m.ReqBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferGroupOwnerResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferGroupOwnerResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferGroupOwnerResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBytes = append(m.RespBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RespBytes == nil {
				m.RespBytes = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialogAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DialogAction == nil {
				m.DialogAction = &DialogAction{}
			}
			if err := m.DialogAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferGroupOwnerByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferGroupOwnerByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferGroupOwnerByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debugs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debugs == nil {
				m.Debugs = &pbcomm.Debug{}
			}
			if err := m.Debugs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanId", wireType)
			}
			m.ChanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChanId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestId", wireType)
			}
			m.DestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferGroupOwnerByIdRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferGroupOwnerByIdRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferGroupOwnerByIdRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyCode", wireType)
			}
			m.ReplyCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChannelReadoutbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChannelReadoutbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChannelReadoutbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOutMax", wireType)
			}
			m.ReadOutMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadOutMax |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckChannelOrInsertDlgNotClearDraft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckChannelOrInsertDlgNotClearDraft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckChannelOrInsertDlgNotClearDraft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfid", wireType)
			}
			m.Selfid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selfid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withid", wireType)
			}
			m.Withid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Withid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &messagedb.UserMsg{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandleType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HandleType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOrInsertUserChanDlgNotClearDraft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOrInsertUserChanDlgNotClearDraft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOrInsertUserChanDlgNotClearDraft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfid", wireType)
			}
			m.Selfid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selfid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withid", wireType)
			}
			m.Withid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Withid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &messagedb.UserMsg{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandleType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HandleType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetSuperGroupMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetSuperGroupMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetSuperGroupMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
			m.Channelid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channelid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgbin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgbin = append(m.Msgbin[:0], dAtA[iNdEx:postIndex]...)
			if m.Msgbin == nil {
				m.Msgbin = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOrInsertUserChanDlg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOrInsertUserChanDlg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOrInsertUserChanDlg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfid", wireType)
			}
			m.Selfid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selfid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withid", wireType)
			}
			m.Withid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Withid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &messagedb.UserMsg{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandleType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HandleType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckChannelOrInsert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckChannelOrInsert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckChannelOrInsert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfid", wireType)
			}
			m.Selfid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selfid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withid", wireType)
			}
			m.Withid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Withid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &messagedb.UserMsg{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandleType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HandleType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckRecDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckRecDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckRecDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
			m.Channelid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channelid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgid", wireType)
			}
			m.Msgid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Msgid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readin", wireType)
			}
			m.Readin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Readin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckOrInsertDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckOrInsertDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckOrInsertDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfid", wireType)
			}
			m.Selfid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selfid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withid", wireType)
			}
			m.Withid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Withid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &messagedb.UserMsg{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandleType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HandleType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selfid", wireType)
			}
			m.Selfid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selfid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withid", wireType)
			}
			m.Withid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Withid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			m.Peer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Peer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePeerDialogIncr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePeerDialogIncr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePeerDialogIncr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserDialogParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateUserDialogParam == nil {
				m.UpdateUserDialogParam = &messagedb.UpdateUserDialogParam{}
			}
			if err := m.UpdateUserDialogParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePeerDialogIncrCounter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePeerDialogIncrCounter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePeerDialogIncrCounter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserDialogParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateUserDialogParam == nil {
				m.UpdateUserDialogParam = &messagedb.UpdateUserDialogParam{}
			}
			if err := m.UpdateUserDialogParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChannelDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChannelDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChannelDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
			m.Channelid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channelid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgid", wireType)
			}
			m.Msgid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Msgid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readin", wireType)
			}
			m.Readin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Readin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pinned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pinned = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChannelDialogClearUnread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChannelDialogClearUnread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChannelDialogClearUnread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
			m.Channelid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channelid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgid", wireType)
			}
			m.Msgid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Msgid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readin", wireType)
			}
			m.Readin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Readin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pinned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pinned = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChannelsReadMessageContents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChannelsReadMessageContents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChannelsReadMessageContents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyid", wireType)
			}
			m.Keyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditPrivateChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditPrivateChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditPrivateChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMessageExportLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMessageExportLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMessageExportLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditEveryoneQuiet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditEveryoneQuiet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditEveryoneQuiet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quiet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Quiet = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Channel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Creator = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kicked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kicked = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Left = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Editor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Editor = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moderator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Moderator = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Broadcast = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Megagroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Megagroup = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restricted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Restricted = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Democracy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Democracy = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Signatures = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Min = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			m.Photo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Photo |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictionReason", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RestrictionReason = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNewChannelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNewChannelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNewChannelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Out", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Out = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mentioned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mentioned = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaUnread", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MediaUnread = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Post", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Post = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToId", wireType)
			}
			m.ToId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplyToMsgId = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = append(m.Action[:0], dAtA[iNdEx:postIndex]...)
			if m.Action == nil {
				m.Action = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsCount", wireType)
			}
			m.PtsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PtsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCreateChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCreateChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCreateChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadCast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BroadCast = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Megagroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Megagroup = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMsgId", wireType)
			}
			m.ReplyMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyMsgId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasGeo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasGeo = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = append(m.Location[:0], dAtA[iNdEx:postIndex]...)
			if m.Location == nil {
				m.Location = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanAddContact", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BanAddContact = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqInviteChannelMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqInviteChannelMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqInviteChannelMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PeerId = append(m.PeerId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbchannelserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbchannelserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PeerId = append(m.PeerId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsForce", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsForce = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqJoinChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqJoinChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqJoinChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByLink", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ByLink = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invitor", wireType)
			}
			m.Invitor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Invitor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteType", wireType)
			}
			m.InviteType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqKickFromChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqKickFromChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqKickFromChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kicker", wireType)
			}
			m.Kicker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kicker |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kickee", wireType)
			}
			m.Kickee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kickee |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBotUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBotUser = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsKicked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsKicked = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedId", wireType)
			}
			m.KickedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqLeaveChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqLeaveChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqLeaveChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChannelTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChannelTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChannelTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChannelAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChannelAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChannelAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = append(m.Role[:0], dAtA[iNdEx:postIndex]...)
			if m.Role == nil {
				m.Role = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rank = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChannelPhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChannelPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChannelPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo[:0], dAtA[iNdEx:postIndex]...)
			if m.Photo == nil {
				m.Photo = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatInviteExported) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatInviteExported: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatInviteExported: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditChannelAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditChannelAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditChannelAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteChannelMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteChannelMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteChannelMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoke", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Revoke = bool(v != 0)
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbchannelserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbchannelserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
			m.Channelid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channelid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteChannelSelfHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteChannelSelfHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteChannelSelfHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromidPts", wireType)
			}
			m.FromidPts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromidPts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteChannelHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteChannelHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteChannelHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsreId", wireType)
			}
			m.UsreId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsreId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdatePinnedChannelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdatePinnedChannelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdatePinnedChannelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqReadChannelHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqReadChannelHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqReadChannelHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyid", wireType)
			}
			m.FromKeyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMsgId", wireType)
			}
			m.TopMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelDialog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelDialog == nil {
				m.ChannelDialog = &messagedb.UserDialogAndMsg{}
			}
			if err := m.ChannelDialog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateChannelReadOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateChannelReadOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateChannelReadOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUpdateChannelReadOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUpdateChannelReadOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUpdateChannelReadOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxid", wireType)
			}
			m.Maxid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maxid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range_MinId", wireType)
			}
			m.Range_MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range_MinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range_MaxId", wireType)
			}
			m.Range_MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range_MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			m.Device = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Device |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelDialog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelDialog == nil {
				m.ChannelDialog = &messagedb.UserDialogAndMsg{}
			}
			if err := m.ChannelDialog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelDifferenceEmpty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelDifferenceEmpty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelDifferenceEmpty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Final = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelDifferenceTooLong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelDifferenceTooLong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelDifferenceTooLong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Final = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMessage", wireType)
			}
			m.TopMessage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMessage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadInboxMaxId", wireType)
			}
			m.ReadInboxMaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadInboxMaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOutboxMaxId", wireType)
			}
			m.ReadOutboxMaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadOutboxMaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, make([]byte, postIndex-iNdEx))
			copy(m.Msgs[len(m.Msgs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMsgHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMsgHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMsgHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOffset", wireType)
			}
			m.AddOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOffset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetParticipants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetParticipants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetParticipants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffSet", wireType)
			}
			m.OffSet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffSet |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartiType", wireType)
			}
			m.PartiType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartiType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channelid", wireType)
			}
			m.Channelid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channelid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMessagesByMsgsId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMessagesByMsgsId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMessagesByMsgsId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgsId = append(m.MsgsId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbchannelserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbchannelserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgsId = append(m.MsgsId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgsId", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelCommonDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelCommonDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelCommonDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChannIds = append(m.ChannIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbchannelserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbchannelserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChannIds = append(m.ChannIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannIds", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMessage", wireType)
			}
			m.TopMessage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMessage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReadInId", wireType)
			}
			m.MaxReadInId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxReadInId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelDialogAndMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelDialogAndMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelDialogAndMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelDialog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelDialog == nil {
				m.ChannelDialog = &ChannelDialog{}
			}
			if err := m.ChannelDialog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMsg == nil {
				m.ChannelMsg = &UserMsg{}
			}
			if err := m.ChannelMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelDialogAndMsgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelDialogAndMsgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelDialogAndMsgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelDialogAndMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelDialogAndMsg = append(m.ChannelDialogAndMsg, &ChannelDialogAndMsg{})
			if err := m.ChannelDialogAndMsg[len(m.ChannelDialogAndMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIdType", wireType)
			}
			m.WithIdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithIdType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Out", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Out = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mentioned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mentioned = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaUnread", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MediaUnread = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Post", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Post = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToId", wireType)
			}
			m.ToId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FwdFrom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FwdFrom = append(m.FwdFrom[:0], dAtA[iNdEx:postIndex]...)
			if m.FwdFrom == nil {
				m.FwdFrom = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViaBotId", wireType)
			}
			m.ViaBotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViaBotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			m.Media = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Media |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaData = append(m.MediaData[:0], dAtA[iNdEx:postIndex]...)
			if m.MediaData == nil {
				m.MediaData = []byte{}
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyMarkup = append(m.ReplyMarkup[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = []byte{}
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, make([]byte, postIndex-iNdEx))
			copy(m.Entities[len(m.Entities)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Views", wireType)
			}
			m.Views = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Views |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditDate", wireType)
			}
			m.EditDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = append(m.Action[:0], dAtA[iNdEx:postIndex]...)
			if m.Action == nil {
				m.Action = []byte{}
			}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			m.Uuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uuid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertDate", wireType)
			}
			m.InsertDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsertDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDate", wireType)
			}
			m.UpdateDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelAdminLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelAdminLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelAdminLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventFilter == nil {
				m.EventFilter = &ChannelAdminLogEventFilter{}
			}
			if err := m.EventFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Admins = append(m.Admins, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbchannelserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbchannelserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Admins = append(m.Admins, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelAdminLogEventFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelAdminLogEventFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelAdminLogEventFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Join", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Join = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Leave = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Invite = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ban", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ban = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unban", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unban = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kick", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kick = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unkick", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unkick = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Promote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Promote = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Demote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Demote = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Info = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Setting = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pinned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pinned = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Edit = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Delete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqImportChatInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqImportChatInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqImportChatInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditBanChannelUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditBanChannelUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditBanChannelUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedUserId", wireType)
			}
			m.BannedUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BannedUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilDate", wireType)
			}
			m.UtilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UtilDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelBannedRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelBannedRights == nil {
				m.ChannelBannedRights = &ChannelBannedRights{}
			}
			if err := m.ChannelBannedRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetFullChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetFullChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetFullChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelDialog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelDialog == nil {
				m.ChannelDialog = &messagedb.UserDialogAndMsg{}
			}
			if err := m.ChannelDialog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgMeta == nil {
				m.MsgMeta = &ChatMsgMeta{}
			}
			if err := m.MsgMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetFullChannelV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetFullChannelV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetFullChannelV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelDialog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelDialog == nil {
				m.ChannelDialog = &messagedb.UserDialogAndMsg{}
			}
			if err := m.ChannelDialog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgMeta == nil {
				m.MsgMeta = &ChatMsgMeta{}
			}
			if err := m.MsgMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatMsgMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatMsgMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatMsgMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMsg", wireType)
			}
			m.TopMsg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMsg |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopPts", wireType)
			}
			m.TopPts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopPts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToDate", wireType)
			}
			m.ToDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqExportChannelLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqExportChannelLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqExportChannelLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelBannedRights) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelBannedRights: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelBannedRights: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ViewMessages = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendMessages = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendMedia", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendMedia = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendStickers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendStickers = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendGifs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendGifs = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendGames", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendGames = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendInline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendInline = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbedLinks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EmbedLinks = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UntilDate", wireType)
			}
			m.UntilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UntilDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InviteUser = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PinMessage = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeGroupInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeGroupInfo = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendPolls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendPolls = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChannelToggleInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChannelToggleInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChannelToggleInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannels) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannels: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannels: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChannelIds = append(m.ChannelIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbchannelserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbchannelserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChannelIds = append(m.ChannelIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateChannelUserName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateChannelUserName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateChannelUserName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCheckChannelUserName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCheckChannelUserName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCheckChannelUserName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChangeGroupAndChannelCrator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChangeGroupAndChannelCrator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChangeGroupAndChannelCrator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsChat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsChat = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSendRpm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSendRpm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSendRpm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Req = append(m.Req[:0], dAtA[iNdEx:postIndex]...)
			if m.Req == nil {
				m.Req = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpmResp", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpmResp = append(m.RpmResp[:0], dAtA[iNdEx:postIndex]...)
			if m.RpmResp == nil {
				m.RpmResp = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dbg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dbg == nil {
				m.Dbg = &pbcomm.Debug{}
			}
			if err := m.Dbg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplySendRpm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplySendRpm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplySendRpm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ChatMsgMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditRpm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditRpm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditRpm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanId", wireType)
			}
			m.ChanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChanId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanAccHash", wireType)
			}
			m.ChanAccHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChanAccHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpmResultCode", wireType)
			}
			m.RpmResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RpmResultCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dbg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dbg == nil {
				m.Dbg = &pbcomm.Debug{}
			}
			if err := m.Dbg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditRpmV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditRpmV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditRpmV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanId", wireType)
			}
			m.ChanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChanId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanAccHash", wireType)
			}
			m.ChanAccHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChanAccHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpmResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpmResult = append(m.RpmResult[:0], dAtA[iNdEx:postIndex]...)
			if m.RpmResult == nil {
				m.RpmResult = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dbg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dbg == nil {
				m.Dbg = &pbcomm.Debug{}
			}
			if err := m.Dbg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqEditPayment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqEditPayment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqEditPayment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanId", wireType)
			}
			m.ChanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChanId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanAccHash", wireType)
			}
			m.ChanAccHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChanAccHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpmResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpmResult = append(m.RpmResult[:0], dAtA[iNdEx:postIndex]...)
			if m.RpmResult == nil {
				m.RpmResult = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options[:0], dAtA[iNdEx:postIndex]...)
			if m.Options == nil {
				m.Options = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dbg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dbg == nil {
				m.Dbg = &pbcomm.Debug{}
			}
			if err := m.Dbg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyEditRpm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyEditRpm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyEditRpm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRecvRpm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRecvRpm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRecvRpm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Req = append(m.Req[:0], dAtA[iNdEx:postIndex]...)
			if m.Req == nil {
				m.Req = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaData = append(m.MetaData[:0], dAtA[iNdEx:postIndex]...)
			if m.MetaData == nil {
				m.MetaData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dbg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dbg == nil {
				m.Dbg = &pbcomm.Debug{}
			}
			if err := m.Dbg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyRecvRpm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyRecvRpm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyRecvRpm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqMessageReadMentions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMessageReadMentions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMessageReadMentions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanId", wireType)
			}
			m.ChanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChanId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dbg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dbg == nil {
				m.Dbg = &pbcomm.Debug{}
			}
			if err := m.Dbg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyMessageReadMentions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyMessageReadMentions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyMessageReadMentions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsCount", wireType)
			}
			m.PtsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PtsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendVoteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendVoteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendVoteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKey", wireType)
			}
			m.FromKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKey |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Stop = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendVoteReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendVoteReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendVoteReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPollResultsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPollResultsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPollResultsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromid", wireType)
			}
			m.Fromid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKey", wireType)
			}
			m.FromKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKey |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPollResultsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPollResultsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPollResultsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply[:0], dAtA[iNdEx:postIndex]...)
			if m.Reply == nil {
				m.Reply = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatBannedRights) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatBannedRights: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatBannedRights: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ViewMessages = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendMessages = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendMedia", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendMedia = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendStickers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendStickers = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendGifs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendGifs = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendGames", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendGames = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendInline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendInline = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbedLinks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EmbedLinks = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendPolls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendPolls = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeInfo = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteUsers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InviteUsers = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinMessages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PinMessages = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UntilDate", wireType)
			}
			m.UntilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UntilDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditChatDefaultBannedRightsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditChatDefaultBannedRightsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditChatDefaultBannedRightsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMessageId", wireType)
			}
			m.ReqMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedFlag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BannedFlag == nil {
				m.BannedFlag = &ChatBannedRights{}
			}
			if err := m.BannedFlag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditChatDefaultBannedRightsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditChatDefaultBannedRightsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditChatDefaultBannedRightsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleToggleSlowModeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleToggleSlowModeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleToggleSlowModeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChnlId", wireType)
			}
			m.ChnlId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChnlId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashId", wireType)
			}
			m.HashId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HashId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleToggleSlowModeRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleToggleSlowModeRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleToggleSlowModeRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			m.Results = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Results |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates[:0], dAtA[iNdEx:postIndex]...)
			if m.Updates == nil {
				m.Updates = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleToggleSignaturesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleToggleSignaturesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleToggleSignaturesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChnlId", wireType)
			}
			m.ChnlId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChnlId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashId", wireType)
			}
			m.HashId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HashId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSign", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSign = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyId", wireType)
			}
			m.FromKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromKeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleToggleSignaturesRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleToggleSignaturesRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleToggleSignaturesRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Results = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyByte", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyByte = append(m.ReplyByte[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyByte == nil {
				m.ReplyByte = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelToggleHistoryHiddenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelToggleHistoryHiddenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelToggleHistoryHiddenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChnlId", wireType)
			}
			m.ChnlId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChnlId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashId", wireType)
			}
			m.HashId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HashId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHide", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHide = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelToggleHistoryHiddenRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelToggleHistoryHiddenRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelToggleHistoryHiddenRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Results = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyByte", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyByte = append(m.ReplyByte[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyByte == nil {
				m.ReplyByte = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetChannelBanModeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetChannelBanModeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetChannelBanModeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChnlId", wireType)
			}
			m.ChnlId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChnlId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashId", wireType)
			}
			m.HashId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HashId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BanMode = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetChannelBanModeRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetChannelBanModeRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetChannelBanModeRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyCode", wireType)
			}
			m.ReplyCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyBuff", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyBuff = append(m.ReplyBuff[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyBuff == nil {
				m.ReplyBuff = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CHsGetUserOwnChannelsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CHsGetUserOwnChannelsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CHsGetUserOwnChannelsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelBrief) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelBrief: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelBrief: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChnlId", wireType)
			}
			m.ChnlId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChnlId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashId", wireType)
			}
			m.HashId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HashId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastOrMegagroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BroadcastOrMegagroup = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CHsGetUserOwnChannelsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CHsGetUserOwnChannelsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CHsGetUserOwnChannelsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chnls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chnls = append(m.Chnls, &ChannelBrief{})
			if err := m.Chnls[len(m.Chnls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestrictChannelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestrictChannelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestrictChannelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestrictChannelRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestrictChannelRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestrictChannelRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyCode", wireType)
			}
			m.ReplyCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinByQrCodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinByQrCodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinByQrCodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QrCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QrCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinByQrCodeRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinByQrCodeRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinByQrCodeRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiveStartReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveStartReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveStartReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginAt", wireType)
			}
			m.BeginAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginAt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStat", wireType)
			}
			m.LiveStat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveStat |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveType", wireType)
			}
			m.LiveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveUser", wireType)
			}
			m.LiveUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveUser |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveRoom", wireType)
			}
			m.LiveRoom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveRoom |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivePkId", wireType)
			}
			m.LivePkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LivePkId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiveStartRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveStartRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveStartRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyCode", wireType)
			}
			m.ReplyCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyCode |= (GroupLiveReplyCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiveStopReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveStopReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveStopReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveUser", wireType)
			}
			m.LiveUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveUser |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStat", wireType)
			}
			m.LiveStat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveStat |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiveStopRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveStopRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveStopRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (GroupLiveReplyCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invited", wireType)
			}
			m.Invited = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Invited |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLiveInviteUrlReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLiveInviteUrlReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLiveInviteUrlReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginAt", wireType)
			}
			m.BeginAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginAt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveUser", wireType)
			}
			m.LiveUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveUser |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLiveInviteUrlRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLiveInviteUrlRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLiveInviteUrlRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyCode", wireType)
			}
			m.ReplyCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyCode |= (GroupLiveReplyCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditLiveInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditLiveInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditLiveInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginAt", wireType)
			}
			m.BeginAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginAt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStat", wireType)
			}
			m.LiveStat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveStat |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveType", wireType)
			}
			m.LiveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveUser", wireType)
			}
			m.LiveUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveUser |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveRoom", wireType)
			}
			m.LiveRoom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveRoom |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditLiveInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditLiveInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditLiveInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyCode", wireType)
			}
			m.ReplyCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyCode |= (GroupLiveReplyCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupLiveCheckReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupLiveCheckReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupLiveCheckReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveUser", wireType)
			}
			m.LiveUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveUser |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupLiveCheckRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupLiveCheckRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupLiveCheckRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyCode", wireType)
			}
			m.ReplyCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyCode |= (GroupLiveReplyCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLiveInviteCntReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLiveInviteCntReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLiveInviteCntReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveUser", wireType)
			}
			m.LiveUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveUser |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLiveInviteCntRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLiveInviteCntRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLiveInviteCntRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= (GroupLiveReplyCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invited", wireType)
			}
			m.Invited = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Invited |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserInGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserInGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserInGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserInGroupRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserInGroupRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserInGroupRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InGroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InGroup = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGroupUserIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGroupUserIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGroupUserIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanId", wireType)
			}
			m.ChanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChanId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGroupUserIdsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGroupUserIdsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGroupUserIdsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetNo", wireType)
			}
			m.RetNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetNo |= (GroupLiveReplyCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbchannelserver
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbchannelserver
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHotGroupsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHotGroupsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHotGroupsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerNo", wireType)
			}
			m.VerNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerNo |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHotGroupsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHotGroupsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHotGroupsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbchannelserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbchannelserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPbchannelserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPbchannelserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPbchannelserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPbchannelserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPbchannelserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPbchannelserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPbchannelserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPbchannelserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/pbchannelserver/pbchannelserver.proto", fileDescriptorPbchannelserver)
}

var fileDescriptorPbchannelserver = []byte{
	// 7887 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x7d, 0x6d, 0x8c, 0x1b, 0xc9,
	0x75, 0xe0, 0x36, 0x39, 0x9c, 0x21, 0x8b, 0x1c, 0xcd, 0xa8, 0x35, 0x92, 0x28, 0x8e, 0x34, 0x92,
	0x5a, 0xda, 0xb5, 0xbc, 0xb6, 0x25, 0x9f, 0x7c, 0x3e, 0xdb, 0x38, 0x1c, 0x70, 0xf3, 0xa1, 0x91,
	0xb8, 0xab, 0x59, 0xcd, 0x36, 0xa5, 0x59, 0xdb, 0x77, 0x3e, 0x5e, 0x0f, 0xbb, 0xc8, 0x69, 0x0f,
	0xd9, 0xcd, 0xe9, 0x6e, 0x8e, 0x44, 0x18, 0x87, 0xf3, 0xc1, 0xb7, 0x70, 0x6c, 0x07, 0x70, 0xfc,
	0x19, 0x24, 0x08, 0x10, 0x24, 0x80, 0x1d, 0x20, 0x46, 0x02, 0xe7, 0x67, 0x7e, 0x18, 0x8b, 0x20,
	0x31, 0x60, 0x07, 0x30, 0x10, 0xc0, 0x08, 0x12, 0xff, 0x08, 0x60, 0x38, 0xbf, 0x02, 0x04, 0x46,
	0x7e, 0xe4, 0x5f, 0x10, 0x20, 0xa8, 0xf7, 0xaa, 0xfa, 0xb3, 0xba, 0xd9, 0x33, 0xab, 0x75, 0x76,
	0x91, 0x5f, 0xec, 0xf7, 0xfa, 0x75, 0x55, 0xbd, 0x57, 0x55, 0xaf, 0x5e, 0xbd, 0xf7, 0xaa, 0x48,
	0x5e, 0x19, 0x58, 0xfe, 0xd0, 0xd8, 0xbf, 0xdd, 0x3b, 0x30, 0x7c, 0x8f, 0xba, 0xc7, 0xd4, 0xbd,
	0x6d, 0x8d, 0xee, 0x58, 0xb6, 0x4f, 0xdd, 0xbe, 0xd1, 0xa3, 0x63, 0xd7, 0xd9, 0x9f, 0xf4, 0xef,
	0x8c, 0xf7, 0x7b, 0x07, 0x86, 0x6d, 0xd3, 0x21, 0x92, 0x24, 0xe1, 0xdb, 0x63, 0xd7, 0xf1, 0x1d,
	0x75, 0x29, 0x81, 0x6e, 0x7d, 0xbc, 0x68, 0xe1, 0xce, 0x68, 0xc4, 0x7f, 0xb0, 0xa8, 0xd6, 0x7f,
	0x2f, 0xf8, 0xe5, 0x88, 0x7a, 0x9e, 0x31, 0xa0, 0xe6, 0xfe, 0x9d, 0xe0, 0x89, 0x97, 0xf0, 0xca,
	0xc9, 0x4a, 0x08, 0x18, 0x8b, 0xc1, 0x58, 0x96, 0xf6, 0x49, 0x72, 0xe9, 0x3e, 0xf5, 0xef, 0xbb,
	0xce, 0x64, 0xec, 0x6d, 0x3b, 0xee, 0x96, 0xe5, 0xf5, 0x26, 0x9e, 0x67, 0x39, 0xb6, 0x4e, 0x8f,
	0xd4, 0x0b, 0x64, 0xfe, 0x89, 0x47, 0xdd, 0xb6, 0xd9, 0x54, 0xae, 0x29, 0xb7, 0x2a, 0x3a, 0x87,
	0xd4, 0x1b, 0xa4, 0xb2, 0x45, 0xf7, 0x27, 0x83, 0x66, 0xe9, 0x9a, 0x72, 0xab, 0x7e, 0x77, 0xf1,
	0x36, 0x67, 0x10, 0x90, 0x3a, 0xbe, 0xd3, 0x86, 0x99, 0x25, 0x7b, 0x63, 0x75, 0x85, 0x54, 0xee,
	0xb9, 0xae, 0xe3, 0xf2, 0x82, 0x11, 0x60, 0x58, 0x9d, 0x8e, 0x87, 0x53, 0x28, 0xb7, 0xa1, 0x23,
	0x10, 0xd6, 0x56, 0xce, 0xa9, 0xed, 0x37, 0x14, 0x72, 0xbe, 0x43, 0xfd, 0xb0, 0x16, 0xa8, 0x98,
	0x31, 0x71, 0x99, 0xd4, 0x36, 0x5c, 0xc7, 0x30, 0x7b, 0x86, 0xe7, 0xf3, 0xea, 0x42, 0x04, 0x7b,
	0xbb, 0x43, 0x07, 0xc6, 0x80, 0x51, 0x43, 0xb5, 0x15, 0x3d, 0x44, 0x30, 0x01, 0x6c, 0xbb, 0xce,
	0xa8, 0x6d, 0x42, 0xdd, 0x15, 0x9d, 0x43, 0x61, 0x93, 0xe6, 0x72, 0x9a, 0x74, 0x51, 0xda, 0x22,
	0x6f, 0xac, 0xfd, 0xb1, 0x42, 0x54, 0x9d, 0x1e, 0x6d, 0xba, 0xd4, 0xf0, 0x69, 0x67, 0x32, 0xa6,
	0xee, 0xe6, 0x81, 0xe1, 0x33, 0xee, 0x5d, 0xe0, 0x5e, 0x41, 0xee, 0x01, 0x60, 0x0d, 0xa4, 0x4c,
	0x38, 0x9b, 0x8e, 0x49, 0x45, 0x03, 0x03, 0x84, 0xba, 0x4c, 0xca, 0x8f, 0xf6, 0x3f, 0x0b, 0xad,
	0x6b, 0xe8, 0xec, 0x51, 0xbd, 0x48, 0x16, 0x26, 0x1e, 0x75, 0xbb, 0x96, 0x09, 0x8d, 0xab, 0xe8,
	0xf3, 0x13, 0xec, 0xb4, 0x15, 0x52, 0x79, 0x95, 0x4e, 0xdb, 0x66, 0xb3, 0x72, 0x4d, 0xb9, 0x55,
	0xd6, 0x11, 0x60, 0x9c, 0x98, 0xc0, 0xc9, 0xbc, 0x94, 0x13, 0x78, 0xa7, 0x4d, 0x49, 0x4b, 0xa7,
	0x47, 0x6d, 0x6f, 0x13, 0xa7, 0xc0, 0xba, 0x39, 0xb2, 0xec, 0x47, 0x2e, 0xb4, 0xdf, 0x71, 0xa3,
	0x35, 0x2a, 0xb1, 0x1a, 0xaf, 0x10, 0xc2, 0x27, 0x0d, 0x7b, 0x57, 0x82, 0x6a, 0x6b, 0x1c, 0x13,
	0xad, 0xba, 0x9c, 0x53, 0xf5, 0x33, 0x72, 0x49, 0xa7, 0x47, 0xf7, 0xa9, 0xcf, 0xeb, 0xde, 0xa1,
	0xa3, 0x7d, 0xea, 0x7a, 0x9b, 0xce, 0xc4, 0xf6, 0x4f, 0x52, 0x73, 0xe5, 0xc4, 0x35, 0x8f, 0xc8,
	0x2a, 0x8c, 0xbf, 0x8c, 0xba, 0x3f, 0x4c, 0xce, 0x49, 0xd0, 0xbc, 0x1d, 0xb2, 0x57, 0xac, 0x27,
	0xef, 0x25, 0x7b, 0x32, 0x40, 0x68, 0x6f, 0x90, 0x45, 0x9d, 0x1e, 0x75, 0xa8, 0x6d, 0x3e, 0x74,
	0x06, 0x3b, 0xde, 0x40, 0x6d, 0x92, 0x85, 0x1d, 0x9c, 0xb0, 0x50, 0x68, 0x4d, 0x17, 0x20, 0x1b,
	0x95, 0xeb, 0x13, 0xff, 0xc0, 0x71, 0xa1, 0x94, 0x9a, 0xce, 0x21, 0xd6, 0xc3, 0x0f, 0xe9, 0x31,
	0x1d, 0x02, 0x5b, 0x35, 0x1d, 0x01, 0xed, 0xad, 0x12, 0x21, 0xdb, 0x8e, 0xfb, 0xd4, 0x70, 0x4d,
	0x56, 0xac, 0x4a, 0xe6, 0xb6, 0x0c, 0x9f, 0xf2, 0x86, 0xc2, 0x73, 0xb4, 0xaa, 0x52, 0xbc, 0xaa,
	0x15, 0x52, 0xd9, 0xa1, 0xa6, 0x65, 0x40, 0x91, 0x65, 0x1d, 0x01, 0x9c, 0x34, 0x96, 0x69, 0x98,
	0x86, 0x6f, 0xc0, 0x28, 0x6b, 0xe8, 0x21, 0x42, 0xbd, 0x4e, 0x1a, 0x20, 0xb8, 0xee, 0xc8, 0x70,
	0x0f, 0x27, 0x63, 0x18, 0x6f, 0x0d, 0xbd, 0x0e, 0xb8, 0x1d, 0x40, 0xa9, 0x2d, 0x52, 0xbd, 0x67,
	0xfb, 0x96, 0x6f, 0x51, 0xaf, 0x39, 0x7f, 0xad, 0x7c, 0xab, 0xa1, 0x07, 0xb0, 0x98, 0x73, 0x96,
	0xd9, 0x5c, 0x08, 0xe7, 0x9c, 0x05, 0xe3, 0xf7, 0x9e, 0xdd, 0x73, 0xa7, 0xcd, 0x2a, 0x57, 0x19,
	0x0c, 0x60, 0x4d, 0xdf, 0x7e, 0x6a, 0x32, 0x92, 0x66, 0x0d, 0xea, 0x11, 0x20, 0x63, 0x74, 0xcf,
	0xa2, 0x4f, 0x9b, 0x04, 0x19, 0x65, 0xcf, 0x8c, 0x1a, 0x66, 0xa1, 0x65, 0x36, 0xeb, 0xc0, 0x90,
	0x00, 0x59, 0x8b, 0xf6, 0x2c, 0x63, 0xc3, 0xf1, 0xdb, 0x66, 0xb3, 0x01, 0x5f, 0x04, 0xb0, 0xf6,
	0xcf, 0x65, 0x18, 0xff, 0x42, 0x88, 0x28, 0x9a, 0xc7, 0x0e, 0xef, 0x63, 0xd6, 0xe0, 0x3e, 0x36,
	0x98, 0x0f, 0xc2, 0x7e, 0xd0, 0xe0, 0xfe, 0xd0, 0x18, 0x78, 0xbc, 0xaf, 0x11, 0x60, 0xd4, 0x9e,
	0x35, 0xa4, 0xb6, 0x0f, 0x22, 0xad, 0xea, 0x1c, 0x52, 0xd7, 0x08, 0xd9, 0x37, 0x7a, 0x87, 0x4c,
	0xef, 0xd8, 0x38, 0x75, 0xab, 0x7a, 0x04, 0xa3, 0x6a, 0x64, 0xf1, 0xa9, 0xe5, 0x1f, 0x74, 0x47,
	0xd3, 0xae, 0xd7, 0x73, 0x5c, 0x0a, 0x62, 0xad, 0xea, 0x75, 0x86, 0xdc, 0x99, 0x76, 0x18, 0x4a,
	0x5d, 0x25, 0x35, 0x56, 0x77, 0x77, 0x4c, 0xa9, 0x0b, 0x13, 0xba, 0xa1, 0x57, 0x19, 0x62, 0x97,
	0x52, 0x57, 0x3d, 0x43, 0x4a, 0x20, 0xd3, 0xf2, 0xad, 0x8a, 0x5e, 0xb2, 0x4c, 0x46, 0xec, 0x1a,
	0xb6, 0xe9, 0x8c, 0xd8, 0x14, 0xa9, 0x5e, 0x2b, 0xdf, 0x2a, 0xeb, 0x55, 0x44, 0xb4, 0x4d, 0x36,
	0xb3, 0x7c, 0x07, 0xcb, 0x41, 0xb1, 0xce, 0xfb, 0x0e, 0x94, 0x72, 0x85, 0x10, 0xa8, 0xe2, 0x90,
	0x4e, 0x2d, 0x13, 0x64, 0x3b, 0xa7, 0x43, 0xa5, 0xaf, 0x32, 0x84, 0xfa, 0x51, 0xb2, 0xb0, 0xe3,
	0x0d, 0x1e, 0x5a, 0x9e, 0xdf, 0xac, 0x5f, 0x2b, 0xdf, 0xaa, 0xdf, 0x5d, 0xbd, 0x9d, 0x5c, 0x50,
	0xc3, 0xb1, 0xa8, 0x0b, 0x5a, 0x26, 0x2a, 0x0a, 0x7d, 0x8b, 0xa2, 0x47, 0x80, 0xf5, 0x09, 0x9b,
	0xcf, 0x43, 0x56, 0xda, 0x22, 0xb4, 0x3b, 0x80, 0xd9, 0x3b, 0xb6, 0xfc, 0xc1, 0xbb, 0x33, 0xf8,
	0x4e, 0xc0, 0xea, 0x35, 0x52, 0xe7, 0x55, 0xc2, 0xeb, 0x25, 0x78, 0x1d, 0x45, 0x85, 0x0a, 0x60,
	0x39, 0x47, 0x01, 0x7c, 0x5e, 0x21, 0xe7, 0x74, 0x7a, 0xb4, 0x63, 0x0d, 0x5c, 0xc3, 0x8f, 0xf4,
	0x77, 0xf0, 0xb1, 0x92, 0xfd, 0x71, 0xb0, 0x72, 0x6c, 0xf1, 0xde, 0xe7, 0x10, 0xc3, 0x33, 0x65,
	0xdf, 0xde, 0x12, 0x2b, 0x0a, 0x42, 0x30, 0xd1, 0xbc, 0x41, 0x5b, 0x28, 0x6d, 0x04, 0xb4, 0xaf,
	0x2a, 0xe4, 0x3c, 0xce, 0x9b, 0x64, 0x23, 0x34, 0xd2, 0x10, 0x3a, 0x06, 0x3e, 0xc3, 0xa1, 0x17,
	0xc3, 0xb1, 0x21, 0xc5, 0xe1, 0x5d, 0x5f, 0x8c, 0xc2, 0x08, 0x86, 0x4d, 0x63, 0x0e, 0x05, 0xcd,
	0x09, 0x11, 0xac, 0x45, 0x8f, 0x2d, 0x7f, 0x48, 0xa1, 0x45, 0x35, 0x1d, 0x01, 0xed, 0x27, 0x0a,
	0xb9, 0x0c, 0x7a, 0xca, 0x70, 0x7b, 0x07, 0x81, 0x96, 0x33, 0x2d, 0x43, 0x68, 0x8c, 0x1d, 0xb2,
	0xcc, 0x84, 0x86, 0x10, 0x92, 0x71, 0x41, 0x5d, 0xbf, 0x9d, 0x34, 0x41, 0x92, 0x84, 0x7a, 0xea,
	0x53, 0xd6, 0x8a, 0xce, 0xe3, 0xe9, 0x58, 0x28, 0x26, 0x04, 0x98, 0x14, 0xd9, 0xb8, 0xb7, 0x82,
	0x75, 0x19, 0x21, 0x36, 0x2a, 0xd8, 0x13, 0x7c, 0x80, 0x82, 0x0c, 0xe0, 0x70, 0x8c, 0x55, 0x22,
	0x63, 0x4c, 0xfb, 0xb3, 0x12, 0x39, 0x17, 0x67, 0xc6, 0x1b, 0x44, 0x4d, 0x9f, 0xad, 0x98, 0xe9,
	0xb3, 0x15, 0x97, 0x59, 0x29, 0x29, 0xb3, 0xb0, 0xd7, 0xcb, 0xc9, 0x5e, 0x07, 0x21, 0x79, 0xcd,
	0x39, 0x18, 0x8c, 0x1c, 0x62, 0xed, 0x7d, 0xd4, 0xef, 0x7b, 0x94, 0x8d, 0x07, 0x6c, 0x56, 0x00,
	0xb3, 0x9a, 0xd6, 0x4d, 0x13, 0x41, 0x98, 0xcc, 0x15, 0x3d, 0x44, 0x84, 0xda, 0x70, 0x21, 0xaa,
	0x0d, 0xd9, 0x0a, 0x60, 0x8d, 0x2c, 0x5f, 0xe8, 0x48, 0x00, 0x40, 0xbd, 0x5b, 0x36, 0x68, 0xfd,
	0x1a, 0xe0, 0x05, 0x08, 0x6f, 0x8c, 0x67, 0xf0, 0x86, 0xf0, 0x37, 0x08, 0xc2, 0x78, 0xb4, 0xec,
	0xf6, 0x16, 0xe8, 0x49, 0x36, 0x1e, 0x19, 0x00, 0x58, 0xe3, 0x59, 0x7b, 0x4b, 0xcc, 0x53, 0x00,
	0xb4, 0x6d, 0xb2, 0x92, 0x16, 0xa1, 0x37, 0x56, 0x6f, 0x93, 0x2a, 0xef, 0x4c, 0xaf, 0xa9, 0x80,
	0x36, 0x50, 0x6f, 0x87, 0xb6, 0x2c, 0x13, 0x28, 0xa3, 0x0c, 0x68, 0xb4, 0x9f, 0x2b, 0x6c, 0xec,
	0x8c, 0x87, 0x53, 0x5e, 0xce, 0x16, 0x5b, 0x4d, 0x4e, 0x63, 0x15, 0xad, 0x93, 0x86, 0x69, 0x19,
	0x43, 0x67, 0xb0, 0xde, 0xf3, 0x2d, 0xc7, 0xe6, 0xcb, 0xfc, 0x95, 0x94, 0x2a, 0xda, 0x8a, 0x10,
	0xe9, 0xb1, 0x4f, 0xa2, 0xfd, 0x2c, 0xe6, 0x64, 0x88, 0x50, 0xaf, 0x92, 0xba, 0xd1, 0xeb, 0x51,
	0xcf, 0xeb, 0x1e, 0x18, 0xde, 0x01, 0xb7, 0xa8, 0x08, 0xa2, 0x1e, 0x18, 0xde, 0x41, 0xc4, 0x70,
	0x9c, 0x8f, 0x1a, 0x8e, 0xda, 0xf7, 0x09, 0x69, 0x44, 0x6b, 0x55, 0xf7, 0x98, 0x19, 0x41, 0x7b,
	0x87, 0x8f, 0xdc, 0xb6, 0xed, 0x51, 0xd7, 0xc7, 0x97, 0x5c, 0x5c, 0x37, 0x53, 0x2d, 0x96, 0xd0,
	0xea, 0xb2, 0x02, 0xd8, 0x34, 0xdc, 0xa2, 0x43, 0xea, 0x53, 0x26, 0x66, 0x5e, 0x68, 0x09, 0x0a,
	0xbd, 0x9e, 0x16, 0x43, 0x82, 0x50, 0x4f, 0x7d, 0xaa, 0x7e, 0x8a, 0xac, 0x3c, 0x19, 0x9b, 0x86,
	0x4f, 0xd9, 0x22, 0x80, 0xb8, 0xb6, 0xdd, 0x73, 0x9b, 0x65, 0x28, 0xf2, 0xc5, 0x54, 0x91, 0x32,
	0x62, 0x5d, 0x5a, 0x84, 0x6a, 0x93, 0x55, 0x19, 0x1e, 0x6c, 0x26, 0xea, 0xc2, 0x84, 0xa9, 0xdf,
	0xfd, 0x60, 0xa1, 0x1a, 0xf8, 0x37, 0x7a, 0x5e, 0x81, 0x20, 0x71, 0xb0, 0xbc, 0xc5, 0x28, 0x43,
	0xe1, 0x54, 0xb2, 0x24, 0x9e, 0xa6, 0xd5, 0x65, 0x05, 0xa8, 0xf7, 0xc9, 0x19, 0xe8, 0x08, 0x9d,
	0xf6, 0x78, 0x91, 0xf3, 0x50, 0xe4, 0x55, 0x79, 0x27, 0x06, 0x64, 0x7a, 0xe2, 0x33, 0xf5, 0x80,
	0x5c, 0xc2, 0xf6, 0x8b, 0x2e, 0x65, 0xfd, 0xc0, 0xea, 0xda, 0x1a, 0x0e, 0x60, 0xfd, 0xae, 0xdf,
	0x7d, 0x39, 0x43, 0x1c, 0x92, 0x2f, 0xf4, 0xec, 0xc2, 0x58, 0xaf, 0x42, 0xdd, 0x9c, 0x11, 0x41,
	0x02, 0xd6, 0x80, 0xac, 0x57, 0x65, 0xc4, 0xba, 0xb4, 0x08, 0x36, 0xfe, 0x3a, 0xd4, 0x87, 0xcd,
	0x0d, 0x98, 0x58, 0x3b, 0xde, 0xa0, 0x59, 0xcb, 0x18, 0x7f, 0x49, 0x42, 0x3d, 0xf5, 0xa9, 0xfa,
	0x25, 0x85, 0xdc, 0x94, 0xd5, 0xb3, 0x35, 0x1c, 0xbc, 0xe6, 0xf8, 0x9b, 0x43, 0x6a, 0xb8, 0x5b,
	0xae, 0xd1, 0xf7, 0x9b, 0x04, 0xea, 0xf8, 0x68, 0xa1, 0xa6, 0x27, 0x3f, 0xd6, 0x0b, 0x55, 0xa1,
	0x7e, 0x55, 0x21, 0x2f, 0x65, 0xca, 0x34, 0xde, 0x1a, 0xb4, 0x81, 0x3e, 0x56, 0xbc, 0xb7, 0xe2,
	0xed, 0x29, 0x58, 0x8d, 0xba, 0x4f, 0x2e, 0x22, 0x25, 0x6f, 0xba, 0x4e, 0x0d, 0xd3, 0x99, 0xf8,
	0xfb, 0xce, 0xb3, 0x66, 0x03, 0x5a, 0x70, 0x2b, 0xa3, 0x05, 0x29, 0x7a, 0x3d, 0xab, 0x20, 0xf5,
	0x29, 0x59, 0x93, 0x8c, 0x7a, 0x68, 0xc4, 0x13, 0xdb, 0xa5, 0x86, 0x09, 0x26, 0x5a, 0xfd, 0xee,
	0x9d, 0x22, 0x33, 0x28, 0xf2, 0x99, 0x3e, 0xa3, 0x58, 0xed, 0x0f, 0x14, 0x72, 0xe1, 0x9e, 0x69,
	0x89, 0x4d, 0xd8, 0x43, 0xa7, 0x67, 0xf8, 0xdc, 0x3f, 0x51, 0xd4, 0x12, 0xc3, 0x5d, 0xa1, 0xb0,
	0xc4, 0xf8, 0x1e, 0xf1, 0x3c, 0x99, 0x7f, 0x95, 0x4e, 0xbb, 0xdc, 0x86, 0x08, 0x36, 0xc4, 0x57,
	0x08, 0xe1, 0x6b, 0x94, 0xd8, 0x42, 0x97, 0xf5, 0x1a, 0xc7, 0xb4, 0xc1, 0xc2, 0xd0, 0xe9, 0xd1,
	0xc6, 0xd4, 0xa7, 0x1e, 0xdf, 0xd8, 0x04, 0xb0, 0xf6, 0x31, 0x72, 0x51, 0xda, 0x50, 0x6f, 0xcc,
	0x96, 0x13, 0xf6, 0x8b, 0xdf, 0xe1, 0x4a, 0x16, 0x22, 0xb4, 0xef, 0x2a, 0xe4, 0xfc, 0x63, 0xd7,
	0xb0, 0xbd, 0x3e, 0x1f, 0xf2, 0x8f, 0x9e, 0xda, 0xd4, 0x7d, 0x17, 0x72, 0x38, 0x25, 0x17, 0x64,
	0xed, 0x9c, 0xc5, 0x60, 0x6a, 0x41, 0x2e, 0x9d, 0x78, 0x41, 0xd6, 0xbe, 0xac, 0x90, 0x4b, 0xe9,
	0xba, 0x37, 0xa6, 0x6d, 0x93, 0xc9, 0xe9, 0x45, 0x32, 0x0f, 0x22, 0xf1, 0xe4, 0x82, 0xe2, 0x2f,
	0x23, 0xcb, 0x72, 0x29, 0xe6, 0xcf, 0x41, 0xab, 0xdc, 0x0e, 0xfd, 0x3c, 0x08, 0x31, 0xfc, 0x16,
	0xf5, 0xfc, 0xc0, 0x04, 0xe0, 0x90, 0xf6, 0xa9, 0xcc, 0xb6, 0x78, 0x63, 0x26, 0x5f, 0xdc, 0xff,
	0xf6, 0x98, 0x71, 0xc2, 0x3d, 0x4e, 0x68, 0xd7, 0x30, 0xe3, 0x24, 0x78, 0x6d, 0xd9, 0x7d, 0x87,
	0x9b, 0xb5, 0xf8, 0xba, 0x6d, 0xf7, 0x1d, 0xed, 0x9b, 0x4a, 0xe6, 0x64, 0x7e, 0x7b, 0xa3, 0x61,
	0x8d, 0x10, 0x36, 0x9f, 0x1e, 0x4d, 0xfc, 0x1d, 0xe3, 0x19, 0xe7, 0x33, 0x82, 0x61, 0x3d, 0xd8,
	0x4b, 0x5a, 0x3c, 0x01, 0x42, 0xfb, 0xeb, 0x82, 0x0a, 0xb8, 0x70, 0x1b, 0x3b, 0x74, 0xd8, 0x0f,
	0x7c, 0x33, 0x1c, 0x62, 0xf8, 0x37, 0x62, 0x76, 0x3d, 0x42, 0x6c, 0x2f, 0x1f, 0xb1, 0xe9, 0xe1,
	0x59, 0xbd, 0x49, 0xca, 0x23, 0x6f, 0x00, 0x43, 0x54, 0x6e, 0x58, 0xb2, 0xd7, 0x8c, 0xeb, 0x03,
	0xc3, 0x36, 0x87, 0x14, 0xbe, 0x9f, 0x07, 0x69, 0x47, 0x30, 0xda, 0xdf, 0x14, 0x56, 0xe6, 0xef,
	0x35, 0xce, 0x7e, 0x4b, 0x49, 0x2f, 0xc1, 0x85, 0x79, 0x60, 0x35, 0x85, 0x3c, 0x20, 0x14, 0x19,
	0x21, 0x01, 0x1b, 0x21, 0x82, 0x71, 0xc2, 0xc4, 0xc8, 0x15, 0x0a, 0x3c, 0xb3, 0x92, 0x46, 0xde,
	0x60, 0xdf, 0xb2, 0xb9, 0x26, 0xe1, 0x90, 0xf6, 0x97, 0x4a, 0x8e, 0x8d, 0xf3, 0x5e, 0x13, 0xf4,
	0x0f, 0x15, 0xb9, 0x19, 0xf5, 0x5e, 0xe3, 0xe3, 0x7b, 0x4a, 0xd2, 0x82, 0x3d, 0xd1, 0x70, 0x69,
	0xc7, 0x86, 0x4b, 0x7b, 0xd6, 0x70, 0x59, 0x21, 0x95, 0x91, 0x37, 0x08, 0xbc, 0xd4, 0x08, 0xb0,
	0xb2, 0x98, 0x4a, 0xe2, 0x03, 0xa6, 0xa2, 0x73, 0x48, 0x5d, 0x26, 0xe5, 0xb1, 0xef, 0xf1, 0xcd,
	0x14, 0x7b, 0xd4, 0xfe, 0x42, 0x91, 0xee, 0x9c, 0xde, 0x6b, 0x42, 0xff, 0x5c, 0x7a, 0x9f, 0xf6,
	0x8e, 0xb1, 0x00, 0xee, 0x3c, 0xce, 0x02, 0x7b, 0xd6, 0xbe, 0xa1, 0xc8, 0xb7, 0x75, 0xc5, 0x5a,
	0xb0, 0x47, 0xce, 0xe3, 0xc7, 0x61, 0xd3, 0x77, 0x0d, 0xd7, 0x18, 0xf1, 0xd5, 0xfd, 0x5a, 0x54,
	0x24, 0x32, 0x3a, 0x5d, 0xfe, 0xb9, 0xf6, 0xdb, 0x4a, 0xee, 0x8e, 0xf0, 0xdf, 0xb7, 0x71, 0x3f,
	0x52, 0xa4, 0xdb, 0xc7, 0x77, 0xf1, 0x4c, 0x61, 0x94, 0x63, 0xcb, 0xb6, 0x29, 0x3a, 0xd4, 0xab,
	0x3a, 0x87, 0xb4, 0x9f, 0x2a, 0xb3, 0x4c, 0xfa, 0xf7, 0x22, 0x57, 0x5f, 0x51, 0xc8, 0x9a, 0x4e,
	0x8f, 0x38, 0x4b, 0x1e, 0xb3, 0x9e, 0xb8, 0x83, 0x69, 0xd3, 0xb1, 0x7d, 0x6a, 0xfb, 0x1e, 0xab,
	0x1a, 0xdd, 0xd7, 0x0a, 0xb8, 0xaf, 0x11, 0xc8, 0x64, 0x03, 0x9a, 0xe4, 0x4d, 0x86, 0x3e, 0x8f,
	0xb2, 0x71, 0x28, 0x94, 0xcd, 0x5c, 0x8e, 0x0f, 0xf9, 0xff, 0x42, 0xa4, 0x8f, 0xed, 0x0a, 0x76,
	0x5d, 0xeb, 0x18, 0x45, 0xed, 0x67, 0xc6, 0x55, 0x63, 0x4e, 0xa7, 0x52, 0xd2, 0xe9, 0x74, 0x86,
	0x94, 0x9c, 0x43, 0x1e, 0x35, 0x28, 0x39, 0x87, 0xc5, 0x1a, 0xf0, 0x19, 0x90, 0x46, 0x34, 0x86,
	0x05, 0xb2, 0xb8, 0xf7, 0x6c, 0xec, 0xb8, 0xfe, 0x43, 0xcb, 0x3e, 0x8c, 0xf0, 0xa7, 0xc8, 0xf9,
	0x2b, 0xe5, 0x14, 0xff, 0x45, 0x85, 0xac, 0x70, 0x06, 0xef, 0x1d, 0x53, 0x77, 0xea, 0xd8, 0xf4,
	0xf5, 0x89, 0x45, 0x4f, 0xcb, 0xe2, 0x0a, 0xa9, 0x1c, 0xb1, 0xcf, 0x39, 0x97, 0x08, 0x14, 0x63,
	0xf4, 0x4f, 0xe7, 0xc8, 0x82, 0x70, 0x8e, 0x07, 0x91, 0x17, 0x25, 0x1a, 0x79, 0x69, 0x92, 0x85,
	0x1e, 0x86, 0x2c, 0xa1, 0xe2, 0xaa, 0x2e, 0x40, 0xd6, 0xd8, 0x43, 0xab, 0x77, 0x48, 0x4d, 0x11,
	0x93, 0x41, 0x88, 0xe9, 0xcc, 0x21, 0xed, 0xfb, 0x3c, 0x1a, 0x03, 0xcf, 0x8c, 0x96, 0x9a, 0x16,
	0x2b, 0x04, 0x03, 0x30, 0x1c, 0x62, 0x8c, 0x8d, 0x1c, 0x93, 0xba, 0x50, 0xfe, 0x3c, 0xbc, 0x0a,
	0x11, 0xec, 0xed, 0x7e, 0x10, 0x84, 0xc6, 0x01, 0x1b, 0x22, 0xd8, 0x96, 0xeb, 0x98, 0xba, 0x56,
	0xdf, 0xa2, 0x26, 0x78, 0x6e, 0xab, 0x7a, 0x00, 0x43, 0xb9, 0x41, 0x80, 0xba, 0xc6, 0xcb, 0x0d,
	0x02, 0xd4, 0x60, 0xd4, 0x7b, 0xbe, 0x6b, 0xf5, 0x7c, 0x8a, 0xe1, 0x98, 0xaa, 0x1e, 0xc1, 0xb0,
	0xaf, 0x4d, 0x3a, 0x72, 0x7a, 0xae, 0xd1, 0x9b, 0x82, 0x2b, 0xb7, 0xaa, 0x87, 0x08, 0xf6, 0xb5,
	0x67, 0x0d, 0x6c, 0xc3, 0x9f, 0xb8, 0xd4, 0x03, 0x9f, 0x6e, 0x55, 0x8f, 0x60, 0xd8, 0xac, 0x1b,
	0x59, 0x76, 0x73, 0x11, 0x5e, 0xb0, 0x47, 0x1e, 0x44, 0x3a, 0x03, 0x62, 0x2d, 0x59, 0x29, 0x47,
	0xe8, 0x52, 0xca, 0x11, 0xba, 0x42, 0x2a, 0x3e, 0x44, 0x11, 0x96, 0xd1, 0x7f, 0x0f, 0x80, 0x88,
	0xec, 0xd8, 0xc6, 0x88, 0x36, 0xcf, 0xc2, 0x8b, 0x00, 0x66, 0x5f, 0x8c, 0x0f, 0x1c, 0xdf, 0x69,
	0xaa, 0xd8, 0x79, 0x00, 0x04, 0xd6, 0xe5, 0x39, 0x5c, 0xbe, 0x4c, 0xee, 0xbd, 0x3e, 0xa6, 0xae,
	0xc7, 0x36, 0x94, 0x2b, 0xe8, 0xbd, 0xe6, 0xa0, 0xfa, 0x21, 0xa2, 0x0a, 0x21, 0x58, 0x8e, 0xdd,
	0x75, 0xa9, 0xe1, 0x39, 0x76, 0xf3, 0x3c, 0xf0, 0x71, 0x36, 0xf2, 0x46, 0x87, 0x17, 0xda, 0x2f,
	0x4b, 0x62, 0xcf, 0xf5, 0x1a, 0x7d, 0x1a, 0x9f, 0x28, 0x19, 0x63, 0x69, 0x99, 0x94, 0x9d, 0x89,
	0xcf, 0xc7, 0x11, 0x7b, 0xc4, 0x7e, 0xb2, 0x59, 0xa1, 0xc1, 0x30, 0x0a, 0x11, 0xea, 0x75, 0xd2,
	0x18, 0x51, 0xd3, 0x32, 0xba, 0x13, 0xf4, 0x95, 0xe0, 0x88, 0xaa, 0x03, 0x8e, 0xeb, 0xda, 0x30,
	0x30, 0x58, 0x89, 0x05, 0x06, 0xd9, 0xc2, 0xed, 0x78, 0x3e, 0x1f, 0x53, 0xf0, 0x1c, 0xc4, 0xf2,
	0x44, 0x37, 0x5c, 0x24, 0x0b, 0x10, 0x95, 0xb3, 0x4c, 0xee, 0xf9, 0x87, 0x18, 0x64, 0xdb, 0x54,
	0xcf, 0x91, 0x8a, 0xef, 0x30, 0x34, 0x3a, 0xfe, 0xe7, 0x7c, 0xa7, 0x6d, 0xaa, 0x2f, 0x92, 0x25,
	0xf0, 0xa2, 0x77, 0x7d, 0xa7, 0x3b, 0xf2, 0x06, 0x5d, 0x4b, 0x8c, 0x9c, 0x06, 0xa0, 0x1f, 0x3b,
	0x18, 0x3e, 0x12, 0x22, 0xaf, 0x47, 0x44, 0x7e, 0x81, 0xcc, 0x1b, 0xb8, 0x85, 0x6f, 0xa0, 0xb2,
	0x40, 0x48, 0xe8, 0xe7, 0xc5, 0x50, 0x3f, 0xaf, 0x92, 0xda, 0xd8, 0xf7, 0xba, 0x3d, 0x88, 0x8a,
	0xe3, 0x80, 0xa9, 0x8e, 0x7d, 0x0c, 0x85, 0x6b, 0x6f, 0x96, 0x21, 0x4a, 0x14, 0x5b, 0x7d, 0xe2,
	0x1b, 0x50, 0x25, 0x19, 0xb3, 0xcf, 0xda, 0xd6, 0x06, 0x03, 0xac, 0x1c, 0x1d, 0x60, 0x2b, 0xa4,
	0x62, 0xec, 0xb3, 0x1e, 0xe2, 0xc1, 0x2b, 0x00, 0x12, 0xc1, 0x4b, 0xf4, 0xda, 0x47, 0x82, 0x97,
	0x62, 0x92, 0x6e, 0x1a, 0x81, 0xb8, 0x43, 0x44, 0x7c, 0x22, 0x2e, 0x48, 0x27, 0xe2, 0x78, 0x38,
	0xc5, 0x68, 0x5c, 0x15, 0x16, 0x96, 0x08, 0x86, 0xf5, 0xd0, 0x81, 0xe1, 0x75, 0x07, 0xd4, 0xe1,
	0x93, 0x78, 0xfe, 0xc0, 0xf0, 0xee, 0x53, 0x87, 0x4d, 0x05, 0xe1, 0x29, 0x82, 0x5e, 0x68, 0xe8,
	0x01, 0xcc, 0x7a, 0x60, 0xdd, 0x34, 0x5d, 0xe8, 0x81, 0x9a, 0x0e, 0xcf, 0xea, 0x4b, 0x64, 0x69,
	0xc3, 0xb0, 0xbb, 0x86, 0x69, 0x76, 0x7b, 0x8e, 0xed, 0x1b, 0x3d, 0x9f, 0x4f, 0xdc, 0xc5, 0x0d,
	0xc3, 0x5e, 0x37, 0xcd, 0x4d, 0x44, 0x86, 0x4a, 0x73, 0x31, 0x47, 0x69, 0xfe, 0x8b, 0x42, 0x2e,
	0xe8, 0xf4, 0xa8, 0x6d, 0x1f, 0x5b, 0x41, 0x3f, 0x60, 0xce, 0xc2, 0x8c, 0xde, 0x08, 0xa4, 0x5e,
	0x8a, 0x4a, 0x3d, 0xec, 0xa3, 0x72, 0xac, 0x8f, 0xd8, 0x5a, 0x4d, 0x01, 0xcf, 0xc3, 0x5f, 0x08,
	0xcd, 0xea, 0x8f, 0x35, 0x12, 0xd1, 0x24, 0xd0, 0x21, 0x71, 0xdd, 0x72, 0x89, 0x54, 0x2d, 0xaf,
	0xdb, 0x77, 0xdc, 0x1e, 0xe5, 0x1d, 0xb2, 0x60, 0x79, 0xdb, 0x0c, 0x0c, 0xb9, 0xaf, 0xe6, 0x70,
	0xff, 0xaf, 0x0a, 0x39, 0xa3, 0xd3, 0xa3, 0x57, 0x1c, 0xcb, 0x3e, 0xe9, 0x18, 0x2c, 0x27, 0xd3,
	0x4d, 0xde, 0x0e, 0x1f, 0x17, 0xc8, 0xfc, 0xfe, 0x94, 0xad, 0xc5, 0xc2, 0x94, 0x41, 0x88, 0xe9,
	0x37, 0x8b, 0xf5, 0x8c, 0xe3, 0xf2, 0x59, 0x2d, 0xc0, 0x90, 0xbd, 0x5a, 0x8e, 0x5d, 0x76, 0x95,
	0xd4, 0x81, 0x9e, 0x76, 0x7d, 0xb6, 0xf7, 0xc0, 0x00, 0x1f, 0x41, 0x14, 0xec, 0x3d, 0x3e, 0x5f,
	0x02, 0xeb, 0xe4, 0x55, 0xab, 0x77, 0xb8, 0xed, 0x3a, 0xa3, 0xc2, 0x32, 0x80, 0xd5, 0xd1, 0x15,
	0xf3, 0x10, 0xa1, 0x00, 0x4f, 0x85, 0x6c, 0x10, 0x52, 0xd7, 0x48, 0xdd, 0xf2, 0xba, 0xfb, 0x8e,
	0xdf, 0x65, 0xc2, 0xe2, 0x8a, 0xaf, 0x66, 0x79, 0x1b, 0x0e, 0xec, 0xf9, 0x99, 0x9e, 0xb0, 0xbc,
	0x2e, 0x5f, 0x7e, 0x51, 0xf3, 0x55, 0x2d, 0xef, 0x55, 0x5c, 0x80, 0x57, 0x49, 0x0d, 0x9f, 0x98,
	0x8e, 0x42, 0xe3, 0xaf, 0x8a, 0x88, 0x94, 0xd4, 0x17, 0x92, 0x52, 0x2f, 0x34, 0x04, 0xbe, 0xa2,
	0x90, 0x25, 0x9d, 0x1e, 0x3d, 0xa4, 0xc6, 0xf1, 0xdb, 0xd4, 0x43, 0xf1, 0xd6, 0x94, 0x33, 0x5b,
	0x93, 0x67, 0xc3, 0x7c, 0x07, 0x33, 0x0e, 0x22, 0x4e, 0x64, 0x08, 0xba, 0x3f, 0xd7, 0xb9, 0x18,
	0x6f, 0xe7, 0x5c, 0x66, 0x3b, 0x2b, 0x39, 0xed, 0x7c, 0xb3, 0x94, 0x6c, 0x27, 0xa4, 0x84, 0x45,
	0x97, 0x21, 0x25, 0xb6, 0x0c, 0xc5, 0x18, 0x28, 0x15, 0x9d, 0x56, 0x97, 0x89, 0x68, 0x58, 0x3b,
	0xd9, 0x52, 0x5c, 0x9e, 0x5c, 0x67, 0x48, 0xb9, 0x67, 0x09, 0x9e, 0xb9, 0x65, 0xcf, 0xa3, 0xae,
	0x68, 0xd9, 0xb7, 0x93, 0xf3, 0x6f, 0x21, 0x35, 0xff, 0x58, 0x49, 0x86, 0x7d, 0x08, 0x03, 0xa5,
	0xa6, 0xc3, 0x73, 0xa1, 0x19, 0x26, 0xe9, 0xaf, 0x5d, 0x30, 0x56, 0x4e, 0xbd, 0x92, 0xa1, 0xe1,
	0x83, 0xfb, 0x0c, 0x6e, 0xf8, 0x3c, 0x8f, 0xfe, 0xda, 0x21, 0x6a, 0xef, 0xc0, 0xf0, 0x51, 0xcd,
	0xa3, 0xe9, 0xcf, 0xad, 0x5b, 0xa6, 0x74, 0x30, 0xbb, 0x0c, 0x9e, 0x8b, 0x19, 0xfd, 0x3f, 0x4c,
	0xb1, 0xbd, 0x0e, 0xcb, 0x6b, 0x5e, 0xf7, 0x87, 0x1d, 0x59, 0x4a, 0x76, 0x64, 0x4c, 0x5a, 0x65,
	0xc9, 0xe8, 0x96, 0xac, 0xe4, 0xf1, 0x2e, 0x4d, 0xc7, 0xdf, 0x0b, 0xa5, 0x35, 0xfe, 0x04, 0xf9,
	0x40, 0xff, 0x4b, 0x98, 0xbb, 0x90, 0x99, 0xd0, 0x15, 0xef, 0x8a, 0x52, 0x32, 0xf7, 0x29, 0xb0,
	0x14, 0xcb, 0x89, 0x7c, 0x2f, 0x97, 0x1e, 0x3b, 0x87, 0x94, 0xab, 0x3e, 0x0e, 0x71, 0x13, 0xae,
	0x12, 0xa4, 0x63, 0xc5, 0x76, 0xcb, 0xf3, 0xc9, 0xdd, 0x72, 0x21, 0x65, 0xf6, 0xb7, 0x0a, 0x59,
	0x4d, 0xf2, 0xd3, 0xa1, 0xc3, 0xfe, 0x03, 0xcb, 0xf3, 0x1d, 0x77, 0x7a, 0xda, 0xe9, 0x99, 0xb0,
	0xf1, 0xcb, 0x29, 0x61, 0xcf, 0x18, 0xa2, 0xfc, 0xb5, 0x65, 0x76, 0x99, 0x89, 0x88, 0xfb, 0xfa,
	0x1a, 0x62, 0x76, 0x7d, 0xaf, 0x70, 0x57, 0x5d, 0x4c, 0xb2, 0xf6, 0x36, 0xd9, 0x82, 0x69, 0xe8,
	0xd2, 0xa8, 0xd6, 0x61, 0x50, 0x92, 0xdd, 0xb9, 0x19, 0xec, 0x56, 0x32, 0x67, 0xe4, 0x7c, 0x7e,
	0x57, 0x5d, 0xd1, 0xe9, 0x11, 0x77, 0x73, 0x81, 0xe7, 0x22, 0xb1, 0xef, 0xc8, 0xe4, 0xea, 0x64,
	0x69, 0x85, 0xb9, 0x51, 0x9d, 0x60, 0x10, 0x8a, 0x7d, 0x44, 0x9c, 0xb5, 0xf9, 0x4c, 0xd6, 0x16,
	0x72, 0x58, 0xfb, 0x1e, 0x64, 0xf1, 0xc4, 0xbb, 0x4a, 0x4c, 0xa9, 0xf6, 0xf3, 0xd4, 0x0c, 0x71,
	0x1d, 0x30, 0x97, 0xad, 0x03, 0xf2, 0x54, 0xe3, 0x3f, 0x41, 0x86, 0xdd, 0x91, 0x4e, 0x0d, 0x33,
	0x31, 0xac, 0x8a, 0x6b, 0x81, 0xe4, 0x26, 0x22, 0xa7, 0xcd, 0x2d, 0x52, 0xf5, 0x9d, 0x71, 0x34,
	0xd3, 0x2f, 0x80, 0x0b, 0xb5, 0x57, 0x5d, 0x27, 0x8b, 0xf1, 0xbc, 0x15, 0x1c, 0x65, 0xab, 0x09,
	0xff, 0x33, 0x0f, 0xa4, 0xda, 0x90, 0x66, 0x19, 0xff, 0x42, 0x73, 0x61, 0x2a, 0xa5, 0x62, 0x8c,
	0x8f, 0x26, 0xfe, 0x6c, 0x43, 0x63, 0x64, 0x3c, 0x0b, 0xe6, 0x12, 0x02, 0xc5, 0x92, 0xa9, 0x37,
	0xc9, 0x25, 0x08, 0x71, 0x4a, 0x6b, 0xc5, 0x72, 0x03, 0x41, 0x23, 0x20, 0xb6, 0x94, 0xa5, 0xd0,
	0xe5, 0xff, 0x85, 0x32, 0xb4, 0x3c, 0x74, 0x66, 0x6d, 0x59, 0xfd, 0x3e, 0x75, 0xa9, 0xdd, 0xa3,
	0xa7, 0x1c, 0x60, 0x72, 0x95, 0xcd, 0xb0, 0xb0, 0xa9, 0x40, 0x8d, 0x8d, 0x40, 0x5c, 0x36, 0x95,
	0xa4, 0x6c, 0xd2, 0x0e, 0xca, 0x15, 0x52, 0x19, 0x42, 0x2e, 0x1e, 0xcf, 0xd0, 0x03, 0x80, 0x69,
	0x17, 0xd7, 0xb0, 0x07, 0xb4, 0xbb, 0x63, 0xd9, 0x6d, 0xb1, 0x5b, 0x27, 0x80, 0x02, 0x4c, 0x84,
	0x00, 0x44, 0x5d, 0x8b, 0x12, 0x80, 0xbc, 0x2f, 0x90, 0x79, 0x93, 0x1e, 0x5b, 0x3d, 0x61, 0xd1,
	0x73, 0x28, 0xec, 0x87, 0xfa, 0x49, 0x86, 0x4f, 0xe3, 0xc4, 0xc3, 0xe7, 0x19, 0x59, 0x4b, 0xe4,
	0xc5, 0x87, 0xdd, 0x70, 0x6f, 0x34, 0xf6, 0xa7, 0x19, 0x2e, 0x13, 0x86, 0xb5, 0x6c, 0x63, 0xc8,
	0x9d, 0x26, 0x08, 0x08, 0xb9, 0x95, 0x43, 0xb9, 0x35, 0xc9, 0x82, 0x6f, 0x8d, 0xa8, 0x58, 0xf2,
	0x2b, 0xba, 0x00, 0xb5, 0x1f, 0x97, 0xc8, 0xb5, 0xcc, 0xaa, 0x1f, 0x3b, 0xce, 0x43, 0xc7, 0x1e,
	0xbc, 0x53, 0x95, 0xb3, 0x7e, 0xf1, 0x9d, 0x71, 0x97, 0xcb, 0x89, 0x0f, 0x00, 0xc2, 0x26, 0x2f,
	0x57, 0xd8, 0xef, 0x27, 0x67, 0x5d, 0x6a, 0x98, 0x5d, 0xcb, 0xde, 0x77, 0x9e, 0x75, 0x47, 0xc6,
	0xb3, 0x70, 0xcf, 0x72, 0x86, 0xbd, 0x68, 0x33, 0x3c, 0x76, 0xe1, 0x07, 0x88, 0x0a, 0xa4, 0x18,
	0xd6, 0x17, 0xb4, 0x38, 0x4e, 0x96, 0x78, 0x48, 0x3e, 0x20, 0xbe, 0x4e, 0x1a, 0xe8, 0x34, 0xe2,
	0xbe, 0x14, 0x1c, 0x32, 0x75, 0xc4, 0xe1, 0xc9, 0x02, 0x95, 0xcc, 0x8d, 0xbc, 0x81, 0x07, 0x09,
	0x56, 0x0d, 0x1d, 0x9e, 0x99, 0x9a, 0x82, 0x84, 0x48, 0xcc, 0x42, 0x20, 0x89, 0x14, 0x49, 0xed,
	0xbb, 0xa5, 0xc4, 0x5c, 0xda, 0xf1, 0x06, 0x42, 0xf3, 0xc5, 0x7c, 0xb4, 0x4a, 0xd2, 0x47, 0x1b,
	0xe6, 0xac, 0x0a, 0x45, 0x10, 0xc0, 0x4c, 0x25, 0xe3, 0x33, 0xa4, 0x94, 0xf2, 0x1c, 0x83, 0x10,
	0x13, 0xcf, 0x69, 0x9d, 0x93, 0xe4, 0xb4, 0xe2, 0xac, 0xa8, 0x84, 0x39, 0xa7, 0xa6, 0xc8, 0x39,
	0x15, 0xb2, 0x44, 0x20, 0xcc, 0x74, 0x5d, 0x88, 0x66, 0xba, 0x86, 0x5a, 0xa0, 0x9a, 0x5c, 0x33,
	0x71, 0x5f, 0x50, 0x8b, 0xee, 0x0b, 0x82, 0x19, 0x43, 0x72, 0x34, 0xd7, 0xdf, 0xe1, 0x61, 0x9d,
	0xfb, 0xd4, 0xdf, 0x35, 0x5c, 0xdf, 0xea, 0x59, 0x63, 0xc3, 0xc6, 0xf0, 0x83, 0xd3, 0xef, 0x77,
	0xa8, 0x38, 0xf1, 0xc1, 0xa1, 0x70, 0xd6, 0x97, 0xa2, 0xb3, 0xfe, 0x32, 0xa9, 0x8d, 0xd9, 0xd7,
	0x10, 0x04, 0xe4, 0x8b, 0x42, 0x80, 0x98, 0xb1, 0x46, 0x87, 0x3c, 0x55, 0x62, 0x3c, 0x35, 0x88,
	0x72, 0xc4, 0x03, 0x8a, 0xca, 0x11, 0x1b, 0x02, 0xc1, 0xee, 0xa6, 0xa2, 0xcf, 0xc5, 0x17, 0xc0,
	0x3c, 0xa3, 0xf1, 0xbb, 0x0a, 0x39, 0x9b, 0xe2, 0x2f, 0x6e, 0x8d, 0x2a, 0x49, 0x6b, 0x34, 0x6c,
	0x52, 0x29, 0xd6, 0xa4, 0xac, 0x8d, 0xdc, 0x73, 0x59, 0xa9, 0xbf, 0x8e, 0x26, 0x53, 0x2a, 0x94,
	0xe1, 0x6d, 0x4c, 0x77, 0xbc, 0x81, 0x97, 0x34, 0x17, 0x64, 0xdb, 0xae, 0x11, 0xd0, 0x41, 0x1e,
	0x6c, 0x45, 0xe7, 0x50, 0x84, 0x99, 0x72, 0x8c, 0x99, 0x42, 0x3b, 0xf6, 0x09, 0x9c, 0x0c, 0x09,
	0xdb, 0xb4, 0xe9, 0x8c, 0x46, 0x8e, 0x8d, 0x9a, 0xd2, 0xcb, 0x5c, 0x94, 0xf0, 0xf0, 0x82, 0x6d,
	0xb7, 0x4d, 0x8f, 0x37, 0x26, 0x80, 0x8b, 0x99, 0x8f, 0x6f, 0x2a, 0x09, 0x3d, 0x3e, 0x63, 0xce,
	0xae, 0x11, 0xf2, 0x38, 0xd0, 0x54, 0xe2, 0x24, 0x40, 0x88, 0x51, 0xaf, 0x91, 0xfa, 0x8e, 0xf1,
	0x4c, 0x07, 0x2d, 0x15, 0x08, 0x22, 0x8a, 0x0a, 0xf3, 0xcd, 0xe7, 0x22, 0xf9, 0xe6, 0xda, 0xb7,
	0x94, 0xe0, 0x14, 0x54, 0x74, 0xc9, 0x50, 0xb7, 0x92, 0xcb, 0x0c, 0xc6, 0x0f, 0xd7, 0x24, 0x69,
	0x99, 0xd1, 0xbc, 0xda, 0x04, 0x4f, 0x1f, 0x0f, 0xce, 0x2f, 0xec, 0x78, 0x62, 0x47, 0xda, 0x4c,
	0x67, 0x32, 0xf2, 0x70, 0x7b, 0x84, 0x56, 0xb3, 0xc9, 0x8a, 0xa4, 0x59, 0x9e, 0xba, 0x47, 0xce,
	0xf5, 0xd2, 0xf8, 0x9c, 0x6c, 0xeb, 0x14, 0xad, 0x2e, 0x2b, 0x40, 0xfb, 0xc1, 0x3c, 0x59, 0xe0,
	0xed, 0x60, 0x36, 0x35, 0xef, 0x82, 0xb2, 0x5e, 0x6a, 0xe7, 0xc6, 0x15, 0xdf, 0xb0, 0xfc, 0x83,
	0x76, 0x2c, 0x50, 0x8f, 0x7d, 0x85, 0x4f, 0x91, 0x8c, 0x83, 0x08, 0x06, 0xfa, 0x8a, 0x1f, 0x41,
	0x62, 0x04, 0x15, 0xde, 0x57, 0x21, 0x8a, 0xf5, 0xd5, 0x36, 0x2c, 0x81, 0x5c, 0x63, 0x6e, 0x8b,
	0x90, 0xc5, 0xa3, 0x89, 0x08, 0x3e, 0x95, 0xb9, 0xb5, 0xb7, 0x13, 0x84, 0x2c, 0x30, 0xee, 0x14,
	0x22, 0xb0, 0x9e, 0x20, 0x3c, 0xc1, 0xbd, 0xd6, 0x51, 0x14, 0xa4, 0x20, 0xe0, 0x9e, 0x03, 0xc3,
	0x07, 0x1c, 0x62, 0xba, 0x68, 0xd7, 0x81, 0x13, 0x40, 0x10, 0xb1, 0x60, 0xcf, 0xe1, 0xf9, 0x96,
	0x46, 0xe4, 0x7c, 0x0b, 0xe4, 0x55, 0x38, 0x6d, 0x93, 0xc7, 0x0d, 0xe0, 0x99, 0xb5, 0x73, 0xd7,
	0xf7, 0x78, 0xc8, 0x80, 0x3d, 0x46, 0xcf, 0x78, 0x2d, 0xc5, 0xcf, 0x78, 0x45, 0x4f, 0x6d, 0x2d,
	0xc7, 0x4f, 0x6d, 0xa9, 0x1a, 0x3f, 0x86, 0xc6, 0xc3, 0x19, 0x10, 0x67, 0xaa, 0xe8, 0x31, 0x5c,
	0x70, 0x18, 0x4e, 0x95, 0x1f, 0x86, 0x3b, 0x97, 0x71, 0x18, 0x6e, 0x25, 0x75, 0x18, 0xce, 0xb4,
	0x8c, 0x2d, 0xc3, 0x37, 0x20, 0xc4, 0x04, 0x87, 0xe1, 0x38, 0x82, 0x49, 0x31, 0x72, 0xf0, 0xad,
	0x79, 0x21, 0xff, 0x2c, 0xdc, 0x45, 0xf9, 0x59, 0xb8, 0xb6, 0xd9, 0x6c, 0xc6, 0xf2, 0x15, 0x57,
	0x48, 0x65, 0xcf, 0xa2, 0x4f, 0xbd, 0xe6, 0x25, 0x94, 0x26, 0x00, 0x50, 0x92, 0x69, 0xe1, 0xda,
	0xdb, 0x42, 0x69, 0x08, 0x18, 0xce, 0x0c, 0x62, 0xe0, 0x66, 0x15, 0x03, 0x37, 0xfc, 0xfc, 0x41,
	0x8b, 0x54, 0x75, 0x7e, 0xe8, 0xab, 0x79, 0x19, 0xd8, 0x0a, 0x60, 0x26, 0x9d, 0x27, 0x13, 0xcb,
	0x6c, 0x5e, 0xc1, 0x8c, 0x2e, 0xf6, 0xcc, 0x46, 0x27, 0x4f, 0xb7, 0x61, 0xb5, 0xac, 0xe1, 0xe8,
	0x0c, 0x31, 0xec, 0x3d, 0xda, 0xf8, 0xf0, 0xfe, 0x2a, 0xbe, 0x0f, 0x31, 0xa1, 0x1e, 0xb9, 0x16,
	0xd5, 0x23, 0xff, 0x50, 0x82, 0x5d, 0x58, 0xa8, 0x47, 0xc1, 0x9f, 0xf8, 0x10, 0xf5, 0x5a, 0xbe,
	0x4e, 0x97, 0x2e, 0x44, 0x31, 0xab, 0xbf, 0x9c, 0xb4, 0xfa, 0x67, 0x2d, 0x47, 0xb0, 0xb2, 0x56,
	0xc4, 0xca, 0xba, 0x43, 0xea, 0xf4, 0x98, 0xda, 0xfe, 0xb6, 0x35, 0xf4, 0xf9, 0xb1, 0xba, 0xfa,
	0xdd, 0x0f, 0x64, 0xe9, 0x0a, 0xd1, 0xf0, 0x7b, 0xe1, 0x27, 0x7a, 0xf4, 0x7b, 0x88, 0xa0, 0x31,
	0x1a, 0x8f, 0x1f, 0xc5, 0xe3, 0x90, 0x7a, 0x9e, 0xcc, 0x73, 0x3b, 0xb0, 0x1a, 0xdd, 0x5d, 0x31,
	0xb4, 0x65, 0x87, 0x11, 0xbc, 0xca, 0x48, 0x18, 0x45, 0x68, 0x66, 0x90, 0xa8, 0x99, 0x51, 0x64,
	0x0b, 0xa0, 0xfd, 0x63, 0x89, 0xb4, 0xb2, 0x1b, 0x9b, 0x61, 0x3f, 0xab, 0x64, 0xee, 0xb3, 0x8e,
	0x65, 0x73, 0xf3, 0x19, 0x9e, 0xa1, 0x0d, 0xd4, 0x38, 0xa6, 0x22, 0x58, 0x0f, 0x00, 0xe3, 0x0f,
	0x43, 0x0c, 0xc2, 0xdf, 0x85, 0x10, 0x9b, 0xd6, 0xfb, 0x86, 0xcd, 0x3d, 0xfc, 0xec, 0x91, 0x7d,
	0x3f, 0xb1, 0x19, 0x0e, 0x43, 0x6d, 0x08, 0xb0, 0x9a, 0x0e, 0xad, 0x9e, 0x08, 0x85, 0xc0, 0x33,
	0xd8, 0x15, 0x36, 0x60, 0x51, 0x4b, 0x71, 0x88, 0x4d, 0xd5, 0xb1, 0xeb, 0x8c, 0x1c, 0x7e, 0xb0,
	0xa9, 0xaa, 0x0b, 0x10, 0x37, 0x49, 0xf0, 0x82, 0xab, 0x26, 0x84, 0x58, 0xe9, 0x90, 0x76, 0xcb,
	0x55, 0x13, 0x7b, 0x66, 0xa5, 0x78, 0xd4, 0xf7, 0x2d, 0x7b, 0xc0, 0x23, 0x69, 0x02, 0x8c, 0xe4,
	0x98, 0x2c, 0x46, 0x73, 0x4c, 0x58, 0x29, 0xd4, 0xb4, 0x30, 0xac, 0x59, 0xd5, 0xe1, 0x19, 0x6b,
	0x1c, 0x52, 0x9f, 0x82, 0x8e, 0x82, 0x1a, 0x19, 0xa4, 0xfd, 0x7f, 0x74, 0x32, 0xb6, 0x47, 0x63,
	0xc7, 0xf5, 0x37, 0x03, 0x2f, 0xec, 0x29, 0x37, 0xac, 0x2a, 0x99, 0x0b, 0x9c, 0x70, 0x35, 0x1d,
	0x9e, 0x8b, 0x19, 0x2a, 0x3f, 0xc6, 0x19, 0xc6, 0xf4, 0xc1, 0x86, 0x21, 0xc2, 0x5d, 0x10, 0x80,
	0x79, 0x27, 0x5c, 0x33, 0x1a, 0x69, 0xec, 0xb3, 0x67, 0x93, 0xaf, 0x7c, 0xb8, 0x8a, 0xc5, 0x70,
	0x33, 0x5d, 0xb8, 0xab, 0xa4, 0x36, 0xf1, 0xad, 0x61, 0x17, 0x62, 0xd0, 0x3c, 0xf6, 0xc3, 0x10,
	0xa0, 0x46, 0xc2, 0x85, 0x7c, 0x03, 0xca, 0xd4, 0xad, 0xc1, 0x81, 0xef, 0x71, 0xbf, 0x54, 0xe6,
	0x42, 0x1e, 0xa5, 0xd5, 0x65, 0x05, 0x14, 0x33, 0x99, 0xbf, 0x54, 0x12, 0x26, 0xf3, 0xf6, 0x64,
	0x38, 0x2c, 0xe0, 0xe2, 0xca, 0xf1, 0x42, 0xc6, 0xa5, 0x50, 0xce, 0x36, 0x8d, 0xe7, 0x4e, 0xb2,
	0xab, 0xaf, 0x9c, 0x74, 0x57, 0xaf, 0xfe, 0x17, 0xb2, 0x30, 0xf2, 0x06, 0x3b, 0xd4, 0x37, 0xb8,
	0x86, 0xbb, 0x2c, 0x13, 0xa2, 0xbf, 0x83, 0x34, 0xba, 0x20, 0xd6, 0xbe, 0x82, 0xa1, 0xa0, 0xb8,
	0x2c, 0xf6, 0xee, 0xfe, 0x07, 0x95, 0xc6, 0x13, 0x52, 0x8f, 0xe0, 0x99, 0x10, 0xd0, 0xbb, 0x27,
	0x84, 0x80, 0x10, 0xc7, 0x87, 0x87, 0x72, 0x39, 0x84, 0xf8, 0xc8, 0xd6, 0x99, 0x43, 0xda, 0x11,
	0x26, 0x59, 0x3d, 0xe3, 0x2a, 0x04, 0x4e, 0x97, 0x58, 0xf6, 0xe1, 0x29, 0x17, 0xc7, 0x42, 0xfa,
	0xe2, 0xef, 0xcb, 0x81, 0x65, 0x1f, 0x9b, 0x20, 0xf2, 0xe5, 0xe1, 0x06, 0x59, 0x3c, 0xb6, 0xe8,
	0x53, 0xe1, 0x1d, 0xf1, 0xf8, 0x3a, 0xd1, 0x60, 0x48, 0xb1, 0x4d, 0x63, 0x44, 0x1e, 0xb5, 0xcd,
	0x90, 0x08, 0xd7, 0x8d, 0x06, 0x43, 0x06, 0x44, 0x57, 0x08, 0xe1, 0x44, 0xcc, 0xd0, 0xe2, 0xd1,
	0x62, 0xa4, 0x60, 0xc6, 0x96, 0x28, 0xc3, 0xf3, 0x21, 0xea, 0xec, 0xf1, 0xf5, 0x04, 0xca, 0xe8,
	0x70, 0x1c, 0xd3, 0x1c, 0x40, 0x34, 0xb0, 0xfa, 0x1e, 0x5f, 0x5c, 0xaa, 0x0c, 0x71, 0xdf, 0xea,
	0x87, 0x15, 0x0c, 0x8c, 0x11, 0xf5, 0x44, 0x1e, 0x07, 0xbc, 0x65, 0x08, 0xf5, 0x2a, 0xa9, 0xc3,
	0x6b, 0xcb, 0x1e, 0x5a, 0x36, 0xe5, 0xeb, 0x0d, 0x7c, 0xd1, 0x06, 0x0c, 0x23, 0xa0, 0xa3, 0x7d,
	0x6a, 0x76, 0x87, 0x96, 0x7d, 0xe8, 0xf1, 0x75, 0x87, 0x00, 0x8a, 0xf5, 0x09, 0x54, 0x30, 0xb1,
	0x03, 0xc5, 0xc5, 0x1d, 0x2f, 0x80, 0x01, 0xcd, 0x15, 0x46, 0xe5, 0x21, 0x1e, 0x8e, 0x0b, 0x11,
	0x8f, 0xca, 0x83, 0x3e, 0xbe, 0x4a, 0xea, 0x63, 0xcb, 0x0e, 0x1c, 0x4d, 0x3c, 0x2b, 0x6b, 0x6c,
	0xd9, 0xc2, 0x0c, 0x7d, 0x99, 0x9c, 0x65, 0x9d, 0x3c, 0xa0, 0x5d, 0x48, 0x3d, 0xc1, 0x73, 0x24,
	0xb8, 0x40, 0x2d, 0xe1, 0x0b, 0x48, 0xf7, 0x6f, 0xb3, 0xb5, 0x4d, 0x70, 0x3b, 0x76, 0x86, 0x43,
	0x8f, 0xaf, 0x57, 0xc0, 0xed, 0x2e, 0x43, 0x68, 0x7f, 0x84, 0xf9, 0x1f, 0x22, 0xd8, 0xec, 0x0c,
	0x06, 0x43, 0xca, 0xd7, 0xa7, 0xd3, 0xc5, 0x30, 0x9b, 0x64, 0x81, 0xda, 0xc6, 0xfe, 0x30, 0xc8,
	0x81, 0x12, 0xe0, 0xf3, 0xf1, 0x01, 0x8c, 0x20, 0x61, 0x23, 0x34, 0x13, 0x3d, 0x56, 0x6c, 0xd0,
	0x2a, 0x3c, 0x65, 0x5c, 0xd1, 0x23, 0x98, 0xd9, 0x93, 0x20, 0xcf, 0x6b, 0xfd, 0x27, 0x0a, 0x69,
	0x26, 0x5d, 0xe5, 0xac, 0x8f, 0x5e, 0x33, 0x46, 0xb3, 0x04, 0x14, 0x67, 0xb7, 0x24, 0xcb, 0xf9,
	0x90, 0x7a, 0x1d, 0x78, 0x66, 0x1c, 0xab, 0x81, 0x47, 0x3c, 0x03, 0xb8, 0x98, 0x88, 0xbe, 0x8f,
	0x91, 0xb2, 0xe8, 0x81, 0x84, 0x77, 0x7b, 0x93, 0xbf, 0x1c, 0xa6, 0xec, 0xf2, 0xb1, 0xbb, 0x6e,
	0x8b, 0x68, 0xcc, 0x26, 0xe6, 0x4f, 0x8a, 0x8b, 0x3b, 0x82, 0x76, 0x0b, 0x30, 0xb3, 0x83, 0xd7,
	0x08, 0x79, 0x34, 0xc6, 0xec, 0xcb, 0xa0, 0xc5, 0x11, 0x0c, 0xfb, 0x0e, 0x2e, 0xb4, 0x11, 0xd9,
	0x9d, 0x1c, 0xd2, 0xbe, 0xaa, 0x10, 0xc2, 0x2f, 0x62, 0xd1, 0xc7, 0xa3, 0xb8, 0x15, 0xa4, 0x24,
	0xad, 0xa0, 0xac, 0xca, 0x97, 0x49, 0xd9, 0xa5, 0x47, 0xe2, 0x5a, 0x1e, 0x97, 0x1e, 0x31, 0x06,
	0xdc, 0xf1, 0x48, 0xa7, 0xde, 0x98, 0x5f, 0x98, 0x22, 0x40, 0xf5, 0x2a, 0x29, 0x9b, 0xfb, 0x19,
	0x02, 0x62, 0x6f, 0xb4, 0x5f, 0x53, 0xf8, 0x4e, 0x56, 0xb4, 0xe9, 0x02, 0x99, 0xd7, 0x63, 0x19,
	0xbb, 0x08, 0xa9, 0x1f, 0x26, 0x73, 0x23, 0xb6, 0x64, 0x95, 0x0a, 0x2c, 0x59, 0x40, 0x09, 0xd3,
	0xd5, 0xc5, 0x43, 0xf4, 0x28, 0x21, 0x01, 0xc2, 0x6d, 0x09, 0x70, 0x41, 0x13, 0x0f, 0xbb, 0x03,
	0xa0, 0xfd, 0x0c, 0x85, 0xc3, 0xac, 0xc8, 0xd3, 0x0b, 0xe7, 0x02, 0x99, 0xef, 0xc5, 0x0e, 0xdb,
	0x21, 0xc4, 0x33, 0xc2, 0xdb, 0xd1, 0x8c, 0xf0, 0xb6, 0x29, 0x2e, 0xf3, 0x58, 0xef, 0xf5, 0x22,
	0x76, 0x62, 0x14, 0xa5, 0xde, 0x24, 0x8b, 0x28, 0xcb, 0xc9, 0xd0, 0x07, 0x56, 0xd0, 0x58, 0x8c,
	0x23, 0x85, 0x98, 0x17, 0x32, 0xc5, 0xfc, 0x53, 0x10, 0xb3, 0xe0, 0x6d, 0xef, 0xee, 0xbb, 0x84,
	0xbb, 0xcb, 0xa4, 0x16, 0x30, 0xc2, 0xef, 0x74, 0x09, 0x11, 0xb3, 0xb9, 0x7a, 0xb3, 0x04, 0x2a,
	0x13, 0x32, 0xd0, 0x8d, 0xe9, 0x88, 0x87, 0x84, 0xdf, 0x71, 0xbe, 0x02, 0x33, 0xa1, 0x12, 0x35,
	0x13, 0x12, 0xdc, 0xce, 0xcf, 0xe0, 0x76, 0x21, 0xc9, 0x6d, 0x93, 0x2c, 0x38, 0x63, 0xdf, 0x72,
	0x6c, 0x0f, 0x16, 0xe6, 0x86, 0x2e, 0x40, 0x21, 0x87, 0x5a, 0xa6, 0x1c, 0xf6, 0xf8, 0x1c, 0x12,
	0x43, 0x37, 0x6b, 0x0e, 0x45, 0x66, 0x44, 0x29, 0x63, 0x46, 0x94, 0xa3, 0x33, 0xe2, 0x6b, 0x38,
	0x23, 0x74, 0xda, 0x3b, 0x7e, 0x9e, 0xea, 0xa2, 0x45, 0xaa, 0x6c, 0x82, 0x6e, 0x85, 0x17, 0x2c,
	0x05, 0xf0, 0x6c, 0x85, 0x21, 0x78, 0x15, 0x8d, 0x7a, 0x5e, 0xbc, 0x7e, 0x11, 0xad, 0x05, 0x6e,
	0x87, 0xe0, 0xc9, 0x0a, 0x1b, 0xe5, 0x1f, 0x3a, 0xaa, 0x94, 0x98, 0xa3, 0xea, 0x32, 0xa9, 0x6d,
	0x27, 0x37, 0x91, 0xdb, 0x51, 0x79, 0x48, 0x8f, 0xdd, 0x5e, 0x25, 0xe5, 0xad, 0xfd, 0x0c, 0xfb,
	0x94, 0xbd, 0xd1, 0xbe, 0x0d, 0x0b, 0xf3, 0x78, 0x38, 0x95, 0xb5, 0x85, 0x3b, 0x10, 0x95, 0xd0,
	0x81, 0xd8, 0x22, 0xd5, 0x5d, 0x9e, 0x7a, 0x2c, 0x42, 0x56, 0x02, 0x8e, 0x85, 0xb3, 0xca, 0x89,
	0x70, 0x56, 0x93, 0x2c, 0xdc, 0xe3, 0x02, 0xe2, 0xd1, 0x40, 0x0e, 0xb2, 0x96, 0xdf, 0x73, 0xdd,
	0x8e, 0xef, 0x72, 0x3f, 0x11, 0x87, 0xb4, 0x1f, 0x28, 0xa4, 0xce, 0xd4, 0xf4, 0x9e, 0xe3, 0x53,
	0x7e, 0x8d, 0x8c, 0x34, 0x89, 0x40, 0x9c, 0xc6, 0xc2, 0x8b, 0xee, 0xe0, 0x19, 0x5c, 0x3d, 0x98,
	0x8d, 0x5d, 0x8e, 0x4e, 0xa5, 0xc8, 0xa0, 0x9f, 0xbb, 0x56, 0xbe, 0x55, 0x0b, 0x07, 0x7d, 0x13,
	0x53, 0x44, 0x5e, 0xa5, 0x53, 0xae, 0x38, 0x04, 0xc8, 0x8a, 0xf7, 0x7c, 0x67, 0x2c, 0x72, 0xc6,
	0xd9, 0x73, 0xb1, 0xe4, 0x8d, 0xff, 0x4a, 0x16, 0xc3, 0xe6, 0x8f, 0x87, 0xd3, 0x8c, 0xeb, 0x57,
	0x82, 0xf1, 0xc1, 0xa3, 0x5c, 0x38, 0x3e, 0xbe, 0xa5, 0x90, 0xb3, 0xf7, 0xa9, 0xcf, 0x4c, 0x4b,
	0x1c, 0x61, 0xde, 0xf3, 0x13, 0x81, 0x60, 0x74, 0x2e, 0xce, 0x68, 0x21, 0xfb, 0x62, 0x9d, 0x9c,
	0x4b, 0x36, 0xeb, 0xa4, 0xac, 0xfd, 0xac, 0x4c, 0x96, 0xd9, 0xf2, 0x99, 0xdc, 0x0b, 0x6d, 0x47,
	0xf7, 0x42, 0xdb, 0x62, 0x2f, 0xb4, 0x27, 0xdb, 0x0b, 0xed, 0x25, 0xf6, 0x42, 0x1d, 0xd9, 0x5e,
	0xa8, 0x93, 0xd8, 0x0b, 0x75, 0x52, 0x7b, 0xa1, 0x4e, 0x74, 0x2f, 0xd4, 0x91, 0xed, 0x85, 0x3a,
	0x89, 0xbd, 0x50, 0x27, 0xb9, 0x17, 0xea, 0x44, 0xf6, 0x42, 0x9d, 0xd4, 0x5e, 0xa8, 0x13, 0xdd,
	0x0b, 0x75, 0xd2, 0x7b, 0xa1, 0x4e, 0x6c, 0x2f, 0x74, 0x2f, 0xbd, 0x17, 0xba, 0x17, 0xdb, 0x0b,
	0x75, 0xc2, 0xed, 0x07, 0x09, 0x2b, 0x80, 0xed, 0x07, 0xfb, 0x1e, 0x8d, 0xbe, 0x6e, 0xc4, 0x29,
	0x47, 0x10, 0x05, 0xdb, 0x97, 0xeb, 0xa4, 0xd1, 0x0e, 0x37, 0x4b, 0xe2, 0x88, 0x4a, 0xbd, 0x1d,
	0xec, 0x96, 0x3c, 0x46, 0xb2, 0x1b, 0x6e, 0x97, 0x3c, 0xbe, 0x11, 0xaa, 0xef, 0x06, 0xfb, 0x25,
	0x68, 0xc5, 0x93, 0x70, 0x47, 0x86, 0x81, 0x85, 0xda, 0x13, 0xb1, 0x23, 0xd3, 0xde, 0x2a, 0x91,
	0x35, 0x9e, 0xcb, 0xe8, 0x6f, 0xd1, 0xbe, 0x31, 0x19, 0xc6, 0xba, 0x99, 0x8d, 0x61, 0x88, 0x25,
	0x08, 0xc5, 0x17, 0x68, 0xf6, 0x18, 0x8e, 0xd5, 0xb2, 0x99, 0xba, 0x73, 0x30, 0x76, 0x65, 0xd0,
	0x7a, 0x3a, 0x8b, 0x6e, 0x3d, 0x34, 0xaf, 0x37, 0x48, 0x1d, 0xab, 0xed, 0xb2, 0xc5, 0x92, 0x2b,
	0xbf, 0xeb, 0x52, 0x23, 0x2e, 0xd6, 0x3c, 0x82, 0x10, 0x1b, 0x7c, 0xea, 0x45, 0x0c, 0x43, 0x75,
	0x83, 0xa4, 0x2e, 0x11, 0x6c, 0xba, 0x48, 0x16, 0xb6, 0x79, 0x36, 0x59, 0xec, 0x42, 0x22, 0x75,
	0x8d, 0xd4, 0xb7, 0x79, 0x36, 0x93, 0xc8, 0x41, 0x98, 0x8b, 0xaa, 0xe8, 0xe0, 0xa6, 0xcb, 0x6a,
	0xce, 0x4d, 0x97, 0x1f, 0xcf, 0x17, 0xa0, 0x37, 0xce, 0x3a, 0x64, 0xa6, 0xfd, 0xb9, 0x42, 0x2e,
	0x3e, 0xc0, 0xd3, 0xb0, 0xb0, 0xf9, 0xec, 0x0c, 0x9d, 0xa7, 0x3b, 0x8e, 0x09, 0xba, 0xf3, 0x22,
	0x59, 0xd8, 0x3c, 0xb0, 0x87, 0x91, 0x0c, 0x38, 0x06, 0x22, 0x33, 0x4c, 0x62, 0xe1, 0xa5, 0x92,
	0xf3, 0x0c, 0x44, 0x3d, 0xd1, 0xa1, 0x3d, 0xc7, 0x36, 0x45, 0x4e, 0x87, 0x00, 0xa3, 0xfc, 0xcf,
	0xe5, 0xf1, 0x5f, 0xc9, 0xe4, 0x7f, 0x3e, 0x87, 0xff, 0x9d, 0x0c, 0x26, 0xbc, 0x31, 0x6b, 0x12,
	0x57, 0x3a, 0x62, 0xe3, 0xc2, 0x41, 0xf6, 0x06, 0x37, 0x96, 0x1e, 0x57, 0x81, 0x02, 0xd4, 0x7e,
	0x57, 0x21, 0x97, 0x62, 0xe5, 0x05, 0x27, 0xb2, 0x4e, 0x27, 0x96, 0x8b, 0x64, 0xa1, 0xed, 0x75,
	0x3d, 0x6b, 0x60, 0x8b, 0xe4, 0xc0, 0xb6, 0xc7, 0xca, 0x3c, 0xb5, 0x54, 0xb4, 0x4e, 0x66, 0x03,
	0xd3, 0x2c, 0x57, 0x43, 0x96, 0xe1, 0x92, 0x90, 0xf1, 0x70, 0xba, 0x31, 0xf5, 0x29, 0x67, 0x3a,
	0x44, 0x68, 0xbf, 0xa3, 0x90, 0x2b, 0x31, 0x4f, 0x04, 0xcf, 0x47, 0x79, 0x60, 0x99, 0x26, 0xb5,
	0x4f, 0xcd, 0xba, 0xe0, 0x30, 0x7e, 0x83, 0x6b, 0x64, 0xa6, 0xcc, 0x25, 0x67, 0x4a, 0xdb, 0xeb,
	0x1e, 0x58, 0xa6, 0xb8, 0x61, 0x71, 0xbe, 0xed, 0x3d, 0xb0, 0xe0, 0x82, 0xce, 0xbc, 0xd6, 0xbd,
	0x0d, 0xbe, 0x7f, 0x4f, 0x21, 0x2b, 0x9d, 0xc0, 0xa5, 0xb1, 0x61, 0xd8, 0xa7, 0x9f, 0x00, 0x99,
	0xec, 0x5e, 0x22, 0xd5, 0x0d, 0xc3, 0xee, 0x8e, 0x84, 0x29, 0x53, 0xd5, 0x17, 0x78, 0x45, 0xe1,
	0x08, 0xaf, 0xe4, 0x8c, 0xf0, 0xc7, 0xb2, 0x26, 0x9e, 0xe0, 0xae, 0x93, 0xfd, 0x49, 0xbf, 0x1f,
	0xe7, 0x7c, 0xd2, 0xef, 0x6b, 0x1f, 0x21, 0xcd, 0xcd, 0x07, 0xde, 0x7d, 0x0a, 0x27, 0x41, 0x1e,
	0x3d, 0xb5, 0xc3, 0x43, 0xbb, 0x47, 0xd1, 0x0e, 0x8a, 0x9d, 0x20, 0xd5, 0x7e, 0x5d, 0x09, 0xae,
	0x3e, 0xdc, 0x70, 0x2d, 0xda, 0x3f, 0x85, 0x98, 0xfe, 0x33, 0xb9, 0x10, 0xdc, 0x00, 0xdc, 0x75,
	0xdc, 0x6e, 0x78, 0xae, 0x0b, 0xe7, 0xc7, 0x4a, 0xf0, 0xf6, 0x91, 0x1b, 0x5e, 0x06, 0x2c, 0xbf,
	0x10, 0xf1, 0x51, 0x16, 0x0f, 0xde, 0x58, 0xfd, 0x08, 0xa9, 0xb0, 0xa6, 0x88, 0xdb, 0xef, 0xae,
	0x64, 0xc6, 0x25, 0x18, 0x1f, 0x3a, 0xd2, 0x6a, 0x9f, 0x23, 0xaa, 0xce, 0x4f, 0x28, 0x06, 0x79,
	0x92, 0x47, 0x89, 0xd5, 0x45, 0x96, 0x94, 0xb5, 0x3b, 0x34, 0xfc, 0xbe, 0xe3, 0x8e, 0xf8, 0x31,
	0x90, 0x00, 0x46, 0xf3, 0x1f, 0x0e, 0x40, 0xa2, 0x35, 0xcf, 0x21, 0x08, 0xbe, 0xd3, 0x67, 0x22,
	0xb1, 0x1e, 0x9e, 0x35, 0x3d, 0x5d, 0xf9, 0xdb, 0xbe, 0xd1, 0x66, 0x9d, 0x2c, 0xbd, 0xe2, 0x58,
	0xf6, 0xc6, 0xf4, 0x75, 0xb0, 0x9d, 0xf3, 0x2e, 0x96, 0xbe, 0x40, 0xe6, 0x5f, 0x0f, 0x37, 0x24,
	0x35, 0x9d, 0x43, 0xda, 0xd9, 0x44, 0x11, 0xde, 0x58, 0xfb, 0xfd, 0x12, 0x69, 0x3c, 0xb4, 0x8e,
	0x69, 0xc7, 0x37, 0x5c, 0x5f, 0x47, 0x0f, 0xcb, 0x06, 0x1d, 0x58, 0xf6, 0xba, 0x48, 0xc9, 0x12,
	0x60, 0xd4, 0x79, 0x54, 0x8a, 0x3b, 0x8f, 0x5a, 0xa4, 0xca, 0xcb, 0xf0, 0x85, 0xf1, 0x2f, 0x60,
	0xf1, 0x2e, 0x7a, 0x97, 0xa4, 0x80, 0xc5, 0x3b, 0xd6, 0x6a, 0x71, 0x6f, 0xa3, 0x80, 0xc5, 0x3b,
	0xdd, 0x71, 0x46, 0x22, 0x6c, 0x25, 0x60, 0xf1, 0x6e, 0xf7, 0xb0, 0x2d, 0x0e, 0x2c, 0x05, 0xb0,
	0x78, 0xc7, 0xd6, 0x71, 0x7e, 0x12, 0x25, 0x80, 0xc5, 0x3b, 0x70, 0xb1, 0xd5, 0xc2, 0x77, 0xe0,
	0x62, 0xe3, 0xef, 0xda, 0x3d, 0x7e, 0x80, 0x90, 0xbf, 0x63, 0xb0, 0xe6, 0x44, 0x65, 0xe4, 0x8d,
	0xd5, 0x75, 0x12, 0x76, 0x1b, 0x48, 0xe9, 0xcc, 0xdd, 0x1b, 0xa9, 0x41, 0x09, 0xc2, 0x81, 0x26,
	0x0b, 0xd2, 0x68, 0x67, 0x5f, 0x26, 0x35, 0x6e, 0x7e, 0xb9, 0x43, 0xd1, 0xd7, 0x01, 0x42, 0xfb,
	0x1c, 0xa9, 0x63, 0x85, 0xce, 0x98, 0xf7, 0x49, 0x86, 0xdb, 0x2e, 0x2a, 0xc1, 0x92, 0x5c, 0x82,
	0x79, 0xbd, 0x12, 0xec, 0xc9, 0x38, 0xb7, 0x30, 0x4a, 0xfa, 0x91, 0xca, 0xbd, 0xb1, 0xfa, 0xdf,
	0x98, 0x3e, 0xf6, 0x4f, 0xca, 0xaa, 0xf8, 0x86, 0xb5, 0x1d, 0xf9, 0x0a, 0x46, 0x0d, 0x07, 0x35,
	0x0a, 0xfb, 0x09, 0x10, 0xb2, 0x60, 0xfc, 0x6d, 0x0e, 0x40, 0x10, 0x43, 0x39, 0x2e, 0x06, 0xed,
	0x58, 0x52, 0xcd, 0xaf, 0xa2, 0x0f, 0xbf, 0x54, 0x22, 0x4b, 0xcc, 0x9c, 0xc3, 0x9a, 0xfb, 0xce,
	0x7b, 0x6c, 0x72, 0xc1, 0x04, 0x5a, 0xc8, 0x99, 0x40, 0xd5, 0x9c, 0x09, 0x54, 0x4b, 0x4c, 0x20,
	0x37, 0x21, 0x8a, 0xe7, 0x26, 0x7f, 0x00, 0xc0, 0xbd, 0x13, 0xd5, 0x97, 0x0c, 0xa1, 0xb5, 0xc9,
	0xd9, 0xe0, 0x73, 0x7e, 0x1f, 0xcf, 0x29, 0x67, 0x92, 0xe6, 0xa7, 0x8a, 0xfa, 0x55, 0x30, 0xf0,
	0x6a, 0x62, 0xe0, 0x6e, 0xda, 0xfe, 0xe9, 0x59, 0xb0, 0x25, 0x85, 0xbd, 0x93, 0x93, 0xfb, 0x3e,
	0xbf, 0x56, 0x08, 0x56, 0xa4, 0xf0, 0x5f, 0x04, 0x72, 0x03, 0x10, 0xb2, 0xfc, 0x3e, 0xed, 0x8e,
	0xa4, 0x20, 0xb4, 0x12, 0x39, 0x24, 0xac, 0x44, 0x0e, 0x6a, 0x3e, 0x51, 0xc5, 0x1f, 0x26, 0x60,
	0x11, 0xc2, 0x7d, 0xc2, 0xfd, 0xae, 0x4a, 0xcc, 0xef, 0x9a, 0x15, 0x81, 0xc3, 0xc4, 0x64, 0x8f,
	0x8a, 0x39, 0xc7, 0x21, 0x86, 0x1f, 0x52, 0x7b, 0xe0, 0x1f, 0x08, 0x7b, 0x17, 0x21, 0xed, 0x6b,
	0x4a, 0xba, 0x5a, 0x6f, 0xac, 0x7e, 0x82, 0x54, 0x74, 0xea, 0xbf, 0xe6, 0x9c, 0x44, 0xba, 0xf8,
	0x05, 0xd8, 0x49, 0x8e, 0xcf, 0x73, 0xed, 0x2b, 0x3a, 0x02, 0x0c, 0x8b, 0x0e, 0x38, 0xee, 0xd9,
	0x41, 0xef, 0xdb, 0x0a, 0xa9, 0xc0, 0x36, 0x9e, 0x1f, 0x0c, 0x47, 0x40, 0xfb, 0x8e, 0x42, 0x96,
	0xee, 0x53, 0xff, 0x81, 0xc3, 0xff, 0x3e, 0x82, 0xdb, 0x83, 0xdb, 0xf1, 0xf3, 0x50, 0x61, 0x2e,
	0xdc, 0xc3, 0x68, 0xc6, 0x35, 0x66, 0x82, 0xc7, 0xee, 0xc2, 0xaf, 0xf0, 0xbb, 0xf0, 0x21, 0x6f,
	0x8e, 0xba, 0xaf, 0x39, 0xc2, 0x59, 0x0d, 0x40, 0x90, 0x3b, 0xcd, 0x94, 0xcd, 0x62, 0x98, 0x3b,
	0x3d, 0x7b, 0xdf, 0x77, 0x9c, 0x68, 0x66, 0xde, 0x1f, 0x5b, 0xe0, 0xcd, 0x88, 0xfc, 0x8f, 0x2d,
	0xf0, 0x56, 0x44, 0x51, 0x6f, 0x59, 0x56, 0x6f, 0xce, 0x3f, 0x4b, 0xbc, 0xfc, 0x87, 0xac, 0xcf,
	0x52, 0xf2, 0x57, 0x97, 0x48, 0xbd, 0x33, 0x01, 0x87, 0x42, 0x7f, 0x32, 0x9c, 0x2e, 0xbf, 0xa0,
	0x9e, 0x25, 0x75, 0x26, 0xd0, 0x27, 0xf6, 0xa1, 0xed, 0x3c, 0xb5, 0x97, 0xbf, 0xf6, 0x56, 0x85,
	0xa1, 0x98, 0x61, 0x27, 0x50, 0x5f, 0x47, 0x14, 0xcc, 0x36, 0x8e, 0xfa, 0x46, 0x88, 0x7a, 0x64,
	0xdf, 0x77, 0x2c, 0x7b, 0xb0, 0xfc, 0x4d, 0x44, 0x3d, 0x30, 0x8e, 0xe9, 0x6b, 0xce, 0xae, 0xf3,
	0x94, 0xba, 0xcb, 0xdf, 0x42, 0x54, 0x7b, 0x38, 0xa4, 0x03, 0x63, 0xb8, 0xee, 0x0e, 0xbc, 0xe5,
	0x6f, 0x73, 0x94, 0xed, 0x53, 0xd7, 0x36, 0x86, 0xf7, 0x5c, 0x77, 0xf9, 0x37, 0xdf, 0xaa, 0xdc,
	0xfd, 0xe5, 0x27, 0x82, 0x7c, 0x8c, 0x0e, 0x0c, 0x1d, 0xf5, 0xb3, 0xe4, 0x9c, 0xe4, 0x9e, 0x4c,
	0xf5, 0x7d, 0xa9, 0x31, 0x26, 0xbf, 0xf6, 0xb3, 0x75, 0xab, 0x18, 0xa1, 0x37, 0xd6, 0x5e, 0x50,
	0x07, 0x44, 0x4d, 0xdf, 0xd4, 0xa8, 0xbe, 0x94, 0x2a, 0x41, 0x7a, 0xfd, 0x66, 0xeb, 0x7d, 0x85,
	0xe8, 0xa0, 0xa2, 0x3d, 0xb2, 0xdc, 0xa1, 0xb6, 0x19, 0xbd, 0x12, 0x5d, 0xbd, 0x22, 0xbb, 0xf1,
	0x3c, 0x70, 0xe0, 0xb5, 0xd2, 0xce, 0x9d, 0xe4, 0xed, 0xd7, 0xda, 0x0b, 0xea, 0x21, 0xb9, 0x98,
	0xf5, 0xc7, 0x03, 0x1f, 0x90, 0x7c, 0x9f, 0xf5, 0x2f, 0x05, 0xc5, 0x2a, 0x7b, 0x85, 0x10, 0x36,
	0xa0, 0xf9, 0x39, 0x90, 0x55, 0x59, 0xf3, 0xf9, 0xcb, 0x96, 0x8c, 0xb7, 0xf1, 0x70, 0xca, 0x5f,
	0x6b, 0x2f, 0xa8, 0xff, 0x8b, 0xa8, 0x31, 0x81, 0x60, 0xf2, 0xc2, 0x0d, 0x59, 0x99, 0x13, 0xea,
	0xf9, 0x11, 0xcf, 0x67, 0xb1, 0xb6, 0xbe, 0x41, 0x16, 0xe3, 0xf7, 0x87, 0xc8, 0xbe, 0x8a, 0x5f,
	0x31, 0x52, 0xac, 0xe0, 0x1e, 0x39, 0x27, 0xbb, 0x10, 0xe3, 0x7d, 0xb2, 0xe2, 0x25, 0x84, 0xc5,
	0x2a, 0xf9, 0x1f, 0x64, 0x29, 0x79, 0xef, 0xc2, 0x0d, 0x59, 0x05, 0x09, 0xa2, 0x62, 0x85, 0x3f,
	0x21, 0x8d, 0xd8, 0x8d, 0x06, 0xd7, 0x64, 0x25, 0x47, 0x29, 0x8a, 0x15, 0xfb, 0x19, 0xb2, 0x9c,
	0xba, 0x9a, 0xe0, 0xa6, 0xac, 0xe8, 0x24, 0xd5, 0x69, 0x8a, 0xc7, 0x1b, 0x05, 0x66, 0x15, 0x0f,
	0x54, 0xa7, 0x29, 0x1e, 0x0f, 0xea, 0xcf, 0x2a, 0x1e, 0xa8, 0x4e, 0xd5, 0x7a, 0x38, 0xa5, 0x3e,
	0xb3, 0xf5, 0x8c, 0xaa, 0x70, 0xf1, 0xa9, 0x73, 0xea, 0xd2, 0xe2, 0x93, 0x54, 0xc5, 0x8a, 0x1f,
	0x91, 0x66, 0xe6, 0xb1, 0xf1, 0x0f, 0xce, 0xac, 0x26, 0x42, 0x5d, 0xac, 0x3a, 0x4a, 0x56, 0xa4,
	0x47, 0xb9, 0x6f, 0xcd, 0xac, 0xea, 0x44, 0xd5, 0x1c, 0x91, 0x56, 0xce, 0x09, 0xeb, 0xdb, 0xb2,
	0xca, 0xb2, 0xe9, 0x8b, 0x55, 0x69, 0x10, 0x55, 0x72, 0x96, 0xf8, 0x25, 0x59, 0x55, 0x69, 0xba,
	0xc2, 0xc2, 0x93, 0x1e, 0x81, 0x95, 0x0a, 0x4f, 0x46, 0x59, 0x74, 0x48, 0xb4, 0x72, 0xce, 0x5a,
	0xbd, 0x2c, 0xd3, 0xe3, 0xb1, 0xd3, 0x84, 0x01, 0x6d, 0xb1, 0xea, 0x3a, 0xa4, 0x1e, 0xbd, 0x88,
	0xe7, 0xaa, 0x8c, 0x99, 0x08, 0x41, 0xe1, 0x35, 0x22, 0x7e, 0x0e, 0xfd, 0xfa, 0xcc, 0x01, 0x56,
	0xac, 0xe0, 0x2f, 0x28, 0x64, 0x35, 0x92, 0x86, 0xf6, 0xd0, 0xf0, 0x7c, 0x64, 0x99, 0x3b, 0xb2,
	0xee, 0xe4, 0x8b, 0x27, 0xf5, 0x41, 0xeb, 0x3f, 0xc9, 0x97, 0xd3, 0x9c, 0x4f, 0x70, 0xb0, 0x49,
	0x8e, 0x4c, 0xbc, 0x94, 0x3f, 0x0e, 0x04, 0x5d, 0x61, 0xbd, 0x93, 0x4a, 0x5d, 0x97, 0xea, 0x9d,
	0x24, 0x55, 0xe1, 0xe9, 0x22, 0x49, 0x49, 0x7f, 0x29, 0x4b, 0x6f, 0xc6, 0xe9, 0x8a, 0x55, 0xf1,
	0x29, 0x72, 0x26, 0x91, 0xa9, 0xad, 0x65, 0x08, 0x28, 0x42, 0x53, 0x58, 0x38, 0xa9, 0xc4, 0xe7,
	0x9b, 0xb3, 0x0b, 0xdf, 0xbb, 0x7b, 0x92, 0x96, 0x47, 0x8f, 0x65, 0x66, 0xb5, 0x3c, 0x42, 0x53,
	0xd8, 0xfc, 0x48, 0x9e, 0x68, 0xbd, 0x31, 0xbb, 0x6c, 0xaf, 0x58, 0xe1, 0x5d, 0x72, 0x36, 0x9d,
	0xab, 0xfc, 0xa2, 0xb4, 0x4f, 0x93, 0x64, 0x85, 0x2d, 0x34, 0x59, 0xca, 0xaa, 0xd4, 0x42, 0x93,
	0x10, 0x16, 0x56, 0x48, 0xd1, 0x44, 0xd3, 0xab, 0xf9, 0xb3, 0xaa, 0xa0, 0x68, 0x06, 0xe2, 0x5a,
	0xda, 0x64, 0x6a, 0xe6, 0xfb, 0xb3, 0x17, 0xa3, 0x04, 0x69, 0xe1, 0x45, 0x42, 0x9a, 0x02, 0x7a,
	0x4b, 0x2e, 0xa3, 0x34, 0x65, 0xf1, 0xae, 0x4e, 0xdd, 0xfd, 0xf9, 0x62, 0xd6, 0xf4, 0x8d, 0x91,
	0x15, 0xab, 0xc0, 0x8b, 0xea, 0xd9, 0xf4, 0xe5, 0xa5, 0x77, 0xf2, 0x7b, 0x25, 0xf5, 0x41, 0xe1,
	0xd9, 0x91, 0xbc, 0xb2, 0xf5, 0x46, 0x16, 0x4f, 0x11, 0xa2, 0xc2, 0x1c, 0xe5, 0x5d, 0x4e, 0x7b,
	0x27, 0x67, 0x10, 0xcb, 0x3e, 0x28, 0x56, 0xe9, 0x27, 0x49, 0x9d, 0xff, 0x85, 0x18, 0x70, 0x23,
	0x55, 0x52, 0xc9, 0xff, 0x18, 0x2b, 0x56, 0xf2, 0xa7, 0x51, 0x83, 0x27, 0x6c, 0xab, 0xab, 0xb2,
	0xf5, 0x8f, 0xd1, 0x9d, 0xc8, 0x98, 0xa2, 0xc9, 0x3f, 0x96, 0xe2, 0xa5, 0xdf, 0x94, 0xfc, 0x85,
	0x4c, 0xea, 0x2f, 0xbc, 0x5a, 0x2f, 0x16, 0xa0, 0x82, 0xad, 0xbb, 0x43, 0x2e, 0x65, 0xff, 0x9f,
	0xd9, 0x87, 0x64, 0xa2, 0xca, 0x24, 0x2f, 0xc6, 0xd7, 0xeb, 0x98, 0x16, 0xc3, 0xff, 0xe8, 0x71,
	0x4d, 0x5e, 0x83, 0x78, 0x5f, 0xac, 0xc8, 0xd7, 0x20, 0xcd, 0x53, 0x6c, 0xa4, 0xf5, 0xf1, 0x48,
	0x5d, 0xcd, 0x2a, 0x56, 0x1f, 0x8f, 0x5a, 0x57, 0xe4, 0x65, 0xf2, 0xd7, 0xb1, 0xf2, 0x44, 0xc6,
	0xe4, 0x6a, 0xd6, 0x0c, 0xc8, 0x29, 0x8f, 0xbf, 0xd6, 0x5e, 0x50, 0x75, 0xb8, 0x14, 0x28, 0x52,
	0xde, 0xde, 0x5d, 0xf5, 0x4a, 0x4e, 0x89, 0x7b, 0x77, 0x67, 0x97, 0xb9, 0x07, 0x37, 0x33, 0x88,
	0x32, 0x45, 0x7a, 0xeb, 0xd5, 0xcc, 0x99, 0x8a, 0x04, 0xb3, 0xcb, 0x0d, 0x79, 0x17, 0x19, 0x94,
	0xab, 0x72, 0xfb, 0x1d, 0x5e, 0x66, 0x95, 0xc7, 0x5f, 0x6b, 0x2f, 0xa8, 0x3e, 0xb9, 0x90, 0xf1,
	0x27, 0xa2, 0x2f, 0xcf, 0x52, 0x5f, 0x21, 0x6d, 0xeb, 0x83, 0xf2, 0x6a, 0xe4, 0xd4, 0xe8, 0x38,
	0xca, 0xfa, 0xc7, 0x56, 0xa9, 0xe3, 0x28, 0x83, 0xb8, 0xa8, 0x97, 0xea, 0x9c, 0x2c, 0x15, 0x53,
	0xba, 0x22, 0x4b, 0x08, 0x5b, 0xef, 0x97, 0x57, 0x22, 0x21, 0x45, 0xf5, 0x9c, 0xfc, 0xef, 0xdc,
	0x1b, 0xd9, 0xbe, 0x9f, 0x80, 0xa8, 0xa8, 0x0b, 0xac, 0x2a, 0x32, 0x20, 0xd5, 0xcb, 0x12, 0x0d,
	0x12, 0xe4, 0x76, 0xb6, 0xd6, 0x72, 0xde, 0x8e, 0x87, 0x53, 0xed, 0x05, 0xf5, 0x7f, 0xa2, 0x01,
	0x17, 0x26, 0x1e, 0x4a, 0x0c, 0xb8, 0x54, 0xc2, 0x64, 0xeb, 0xe6, 0x4c, 0x1a, 0x2c, 0xfd, 0xff,
	0x29, 0x64, 0x35, 0x27, 0xed, 0x4a, 0xb2, 0x92, 0xe4, 0x67, 0xb9, 0xb5, 0x4e, 0xf6, 0x01, 0xa8,
	0xce, 0x21, 0x59, 0x91, 0x65, 0x3e, 0x49, 0xcc, 0x8c, 0x8c, 0x2c, 0xaf, 0x56, 0x41, 0x4a, 0xa8,
	0xcd, 0x25, 0x17, 0xe4, 0x69, 0x47, 0x92, 0x89, 0x94, 0x99, 0x40, 0xd5, 0x2a, 0x4c, 0x0b, 0x75,
	0xfe, 0x9f, 0x78, 0xaa, 0x53, 0x2c, 0xeb, 0x47, 0xe2, 0x42, 0xc8, 0x4d, 0x60, 0x6a, 0x9d, 0x88,
	0x1e, 0xaa, 0xef, 0x91, 0xb3, 0xa9, 0xc4, 0x1b, 0x55, 0xb6, 0xb2, 0xa5, 0xf3, 0x87, 0x5a, 0x45,
	0xc8, 0xf8, 0x02, 0x78, 0x5e, 0x9a, 0xc3, 0x22, 0xb1, 0x4a, 0xb3, 0xf2, 0x75, 0x5a, 0x45, 0x49,
	0xa1, 0xc2, 0xcf, 0x90, 0xa5, 0x44, 0x9a, 0x89, 0x74, 0x06, 0x27, 0xb3, 0x60, 0x5a, 0xb3, 0x89,
	0xc4, 0x38, 0x91, 0xff, 0x3d, 0x93, 0x64, 0x9c, 0x64, 0xfe, 0xa7, 0x54, 0xab, 0x30, 0x2d, 0xd4,
	0xf9, 0x98, 0x34, 0xa2, 0xb1, 0x20, 0x89, 0xcf, 0x35, 0x11, 0xd1, 0x6a, 0xcd, 0xa0, 0x80, 0x52,
	0xfb, 0x44, 0x4d, 0xff, 0x87, 0xb8, 0x64, 0x7f, 0x2c, 0xfd, 0xeb, 0xf3, 0x56, 0x21, 0x3a, 0x21,
	0x31, 0xf9, 0x9f, 0xb5, 0x4b, 0x24, 0x96, 0xf9, 0x7f, 0xf1, 0xad, 0xc2, 0xb4, 0x50, 0xe7, 0x2e,
	0x39, 0x13, 0x04, 0xb1, 0x20, 0x43, 0x45, 0x62, 0x10, 0x44, 0x33, 0x7c, 0x5a, 0x79, 0xaf, 0xa1,
	0xc4, 0x1d, 0xb2, 0x18, 0x29, 0xd1, 0x19, 0x4b, 0x14, 0x78, 0x24, 0x3b, 0xa5, 0x95, 0xf3, 0x16,
	0x8a, 0xfb, 0xdf, 0xb0, 0xbd, 0x8f, 0x25, 0x60, 0xa8, 0x52, 0xe5, 0x9c, 0x4c, 0x05, 0x69, 0x15,
	0xa0, 0x12, 0x83, 0x26, 0x9a, 0x5e, 0x20, 0x19, 0x34, 0x89, 0x44, 0x8c, 0xd6, 0x0c, 0x0a, 0x69,
	0xbb, 0x37, 0x6d, 0x7f, 0x56, 0xbb, 0x31, 0x44, 0xdf, 0x2a, 0x40, 0x05, 0x35, 0x7c, 0x3a, 0xd2,
	0x75, 0xb0, 0x79, 0x94, 0x2d, 0x6c, 0xc9, 0x1c, 0x86, 0xd6, 0x4c, 0x1a, 0xd1, 0xfa, 0x64, 0xdc,
	0x5c, 0xcd, 0xf8, 0x23, 0xd4, 0x78, 0x8c, 0xbe, 0x55, 0x80, 0x4a, 0x68, 0x9f, 0x44, 0xc4, 0x5b,
	0xa2, 0x7d, 0xd2, 0xa1, 0xf8, 0xd6, 0x6c, 0x22, 0x56, 0xfc, 0x46, 0xe3, 0x47, 0xbf, 0x58, 0x53,
	0xfe, 0xea, 0x17, 0x6b, 0xca, 0xcf, 0x7f, 0xb1, 0xa6, 0xec, 0xcf, 0x8f, 0x5d, 0xc7, 0x77, 0x3e,
	0xf2, 0x6f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x95, 0x59, 0xa9, 0x8e, 0x82, 0x00, 0x00,
}
