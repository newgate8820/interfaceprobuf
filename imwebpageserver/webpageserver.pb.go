// Code generated by protoc-gen-gogo.
// source: webpageserver.proto
// DO NOT EDIT!

/*
Package imwebpageserver is a generated protocol buffer package.

It is generated from these files:

	webpageserver.proto

It has these top-level messages:

	WebPageMsg
	WebPageReply
*/
package imwebpageserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// WebPageMsg 获取网页头信息请求
type WebPageMsg struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *WebPageMsg) Reset()                    { *m = WebPageMsg{} }
func (m *WebPageMsg) String() string            { return proto.CompactTextString(m) }
func (*WebPageMsg) ProtoMessage()               {}
func (*WebPageMsg) Descriptor() ([]byte, []int) { return fileDescriptorWebpageserver, []int{0} }

func (m *WebPageMsg) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// WebPageReply 获取网页头信息响应
type WebPageReply struct {
	Title    string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Desc     string `protobuf:"bytes,2,opt,name=Desc,proto3" json:"Desc,omitempty"`
	KeyWords string `protobuf:"bytes,3,opt,name=KeyWords,proto3" json:"KeyWords,omitempty"`
	Icon     []byte `protobuf:"bytes,4,opt,name=Icon,proto3" json:"Icon,omitempty"`
}

func (m *WebPageReply) Reset()                    { *m = WebPageReply{} }
func (m *WebPageReply) String() string            { return proto.CompactTextString(m) }
func (*WebPageReply) ProtoMessage()               {}
func (*WebPageReply) Descriptor() ([]byte, []int) { return fileDescriptorWebpageserver, []int{1} }

func (m *WebPageReply) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *WebPageReply) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *WebPageReply) GetKeyWords() string {
	if m != nil {
		return m.KeyWords
	}
	return ""
}

func (m *WebPageReply) GetIcon() []byte {
	if m != nil {
		return m.Icon
	}
	return nil
}

func init() {
	proto.RegisterType((*WebPageMsg)(nil), "imwebpageserver.WebPageMsg")
	proto.RegisterType((*WebPageReply)(nil), "imwebpageserver.WebPageReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WebPageService service

type WebPageServiceClient interface {
	// 获取指定url的head信息
	GetPageHead(ctx context.Context, in *WebPageMsg, opts ...grpc.CallOption) (*WebPageReply, error)
}

type webPageServiceClient struct {
	cc *grpc.ClientConn
}

func NewWebPageServiceClient(cc *grpc.ClientConn) WebPageServiceClient {
	return &webPageServiceClient{cc}
}

func (c *webPageServiceClient) GetPageHead(ctx context.Context, in *WebPageMsg, opts ...grpc.CallOption) (*WebPageReply, error) {
	out := new(WebPageReply)
	err := grpc.Invoke(ctx, "/imwebpageserver.WebPageService/GetPageHead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WebPageService service

type WebPageServiceServer interface {
	// 获取指定url的head信息
	GetPageHead(context.Context, *WebPageMsg) (*WebPageReply, error)
}

func RegisterWebPageServiceServer(s *grpc.Server, srv WebPageServiceServer) {
	s.RegisterService(&_WebPageService_serviceDesc, srv)
}

func _WebPageService_GetPageHead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebPageMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebPageServiceServer).GetPageHead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imwebpageserver.WebPageService/GetPageHead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebPageServiceServer).GetPageHead(ctx, req.(*WebPageMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _WebPageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imwebpageserver.WebPageService",
	HandlerType: (*WebPageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageHead",
			Handler:    _WebPageService_GetPageHead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webpageserver.proto",
}

func (m *WebPageMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebPageMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWebpageserver(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func (m *WebPageReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebPageReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWebpageserver(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWebpageserver(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.KeyWords) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWebpageserver(dAtA, i, uint64(len(m.KeyWords)))
		i += copy(dAtA[i:], m.KeyWords)
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWebpageserver(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	return i, nil
}

func encodeFixed64Webpageserver(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Webpageserver(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintWebpageserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *WebPageMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovWebpageserver(uint64(l))
	}
	return n
}

func (m *WebPageReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovWebpageserver(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovWebpageserver(uint64(l))
	}
	l = len(m.KeyWords)
	if l > 0 {
		n += 1 + l + sovWebpageserver(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovWebpageserver(uint64(l))
	}
	return n
}

func sovWebpageserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWebpageserver(x uint64) (n int) {
	return sovWebpageserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WebPageMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebpageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebPageMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebPageMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebpageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebpageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebpageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebpageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebPageReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebpageserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebPageReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebPageReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebpageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebpageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebpageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebpageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyWords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebpageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebpageserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyWords = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebpageserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWebpageserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = append(m.Icon[:0], dAtA[iNdEx:postIndex]...)
			if m.Icon == nil {
				m.Icon = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebpageserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebpageserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWebpageserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWebpageserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebpageserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebpageserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthWebpageserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWebpageserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWebpageserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWebpageserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWebpageserver   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("webpageserver.proto", fileDescriptorWebpageserver) }

var fileDescriptorWebpageserver = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x4f, 0x4d, 0x2a,
	0x48, 0x4c, 0x4f, 0x2d, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0xcf, 0xcc, 0x45, 0x11, 0x56, 0x92, 0xe3, 0xe2, 0x0a, 0x4f, 0x4d, 0x0a, 0x48, 0x4c, 0x4f,
	0xf5, 0x2d, 0x4e, 0x17, 0x12, 0xe0, 0x62, 0x2e, 0x2d, 0xca, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0x02, 0x31, 0x95, 0x32, 0xb8, 0x78, 0xa0, 0xf2, 0x41, 0xa9, 0x05, 0x39, 0x95, 0x42, 0x22,
	0x5c, 0xac, 0x21, 0x99, 0x25, 0x39, 0xa9, 0x50, 0x35, 0x10, 0x8e, 0x90, 0x10, 0x17, 0x8b, 0x4b,
	0x6a, 0x71, 0xb2, 0x04, 0x13, 0x58, 0x10, 0xcc, 0x16, 0x92, 0xe2, 0xe2, 0xf0, 0x4e, 0xad, 0x0c,
	0xcf, 0x2f, 0x4a, 0x29, 0x96, 0x60, 0x06, 0x8b, 0xc3, 0xf9, 0x20, 0xf5, 0x9e, 0xc9, 0xf9, 0x79,
	0x12, 0x2c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x60, 0xb6, 0x51, 0x2c, 0x17, 0x1f, 0xd4, 0xa6, 0xe0,
	0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x6f, 0x2e, 0x6e, 0xf7, 0xd4, 0x12, 0x90, 0x88, 0x47,
	0x6a, 0x62, 0x8a, 0x90, 0xb4, 0x1e, 0x9a, 0xe3, 0xf5, 0x10, 0x2e, 0x97, 0x92, 0xc5, 0x25, 0x09,
	0x76, 0xb6, 0x12, 0x83, 0x13, 0xcf, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78,
	0x24, 0xc7, 0x98, 0xc4, 0x06, 0x0e, 0x0e, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x6f,
	0xfc, 0xcd, 0x25, 0x01, 0x00, 0x00,
}
