//
//媒体监督相关接口定义(用于鉴黄组获取文件信息和来源信息)
//作者：ty
//日期：2020-04-21
//版本：1.0
//修改日期：
//修改日志：
//Date                  Desc
//-----------------------------------------------------
//protoc --gogofast_out=plugins=grpc:. gitlab.chatserver.im/interfaceprobuf/immediamonitorserver/immediamonitorserver.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: immediamonitorserver.proto

package immediamonitorserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 结果码定义
type ERpcResultCode int32

const (
	ERpcResultCode_RRC_OK                  ERpcResultCode = 0     // 成功
	ERpcResultCode_RRC_FILE_NOT_EXISITS    ERpcResultCode = 1     // 文件不存在
	ERpcResultCode_RRC_SYSTEM_EXCEPTION    ERpcResultCode = 2     // 系统异常
	ERpcResultCode_RRC_PARAMETER_EXCEPTION ERpcResultCode = 3     // 参数异常
	ERpcResultCode_RRC_LOGIC_EXCEPTION     ERpcResultCode = 4     // 逻辑异常
	ERpcResultCode_RRC_DATA_EXCEPTION      ERpcResultCode = 5     // 数据异常
	ERpcResultCode_RRC_NO_ACCESS_RIGHTS    ERpcResultCode = 6     // 没有访问权限
	ERpcResultCode_RRC_DB_EXCEPTION        ERpcResultCode = 7     // DB（redis）异常
	ERpcResultCode_RRC_UNKNOWN             ERpcResultCode = 65535 // 未知异常
)

// Enum value maps for ERpcResultCode.
var (
	ERpcResultCode_name = map[int32]string{
		0:     "RRC_OK",
		1:     "RRC_FILE_NOT_EXISITS",
		2:     "RRC_SYSTEM_EXCEPTION",
		3:     "RRC_PARAMETER_EXCEPTION",
		4:     "RRC_LOGIC_EXCEPTION",
		5:     "RRC_DATA_EXCEPTION",
		6:     "RRC_NO_ACCESS_RIGHTS",
		7:     "RRC_DB_EXCEPTION",
		65535: "RRC_UNKNOWN",
	}
	ERpcResultCode_value = map[string]int32{
		"RRC_OK":                  0,
		"RRC_FILE_NOT_EXISITS":    1,
		"RRC_SYSTEM_EXCEPTION":    2,
		"RRC_PARAMETER_EXCEPTION": 3,
		"RRC_LOGIC_EXCEPTION":     4,
		"RRC_DATA_EXCEPTION":      5,
		"RRC_NO_ACCESS_RIGHTS":    6,
		"RRC_DB_EXCEPTION":        7,
		"RRC_UNKNOWN":             65535,
	}
)

func (x ERpcResultCode) Enum() *ERpcResultCode {
	p := new(ERpcResultCode)
	*p = x
	return p
}

func (x ERpcResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERpcResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_immediamonitorserver_proto_enumTypes[0].Descriptor()
}

func (ERpcResultCode) Type() protoreflect.EnumType {
	return &file_immediamonitorserver_proto_enumTypes[0]
}

func (x ERpcResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERpcResultCode.Descriptor instead.
func (ERpcResultCode) EnumDescriptor() ([]byte, []int) {
	return file_immediamonitorserver_proto_rawDescGZIP(), []int{0}
}

// ----------------------------------------------------
// 媒体文件信息
type MediaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid      uint64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`           // 文件唯一标示Fid(用于阿里云取媒体文件)
	FileName string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`  // 上传文件的文件名
	FileSize uint32 `protobuf:"varint,3,opt,name=fileSize,proto3" json:"fileSize,omitempty"` // 文件大小
}

func (x *MediaInfo) Reset() {
	*x = MediaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_immediamonitorserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaInfo) ProtoMessage() {}

func (x *MediaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_immediamonitorserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaInfo.ProtoReflect.Descriptor instead.
func (*MediaInfo) Descriptor() ([]byte, []int) {
	return file_immediamonitorserver_proto_rawDescGZIP(), []int{0}
}

func (x *MediaInfo) GetFid() uint64 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *MediaInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *MediaInfo) GetFileSize() uint32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

// 来源信息
type UserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`           // 用户ID
	WithId      int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`           // 消息交互方
	WithIdType  int32 `protobuf:"varint,3,opt,name=WithIdType,proto3" json:"WithIdType,omitempty"`   // 消息交互方类型 1.user 2:chat 3:channel
	MessageType int32 `protobuf:"varint,4,opt,name=MessageType,proto3" json:"MessageType,omitempty"` // 消息类型
	MsgId       int32 `protobuf:"varint,5,opt,name=MsgId,proto3" json:"MsgId,omitempty"`             // 消息id
	ToId        int32 `protobuf:"varint,6,opt,name=ToId,proto3" json:"ToId,omitempty"`               // 接收方id
	FromId      int32 `protobuf:"varint,7,opt,name=FromId,proto3" json:"FromId,omitempty"`           // 发送方
}

func (x *UserMsg) Reset() {
	*x = UserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_immediamonitorserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMsg) ProtoMessage() {}

func (x *UserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_immediamonitorserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMsg.ProtoReflect.Descriptor instead.
func (*UserMsg) Descriptor() ([]byte, []int) {
	return file_immediamonitorserver_proto_rawDescGZIP(), []int{1}
}

func (x *UserMsg) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserMsg) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *UserMsg) GetWithIdType() int32 {
	if x != nil {
		return x.WithIdType
	}
	return 0
}

func (x *UserMsg) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *UserMsg) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *UserMsg) GetToId() int32 {
	if x != nil {
		return x.ToId
	}
	return 0
}

func (x *UserMsg) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

// 媒体监督所需相关信息存储请求
type MediaMonitorInfoSaveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileInfo *MediaInfo `protobuf:"bytes,1,opt,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"` // 媒体文件信息
	UserMsg  *UserMsg   `protobuf:"bytes,2,opt,name=user_msg,json=userMsg,proto3" json:"user_msg,omitempty"`    // 来源信息
}

func (x *MediaMonitorInfoSaveReq) Reset() {
	*x = MediaMonitorInfoSaveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_immediamonitorserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaMonitorInfoSaveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaMonitorInfoSaveReq) ProtoMessage() {}

func (x *MediaMonitorInfoSaveReq) ProtoReflect() protoreflect.Message {
	mi := &file_immediamonitorserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaMonitorInfoSaveReq.ProtoReflect.Descriptor instead.
func (*MediaMonitorInfoSaveReq) Descriptor() ([]byte, []int) {
	return file_immediamonitorserver_proto_rawDescGZIP(), []int{2}
}

func (x *MediaMonitorInfoSaveReq) GetFileInfo() *MediaInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *MediaMonitorInfoSaveReq) GetUserMsg() *UserMsg {
	if x != nil {
		return x.UserMsg
	}
	return nil
}

// 媒体监督所需相关信息存储响应
type MediaMonitorInfoSaveResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ERpcResultCode `protobuf:"varint,1,opt,name=result,proto3,enum=immediamonitorserver.ERpcResultCode" json:"result,omitempty"` // 结果码
}

func (x *MediaMonitorInfoSaveResp) Reset() {
	*x = MediaMonitorInfoSaveResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_immediamonitorserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaMonitorInfoSaveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaMonitorInfoSaveResp) ProtoMessage() {}

func (x *MediaMonitorInfoSaveResp) ProtoReflect() protoreflect.Message {
	mi := &file_immediamonitorserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaMonitorInfoSaveResp.ProtoReflect.Descriptor instead.
func (*MediaMonitorInfoSaveResp) Descriptor() ([]byte, []int) {
	return file_immediamonitorserver_proto_rawDescGZIP(), []int{3}
}

func (x *MediaMonitorInfoSaveResp) GetResult() ERpcResultCode {
	if x != nil {
		return x.Result
	}
	return ERpcResultCode_RRC_OK
}

var File_immediamonitorserver_proto protoreflect.FileDescriptor

var file_immediamonitorserver_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x69, 0x6d,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x22, 0x55, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x07, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x6f, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x6f, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6d, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x58, 0x0a,
	0x18, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x69, 0x6d, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x45, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a, 0xe1, 0x01, 0x0a, 0x0e, 0x45, 0x52, 0x70, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x52,
	0x43, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x52, 0x43, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x49, 0x54, 0x53, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x52, 0x52, 0x43, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x52,
	0x43, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x52, 0x43, 0x5f, 0x4c,
	0x4f, 0x47, 0x49, 0x43, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x52, 0x43, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x52, 0x43, 0x5f,
	0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x53,
	0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x52, 0x43, 0x5f, 0x44, 0x42, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0b, 0x52, 0x52, 0x43, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xff, 0xff, 0x03, 0x32, 0x8e, 0x01, 0x0a, 0x13,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x14, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x61, 0x76, 0x65, 0x12, 0x2d, 0x2e, 0x69, 0x6d,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x69, 0x6d, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x26, 0x5a, 0x24,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_immediamonitorserver_proto_rawDescOnce sync.Once
	file_immediamonitorserver_proto_rawDescData = file_immediamonitorserver_proto_rawDesc
)

func file_immediamonitorserver_proto_rawDescGZIP() []byte {
	file_immediamonitorserver_proto_rawDescOnce.Do(func() {
		file_immediamonitorserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_immediamonitorserver_proto_rawDescData)
	})
	return file_immediamonitorserver_proto_rawDescData
}

var file_immediamonitorserver_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_immediamonitorserver_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_immediamonitorserver_proto_goTypes = []interface{}{
	(ERpcResultCode)(0),              // 0: immediamonitorserver.ERpcResultCode
	(*MediaInfo)(nil),                // 1: immediamonitorserver.MediaInfo
	(*UserMsg)(nil),                  // 2: immediamonitorserver.UserMsg
	(*MediaMonitorInfoSaveReq)(nil),  // 3: immediamonitorserver.MediaMonitorInfoSaveReq
	(*MediaMonitorInfoSaveResp)(nil), // 4: immediamonitorserver.MediaMonitorInfoSaveResp
}
var file_immediamonitorserver_proto_depIdxs = []int32{
	1, // 0: immediamonitorserver.MediaMonitorInfoSaveReq.file_info:type_name -> immediamonitorserver.MediaInfo
	2, // 1: immediamonitorserver.MediaMonitorInfoSaveReq.user_msg:type_name -> immediamonitorserver.UserMsg
	0, // 2: immediamonitorserver.MediaMonitorInfoSaveResp.result:type_name -> immediamonitorserver.ERpcResultCode
	3, // 3: immediamonitorserver.MediaMonitorService.MediaMonitorInfoSave:input_type -> immediamonitorserver.MediaMonitorInfoSaveReq
	4, // 4: immediamonitorserver.MediaMonitorService.MediaMonitorInfoSave:output_type -> immediamonitorserver.MediaMonitorInfoSaveResp
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_immediamonitorserver_proto_init() }
func file_immediamonitorserver_proto_init() {
	if File_immediamonitorserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_immediamonitorserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_immediamonitorserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_immediamonitorserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaMonitorInfoSaveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_immediamonitorserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaMonitorInfoSaveResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_immediamonitorserver_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_immediamonitorserver_proto_goTypes,
		DependencyIndexes: file_immediamonitorserver_proto_depIdxs,
		EnumInfos:         file_immediamonitorserver_proto_enumTypes,
		MessageInfos:      file_immediamonitorserver_proto_msgTypes,
	}.Build()
	File_immediamonitorserver_proto = out.File
	file_immediamonitorserver_proto_rawDesc = nil
	file_immediamonitorserver_proto_goTypes = nil
	file_immediamonitorserver_proto_depIdxs = nil
}
