// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imhistoryserver.proto

package pbimhistoryserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HistoryServerClient is the client API for HistoryServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoryServerClient interface {
	// 获取历史
	GetHistory(ctx context.Context, in *GetHistoryReq, opts ...grpc.CallOption) (*GetHistoryResult, error)
	GetMessages(ctx context.Context, in *GetMessagesReq, opts ...grpc.CallOption) (*GetMessagesResult, error)
}

type historyServerClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoryServerClient(cc grpc.ClientConnInterface) HistoryServerClient {
	return &historyServerClient{cc}
}

func (c *historyServerClient) GetHistory(ctx context.Context, in *GetHistoryReq, opts ...grpc.CallOption) (*GetHistoryResult, error) {
	out := new(GetHistoryResult)
	err := c.cc.Invoke(ctx, "/pbimhistoryserver.HistoryServer/GetHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServerClient) GetMessages(ctx context.Context, in *GetMessagesReq, opts ...grpc.CallOption) (*GetMessagesResult, error) {
	out := new(GetMessagesResult)
	err := c.cc.Invoke(ctx, "/pbimhistoryserver.HistoryServer/GetMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoryServerServer is the server API for HistoryServer service.
// All implementations must embed UnimplementedHistoryServerServer
// for forward compatibility
type HistoryServerServer interface {
	// 获取历史
	GetHistory(context.Context, *GetHistoryReq) (*GetHistoryResult, error)
	GetMessages(context.Context, *GetMessagesReq) (*GetMessagesResult, error)
	mustEmbedUnimplementedHistoryServerServer()
}

// UnimplementedHistoryServerServer must be embedded to have forward compatible implementations.
type UnimplementedHistoryServerServer struct {
}

func (UnimplementedHistoryServerServer) GetHistory(context.Context, *GetHistoryReq) (*GetHistoryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedHistoryServerServer) GetMessages(context.Context, *GetMessagesReq) (*GetMessagesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedHistoryServerServer) mustEmbedUnimplementedHistoryServerServer() {}

// UnsafeHistoryServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoryServerServer will
// result in compilation errors.
type UnsafeHistoryServerServer interface {
	mustEmbedUnimplementedHistoryServerServer()
}

func RegisterHistoryServerServer(s grpc.ServiceRegistrar, srv HistoryServerServer) {
	s.RegisterService(&HistoryServer_ServiceDesc, srv)
}

func _HistoryServer_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServerServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimhistoryserver.HistoryServer/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServerServer).GetHistory(ctx, req.(*GetHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryServer_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServerServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbimhistoryserver.HistoryServer/GetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServerServer).GetMessages(ctx, req.(*GetMessagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HistoryServer_ServiceDesc is the grpc.ServiceDesc for HistoryServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HistoryServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbimhistoryserver.HistoryServer",
	HandlerType: (*HistoryServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHistory",
			Handler:    _HistoryServer_GetHistory_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _HistoryServer_GetMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imhistoryserver.proto",
}
