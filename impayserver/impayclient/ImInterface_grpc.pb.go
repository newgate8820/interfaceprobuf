// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: ImInterface.proto

package impayclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImInterfaceClient is the client API for ImInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImInterfaceClient interface {
	// 创建账户
	CreateAccount(ctx context.Context, in *CreateAccount, opts ...grpc.CallOption) (*CommonResp, error)
	// 获取账户信息
	GetAccount(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 公共请求
	CommonReq(ctx context.Context, in *ImCommonReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 购买出售列表
	TransList(ctx context.Context, in *TransListReq, opts ...grpc.CallOption) (*TransListResp, error)
	// 保存图片文件
	SaveIco(ctx context.Context, in *SaveIcoReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type imInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewImInterfaceClient(cc grpc.ClientConnInterface) ImInterfaceClient {
	return &imInterfaceClient{cc}
}

func (c *imInterfaceClient) CreateAccount(ctx context.Context, in *CreateAccount, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/impayclient.ImInterface/createAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) GetAccount(ctx context.Context, in *UserIdReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/impayclient.ImInterface/getAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) CommonReq(ctx context.Context, in *ImCommonReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/impayclient.ImInterface/commonReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) TransList(ctx context.Context, in *TransListReq, opts ...grpc.CallOption) (*TransListResp, error) {
	out := new(TransListResp)
	err := c.cc.Invoke(ctx, "/impayclient.ImInterface/transList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imInterfaceClient) SaveIco(ctx context.Context, in *SaveIcoReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/impayclient.ImInterface/saveIco", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImInterfaceServer is the server API for ImInterface service.
// All implementations must embed UnimplementedImInterfaceServer
// for forward compatibility
type ImInterfaceServer interface {
	// 创建账户
	CreateAccount(context.Context, *CreateAccount) (*CommonResp, error)
	// 获取账户信息
	GetAccount(context.Context, *UserIdReq) (*CommonResp, error)
	// 公共请求
	CommonReq(context.Context, *ImCommonReq) (*CommonResp, error)
	// 购买出售列表
	TransList(context.Context, *TransListReq) (*TransListResp, error)
	// 保存图片文件
	SaveIco(context.Context, *SaveIcoReq) (*CommonResp, error)
	mustEmbedUnimplementedImInterfaceServer()
}

// UnimplementedImInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedImInterfaceServer struct {
}

func (UnimplementedImInterfaceServer) CreateAccount(context.Context, *CreateAccount) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedImInterfaceServer) GetAccount(context.Context, *UserIdReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedImInterfaceServer) CommonReq(context.Context, *ImCommonReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonReq not implemented")
}
func (UnimplementedImInterfaceServer) TransList(context.Context, *TransListReq) (*TransListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransList not implemented")
}
func (UnimplementedImInterfaceServer) SaveIco(context.Context, *SaveIcoReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveIco not implemented")
}
func (UnimplementedImInterfaceServer) mustEmbedUnimplementedImInterfaceServer() {}

// UnsafeImInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImInterfaceServer will
// result in compilation errors.
type UnsafeImInterfaceServer interface {
	mustEmbedUnimplementedImInterfaceServer()
}

func RegisterImInterfaceServer(s grpc.ServiceRegistrar, srv ImInterfaceServer) {
	s.RegisterService(&ImInterface_ServiceDesc, srv)
}

func _ImInterface_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayclient.ImInterface/createAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).CreateAccount(ctx, req.(*CreateAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayclient.ImInterface/getAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).GetAccount(ctx, req.(*UserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_CommonReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImCommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).CommonReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayclient.ImInterface/commonReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).CommonReq(ctx, req.(*ImCommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_TransList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).TransList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayclient.ImInterface/transList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).TransList(ctx, req.(*TransListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImInterface_SaveIco_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveIcoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImInterfaceServer).SaveIco(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayclient.ImInterface/saveIco",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImInterfaceServer).SaveIco(ctx, req.(*SaveIcoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ImInterface_ServiceDesc is the grpc.ServiceDesc for ImInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "impayclient.ImInterface",
	HandlerType: (*ImInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createAccount",
			Handler:    _ImInterface_CreateAccount_Handler,
		},
		{
			MethodName: "getAccount",
			Handler:    _ImInterface_GetAccount_Handler,
		},
		{
			MethodName: "commonReq",
			Handler:    _ImInterface_CommonReq_Handler,
		},
		{
			MethodName: "transList",
			Handler:    _ImInterface_TransList_Handler,
		},
		{
			MethodName: "saveIco",
			Handler:    _ImInterface_SaveIco_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ImInterface.proto",
}
