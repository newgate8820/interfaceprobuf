// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/impayserver/impayserver.proto

/*
Package impayserver is a generated protocol buffer package.

protoc --gogofast_out=plugins=grpc:. *.proto
protoc --gogofast_out=plugins=grpc:. ./gitlab.chatserver.im/interfaceprobuf/pbimuinfoserver/imuinfoserver.proto

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/impayserver/impayserver.proto

It has these top-level messages:

	GetAccountInfoReq
	GetAccountInfoResp
	GetUserAcctInfoReq
	GetUserAcctInfoRsp
	CreateAccountReq
	NotificationReq
	NotificationResp
	CreateAccountResp
	GetOrderListReq
	GetOrderListResp
	OtherTransReq
	OtherTransResp
	SetRDPReq
	SetRDPResp
	SendRDPReq
	SendRDPResp
	CheckRDPReq
	CheckRDPResp
	ReceiveRDPReq
	ReceiveRDPResp
	QueryRDPReq
	QueryRDPResp
	QueryRDPHistoryReq
	QueryRDPHistoryResp
	RefundRDPReq
	RefundRDPResp
	SaveIconReq
	SaveIconResp
	CreateWalletReq
	CreateWalletRsp
*/
package impayserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pbcomm "gitlab.chatserver.im/interfaceprobuf/pbcomm"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// //protoc --gogofast_out=plugins=grpc:. gitlab.chatserver.im/interfaceprobuf/impayserver/impayclient/ImInterface.proto
// protoc --gogofast_out=plugins=grpc:. gitlab.chatserver.im/interfaceprobuf/impayserver/impayserver.proto
// 获取帐号信息的请求
type GetAccountInfoReq struct {
	UserId      int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId       int64  `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	IpAddr      string `protobuf:"bytes,3,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	ReqMessagId int64  `protobuf:"varint,4,opt,name=req_messagId,json=reqMessagId,proto3" json:"req_messagId,omitempty"`
	ReqBytes    []byte `protobuf:"bytes,5,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`
	Phone       string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (m *GetAccountInfoReq) Reset()                    { *m = GetAccountInfoReq{} }
func (m *GetAccountInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetAccountInfoReq) ProtoMessage()               {}
func (*GetAccountInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{0} }

func (m *GetAccountInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetAccountInfoReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *GetAccountInfoReq) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *GetAccountInfoReq) GetReqMessagId() int64 {
	if m != nil {
		return m.ReqMessagId
	}
	return 0
}

func (m *GetAccountInfoReq) GetReqBytes() []byte {
	if m != nil {
		return m.ReqBytes
	}
	return nil
}

func (m *GetAccountInfoReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

// 获取帐号信息的返回
type GetAccountInfoResp struct {
	RespBytes []byte `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"`
}

func (m *GetAccountInfoResp) Reset()                    { *m = GetAccountInfoResp{} }
func (m *GetAccountInfoResp) String() string            { return proto.CompactTextString(m) }
func (*GetAccountInfoResp) ProtoMessage()               {}
func (*GetAccountInfoResp) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{1} }

func (m *GetAccountInfoResp) GetRespBytes() []byte {
	if m != nil {
		return m.RespBytes
	}
	return nil
}

type GetUserAcctInfoReq struct {
	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId  uint64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserIp string `protobuf:"bytes,3,opt,name=user_ip,json=userIp,proto3" json:"user_ip,omitempty"`
	Phone  string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (m *GetUserAcctInfoReq) Reset()                    { *m = GetUserAcctInfoReq{} }
func (m *GetUserAcctInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserAcctInfoReq) ProtoMessage()               {}
func (*GetUserAcctInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{2} }

func (m *GetUserAcctInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUserAcctInfoReq) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *GetUserAcctInfoReq) GetUserIp() string {
	if m != nil {
		return m.UserIp
	}
	return ""
}

func (m *GetUserAcctInfoReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

// 获取帐号信息的返回
type GetUserAcctInfoRsp struct {
	ResCode int32  `protobuf:"varint,1,opt,name=ResCode,proto3" json:"ResCode,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	ResData string `protobuf:"bytes,3,opt,name=ResData,proto3" json:"ResData,omitempty"`
}

func (m *GetUserAcctInfoRsp) Reset()                    { *m = GetUserAcctInfoRsp{} }
func (m *GetUserAcctInfoRsp) String() string            { return proto.CompactTextString(m) }
func (*GetUserAcctInfoRsp) ProtoMessage()               {}
func (*GetUserAcctInfoRsp) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{3} }

func (m *GetUserAcctInfoRsp) GetResCode() int32 {
	if m != nil {
		return m.ResCode
	}
	return 0
}

func (m *GetUserAcctInfoRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetUserAcctInfoRsp) GetResData() string {
	if m != nil {
		return m.ResData
	}
	return ""
}

// 创建帐号协议请球
type CreateAccountReq struct {
	UserId      int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId       int64  `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	IpAddr      string `protobuf:"bytes,3,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	ReqMessagId int64  `protobuf:"varint,4,opt,name=req_messagId,json=reqMessagId,proto3" json:"req_messagId,omitempty"`
	Phone       string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	ReqBytes    []byte `protobuf:"bytes,6,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`
}

func (m *CreateAccountReq) Reset()                    { *m = CreateAccountReq{} }
func (m *CreateAccountReq) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountReq) ProtoMessage()               {}
func (*CreateAccountReq) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{4} }

func (m *CreateAccountReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateAccountReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *CreateAccountReq) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *CreateAccountReq) GetReqMessagId() int64 {
	if m != nil {
		return m.ReqMessagId
	}
	return 0
}

func (m *CreateAccountReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *CreateAccountReq) GetReqBytes() []byte {
	if m != nil {
		return m.ReqBytes
	}
	return nil
}

type NotificationReq struct {
	UserId  int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Msg     string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	MsgType int32  `protobuf:"varint,3,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`
}

func (m *NotificationReq) Reset()                    { *m = NotificationReq{} }
func (m *NotificationReq) String() string            { return proto.CompactTextString(m) }
func (*NotificationReq) ProtoMessage()               {}
func (*NotificationReq) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{5} }

func (m *NotificationReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *NotificationReq) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *NotificationReq) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

type NotificationResp struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *NotificationResp) Reset()                    { *m = NotificationResp{} }
func (m *NotificationResp) String() string            { return proto.CompactTextString(m) }
func (*NotificationResp) ProtoMessage()               {}
func (*NotificationResp) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{6} }

func (m *NotificationResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *NotificationResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 创建帐号帐号信息的返回
type CreateAccountResp struct {
	RespBytes []byte `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"`
}

func (m *CreateAccountResp) Reset()                    { *m = CreateAccountResp{} }
func (m *CreateAccountResp) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountResp) ProtoMessage()               {}
func (*CreateAccountResp) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{7} }

func (m *CreateAccountResp) GetRespBytes() []byte {
	if m != nil {
		return m.RespBytes
	}
	return nil
}

// 查询订单列表协议接口请球
type GetOrderListReq struct {
	UserId      int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId       int64  `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	IpAddr      string `protobuf:"bytes,3,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	ReqMessagId int64  `protobuf:"varint,4,opt,name=req_messagId,json=reqMessagId,proto3" json:"req_messagId,omitempty"`
	ReqBytes    []byte `protobuf:"bytes,5,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`
}

func (m *GetOrderListReq) Reset()                    { *m = GetOrderListReq{} }
func (m *GetOrderListReq) String() string            { return proto.CompactTextString(m) }
func (*GetOrderListReq) ProtoMessage()               {}
func (*GetOrderListReq) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{8} }

func (m *GetOrderListReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetOrderListReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *GetOrderListReq) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *GetOrderListReq) GetReqMessagId() int64 {
	if m != nil {
		return m.ReqMessagId
	}
	return 0
}

func (m *GetOrderListReq) GetReqBytes() []byte {
	if m != nil {
		return m.ReqBytes
	}
	return nil
}

// 查询订单列表协议接口的返回
type GetOrderListResp struct {
	RespBytes []byte `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"`
}

func (m *GetOrderListResp) Reset()                    { *m = GetOrderListResp{} }
func (m *GetOrderListResp) String() string            { return proto.CompactTextString(m) }
func (*GetOrderListResp) ProtoMessage()               {}
func (*GetOrderListResp) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{9} }

func (m *GetOrderListResp) GetRespBytes() []byte {
	if m != nil {
		return m.RespBytes
	}
	return nil
}

// 其它帐号支付协议走的协议接口请球
type OtherTransReq struct {
	UserId      int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyId       int64  `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	IpAddr      string `protobuf:"bytes,3,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	ReqMessagId int64  `protobuf:"varint,4,opt,name=req_messagId,json=reqMessagId,proto3" json:"req_messagId,omitempty"`
	ReqBytes    []byte `protobuf:"bytes,5,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`
	Phone       string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (m *OtherTransReq) Reset()                    { *m = OtherTransReq{} }
func (m *OtherTransReq) String() string            { return proto.CompactTextString(m) }
func (*OtherTransReq) ProtoMessage()               {}
func (*OtherTransReq) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{10} }

func (m *OtherTransReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *OtherTransReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *OtherTransReq) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *OtherTransReq) GetReqMessagId() int64 {
	if m != nil {
		return m.ReqMessagId
	}
	return 0
}

func (m *OtherTransReq) GetReqBytes() []byte {
	if m != nil {
		return m.ReqBytes
	}
	return nil
}

func (m *OtherTransReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

// 其它帐号支付协议走的协议接口的返回
type OtherTransResp struct {
	RespBytes []byte `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"`
}

func (m *OtherTransResp) Reset()                    { *m = OtherTransResp{} }
func (m *OtherTransResp) String() string            { return proto.CompactTextString(m) }
func (*OtherTransResp) ProtoMessage()               {}
func (*OtherTransResp) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{11} }

func (m *OtherTransResp) GetRespBytes() []byte {
	if m != nil {
		return m.RespBytes
	}
	return nil
}

// 设置红包/转账请求
type SetRDPReq struct {
	Debug        *pbcomm.Debug `protobuf:"bytes,1,opt,name=Debug" json:"Debug,omitempty"`
	ReqMessageId int64         `protobuf:"varint,2,opt,name=req_messageId,json=reqMessageId,proto3" json:"req_messageId,omitempty"`
	ReqBytes     []byte        `protobuf:"bytes,3,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`
}

func (m *SetRDPReq) Reset()                    { *m = SetRDPReq{} }
func (m *SetRDPReq) String() string            { return proto.CompactTextString(m) }
func (*SetRDPReq) ProtoMessage()               {}
func (*SetRDPReq) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{12} }

func (m *SetRDPReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *SetRDPReq) GetReqMessageId() int64 {
	if m != nil {
		return m.ReqMessageId
	}
	return 0
}

func (m *SetRDPReq) GetReqBytes() []byte {
	if m != nil {
		return m.ReqBytes
	}
	return nil
}

// 设置红包/转账返回
type SetRDPResp struct {
	RespBytes []byte `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"`
}

func (m *SetRDPResp) Reset()                    { *m = SetRDPResp{} }
func (m *SetRDPResp) String() string            { return proto.CompactTextString(m) }
func (*SetRDPResp) ProtoMessage()               {}
func (*SetRDPResp) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{13} }

func (m *SetRDPResp) GetRespBytes() []byte {
	if m != nil {
		return m.RespBytes
	}
	return nil
}

// 发送红包请求
type SendRDPReq struct {
	Debug        *pbcomm.Debug `protobuf:"bytes,1,opt,name=Debug" json:"Debug,omitempty"`
	ReqMessageId int64         `protobuf:"varint,2,opt,name=req_messageId,json=reqMessageId,proto3" json:"req_messageId,omitempty"`
	ReqBytes     []byte        `protobuf:"bytes,3,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`
	RedMessageId int32         `protobuf:"varint,4,opt,name=red_messageId,json=redMessageId,proto3" json:"red_messageId,omitempty"`
	RedChanelId  int32         `protobuf:"varint,5,opt,name=red_chanelId,json=redChanelId,proto3" json:"red_chanelId,omitempty"`
}

func (m *SendRDPReq) Reset()                    { *m = SendRDPReq{} }
func (m *SendRDPReq) String() string            { return proto.CompactTextString(m) }
func (*SendRDPReq) ProtoMessage()               {}
func (*SendRDPReq) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{14} }

func (m *SendRDPReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *SendRDPReq) GetReqMessageId() int64 {
	if m != nil {
		return m.ReqMessageId
	}
	return 0
}

func (m *SendRDPReq) GetReqBytes() []byte {
	if m != nil {
		return m.ReqBytes
	}
	return nil
}

func (m *SendRDPReq) GetRedMessageId() int32 {
	if m != nil {
		return m.RedMessageId
	}
	return 0
}

func (m *SendRDPReq) GetRedChanelId() int32 {
	if m != nil {
		return m.RedChanelId
	}
	return 0
}

// 发送红包/转账返回
type SendRDPResp struct {
	RespBytes []byte `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"`
}

func (m *SendRDPResp) Reset()                    { *m = SendRDPResp{} }
func (m *SendRDPResp) String() string            { return proto.CompactTextString(m) }
func (*SendRDPResp) ProtoMessage()               {}
func (*SendRDPResp) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{15} }

func (m *SendRDPResp) GetRespBytes() []byte {
	if m != nil {
		return m.RespBytes
	}
	return nil
}

// 查看红包/转账请求
type CheckRDPReq struct {
	Debug        *pbcomm.Debug `protobuf:"bytes,1,opt,name=Debug" json:"Debug,omitempty"`
	ReqMessageId int64         `protobuf:"varint,2,opt,name=req_messageId,json=reqMessageId,proto3" json:"req_messageId,omitempty"`
	ReqBytes     []byte        `protobuf:"bytes,3,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`
}

func (m *CheckRDPReq) Reset()                    { *m = CheckRDPReq{} }
func (m *CheckRDPReq) String() string            { return proto.CompactTextString(m) }
func (*CheckRDPReq) ProtoMessage()               {}
func (*CheckRDPReq) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{16} }

func (m *CheckRDPReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *CheckRDPReq) GetReqMessageId() int64 {
	if m != nil {
		return m.ReqMessageId
	}
	return 0
}

func (m *CheckRDPReq) GetReqBytes() []byte {
	if m != nil {
		return m.ReqBytes
	}
	return nil
}

// 查看红包/转账返回
type CheckRDPResp struct {
	RespBytes []byte `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"`
}

func (m *CheckRDPResp) Reset()                    { *m = CheckRDPResp{} }
func (m *CheckRDPResp) String() string            { return proto.CompactTextString(m) }
func (*CheckRDPResp) ProtoMessage()               {}
func (*CheckRDPResp) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{17} }

func (m *CheckRDPResp) GetRespBytes() []byte {
	if m != nil {
		return m.RespBytes
	}
	return nil
}

// 接收红包/转账请求
type ReceiveRDPReq struct {
	Debug        *pbcomm.Debug `protobuf:"bytes,1,opt,name=Debug" json:"Debug,omitempty"`
	ReqMessageId int64         `protobuf:"varint,2,opt,name=req_messageId,json=reqMessageId,proto3" json:"req_messageId,omitempty"`
	ReqBytes     []byte        `protobuf:"bytes,3,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`
}

func (m *ReceiveRDPReq) Reset()                    { *m = ReceiveRDPReq{} }
func (m *ReceiveRDPReq) String() string            { return proto.CompactTextString(m) }
func (*ReceiveRDPReq) ProtoMessage()               {}
func (*ReceiveRDPReq) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{18} }

func (m *ReceiveRDPReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *ReceiveRDPReq) GetReqMessageId() int64 {
	if m != nil {
		return m.ReqMessageId
	}
	return 0
}

func (m *ReceiveRDPReq) GetReqBytes() []byte {
	if m != nil {
		return m.ReqBytes
	}
	return nil
}

// 接收红包/转账返回
type ReceiveRDPResp struct {
	RespBytes []byte `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"`
}

func (m *ReceiveRDPResp) Reset()                    { *m = ReceiveRDPResp{} }
func (m *ReceiveRDPResp) String() string            { return proto.CompactTextString(m) }
func (*ReceiveRDPResp) ProtoMessage()               {}
func (*ReceiveRDPResp) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{19} }

func (m *ReceiveRDPResp) GetRespBytes() []byte {
	if m != nil {
		return m.RespBytes
	}
	return nil
}

// 查看红包/转账详情请求
type QueryRDPReq struct {
	Debug        *pbcomm.Debug `protobuf:"bytes,1,opt,name=Debug" json:"Debug,omitempty"`
	ReqMessageId int64         `protobuf:"varint,2,opt,name=req_messageId,json=reqMessageId,proto3" json:"req_messageId,omitempty"`
	ReqBytes     []byte        `protobuf:"bytes,3,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`
}

func (m *QueryRDPReq) Reset()                    { *m = QueryRDPReq{} }
func (m *QueryRDPReq) String() string            { return proto.CompactTextString(m) }
func (*QueryRDPReq) ProtoMessage()               {}
func (*QueryRDPReq) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{20} }

func (m *QueryRDPReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *QueryRDPReq) GetReqMessageId() int64 {
	if m != nil {
		return m.ReqMessageId
	}
	return 0
}

func (m *QueryRDPReq) GetReqBytes() []byte {
	if m != nil {
		return m.ReqBytes
	}
	return nil
}

// 查看红包/转账详情返回
type QueryRDPResp struct {
	RespBytes []byte `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"`
}

func (m *QueryRDPResp) Reset()                    { *m = QueryRDPResp{} }
func (m *QueryRDPResp) String() string            { return proto.CompactTextString(m) }
func (*QueryRDPResp) ProtoMessage()               {}
func (*QueryRDPResp) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{21} }

func (m *QueryRDPResp) GetRespBytes() []byte {
	if m != nil {
		return m.RespBytes
	}
	return nil
}

// 查看红包/转账历史记录请求
type QueryRDPHistoryReq struct {
	Debug        *pbcomm.Debug `protobuf:"bytes,1,opt,name=Debug" json:"Debug,omitempty"`
	ReqMessageId int64         `protobuf:"varint,2,opt,name=req_messageId,json=reqMessageId,proto3" json:"req_messageId,omitempty"`
	ReqBytes     []byte        `protobuf:"bytes,3,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`
}

func (m *QueryRDPHistoryReq) Reset()                    { *m = QueryRDPHistoryReq{} }
func (m *QueryRDPHistoryReq) String() string            { return proto.CompactTextString(m) }
func (*QueryRDPHistoryReq) ProtoMessage()               {}
func (*QueryRDPHistoryReq) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{22} }

func (m *QueryRDPHistoryReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *QueryRDPHistoryReq) GetReqMessageId() int64 {
	if m != nil {
		return m.ReqMessageId
	}
	return 0
}

func (m *QueryRDPHistoryReq) GetReqBytes() []byte {
	if m != nil {
		return m.ReqBytes
	}
	return nil
}

// 查看红包/转账历史记录返回
type QueryRDPHistoryResp struct {
	RespBytes []byte `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"`
}

func (m *QueryRDPHistoryResp) Reset()                    { *m = QueryRDPHistoryResp{} }
func (m *QueryRDPHistoryResp) String() string            { return proto.CompactTextString(m) }
func (*QueryRDPHistoryResp) ProtoMessage()               {}
func (*QueryRDPHistoryResp) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{23} }

func (m *QueryRDPHistoryResp) GetRespBytes() []byte {
	if m != nil {
		return m.RespBytes
	}
	return nil
}

// 退还红包/转账详情请求
type RefundRDPReq struct {
	Debug        *pbcomm.Debug `protobuf:"bytes,1,opt,name=Debug" json:"Debug,omitempty"`
	ReqMessageId int64         `protobuf:"varint,2,opt,name=req_messageId,json=reqMessageId,proto3" json:"req_messageId,omitempty"`
	ReqBytes     []byte        `protobuf:"bytes,3,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`
}

func (m *RefundRDPReq) Reset()                    { *m = RefundRDPReq{} }
func (m *RefundRDPReq) String() string            { return proto.CompactTextString(m) }
func (*RefundRDPReq) ProtoMessage()               {}
func (*RefundRDPReq) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{24} }

func (m *RefundRDPReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *RefundRDPReq) GetReqMessageId() int64 {
	if m != nil {
		return m.ReqMessageId
	}
	return 0
}

func (m *RefundRDPReq) GetReqBytes() []byte {
	if m != nil {
		return m.ReqBytes
	}
	return nil
}

// 退还红包/转账详情返回
type RefundRDPResp struct {
	RespBytes []byte `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"`
}

func (m *RefundRDPResp) Reset()                    { *m = RefundRDPResp{} }
func (m *RefundRDPResp) String() string            { return proto.CompactTextString(m) }
func (*RefundRDPResp) ProtoMessage()               {}
func (*RefundRDPResp) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{25} }

func (m *RefundRDPResp) GetRespBytes() []byte {
	if m != nil {
		return m.RespBytes
	}
	return nil
}

type SaveIconReq struct {
	Debug        *pbcomm.Debug `protobuf:"bytes,1,opt,name=Debug" json:"Debug,omitempty"`
	ReqMessageId int64         `protobuf:"varint,2,opt,name=req_messageId,json=reqMessageId,proto3" json:"req_messageId,omitempty"`
	ReqBytes     []byte        `protobuf:"bytes,3,opt,name=ReqBytes,proto3" json:"ReqBytes,omitempty"`
}

func (m *SaveIconReq) Reset()                    { *m = SaveIconReq{} }
func (m *SaveIconReq) String() string            { return proto.CompactTextString(m) }
func (*SaveIconReq) ProtoMessage()               {}
func (*SaveIconReq) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{26} }

func (m *SaveIconReq) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

func (m *SaveIconReq) GetReqMessageId() int64 {
	if m != nil {
		return m.ReqMessageId
	}
	return 0
}

func (m *SaveIconReq) GetReqBytes() []byte {
	if m != nil {
		return m.ReqBytes
	}
	return nil
}

// 查看红包/转账详情返回
type SaveIconResp struct {
	RespBytes []byte `protobuf:"bytes,1,opt,name=RespBytes,proto3" json:"RespBytes,omitempty"`
}

func (m *SaveIconResp) Reset()                    { *m = SaveIconResp{} }
func (m *SaveIconResp) String() string            { return proto.CompactTextString(m) }
func (*SaveIconResp) ProtoMessage()               {}
func (*SaveIconResp) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{27} }

func (m *SaveIconResp) GetRespBytes() []byte {
	if m != nil {
		return m.RespBytes
	}
	return nil
}

// 创建帐号协议请球
type CreateWalletReq struct {
	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserIp string `protobuf:"bytes,2,opt,name=user_ip,json=userIp,proto3" json:"user_ip,omitempty"`
	Phone  string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	KeyId  int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (m *CreateWalletReq) Reset()                    { *m = CreateWalletReq{} }
func (m *CreateWalletReq) String() string            { return proto.CompactTextString(m) }
func (*CreateWalletReq) ProtoMessage()               {}
func (*CreateWalletReq) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{28} }

func (m *CreateWalletReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateWalletReq) GetUserIp() string {
	if m != nil {
		return m.UserIp
	}
	return ""
}

func (m *CreateWalletReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *CreateWalletReq) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

// 创建帐号协议请球返回
type CreateWalletRsp struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CreateWalletRsp) Reset()                    { *m = CreateWalletRsp{} }
func (m *CreateWalletRsp) String() string            { return proto.CompactTextString(m) }
func (*CreateWalletRsp) ProtoMessage()               {}
func (*CreateWalletRsp) Descriptor() ([]byte, []int) { return fileDescriptorImpayserver, []int{29} }

func (m *CreateWalletRsp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateWalletRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *CreateWalletRsp) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*GetAccountInfoReq)(nil), "impayserver.GetAccountInfoReq")
	proto.RegisterType((*GetAccountInfoResp)(nil), "impayserver.GetAccountInfoResp")
	proto.RegisterType((*GetUserAcctInfoReq)(nil), "impayserver.GetUserAcctInfoReq")
	proto.RegisterType((*GetUserAcctInfoRsp)(nil), "impayserver.GetUserAcctInfoRsp")
	proto.RegisterType((*CreateAccountReq)(nil), "impayserver.CreateAccountReq")
	proto.RegisterType((*NotificationReq)(nil), "impayserver.NotificationReq")
	proto.RegisterType((*NotificationResp)(nil), "impayserver.NotificationResp")
	proto.RegisterType((*CreateAccountResp)(nil), "impayserver.CreateAccountResp")
	proto.RegisterType((*GetOrderListReq)(nil), "impayserver.GetOrderListReq")
	proto.RegisterType((*GetOrderListResp)(nil), "impayserver.GetOrderListResp")
	proto.RegisterType((*OtherTransReq)(nil), "impayserver.OtherTransReq")
	proto.RegisterType((*OtherTransResp)(nil), "impayserver.OtherTransResp")
	proto.RegisterType((*SetRDPReq)(nil), "impayserver.SetRDPReq")
	proto.RegisterType((*SetRDPResp)(nil), "impayserver.SetRDPResp")
	proto.RegisterType((*SendRDPReq)(nil), "impayserver.SendRDPReq")
	proto.RegisterType((*SendRDPResp)(nil), "impayserver.SendRDPResp")
	proto.RegisterType((*CheckRDPReq)(nil), "impayserver.CheckRDPReq")
	proto.RegisterType((*CheckRDPResp)(nil), "impayserver.CheckRDPResp")
	proto.RegisterType((*ReceiveRDPReq)(nil), "impayserver.ReceiveRDPReq")
	proto.RegisterType((*ReceiveRDPResp)(nil), "impayserver.ReceiveRDPResp")
	proto.RegisterType((*QueryRDPReq)(nil), "impayserver.QueryRDPReq")
	proto.RegisterType((*QueryRDPResp)(nil), "impayserver.QueryRDPResp")
	proto.RegisterType((*QueryRDPHistoryReq)(nil), "impayserver.QueryRDPHistoryReq")
	proto.RegisterType((*QueryRDPHistoryResp)(nil), "impayserver.QueryRDPHistoryResp")
	proto.RegisterType((*RefundRDPReq)(nil), "impayserver.RefundRDPReq")
	proto.RegisterType((*RefundRDPResp)(nil), "impayserver.RefundRDPResp")
	proto.RegisterType((*SaveIconReq)(nil), "impayserver.SaveIconReq")
	proto.RegisterType((*SaveIconResp)(nil), "impayserver.SaveIconResp")
	proto.RegisterType((*CreateWalletReq)(nil), "impayserver.CreateWalletReq")
	proto.RegisterType((*CreateWalletRsp)(nil), "impayserver.CreateWalletRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServerService service

type ServerServiceClient interface {
	// 保存文件
	SaveIcon(ctx context.Context, in *SaveIconReq, opts ...grpc.CallOption) (*SaveIconResp, error)
	// 查询账号信息协议
	GetAccountInfo(ctx context.Context, in *GetAccountInfoReq, opts ...grpc.CallOption) (*GetAccountInfoResp, error)
	// 查询账号信息协议
	GetUserAcctInfo(ctx context.Context, in *GetUserAcctInfoReq, opts ...grpc.CallOption) (*GetUserAcctInfoRsp, error)
	// 创建支付帐号协议
	CreateAccount(ctx context.Context, in *CreateAccountReq, opts ...grpc.CallOption) (*CreateAccountResp, error)
	// 、查询订单列表协议接口
	GetOrderList(ctx context.Context, in *GetOrderListReq, opts ...grpc.CallOption) (*GetOrderListResp, error)
	// 其它帐号支付协议走的协议接口
	OtherTrans(ctx context.Context, in *OtherTransReq, opts ...grpc.CallOption) (*OtherTransResp, error)
	PayServerNotification(ctx context.Context, in *NotificationReq, opts ...grpc.CallOption) (*NotificationResp, error)
	// setRDP
	SetRDP(ctx context.Context, in *SetRDPReq, opts ...grpc.CallOption) (*SetRDPResp, error)
	// sendRDP
	SendRDP(ctx context.Context, in *SendRDPReq, opts ...grpc.CallOption) (*SendRDPResp, error)
	// checkRDP
	CheckRDP(ctx context.Context, in *CheckRDPReq, opts ...grpc.CallOption) (*CheckRDPResp, error)
	// receiveRDP
	ReceiveRDP(ctx context.Context, in *ReceiveRDPReq, opts ...grpc.CallOption) (*ReceiveRDPResp, error)
	// queryRDP
	QueryRDP(ctx context.Context, in *QueryRDPReq, opts ...grpc.CallOption) (*QueryRDPResp, error)
	// queryRDPHistory
	QueryRDPHistory(ctx context.Context, in *QueryRDPHistoryReq, opts ...grpc.CallOption) (*QueryRDPHistoryResp, error)
	// refundRDP
	RefundRDP(ctx context.Context, in *RefundRDPReq, opts ...grpc.CallOption) (*RefundRDPResp, error)
	// 创建钱包协议请球
	CreateWallet(ctx context.Context, in *CreateWalletReq, opts ...grpc.CallOption) (*CreateWalletRsp, error)
}

type serverServiceClient struct {
	cc *grpc.ClientConn
}

func NewServerServiceClient(cc *grpc.ClientConn) ServerServiceClient {
	return &serverServiceClient{cc}
}

func (c *serverServiceClient) SaveIcon(ctx context.Context, in *SaveIconReq, opts ...grpc.CallOption) (*SaveIconResp, error) {
	out := new(SaveIconResp)
	err := grpc.Invoke(ctx, "/impayserver.ServerService/SaveIcon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetAccountInfo(ctx context.Context, in *GetAccountInfoReq, opts ...grpc.CallOption) (*GetAccountInfoResp, error) {
	out := new(GetAccountInfoResp)
	err := grpc.Invoke(ctx, "/impayserver.ServerService/GetAccountInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetUserAcctInfo(ctx context.Context, in *GetUserAcctInfoReq, opts ...grpc.CallOption) (*GetUserAcctInfoRsp, error) {
	out := new(GetUserAcctInfoRsp)
	err := grpc.Invoke(ctx, "/impayserver.ServerService/GetUserAcctInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) CreateAccount(ctx context.Context, in *CreateAccountReq, opts ...grpc.CallOption) (*CreateAccountResp, error) {
	out := new(CreateAccountResp)
	err := grpc.Invoke(ctx, "/impayserver.ServerService/CreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetOrderList(ctx context.Context, in *GetOrderListReq, opts ...grpc.CallOption) (*GetOrderListResp, error) {
	out := new(GetOrderListResp)
	err := grpc.Invoke(ctx, "/impayserver.ServerService/GetOrderList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) OtherTrans(ctx context.Context, in *OtherTransReq, opts ...grpc.CallOption) (*OtherTransResp, error) {
	out := new(OtherTransResp)
	err := grpc.Invoke(ctx, "/impayserver.ServerService/OtherTrans", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) PayServerNotification(ctx context.Context, in *NotificationReq, opts ...grpc.CallOption) (*NotificationResp, error) {
	out := new(NotificationResp)
	err := grpc.Invoke(ctx, "/impayserver.ServerService/PayServerNotification", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) SetRDP(ctx context.Context, in *SetRDPReq, opts ...grpc.CallOption) (*SetRDPResp, error) {
	out := new(SetRDPResp)
	err := grpc.Invoke(ctx, "/impayserver.ServerService/SetRDP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) SendRDP(ctx context.Context, in *SendRDPReq, opts ...grpc.CallOption) (*SendRDPResp, error) {
	out := new(SendRDPResp)
	err := grpc.Invoke(ctx, "/impayserver.ServerService/SendRDP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) CheckRDP(ctx context.Context, in *CheckRDPReq, opts ...grpc.CallOption) (*CheckRDPResp, error) {
	out := new(CheckRDPResp)
	err := grpc.Invoke(ctx, "/impayserver.ServerService/CheckRDP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) ReceiveRDP(ctx context.Context, in *ReceiveRDPReq, opts ...grpc.CallOption) (*ReceiveRDPResp, error) {
	out := new(ReceiveRDPResp)
	err := grpc.Invoke(ctx, "/impayserver.ServerService/ReceiveRDP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) QueryRDP(ctx context.Context, in *QueryRDPReq, opts ...grpc.CallOption) (*QueryRDPResp, error) {
	out := new(QueryRDPResp)
	err := grpc.Invoke(ctx, "/impayserver.ServerService/QueryRDP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) QueryRDPHistory(ctx context.Context, in *QueryRDPHistoryReq, opts ...grpc.CallOption) (*QueryRDPHistoryResp, error) {
	out := new(QueryRDPHistoryResp)
	err := grpc.Invoke(ctx, "/impayserver.ServerService/QueryRDPHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) RefundRDP(ctx context.Context, in *RefundRDPReq, opts ...grpc.CallOption) (*RefundRDPResp, error) {
	out := new(RefundRDPResp)
	err := grpc.Invoke(ctx, "/impayserver.ServerService/RefundRDP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) CreateWallet(ctx context.Context, in *CreateWalletReq, opts ...grpc.CallOption) (*CreateWalletRsp, error) {
	out := new(CreateWalletRsp)
	err := grpc.Invoke(ctx, "/impayserver.ServerService/CreateWallet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServerService service

type ServerServiceServer interface {
	// 保存文件
	SaveIcon(context.Context, *SaveIconReq) (*SaveIconResp, error)
	// 查询账号信息协议
	GetAccountInfo(context.Context, *GetAccountInfoReq) (*GetAccountInfoResp, error)
	// 查询账号信息协议
	GetUserAcctInfo(context.Context, *GetUserAcctInfoReq) (*GetUserAcctInfoRsp, error)
	// 创建支付帐号协议
	CreateAccount(context.Context, *CreateAccountReq) (*CreateAccountResp, error)
	// 、查询订单列表协议接口
	GetOrderList(context.Context, *GetOrderListReq) (*GetOrderListResp, error)
	// 其它帐号支付协议走的协议接口
	OtherTrans(context.Context, *OtherTransReq) (*OtherTransResp, error)
	PayServerNotification(context.Context, *NotificationReq) (*NotificationResp, error)
	// setRDP
	SetRDP(context.Context, *SetRDPReq) (*SetRDPResp, error)
	// sendRDP
	SendRDP(context.Context, *SendRDPReq) (*SendRDPResp, error)
	// checkRDP
	CheckRDP(context.Context, *CheckRDPReq) (*CheckRDPResp, error)
	// receiveRDP
	ReceiveRDP(context.Context, *ReceiveRDPReq) (*ReceiveRDPResp, error)
	// queryRDP
	QueryRDP(context.Context, *QueryRDPReq) (*QueryRDPResp, error)
	// queryRDPHistory
	QueryRDPHistory(context.Context, *QueryRDPHistoryReq) (*QueryRDPHistoryResp, error)
	// refundRDP
	RefundRDP(context.Context, *RefundRDPReq) (*RefundRDPResp, error)
	// 创建钱包协议请球
	CreateWallet(context.Context, *CreateWalletReq) (*CreateWalletRsp, error)
}

func RegisterServerServiceServer(s *grpc.Server, srv ServerServiceServer) {
	s.RegisterService(&_ServerService_serviceDesc, srv)
}

func _ServerService_SaveIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveIconReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).SaveIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/SaveIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).SaveIcon(ctx, req.(*SaveIconReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/GetAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetAccountInfo(ctx, req.(*GetAccountInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetUserAcctInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAcctInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetUserAcctInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/GetUserAcctInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetUserAcctInfo(ctx, req.(*GetUserAcctInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CreateAccount(ctx, req.(*CreateAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/GetOrderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetOrderList(ctx, req.(*GetOrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_OtherTrans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtherTransReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).OtherTrans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/OtherTrans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).OtherTrans(ctx, req.(*OtherTransReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_PayServerNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).PayServerNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/PayServerNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).PayServerNotification(ctx, req.(*NotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_SetRDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRDPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).SetRDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/SetRDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).SetRDP(ctx, req.(*SetRDPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_SendRDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRDPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).SendRDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/SendRDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).SendRDP(ctx, req.(*SendRDPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_CheckRDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRDPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CheckRDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/CheckRDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CheckRDP(ctx, req.(*CheckRDPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_ReceiveRDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveRDPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).ReceiveRDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/ReceiveRDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).ReceiveRDP(ctx, req.(*ReceiveRDPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_QueryRDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRDPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).QueryRDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/QueryRDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).QueryRDP(ctx, req.(*QueryRDPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_QueryRDPHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRDPHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).QueryRDPHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/QueryRDPHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).QueryRDPHistory(ctx, req.(*QueryRDPHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_RefundRDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundRDPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).RefundRDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/RefundRDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).RefundRDP(ctx, req.(*RefundRDPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CreateWallet(ctx, req.(*CreateWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "impayserver.ServerService",
	HandlerType: (*ServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveIcon",
			Handler:    _ServerService_SaveIcon_Handler,
		},
		{
			MethodName: "GetAccountInfo",
			Handler:    _ServerService_GetAccountInfo_Handler,
		},
		{
			MethodName: "GetUserAcctInfo",
			Handler:    _ServerService_GetUserAcctInfo_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _ServerService_CreateAccount_Handler,
		},
		{
			MethodName: "GetOrderList",
			Handler:    _ServerService_GetOrderList_Handler,
		},
		{
			MethodName: "OtherTrans",
			Handler:    _ServerService_OtherTrans_Handler,
		},
		{
			MethodName: "PayServerNotification",
			Handler:    _ServerService_PayServerNotification_Handler,
		},
		{
			MethodName: "SetRDP",
			Handler:    _ServerService_SetRDP_Handler,
		},
		{
			MethodName: "SendRDP",
			Handler:    _ServerService_SendRDP_Handler,
		},
		{
			MethodName: "CheckRDP",
			Handler:    _ServerService_CheckRDP_Handler,
		},
		{
			MethodName: "ReceiveRDP",
			Handler:    _ServerService_ReceiveRDP_Handler,
		},
		{
			MethodName: "QueryRDP",
			Handler:    _ServerService_QueryRDP_Handler,
		},
		{
			MethodName: "QueryRDPHistory",
			Handler:    _ServerService_QueryRDPHistory_Handler,
		},
		{
			MethodName: "RefundRDP",
			Handler:    _ServerService_RefundRDP_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _ServerService_CreateWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/impayserver/impayserver.proto",
}

func (m *GetAccountInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.KeyId))
	}
	if len(m.IpAddr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.IpAddr)))
		i += copy(dAtA[i:], m.IpAddr)
	}
	if m.ReqMessagId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.ReqMessagId))
	}
	if len(m.ReqBytes) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.ReqBytes)))
		i += copy(dAtA[i:], m.ReqBytes)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	return i, nil
}

func (m *GetAccountInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RespBytes) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.RespBytes)))
		i += copy(dAtA[i:], m.RespBytes)
	}
	return i, nil
}

func (m *GetUserAcctInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserAcctInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.KeyId))
	}
	if len(m.UserIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.UserIp)))
		i += copy(dAtA[i:], m.UserIp)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	return i, nil
}

func (m *GetUserAcctInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserAcctInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.ResCode))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.ResData) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.ResData)))
		i += copy(dAtA[i:], m.ResData)
	}
	return i, nil
}

func (m *CreateAccountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAccountReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.KeyId))
	}
	if len(m.IpAddr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.IpAddr)))
		i += copy(dAtA[i:], m.IpAddr)
	}
	if m.ReqMessagId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.ReqMessagId))
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if len(m.ReqBytes) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.ReqBytes)))
		i += copy(dAtA[i:], m.ReqBytes)
	}
	return i, nil
}

func (m *NotificationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotificationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.MsgType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.MsgType))
	}
	return i, nil
}

func (m *NotificationResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotificationResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *CreateAccountResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAccountResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RespBytes) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.RespBytes)))
		i += copy(dAtA[i:], m.RespBytes)
	}
	return i, nil
}

func (m *GetOrderListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrderListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.KeyId))
	}
	if len(m.IpAddr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.IpAddr)))
		i += copy(dAtA[i:], m.IpAddr)
	}
	if m.ReqMessagId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.ReqMessagId))
	}
	if len(m.ReqBytes) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.ReqBytes)))
		i += copy(dAtA[i:], m.ReqBytes)
	}
	return i, nil
}

func (m *GetOrderListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrderListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RespBytes) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.RespBytes)))
		i += copy(dAtA[i:], m.RespBytes)
	}
	return i, nil
}

func (m *OtherTransReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OtherTransReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.UserId))
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.KeyId))
	}
	if len(m.IpAddr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.IpAddr)))
		i += copy(dAtA[i:], m.IpAddr)
	}
	if m.ReqMessagId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.ReqMessagId))
	}
	if len(m.ReqBytes) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.ReqBytes)))
		i += copy(dAtA[i:], m.ReqBytes)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	return i, nil
}

func (m *OtherTransResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OtherTransResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RespBytes) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.RespBytes)))
		i += copy(dAtA[i:], m.RespBytes)
	}
	return i, nil
}

func (m *SetRDPReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetRDPReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.Debug.Size()))
		n1, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ReqMessageId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.ReqMessageId))
	}
	if len(m.ReqBytes) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.ReqBytes)))
		i += copy(dAtA[i:], m.ReqBytes)
	}
	return i, nil
}

func (m *SetRDPResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetRDPResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RespBytes) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.RespBytes)))
		i += copy(dAtA[i:], m.RespBytes)
	}
	return i, nil
}

func (m *SendRDPReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendRDPReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.Debug.Size()))
		n2, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ReqMessageId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.ReqMessageId))
	}
	if len(m.ReqBytes) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.ReqBytes)))
		i += copy(dAtA[i:], m.ReqBytes)
	}
	if m.RedMessageId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.RedMessageId))
	}
	if m.RedChanelId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.RedChanelId))
	}
	return i, nil
}

func (m *SendRDPResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendRDPResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RespBytes) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.RespBytes)))
		i += copy(dAtA[i:], m.RespBytes)
	}
	return i, nil
}

func (m *CheckRDPReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckRDPReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.Debug.Size()))
		n3, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.ReqMessageId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.ReqMessageId))
	}
	if len(m.ReqBytes) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.ReqBytes)))
		i += copy(dAtA[i:], m.ReqBytes)
	}
	return i, nil
}

func (m *CheckRDPResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckRDPResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RespBytes) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.RespBytes)))
		i += copy(dAtA[i:], m.RespBytes)
	}
	return i, nil
}

func (m *ReceiveRDPReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReceiveRDPReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.Debug.Size()))
		n4, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.ReqMessageId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.ReqMessageId))
	}
	if len(m.ReqBytes) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.ReqBytes)))
		i += copy(dAtA[i:], m.ReqBytes)
	}
	return i, nil
}

func (m *ReceiveRDPResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReceiveRDPResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RespBytes) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.RespBytes)))
		i += copy(dAtA[i:], m.RespBytes)
	}
	return i, nil
}

func (m *QueryRDPReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRDPReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.Debug.Size()))
		n5, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.ReqMessageId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.ReqMessageId))
	}
	if len(m.ReqBytes) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.ReqBytes)))
		i += copy(dAtA[i:], m.ReqBytes)
	}
	return i, nil
}

func (m *QueryRDPResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRDPResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RespBytes) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.RespBytes)))
		i += copy(dAtA[i:], m.RespBytes)
	}
	return i, nil
}

func (m *QueryRDPHistoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRDPHistoryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.Debug.Size()))
		n6, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.ReqMessageId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.ReqMessageId))
	}
	if len(m.ReqBytes) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.ReqBytes)))
		i += copy(dAtA[i:], m.ReqBytes)
	}
	return i, nil
}

func (m *QueryRDPHistoryResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRDPHistoryResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RespBytes) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.RespBytes)))
		i += copy(dAtA[i:], m.RespBytes)
	}
	return i, nil
}

func (m *RefundRDPReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefundRDPReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.Debug.Size()))
		n7, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.ReqMessageId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.ReqMessageId))
	}
	if len(m.ReqBytes) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.ReqBytes)))
		i += copy(dAtA[i:], m.ReqBytes)
	}
	return i, nil
}

func (m *RefundRDPResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefundRDPResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RespBytes) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.RespBytes)))
		i += copy(dAtA[i:], m.RespBytes)
	}
	return i, nil
}

func (m *SaveIconReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveIconReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.Debug.Size()))
		n8, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.ReqMessageId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.ReqMessageId))
	}
	if len(m.ReqBytes) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.ReqBytes)))
		i += copy(dAtA[i:], m.ReqBytes)
	}
	return i, nil
}

func (m *SaveIconResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveIconResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RespBytes) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.RespBytes)))
		i += copy(dAtA[i:], m.RespBytes)
	}
	return i, nil
}

func (m *CreateWalletReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateWalletReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.UserIp) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.UserIp)))
		i += copy(dAtA[i:], m.UserIp)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.KeyId))
	}
	return i, nil
}

func (m *CreateWalletRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateWalletRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImpayserver(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func encodeVarintImpayserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetAccountInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImpayserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImpayserver(uint64(m.KeyId))
	}
	l = len(m.IpAddr)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	if m.ReqMessagId != 0 {
		n += 1 + sovImpayserver(uint64(m.ReqMessagId))
	}
	l = len(m.ReqBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *GetAccountInfoResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.RespBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *GetUserAcctInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImpayserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImpayserver(uint64(m.KeyId))
	}
	l = len(m.UserIp)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *GetUserAcctInfoRsp) Size() (n int) {
	var l int
	_ = l
	if m.ResCode != 0 {
		n += 1 + sovImpayserver(uint64(m.ResCode))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	l = len(m.ResData)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *CreateAccountReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImpayserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImpayserver(uint64(m.KeyId))
	}
	l = len(m.IpAddr)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	if m.ReqMessagId != 0 {
		n += 1 + sovImpayserver(uint64(m.ReqMessagId))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	l = len(m.ReqBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *NotificationReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImpayserver(uint64(m.UserId))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	if m.MsgType != 0 {
		n += 1 + sovImpayserver(uint64(m.MsgType))
	}
	return n
}

func (m *NotificationResp) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovImpayserver(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *CreateAccountResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.RespBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *GetOrderListReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImpayserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImpayserver(uint64(m.KeyId))
	}
	l = len(m.IpAddr)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	if m.ReqMessagId != 0 {
		n += 1 + sovImpayserver(uint64(m.ReqMessagId))
	}
	l = len(m.ReqBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *GetOrderListResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.RespBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *OtherTransReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImpayserver(uint64(m.UserId))
	}
	if m.KeyId != 0 {
		n += 1 + sovImpayserver(uint64(m.KeyId))
	}
	l = len(m.IpAddr)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	if m.ReqMessagId != 0 {
		n += 1 + sovImpayserver(uint64(m.ReqMessagId))
	}
	l = len(m.ReqBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *OtherTransResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.RespBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *SetRDPReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImpayserver(uint64(l))
	}
	if m.ReqMessageId != 0 {
		n += 1 + sovImpayserver(uint64(m.ReqMessageId))
	}
	l = len(m.ReqBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *SetRDPResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.RespBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *SendRDPReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImpayserver(uint64(l))
	}
	if m.ReqMessageId != 0 {
		n += 1 + sovImpayserver(uint64(m.ReqMessageId))
	}
	l = len(m.ReqBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	if m.RedMessageId != 0 {
		n += 1 + sovImpayserver(uint64(m.RedMessageId))
	}
	if m.RedChanelId != 0 {
		n += 1 + sovImpayserver(uint64(m.RedChanelId))
	}
	return n
}

func (m *SendRDPResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.RespBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *CheckRDPReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImpayserver(uint64(l))
	}
	if m.ReqMessageId != 0 {
		n += 1 + sovImpayserver(uint64(m.ReqMessageId))
	}
	l = len(m.ReqBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *CheckRDPResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.RespBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *ReceiveRDPReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImpayserver(uint64(l))
	}
	if m.ReqMessageId != 0 {
		n += 1 + sovImpayserver(uint64(m.ReqMessageId))
	}
	l = len(m.ReqBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *ReceiveRDPResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.RespBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *QueryRDPReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImpayserver(uint64(l))
	}
	if m.ReqMessageId != 0 {
		n += 1 + sovImpayserver(uint64(m.ReqMessageId))
	}
	l = len(m.ReqBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *QueryRDPResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.RespBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *QueryRDPHistoryReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImpayserver(uint64(l))
	}
	if m.ReqMessageId != 0 {
		n += 1 + sovImpayserver(uint64(m.ReqMessageId))
	}
	l = len(m.ReqBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *QueryRDPHistoryResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.RespBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *RefundRDPReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImpayserver(uint64(l))
	}
	if m.ReqMessageId != 0 {
		n += 1 + sovImpayserver(uint64(m.ReqMessageId))
	}
	l = len(m.ReqBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *RefundRDPResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.RespBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *SaveIconReq) Size() (n int) {
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovImpayserver(uint64(l))
	}
	if m.ReqMessageId != 0 {
		n += 1 + sovImpayserver(uint64(m.ReqMessageId))
	}
	l = len(m.ReqBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *SaveIconResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.RespBytes)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func (m *CreateWalletReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovImpayserver(uint64(m.UserId))
	}
	l = len(m.UserIp)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovImpayserver(uint64(m.KeyId))
	}
	return n
}

func (m *CreateWalletRsp) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovImpayserver(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImpayserver(uint64(l))
	}
	return n
}

func sovImpayserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozImpayserver(x uint64) (n int) {
	return sovImpayserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetAccountInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMessagId", wireType)
			}
			m.ReqMessagId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMessagId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqBytes = append(m.ReqBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqBytes == nil {
				m.ReqBytes = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBytes = append(m.RespBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RespBytes == nil {
				m.RespBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserAcctInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserAcctInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserAcctInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserAcctInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserAcctInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserAcctInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResCode", wireType)
			}
			m.ResCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAccountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAccountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAccountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMessagId", wireType)
			}
			m.ReqMessagId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMessagId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqBytes = append(m.ReqBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqBytes == nil {
				m.ReqBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotificationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotificationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotificationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotificationResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotificationResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotificationResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAccountResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAccountResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAccountResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBytes = append(m.RespBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RespBytes == nil {
				m.RespBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrderListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrderListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrderListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMessagId", wireType)
			}
			m.ReqMessagId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMessagId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqBytes = append(m.ReqBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqBytes == nil {
				m.ReqBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrderListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrderListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrderListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBytes = append(m.RespBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RespBytes == nil {
				m.RespBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OtherTransReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OtherTransReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OtherTransReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMessagId", wireType)
			}
			m.ReqMessagId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMessagId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqBytes = append(m.ReqBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqBytes == nil {
				m.ReqBytes = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OtherTransResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OtherTransResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OtherTransResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBytes = append(m.RespBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RespBytes == nil {
				m.RespBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetRDPReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetRDPReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetRDPReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMessageId", wireType)
			}
			m.ReqMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqBytes = append(m.ReqBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqBytes == nil {
				m.ReqBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetRDPResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetRDPResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetRDPResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBytes = append(m.RespBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RespBytes == nil {
				m.RespBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendRDPReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendRDPReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendRDPReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMessageId", wireType)
			}
			m.ReqMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqBytes = append(m.ReqBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqBytes == nil {
				m.ReqBytes = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedMessageId", wireType)
			}
			m.RedMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedMessageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedChanelId", wireType)
			}
			m.RedChanelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedChanelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendRDPResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendRDPResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendRDPResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBytes = append(m.RespBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RespBytes == nil {
				m.RespBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckRDPReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckRDPReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckRDPReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMessageId", wireType)
			}
			m.ReqMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqBytes = append(m.ReqBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqBytes == nil {
				m.ReqBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckRDPResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckRDPResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckRDPResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBytes = append(m.RespBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RespBytes == nil {
				m.RespBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReceiveRDPReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReceiveRDPReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReceiveRDPReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMessageId", wireType)
			}
			m.ReqMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqBytes = append(m.ReqBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqBytes == nil {
				m.ReqBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReceiveRDPResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReceiveRDPResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReceiveRDPResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBytes = append(m.RespBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RespBytes == nil {
				m.RespBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRDPReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRDPReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRDPReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMessageId", wireType)
			}
			m.ReqMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqBytes = append(m.ReqBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqBytes == nil {
				m.ReqBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRDPResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRDPResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRDPResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBytes = append(m.RespBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RespBytes == nil {
				m.RespBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRDPHistoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRDPHistoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRDPHistoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMessageId", wireType)
			}
			m.ReqMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqBytes = append(m.ReqBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqBytes == nil {
				m.ReqBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRDPHistoryResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRDPHistoryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRDPHistoryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBytes = append(m.RespBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RespBytes == nil {
				m.RespBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefundRDPReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefundRDPReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefundRDPReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMessageId", wireType)
			}
			m.ReqMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqBytes = append(m.ReqBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqBytes == nil {
				m.ReqBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefundRDPResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefundRDPResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefundRDPResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBytes = append(m.RespBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RespBytes == nil {
				m.RespBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveIconReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveIconReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveIconReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMessageId", wireType)
			}
			m.ReqMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMessageId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqBytes = append(m.ReqBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ReqBytes == nil {
				m.ReqBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveIconResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveIconResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveIconResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBytes = append(m.RespBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RespBytes == nil {
				m.RespBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateWalletReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateWalletReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateWalletReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateWalletRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateWalletRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateWalletRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImpayserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImpayserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImpayserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImpayserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImpayserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImpayserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthImpayserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowImpayserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipImpayserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthImpayserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImpayserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/impayserver/impayserver.proto", fileDescriptorImpayserver)
}

var fileDescriptorImpayserver = []byte{
	// 1001 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x0e, 0x63, 0x49, 0x96, 0x47, 0x94, 0xed, 0x6c, 0x9b, 0x46, 0x66, 0x13, 0x55, 0x65, 0x2e,
	0x46, 0x7f, 0x94, 0xd6, 0xb9, 0x04, 0x28, 0x50, 0x40, 0xb6, 0x01, 0x57, 0x68, 0xd2, 0xb8, 0x74,
	0xd2, 0x1c, 0x05, 0x8a, 0x3b, 0x92, 0x08, 0x5b, 0x22, 0xb5, 0xbb, 0x32, 0xc0, 0xbe, 0x49, 0x1f,
	0xa2, 0x40, 0x7b, 0xed, 0x13, 0xf4, 0xd8, 0x47, 0x28, 0xfc, 0x14, 0x3d, 0x16, 0x5c, 0x92, 0xe2,
	0x72, 0x65, 0x4b, 0xca, 0x45, 0xc8, 0xc5, 0xda, 0xdd, 0x99, 0x9d, 0xf9, 0x66, 0x66, 0x39, 0xf3,
	0x19, 0x8e, 0x87, 0xbe, 0xb8, 0x72, 0xfb, 0x6d, 0x6f, 0xe4, 0x0a, 0x8e, 0xec, 0x1a, 0x59, 0xdb,
	0x1f, 0x3f, 0xf3, 0x27, 0x02, 0xd9, 0xc0, 0xf5, 0x30, 0x64, 0x41, 0x7f, 0x36, 0x78, 0xe6, 0x8f,
	0x43, 0x37, 0x4a, 0xc4, 0xea, 0xba, 0x1d, 0xb2, 0x40, 0x04, 0xa4, 0xa6, 0x1c, 0x59, 0x2f, 0xd6,
	0x32, 0x18, 0xf6, 0xbd, 0x60, 0x3c, 0x4e, 0x7f, 0x12, 0x33, 0xf6, 0x9f, 0x06, 0x3c, 0x38, 0x43,
	0xd1, 0xf1, 0xbc, 0x60, 0x36, 0x11, 0xdd, 0xc9, 0x20, 0x70, 0x70, 0x4a, 0x1e, 0xc1, 0xf6, 0x8c,
	0x23, 0xeb, 0xf9, 0xb4, 0x61, 0xb4, 0x8c, 0xc3, 0xb2, 0x53, 0x89, 0xb7, 0x5d, 0x4a, 0x1e, 0x42,
	0xe5, 0x12, 0xa3, 0xf8, 0xfc, 0x7e, 0xcb, 0x38, 0xdc, 0x72, 0xca, 0x97, 0x18, 0x75, 0x69, 0xac,
	0xef, 0x87, 0x3d, 0x97, 0x52, 0xd6, 0xd8, 0x6a, 0x19, 0x87, 0x3b, 0x4e, 0xc5, 0x0f, 0x3b, 0x94,
	0x32, 0xf2, 0x39, 0x98, 0x0c, 0xa7, 0xbd, 0x31, 0x72, 0xee, 0x0e, 0xbb, 0xb4, 0x51, 0x92, 0xb7,
	0x6a, 0x0c, 0xa7, 0xaf, 0xd2, 0x23, 0x62, 0x41, 0xd5, 0xc1, 0xe9, 0x71, 0x24, 0x90, 0x37, 0xca,
	0x2d, 0xe3, 0xd0, 0x74, 0xe6, 0x7b, 0xf2, 0x31, 0x94, 0xc3, 0x51, 0x30, 0xc1, 0x46, 0x45, 0x5a,
	0x4d, 0x36, 0xf6, 0x11, 0x10, 0x1d, 0x32, 0x0f, 0xc9, 0x63, 0xd8, 0x89, 0x7f, 0x13, 0x43, 0x86,
	0x34, 0x94, 0x1f, 0xd8, 0x5c, 0xde, 0x79, 0xcb, 0x91, 0x75, 0x3c, 0xef, 0x7d, 0xe3, 0x2c, 0x29,
	0x71, 0x26, 0xfa, 0x61, 0x16, 0xa7, 0xd4, 0x0f, 0x73, 0xa0, 0x25, 0x15, 0x68, 0x7f, 0xd1, 0x29,
	0x0f, 0x49, 0x03, 0xb6, 0x1d, 0xe4, 0x27, 0x01, 0xc5, 0xd4, 0x69, 0xb6, 0x8d, 0x25, 0x49, 0x5a,
	0x50, 0xba, 0xdd, 0x71, 0xb2, 0x6d, 0x7a, 0xe7, 0xd4, 0x15, 0x6e, 0xea, 0x38, 0xdb, 0xda, 0x7f,
	0x18, 0xb0, 0x7f, 0xc2, 0xd0, 0x15, 0x98, 0x26, 0x64, 0xd3, 0xf5, 0x9b, 0x87, 0x5e, 0x56, 0x42,
	0x2f, 0x54, 0xb5, 0x52, 0xac, 0xaa, 0xfd, 0x0e, 0xf6, 0x7e, 0x0a, 0x84, 0x3f, 0xf0, 0x3d, 0x57,
	0xf8, 0xc1, 0x64, 0x29, 0xe0, 0x7d, 0xd8, 0x1a, 0xf3, 0x61, 0x9a, 0x8e, 0x78, 0x49, 0x0e, 0xa0,
	0x3a, 0xe6, 0xc3, 0x9e, 0x88, 0x42, 0x94, 0x60, 0xcb, 0xce, 0xf6, 0x98, 0x0f, 0xdf, 0x44, 0x21,
	0xda, 0x2f, 0x60, 0xbf, 0x68, 0x98, 0x87, 0x84, 0x40, 0xc9, 0xcb, 0x53, 0x2d, 0xd7, 0x8b, 0x46,
	0xed, 0x6f, 0xe1, 0x81, 0x96, 0xc4, 0x95, 0x2f, 0xea, 0x37, 0x03, 0xf6, 0xce, 0x50, 0xbc, 0x66,
	0x14, 0xd9, 0x4b, 0x9f, 0x8b, 0x0f, 0xe8, 0xbb, 0xb1, 0xbf, 0x81, 0xfd, 0x22, 0xb4, 0x95, 0xd1,
	0xfc, 0x6e, 0x40, 0xfd, 0xb5, 0x18, 0x21, 0x7b, 0xc3, 0xdc, 0x09, 0xff, 0xf0, 0x7b, 0x40, 0x1b,
	0x76, 0x55, 0xb8, 0x2b, 0xe3, 0x9b, 0xc2, 0xce, 0x05, 0x0a, 0xe7, 0xf4, 0x3c, 0x0e, 0xed, 0x29,
	0x94, 0x4f, 0xb1, 0x3f, 0x1b, 0x4a, 0xb5, 0xda, 0x51, 0xbd, 0x9d, 0xb6, 0x44, 0x79, 0xe8, 0x24,
	0x32, 0xf2, 0x14, 0xea, 0x39, 0x6c, 0xec, 0x66, 0xd1, 0x9a, 0x73, 0xdc, 0xa8, 0x01, 0xdf, 0xd2,
	0x8a, 0xf0, 0x05, 0x40, 0xe6, 0x72, 0x25, 0xbc, 0xbf, 0x8c, 0x58, 0x79, 0x42, 0x37, 0x09, 0x30,
	0x31, 0x40, 0x15, 0x03, 0x25, 0x59, 0x67, 0x93, 0x21, 0xcd, 0x0d, 0xc8, 0xea, 0xd1, 0x9e, 0x37,
	0x72, 0x27, 0x78, 0xd5, 0xa5, 0xb2, 0x3c, 0xe5, 0xb8, 0x7a, 0xf4, 0x24, 0x3d, 0xb2, 0xbf, 0x84,
	0xda, 0x1c, 0xfb, 0x1a, 0x8d, 0xb8, 0x76, 0x32, 0x42, 0xef, 0x72, 0xa3, 0xa5, 0xf8, 0x0a, 0xcc,
	0xdc, 0xe9, 0x4a, 0x88, 0x33, 0xa8, 0x3b, 0xe8, 0xa1, 0x7f, 0x8d, 0x1b, 0x05, 0xd9, 0x86, 0x5d,
	0xd5, 0xed, 0x3a, 0x99, 0xfc, 0x79, 0x86, 0x2c, 0xda, 0x74, 0x26, 0x73, 0xa7, 0x2b, 0x21, 0xfe,
	0x0a, 0x24, 0xd3, 0xfe, 0xc1, 0xe7, 0x22, 0x60, 0xd1, 0xe6, 0x90, 0x3e, 0x87, 0x8f, 0x16, 0x7c,
	0xaf, 0x04, 0x2c, 0xc0, 0x74, 0x70, 0x30, 0xdb, 0xec, 0x87, 0x68, 0x7f, 0x1d, 0x3f, 0xb8, 0xb9,
	0xd7, 0x75, 0x0a, 0x7f, 0xe1, 0x5e, 0x63, 0xd7, 0x4b, 0x66, 0xe7, 0xc6, 0x0a, 0x9f, 0x3b, 0x5d,
	0x09, 0x31, 0x84, 0xbd, 0x64, 0x9e, 0xbe, 0x73, 0xaf, 0xae, 0x70, 0xf9, 0x6c, 0x54, 0x48, 0xd5,
	0xfd, 0xdb, 0x49, 0xd5, 0x96, 0xca, 0x2c, 0xf2, 0xf1, 0x53, 0x52, 0xc6, 0x8f, 0xfd, 0xa3, 0xe6,
	0x71, 0xdd, 0xd1, 0x1f, 0x6b, 0xd1, 0x9c, 0x57, 0xc9, 0xf5, 0xd1, 0x7f, 0x55, 0xa8, 0x5f, 0x48,
	0x1e, 0x1d, 0xff, 0xf5, 0x3d, 0x24, 0x1d, 0xa8, 0x66, 0xe1, 0x93, 0x46, 0x5b, 0xa5, 0xe3, 0x4a,
	0x29, 0xac, 0x83, 0x3b, 0x24, 0x3c, 0xb4, 0xef, 0x91, 0x0b, 0xd8, 0x2d, 0xd2, 0x56, 0xd2, 0x2c,
	0xa8, 0x2f, 0xd0, 0x70, 0xeb, 0xb3, 0xa5, 0x72, 0x69, 0xf4, 0xad, 0x24, 0x21, 0x2a, 0xc5, 0x24,
	0x0b, 0xb7, 0x34, 0xd6, 0x6b, 0x2d, 0x57, 0x90, 0x66, 0xcf, 0xa1, 0x5e, 0xe0, 0x43, 0xe4, 0x49,
	0xe1, 0x8e, 0x4e, 0x38, 0xad, 0xe6, 0x32, 0xb1, 0xb4, 0xf8, 0x0a, 0x4c, 0x95, 0x92, 0x90, 0xc7,
	0x3a, 0x08, 0x95, 0x48, 0x59, 0x4f, 0x96, 0x48, 0xa5, 0xb9, 0x33, 0x80, 0x7c, 0xfe, 0x13, 0xab,
	0xa0, 0x5e, 0xe0, 0x31, 0xd6, 0xa7, 0x77, 0xca, 0xa4, 0xa1, 0x5f, 0xe0, 0xe1, 0xb9, 0x1b, 0x25,
	0xc5, 0x56, 0xc9, 0xa3, 0x06, 0x50, 0x23, 0xac, 0x1a, 0x40, 0x9d, 0x75, 0xda, 0xf7, 0xc8, 0x77,
	0x50, 0x49, 0xa6, 0x3f, 0xf9, 0xa4, 0xf8, 0x28, 0x32, 0x16, 0x62, 0x3d, 0xba, 0xf5, 0x5c, 0x5e,
	0xfe, 0x1e, 0xb6, 0xd3, 0x89, 0x4a, 0x74, 0xad, 0xac, 0x35, 0x59, 0x8d, 0xdb, 0x05, 0xf2, 0x7e,
	0x07, 0xaa, 0xd9, 0xbc, 0xd3, 0x5e, 0xab, 0x32, 0x7b, 0xb5, 0xd7, 0xaa, 0x0e, 0xc8, 0x24, 0xc1,
	0xf9, 0x34, 0xd2, 0x12, 0x5c, 0x98, 0x8e, 0x5a, 0x82, 0x8b, 0x23, 0x2c, 0xc1, 0x92, 0xf5, 0x61,
	0x0d, 0x8b, 0x32, 0xbd, 0x34, 0x2c, 0xea, 0x88, 0x91, 0x35, 0xda, 0xd3, 0x5a, 0xb9, 0xf6, 0xc8,
	0x17, 0x87, 0x8c, 0xd5, 0x5a, 0xae, 0x20, 0xed, 0x9e, 0xc6, 0x3d, 0x2c, 0xed, 0xbb, 0xe4, 0x40,
	0x0b, 0x23, 0x9f, 0x02, 0x96, 0x75, 0x97, 0x48, 0x5a, 0x79, 0x09, 0xa6, 0xda, 0x79, 0xb4, 0x87,
	0xa3, 0xb5, 0x41, 0x6b, 0x89, 0x34, 0xb6, 0x76, 0x6c, 0xfe, 0x7d, 0xd3, 0x34, 0xfe, 0xb9, 0x69,
	0x1a, 0xff, 0xde, 0x34, 0x8d, 0x7e, 0x45, 0xfe, 0x97, 0xfe, 0xfc, 0xff, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x42, 0x77, 0x62, 0xbd, 0x32, 0x10, 0x00, 0x00,
}
