// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: impayserver.proto

package impayserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerServiceClient is the client API for ServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerServiceClient interface {
	// 保存文件
	SaveIcon(ctx context.Context, in *SaveIconReq, opts ...grpc.CallOption) (*SaveIconResp, error)
	// 查询账号信息协议
	GetAccountInfo(ctx context.Context, in *GetAccountInfoReq, opts ...grpc.CallOption) (*GetAccountInfoResp, error)
	// 查询账号信息协议
	GetUserAcctInfo(ctx context.Context, in *GetUserAcctInfoReq, opts ...grpc.CallOption) (*GetUserAcctInfoRsp, error)
	// 创建支付帐号协议
	CreateAccount(ctx context.Context, in *CreateAccountReq, opts ...grpc.CallOption) (*CreateAccountResp, error)
	// 、查询订单列表协议接口
	GetOrderList(ctx context.Context, in *GetOrderListReq, opts ...grpc.CallOption) (*GetOrderListResp, error)
	// 其它帐号支付协议走的协议接口
	OtherTrans(ctx context.Context, in *OtherTransReq, opts ...grpc.CallOption) (*OtherTransResp, error)
	PayServerNotification(ctx context.Context, in *NotificationReq, opts ...grpc.CallOption) (*NotificationResp, error)
	// setRDP
	SetRDP(ctx context.Context, in *SetRDPReq, opts ...grpc.CallOption) (*SetRDPResp, error)
	// sendRDP
	SendRDP(ctx context.Context, in *SendRDPReq, opts ...grpc.CallOption) (*SendRDPResp, error)
	// checkRDP
	CheckRDP(ctx context.Context, in *CheckRDPReq, opts ...grpc.CallOption) (*CheckRDPResp, error)
	// receiveRDP
	ReceiveRDP(ctx context.Context, in *ReceiveRDPReq, opts ...grpc.CallOption) (*ReceiveRDPResp, error)
	// queryRDP
	QueryRDP(ctx context.Context, in *QueryRDPReq, opts ...grpc.CallOption) (*QueryRDPResp, error)
	// queryRDPHistory
	QueryRDPHistory(ctx context.Context, in *QueryRDPHistoryReq, opts ...grpc.CallOption) (*QueryRDPHistoryResp, error)
	// refundRDP
	RefundRDP(ctx context.Context, in *RefundRDPReq, opts ...grpc.CallOption) (*RefundRDPResp, error)
	// 创建钱包协议请球
	CreateWallet(ctx context.Context, in *CreateWalletReq, opts ...grpc.CallOption) (*CreateWalletRsp, error)
}

type serverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerServiceClient(cc grpc.ClientConnInterface) ServerServiceClient {
	return &serverServiceClient{cc}
}

func (c *serverServiceClient) SaveIcon(ctx context.Context, in *SaveIconReq, opts ...grpc.CallOption) (*SaveIconResp, error) {
	out := new(SaveIconResp)
	err := c.cc.Invoke(ctx, "/impayserver.ServerService/SaveIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetAccountInfo(ctx context.Context, in *GetAccountInfoReq, opts ...grpc.CallOption) (*GetAccountInfoResp, error) {
	out := new(GetAccountInfoResp)
	err := c.cc.Invoke(ctx, "/impayserver.ServerService/GetAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetUserAcctInfo(ctx context.Context, in *GetUserAcctInfoReq, opts ...grpc.CallOption) (*GetUserAcctInfoRsp, error) {
	out := new(GetUserAcctInfoRsp)
	err := c.cc.Invoke(ctx, "/impayserver.ServerService/GetUserAcctInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) CreateAccount(ctx context.Context, in *CreateAccountReq, opts ...grpc.CallOption) (*CreateAccountResp, error) {
	out := new(CreateAccountResp)
	err := c.cc.Invoke(ctx, "/impayserver.ServerService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) GetOrderList(ctx context.Context, in *GetOrderListReq, opts ...grpc.CallOption) (*GetOrderListResp, error) {
	out := new(GetOrderListResp)
	err := c.cc.Invoke(ctx, "/impayserver.ServerService/GetOrderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) OtherTrans(ctx context.Context, in *OtherTransReq, opts ...grpc.CallOption) (*OtherTransResp, error) {
	out := new(OtherTransResp)
	err := c.cc.Invoke(ctx, "/impayserver.ServerService/OtherTrans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) PayServerNotification(ctx context.Context, in *NotificationReq, opts ...grpc.CallOption) (*NotificationResp, error) {
	out := new(NotificationResp)
	err := c.cc.Invoke(ctx, "/impayserver.ServerService/PayServerNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) SetRDP(ctx context.Context, in *SetRDPReq, opts ...grpc.CallOption) (*SetRDPResp, error) {
	out := new(SetRDPResp)
	err := c.cc.Invoke(ctx, "/impayserver.ServerService/SetRDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) SendRDP(ctx context.Context, in *SendRDPReq, opts ...grpc.CallOption) (*SendRDPResp, error) {
	out := new(SendRDPResp)
	err := c.cc.Invoke(ctx, "/impayserver.ServerService/SendRDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) CheckRDP(ctx context.Context, in *CheckRDPReq, opts ...grpc.CallOption) (*CheckRDPResp, error) {
	out := new(CheckRDPResp)
	err := c.cc.Invoke(ctx, "/impayserver.ServerService/CheckRDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) ReceiveRDP(ctx context.Context, in *ReceiveRDPReq, opts ...grpc.CallOption) (*ReceiveRDPResp, error) {
	out := new(ReceiveRDPResp)
	err := c.cc.Invoke(ctx, "/impayserver.ServerService/ReceiveRDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) QueryRDP(ctx context.Context, in *QueryRDPReq, opts ...grpc.CallOption) (*QueryRDPResp, error) {
	out := new(QueryRDPResp)
	err := c.cc.Invoke(ctx, "/impayserver.ServerService/QueryRDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) QueryRDPHistory(ctx context.Context, in *QueryRDPHistoryReq, opts ...grpc.CallOption) (*QueryRDPHistoryResp, error) {
	out := new(QueryRDPHistoryResp)
	err := c.cc.Invoke(ctx, "/impayserver.ServerService/QueryRDPHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) RefundRDP(ctx context.Context, in *RefundRDPReq, opts ...grpc.CallOption) (*RefundRDPResp, error) {
	out := new(RefundRDPResp)
	err := c.cc.Invoke(ctx, "/impayserver.ServerService/RefundRDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) CreateWallet(ctx context.Context, in *CreateWalletReq, opts ...grpc.CallOption) (*CreateWalletRsp, error) {
	out := new(CreateWalletRsp)
	err := c.cc.Invoke(ctx, "/impayserver.ServerService/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServiceServer is the server API for ServerService service.
// All implementations must embed UnimplementedServerServiceServer
// for forward compatibility
type ServerServiceServer interface {
	// 保存文件
	SaveIcon(context.Context, *SaveIconReq) (*SaveIconResp, error)
	// 查询账号信息协议
	GetAccountInfo(context.Context, *GetAccountInfoReq) (*GetAccountInfoResp, error)
	// 查询账号信息协议
	GetUserAcctInfo(context.Context, *GetUserAcctInfoReq) (*GetUserAcctInfoRsp, error)
	// 创建支付帐号协议
	CreateAccount(context.Context, *CreateAccountReq) (*CreateAccountResp, error)
	// 、查询订单列表协议接口
	GetOrderList(context.Context, *GetOrderListReq) (*GetOrderListResp, error)
	// 其它帐号支付协议走的协议接口
	OtherTrans(context.Context, *OtherTransReq) (*OtherTransResp, error)
	PayServerNotification(context.Context, *NotificationReq) (*NotificationResp, error)
	// setRDP
	SetRDP(context.Context, *SetRDPReq) (*SetRDPResp, error)
	// sendRDP
	SendRDP(context.Context, *SendRDPReq) (*SendRDPResp, error)
	// checkRDP
	CheckRDP(context.Context, *CheckRDPReq) (*CheckRDPResp, error)
	// receiveRDP
	ReceiveRDP(context.Context, *ReceiveRDPReq) (*ReceiveRDPResp, error)
	// queryRDP
	QueryRDP(context.Context, *QueryRDPReq) (*QueryRDPResp, error)
	// queryRDPHistory
	QueryRDPHistory(context.Context, *QueryRDPHistoryReq) (*QueryRDPHistoryResp, error)
	// refundRDP
	RefundRDP(context.Context, *RefundRDPReq) (*RefundRDPResp, error)
	// 创建钱包协议请球
	CreateWallet(context.Context, *CreateWalletReq) (*CreateWalletRsp, error)
	mustEmbedUnimplementedServerServiceServer()
}

// UnimplementedServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerServiceServer struct {
}

func (UnimplementedServerServiceServer) SaveIcon(context.Context, *SaveIconReq) (*SaveIconResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveIcon not implemented")
}
func (UnimplementedServerServiceServer) GetAccountInfo(context.Context, *GetAccountInfoReq) (*GetAccountInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountInfo not implemented")
}
func (UnimplementedServerServiceServer) GetUserAcctInfo(context.Context, *GetUserAcctInfoReq) (*GetUserAcctInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAcctInfo not implemented")
}
func (UnimplementedServerServiceServer) CreateAccount(context.Context, *CreateAccountReq) (*CreateAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedServerServiceServer) GetOrderList(context.Context, *GetOrderListReq) (*GetOrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderList not implemented")
}
func (UnimplementedServerServiceServer) OtherTrans(context.Context, *OtherTransReq) (*OtherTransResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtherTrans not implemented")
}
func (UnimplementedServerServiceServer) PayServerNotification(context.Context, *NotificationReq) (*NotificationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayServerNotification not implemented")
}
func (UnimplementedServerServiceServer) SetRDP(context.Context, *SetRDPReq) (*SetRDPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRDP not implemented")
}
func (UnimplementedServerServiceServer) SendRDP(context.Context, *SendRDPReq) (*SendRDPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRDP not implemented")
}
func (UnimplementedServerServiceServer) CheckRDP(context.Context, *CheckRDPReq) (*CheckRDPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRDP not implemented")
}
func (UnimplementedServerServiceServer) ReceiveRDP(context.Context, *ReceiveRDPReq) (*ReceiveRDPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveRDP not implemented")
}
func (UnimplementedServerServiceServer) QueryRDP(context.Context, *QueryRDPReq) (*QueryRDPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRDP not implemented")
}
func (UnimplementedServerServiceServer) QueryRDPHistory(context.Context, *QueryRDPHistoryReq) (*QueryRDPHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRDPHistory not implemented")
}
func (UnimplementedServerServiceServer) RefundRDP(context.Context, *RefundRDPReq) (*RefundRDPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundRDP not implemented")
}
func (UnimplementedServerServiceServer) CreateWallet(context.Context, *CreateWalletReq) (*CreateWalletRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedServerServiceServer) mustEmbedUnimplementedServerServiceServer() {}

// UnsafeServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServiceServer will
// result in compilation errors.
type UnsafeServerServiceServer interface {
	mustEmbedUnimplementedServerServiceServer()
}

func RegisterServerServiceServer(s grpc.ServiceRegistrar, srv ServerServiceServer) {
	s.RegisterService(&ServerService_ServiceDesc, srv)
}

func _ServerService_SaveIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveIconReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).SaveIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/SaveIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).SaveIcon(ctx, req.(*SaveIconReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/GetAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetAccountInfo(ctx, req.(*GetAccountInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetUserAcctInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAcctInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetUserAcctInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/GetUserAcctInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetUserAcctInfo(ctx, req.(*GetUserAcctInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CreateAccount(ctx, req.(*CreateAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_GetOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).GetOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/GetOrderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).GetOrderList(ctx, req.(*GetOrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_OtherTrans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtherTransReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).OtherTrans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/OtherTrans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).OtherTrans(ctx, req.(*OtherTransReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_PayServerNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).PayServerNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/PayServerNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).PayServerNotification(ctx, req.(*NotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_SetRDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRDPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).SetRDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/SetRDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).SetRDP(ctx, req.(*SetRDPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_SendRDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRDPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).SendRDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/SendRDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).SendRDP(ctx, req.(*SendRDPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_CheckRDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRDPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CheckRDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/CheckRDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CheckRDP(ctx, req.(*CheckRDPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_ReceiveRDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveRDPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).ReceiveRDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/ReceiveRDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).ReceiveRDP(ctx, req.(*ReceiveRDPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_QueryRDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRDPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).QueryRDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/QueryRDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).QueryRDP(ctx, req.(*QueryRDPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_QueryRDPHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRDPHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).QueryRDPHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/QueryRDPHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).QueryRDPHistory(ctx, req.(*QueryRDPHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_RefundRDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundRDPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).RefundRDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/RefundRDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).RefundRDP(ctx, req.(*RefundRDPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impayserver.ServerService/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CreateWallet(ctx, req.(*CreateWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerService_ServiceDesc is the grpc.ServiceDesc for ServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "impayserver.ServerService",
	HandlerType: (*ServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveIcon",
			Handler:    _ServerService_SaveIcon_Handler,
		},
		{
			MethodName: "GetAccountInfo",
			Handler:    _ServerService_GetAccountInfo_Handler,
		},
		{
			MethodName: "GetUserAcctInfo",
			Handler:    _ServerService_GetUserAcctInfo_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _ServerService_CreateAccount_Handler,
		},
		{
			MethodName: "GetOrderList",
			Handler:    _ServerService_GetOrderList_Handler,
		},
		{
			MethodName: "OtherTrans",
			Handler:    _ServerService_OtherTrans_Handler,
		},
		{
			MethodName: "PayServerNotification",
			Handler:    _ServerService_PayServerNotification_Handler,
		},
		{
			MethodName: "SetRDP",
			Handler:    _ServerService_SetRDP_Handler,
		},
		{
			MethodName: "SendRDP",
			Handler:    _ServerService_SendRDP_Handler,
		},
		{
			MethodName: "CheckRDP",
			Handler:    _ServerService_CheckRDP_Handler,
		},
		{
			MethodName: "ReceiveRDP",
			Handler:    _ServerService_ReceiveRDP_Handler,
		},
		{
			MethodName: "QueryRDP",
			Handler:    _ServerService_QueryRDP_Handler,
		},
		{
			MethodName: "QueryRDPHistory",
			Handler:    _ServerService_QueryRDPHistory_Handler,
		},
		{
			MethodName: "RefundRDP",
			Handler:    _ServerService_RefundRDP_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _ServerService_CreateWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "impayserver.proto",
}
