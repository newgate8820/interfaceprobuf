// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imchannelhistoryserver.proto

package imchannelhistoryserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChannelHistoryServerServiceClient is the client API for ChannelHistoryServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelHistoryServerServiceClient interface {
	GetChannelHistoryServer(ctx context.Context, in *ReqChanHistory, opts ...grpc.CallOption) (*ResChanHistory, error)
	ChannelGetMessages(ctx context.Context, in *ReqChanMessages, opts ...grpc.CallOption) (*ResChanMessages, error)
}

type channelHistoryServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelHistoryServerServiceClient(cc grpc.ClientConnInterface) ChannelHistoryServerServiceClient {
	return &channelHistoryServerServiceClient{cc}
}

func (c *channelHistoryServerServiceClient) GetChannelHistoryServer(ctx context.Context, in *ReqChanHistory, opts ...grpc.CallOption) (*ResChanHistory, error) {
	out := new(ResChanHistory)
	err := c.cc.Invoke(ctx, "/imchannelhistoryserver.ChannelHistoryServerService/GetChannelHistoryServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelHistoryServerServiceClient) ChannelGetMessages(ctx context.Context, in *ReqChanMessages, opts ...grpc.CallOption) (*ResChanMessages, error) {
	out := new(ResChanMessages)
	err := c.cc.Invoke(ctx, "/imchannelhistoryserver.ChannelHistoryServerService/ChannelGetMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelHistoryServerServiceServer is the server API for ChannelHistoryServerService service.
// All implementations must embed UnimplementedChannelHistoryServerServiceServer
// for forward compatibility
type ChannelHistoryServerServiceServer interface {
	GetChannelHistoryServer(context.Context, *ReqChanHistory) (*ResChanHistory, error)
	ChannelGetMessages(context.Context, *ReqChanMessages) (*ResChanMessages, error)
	mustEmbedUnimplementedChannelHistoryServerServiceServer()
}

// UnimplementedChannelHistoryServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChannelHistoryServerServiceServer struct {
}

func (UnimplementedChannelHistoryServerServiceServer) GetChannelHistoryServer(context.Context, *ReqChanHistory) (*ResChanHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelHistoryServer not implemented")
}
func (UnimplementedChannelHistoryServerServiceServer) ChannelGetMessages(context.Context, *ReqChanMessages) (*ResChanMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelGetMessages not implemented")
}
func (UnimplementedChannelHistoryServerServiceServer) mustEmbedUnimplementedChannelHistoryServerServiceServer() {
}

// UnsafeChannelHistoryServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelHistoryServerServiceServer will
// result in compilation errors.
type UnsafeChannelHistoryServerServiceServer interface {
	mustEmbedUnimplementedChannelHistoryServerServiceServer()
}

func RegisterChannelHistoryServerServiceServer(s grpc.ServiceRegistrar, srv ChannelHistoryServerServiceServer) {
	s.RegisterService(&ChannelHistoryServerService_ServiceDesc, srv)
}

func _ChannelHistoryServerService_GetChannelHistoryServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChanHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelHistoryServerServiceServer).GetChannelHistoryServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelhistoryserver.ChannelHistoryServerService/GetChannelHistoryServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelHistoryServerServiceServer).GetChannelHistoryServer(ctx, req.(*ReqChanHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelHistoryServerService_ChannelGetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChanMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelHistoryServerServiceServer).ChannelGetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelhistoryserver.ChannelHistoryServerService/ChannelGetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelHistoryServerServiceServer).ChannelGetMessages(ctx, req.(*ReqChanMessages))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelHistoryServerService_ServiceDesc is the grpc.ServiceDesc for ChannelHistoryServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelHistoryServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imchannelhistoryserver.ChannelHistoryServerService",
	HandlerType: (*ChannelHistoryServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChannelHistoryServer",
			Handler:    _ChannelHistoryServerService_GetChannelHistoryServer_Handler,
		},
		{
			MethodName: "ChannelGetMessages",
			Handler:    _ChannelHistoryServerService_ChannelGetMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imchannelhistoryserver.proto",
}
