// Code generated by protoc-gen-go. DO NOT EDIT.
// source: getchannelhistory.proto

/*
Package imchannelhistoryserver is a generated protocol buffer package.

It is generated from these files:

	getchannelhistory.proto

It has these top-level messages:

	ReqChanHistory
	ResChanHistory
	ReqChanMessages
	ResChanMessages
*/
package imchannelhistoryserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "gitlab.chatserver.im/interfaceprobuf/pbcomm"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReqChanHistory struct {
	UserId      int32  `protobuf:"varint,1,opt,name=UserId" json:"UserId,omitempty"`
	KeyId       uint64 `protobuf:"varint,2,opt,name=keyId" json:"keyId,omitempty"`
	ReMessageId uint64 `protobuf:"varint,3,opt,name=reMessageId" json:"reMessageId,omitempty"`
	CrcId       uint32 `protobuf:"varint,4,opt,name=crcId" json:"crcId,omitempty"`
	ReqBin      []byte `protobuf:"bytes,5,opt,name=reqBin,proto3" json:"reqBin,omitempty"`
	Phone       string `protobuf:"bytes,6,opt,name=Phone" json:"Phone,omitempty"`
	Ip          string `protobuf:"bytes,7,opt,name=ip" json:"ip,omitempty"`
	SessionId   uint64 `protobuf:"varint,9,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Layer       int32  `protobuf:"varint,10,opt,name=layer" json:"layer,omitempty"`
	Ostype      uint32 `protobuf:"varint,11,opt,name=ostype" json:"ostype,omitempty"`
	CurrentCrc  uint32 `protobuf:"varint,12,opt,name=current_crc,json=currentCrc" json:"current_crc,omitempty"`
	AppVersion  string `protobuf:"bytes,13,opt,name=app_version,json=appVersion" json:"app_version,omitempty"`
}

func (m *ReqChanHistory) Reset()                    { *m = ReqChanHistory{} }
func (m *ReqChanHistory) String() string            { return proto.CompactTextString(m) }
func (*ReqChanHistory) ProtoMessage()               {}
func (*ReqChanHistory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReqChanHistory) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqChanHistory) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReqChanHistory) GetReMessageId() uint64 {
	if m != nil {
		return m.ReMessageId
	}
	return 0
}

func (m *ReqChanHistory) GetCrcId() uint32 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *ReqChanHistory) GetReqBin() []byte {
	if m != nil {
		return m.ReqBin
	}
	return nil
}

func (m *ReqChanHistory) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *ReqChanHistory) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ReqChanHistory) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *ReqChanHistory) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *ReqChanHistory) GetOstype() uint32 {
	if m != nil {
		return m.Ostype
	}
	return 0
}

func (m *ReqChanHistory) GetCurrentCrc() uint32 {
	if m != nil {
		return m.CurrentCrc
	}
	return 0
}

func (m *ReqChanHistory) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

type ResChanHistory struct {
	Result    []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=errorCode" json:"errorCode,omitempty"`
}

func (m *ResChanHistory) Reset()                    { *m = ResChanHistory{} }
func (m *ResChanHistory) String() string            { return proto.CompactTextString(m) }
func (*ResChanHistory) ProtoMessage()               {}
func (*ResChanHistory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResChanHistory) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ResChanHistory) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ReqChanMessages struct {
	UserId      int32  `protobuf:"varint,1,opt,name=UserId" json:"UserId,omitempty"`
	KeyId       uint64 `protobuf:"varint,2,opt,name=keyId" json:"keyId,omitempty"`
	ReMessageId uint64 `protobuf:"varint,3,opt,name=reMessageId" json:"reMessageId,omitempty"`
	CrcId       uint32 `protobuf:"varint,4,opt,name=crcId" json:"crcId,omitempty"`
	ReqBin      []byte `protobuf:"bytes,5,opt,name=reqBin,proto3" json:"reqBin,omitempty"`
	Phone       string `protobuf:"bytes,6,opt,name=Phone" json:"Phone,omitempty"`
	Ip          string `protobuf:"bytes,7,opt,name=ip" json:"ip,omitempty"`
	SessionId   uint64 `protobuf:"varint,9,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Layer       int32  `protobuf:"varint,10,opt,name=layer" json:"layer,omitempty"`
	Ostype      uint32 `protobuf:"varint,11,opt,name=ostype" json:"ostype,omitempty"`
	CurrentCrc  uint32 `protobuf:"varint,12,opt,name=current_crc,json=currentCrc" json:"current_crc,omitempty"`
	AppVersion  string `protobuf:"bytes,13,opt,name=app_version,json=appVersion" json:"app_version,omitempty"`
}

func (m *ReqChanMessages) Reset()                    { *m = ReqChanMessages{} }
func (m *ReqChanMessages) String() string            { return proto.CompactTextString(m) }
func (*ReqChanMessages) ProtoMessage()               {}
func (*ReqChanMessages) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReqChanMessages) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqChanMessages) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReqChanMessages) GetReMessageId() uint64 {
	if m != nil {
		return m.ReMessageId
	}
	return 0
}

func (m *ReqChanMessages) GetCrcId() uint32 {
	if m != nil {
		return m.CrcId
	}
	return 0
}

func (m *ReqChanMessages) GetReqBin() []byte {
	if m != nil {
		return m.ReqBin
	}
	return nil
}

func (m *ReqChanMessages) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *ReqChanMessages) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ReqChanMessages) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *ReqChanMessages) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *ReqChanMessages) GetOstype() uint32 {
	if m != nil {
		return m.Ostype
	}
	return 0
}

func (m *ReqChanMessages) GetCurrentCrc() uint32 {
	if m != nil {
		return m.CurrentCrc
	}
	return 0
}

func (m *ReqChanMessages) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

type ResChanMessages struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ResChanMessages) Reset()                    { *m = ResChanMessages{} }
func (m *ResChanMessages) String() string            { return proto.CompactTextString(m) }
func (*ResChanMessages) ProtoMessage()               {}
func (*ResChanMessages) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ResChanMessages) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*ReqChanHistory)(nil), "imchannelhistoryserver.ReqChanHistory")
	proto.RegisterType((*ResChanHistory)(nil), "imchannelhistoryserver.ResChanHistory")
	proto.RegisterType((*ReqChanMessages)(nil), "imchannelhistoryserver.ReqChanMessages")
	proto.RegisterType((*ResChanMessages)(nil), "imchannelhistoryserver.ResChanMessages")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChannelHistoryServerService service

type ChannelHistoryServerServiceClient interface {
	GetChannelHistoryServer(ctx context.Context, in *ReqChanHistory, opts ...grpc.CallOption) (*ResChanHistory, error)
	ChannelGetMessages(ctx context.Context, in *ReqChanMessages, opts ...grpc.CallOption) (*ResChanMessages, error)
}

type channelHistoryServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewChannelHistoryServerServiceClient(cc *grpc.ClientConn) ChannelHistoryServerServiceClient {
	return &channelHistoryServerServiceClient{cc}
}

func (c *channelHistoryServerServiceClient) GetChannelHistoryServer(ctx context.Context, in *ReqChanHistory, opts ...grpc.CallOption) (*ResChanHistory, error) {
	out := new(ResChanHistory)
	err := grpc.Invoke(ctx, "/imchannelhistoryserver.ChannelHistoryServerService/GetChannelHistoryServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelHistoryServerServiceClient) ChannelGetMessages(ctx context.Context, in *ReqChanMessages, opts ...grpc.CallOption) (*ResChanMessages, error) {
	out := new(ResChanMessages)
	err := grpc.Invoke(ctx, "/imchannelhistoryserver.ChannelHistoryServerService/ChannelGetMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChannelHistoryServerService service

type ChannelHistoryServerServiceServer interface {
	GetChannelHistoryServer(context.Context, *ReqChanHistory) (*ResChanHistory, error)
	ChannelGetMessages(context.Context, *ReqChanMessages) (*ResChanMessages, error)
}

func RegisterChannelHistoryServerServiceServer(s *grpc.Server, srv ChannelHistoryServerServiceServer) {
	s.RegisterService(&_ChannelHistoryServerService_serviceDesc, srv)
}

func _ChannelHistoryServerService_GetChannelHistoryServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChanHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelHistoryServerServiceServer).GetChannelHistoryServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelhistoryserver.ChannelHistoryServerService/GetChannelHistoryServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelHistoryServerServiceServer).GetChannelHistoryServer(ctx, req.(*ReqChanHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelHistoryServerService_ChannelGetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChanMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelHistoryServerServiceServer).ChannelGetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imchannelhistoryserver.ChannelHistoryServerService/ChannelGetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelHistoryServerServiceServer).ChannelGetMessages(ctx, req.(*ReqChanMessages))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChannelHistoryServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imchannelhistoryserver.ChannelHistoryServerService",
	HandlerType: (*ChannelHistoryServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChannelHistoryServer",
			Handler:    _ChannelHistoryServerService_GetChannelHistoryServer_Handler,
		},
		{
			MethodName: "ChannelGetMessages",
			Handler:    _ChannelHistoryServerService_ChannelGetMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "getchannelhistory.proto",
}

func init() { proto.RegisterFile("getchannelhistory.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0xa6, 0x09, 0xca, 0xa4, 0x2d, 0xd2, 0x0a, 0xb5, 0xab, 0x00, 0xc2, 0xca, 0x81, 0x9a,
	0x8b, 0x2b, 0xc1, 0x85, 0x33, 0x91, 0x28, 0x39, 0x20, 0x21, 0x23, 0xb8, 0x46, 0x9b, 0xf5, 0x24,
	0x5e, 0x35, 0xf1, 0x6e, 0x67, 0x37, 0x95, 0xf2, 0xfb, 0xe0, 0x17, 0xf1, 0x0b, 0xd0, 0x7e, 0x14,
	0xda, 0x2a, 0x22, 0xe2, 0xde, 0x8b, 0xad, 0xf7, 0xf6, 0x79, 0xde, 0xec, 0x1b, 0x0f, 0x9c, 0x2e,
	0xd1, 0xc9, 0x56, 0x74, 0x1d, 0xae, 0x5a, 0x65, 0x9d, 0xa6, 0x6d, 0x65, 0x48, 0x3b, 0xcd, 0x4e,
	0xd4, 0xfa, 0x2e, 0x6f, 0x91, 0xae, 0x91, 0x46, 0xef, 0x97, 0xca, 0xad, 0xc4, 0xbc, 0x92, 0xad,
	0x70, 0x91, 0xaa, 0xd4, 0xfa, 0x5c, 0x75, 0x0e, 0x69, 0x21, 0x24, 0x1a, 0xd2, 0xf3, 0xcd, 0xe2,
	0xdc, 0xcc, 0xa5, 0x5e, 0xaf, 0xd3, 0x2b, 0x56, 0x1c, 0xff, 0xc8, 0xe1, 0xb8, 0xc6, 0xab, 0x49,
	0x2b, 0xba, 0x4f, 0xb1, 0x24, 0x3b, 0x81, 0xfe, 0x37, 0x8b, 0x34, 0x6d, 0x78, 0x56, 0x64, 0x65,
	0xaf, 0x4e, 0x88, 0x3d, 0x83, 0xde, 0x25, 0x6e, 0xa7, 0x0d, 0xcf, 0x8b, 0xac, 0x3c, 0xa8, 0x23,
	0x60, 0x05, 0x0c, 0x09, 0x3f, 0xa3, 0xb5, 0x62, 0x89, 0xd3, 0x86, 0x3f, 0x0e, 0x67, 0xb7, 0x29,
	0xff, 0x9d, 0x24, 0x39, 0x6d, 0xf8, 0x41, 0x91, 0x95, 0x47, 0x75, 0x04, 0xde, 0x85, 0xf0, 0xea,
	0x83, 0xea, 0x78, 0xaf, 0xc8, 0xca, 0xc3, 0x3a, 0x21, 0xaf, 0xfe, 0xd2, 0xea, 0x0e, 0x79, 0xbf,
	0xc8, 0xca, 0x41, 0x1d, 0x01, 0x3b, 0x86, 0x5c, 0x19, 0xfe, 0x24, 0x50, 0xb9, 0x32, 0xec, 0x25,
	0x80, 0x45, 0x6b, 0x95, 0xee, 0x66, 0xaa, 0xe1, 0x83, 0x60, 0x3a, 0x48, 0x4c, 0xb4, 0x5c, 0x89,
	0x2d, 0x12, 0x87, 0x70, 0x83, 0x08, 0xbc, 0xa5, 0xb6, 0x6e, 0x6b, 0x90, 0x0f, 0x43, 0x27, 0x09,
	0xb1, 0x57, 0x30, 0x94, 0x1b, 0x22, 0xec, 0xdc, 0x4c, 0x92, 0xe4, 0x87, 0xe1, 0x10, 0x12, 0x35,
	0x21, 0xe9, 0x05, 0xc2, 0x98, 0xd9, 0x35, 0x92, 0xaf, 0xcf, 0x8f, 0x42, 0x1b, 0x20, 0x8c, 0xf9,
	0x1e, 0x99, 0xf1, 0x47, 0x1f, 0xa2, 0xbd, 0x17, 0x22, 0xa1, 0xdd, 0xac, 0x5c, 0x08, 0x31, 0x5c,
	0xcf, 0x23, 0xf6, 0x02, 0x06, 0x48, 0xa4, 0x69, 0xa2, 0x1b, 0x0c, 0x41, 0xf6, 0xea, 0xbf, 0xc4,
	0xf8, 0x67, 0x0e, 0x4f, 0xd3, 0x34, 0x52, 0x7e, 0xf6, 0x61, 0x1c, 0xff, 0x3f, 0x8e, 0x37, 0x3e,
	0x45, 0x7b, 0x3f, 0xc5, 0x5d, 0xf3, 0x78, 0xfb, 0x2b, 0x83, 0xe7, 0x93, 0xb8, 0x52, 0x69, 0x74,
	0x5f, 0xc3, 0xfe, 0xf8, 0xa7, 0x92, 0xc8, 0x2e, 0xe1, 0xf4, 0x02, 0xdd, 0x2e, 0x05, 0x7b, 0x5d,
	0xed, 0xde, 0xc6, 0xea, 0xee, 0x3e, 0x8d, 0xfe, 0xa1, 0xbb, 0xfd, 0xcb, 0x8c, 0x1f, 0xb1, 0x05,
	0xb0, 0xe4, 0x74, 0x81, 0xee, 0x4f, 0xeb, 0x67, 0x7b, 0x7c, 0x6e, 0x84, 0xa3, 0xb3, 0x3d, 0x46,
	0x37, 0xc2, 0x79, 0x3f, 0xec, 0xfe, 0xbb, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x47, 0x55,
	0x7e, 0x68, 0x04, 0x00, 0x00,
}
