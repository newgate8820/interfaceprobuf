//protoc --gogofast_out=plugins=grpc:. *.proto
//protoc --gogofast_out=plugins=grpc:. .\gitlab.potato.im\iminterfaceprotobufs\channelserver\pbchannelserver.proto
//protoc --gogofast_out=plugins=grpc:. ./gitlab.chatserver.im/interfaceprobuf/pbchannelserver/pbchannelserver.proto

//protoc --gogofast_out=plugins=grpc:. ./gitlab.chatserver.im/interfaceprobuf/botserver/botserver.proto
//protoc --go_out=plugins=grpc:. ./botserver/botserver.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: botserver.proto

package pbbotserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	advertisemonitornew "interfaceprobuf/advertisemonitornew"
	pbcomm "interfaceprobuf/pbcomm"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChatType 聊天类型
type ChatType int32

const (
	ChatType_ChatTypeZero ChatType = 0 //用户
	ChatType_PeerUser     ChatType = 1 //用户聊天
	ChatType_PeerChat     ChatType = 2 //普通群聊天
	ChatType_ChannelChat  ChatType = 3 //超级群聊天
)

// Enum value maps for ChatType.
var (
	ChatType_name = map[int32]string{
		0: "ChatTypeZero",
		1: "PeerUser",
		2: "PeerChat",
		3: "ChannelChat",
	}
	ChatType_value = map[string]int32{
		"ChatTypeZero": 0,
		"PeerUser":     1,
		"PeerChat":     2,
		"ChannelChat":  3,
	}
)

func (x ChatType) Enum() *ChatType {
	p := new(ChatType)
	*p = x
	return p
}

func (x ChatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatType) Descriptor() protoreflect.EnumDescriptor {
	return file_botserver_proto_enumTypes[0].Descriptor()
}

func (ChatType) Type() protoreflect.EnumType {
	return &file_botserver_proto_enumTypes[0]
}

func (x ChatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatType.Descriptor instead.
func (ChatType) EnumDescriptor() ([]byte, []int) {
	return file_botserver_proto_rawDescGZIP(), []int{0}
}

type ReqGetAdminGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	//int32 PeerFilter = 2; // 2：只要普通群 4：只要超级群 8：只要频道 （可相互组合 ex: 2|4|8 暂时不支持单聊)
	Debug *pbcomm.Debug `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetAdminGroups) Reset() {
	*x = ReqGetAdminGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_botserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetAdminGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetAdminGroups) ProtoMessage() {}

func (x *ReqGetAdminGroups) ProtoReflect() protoreflect.Message {
	mi := &file_botserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetAdminGroups.ProtoReflect.Descriptor instead.
func (*ReqGetAdminGroups) Descriptor() ([]byte, []int) {
	return file_botserver_proto_rawDescGZIP(), []int{0}
}

func (x *ReqGetAdminGroups) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ReqGetAdminGroups) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	PeerFilter int32 `protobuf:"varint,2,opt,name=PeerFilter,proto3" json:"PeerFilter,omitempty"` // 2：只要普通群 4：只要超级群 8：只要频道 （可相互组合 ex: 2|4|8 暂时不支持单聊)
}

func (x *ReqGetGroups) Reset() {
	*x = ReqGetGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_botserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetGroups) ProtoMessage() {}

func (x *ReqGetGroups) ProtoReflect() protoreflect.Message {
	mi := &file_botserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetGroups.ProtoReflect.Descriptor instead.
func (*ReqGetGroups) Descriptor() ([]byte, []int) {
	return file_botserver_proto_rawDescGZIP(), []int{1}
}

func (x *ReqGetGroups) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ReqGetGroups) GetPeerFilter() int32 {
	if x != nil {
		return x.PeerFilter
	}
	return 0
}

type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerID   int32  `protobuf:"varint,1,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	PeerName string `protobuf:"bytes,2,opt,name=PeerName,proto3" json:"PeerName,omitempty"`
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_botserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_botserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_botserver_proto_rawDescGZIP(), []int{2}
}

func (x *Peer) GetPeerID() int32 {
	if x != nil {
		return x.PeerID
	}
	return 0
}

func (x *Peer) GetPeerName() string {
	if x != nil {
		return x.PeerName
	}
	return ""
}

type ReplyGetGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups      []*Peer `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty"`           // 普通群
	SuperGroups []*Peer `protobuf:"bytes,2,rep,name=SuperGroups,proto3" json:"SuperGroups,omitempty"` // 超级群
	Channels    []*Peer `protobuf:"bytes,3,rep,name=Channels,proto3" json:"Channels,omitempty"`       // 频道
}

func (x *ReplyGetGroups) Reset() {
	*x = ReplyGetGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_botserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetGroups) ProtoMessage() {}

func (x *ReplyGetGroups) ProtoReflect() protoreflect.Message {
	mi := &file_botserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetGroups.ProtoReflect.Descriptor instead.
func (*ReplyGetGroups) Descriptor() ([]byte, []int) {
	return file_botserver_proto_rawDescGZIP(), []int{3}
}

func (x *ReplyGetGroups) GetGroups() []*Peer {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ReplyGetGroups) GetSuperGroups() []*Peer {
	if x != nil {
		return x.SuperGroups
	}
	return nil
}

func (x *ReplyGetGroups) GetChannels() []*Peer {
	if x != nil {
		return x.Channels
	}
	return nil
}

type ReqDeleteMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatType ChatType      `protobuf:"varint,1,opt,name=ChatType,proto3,enum=pbbotserver.ChatType" json:"ChatType,omitempty"`
	UserId   int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId   int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MsgId    []int32       `protobuf:"varint,4,rep,packed,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDeleteMessage) Reset() {
	*x = ReqDeleteMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_botserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteMessage) ProtoMessage() {}

func (x *ReqDeleteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_botserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteMessage.ProtoReflect.Descriptor instead.
func (*ReqDeleteMessage) Descriptor() ([]byte, []int) {
	return file_botserver_proto_rawDescGZIP(), []int{4}
}

func (x *ReqDeleteMessage) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_ChatTypeZero
}

func (x *ReqDeleteMessage) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqDeleteMessage) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ReqDeleteMessage) GetMsgId() []int32 {
	if x != nil {
		return x.MsgId
	}
	return nil
}

func (x *ReqDeleteMessage) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqSendChatAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatType   ChatType      `protobuf:"varint,1,opt,name=ChatType,proto3,enum=pbbotserver.ChatType" json:"ChatType,omitempty"`
	UserId     int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId     int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	ActionData []byte        `protobuf:"bytes,4,opt,name=actionData,proto3" json:"actionData,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqSendChatAction) Reset() {
	*x = ReqSendChatAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_botserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendChatAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendChatAction) ProtoMessage() {}

func (x *ReqSendChatAction) ProtoReflect() protoreflect.Message {
	mi := &file_botserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendChatAction.ProtoReflect.Descriptor instead.
func (*ReqSendChatAction) Descriptor() ([]byte, []int) {
	return file_botserver_proto_rawDescGZIP(), []int{5}
}

func (x *ReqSendChatAction) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_ChatTypeZero
}

func (x *ReqSendChatAction) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqSendChatAction) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ReqSendChatAction) GetActionData() []byte {
	if x != nil {
		return x.ActionData
	}
	return nil
}

func (x *ReqSendChatAction) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatType ChatType `protobuf:"varint,1,opt,name=ChatType,proto3,enum=pbbotserver.ChatType" json:"ChatType,omitempty"`
	ReqData  []byte   `protobuf:"bytes,2,opt,name=reqData,proto3" json:"reqData,omitempty"`
	BotId    int32    `protobuf:"varint,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
}

func (x *ReqData) Reset() {
	*x = ReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_botserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqData) ProtoMessage() {}

func (x *ReqData) ProtoReflect() protoreflect.Message {
	mi := &file_botserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqData.ProtoReflect.Descriptor instead.
func (*ReqData) Descriptor() ([]byte, []int) {
	return file_botserver_proto_rawDescGZIP(), []int{6}
}

func (x *ReqData) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_ChatTypeZero
}

func (x *ReqData) GetReqData() []byte {
	if x != nil {
		return x.ReqData
	}
	return nil
}

func (x *ReqData) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

type ReplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply []byte `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"` //回覆結果
	Error int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReplyData) Reset() {
	*x = ReplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_botserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyData) ProtoMessage() {}

func (x *ReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_botserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyData.ProtoReflect.Descriptor instead.
func (*ReplyData) Descriptor() ([]byte, []int) {
	return file_botserver_proto_rawDescGZIP(), []int{7}
}

func (x *ReplyData) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ReplyData) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type ReqGetChatMembersCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatType ChatType      `protobuf:"varint,1,opt,name=ChatType,proto3,enum=pbbotserver.ChatType" json:"ChatType,omitempty"`
	UserId   int32         `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatId   int32         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Debug    *pbcomm.Debug `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqGetChatMembersCount) Reset() {
	*x = ReqGetChatMembersCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_botserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChatMembersCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChatMembersCount) ProtoMessage() {}

func (x *ReqGetChatMembersCount) ProtoReflect() protoreflect.Message {
	mi := &file_botserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChatMembersCount.ProtoReflect.Descriptor instead.
func (*ReqGetChatMembersCount) Descriptor() ([]byte, []int) {
	return file_botserver_proto_rawDescGZIP(), []int{8}
}

func (x *ReqGetChatMembersCount) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_ChatTypeZero
}

func (x *ReqGetChatMembersCount) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetChatMembersCount) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ReqGetChatMembersCount) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChatMembersCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatMembersCount int32 `protobuf:"varint,1,opt,name=ChatMembersCount,proto3" json:"ChatMembersCount,omitempty"`
	ErrorCode        int32 `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (x *ReplyGetChatMembersCount) Reset() {
	*x = ReplyGetChatMembersCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_botserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChatMembersCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChatMembersCount) ProtoMessage() {}

func (x *ReplyGetChatMembersCount) ProtoReflect() protoreflect.Message {
	mi := &file_botserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChatMembersCount.ProtoReflect.Descriptor instead.
func (*ReplyGetChatMembersCount) Descriptor() ([]byte, []int) {
	return file_botserver_proto_rawDescGZIP(), []int{9}
}

func (x *ReplyGetChatMembersCount) GetChatMembersCount() int32 {
	if x != nil {
		return x.ChatMembersCount
	}
	return 0
}

func (x *ReplyGetChatMembersCount) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

var File_botserver_proto protoreflect.FileDescriptor

var file_botserver_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0b, 0x70, 0x62, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x13,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x77, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x50, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x46, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x50, 0x65, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3a, 0x0a, 0x04,
	0x50, 0x65, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62,
	0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62,
	0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0b,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x62, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x10, 0x52,
	0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0xbd, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x6d, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x08, 0x43,
	0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x70, 0x62, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x22,
	0x37, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x68,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x64, 0x0a,
	0x18, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x2a, 0x49, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x10, 0x03, 0x32, 0xba,
	0x08, 0x0a, 0x09, 0x42, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x09,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x62, 0x6f,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x16, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x62,
	0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x62,
	0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x25, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16,
	0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x70,
	0x62, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x77, 0x2e,
	0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x77, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x6e, 0x65, 0x77, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x77, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x42, 0x1d, 0x5a, 0x1b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70,
	0x62, 0x62, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_botserver_proto_rawDescOnce sync.Once
	file_botserver_proto_rawDescData = file_botserver_proto_rawDesc
)

func file_botserver_proto_rawDescGZIP() []byte {
	file_botserver_proto_rawDescOnce.Do(func() {
		file_botserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_botserver_proto_rawDescData)
	})
	return file_botserver_proto_rawDescData
}

var file_botserver_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_botserver_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_botserver_proto_goTypes = []interface{}{
	(ChatType)(0),                                     // 0: pbbotserver.ChatType
	(*ReqGetAdminGroups)(nil),                         // 1: pbbotserver.ReqGetAdminGroups
	(*ReqGetGroups)(nil),                              // 2: pbbotserver.ReqGetGroups
	(*Peer)(nil),                                      // 3: pbbotserver.Peer
	(*ReplyGetGroups)(nil),                            // 4: pbbotserver.ReplyGetGroups
	(*ReqDeleteMessage)(nil),                          // 5: pbbotserver.ReqDeleteMessage
	(*ReqSendChatAction)(nil),                         // 6: pbbotserver.ReqSendChatAction
	(*ReqData)(nil),                                   // 7: pbbotserver.ReqData
	(*ReplyData)(nil),                                 // 8: pbbotserver.ReplyData
	(*ReqGetChatMembersCount)(nil),                    // 9: pbbotserver.ReqGetChatMembersCount
	(*ReplyGetChatMembersCount)(nil),                  // 10: pbbotserver.ReplyGetChatMembersCount
	(*pbcomm.Debug)(nil),                              // 11: pbcomm.Debug
	(*advertisemonitornew.ReqSetManualBlockList)(nil), // 12: advertisemonitornew.ReqSetManualBlockList
	(*advertisemonitornew.ReqDelManualBlockList)(nil), // 13: advertisemonitornew.ReqDelManualBlockList
	(*advertisemonitornew.ReplyData)(nil),             // 14: advertisemonitornew.ReplyData
}
var file_botserver_proto_depIdxs = []int32{
	11, // 0: pbbotserver.ReqGetAdminGroups.debug:type_name -> pbcomm.Debug
	3,  // 1: pbbotserver.ReplyGetGroups.Groups:type_name -> pbbotserver.Peer
	3,  // 2: pbbotserver.ReplyGetGroups.SuperGroups:type_name -> pbbotserver.Peer
	3,  // 3: pbbotserver.ReplyGetGroups.Channels:type_name -> pbbotserver.Peer
	0,  // 4: pbbotserver.ReqDeleteMessage.ChatType:type_name -> pbbotserver.ChatType
	11, // 5: pbbotserver.ReqDeleteMessage.debug:type_name -> pbcomm.Debug
	0,  // 6: pbbotserver.ReqSendChatAction.ChatType:type_name -> pbbotserver.ChatType
	11, // 7: pbbotserver.ReqSendChatAction.debug:type_name -> pbcomm.Debug
	0,  // 8: pbbotserver.ReqData.ChatType:type_name -> pbbotserver.ChatType
	0,  // 9: pbbotserver.ReqGetChatMembersCount.ChatType:type_name -> pbbotserver.ChatType
	11, // 10: pbbotserver.ReqGetChatMembersCount.debug:type_name -> pbcomm.Debug
	7,  // 11: pbbotserver.BotServer.LeaveChat:input_type -> pbbotserver.ReqData
	7,  // 12: pbbotserver.BotServer.GetChat:input_type -> pbbotserver.ReqData
	9,  // 13: pbbotserver.BotServer.GetChatMembersCount:input_type -> pbbotserver.ReqGetChatMembersCount
	7,  // 14: pbbotserver.BotServer.GetChatAdministrators:input_type -> pbbotserver.ReqData
	7,  // 15: pbbotserver.BotServer.SetChatTitle:input_type -> pbbotserver.ReqData
	7,  // 16: pbbotserver.BotServer.SetChatDescription:input_type -> pbbotserver.ReqData
	7,  // 17: pbbotserver.BotServer.UpdatePinnedChannelMessage:input_type -> pbbotserver.ReqData
	6,  // 18: pbbotserver.BotServer.SendChatAction:input_type -> pbbotserver.ReqSendChatAction
	7,  // 19: pbbotserver.BotServer.SendContact:input_type -> pbbotserver.ReqData
	5,  // 20: pbbotserver.BotServer.DeleteMessage:input_type -> pbbotserver.ReqDeleteMessage
	2,  // 21: pbbotserver.BotServer.GetGroups:input_type -> pbbotserver.ReqGetGroups
	1,  // 22: pbbotserver.BotServer.GetAdminGroups:input_type -> pbbotserver.ReqGetAdminGroups
	12, // 23: pbbotserver.BotServer.SetManualBlockList:input_type -> advertisemonitornew.ReqSetManualBlockList
	13, // 24: pbbotserver.BotServer.DelManualBlockList:input_type -> advertisemonitornew.ReqDelManualBlockList
	8,  // 25: pbbotserver.BotServer.LeaveChat:output_type -> pbbotserver.ReplyData
	8,  // 26: pbbotserver.BotServer.GetChat:output_type -> pbbotserver.ReplyData
	10, // 27: pbbotserver.BotServer.GetChatMembersCount:output_type -> pbbotserver.ReplyGetChatMembersCount
	8,  // 28: pbbotserver.BotServer.GetChatAdministrators:output_type -> pbbotserver.ReplyData
	8,  // 29: pbbotserver.BotServer.SetChatTitle:output_type -> pbbotserver.ReplyData
	8,  // 30: pbbotserver.BotServer.SetChatDescription:output_type -> pbbotserver.ReplyData
	8,  // 31: pbbotserver.BotServer.UpdatePinnedChannelMessage:output_type -> pbbotserver.ReplyData
	8,  // 32: pbbotserver.BotServer.SendChatAction:output_type -> pbbotserver.ReplyData
	8,  // 33: pbbotserver.BotServer.SendContact:output_type -> pbbotserver.ReplyData
	8,  // 34: pbbotserver.BotServer.DeleteMessage:output_type -> pbbotserver.ReplyData
	4,  // 35: pbbotserver.BotServer.GetGroups:output_type -> pbbotserver.ReplyGetGroups
	4,  // 36: pbbotserver.BotServer.GetAdminGroups:output_type -> pbbotserver.ReplyGetGroups
	14, // 37: pbbotserver.BotServer.SetManualBlockList:output_type -> advertisemonitornew.ReplyData
	14, // 38: pbbotserver.BotServer.DelManualBlockList:output_type -> advertisemonitornew.ReplyData
	25, // [25:39] is the sub-list for method output_type
	11, // [11:25] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_botserver_proto_init() }
func file_botserver_proto_init() {
	if File_botserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_botserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetAdminGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_botserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_botserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_botserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_botserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_botserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendChatAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_botserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_botserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_botserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChatMembersCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_botserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChatMembersCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_botserver_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_botserver_proto_goTypes,
		DependencyIndexes: file_botserver_proto_depIdxs,
		EnumInfos:         file_botserver_proto_enumTypes,
		MessageInfos:      file_botserver_proto_msgTypes,
	}.Build()
	File_botserver_proto = out.File
	file_botserver_proto_rawDesc = nil
	file_botserver_proto_goTypes = nil
	file_botserver_proto_depIdxs = nil
}
