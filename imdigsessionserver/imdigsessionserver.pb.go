// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/imdigsessionserver/imdigsessionserver.proto

/*
Package imdigsessionserver is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/imdigsessionserver/imdigsessionserver.proto

It has these top-level messages:

	ReqGetTokenMsg
	GetTokenReply
	ReqGetUserToken
	GetUserTokenReply
*/
package imdigsessionserver

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TokenErrorCode int32

const (
	TokenErrorCode_Token_OK                TokenErrorCode = 0
	TokenErrorCode_Token_REQ_PARAME_ERR    TokenErrorCode = 1001
	TokenErrorCode_Token_CTEATE_TOKEN_FAIL TokenErrorCode = 1002
	TokenErrorCode_Token_ERR               TokenErrorCode = 1003
	TokenErrorCode_Token_EXPIRED           TokenErrorCode = 1004
	TokenErrorCode_Token_NOT_EXIST         TokenErrorCode = 1005
	TokenErrorCode_Token_INTERNAL_ERR      TokenErrorCode = 1006
)

var TokenErrorCode_name = map[int32]string{
	0:    "Token_OK",
	1001: "Token_REQ_PARAME_ERR",
	1002: "Token_CTEATE_TOKEN_FAIL",
	1003: "Token_ERR",
	1004: "Token_EXPIRED",
	1005: "Token_NOT_EXIST",
	1006: "Token_INTERNAL_ERR",
}
var TokenErrorCode_value = map[string]int32{
	"Token_OK":                0,
	"Token_REQ_PARAME_ERR":    1001,
	"Token_CTEATE_TOKEN_FAIL": 1002,
	"Token_ERR":               1003,
	"Token_EXPIRED":           1004,
	"Token_NOT_EXIST":         1005,
	"Token_INTERNAL_ERR":      1006,
}

func (x TokenErrorCode) String() string {
	return proto.EnumName(TokenErrorCode_name, int32(x))
}
func (TokenErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImdigsessionserver, []int{0}
}

type ReqGetTokenMsg struct {
	KeyId  string `protobuf:"bytes,1,opt,name=keyId,proto3" json:"keyId,omitempty"`
	UserId int64  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Nonce  string `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *ReqGetTokenMsg) Reset()         { *m = ReqGetTokenMsg{} }
func (m *ReqGetTokenMsg) String() string { return proto.CompactTextString(m) }
func (*ReqGetTokenMsg) ProtoMessage()    {}
func (*ReqGetTokenMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorImdigsessionserver, []int{0}
}

func (m *ReqGetTokenMsg) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *ReqGetTokenMsg) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetTokenMsg) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

type GetTokenReply struct {
	Code           TokenErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=imdigsessionserver.TokenErrorCode" json:"code,omitempty"`
	Error          string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Token          string         `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Nonce          string         `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ExpirationTime uint64         `protobuf:"varint,5,opt,name=expirationTime,proto3" json:"expirationTime,omitempty"`
}

func (m *GetTokenReply) Reset()                    { *m = GetTokenReply{} }
func (m *GetTokenReply) String() string            { return proto.CompactTextString(m) }
func (*GetTokenReply) ProtoMessage()               {}
func (*GetTokenReply) Descriptor() ([]byte, []int) { return fileDescriptorImdigsessionserver, []int{1} }

func (m *GetTokenReply) GetCode() TokenErrorCode {
	if m != nil {
		return m.Code
	}
	return TokenErrorCode_Token_OK
}

func (m *GetTokenReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *GetTokenReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GetTokenReply) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *GetTokenReply) GetExpirationTime() uint64 {
	if m != nil {
		return m.ExpirationTime
	}
	return 0
}

type ReqGetUserToken struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *ReqGetUserToken) Reset()         { *m = ReqGetUserToken{} }
func (m *ReqGetUserToken) String() string { return proto.CompactTextString(m) }
func (*ReqGetUserToken) ProtoMessage()    {}
func (*ReqGetUserToken) Descriptor() ([]byte, []int) {
	return fileDescriptorImdigsessionserver, []int{2}
}

func (m *ReqGetUserToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type GetUserTokenReply struct {
	Code           TokenErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=imdigsessionserver.TokenErrorCode" json:"code,omitempty"`
	UserId         int64          `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Key            string         `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	ExpirationTime uint64         `protobuf:"varint,4,opt,name=expirationTime,proto3" json:"expirationTime,omitempty"`
}

func (m *GetUserTokenReply) Reset()         { *m = GetUserTokenReply{} }
func (m *GetUserTokenReply) String() string { return proto.CompactTextString(m) }
func (*GetUserTokenReply) ProtoMessage()    {}
func (*GetUserTokenReply) Descriptor() ([]byte, []int) {
	return fileDescriptorImdigsessionserver, []int{3}
}

func (m *GetUserTokenReply) GetCode() TokenErrorCode {
	if m != nil {
		return m.Code
	}
	return TokenErrorCode_Token_OK
}

func (m *GetUserTokenReply) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUserTokenReply) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *GetUserTokenReply) GetExpirationTime() uint64 {
	if m != nil {
		return m.ExpirationTime
	}
	return 0
}

func init() {
	proto.RegisterType((*ReqGetTokenMsg)(nil), "imdigsessionserver.ReqGetTokenMsg")
	proto.RegisterType((*GetTokenReply)(nil), "imdigsessionserver.GetTokenReply")
	proto.RegisterType((*ReqGetUserToken)(nil), "imdigsessionserver.ReqGetUserToken")
	proto.RegisterType((*GetUserTokenReply)(nil), "imdigsessionserver.GetUserTokenReply")
	proto.RegisterEnum("imdigsessionserver.TokenErrorCode", TokenErrorCode_name, TokenErrorCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ImDigSessionService service

type ImDigSessionServiceClient interface {
	// 获取token
	GetToken(ctx context.Context, in *ReqGetTokenMsg, opts ...grpc.CallOption) (*GetTokenReply, error)
	GetUserToken(ctx context.Context, in *ReqGetUserToken, opts ...grpc.CallOption) (*GetUserTokenReply, error)
}

type imDigSessionServiceClient struct {
	cc *grpc.ClientConn
}

func NewImDigSessionServiceClient(cc *grpc.ClientConn) ImDigSessionServiceClient {
	return &imDigSessionServiceClient{cc}
}

func (c *imDigSessionServiceClient) GetToken(ctx context.Context, in *ReqGetTokenMsg, opts ...grpc.CallOption) (*GetTokenReply, error) {
	out := new(GetTokenReply)
	err := grpc.Invoke(ctx, "/imdigsessionserver.ImDigSessionService/GetToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imDigSessionServiceClient) GetUserToken(ctx context.Context, in *ReqGetUserToken, opts ...grpc.CallOption) (*GetUserTokenReply, error) {
	out := new(GetUserTokenReply)
	err := grpc.Invoke(ctx, "/imdigsessionserver.ImDigSessionService/GetUserToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImDigSessionService service

type ImDigSessionServiceServer interface {
	// 获取token
	GetToken(context.Context, *ReqGetTokenMsg) (*GetTokenReply, error)
	GetUserToken(context.Context, *ReqGetUserToken) (*GetUserTokenReply, error)
}

func RegisterImDigSessionServiceServer(s *grpc.Server, srv ImDigSessionServiceServer) {
	s.RegisterService(&_ImDigSessionService_serviceDesc, srv)
}

func _ImDigSessionService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetTokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImDigSessionServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imdigsessionserver.ImDigSessionService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImDigSessionServiceServer).GetToken(ctx, req.(*ReqGetTokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImDigSessionService_GetUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImDigSessionServiceServer).GetUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imdigsessionserver.ImDigSessionService/GetUserToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImDigSessionServiceServer).GetUserToken(ctx, req.(*ReqGetUserToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImDigSessionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imdigsessionserver.ImDigSessionService",
	HandlerType: (*ImDigSessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _ImDigSessionService_GetToken_Handler,
		},
		{
			MethodName: "GetUserToken",
			Handler:    _ImDigSessionService_GetUserToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/imdigsessionserver/imdigsessionserver.proto",
}

func (m *ReqGetTokenMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.KeyId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImdigsessionserver(dAtA, i, uint64(len(m.KeyId)))
		i += copy(dAtA[i:], m.KeyId)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImdigsessionserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Nonce) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImdigsessionserver(dAtA, i, uint64(len(m.Nonce)))
		i += copy(dAtA[i:], m.Nonce)
	}
	return i, nil
}

func (m *GetTokenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTokenReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImdigsessionserver(dAtA, i, uint64(m.Code))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintImdigsessionserver(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImdigsessionserver(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Nonce) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintImdigsessionserver(dAtA, i, uint64(len(m.Nonce)))
		i += copy(dAtA[i:], m.Nonce)
	}
	if m.ExpirationTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintImdigsessionserver(dAtA, i, uint64(m.ExpirationTime))
	}
	return i, nil
}

func (m *ReqGetUserToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetUserToken) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintImdigsessionserver(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *GetUserTokenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserTokenReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintImdigsessionserver(dAtA, i, uint64(m.Code))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintImdigsessionserver(dAtA, i, uint64(m.UserId))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintImdigsessionserver(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.ExpirationTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintImdigsessionserver(dAtA, i, uint64(m.ExpirationTime))
	}
	return i, nil
}

func encodeVarintImdigsessionserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReqGetTokenMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.KeyId)
	if l > 0 {
		n += 1 + l + sovImdigsessionserver(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovImdigsessionserver(uint64(m.UserId))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovImdigsessionserver(uint64(l))
	}
	return n
}

func (m *GetTokenReply) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovImdigsessionserver(uint64(m.Code))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovImdigsessionserver(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovImdigsessionserver(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovImdigsessionserver(uint64(l))
	}
	if m.ExpirationTime != 0 {
		n += 1 + sovImdigsessionserver(uint64(m.ExpirationTime))
	}
	return n
}

func (m *ReqGetUserToken) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovImdigsessionserver(uint64(l))
	}
	return n
}

func (m *GetUserTokenReply) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovImdigsessionserver(uint64(m.Code))
	}
	if m.UserId != 0 {
		n += 1 + sovImdigsessionserver(uint64(m.UserId))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovImdigsessionserver(uint64(l))
	}
	if m.ExpirationTime != 0 {
		n += 1 + sovImdigsessionserver(uint64(m.ExpirationTime))
	}
	return n
}

func sovImdigsessionserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozImdigsessionserver(x uint64) (n int) {
	return sovImdigsessionserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReqGetTokenMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImdigsessionserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetTokenMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetTokenMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdigsessionserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImdigsessionserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdigsessionserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdigsessionserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImdigsessionserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImdigsessionserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImdigsessionserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTokenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImdigsessionserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdigsessionserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (TokenErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdigsessionserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImdigsessionserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdigsessionserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImdigsessionserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdigsessionserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImdigsessionserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			m.ExpirationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdigsessionserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImdigsessionserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImdigsessionserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetUserToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImdigsessionserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetUserToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetUserToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdigsessionserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImdigsessionserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImdigsessionserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImdigsessionserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserTokenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImdigsessionserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserTokenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserTokenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdigsessionserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (TokenErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdigsessionserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdigsessionserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImdigsessionserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			m.ExpirationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdigsessionserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImdigsessionserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImdigsessionserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImdigsessionserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImdigsessionserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImdigsessionserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImdigsessionserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthImdigsessionserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowImdigsessionserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipImdigsessionserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthImdigsessionserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImdigsessionserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/imdigsessionserver/imdigsessionserver.proto", fileDescriptorImdigsessionserver)
}

var fileDescriptorImdigsessionserver = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xdd, 0x6e, 0x12, 0x41,
	0x14, 0x66, 0x84, 0x76, 0xcb, 0x09, 0xa5, 0xeb, 0x48, 0x2c, 0x36, 0x86, 0xe0, 0x1a, 0x95, 0x78,
	0x41, 0x93, 0x9a, 0x78, 0x8f, 0xed, 0x68, 0x36, 0x6d, 0x01, 0x87, 0x31, 0xe9, 0x85, 0xc9, 0x06,
	0xd8, 0x53, 0x9c, 0x50, 0x76, 0x70, 0x76, 0xdb, 0xc8, 0xc3, 0xf8, 0x02, 0xde, 0xf9, 0x16, 0xbd,
	0xf4, 0x11, 0x0c, 0x77, 0xfe, 0x3e, 0x83, 0xd9, 0x1d, 0x50, 0x56, 0x97, 0x2b, 0xef, 0xf6, 0xfb,
	0xce, 0x97, 0xef, 0x3b, 0xe7, 0xcc, 0x59, 0xe8, 0x8e, 0x64, 0x74, 0xd1, 0x1f, 0x34, 0x87, 0x6f,
	0xfa, 0x51, 0x88, 0xfa, 0x0a, 0x75, 0x53, 0x4e, 0xf6, 0x65, 0x10, 0xa1, 0x3e, 0xef, 0x0f, 0x71,
	0xaa, 0xd5, 0xe0, 0xf2, 0x7c, 0x5f, 0x4e, 0x7c, 0x39, 0x0a, 0x31, 0x0c, 0xa5, 0x0a, 0x8c, 0x2a,
	0x83, 0x6a, 0x4e, 0xb5, 0x8a, 0x14, 0xa5, 0xff, 0x56, 0x1c, 0x01, 0x65, 0x8e, 0x6f, 0x5f, 0x60,
	0x24, 0xd4, 0x18, 0x83, 0xd3, 0x70, 0x44, 0x2b, 0xb0, 0x31, 0xc6, 0x99, 0xeb, 0x57, 0x49, 0x9d,
	0x34, 0x8a, 0xdc, 0x00, 0x7a, 0x1b, 0x36, 0x2f, 0x43, 0xd4, 0xae, 0x5f, 0xbd, 0x51, 0x27, 0x8d,
	0x3c, 0x5f, 0xa0, 0x58, 0x1d, 0xa8, 0x60, 0x88, 0xd5, 0xbc, 0x51, 0x27, 0xc0, 0xf9, 0x48, 0x60,
	0x7b, 0xe9, 0xc9, 0x71, 0x7a, 0x31, 0xa3, 0x4f, 0xa1, 0x30, 0x54, 0x3e, 0x26, 0xa6, 0xe5, 0x03,
	0xa7, 0x99, 0xd1, 0x64, 0xa2, 0x66, 0x5a, 0x2b, 0x7d, 0xa8, 0x7c, 0xe4, 0x89, 0x3e, 0xf6, 0xc7,
	0x98, 0x4a, 0x62, 0x8b, 0xdc, 0x80, 0x98, 0x8d, 0x62, 0xf5, 0x32, 0x35, 0x01, 0x7f, 0x7a, 0x29,
	0xac, 0xf4, 0x42, 0x1f, 0x42, 0x19, 0xdf, 0x4d, 0xa5, 0xee, 0x47, 0x52, 0x05, 0x42, 0x4e, 0xb0,
	0xba, 0x51, 0x27, 0x8d, 0x02, 0xff, 0x8b, 0x75, 0x1e, 0xc1, 0x8e, 0xd9, 0xc4, 0xab, 0x10, 0xb5,
	0x58, 0x1a, 0x9a, 0x18, 0xb2, 0x12, 0xe3, 0xbc, 0x27, 0x70, 0x73, 0x55, 0xf6, 0x7f, 0x03, 0xae,
	0x5b, 0xac, 0x0d, 0xf9, 0x31, 0xce, 0x16, 0x03, 0xc6, 0x9f, 0x19, 0x83, 0x14, 0xb2, 0x06, 0x79,
	0xfc, 0x81, 0x40, 0x39, 0x1d, 0x45, 0x4b, 0xb0, 0x95, 0x30, 0x5e, 0xe7, 0xd8, 0xce, 0xd1, 0x3b,
	0x50, 0x31, 0x88, 0xb3, 0x97, 0x5e, 0xb7, 0xc5, 0x5b, 0xa7, 0xcc, 0x63, 0x9c, 0xdb, 0x5f, 0x2c,
	0x7a, 0x17, 0x76, 0x4d, 0xe9, 0x50, 0xb0, 0x96, 0x60, 0x9e, 0xe8, 0x1c, 0xb3, 0xb6, 0xf7, 0xbc,
	0xe5, 0x9e, 0xd8, 0x5f, 0x2d, 0x5a, 0x86, 0xa2, 0xa9, 0xc6, 0xea, 0x6f, 0x16, 0xa5, 0xb0, 0xbd,
	0xc0, 0x67, 0x5d, 0x97, 0xb3, 0x23, 0xfb, 0xbb, 0x45, 0x2b, 0xb0, 0x63, 0xb8, 0x76, 0x47, 0x78,
	0xec, 0xcc, 0xed, 0x09, 0xfb, 0x87, 0x45, 0x77, 0x81, 0x1a, 0xd6, 0x6d, 0x0b, 0xc6, 0xdb, 0xad,
	0x93, 0xc4, 0xe2, 0xa7, 0x75, 0x70, 0x4d, 0xe0, 0x96, 0x3b, 0x39, 0x92, 0xa3, 0x9e, 0x59, 0x55,
	0x0f, 0xf5, 0x95, 0x1c, 0x22, 0xed, 0xc1, 0xd6, 0xf2, 0x80, 0x68, 0xe6, 0x32, 0xd3, 0x57, 0xbb,
	0x77, 0x2f, 0x4b, 0x93, 0x3a, 0x41, 0x27, 0x47, 0x5f, 0x43, 0x29, 0xf5, 0xbe, 0xf7, 0xd7, 0x1b,
	0xff, 0x16, 0xed, 0x3d, 0x58, 0xe3, 0x9c, 0x7e, 0x7f, 0x27, 0xf7, 0xac, 0x74, 0x3d, 0xaf, 0x91,
	0x4f, 0xf3, 0x1a, 0xf9, 0x3c, 0xaf, 0x91, 0xc1, 0x66, 0xf2, 0xcf, 0x3d, 0xf9, 0x15, 0x00, 0x00,
	0xff, 0xff, 0x1a, 0x7b, 0x43, 0x72, 0xc7, 0x03, 0x00, 0x00,
}
