// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/liveserver/gateway.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/liveserver/gateway.proto

It has these top-level messages:

	Request
	Response
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// @Description 操作行为的详细说明。
type Request struct {
	BusCode  int32  `protobuf:"varint,1,opt,name=BusCode,proto3" json:"BusCode,omitempty"`
	UserID   int32  `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	KeyID    int64  `protobuf:"varint,3,opt,name=KeyID,proto3" json:"KeyID,omitempty"`
	DataJson string `protobuf:"bytes,4,opt,name=DataJson,proto3" json:"DataJson,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{0} }

func (m *Request) GetBusCode() int32 {
	if m != nil {
		return m.BusCode
	}
	return 0
}

func (m *Request) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *Request) GetKeyID() int64 {
	if m != nil {
		return m.KeyID
	}
	return 0
}

func (m *Request) GetDataJson() string {
	if m != nil {
		return m.DataJson
	}
	return ""
}

type Response struct {
	BusCode  int32   `protobuf:"varint,1,opt,name=BusCode,proto3" json:"BusCode,omitempty"`
	DataJson string  `protobuf:"bytes,2,opt,name=DataJson,proto3" json:"DataJson,omitempty"`
	UserIDs  []int32 `protobuf:"varint,3,rep,packed,name=UserIDs" json:"UserIDs,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{1} }

func (m *Response) GetBusCode() int32 {
	if m != nil {
		return m.BusCode
	}
	return 0
}

func (m *Response) GetDataJson() string {
	if m != nil {
		return m.DataJson
	}
	return ""
}

func (m *Response) GetUserIDs() []int32 {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "pb.Request")
	proto.RegisterType((*Response)(nil), "pb.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GateWay service

type GateWayClient interface {
	LiveRouterForwarding(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type gateWayClient struct {
	cc *grpc.ClientConn
}

func NewGateWayClient(cc *grpc.ClientConn) GateWayClient {
	return &gateWayClient{cc}
}

func (c *gateWayClient) LiveRouterForwarding(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/pb.GateWay/LiveRouterForwarding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GateWay service

type GateWayServer interface {
	LiveRouterForwarding(context.Context, *Request) (*Response, error)
}

func RegisterGateWayServer(s *grpc.Server, srv GateWayServer) {
	s.RegisterService(&_GateWay_serviceDesc, srv)
}

func _GateWay_LiveRouterForwarding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateWayServer).LiveRouterForwarding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GateWay/LiveRouterForwarding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateWayServer).LiveRouterForwarding(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _GateWay_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GateWay",
	HandlerType: (*GateWayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LiveRouterForwarding",
			Handler:    _GateWay_LiveRouterForwarding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/liveserver/gateway.proto",
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BusCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.BusCode))
	}
	if m.UserID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.UserID))
	}
	if m.KeyID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.KeyID))
	}
	if len(m.DataJson) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.DataJson)))
		i += copy(dAtA[i:], m.DataJson)
	}
	return i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BusCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.BusCode))
	}
	if len(m.DataJson) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.DataJson)))
		i += copy(dAtA[i:], m.DataJson)
	}
	if len(m.UserIDs) > 0 {
		dAtA2 := make([]byte, len(m.UserIDs)*10)
		var j1 int
		for _, num1 := range m.UserIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func encodeVarintGateway(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Request) Size() (n int) {
	var l int
	_ = l
	if m.BusCode != 0 {
		n += 1 + sovGateway(uint64(m.BusCode))
	}
	if m.UserID != 0 {
		n += 1 + sovGateway(uint64(m.UserID))
	}
	if m.KeyID != 0 {
		n += 1 + sovGateway(uint64(m.KeyID))
	}
	l = len(m.DataJson)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.BusCode != 0 {
		n += 1 + sovGateway(uint64(m.BusCode))
	}
	l = len(m.DataJson)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.UserIDs) > 0 {
		l = 0
		for _, e := range m.UserIDs {
			l += sovGateway(uint64(e))
		}
		n += 1 + sovGateway(uint64(l)) + l
	}
	return n
}

func sovGateway(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGateway(x uint64) (n int) {
	return sovGateway(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusCode", wireType)
			}
			m.BusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			m.KeyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusCode", wireType)
			}
			m.BusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIDs = append(m.UserIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGateway
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIDs = append(m.UserIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGateway(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGateway
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGateway(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGateway = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGateway   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/liveserver/gateway.proto", fileDescriptorGateway)
}

var fileDescriptorGateway = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x14, 0x84, 0xdd, 0xc6, 0x36, 0x75, 0xed, 0x69, 0x29, 0xb2, 0xf4, 0x10, 0x42, 0x4e, 0x39, 0x25,
	0x60, 0xcf, 0x7a, 0xa8, 0x41, 0xa9, 0x7a, 0x5a, 0x10, 0xc1, 0xdb, 0x4b, 0xfb, 0x1a, 0x17, 0xda,
	0x6c, 0xdc, 0xdd, 0xa4, 0xe4, 0x1f, 0x7a, 0xf4, 0x27, 0x48, 0x7e, 0x89, 0xb4, 0x1b, 0x45, 0x2f,
	0x1e, 0x3f, 0x86, 0x99, 0x79, 0x6f, 0xe8, 0x55, 0x21, 0xed, 0x16, 0xf2, 0x64, 0xf5, 0x0a, 0xd6,
	0xa0, 0x6e, 0x50, 0x27, 0x72, 0x97, 0xca, 0xd2, 0xa2, 0xde, 0xc0, 0x0a, 0x2b, 0xad, 0xf2, 0x7a,
	0x93, 0x6e, 0x65, 0x83, 0x4e, 0x4d, 0x0b, 0xb0, 0xb8, 0x87, 0x36, 0xa9, 0xb4, 0xb2, 0x8a, 0x0d,
	0xaa, 0x3c, 0xda, 0x51, 0x5f, 0xe0, 0x5b, 0x8d, 0xc6, 0x32, 0x4e, 0xfd, 0x45, 0x6d, 0x6e, 0xd4,
	0x1a, 0x39, 0x09, 0x49, 0x3c, 0x14, 0xdf, 0xc8, 0x2e, 0xe8, 0xe8, 0xc9, 0xa0, 0x5e, 0x66, 0x7c,
	0x70, 0x14, 0x7a, 0x62, 0x53, 0x3a, 0x7c, 0xc0, 0x76, 0x99, 0x71, 0x2f, 0x24, 0xb1, 0x27, 0x1c,
	0xb0, 0x19, 0x1d, 0x67, 0x60, 0xe1, 0xde, 0xa8, 0x92, 0x9f, 0x86, 0x24, 0x3e, 0x13, 0x3f, 0x1c,
	0xbd, 0xd0, 0xb1, 0x40, 0x53, 0xa9, 0xd2, 0xe0, 0x3f, 0x7d, 0xbf, 0x13, 0x06, 0x7f, 0x13, 0x0e,
	0x2e, 0xd7, 0x6e, 0xb8, 0x17, 0x7a, 0x07, 0x57, 0x8f, 0x97, 0xd7, 0xd4, 0xbf, 0x03, 0x8b, 0xcf,
	0xd0, 0xb2, 0x39, 0x9d, 0x3e, 0xca, 0x06, 0x85, 0xaa, 0x2d, 0xea, 0x5b, 0xa5, 0xf7, 0xa0, 0xd7,
	0xb2, 0x2c, 0xd8, 0x79, 0x52, 0xe5, 0x49, 0xff, 0xef, 0x6c, 0xe2, 0xc0, 0x5d, 0x13, 0x9d, 0x2c,
	0x26, 0xef, 0x5d, 0x40, 0x3e, 0xba, 0x80, 0x7c, 0x76, 0x01, 0xc9, 0x47, 0xc7, 0x8d, 0xe6, 0x5f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x49, 0x17, 0xfe, 0x8a, 0x64, 0x01, 0x00, 0x00,
}
