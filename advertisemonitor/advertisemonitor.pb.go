//protoc --gogofast_out=plugins=grpc:. gitlab.chatserver.im/interfaceprobuf/advertisemonitor/advertisemonitor.proto
//protoc --gogofast_out=plugins=grpc:. gitlab.chatserver.im/im/iminterfaceprotobufs/searchservice/search.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: advertisemonitor.proto

package advertisemonitor

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pbcomm "interfaceprobuf/pbcomm"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProtocolType int32

const (
	//一般禁言
	ProtocolType_BlockUserList_TYPE   ProtocolType = 0 //禁言某用戶
	ProtocolType_UnBlockUserList_TYPE ProtocolType = 1 //解禁某用戶
	ProtocolType_MsgInfo_TYPE         ProtocolType = 2 //IM向AdvertiseMonitor發送msg的結構體
	ProtocolType_MsgInfoList_TYPE     ProtocolType = 3 //IM向AdvertiseMonitor發送msg list的結構體
	ProtocolType_UnBlockAllUser_TYPE  ProtocolType = 4 //解禁所有用戶
	//各別群設定(消息限制)
	ProtocolType_UnBlockGroupUser_TYPE ProtocolType = 5 //根據群id解禁所有用戶
	//回覆確認
	ProtocolType_BlockUserList_CONFIRM_TYPE   ProtocolType = 6 //禁言某用戶
	ProtocolType_UnBlockUserList_CONFIRM_TYPE ProtocolType = 7 //解禁某用戶
	ProtocolType_MsgInfo_CONFIRM_TYPE         ProtocolType = 8 //IM向AdvertiseMonitor發送msg的結構體
	ProtocolType_UnBlockAllUser_CONFIRM_TYPE  ProtocolType = 9 //解禁所有用戶
)

// Enum value maps for ProtocolType.
var (
	ProtocolType_name = map[int32]string{
		0: "BlockUserList_TYPE",
		1: "UnBlockUserList_TYPE",
		2: "MsgInfo_TYPE",
		3: "MsgInfoList_TYPE",
		4: "UnBlockAllUser_TYPE",
		5: "UnBlockGroupUser_TYPE",
		6: "BlockUserList_CONFIRM_TYPE",
		7: "UnBlockUserList_CONFIRM_TYPE",
		8: "MsgInfo_CONFIRM_TYPE",
		9: "UnBlockAllUser_CONFIRM_TYPE",
	}
	ProtocolType_value = map[string]int32{
		"BlockUserList_TYPE":           0,
		"UnBlockUserList_TYPE":         1,
		"MsgInfo_TYPE":                 2,
		"MsgInfoList_TYPE":             3,
		"UnBlockAllUser_TYPE":          4,
		"UnBlockGroupUser_TYPE":        5,
		"BlockUserList_CONFIRM_TYPE":   6,
		"UnBlockUserList_CONFIRM_TYPE": 7,
		"MsgInfo_CONFIRM_TYPE":         8,
		"UnBlockAllUser_CONFIRM_TYPE":  9,
	}
)

func (x ProtocolType) Enum() *ProtocolType {
	p := new(ProtocolType)
	*p = x
	return p
}

func (x ProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_advertisemonitor_proto_enumTypes[0].Descriptor()
}

func (ProtocolType) Type() protoreflect.EnumType {
	return &file_advertisemonitor_proto_enumTypes[0]
}

func (x ProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolType.Descriptor instead.
func (ProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{0}
}

type BlockListType int32

const (
	//禁言名單類型
	BlockListType_NormalBlockList_TYPE BlockListType = 0 //一般禁言名單
	BlockListType_ManualBlockList_TYPE BlockListType = 1 //手動禁言名單
	BlockListType_GroupBlockList_TYPE  BlockListType = 2 //群設定禁言名單
)

// Enum value maps for BlockListType.
var (
	BlockListType_name = map[int32]string{
		0: "NormalBlockList_TYPE",
		1: "ManualBlockList_TYPE",
		2: "GroupBlockList_TYPE",
	}
	BlockListType_value = map[string]int32{
		"NormalBlockList_TYPE": 0,
		"ManualBlockList_TYPE": 1,
		"GroupBlockList_TYPE":  2,
	}
)

func (x BlockListType) Enum() *BlockListType {
	p := new(BlockListType)
	*p = x
	return p
}

func (x BlockListType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockListType) Descriptor() protoreflect.EnumDescriptor {
	return file_advertisemonitor_proto_enumTypes[1].Descriptor()
}

func (BlockListType) Type() protoreflect.EnumType {
	return &file_advertisemonitor_proto_enumTypes[1]
}

func (x BlockListType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockListType.Descriptor instead.
func (BlockListType) EnumDescriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{1}
}

type ReqDelManualBlockList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnBlockUser *BlockUser    `protobuf:"bytes,1,opt,name=UnBlockUser,proto3" json:"UnBlockUser,omitempty"`
	BotId       int32         `protobuf:"varint,2,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Debug       *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqDelManualBlockList) Reset() {
	*x = ReqDelManualBlockList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDelManualBlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDelManualBlockList) ProtoMessage() {}

func (x *ReqDelManualBlockList) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDelManualBlockList.ProtoReflect.Descriptor instead.
func (*ReqDelManualBlockList) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{0}
}

func (x *ReqDelManualBlockList) GetUnBlockUser() *BlockUser {
	if x != nil {
		return x.UnBlockUser
	}
	return nil
}

func (x *ReqDelManualBlockList) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

func (x *ReqDelManualBlockList) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqSetManualBlockList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockUser *BlockUser    `protobuf:"bytes,1,opt,name=BlockUser,proto3" json:"BlockUser,omitempty"`
	BotId     int32         `protobuf:"varint,2,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ReqSetManualBlockList) Reset() {
	*x = ReqSetManualBlockList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSetManualBlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSetManualBlockList) ProtoMessage() {}

func (x *ReqSetManualBlockList) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSetManualBlockList.ProtoReflect.Descriptor instead.
func (*ReqSetManualBlockList) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{1}
}

func (x *ReqSetManualBlockList) GetBlockUser() *BlockUser {
	if x != nil {
		return x.BlockUser
	}
	return nil
}

func (x *ReqSetManualBlockList) GetBotId() int32 {
	if x != nil {
		return x.BotId
	}
	return 0
}

func (x *ReqSetManualBlockList) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

// 獲取所有禁言用戶
type ReqGetBlockList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReqGetBlockList) Reset() {
	*x = ReqGetBlockList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetBlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetBlockList) ProtoMessage() {}

func (x *ReqGetBlockList) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetBlockList.ProtoReflect.Descriptor instead.
func (*ReqGetBlockList) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{2}
}

type ReplyGetBlockList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockUserList []*BlockUser `protobuf:"bytes,1,rep,name=BlockUserList,proto3" json:"BlockUserList,omitempty"`
	ErrorCode     int32        `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *ReplyGetBlockList) Reset() {
	*x = ReplyGetBlockList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetBlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetBlockList) ProtoMessage() {}

func (x *ReplyGetBlockList) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetBlockList.ProtoReflect.Descriptor instead.
func (*ReplyGetBlockList) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{3}
}

func (x *ReplyGetBlockList) GetBlockUserList() []*BlockUser {
	if x != nil {
		return x.BlockUserList
	}
	return nil
}

func (x *ReplyGetBlockList) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 取消單個用戶
type ReqUnBlockBannedUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId []int32 `protobuf:"varint,1,rep,packed,name=userId,proto3" json:"userId,omitempty"`
}

func (x *ReqUnBlockBannedUser) Reset() {
	*x = ReqUnBlockBannedUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUnBlockBannedUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUnBlockBannedUser) ProtoMessage() {}

func (x *ReqUnBlockBannedUser) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUnBlockBannedUser.ProtoReflect.Descriptor instead.
func (*ReqUnBlockBannedUser) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{4}
}

func (x *ReqUnBlockBannedUser) GetUserId() []int32 {
	if x != nil {
		return x.UserId
	}
	return nil
}

// 解除所有用户限制
type ReqUnBlockAllUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReqUnBlockAllUser) Reset() {
	*x = ReqUnBlockAllUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUnBlockAllUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUnBlockAllUser) ProtoMessage() {}

func (x *ReqUnBlockAllUser) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUnBlockAllUser.ProtoReflect.Descriptor instead.
func (*ReqUnBlockAllUser) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{5}
}

// 管理員DuringTime秒內 , 同一用戶只允許發送MaxMsgCount條消息，超過群內禁言BlockTime小時
// ex.管理員1秒內 , 同一用戶只允許發送2條消息，超過群內禁言１小時
type MessageSendingLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DuringTime  int64 `protobuf:"varint,3,opt,name=DuringTime,proto3" json:"DuringTime,omitempty"`   //時間間隔
	MaxMsgCount int32 `protobuf:"varint,4,opt,name=MaxMsgCount,proto3" json:"MaxMsgCount,omitempty"` //最大消息數量
	BlockTime   int64 `protobuf:"varint,5,opt,name=BlockTime,proto3" json:"BlockTime,omitempty"`     //被禁言的時間
}

func (x *MessageSendingLimit) Reset() {
	*x = MessageSendingLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSendingLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSendingLimit) ProtoMessage() {}

func (x *MessageSendingLimit) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSendingLimit.ProtoReflect.Descriptor instead.
func (*MessageSendingLimit) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{6}
}

func (x *MessageSendingLimit) GetDuringTime() int64 {
	if x != nil {
		return x.DuringTime
	}
	return 0
}

func (x *MessageSendingLimit) GetMaxMsgCount() int32 {
	if x != nil {
		return x.MaxMsgCount
	}
	return 0
}

func (x *MessageSendingLimit) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

type MessageMaskWord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaskWord []string `protobuf:"bytes,1,rep,name=MaskWord,proto3" json:"MaskWord,omitempty"` //屏蔽詞庫
}

func (x *MessageMaskWord) Reset() {
	*x = MessageMaskWord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageMaskWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageMaskWord) ProtoMessage() {}

func (x *MessageMaskWord) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageMaskWord.ProtoReflect.Descriptor instead.
func (*MessageMaskWord) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{7}
}

func (x *MessageMaskWord) GetMaskWord() []string {
	if x != nil {
		return x.MaskWord
	}
	return nil
}

type ReqGetSendMessageRuleSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"` // 群ID
}

func (x *ReqGetSendMessageRuleSettings) Reset() {
	*x = ReqGetSendMessageRuleSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetSendMessageRuleSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetSendMessageRuleSettings) ProtoMessage() {}

func (x *ReqGetSendMessageRuleSettings) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetSendMessageRuleSettings.ProtoReflect.Descriptor instead.
func (*ReqGetSendMessageRuleSettings) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{8}
}

func (x *ReqGetSendMessageRuleSettings) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type SendMessageRuleSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId             int64                `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	MessageSendingLimit *MessageSendingLimit `protobuf:"bytes,2,opt,name=MessageSendingLimit,proto3" json:"MessageSendingLimit,omitempty"`
	MessageMaskWord     *MessageMaskWord     `protobuf:"bytes,3,opt,name=MessageMaskWord,proto3" json:"MessageMaskWord,omitempty"`
}

func (x *SendMessageRuleSettings) Reset() {
	*x = SendMessageRuleSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageRuleSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRuleSettings) ProtoMessage() {}

func (x *SendMessageRuleSettings) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRuleSettings.ProtoReflect.Descriptor instead.
func (*SendMessageRuleSettings) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{9}
}

func (x *SendMessageRuleSettings) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SendMessageRuleSettings) GetMessageSendingLimit() *MessageSendingLimit {
	if x != nil {
		return x.MessageSendingLimit
	}
	return nil
}

func (x *SendMessageRuleSettings) GetMessageMaskWord() *MessageMaskWord {
	if x != nil {
		return x.MessageMaskWord
	}
	return nil
}

type ReplyGetSendMessageRuleSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendMessageRuleSettings *SendMessageRuleSettings `protobuf:"bytes,1,opt,name=SendMessageRuleSettings,proto3" json:"SendMessageRuleSettings,omitempty"`
}

func (x *ReplyGetSendMessageRuleSettings) Reset() {
	*x = ReplyGetSendMessageRuleSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetSendMessageRuleSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetSendMessageRuleSettings) ProtoMessage() {}

func (x *ReplyGetSendMessageRuleSettings) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetSendMessageRuleSettings.ProtoReflect.Descriptor instead.
func (*ReplyGetSendMessageRuleSettings) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{10}
}

func (x *ReplyGetSendMessageRuleSettings) GetSendMessageRuleSettings() *SendMessageRuleSettings {
	if x != nil {
		return x.SendMessageRuleSettings
	}
	return nil
}

type ReqUpdateMessageSendingLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId              int32                `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	GroupId             int64                `protobuf:"varint,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	MessageSendingLimit *MessageSendingLimit `protobuf:"bytes,3,opt,name=MessageSendingLimit,proto3" json:"MessageSendingLimit,omitempty"`
}

func (x *ReqUpdateMessageSendingLimit) Reset() {
	*x = ReqUpdateMessageSendingLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateMessageSendingLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateMessageSendingLimit) ProtoMessage() {}

func (x *ReqUpdateMessageSendingLimit) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateMessageSendingLimit.ProtoReflect.Descriptor instead.
func (*ReqUpdateMessageSendingLimit) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{11}
}

func (x *ReqUpdateMessageSendingLimit) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUpdateMessageSendingLimit) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ReqUpdateMessageSendingLimit) GetMessageSendingLimit() *MessageSendingLimit {
	if x != nil {
		return x.MessageSendingLimit
	}
	return nil
}

type ReqUpdateMessageMaskWord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int32            `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	GroupId         int64            `protobuf:"varint,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	MessageMaskWord *MessageMaskWord `protobuf:"bytes,3,opt,name=MessageMaskWord,proto3" json:"MessageMaskWord,omitempty"`
}

func (x *ReqUpdateMessageMaskWord) Reset() {
	*x = ReqUpdateMessageMaskWord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateMessageMaskWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateMessageMaskWord) ProtoMessage() {}

func (x *ReqUpdateMessageMaskWord) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateMessageMaskWord.ProtoReflect.Descriptor instead.
func (*ReqUpdateMessageMaskWord) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{12}
}

func (x *ReqUpdateMessageMaskWord) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqUpdateMessageMaskWord) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ReqUpdateMessageMaskWord) GetMessageMaskWord() *MessageMaskWord {
	if x != nil {
		return x.MessageMaskWord
	}
	return nil
}

type ReplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyData []byte `protobuf:"bytes,1,opt,name=replyData,proto3" json:"replyData,omitempty"`
	Reply     bool   `protobuf:"varint,2,opt,name=reply,proto3" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *ReplyData) Reset() {
	*x = ReplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyData) ProtoMessage() {}

func (x *ReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyData.ProtoReflect.Descriptor instead.
func (*ReplyData) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{13}
}

func (x *ReplyData) GetReplyData() []byte {
	if x != nil {
		return x.ReplyData
	}
	return nil
}

func (x *ReplyData) GetReply() bool {
	if x != nil {
		return x.Reply
	}
	return false
}

func (x *ReplyData) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

// 發送請求
type ReqNatsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          ProtocolType  `protobuf:"varint,1,opt,name=Type,proto3,enum=advertisemonitor.ProtocolType" json:"Type,omitempty"`
	Data          []byte        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	MessageId     int64         `protobuf:"varint,3,opt,name=MessageId,proto3" json:"MessageId,omitempty"`
	Hostname      string        `protobuf:"bytes,4,opt,name=Hostname,proto3" json:"Hostname,omitempty"` //節點名稱
	BlockListType BlockListType `protobuf:"varint,5,opt,name=BlockListType,proto3,enum=advertisemonitor.BlockListType" json:"BlockListType,omitempty"`
}

func (x *ReqNatsData) Reset() {
	*x = ReqNatsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqNatsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqNatsData) ProtoMessage() {}

func (x *ReqNatsData) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqNatsData.ProtoReflect.Descriptor instead.
func (*ReqNatsData) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{14}
}

func (x *ReqNatsData) GetType() ProtocolType {
	if x != nil {
		return x.Type
	}
	return ProtocolType_BlockUserList_TYPE
}

func (x *ReqNatsData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReqNatsData) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ReqNatsData) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ReqNatsData) GetBlockListType() BlockListType {
	if x != nil {
		return x.BlockListType
	}
	return BlockListType_NormalBlockList_TYPE
}

// 確認請求的回覆
type ReplyNatsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable    bool   `protobuf:"varint,1,opt,name=Enable,proto3" json:"Enable,omitempty"`
	MessageId int64  `protobuf:"varint,2,opt,name=MessageId,proto3" json:"MessageId,omitempty"`
	Hostname  string `protobuf:"bytes,3,opt,name=Hostname,proto3" json:"Hostname,omitempty"` //節點名稱
}

func (x *ReplyNatsData) Reset() {
	*x = ReplyNatsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyNatsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyNatsData) ProtoMessage() {}

func (x *ReplyNatsData) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyNatsData.ProtoReflect.Descriptor instead.
func (*ReplyNatsData) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{15}
}

func (x *ReplyNatsData) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *ReplyNatsData) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ReplyNatsData) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

// 禁言某用戶
type BlockUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	BlockTime int64 `protobuf:"varint,2,opt,name=blockTime,proto3" json:"blockTime,omitempty"` //禁言时间
	GroupId   int64 `protobuf:"varint,3,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Terminate bool  `protobuf:"varint,4,opt,name=terminate,proto3" json:"terminate,omitempty"` //是否踢下线
}

func (x *BlockUser) Reset() {
	*x = BlockUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUser) ProtoMessage() {}

func (x *BlockUser) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUser.ProtoReflect.Descriptor instead.
func (*BlockUser) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{16}
}

func (x *BlockUser) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BlockUser) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *BlockUser) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *BlockUser) GetTerminate() bool {
	if x != nil {
		return x.Terminate
	}
	return false
}

// 禁言多个用户
type BlockUserList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserList []*BlockUser `protobuf:"bytes,1,rep,name=UserList,proto3" json:"UserList,omitempty"`
}

func (x *BlockUserList) Reset() {
	*x = BlockUserList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUserList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserList) ProtoMessage() {}

func (x *BlockUserList) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserList.ProtoReflect.Descriptor instead.
func (*BlockUserList) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{17}
}

func (x *BlockUserList) GetUserList() []*BlockUser {
	if x != nil {
		return x.UserList
	}
	return nil
}

// 解禁某用戶
type UnBlockUserList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   []int32      `protobuf:"varint,2,rep,packed,name=userId,proto3" json:"userId,omitempty"`
	UserList []*BlockUser `protobuf:"bytes,1,rep,name=UserList,proto3" json:"UserList,omitempty"`
	GroupId  int64        `protobuf:"varint,3,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
}

func (x *UnBlockUserList) Reset() {
	*x = UnBlockUserList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnBlockUserList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnBlockUserList) ProtoMessage() {}

func (x *UnBlockUserList) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnBlockUserList.ProtoReflect.Descriptor instead.
func (*UnBlockUserList) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{18}
}

func (x *UnBlockUserList) GetUserId() []int32 {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *UnBlockUserList) GetUserList() []*BlockUser {
	if x != nil {
		return x.UserList
	}
	return nil
}

func (x *UnBlockUserList) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

// IM向AdvertiseMonitor發送msg的結構體
type MsgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID         int32  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`                // 消息查询者
	GroupId        int64  `protobuf:"varint,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`              // 群ID
	MessageContent string `protobuf:"bytes,3,opt,name=MessageContent,proto3" json:"MessageContent,omitempty"` //消息内容
	Phone          string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	ContentType    int32  `protobuf:"varint,5,opt,name=ContentType,proto3" json:"ContentType,omitempty"` //消息类型 0表示普通文本消息 1 表示图片
	ClientIp       string `protobuf:"bytes,6,opt,name=ClientIp,proto3" json:"ClientIp,omitempty"`        // 客户端的IP
}

func (x *MsgInfo) Reset() {
	*x = MsgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgInfo) ProtoMessage() {}

func (x *MsgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgInfo.ProtoReflect.Descriptor instead.
func (*MsgInfo) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{19}
}

func (x *MsgInfo) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MsgInfo) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MsgInfo) GetMessageContent() string {
	if x != nil {
		return x.MessageContent
	}
	return ""
}

func (x *MsgInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *MsgInfo) GetContentType() int32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *MsgInfo) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

// IM向AdvertiseMonitor發送msg list的結構體
type MsgInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgInfoList []*MsgInfo `protobuf:"bytes,2,rep,name=MsgInfoList,proto3" json:"MsgInfoList,omitempty"`
}

func (x *MsgInfoList) Reset() {
	*x = MsgInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_advertisemonitor_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgInfoList) ProtoMessage() {}

func (x *MsgInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_advertisemonitor_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgInfoList.ProtoReflect.Descriptor instead.
func (*MsgInfoList) Descriptor() ([]byte, []int) {
	return file_advertisemonitor_proto_rawDescGZIP(), []int{20}
}

func (x *MsgInfoList) GetMsgInfoList() []*MsgInfo {
	if x != nil {
		return x.MsgInfoList
	}
	return nil
}

var File_advertisemonitor_proto protoreflect.FileDescriptor

var file_advertisemonitor_proto_rawDesc = []byte{
	0x0a, 0x16, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x1a, 0x13, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2f, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x92, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x55, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x55, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x8e, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x11, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x74, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2e,
	0x0a, 0x14, 0x52, 0x65, 0x71, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x13,
	0x0a, 0x11, 0x52, 0x65, 0x71, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x22, 0x75, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61,
	0x78, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x4d, 0x61, 0x78, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x0f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x4d, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x4d, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x64, 0x22, 0x39, 0x0a, 0x1d, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x22, 0xd9, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x13, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x13,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x4b, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x64, 0x52,
	0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x64,
	0x22, 0x86, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x63, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x1c, 0x52, 0x65,
	0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x13,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x57, 0x6f,
	0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x64,
	0x52, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72,
	0x64, 0x22, 0x5d, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xd6, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x4e, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x32, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x61, 0x0a, 0x0d, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x4e, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x79, 0x0a, 0x09,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x48, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x7c, 0x0a, 0x0f, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0xb7, 0x01, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x22, 0x4a, 0x0a, 0x0b, 0x4d, 0x73, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x4d, 0x73, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x2a, 0x99, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x73,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x08,
	0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x09, 0x2a, 0x5c, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x32,
	0xaf, 0x06, 0x0a, 0x10, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x12, 0x58, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5a,
	0x0a, 0x11, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0e, 0x55, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x1a, 0x1b, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00,
	0x12, 0x82, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x2f, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x1a, 0x31, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x2e, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x00, 0x12, 0x62, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x2e, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x57, 0x6f, 0x72, 0x64, 0x1a, 0x1b, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x44, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x00, 0x42, 0x22, 0x5a, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_advertisemonitor_proto_rawDescOnce sync.Once
	file_advertisemonitor_proto_rawDescData = file_advertisemonitor_proto_rawDesc
)

func file_advertisemonitor_proto_rawDescGZIP() []byte {
	file_advertisemonitor_proto_rawDescOnce.Do(func() {
		file_advertisemonitor_proto_rawDescData = protoimpl.X.CompressGZIP(file_advertisemonitor_proto_rawDescData)
	})
	return file_advertisemonitor_proto_rawDescData
}

var file_advertisemonitor_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_advertisemonitor_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_advertisemonitor_proto_goTypes = []interface{}{
	(ProtocolType)(0),                       // 0: advertisemonitor.ProtocolType
	(BlockListType)(0),                      // 1: advertisemonitor.BlockListType
	(*ReqDelManualBlockList)(nil),           // 2: advertisemonitor.ReqDelManualBlockList
	(*ReqSetManualBlockList)(nil),           // 3: advertisemonitor.ReqSetManualBlockList
	(*ReqGetBlockList)(nil),                 // 4: advertisemonitor.ReqGetBlockList
	(*ReplyGetBlockList)(nil),               // 5: advertisemonitor.ReplyGetBlockList
	(*ReqUnBlockBannedUser)(nil),            // 6: advertisemonitor.ReqUnBlockBannedUser
	(*ReqUnBlockAllUser)(nil),               // 7: advertisemonitor.ReqUnBlockAllUser
	(*MessageSendingLimit)(nil),             // 8: advertisemonitor.MessageSendingLimit
	(*MessageMaskWord)(nil),                 // 9: advertisemonitor.MessageMaskWord
	(*ReqGetSendMessageRuleSettings)(nil),   // 10: advertisemonitor.ReqGetSendMessageRuleSettings
	(*SendMessageRuleSettings)(nil),         // 11: advertisemonitor.SendMessageRuleSettings
	(*ReplyGetSendMessageRuleSettings)(nil), // 12: advertisemonitor.ReplyGetSendMessageRuleSettings
	(*ReqUpdateMessageSendingLimit)(nil),    // 13: advertisemonitor.ReqUpdateMessageSendingLimit
	(*ReqUpdateMessageMaskWord)(nil),        // 14: advertisemonitor.ReqUpdateMessageMaskWord
	(*ReplyData)(nil),                       // 15: advertisemonitor.ReplyData
	(*ReqNatsData)(nil),                     // 16: advertisemonitor.ReqNatsData
	(*ReplyNatsData)(nil),                   // 17: advertisemonitor.ReplyNatsData
	(*BlockUser)(nil),                       // 18: advertisemonitor.BlockUser
	(*BlockUserList)(nil),                   // 19: advertisemonitor.BlockUserList
	(*UnBlockUserList)(nil),                 // 20: advertisemonitor.UnBlockUserList
	(*MsgInfo)(nil),                         // 21: advertisemonitor.MsgInfo
	(*MsgInfoList)(nil),                     // 22: advertisemonitor.MsgInfoList
	(*pbcomm.Debug)(nil),                    // 23: pbcomm.Debug
}
var file_advertisemonitor_proto_depIdxs = []int32{
	18, // 0: advertisemonitor.ReqDelManualBlockList.UnBlockUser:type_name -> advertisemonitor.BlockUser
	23, // 1: advertisemonitor.ReqDelManualBlockList.debug:type_name -> pbcomm.Debug
	18, // 2: advertisemonitor.ReqSetManualBlockList.BlockUser:type_name -> advertisemonitor.BlockUser
	23, // 3: advertisemonitor.ReqSetManualBlockList.debug:type_name -> pbcomm.Debug
	18, // 4: advertisemonitor.ReplyGetBlockList.BlockUserList:type_name -> advertisemonitor.BlockUser
	8,  // 5: advertisemonitor.SendMessageRuleSettings.MessageSendingLimit:type_name -> advertisemonitor.MessageSendingLimit
	9,  // 6: advertisemonitor.SendMessageRuleSettings.MessageMaskWord:type_name -> advertisemonitor.MessageMaskWord
	11, // 7: advertisemonitor.ReplyGetSendMessageRuleSettings.SendMessageRuleSettings:type_name -> advertisemonitor.SendMessageRuleSettings
	8,  // 8: advertisemonitor.ReqUpdateMessageSendingLimit.MessageSendingLimit:type_name -> advertisemonitor.MessageSendingLimit
	9,  // 9: advertisemonitor.ReqUpdateMessageMaskWord.MessageMaskWord:type_name -> advertisemonitor.MessageMaskWord
	0,  // 10: advertisemonitor.ReqNatsData.Type:type_name -> advertisemonitor.ProtocolType
	1,  // 11: advertisemonitor.ReqNatsData.BlockListType:type_name -> advertisemonitor.BlockListType
	18, // 12: advertisemonitor.BlockUserList.UserList:type_name -> advertisemonitor.BlockUser
	18, // 13: advertisemonitor.UnBlockUserList.UserList:type_name -> advertisemonitor.BlockUser
	21, // 14: advertisemonitor.MsgInfoList.MsgInfoList:type_name -> advertisemonitor.MsgInfo
	4,  // 15: advertisemonitor.AdvertiseMonitor.GetBlockList:input_type -> advertisemonitor.ReqGetBlockList
	6,  // 16: advertisemonitor.AdvertiseMonitor.UnBlockSingleUser:input_type -> advertisemonitor.ReqUnBlockBannedUser
	7,  // 17: advertisemonitor.AdvertiseMonitor.UnBlockAllUser:input_type -> advertisemonitor.ReqUnBlockAllUser
	10, // 18: advertisemonitor.AdvertiseMonitor.GetSendMessageRuleSettings:input_type -> advertisemonitor.ReqGetSendMessageRuleSettings
	13, // 19: advertisemonitor.AdvertiseMonitor.UpdateMessageSendingLimit:input_type -> advertisemonitor.ReqUpdateMessageSendingLimit
	14, // 20: advertisemonitor.AdvertiseMonitor.UpdateMessageMaskWord:input_type -> advertisemonitor.ReqUpdateMessageMaskWord
	3,  // 21: advertisemonitor.AdvertiseMonitor.SetManualBlockList:input_type -> advertisemonitor.ReqSetManualBlockList
	2,  // 22: advertisemonitor.AdvertiseMonitor.DelManualBlockList:input_type -> advertisemonitor.ReqDelManualBlockList
	5,  // 23: advertisemonitor.AdvertiseMonitor.GetBlockList:output_type -> advertisemonitor.ReplyGetBlockList
	15, // 24: advertisemonitor.AdvertiseMonitor.UnBlockSingleUser:output_type -> advertisemonitor.ReplyData
	15, // 25: advertisemonitor.AdvertiseMonitor.UnBlockAllUser:output_type -> advertisemonitor.ReplyData
	12, // 26: advertisemonitor.AdvertiseMonitor.GetSendMessageRuleSettings:output_type -> advertisemonitor.ReplyGetSendMessageRuleSettings
	15, // 27: advertisemonitor.AdvertiseMonitor.UpdateMessageSendingLimit:output_type -> advertisemonitor.ReplyData
	15, // 28: advertisemonitor.AdvertiseMonitor.UpdateMessageMaskWord:output_type -> advertisemonitor.ReplyData
	15, // 29: advertisemonitor.AdvertiseMonitor.SetManualBlockList:output_type -> advertisemonitor.ReplyData
	15, // 30: advertisemonitor.AdvertiseMonitor.DelManualBlockList:output_type -> advertisemonitor.ReplyData
	23, // [23:31] is the sub-list for method output_type
	15, // [15:23] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_advertisemonitor_proto_init() }
func file_advertisemonitor_proto_init() {
	if File_advertisemonitor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_advertisemonitor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDelManualBlockList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSetManualBlockList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetBlockList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetBlockList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUnBlockBannedUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUnBlockAllUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSendingLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageMaskWord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetSendMessageRuleSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageRuleSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetSendMessageRuleSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateMessageSendingLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateMessageMaskWord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqNatsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyNatsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUserList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnBlockUserList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_advertisemonitor_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_advertisemonitor_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_advertisemonitor_proto_goTypes,
		DependencyIndexes: file_advertisemonitor_proto_depIdxs,
		EnumInfos:         file_advertisemonitor_proto_enumTypes,
		MessageInfos:      file_advertisemonitor_proto_msgTypes,
	}.Build()
	File_advertisemonitor_proto = out.File
	file_advertisemonitor_proto_rawDesc = nil
	file_advertisemonitor_proto_goTypes = nil
	file_advertisemonitor_proto_depIdxs = nil
}
