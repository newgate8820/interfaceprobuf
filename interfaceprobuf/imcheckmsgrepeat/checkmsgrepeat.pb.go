// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: checkmsgrepeat.proto

package imcheckmsgrepeat

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CheckIsRepeatedRequest
type CheckIsRepeatedRequest struct {
	KeyID                int64    `protobuf:"varint,1,opt,name=KeyID,proto3" json:"KeyID,omitempty" ck:"? == 0"`
	RandomID             int64    `protobuf:"varint,2,opt,name=RandomID,proto3" json:"RandomID,omitempty" ck:"? == 0"`
	RequestTime          int32    `protobuf:"varint,3,opt,name=RequestTime,proto3" json:"RequestTime,omitempty" ck:"? == 0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckIsRepeatedRequest) Reset()         { *m = CheckIsRepeatedRequest{} }
func (m *CheckIsRepeatedRequest) String() string { return proto.CompactTextString(m) }
func (*CheckIsRepeatedRequest) ProtoMessage()    {}
func (*CheckIsRepeatedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1e630c3db66da66, []int{0}
}
func (m *CheckIsRepeatedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckIsRepeatedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckIsRepeatedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckIsRepeatedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckIsRepeatedRequest.Merge(m, src)
}
func (m *CheckIsRepeatedRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckIsRepeatedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckIsRepeatedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckIsRepeatedRequest proto.InternalMessageInfo

func (m *CheckIsRepeatedRequest) GetKeyID() int64 {
	if m != nil {
		return m.KeyID
	}
	return 0
}

func (m *CheckIsRepeatedRequest) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

func (m *CheckIsRepeatedRequest) GetRequestTime() int32 {
	if m != nil {
		return m.RequestTime
	}
	return 0
}

// CheckIsRepeatedReply
type CheckIsRepeatedReply struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	FirstRequestTime     int32    `protobuf:"varint,2,opt,name=FirstRequestTime,proto3" json:"FirstRequestTime,omitempty"`
	MessageObj           []byte   `protobuf:"bytes,3,opt,name=MessageObj,proto3" json:"MessageObj,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckIsRepeatedReply) Reset()         { *m = CheckIsRepeatedReply{} }
func (m *CheckIsRepeatedReply) String() string { return proto.CompactTextString(m) }
func (*CheckIsRepeatedReply) ProtoMessage()    {}
func (*CheckIsRepeatedReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1e630c3db66da66, []int{1}
}
func (m *CheckIsRepeatedReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckIsRepeatedReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckIsRepeatedReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckIsRepeatedReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckIsRepeatedReply.Merge(m, src)
}
func (m *CheckIsRepeatedReply) XXX_Size() int {
	return m.Size()
}
func (m *CheckIsRepeatedReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckIsRepeatedReply.DiscardUnknown(m)
}

var xxx_messageInfo_CheckIsRepeatedReply proto.InternalMessageInfo

func (m *CheckIsRepeatedReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *CheckIsRepeatedReply) GetFirstRequestTime() int32 {
	if m != nil {
		return m.FirstRequestTime
	}
	return 0
}

func (m *CheckIsRepeatedReply) GetMessageObj() []byte {
	if m != nil {
		return m.MessageObj
	}
	return nil
}

// StoreShortMessageRequest
type StoreShortMessageRequest struct {
	KeyID                int64    `protobuf:"varint,1,opt,name=KeyID,proto3" json:"KeyID,omitempty" ck:"? == 0"`
	RandomID             int64    `protobuf:"varint,2,opt,name=RandomID,proto3" json:"RandomID,omitempty" ck:"? == 0"`
	MessageObj           []byte   `protobuf:"bytes,3,opt,name=MessageObj,proto3" json:"MessageObj,omitempty" ck:"len(?) == 0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoreShortMessageRequest) Reset()         { *m = StoreShortMessageRequest{} }
func (m *StoreShortMessageRequest) String() string { return proto.CompactTextString(m) }
func (*StoreShortMessageRequest) ProtoMessage()    {}
func (*StoreShortMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1e630c3db66da66, []int{2}
}
func (m *StoreShortMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreShortMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreShortMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreShortMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreShortMessageRequest.Merge(m, src)
}
func (m *StoreShortMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *StoreShortMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreShortMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StoreShortMessageRequest proto.InternalMessageInfo

func (m *StoreShortMessageRequest) GetKeyID() int64 {
	if m != nil {
		return m.KeyID
	}
	return 0
}

func (m *StoreShortMessageRequest) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

func (m *StoreShortMessageRequest) GetMessageObj() []byte {
	if m != nil {
		return m.MessageObj
	}
	return nil
}

// StoreShortMessageReply
type StoreShortMessageReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoreShortMessageReply) Reset()         { *m = StoreShortMessageReply{} }
func (m *StoreShortMessageReply) String() string { return proto.CompactTextString(m) }
func (*StoreShortMessageReply) ProtoMessage()    {}
func (*StoreShortMessageReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1e630c3db66da66, []int{3}
}
func (m *StoreShortMessageReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreShortMessageReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreShortMessageReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreShortMessageReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreShortMessageReply.Merge(m, src)
}
func (m *StoreShortMessageReply) XXX_Size() int {
	return m.Size()
}
func (m *StoreShortMessageReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreShortMessageReply.DiscardUnknown(m)
}

var xxx_messageInfo_StoreShortMessageReply proto.InternalMessageInfo

// DeleteShortMessageRequest
type DeleteShortMessageRequest struct {
	KeyID                int64    `protobuf:"varint,1,opt,name=KeyID,proto3" json:"KeyID,omitempty" ck:"? == 0"`
	RandomID             int64    `protobuf:"varint,2,opt,name=RandomID,proto3" json:"RandomID,omitempty" ck:"? == 0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteShortMessageRequest) Reset()         { *m = DeleteShortMessageRequest{} }
func (m *DeleteShortMessageRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteShortMessageRequest) ProtoMessage()    {}
func (*DeleteShortMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1e630c3db66da66, []int{4}
}
func (m *DeleteShortMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteShortMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteShortMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteShortMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteShortMessageRequest.Merge(m, src)
}
func (m *DeleteShortMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteShortMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteShortMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteShortMessageRequest proto.InternalMessageInfo

func (m *DeleteShortMessageRequest) GetKeyID() int64 {
	if m != nil {
		return m.KeyID
	}
	return 0
}

func (m *DeleteShortMessageRequest) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

// DeleteShortMessageReply
type DeleteShortMessageReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteShortMessageReply) Reset()         { *m = DeleteShortMessageReply{} }
func (m *DeleteShortMessageReply) String() string { return proto.CompactTextString(m) }
func (*DeleteShortMessageReply) ProtoMessage()    {}
func (*DeleteShortMessageReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1e630c3db66da66, []int{5}
}
func (m *DeleteShortMessageReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteShortMessageReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteShortMessageReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteShortMessageReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteShortMessageReply.Merge(m, src)
}
func (m *DeleteShortMessageReply) XXX_Size() int {
	return m.Size()
}
func (m *DeleteShortMessageReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteShortMessageReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteShortMessageReply proto.InternalMessageInfo

// DeleteShortMessageByDateRequest
type DeleteShortMessageByDateRequest struct {
	KeyID                int64    `protobuf:"varint,1,opt,name=KeyID,proto3" json:"KeyID,omitempty" ck:"? == 0"`
	RandomID             int64    `protobuf:"varint,2,opt,name=RandomID,proto3" json:"RandomID,omitempty" ck:"? == 0"`
	AckTime              int32    `protobuf:"varint,3,opt,name=AckTime,proto3" json:"AckTime,omitempty" ck:"? == 0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteShortMessageByDateRequest) Reset()         { *m = DeleteShortMessageByDateRequest{} }
func (m *DeleteShortMessageByDateRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteShortMessageByDateRequest) ProtoMessage()    {}
func (*DeleteShortMessageByDateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1e630c3db66da66, []int{6}
}
func (m *DeleteShortMessageByDateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteShortMessageByDateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteShortMessageByDateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteShortMessageByDateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteShortMessageByDateRequest.Merge(m, src)
}
func (m *DeleteShortMessageByDateRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteShortMessageByDateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteShortMessageByDateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteShortMessageByDateRequest proto.InternalMessageInfo

func (m *DeleteShortMessageByDateRequest) GetKeyID() int64 {
	if m != nil {
		return m.KeyID
	}
	return 0
}

func (m *DeleteShortMessageByDateRequest) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

func (m *DeleteShortMessageByDateRequest) GetAckTime() int32 {
	if m != nil {
		return m.AckTime
	}
	return 0
}

// DeleteShortMessageByDateReply
type DeleteShortMessageByDateReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteShortMessageByDateReply) Reset()         { *m = DeleteShortMessageByDateReply{} }
func (m *DeleteShortMessageByDateReply) String() string { return proto.CompactTextString(m) }
func (*DeleteShortMessageByDateReply) ProtoMessage()    {}
func (*DeleteShortMessageByDateReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1e630c3db66da66, []int{7}
}
func (m *DeleteShortMessageByDateReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteShortMessageByDateReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteShortMessageByDateReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteShortMessageByDateReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteShortMessageByDateReply.Merge(m, src)
}
func (m *DeleteShortMessageByDateReply) XXX_Size() int {
	return m.Size()
}
func (m *DeleteShortMessageByDateReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteShortMessageByDateReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteShortMessageByDateReply proto.InternalMessageInfo

// StoredMessage 保存的消息数据
type StoredMessage struct {
	RequestTime          int32    `protobuf:"varint,1,opt,name=RequestTime,proto3" json:"RequestTime,omitempty"`
	RandomID             int64    `protobuf:"varint,2,opt,name=RandomID,proto3" json:"RandomID,omitempty"`
	MessageObj           []byte   `protobuf:"bytes,3,opt,name=MessageObj,proto3" json:"MessageObj,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoredMessage) Reset()         { *m = StoredMessage{} }
func (m *StoredMessage) String() string { return proto.CompactTextString(m) }
func (*StoredMessage) ProtoMessage()    {}
func (*StoredMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1e630c3db66da66, []int{8}
}
func (m *StoredMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoredMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoredMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoredMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoredMessage.Merge(m, src)
}
func (m *StoredMessage) XXX_Size() int {
	return m.Size()
}
func (m *StoredMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_StoredMessage.DiscardUnknown(m)
}

var xxx_messageInfo_StoredMessage proto.InternalMessageInfo

func (m *StoredMessage) GetRequestTime() int32 {
	if m != nil {
		return m.RequestTime
	}
	return 0
}

func (m *StoredMessage) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

func (m *StoredMessage) GetMessageObj() []byte {
	if m != nil {
		return m.MessageObj
	}
	return nil
}

func init() {
	proto.RegisterType((*CheckIsRepeatedRequest)(nil), "imcheckmsgrepeat.CheckIsRepeatedRequest")
	proto.RegisterType((*CheckIsRepeatedReply)(nil), "imcheckmsgrepeat.CheckIsRepeatedReply")
	proto.RegisterType((*StoreShortMessageRequest)(nil), "imcheckmsgrepeat.StoreShortMessageRequest")
	proto.RegisterType((*StoreShortMessageReply)(nil), "imcheckmsgrepeat.StoreShortMessageReply")
	proto.RegisterType((*DeleteShortMessageRequest)(nil), "imcheckmsgrepeat.DeleteShortMessageRequest")
	proto.RegisterType((*DeleteShortMessageReply)(nil), "imcheckmsgrepeat.DeleteShortMessageReply")
	proto.RegisterType((*DeleteShortMessageByDateRequest)(nil), "imcheckmsgrepeat.DeleteShortMessageByDateRequest")
	proto.RegisterType((*DeleteShortMessageByDateReply)(nil), "imcheckmsgrepeat.DeleteShortMessageByDateReply")
	proto.RegisterType((*StoredMessage)(nil), "imcheckmsgrepeat.StoredMessage")
}

func init() { proto.RegisterFile("checkmsgrepeat.proto", fileDescriptor_a1e630c3db66da66) }

var fileDescriptor_a1e630c3db66da66 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xd9, 0x44, 0x81, 0x6a, 0x0a, 0x6d, 0x18, 0x45, 0xc5, 0xb5, 0xd4, 0xc4, 0x5a, 0x09,
	0xe4, 0xb4, 0x52, 0x4a, 0x81, 0x13, 0x52, 0x55, 0x11, 0x22, 0xa4, 0x08, 0x55, 0x91, 0x5c, 0x4e,
	0xdc, 0x1c, 0x67, 0xea, 0x06, 0xc7, 0x59, 0xb3, 0xde, 0x1e, 0x72, 0xe3, 0x4d, 0xe0, 0xc0, 0xc3,
	0x70, 0xe4, 0xc6, 0xad, 0x42, 0x79, 0x84, 0x3e, 0x01, 0xf2, 0x3a, 0x20, 0x27, 0x9b, 0x40, 0x38,
	0xb4, 0xb7, 0x64, 0xe6, 0x9f, 0xd9, 0x6f, 0xc7, 0xff, 0x2c, 0xd4, 0x82, 0x0b, 0x0a, 0xa2, 0x38,
	0x0d, 0x25, 0x25, 0xe4, 0xab, 0x56, 0x22, 0x85, 0x12, 0x58, 0x1d, 0xc6, 0xf3, 0x71, 0x7b, 0x4f,
	0x27, 0xfa, 0x97, 0xe7, 0x87, 0xa1, 0x08, 0x85, 0xfe, 0xa3, 0x7f, 0xe5, 0x05, 0xfc, 0x33, 0x83,
	0x9d, 0xd7, 0x59, 0x45, 0x37, 0xf5, 0x74, 0x01, 0x0d, 0x3c, 0xfa, 0x78, 0x49, 0xa9, 0xc2, 0xc7,
	0x50, 0x79, 0x4b, 0x93, 0x6e, 0xc7, 0x62, 0x0e, 0x73, 0xcb, 0xed, 0xed, 0xeb, 0xab, 0xc6, 0x66,
	0x10, 0xbd, 0xe4, 0x27, 0xce, 0xf1, 0xb1, 0xf3, 0x94, 0x7b, 0x79, 0x16, 0x0f, 0x60, 0xc3, 0xf3,
	0xc7, 0x03, 0x11, 0x77, 0x3b, 0x56, 0x69, 0xb9, 0xf2, 0x8f, 0x00, 0x8f, 0x60, 0x73, 0xd6, 0xfe,
	0xdd, 0x30, 0x26, 0xab, 0xec, 0x30, 0xb7, 0x62, 0xea, 0x8b, 0x1a, 0x2e, 0xa1, 0x66, 0x00, 0x26,
	0xa3, 0x09, 0x6e, 0x41, 0xa9, 0x17, 0x69, 0xb6, 0x0d, 0xaf, 0xd4, 0x8b, 0x70, 0x1f, 0xaa, 0x6f,
	0x86, 0x32, 0x55, 0xc5, 0xfe, 0x19, 0x4f, 0xc5, 0x33, 0xe2, 0x58, 0x07, 0x38, 0xa5, 0x34, 0xf5,
	0x43, 0xea, 0xf5, 0x3f, 0x68, 0x8a, 0xfb, 0x5e, 0x21, 0xc2, 0xbf, 0x32, 0xb0, 0xce, 0x94, 0x90,
	0x74, 0x76, 0x21, 0xa4, 0x9a, 0x25, 0x6e, 0x72, 0x2e, 0x2f, 0x4c, 0xa0, 0x76, 0xed, 0xfa, 0xaa,
	0x51, 0xcd, 0xe4, 0x23, 0x1a, 0xbb, 0x27, 0xcd, 0x59, 0x4d, 0x11, 0xd3, 0x82, 0x9d, 0x25, 0x94,
	0xc9, 0x68, 0xc2, 0x05, 0xec, 0x76, 0x68, 0x44, 0xea, 0xb6, 0x2e, 0xc0, 0x77, 0xe1, 0xd1, 0xb2,
	0x03, 0x33, 0x96, 0x2f, 0x0c, 0x1a, 0x66, 0xae, 0x3d, 0xe9, 0xf8, 0xea, 0x46, 0x67, 0xda, 0x84,
	0x7b, 0xaf, 0x82, 0xe8, 0x6f, 0x3e, 0xfb, 0x9d, 0xe7, 0x0d, 0xd8, 0x5b, 0x4d, 0x98, 0xdd, 0x21,
	0x86, 0x07, 0x7a, 0xd2, 0x83, 0x59, 0x0e, 0x9d, 0x79, 0x23, 0x33, 0x6d, 0xb4, 0x62, 0x08, 0xed,
	0x45, 0xd6, 0x02, 0xda, 0x3f, 0xfc, 0xf7, 0xec, 0x47, 0x19, 0xb6, 0xb4, 0xe9, 0x4f, 0xd3, 0x30,
	0x77, 0x3d, 0x12, 0x6c, 0x2f, 0xac, 0x01, 0xba, 0xad, 0xc5, 0x6d, 0x6f, 0x2d, 0x5f, 0x65, 0xfb,
	0xc9, 0x1a, 0xca, 0xec, 0x9a, 0x77, 0x30, 0x82, 0x87, 0x86, 0xa5, 0x70, 0xdf, 0x2c, 0x5f, 0xb5,
	0x1d, 0xb6, 0xbb, 0x96, 0x36, 0x3f, 0x6c, 0x0c, 0x68, 0x8e, 0x1d, 0x0f, 0xcc, 0x0e, 0x2b, 0xbd,
	0x6c, 0x37, 0xd7, 0x13, 0xe7, 0xe7, 0x7d, 0x62, 0x60, 0xad, 0xfa, 0xce, 0x78, 0xb4, 0x4e, 0xa7,
	0x39, 0xd7, 0xda, 0x87, 0xff, 0x53, 0xa2, 0x11, 0xda, 0xad, 0x6f, 0xd3, 0x3a, 0xfb, 0x3e, 0xad,
	0xb3, 0x9f, 0xd3, 0x3a, 0x7b, 0xef, 0x0c, 0xc7, 0x8a, 0xe4, 0xb9, 0x1f, 0x50, 0x22, 0xf5, 0x1b,
	0xbd, 0xd8, 0xaf, 0x7f, 0x57, 0x3f, 0xd3, 0xcf, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x28, 0x58,
	0xa0, 0x4e, 0xef, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CheckMsgRepeatClient is the client API for CheckMsgRepeat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CheckMsgRepeatClient interface {
	// CheckIsRepeated 检测是否重复message
	CheckIsRepeated(ctx context.Context, in *CheckIsRepeatedRequest, opts ...grpc.CallOption) (*CheckIsRepeatedReply, error)
	// StoreShortMessage 存储short_message
	StoreShortMessage(ctx context.Context, in *StoreShortMessageRequest, opts ...grpc.CallOption) (*StoreShortMessageReply, error)
	// DeleteShortMessage 删除short_message
	DeleteShortMessage(ctx context.Context, in *DeleteShortMessageRequest, opts ...grpc.CallOption) (*DeleteShortMessageReply, error)
	// DeleteShortMessageByDate 根据时间删除消息
	DeleteShortMessageByDate(ctx context.Context, in *DeleteShortMessageByDateRequest, opts ...grpc.CallOption) (*DeleteShortMessageByDateReply, error)
}

type checkMsgRepeatClient struct {
	cc *grpc.ClientConn
}

func NewCheckMsgRepeatClient(cc *grpc.ClientConn) CheckMsgRepeatClient {
	return &checkMsgRepeatClient{cc}
}

func (c *checkMsgRepeatClient) CheckIsRepeated(ctx context.Context, in *CheckIsRepeatedRequest, opts ...grpc.CallOption) (*CheckIsRepeatedReply, error) {
	out := new(CheckIsRepeatedReply)
	err := c.cc.Invoke(ctx, "/imcheckmsgrepeat.CheckMsgRepeat/CheckIsRepeated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkMsgRepeatClient) StoreShortMessage(ctx context.Context, in *StoreShortMessageRequest, opts ...grpc.CallOption) (*StoreShortMessageReply, error) {
	out := new(StoreShortMessageReply)
	err := c.cc.Invoke(ctx, "/imcheckmsgrepeat.CheckMsgRepeat/StoreShortMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkMsgRepeatClient) DeleteShortMessage(ctx context.Context, in *DeleteShortMessageRequest, opts ...grpc.CallOption) (*DeleteShortMessageReply, error) {
	out := new(DeleteShortMessageReply)
	err := c.cc.Invoke(ctx, "/imcheckmsgrepeat.CheckMsgRepeat/DeleteShortMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkMsgRepeatClient) DeleteShortMessageByDate(ctx context.Context, in *DeleteShortMessageByDateRequest, opts ...grpc.CallOption) (*DeleteShortMessageByDateReply, error) {
	out := new(DeleteShortMessageByDateReply)
	err := c.cc.Invoke(ctx, "/imcheckmsgrepeat.CheckMsgRepeat/DeleteShortMessageByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckMsgRepeatServer is the server API for CheckMsgRepeat service.
type CheckMsgRepeatServer interface {
	// CheckIsRepeated 检测是否重复message
	CheckIsRepeated(context.Context, *CheckIsRepeatedRequest) (*CheckIsRepeatedReply, error)
	// StoreShortMessage 存储short_message
	StoreShortMessage(context.Context, *StoreShortMessageRequest) (*StoreShortMessageReply, error)
	// DeleteShortMessage 删除short_message
	DeleteShortMessage(context.Context, *DeleteShortMessageRequest) (*DeleteShortMessageReply, error)
	// DeleteShortMessageByDate 根据时间删除消息
	DeleteShortMessageByDate(context.Context, *DeleteShortMessageByDateRequest) (*DeleteShortMessageByDateReply, error)
}

// UnimplementedCheckMsgRepeatServer can be embedded to have forward compatible implementations.
type UnimplementedCheckMsgRepeatServer struct {
}

func (*UnimplementedCheckMsgRepeatServer) CheckIsRepeated(ctx context.Context, req *CheckIsRepeatedRequest) (*CheckIsRepeatedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsRepeated not implemented")
}
func (*UnimplementedCheckMsgRepeatServer) StoreShortMessage(ctx context.Context, req *StoreShortMessageRequest) (*StoreShortMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreShortMessage not implemented")
}
func (*UnimplementedCheckMsgRepeatServer) DeleteShortMessage(ctx context.Context, req *DeleteShortMessageRequest) (*DeleteShortMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShortMessage not implemented")
}
func (*UnimplementedCheckMsgRepeatServer) DeleteShortMessageByDate(ctx context.Context, req *DeleteShortMessageByDateRequest) (*DeleteShortMessageByDateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShortMessageByDate not implemented")
}

func RegisterCheckMsgRepeatServer(s *grpc.Server, srv CheckMsgRepeatServer) {
	s.RegisterService(&_CheckMsgRepeat_serviceDesc, srv)
}

func _CheckMsgRepeat_CheckIsRepeated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsRepeatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckMsgRepeatServer).CheckIsRepeated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imcheckmsgrepeat.CheckMsgRepeat/CheckIsRepeated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckMsgRepeatServer).CheckIsRepeated(ctx, req.(*CheckIsRepeatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckMsgRepeat_StoreShortMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreShortMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckMsgRepeatServer).StoreShortMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imcheckmsgrepeat.CheckMsgRepeat/StoreShortMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckMsgRepeatServer).StoreShortMessage(ctx, req.(*StoreShortMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckMsgRepeat_DeleteShortMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckMsgRepeatServer).DeleteShortMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imcheckmsgrepeat.CheckMsgRepeat/DeleteShortMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckMsgRepeatServer).DeleteShortMessage(ctx, req.(*DeleteShortMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckMsgRepeat_DeleteShortMessageByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortMessageByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckMsgRepeatServer).DeleteShortMessageByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imcheckmsgrepeat.CheckMsgRepeat/DeleteShortMessageByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckMsgRepeatServer).DeleteShortMessageByDate(ctx, req.(*DeleteShortMessageByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CheckMsgRepeat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imcheckmsgrepeat.CheckMsgRepeat",
	HandlerType: (*CheckMsgRepeatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckIsRepeated",
			Handler:    _CheckMsgRepeat_CheckIsRepeated_Handler,
		},
		{
			MethodName: "StoreShortMessage",
			Handler:    _CheckMsgRepeat_StoreShortMessage_Handler,
		},
		{
			MethodName: "DeleteShortMessage",
			Handler:    _CheckMsgRepeat_DeleteShortMessage_Handler,
		},
		{
			MethodName: "DeleteShortMessageByDate",
			Handler:    _CheckMsgRepeat_DeleteShortMessageByDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checkmsgrepeat.proto",
}

func (m *CheckIsRepeatedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsRepeatedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckIsRepeatedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RequestTime != 0 {
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.RequestTime))
		i--
		dAtA[i] = 0x18
	}
	if m.RandomID != 0 {
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.RandomID))
		i--
		dAtA[i] = 0x10
	}
	if m.KeyID != 0 {
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.KeyID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckIsRepeatedReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIsRepeatedReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckIsRepeatedReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MessageObj) > 0 {
		i -= len(m.MessageObj)
		copy(dAtA[i:], m.MessageObj)
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(len(m.MessageObj)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FirstRequestTime != 0 {
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.FirstRequestTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StoreShortMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShortMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreShortMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MessageObj) > 0 {
		i -= len(m.MessageObj)
		copy(dAtA[i:], m.MessageObj)
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(len(m.MessageObj)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RandomID != 0 {
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.RandomID))
		i--
		dAtA[i] = 0x10
	}
	if m.KeyID != 0 {
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.KeyID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StoreShortMessageReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreShortMessageReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreShortMessageReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DeleteShortMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteShortMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteShortMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RandomID != 0 {
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.RandomID))
		i--
		dAtA[i] = 0x10
	}
	if m.KeyID != 0 {
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.KeyID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteShortMessageReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteShortMessageReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteShortMessageReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DeleteShortMessageByDateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteShortMessageByDateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteShortMessageByDateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AckTime != 0 {
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.AckTime))
		i--
		dAtA[i] = 0x18
	}
	if m.RandomID != 0 {
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.RandomID))
		i--
		dAtA[i] = 0x10
	}
	if m.KeyID != 0 {
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.KeyID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteShortMessageByDateReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteShortMessageByDateReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteShortMessageByDateReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *StoredMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoredMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoredMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MessageObj) > 0 {
		i -= len(m.MessageObj)
		copy(dAtA[i:], m.MessageObj)
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(len(m.MessageObj)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RandomID != 0 {
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.RandomID))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestTime != 0 {
		i = encodeVarintCheckmsgrepeat(dAtA, i, uint64(m.RequestTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCheckmsgrepeat(dAtA []byte, offset int, v uint64) int {
	offset -= sovCheckmsgrepeat(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CheckIsRepeatedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyID != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.KeyID))
	}
	if m.RandomID != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.RandomID))
	}
	if m.RequestTime != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.RequestTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckIsRepeatedReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if m.FirstRequestTime != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.FirstRequestTime))
	}
	l = len(m.MessageObj)
	if l > 0 {
		n += 1 + l + sovCheckmsgrepeat(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreShortMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyID != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.KeyID))
	}
	if m.RandomID != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.RandomID))
	}
	l = len(m.MessageObj)
	if l > 0 {
		n += 1 + l + sovCheckmsgrepeat(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreShortMessageReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteShortMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyID != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.KeyID))
	}
	if m.RandomID != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.RandomID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteShortMessageReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteShortMessageByDateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyID != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.KeyID))
	}
	if m.RandomID != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.RandomID))
	}
	if m.AckTime != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.AckTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteShortMessageByDateReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoredMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestTime != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.RequestTime))
	}
	if m.RandomID != 0 {
		n += 1 + sovCheckmsgrepeat(uint64(m.RandomID))
	}
	l = len(m.MessageObj)
	if l > 0 {
		n += 1 + l + sovCheckmsgrepeat(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCheckmsgrepeat(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCheckmsgrepeat(x uint64) (n int) {
	return sovCheckmsgrepeat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CheckIsRepeatedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsRepeatedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsRepeatedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			m.KeyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTime", wireType)
			}
			m.RequestTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckmsgrepeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIsRepeatedReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIsRepeatedReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIsRepeatedReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstRequestTime", wireType)
			}
			m.FirstRequestTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstRequestTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageObj", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageObj = append(m.MessageObj[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageObj == nil {
				m.MessageObj = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckmsgrepeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShortMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShortMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShortMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			m.KeyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageObj", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageObj = append(m.MessageObj[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageObj == nil {
				m.MessageObj = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckmsgrepeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreShortMessageReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShortMessageReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShortMessageReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCheckmsgrepeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteShortMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteShortMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteShortMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			m.KeyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckmsgrepeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteShortMessageReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteShortMessageReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteShortMessageReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCheckmsgrepeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteShortMessageByDateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteShortMessageByDateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteShortMessageByDateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			m.KeyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckTime", wireType)
			}
			m.AckTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckmsgrepeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteShortMessageByDateReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteShortMessageByDateReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteShortMessageByDateReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCheckmsgrepeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoredMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoredMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoredMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTime", wireType)
			}
			m.RequestTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageObj", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageObj = append(m.MessageObj[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageObj == nil {
				m.MessageObj = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckmsgrepeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckmsgrepeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCheckmsgrepeat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCheckmsgrepeat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckmsgrepeat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCheckmsgrepeat
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCheckmsgrepeat
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCheckmsgrepeat
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCheckmsgrepeat        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCheckmsgrepeat          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCheckmsgrepeat = fmt.Errorf("proto: unexpected end of group")
)
