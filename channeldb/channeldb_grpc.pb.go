// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: channeldb.proto

package channeldb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChannelDBClient is the client API for ChannelDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelDBClient interface {
	//=========================================== HeartBeating =========================================================
	// HeartBeating
	HeartBeating(ctx context.Context, in *ReqHeartBeating, opts ...grpc.CallOption) (*ReplyHeartBeating, error)
	//=========================================== ChannelMsgId =========================================================
	// 更新超级群 msgid and pts
	UpdateChannelMsgIdAndPts(ctx context.Context, in *ReqUpdateChannelMsgIdAndPts, opts ...grpc.CallOption) (*ReplyUpdateChannelMsgIdAndPts, error)
	// 直接设置 msgId pts 值 erlang版本导入数据使用
	SetChannelMsgIdAndPts(ctx context.Context, in *ReqSetChannelMsgIdAndPts, opts ...grpc.CallOption) (*ReplySetChannelMsgIdAndPts, error)
	// 自增超级群 pts
	UpdateChannelPts(ctx context.Context, in *ReqUpdateChannelPts, opts ...grpc.CallOption) (*ReplyUpdateChannelPts, error)
	// 自增超级群 pts N次
	UpdateChannelPtsWithNum(ctx context.Context, in *ReqUpdateChannelPtsWithNum, opts ...grpc.CallOption) (*ReplyUpdateChannelPtsWithNum, error)
	// 查询单条 channelmsgid
	GetChannelMsgId(ctx context.Context, in *ReqGetChannelMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMsgId, error)
	// 超级群自增ID 返回自增后的 msgId, pts
	IncreaseChannelId(ctx context.Context, in *ReqIncreaseChannelId, opts ...grpc.CallOption) (*ReplyIncreaseChannelId, error)
	// 获取超级群的自增序列 返回 msgId、pts
	GetChannelIncreaseId(ctx context.Context, in *ReqGetChannelIncreaseId, opts ...grpc.CallOption) (*ReplyGetChannelIncreaseId, error)
	// 查询多条 channelmsgId
	GetChannelIncreaseIds(ctx context.Context, in *ReqGetChannelIncreaseIds, opts ...grpc.CallOption) (*ReplyGetChannelIncreaseIds, error)
	//=========================================== ptsHandle =========================================================
	// 存储 pts 信息 只需要存储到boltdb即可，不用存储到tidb
	StoreChannelPtsHandle(ctx context.Context, in *ReqStoreChannelPtsHandle, opts ...grpc.CallOption) (*ReplyErr, error)
	// 批量存储pts信息
	BatchStoreChannelPtsHandle(ctx context.Context, in *ReqBatchStoreChannelPtsHandle, opts ...grpc.CallOption) (*ReplyErr, error)
	// 获取某个超级群的diff
	GetChannelDiffByPts(ctx context.Context, in *ReqGetChannelDiffByPts, opts ...grpc.CallOption) (*ReplyGetChannelDiffByPts, error)
	// 获取最后的PtsHandle
	GetChannelLastPtsHandle(ctx context.Context, in *ReqGetChannelLastPtsHandle, opts ...grpc.CallOption) (*ReplyGetChannelLastPtsHandle, error)
	// 删除ptsHandle
	DeleteChannelPtsHandle(ctx context.Context, in *ReqDeleteChannelPtsHandle, opts ...grpc.CallOption) (*ReplyDeleteChannelPtsHandle, error)
	//=========================================== ChannelMsg =========================================================
	// 新增或者更新消息
	InsertOrUpdateChannelMsg(ctx context.Context, in *ReqInsertOrUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error)
	// 更新消息内容
	UpdateChannelMsg(ctx context.Context, in *ReqUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error)
	// 批量存储消息
	BatchInsertOrUpdateChannelMsg(ctx context.Context, in *ReqBatchInsertOrUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error)
	// 删除信息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteMsgs(ctx context.Context, in *ReqDeleteMsgs, opts ...grpc.CallOption) (*ReplyDeleteMsgs, error)
	// 超级群中删除指定用户信息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteUserHistory(ctx context.Context, in *ReqDeleteUserHistory, opts ...grpc.CallOption) (*ReplyDeleteUserHistory, error)
	// 删除超级群所有消息
	DeleteChannelMsg(ctx context.Context, in *ReqDeleteChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error)
	// 删除单条超级群消息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteChannelMessage(ctx context.Context, in *ReqDeleteChannelMessage, opts ...grpc.CallOption) (*ReplyDeleteChannelMessage, error)
	// 获取指定msgid信息
	GetChannelMessage(ctx context.Context, in *ReqGetChannelMessage, opts ...grpc.CallOption) (*ReplyGetChannelMessage, error)
	// 获取一组信息
	GetChannelMsgsByMsgIds(ctx context.Context, in *ReqGetChannelMsgsByMsgIds, opts ...grpc.CallOption) (*ReplyGetChannelMsgsByMsgIds, error)
	// 获取历史
	GetChannelMsgHistory(ctx context.Context, in *ReqGetChannelMsgHistory, opts ...grpc.CallOption) (*ReplyGetChannelMsgHistory, error)
	// 获取超级群中最新的一条消息
	GetChannelTopMsg(ctx context.Context, in *ReqGetChannelTopMst, opts ...grpc.CallOption) (*ReplyGetChannelTopMst, error)
	// 获取超级群中最新的一条消息
	GetChannelTopMsg2(ctx context.Context, in *ReqGetChannelTopMst2, opts ...grpc.CallOption) (*ReplyGetChannelTopMst, error)
	// 分页查询媒体消息
	GetChannelMediaMessageHistoryByMedia(ctx context.Context, in *ReqGetChannelMediaMessageHistoryByMedia, opts ...grpc.CallOption) (*ReplyGetChannelMediaMessageHistoryByMedia, error)
	// 新增或者修改 超级群 标记删除记录
	InsertOrUpdateChannelMessageDeleteMark(ctx context.Context, in *ReqInsertOrUpdateChannelMessageDeleteMark, opts ...grpc.CallOption) (*ReplyInsertOrUpdateChannelMessageDeleteMark, error)
	// 查询 超级群 标记删除记录
	GetChannelMessageDeleteMark(ctx context.Context, in *ReqGetChannelMessageDeleteMark, opts ...grpc.CallOption) (*ReplyGetChannelMessageDeleteMark, error)
	//==================================== ChannelMediaMessageStatistics ===============================================
	// 根据channelId 获取ChannelMediaMessageStatistics
	GetChannelMediaMessageStatisticsByMedia(ctx context.Context, in *ReqGetChannelMediaMessageStatisticsByMedia, opts ...grpc.CallOption) (*ReplyGetChannelMediaMessageStatisticsByMedia, error)
	//=========================================== channelAdminLog ======================================================
	// 存储adminlog
	StoreAdminLog(ctx context.Context, in *ReqStoreAdminLog, opts ...grpc.CallOption) (*ReplyErr, error)
	// 查询Adminlog 条件 超级群ID
	FindsAdminLogByChannelId(ctx context.Context, in *ReqFindsAdminLogByChannelId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合 过滤集合 用户ID
	FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 过滤集合 用户ID
	FindsAdminLogByChannelIdAndEventFiltersAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 用户ID
	FindsAdminLogByChannelIdAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合 过滤集合
	FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 过滤集合
	FindsAdminLogByChannelIdAndEventFilters(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndEventFilters, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合
	FindsAdminLogByChannelIdAndAdminUsers(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsers, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// add for channeldb.channel_message_at
	ChannelMessageAtAdd(ctx context.Context, in *ReqChannelMessageAtAdd, opts ...grpc.CallOption) (*ReplyChannelMessageAtAdd, error)
	// get for channeldb.channel_message_at
	ChannelMessageAtGet(ctx context.Context, in *ReqChannelMessageAtGet, opts ...grpc.CallOption) (*ReplyChannelMessageAtGet, error)
	// delete for channeldb.channel_message_at
	ChannelMessageAtDel(ctx context.Context, in *ReqChannelMessageAtDel, opts ...grpc.CallOption) (*ReplyChannelMessageAtDel, error)
	//=================================================== search =======================================================
	SearchMessage(ctx context.Context, in *ReqSearchChannelMsg, opts ...grpc.CallOption) (*ReplySearchChannelMsg, error)
	//=================================================== search =======================================================
	UpdateChannelDialog(ctx context.Context, in *ReqUpdateChannelDialog, opts ...grpc.CallOption) (*ReplyErr, error)
	GetChannelDialogs(ctx context.Context, in *ReqGetChannelDialogs, opts ...grpc.CallOption) (*ReplyGetChannelDialogs, error)
	GetChannelMessageByChannelIdRandomId(ctx context.Context, in *ReqGetChannelMessageByChannelIdRandomId, opts ...grpc.CallOption) (*ReplyGetChannelMessageByChannelIdRandomId, error)
}

type channelDBClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelDBClient(cc grpc.ClientConnInterface) ChannelDBClient {
	return &channelDBClient{cc}
}

func (c *channelDBClient) HeartBeating(ctx context.Context, in *ReqHeartBeating, opts ...grpc.CallOption) (*ReplyHeartBeating, error) {
	out := new(ReplyHeartBeating)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/HeartBeating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) UpdateChannelMsgIdAndPts(ctx context.Context, in *ReqUpdateChannelMsgIdAndPts, opts ...grpc.CallOption) (*ReplyUpdateChannelMsgIdAndPts, error) {
	out := new(ReplyUpdateChannelMsgIdAndPts)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/UpdateChannelMsgIdAndPts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) SetChannelMsgIdAndPts(ctx context.Context, in *ReqSetChannelMsgIdAndPts, opts ...grpc.CallOption) (*ReplySetChannelMsgIdAndPts, error) {
	out := new(ReplySetChannelMsgIdAndPts)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/SetChannelMsgIdAndPts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) UpdateChannelPts(ctx context.Context, in *ReqUpdateChannelPts, opts ...grpc.CallOption) (*ReplyUpdateChannelPts, error) {
	out := new(ReplyUpdateChannelPts)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/UpdateChannelPts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) UpdateChannelPtsWithNum(ctx context.Context, in *ReqUpdateChannelPtsWithNum, opts ...grpc.CallOption) (*ReplyUpdateChannelPtsWithNum, error) {
	out := new(ReplyUpdateChannelPtsWithNum)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/UpdateChannelPtsWithNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMsgId(ctx context.Context, in *ReqGetChannelMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMsgId, error) {
	out := new(ReplyGetChannelMsgId)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelMsgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) IncreaseChannelId(ctx context.Context, in *ReqIncreaseChannelId, opts ...grpc.CallOption) (*ReplyIncreaseChannelId, error) {
	out := new(ReplyIncreaseChannelId)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/IncreaseChannelId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelIncreaseId(ctx context.Context, in *ReqGetChannelIncreaseId, opts ...grpc.CallOption) (*ReplyGetChannelIncreaseId, error) {
	out := new(ReplyGetChannelIncreaseId)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelIncreaseId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelIncreaseIds(ctx context.Context, in *ReqGetChannelIncreaseIds, opts ...grpc.CallOption) (*ReplyGetChannelIncreaseIds, error) {
	out := new(ReplyGetChannelIncreaseIds)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelIncreaseIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) StoreChannelPtsHandle(ctx context.Context, in *ReqStoreChannelPtsHandle, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/StoreChannelPtsHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) BatchStoreChannelPtsHandle(ctx context.Context, in *ReqBatchStoreChannelPtsHandle, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/BatchStoreChannelPtsHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelDiffByPts(ctx context.Context, in *ReqGetChannelDiffByPts, opts ...grpc.CallOption) (*ReplyGetChannelDiffByPts, error) {
	out := new(ReplyGetChannelDiffByPts)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelDiffByPts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelLastPtsHandle(ctx context.Context, in *ReqGetChannelLastPtsHandle, opts ...grpc.CallOption) (*ReplyGetChannelLastPtsHandle, error) {
	out := new(ReplyGetChannelLastPtsHandle)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelLastPtsHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteChannelPtsHandle(ctx context.Context, in *ReqDeleteChannelPtsHandle, opts ...grpc.CallOption) (*ReplyDeleteChannelPtsHandle, error) {
	out := new(ReplyDeleteChannelPtsHandle)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/DeleteChannelPtsHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) InsertOrUpdateChannelMsg(ctx context.Context, in *ReqInsertOrUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/InsertOrUpdateChannelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) UpdateChannelMsg(ctx context.Context, in *ReqUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/UpdateChannelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) BatchInsertOrUpdateChannelMsg(ctx context.Context, in *ReqBatchInsertOrUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/BatchInsertOrUpdateChannelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteMsgs(ctx context.Context, in *ReqDeleteMsgs, opts ...grpc.CallOption) (*ReplyDeleteMsgs, error) {
	out := new(ReplyDeleteMsgs)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/DeleteMsgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteUserHistory(ctx context.Context, in *ReqDeleteUserHistory, opts ...grpc.CallOption) (*ReplyDeleteUserHistory, error) {
	out := new(ReplyDeleteUserHistory)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/DeleteUserHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteChannelMsg(ctx context.Context, in *ReqDeleteChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/DeleteChannelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteChannelMessage(ctx context.Context, in *ReqDeleteChannelMessage, opts ...grpc.CallOption) (*ReplyDeleteChannelMessage, error) {
	out := new(ReplyDeleteChannelMessage)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/DeleteChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMessage(ctx context.Context, in *ReqGetChannelMessage, opts ...grpc.CallOption) (*ReplyGetChannelMessage, error) {
	out := new(ReplyGetChannelMessage)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMsgsByMsgIds(ctx context.Context, in *ReqGetChannelMsgsByMsgIds, opts ...grpc.CallOption) (*ReplyGetChannelMsgsByMsgIds, error) {
	out := new(ReplyGetChannelMsgsByMsgIds)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelMsgsByMsgIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMsgHistory(ctx context.Context, in *ReqGetChannelMsgHistory, opts ...grpc.CallOption) (*ReplyGetChannelMsgHistory, error) {
	out := new(ReplyGetChannelMsgHistory)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelMsgHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelTopMsg(ctx context.Context, in *ReqGetChannelTopMst, opts ...grpc.CallOption) (*ReplyGetChannelTopMst, error) {
	out := new(ReplyGetChannelTopMst)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelTopMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelTopMsg2(ctx context.Context, in *ReqGetChannelTopMst2, opts ...grpc.CallOption) (*ReplyGetChannelTopMst, error) {
	out := new(ReplyGetChannelTopMst)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelTopMsg2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMediaMessageHistoryByMedia(ctx context.Context, in *ReqGetChannelMediaMessageHistoryByMedia, opts ...grpc.CallOption) (*ReplyGetChannelMediaMessageHistoryByMedia, error) {
	out := new(ReplyGetChannelMediaMessageHistoryByMedia)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelMediaMessageHistoryByMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) InsertOrUpdateChannelMessageDeleteMark(ctx context.Context, in *ReqInsertOrUpdateChannelMessageDeleteMark, opts ...grpc.CallOption) (*ReplyInsertOrUpdateChannelMessageDeleteMark, error) {
	out := new(ReplyInsertOrUpdateChannelMessageDeleteMark)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/InsertOrUpdateChannelMessageDeleteMark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMessageDeleteMark(ctx context.Context, in *ReqGetChannelMessageDeleteMark, opts ...grpc.CallOption) (*ReplyGetChannelMessageDeleteMark, error) {
	out := new(ReplyGetChannelMessageDeleteMark)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelMessageDeleteMark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMediaMessageStatisticsByMedia(ctx context.Context, in *ReqGetChannelMediaMessageStatisticsByMedia, opts ...grpc.CallOption) (*ReplyGetChannelMediaMessageStatisticsByMedia, error) {
	out := new(ReplyGetChannelMediaMessageStatisticsByMedia)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelMediaMessageStatisticsByMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) StoreAdminLog(ctx context.Context, in *ReqStoreAdminLog, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/StoreAdminLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelId(ctx context.Context, in *ReqFindsAdminLogByChannelId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/FindsAdminLogByChannelId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndEventFiltersAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndEventFiltersAndUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsersAndEventFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndEventFilters(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndEventFilters, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndEventFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndAdminUsers(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsers, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) ChannelMessageAtAdd(ctx context.Context, in *ReqChannelMessageAtAdd, opts ...grpc.CallOption) (*ReplyChannelMessageAtAdd, error) {
	out := new(ReplyChannelMessageAtAdd)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/ChannelMessageAtAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) ChannelMessageAtGet(ctx context.Context, in *ReqChannelMessageAtGet, opts ...grpc.CallOption) (*ReplyChannelMessageAtGet, error) {
	out := new(ReplyChannelMessageAtGet)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/ChannelMessageAtGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) ChannelMessageAtDel(ctx context.Context, in *ReqChannelMessageAtDel, opts ...grpc.CallOption) (*ReplyChannelMessageAtDel, error) {
	out := new(ReplyChannelMessageAtDel)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/ChannelMessageAtDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) SearchMessage(ctx context.Context, in *ReqSearchChannelMsg, opts ...grpc.CallOption) (*ReplySearchChannelMsg, error) {
	out := new(ReplySearchChannelMsg)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/SearchMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) UpdateChannelDialog(ctx context.Context, in *ReqUpdateChannelDialog, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/UpdateChannelDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelDialogs(ctx context.Context, in *ReqGetChannelDialogs, opts ...grpc.CallOption) (*ReplyGetChannelDialogs, error) {
	out := new(ReplyGetChannelDialogs)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMessageByChannelIdRandomId(ctx context.Context, in *ReqGetChannelMessageByChannelIdRandomId, opts ...grpc.CallOption) (*ReplyGetChannelMessageByChannelIdRandomId, error) {
	out := new(ReplyGetChannelMessageByChannelIdRandomId)
	err := c.cc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelMessageByChannelIdRandomId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelDBServer is the server API for ChannelDB service.
// All implementations must embed UnimplementedChannelDBServer
// for forward compatibility
type ChannelDBServer interface {
	//=========================================== HeartBeating =========================================================
	// HeartBeating
	HeartBeating(context.Context, *ReqHeartBeating) (*ReplyHeartBeating, error)
	//=========================================== ChannelMsgId =========================================================
	// 更新超级群 msgid and pts
	UpdateChannelMsgIdAndPts(context.Context, *ReqUpdateChannelMsgIdAndPts) (*ReplyUpdateChannelMsgIdAndPts, error)
	// 直接设置 msgId pts 值 erlang版本导入数据使用
	SetChannelMsgIdAndPts(context.Context, *ReqSetChannelMsgIdAndPts) (*ReplySetChannelMsgIdAndPts, error)
	// 自增超级群 pts
	UpdateChannelPts(context.Context, *ReqUpdateChannelPts) (*ReplyUpdateChannelPts, error)
	// 自增超级群 pts N次
	UpdateChannelPtsWithNum(context.Context, *ReqUpdateChannelPtsWithNum) (*ReplyUpdateChannelPtsWithNum, error)
	// 查询单条 channelmsgid
	GetChannelMsgId(context.Context, *ReqGetChannelMsgId) (*ReplyGetChannelMsgId, error)
	// 超级群自增ID 返回自增后的 msgId, pts
	IncreaseChannelId(context.Context, *ReqIncreaseChannelId) (*ReplyIncreaseChannelId, error)
	// 获取超级群的自增序列 返回 msgId、pts
	GetChannelIncreaseId(context.Context, *ReqGetChannelIncreaseId) (*ReplyGetChannelIncreaseId, error)
	// 查询多条 channelmsgId
	GetChannelIncreaseIds(context.Context, *ReqGetChannelIncreaseIds) (*ReplyGetChannelIncreaseIds, error)
	//=========================================== ptsHandle =========================================================
	// 存储 pts 信息 只需要存储到boltdb即可，不用存储到tidb
	StoreChannelPtsHandle(context.Context, *ReqStoreChannelPtsHandle) (*ReplyErr, error)
	// 批量存储pts信息
	BatchStoreChannelPtsHandle(context.Context, *ReqBatchStoreChannelPtsHandle) (*ReplyErr, error)
	// 获取某个超级群的diff
	GetChannelDiffByPts(context.Context, *ReqGetChannelDiffByPts) (*ReplyGetChannelDiffByPts, error)
	// 获取最后的PtsHandle
	GetChannelLastPtsHandle(context.Context, *ReqGetChannelLastPtsHandle) (*ReplyGetChannelLastPtsHandle, error)
	// 删除ptsHandle
	DeleteChannelPtsHandle(context.Context, *ReqDeleteChannelPtsHandle) (*ReplyDeleteChannelPtsHandle, error)
	//=========================================== ChannelMsg =========================================================
	// 新增或者更新消息
	InsertOrUpdateChannelMsg(context.Context, *ReqInsertOrUpdateChannelMsg) (*ReplyErr, error)
	// 更新消息内容
	UpdateChannelMsg(context.Context, *ReqUpdateChannelMsg) (*ReplyErr, error)
	// 批量存储消息
	BatchInsertOrUpdateChannelMsg(context.Context, *ReqBatchInsertOrUpdateChannelMsg) (*ReplyErr, error)
	// 删除信息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteMsgs(context.Context, *ReqDeleteMsgs) (*ReplyDeleteMsgs, error)
	// 超级群中删除指定用户信息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteUserHistory(context.Context, *ReqDeleteUserHistory) (*ReplyDeleteUserHistory, error)
	// 删除超级群所有消息
	DeleteChannelMsg(context.Context, *ReqDeleteChannelMsg) (*ReplyErr, error)
	// 删除单条超级群消息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteChannelMessage(context.Context, *ReqDeleteChannelMessage) (*ReplyDeleteChannelMessage, error)
	// 获取指定msgid信息
	GetChannelMessage(context.Context, *ReqGetChannelMessage) (*ReplyGetChannelMessage, error)
	// 获取一组信息
	GetChannelMsgsByMsgIds(context.Context, *ReqGetChannelMsgsByMsgIds) (*ReplyGetChannelMsgsByMsgIds, error)
	// 获取历史
	GetChannelMsgHistory(context.Context, *ReqGetChannelMsgHistory) (*ReplyGetChannelMsgHistory, error)
	// 获取超级群中最新的一条消息
	GetChannelTopMsg(context.Context, *ReqGetChannelTopMst) (*ReplyGetChannelTopMst, error)
	// 获取超级群中最新的一条消息
	GetChannelTopMsg2(context.Context, *ReqGetChannelTopMst2) (*ReplyGetChannelTopMst, error)
	// 分页查询媒体消息
	GetChannelMediaMessageHistoryByMedia(context.Context, *ReqGetChannelMediaMessageHistoryByMedia) (*ReplyGetChannelMediaMessageHistoryByMedia, error)
	// 新增或者修改 超级群 标记删除记录
	InsertOrUpdateChannelMessageDeleteMark(context.Context, *ReqInsertOrUpdateChannelMessageDeleteMark) (*ReplyInsertOrUpdateChannelMessageDeleteMark, error)
	// 查询 超级群 标记删除记录
	GetChannelMessageDeleteMark(context.Context, *ReqGetChannelMessageDeleteMark) (*ReplyGetChannelMessageDeleteMark, error)
	//==================================== ChannelMediaMessageStatistics ===============================================
	// 根据channelId 获取ChannelMediaMessageStatistics
	GetChannelMediaMessageStatisticsByMedia(context.Context, *ReqGetChannelMediaMessageStatisticsByMedia) (*ReplyGetChannelMediaMessageStatisticsByMedia, error)
	//=========================================== channelAdminLog ======================================================
	// 存储adminlog
	StoreAdminLog(context.Context, *ReqStoreAdminLog) (*ReplyErr, error)
	// 查询Adminlog 条件 超级群ID
	FindsAdminLogByChannelId(context.Context, *ReqFindsAdminLogByChannelId) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合 过滤集合 用户ID
	FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(context.Context, *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 过滤集合 用户ID
	FindsAdminLogByChannelIdAndEventFiltersAndUserId(context.Context, *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 用户ID
	FindsAdminLogByChannelIdAndUserId(context.Context, *ReqFindsAdminLogByChannelIdAndUserId) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合 过滤集合
	FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(context.Context, *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 过滤集合
	FindsAdminLogByChannelIdAndEventFilters(context.Context, *ReqFindsAdminLogByChannelIdAndEventFilters) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合
	FindsAdminLogByChannelIdAndAdminUsers(context.Context, *ReqFindsAdminLogByChannelIdAndAdminUsers) (*ReplyFindsAdminLog, error)
	// add for channeldb.channel_message_at
	ChannelMessageAtAdd(context.Context, *ReqChannelMessageAtAdd) (*ReplyChannelMessageAtAdd, error)
	// get for channeldb.channel_message_at
	ChannelMessageAtGet(context.Context, *ReqChannelMessageAtGet) (*ReplyChannelMessageAtGet, error)
	// delete for channeldb.channel_message_at
	ChannelMessageAtDel(context.Context, *ReqChannelMessageAtDel) (*ReplyChannelMessageAtDel, error)
	//=================================================== search =======================================================
	SearchMessage(context.Context, *ReqSearchChannelMsg) (*ReplySearchChannelMsg, error)
	//=================================================== search =======================================================
	UpdateChannelDialog(context.Context, *ReqUpdateChannelDialog) (*ReplyErr, error)
	GetChannelDialogs(context.Context, *ReqGetChannelDialogs) (*ReplyGetChannelDialogs, error)
	GetChannelMessageByChannelIdRandomId(context.Context, *ReqGetChannelMessageByChannelIdRandomId) (*ReplyGetChannelMessageByChannelIdRandomId, error)
	mustEmbedUnimplementedChannelDBServer()
}

// UnimplementedChannelDBServer must be embedded to have forward compatible implementations.
type UnimplementedChannelDBServer struct {
}

func (UnimplementedChannelDBServer) HeartBeating(context.Context, *ReqHeartBeating) (*ReplyHeartBeating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeating not implemented")
}
func (UnimplementedChannelDBServer) UpdateChannelMsgIdAndPts(context.Context, *ReqUpdateChannelMsgIdAndPts) (*ReplyUpdateChannelMsgIdAndPts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelMsgIdAndPts not implemented")
}
func (UnimplementedChannelDBServer) SetChannelMsgIdAndPts(context.Context, *ReqSetChannelMsgIdAndPts) (*ReplySetChannelMsgIdAndPts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChannelMsgIdAndPts not implemented")
}
func (UnimplementedChannelDBServer) UpdateChannelPts(context.Context, *ReqUpdateChannelPts) (*ReplyUpdateChannelPts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelPts not implemented")
}
func (UnimplementedChannelDBServer) UpdateChannelPtsWithNum(context.Context, *ReqUpdateChannelPtsWithNum) (*ReplyUpdateChannelPtsWithNum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelPtsWithNum not implemented")
}
func (UnimplementedChannelDBServer) GetChannelMsgId(context.Context, *ReqGetChannelMsgId) (*ReplyGetChannelMsgId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMsgId not implemented")
}
func (UnimplementedChannelDBServer) IncreaseChannelId(context.Context, *ReqIncreaseChannelId) (*ReplyIncreaseChannelId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseChannelId not implemented")
}
func (UnimplementedChannelDBServer) GetChannelIncreaseId(context.Context, *ReqGetChannelIncreaseId) (*ReplyGetChannelIncreaseId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelIncreaseId not implemented")
}
func (UnimplementedChannelDBServer) GetChannelIncreaseIds(context.Context, *ReqGetChannelIncreaseIds) (*ReplyGetChannelIncreaseIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelIncreaseIds not implemented")
}
func (UnimplementedChannelDBServer) StoreChannelPtsHandle(context.Context, *ReqStoreChannelPtsHandle) (*ReplyErr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreChannelPtsHandle not implemented")
}
func (UnimplementedChannelDBServer) BatchStoreChannelPtsHandle(context.Context, *ReqBatchStoreChannelPtsHandle) (*ReplyErr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchStoreChannelPtsHandle not implemented")
}
func (UnimplementedChannelDBServer) GetChannelDiffByPts(context.Context, *ReqGetChannelDiffByPts) (*ReplyGetChannelDiffByPts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelDiffByPts not implemented")
}
func (UnimplementedChannelDBServer) GetChannelLastPtsHandle(context.Context, *ReqGetChannelLastPtsHandle) (*ReplyGetChannelLastPtsHandle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelLastPtsHandle not implemented")
}
func (UnimplementedChannelDBServer) DeleteChannelPtsHandle(context.Context, *ReqDeleteChannelPtsHandle) (*ReplyDeleteChannelPtsHandle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelPtsHandle not implemented")
}
func (UnimplementedChannelDBServer) InsertOrUpdateChannelMsg(context.Context, *ReqInsertOrUpdateChannelMsg) (*ReplyErr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOrUpdateChannelMsg not implemented")
}
func (UnimplementedChannelDBServer) UpdateChannelMsg(context.Context, *ReqUpdateChannelMsg) (*ReplyErr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelMsg not implemented")
}
func (UnimplementedChannelDBServer) BatchInsertOrUpdateChannelMsg(context.Context, *ReqBatchInsertOrUpdateChannelMsg) (*ReplyErr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchInsertOrUpdateChannelMsg not implemented")
}
func (UnimplementedChannelDBServer) DeleteMsgs(context.Context, *ReqDeleteMsgs) (*ReplyDeleteMsgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMsgs not implemented")
}
func (UnimplementedChannelDBServer) DeleteUserHistory(context.Context, *ReqDeleteUserHistory) (*ReplyDeleteUserHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserHistory not implemented")
}
func (UnimplementedChannelDBServer) DeleteChannelMsg(context.Context, *ReqDeleteChannelMsg) (*ReplyErr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelMsg not implemented")
}
func (UnimplementedChannelDBServer) DeleteChannelMessage(context.Context, *ReqDeleteChannelMessage) (*ReplyDeleteChannelMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelMessage not implemented")
}
func (UnimplementedChannelDBServer) GetChannelMessage(context.Context, *ReqGetChannelMessage) (*ReplyGetChannelMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMessage not implemented")
}
func (UnimplementedChannelDBServer) GetChannelMsgsByMsgIds(context.Context, *ReqGetChannelMsgsByMsgIds) (*ReplyGetChannelMsgsByMsgIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMsgsByMsgIds not implemented")
}
func (UnimplementedChannelDBServer) GetChannelMsgHistory(context.Context, *ReqGetChannelMsgHistory) (*ReplyGetChannelMsgHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMsgHistory not implemented")
}
func (UnimplementedChannelDBServer) GetChannelTopMsg(context.Context, *ReqGetChannelTopMst) (*ReplyGetChannelTopMst, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelTopMsg not implemented")
}
func (UnimplementedChannelDBServer) GetChannelTopMsg2(context.Context, *ReqGetChannelTopMst2) (*ReplyGetChannelTopMst, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelTopMsg2 not implemented")
}
func (UnimplementedChannelDBServer) GetChannelMediaMessageHistoryByMedia(context.Context, *ReqGetChannelMediaMessageHistoryByMedia) (*ReplyGetChannelMediaMessageHistoryByMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMediaMessageHistoryByMedia not implemented")
}
func (UnimplementedChannelDBServer) InsertOrUpdateChannelMessageDeleteMark(context.Context, *ReqInsertOrUpdateChannelMessageDeleteMark) (*ReplyInsertOrUpdateChannelMessageDeleteMark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOrUpdateChannelMessageDeleteMark not implemented")
}
func (UnimplementedChannelDBServer) GetChannelMessageDeleteMark(context.Context, *ReqGetChannelMessageDeleteMark) (*ReplyGetChannelMessageDeleteMark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMessageDeleteMark not implemented")
}
func (UnimplementedChannelDBServer) GetChannelMediaMessageStatisticsByMedia(context.Context, *ReqGetChannelMediaMessageStatisticsByMedia) (*ReplyGetChannelMediaMessageStatisticsByMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMediaMessageStatisticsByMedia not implemented")
}
func (UnimplementedChannelDBServer) StoreAdminLog(context.Context, *ReqStoreAdminLog) (*ReplyErr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreAdminLog not implemented")
}
func (UnimplementedChannelDBServer) FindsAdminLogByChannelId(context.Context, *ReqFindsAdminLogByChannelId) (*ReplyFindsAdminLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindsAdminLogByChannelId not implemented")
}
func (UnimplementedChannelDBServer) FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(context.Context, *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) (*ReplyFindsAdminLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId not implemented")
}
func (UnimplementedChannelDBServer) FindsAdminLogByChannelIdAndEventFiltersAndUserId(context.Context, *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) (*ReplyFindsAdminLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindsAdminLogByChannelIdAndEventFiltersAndUserId not implemented")
}
func (UnimplementedChannelDBServer) FindsAdminLogByChannelIdAndUserId(context.Context, *ReqFindsAdminLogByChannelIdAndUserId) (*ReplyFindsAdminLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindsAdminLogByChannelIdAndUserId not implemented")
}
func (UnimplementedChannelDBServer) FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(context.Context, *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) (*ReplyFindsAdminLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindsAdminLogByChannelIdAndAdminUsersAndEventFilters not implemented")
}
func (UnimplementedChannelDBServer) FindsAdminLogByChannelIdAndEventFilters(context.Context, *ReqFindsAdminLogByChannelIdAndEventFilters) (*ReplyFindsAdminLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindsAdminLogByChannelIdAndEventFilters not implemented")
}
func (UnimplementedChannelDBServer) FindsAdminLogByChannelIdAndAdminUsers(context.Context, *ReqFindsAdminLogByChannelIdAndAdminUsers) (*ReplyFindsAdminLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindsAdminLogByChannelIdAndAdminUsers not implemented")
}
func (UnimplementedChannelDBServer) ChannelMessageAtAdd(context.Context, *ReqChannelMessageAtAdd) (*ReplyChannelMessageAtAdd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageAtAdd not implemented")
}
func (UnimplementedChannelDBServer) ChannelMessageAtGet(context.Context, *ReqChannelMessageAtGet) (*ReplyChannelMessageAtGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageAtGet not implemented")
}
func (UnimplementedChannelDBServer) ChannelMessageAtDel(context.Context, *ReqChannelMessageAtDel) (*ReplyChannelMessageAtDel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessageAtDel not implemented")
}
func (UnimplementedChannelDBServer) SearchMessage(context.Context, *ReqSearchChannelMsg) (*ReplySearchChannelMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMessage not implemented")
}
func (UnimplementedChannelDBServer) UpdateChannelDialog(context.Context, *ReqUpdateChannelDialog) (*ReplyErr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelDialog not implemented")
}
func (UnimplementedChannelDBServer) GetChannelDialogs(context.Context, *ReqGetChannelDialogs) (*ReplyGetChannelDialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelDialogs not implemented")
}
func (UnimplementedChannelDBServer) GetChannelMessageByChannelIdRandomId(context.Context, *ReqGetChannelMessageByChannelIdRandomId) (*ReplyGetChannelMessageByChannelIdRandomId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMessageByChannelIdRandomId not implemented")
}
func (UnimplementedChannelDBServer) mustEmbedUnimplementedChannelDBServer() {}

// UnsafeChannelDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelDBServer will
// result in compilation errors.
type UnsafeChannelDBServer interface {
	mustEmbedUnimplementedChannelDBServer()
}

func RegisterChannelDBServer(s grpc.ServiceRegistrar, srv ChannelDBServer) {
	s.RegisterService(&ChannelDB_ServiceDesc, srv)
}

func _ChannelDB_HeartBeating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHeartBeating)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).HeartBeating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/HeartBeating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).HeartBeating(ctx, req.(*ReqHeartBeating))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_UpdateChannelMsgIdAndPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelMsgIdAndPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelMsgIdAndPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/UpdateChannelMsgIdAndPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelMsgIdAndPts(ctx, req.(*ReqUpdateChannelMsgIdAndPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_SetChannelMsgIdAndPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetChannelMsgIdAndPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).SetChannelMsgIdAndPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/SetChannelMsgIdAndPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).SetChannelMsgIdAndPts(ctx, req.(*ReqSetChannelMsgIdAndPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_UpdateChannelPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/UpdateChannelPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelPts(ctx, req.(*ReqUpdateChannelPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_UpdateChannelPtsWithNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelPtsWithNum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelPtsWithNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/UpdateChannelPtsWithNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelPtsWithNum(ctx, req.(*ReqUpdateChannelPtsWithNum))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMsgId(ctx, req.(*ReqGetChannelMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_IncreaseChannelId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqIncreaseChannelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).IncreaseChannelId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/IncreaseChannelId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).IncreaseChannelId(ctx, req.(*ReqIncreaseChannelId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelIncreaseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelIncreaseId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelIncreaseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelIncreaseId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelIncreaseId(ctx, req.(*ReqGetChannelIncreaseId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelIncreaseIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelIncreaseIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelIncreaseIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelIncreaseIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelIncreaseIds(ctx, req.(*ReqGetChannelIncreaseIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_StoreChannelPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoreChannelPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).StoreChannelPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/StoreChannelPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).StoreChannelPtsHandle(ctx, req.(*ReqStoreChannelPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_BatchStoreChannelPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBatchStoreChannelPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).BatchStoreChannelPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/BatchStoreChannelPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).BatchStoreChannelPtsHandle(ctx, req.(*ReqBatchStoreChannelPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelDiffByPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelDiffByPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelDiffByPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelDiffByPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelDiffByPts(ctx, req.(*ReqGetChannelDiffByPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelLastPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelLastPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelLastPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelLastPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelLastPtsHandle(ctx, req.(*ReqGetChannelLastPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteChannelPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteChannelPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/DeleteChannelPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteChannelPtsHandle(ctx, req.(*ReqDeleteChannelPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_InsertOrUpdateChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInsertOrUpdateChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).InsertOrUpdateChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/InsertOrUpdateChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).InsertOrUpdateChannelMsg(ctx, req.(*ReqInsertOrUpdateChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_UpdateChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/UpdateChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelMsg(ctx, req.(*ReqUpdateChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_BatchInsertOrUpdateChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBatchInsertOrUpdateChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).BatchInsertOrUpdateChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/BatchInsertOrUpdateChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).BatchInsertOrUpdateChannelMsg(ctx, req.(*ReqBatchInsertOrUpdateChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteMsgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteMsgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteMsgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/DeleteMsgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteMsgs(ctx, req.(*ReqDeleteMsgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteUserHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteUserHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteUserHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/DeleteUserHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteUserHistory(ctx, req.(*ReqDeleteUserHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/DeleteChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteChannelMsg(ctx, req.(*ReqDeleteChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/DeleteChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteChannelMessage(ctx, req.(*ReqDeleteChannelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMessage(ctx, req.(*ReqGetChannelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMsgsByMsgIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMsgsByMsgIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMsgsByMsgIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelMsgsByMsgIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMsgsByMsgIds(ctx, req.(*ReqGetChannelMsgsByMsgIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMsgHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMsgHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMsgHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelMsgHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMsgHistory(ctx, req.(*ReqGetChannelMsgHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelTopMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelTopMst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelTopMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelTopMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelTopMsg(ctx, req.(*ReqGetChannelTopMst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelTopMsg2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelTopMst2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelTopMsg2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelTopMsg2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelTopMsg2(ctx, req.(*ReqGetChannelTopMst2))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMediaMessageHistoryByMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMediaMessageHistoryByMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMediaMessageHistoryByMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelMediaMessageHistoryByMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMediaMessageHistoryByMedia(ctx, req.(*ReqGetChannelMediaMessageHistoryByMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_InsertOrUpdateChannelMessageDeleteMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInsertOrUpdateChannelMessageDeleteMark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).InsertOrUpdateChannelMessageDeleteMark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/InsertOrUpdateChannelMessageDeleteMark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).InsertOrUpdateChannelMessageDeleteMark(ctx, req.(*ReqInsertOrUpdateChannelMessageDeleteMark))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMessageDeleteMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMessageDeleteMark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMessageDeleteMark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelMessageDeleteMark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMessageDeleteMark(ctx, req.(*ReqGetChannelMessageDeleteMark))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMediaMessageStatisticsByMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMediaMessageStatisticsByMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMediaMessageStatisticsByMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelMediaMessageStatisticsByMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMediaMessageStatisticsByMedia(ctx, req.(*ReqGetChannelMediaMessageStatisticsByMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_StoreAdminLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoreAdminLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).StoreAdminLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/StoreAdminLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).StoreAdminLog(ctx, req.(*ReqStoreAdminLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/FindsAdminLogByChannelId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelId(ctx, req.(*ReqFindsAdminLogByChannelId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(ctx, req.(*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndEventFiltersAndUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndEventFiltersAndUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndEventFiltersAndUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndEventFiltersAndUserId(ctx, req.(*ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndUserId(ctx, req.(*ReqFindsAdminLogByChannelIdAndUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndAdminUsersAndEventFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsersAndEventFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(ctx, req.(*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndEventFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndEventFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndEventFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndEventFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndEventFilters(ctx, req.(*ReqFindsAdminLogByChannelIdAndEventFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndAdminUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndAdminUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsers(ctx, req.(*ReqFindsAdminLogByChannelIdAndAdminUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_ChannelMessageAtAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelMessageAtAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).ChannelMessageAtAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/ChannelMessageAtAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).ChannelMessageAtAdd(ctx, req.(*ReqChannelMessageAtAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_ChannelMessageAtGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelMessageAtGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).ChannelMessageAtGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/ChannelMessageAtGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).ChannelMessageAtGet(ctx, req.(*ReqChannelMessageAtGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_ChannelMessageAtDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelMessageAtDel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).ChannelMessageAtDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/ChannelMessageAtDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).ChannelMessageAtDel(ctx, req.(*ReqChannelMessageAtDel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_SearchMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSearchChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).SearchMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/SearchMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).SearchMessage(ctx, req.(*ReqSearchChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_UpdateChannelDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/UpdateChannelDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelDialog(ctx, req.(*ReqUpdateChannelDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelDialogs(ctx, req.(*ReqGetChannelDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMessageByChannelIdRandomId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMessageByChannelIdRandomId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMessageByChannelIdRandomId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelMessageByChannelIdRandomId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMessageByChannelIdRandomId(ctx, req.(*ReqGetChannelMessageByChannelIdRandomId))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelDB_ServiceDesc is the grpc.ServiceDesc for ChannelDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "channeldb.ChannelDB",
	HandlerType: (*ChannelDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartBeating",
			Handler:    _ChannelDB_HeartBeating_Handler,
		},
		{
			MethodName: "UpdateChannelMsgIdAndPts",
			Handler:    _ChannelDB_UpdateChannelMsgIdAndPts_Handler,
		},
		{
			MethodName: "SetChannelMsgIdAndPts",
			Handler:    _ChannelDB_SetChannelMsgIdAndPts_Handler,
		},
		{
			MethodName: "UpdateChannelPts",
			Handler:    _ChannelDB_UpdateChannelPts_Handler,
		},
		{
			MethodName: "UpdateChannelPtsWithNum",
			Handler:    _ChannelDB_UpdateChannelPtsWithNum_Handler,
		},
		{
			MethodName: "GetChannelMsgId",
			Handler:    _ChannelDB_GetChannelMsgId_Handler,
		},
		{
			MethodName: "IncreaseChannelId",
			Handler:    _ChannelDB_IncreaseChannelId_Handler,
		},
		{
			MethodName: "GetChannelIncreaseId",
			Handler:    _ChannelDB_GetChannelIncreaseId_Handler,
		},
		{
			MethodName: "GetChannelIncreaseIds",
			Handler:    _ChannelDB_GetChannelIncreaseIds_Handler,
		},
		{
			MethodName: "StoreChannelPtsHandle",
			Handler:    _ChannelDB_StoreChannelPtsHandle_Handler,
		},
		{
			MethodName: "BatchStoreChannelPtsHandle",
			Handler:    _ChannelDB_BatchStoreChannelPtsHandle_Handler,
		},
		{
			MethodName: "GetChannelDiffByPts",
			Handler:    _ChannelDB_GetChannelDiffByPts_Handler,
		},
		{
			MethodName: "GetChannelLastPtsHandle",
			Handler:    _ChannelDB_GetChannelLastPtsHandle_Handler,
		},
		{
			MethodName: "DeleteChannelPtsHandle",
			Handler:    _ChannelDB_DeleteChannelPtsHandle_Handler,
		},
		{
			MethodName: "InsertOrUpdateChannelMsg",
			Handler:    _ChannelDB_InsertOrUpdateChannelMsg_Handler,
		},
		{
			MethodName: "UpdateChannelMsg",
			Handler:    _ChannelDB_UpdateChannelMsg_Handler,
		},
		{
			MethodName: "BatchInsertOrUpdateChannelMsg",
			Handler:    _ChannelDB_BatchInsertOrUpdateChannelMsg_Handler,
		},
		{
			MethodName: "DeleteMsgs",
			Handler:    _ChannelDB_DeleteMsgs_Handler,
		},
		{
			MethodName: "DeleteUserHistory",
			Handler:    _ChannelDB_DeleteUserHistory_Handler,
		},
		{
			MethodName: "DeleteChannelMsg",
			Handler:    _ChannelDB_DeleteChannelMsg_Handler,
		},
		{
			MethodName: "DeleteChannelMessage",
			Handler:    _ChannelDB_DeleteChannelMessage_Handler,
		},
		{
			MethodName: "GetChannelMessage",
			Handler:    _ChannelDB_GetChannelMessage_Handler,
		},
		{
			MethodName: "GetChannelMsgsByMsgIds",
			Handler:    _ChannelDB_GetChannelMsgsByMsgIds_Handler,
		},
		{
			MethodName: "GetChannelMsgHistory",
			Handler:    _ChannelDB_GetChannelMsgHistory_Handler,
		},
		{
			MethodName: "GetChannelTopMsg",
			Handler:    _ChannelDB_GetChannelTopMsg_Handler,
		},
		{
			MethodName: "GetChannelTopMsg2",
			Handler:    _ChannelDB_GetChannelTopMsg2_Handler,
		},
		{
			MethodName: "GetChannelMediaMessageHistoryByMedia",
			Handler:    _ChannelDB_GetChannelMediaMessageHistoryByMedia_Handler,
		},
		{
			MethodName: "InsertOrUpdateChannelMessageDeleteMark",
			Handler:    _ChannelDB_InsertOrUpdateChannelMessageDeleteMark_Handler,
		},
		{
			MethodName: "GetChannelMessageDeleteMark",
			Handler:    _ChannelDB_GetChannelMessageDeleteMark_Handler,
		},
		{
			MethodName: "GetChannelMediaMessageStatisticsByMedia",
			Handler:    _ChannelDB_GetChannelMediaMessageStatisticsByMedia_Handler,
		},
		{
			MethodName: "StoreAdminLog",
			Handler:    _ChannelDB_StoreAdminLog_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelId",
			Handler:    _ChannelDB_FindsAdminLogByChannelId_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndEventFiltersAndUserId",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndEventFiltersAndUserId_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndUserId",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndUserId_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndAdminUsersAndEventFilters",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndAdminUsersAndEventFilters_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndEventFilters",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndEventFilters_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndAdminUsers",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndAdminUsers_Handler,
		},
		{
			MethodName: "ChannelMessageAtAdd",
			Handler:    _ChannelDB_ChannelMessageAtAdd_Handler,
		},
		{
			MethodName: "ChannelMessageAtGet",
			Handler:    _ChannelDB_ChannelMessageAtGet_Handler,
		},
		{
			MethodName: "ChannelMessageAtDel",
			Handler:    _ChannelDB_ChannelMessageAtDel_Handler,
		},
		{
			MethodName: "SearchMessage",
			Handler:    _ChannelDB_SearchMessage_Handler,
		},
		{
			MethodName: "UpdateChannelDialog",
			Handler:    _ChannelDB_UpdateChannelDialog_Handler,
		},
		{
			MethodName: "GetChannelDialogs",
			Handler:    _ChannelDB_GetChannelDialogs_Handler,
		},
		{
			MethodName: "GetChannelMessageByChannelIdRandomId",
			Handler:    _ChannelDB_GetChannelMessageByChannelIdRandomId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channeldb.proto",
}
