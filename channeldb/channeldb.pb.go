// protoc --gogofast_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: channeldb.proto

package channeldb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pbcomm "interfaceprobuf/pbcomm"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type USER_MSG int32

const (
	USER_MSG_UN_ENCRY USER_MSG = 0 // 不加密
	USER_MSG_ENCRY    USER_MSG = 1 // 加密
)

// Enum value maps for USER_MSG.
var (
	USER_MSG_name = map[int32]string{
		0: "UN_ENCRY",
		1: "ENCRY",
	}
	USER_MSG_value = map[string]int32{
		"UN_ENCRY": 0,
		"ENCRY":    1,
	}
)

func (x USER_MSG) Enum() *USER_MSG {
	p := new(USER_MSG)
	*p = x
	return p
}

func (x USER_MSG) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_MSG) Descriptor() protoreflect.EnumDescriptor {
	return file_channeldb_proto_enumTypes[0].Descriptor()
}

func (USER_MSG) Type() protoreflect.EnumType {
	return &file_channeldb_proto_enumTypes[0]
}

func (x USER_MSG) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_MSG.Descriptor instead.
func (USER_MSG) EnumDescriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{0}
}

type HeartBeating int32

const (
	HeartBeating_RpcExcept      HeartBeating = 0 // 异常包
	HeartBeating_PackageType    HeartBeating = 1 // 包类型
	HeartBeating_Identification HeartBeating = 2 // 服务标识
	HeartBeating_ResultSuccess  HeartBeating = 3 // 返回成功
)

// Enum value maps for HeartBeating.
var (
	HeartBeating_name = map[int32]string{
		0: "RpcExcept",
		1: "PackageType",
		2: "Identification",
		3: "ResultSuccess",
	}
	HeartBeating_value = map[string]int32{
		"RpcExcept":      0,
		"PackageType":    1,
		"Identification": 2,
		"ResultSuccess":  3,
	}
)

func (x HeartBeating) Enum() *HeartBeating {
	p := new(HeartBeating)
	*p = x
	return p
}

func (x HeartBeating) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeartBeating) Descriptor() protoreflect.EnumDescriptor {
	return file_channeldb_proto_enumTypes[1].Descriptor()
}

func (HeartBeating) Type() protoreflect.EnumType {
	return &file_channeldb_proto_enumTypes[1]
}

func (x HeartBeating) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeartBeating.Descriptor instead.
func (HeartBeating) EnumDescriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{1}
}

// 返回空结构体
type ReplyNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplyNull) Reset() {
	*x = ReplyNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyNull) ProtoMessage() {}

func (x *ReplyNull) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyNull.ProtoReflect.Descriptor instead.
func (*ReplyNull) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{0}
}

type ChannelMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`               // 唯一键
	ChannelId int32 `protobuf:"varint,2,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	MsgId     int32 `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`         // 超级群消息ID
	Pts       int32 `protobuf:"varint,4,opt,name=Pts,proto3" json:"Pts,omitempty"`             // 超级群PTS
	LastDate  int32 `protobuf:"varint,5,opt,name=LastDate,proto3" json:"LastDate,omitempty"`   // 最后的时间
}

func (x *ChannelMsgId) Reset() {
	*x = ChannelMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMsgId) ProtoMessage() {}

func (x *ChannelMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMsgId.ProtoReflect.Descriptor instead.
func (*ChannelMsgId) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{1}
}

func (x *ChannelMsgId) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelMsgId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelMsgId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ChannelMsgId) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ChannelMsgId) GetLastDate() int32 {
	if x != nil {
		return x.LastDate
	}
	return 0
}

type ChannelPtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32   `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`    // 超级群ID
	UserIds   []int32 `protobuf:"varint,2,rep,packed,name=UserIds,proto3" json:"UserIds,omitempty"` // 消息发送者
	Pts       int32   `protobuf:"varint,3,opt,name=Pts,proto3" json:"Pts,omitempty"`                // pts
	Msg       []byte  `protobuf:"bytes,4,opt,name=Msg,proto3" json:"Msg,omitempty"`                 // pts对应消息二进制
	Date      int64   `protobuf:"varint,5,opt,name=date,proto3" json:"date,omitempty"`              // 时间戳 time.Now.Unix()
}

func (x *ChannelPtsHandle) Reset() {
	*x = ChannelPtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPtsHandle) ProtoMessage() {}

func (x *ChannelPtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPtsHandle.ProtoReflect.Descriptor instead.
func (*ChannelPtsHandle) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{2}
}

func (x *ChannelPtsHandle) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelPtsHandle) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *ChannelPtsHandle) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ChannelPtsHandle) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *ChannelPtsHandle) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

type UserMsgListAndPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsgs []*pbcomm.UserMsg `protobuf:"bytes,1,rep,name=UserMsgs,proto3" json:"UserMsgs,omitempty"` // 消息集合
	Pts      int32             `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`          // 当前PTS
	Count    int32             `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`      // 超级群中总共有多少消息
}

func (x *UserMsgListAndPts) Reset() {
	*x = UserMsgListAndPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMsgListAndPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMsgListAndPts) ProtoMessage() {}

func (x *UserMsgListAndPts) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMsgListAndPts.ProtoReflect.Descriptor instead.
func (*UserMsgListAndPts) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{3}
}

func (x *UserMsgListAndPts) GetUserMsgs() []*pbcomm.UserMsg {
	if x != nil {
		return x.UserMsgs
	}
	return nil
}

func (x *UserMsgListAndPts) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *UserMsgListAndPts) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type MsgsAndMaxId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxMsgId int32   `protobuf:"varint,1,opt,name=MaxMsgId,proto3" json:"MaxMsgId,omitempty"` // 最大消息ID
	Msgs     []int32 `protobuf:"varint,2,rep,packed,name=Msgs,proto3" json:"Msgs,omitempty"`  // 消息ID集合
}

func (x *MsgsAndMaxId) Reset() {
	*x = MsgsAndMaxId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgsAndMaxId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgsAndMaxId) ProtoMessage() {}

func (x *MsgsAndMaxId) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgsAndMaxId.ProtoReflect.Descriptor instead.
func (*MsgsAndMaxId) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{4}
}

func (x *MsgsAndMaxId) GetMaxMsgId() int32 {
	if x != nil {
		return x.MaxMsgId
	}
	return 0
}

func (x *MsgsAndMaxId) GetMsgs() []int32 {
	if x != nil {
		return x.Msgs
	}
	return nil
}

type ReplyErr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode uint32 `protobuf:"varint,1,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"` // 錯誤碼 200 成功 201-300 緩存錯誤 301-400 database錯誤
	ErrMsg  string `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`    // 錯誤信息描述
}

func (x *ReplyErr) Reset() {
	*x = ReplyErr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyErr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyErr) ProtoMessage() {}

func (x *ReplyErr) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyErr.ProtoReflect.Descriptor instead.
func (*ReplyErr) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{5}
}

func (x *ReplyErr) GetErrCode() uint32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *ReplyErr) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type ReqHeartBeating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           HeartBeating `protobuf:"varint,1,opt,name=Type,proto3,enum=channeldb.HeartBeating" json:"Type,omitempty"`                     // 包类型
	Identification HeartBeating `protobuf:"varint,2,opt,name=Identification,proto3,enum=channeldb.HeartBeating" json:"Identification,omitempty"` // 服务标识
}

func (x *ReqHeartBeating) Reset() {
	*x = ReqHeartBeating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqHeartBeating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqHeartBeating) ProtoMessage() {}

func (x *ReqHeartBeating) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqHeartBeating.ProtoReflect.Descriptor instead.
func (*ReqHeartBeating) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{6}
}

func (x *ReqHeartBeating) GetType() HeartBeating {
	if x != nil {
		return x.Type
	}
	return HeartBeating_RpcExcept
}

func (x *ReqHeartBeating) GetIdentification() HeartBeating {
	if x != nil {
		return x.Identification
	}
	return HeartBeating_RpcExcept
}

type ReplyHeartBeating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   HeartBeating `protobuf:"varint,1,opt,name=Type,proto3,enum=channeldb.HeartBeating" json:"Type,omitempty"`     // 包类型
	Result HeartBeating `protobuf:"varint,2,opt,name=Result,proto3,enum=channeldb.HeartBeating" json:"Result,omitempty"` // 服务标识
}

func (x *ReplyHeartBeating) Reset() {
	*x = ReplyHeartBeating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyHeartBeating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyHeartBeating) ProtoMessage() {}

func (x *ReplyHeartBeating) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyHeartBeating.ProtoReflect.Descriptor instead.
func (*ReplyHeartBeating) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{7}
}

func (x *ReplyHeartBeating) GetType() HeartBeating {
	if x != nil {
		return x.Type
	}
	return HeartBeating_RpcExcept
}

func (x *ReplyHeartBeating) GetResult() HeartBeating {
	if x != nil {
		return x.Result
	}
	return HeartBeating_RpcExcept
}

type ReqUpdateChannelMsgIdAndPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqUpdateChannelMsgIdAndPts) Reset() {
	*x = ReqUpdateChannelMsgIdAndPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateChannelMsgIdAndPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateChannelMsgIdAndPts) ProtoMessage() {}

func (x *ReqUpdateChannelMsgIdAndPts) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateChannelMsgIdAndPts.ProtoReflect.Descriptor instead.
func (*ReqUpdateChannelMsgIdAndPts) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{8}
}

func (x *ReqUpdateChannelMsgIdAndPts) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqUpdateChannelMsgIdAndPts) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUpdateChannelMsgIdAndPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId,proto3" json:"ChannelMsgId,omitempty"` // 最新的ChannelMsgId
	ReplyErr     *ReplyErr     `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`         // 返回错误描述结构体
}

func (x *ReplyUpdateChannelMsgIdAndPts) Reset() {
	*x = ReplyUpdateChannelMsgIdAndPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUpdateChannelMsgIdAndPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUpdateChannelMsgIdAndPts) ProtoMessage() {}

func (x *ReplyUpdateChannelMsgIdAndPts) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUpdateChannelMsgIdAndPts.ProtoReflect.Descriptor instead.
func (*ReplyUpdateChannelMsgIdAndPts) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{9}
}

func (x *ReplyUpdateChannelMsgIdAndPts) GetChannelMsgId() *ChannelMsgId {
	if x != nil {
		return x.ChannelMsgId
	}
	return nil
}

func (x *ReplyUpdateChannelMsgIdAndPts) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqSetChannelMsgIdAndPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId,proto3" json:"ChannelMsgId,omitempty"` // ChannelMsgId
	Debug        *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`               // 日志前缀信息
}

func (x *ReqSetChannelMsgIdAndPts) Reset() {
	*x = ReqSetChannelMsgIdAndPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSetChannelMsgIdAndPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSetChannelMsgIdAndPts) ProtoMessage() {}

func (x *ReqSetChannelMsgIdAndPts) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSetChannelMsgIdAndPts.ProtoReflect.Descriptor instead.
func (*ReqSetChannelMsgIdAndPts) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{10}
}

func (x *ReqSetChannelMsgIdAndPts) GetChannelMsgId() *ChannelMsgId {
	if x != nil {
		return x.ChannelMsgId
	}
	return nil
}

func (x *ReqSetChannelMsgIdAndPts) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplySetChannelMsgIdAndPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplySetChannelMsgIdAndPts) Reset() {
	*x = ReplySetChannelMsgIdAndPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplySetChannelMsgIdAndPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplySetChannelMsgIdAndPts) ProtoMessage() {}

func (x *ReplySetChannelMsgIdAndPts) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplySetChannelMsgIdAndPts.ProtoReflect.Descriptor instead.
func (*ReplySetChannelMsgIdAndPts) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{11}
}

func (x *ReplySetChannelMsgIdAndPts) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqUpdateChannelPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqUpdateChannelPts) Reset() {
	*x = ReqUpdateChannelPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateChannelPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateChannelPts) ProtoMessage() {}

func (x *ReqUpdateChannelPts) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateChannelPts.ProtoReflect.Descriptor instead.
func (*ReqUpdateChannelPts) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{12}
}

func (x *ReqUpdateChannelPts) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqUpdateChannelPts) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUpdateChannelPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId,proto3" json:"ChannelMsgId,omitempty"` // 最新的ChannelMsgId
	ReplyErr     *ReplyErr     `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`         // 返回错误描述结构体
}

func (x *ReplyUpdateChannelPts) Reset() {
	*x = ReplyUpdateChannelPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUpdateChannelPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUpdateChannelPts) ProtoMessage() {}

func (x *ReplyUpdateChannelPts) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUpdateChannelPts.ProtoReflect.Descriptor instead.
func (*ReplyUpdateChannelPts) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{13}
}

func (x *ReplyUpdateChannelPts) GetChannelMsgId() *ChannelMsgId {
	if x != nil {
		return x.ChannelMsgId
	}
	return nil
}

func (x *ReplyUpdateChannelPts) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqUpdateChannelPtsWithNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Number    int32         `protobuf:"varint,2,opt,name=Number,proto3" json:"Number,omitempty"`       // 自增PTS基数
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqUpdateChannelPtsWithNum) Reset() {
	*x = ReqUpdateChannelPtsWithNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateChannelPtsWithNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateChannelPtsWithNum) ProtoMessage() {}

func (x *ReqUpdateChannelPtsWithNum) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateChannelPtsWithNum.ProtoReflect.Descriptor instead.
func (*ReqUpdateChannelPtsWithNum) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{14}
}

func (x *ReqUpdateChannelPtsWithNum) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqUpdateChannelPtsWithNum) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ReqUpdateChannelPtsWithNum) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyUpdateChannelPtsWithNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId,proto3" json:"ChannelMsgId,omitempty"` // 最新的ChannelMsgId
	ReplyErr     *ReplyErr     `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`         // 返回错误描述结构体
}

func (x *ReplyUpdateChannelPtsWithNum) Reset() {
	*x = ReplyUpdateChannelPtsWithNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUpdateChannelPtsWithNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUpdateChannelPtsWithNum) ProtoMessage() {}

func (x *ReplyUpdateChannelPtsWithNum) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUpdateChannelPtsWithNum.ProtoReflect.Descriptor instead.
func (*ReplyUpdateChannelPtsWithNum) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{15}
}

func (x *ReplyUpdateChannelPtsWithNum) GetChannelMsgId() *ChannelMsgId {
	if x != nil {
		return x.ChannelMsgId
	}
	return nil
}

func (x *ReplyUpdateChannelPtsWithNum) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetChannelMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqGetChannelMsgId) Reset() {
	*x = ReqGetChannelMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMsgId) ProtoMessage() {}

func (x *ReqGetChannelMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMsgId.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMsgId) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{16}
}

func (x *ReqGetChannelMsgId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelMsgId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelMsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId,proto3" json:"ChannelMsgId,omitempty"` // 最新的ChannelMsgId
	ReplyErr     *ReplyErr     `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`         // 返回错误描述结构体
}

func (x *ReplyGetChannelMsgId) Reset() {
	*x = ReplyGetChannelMsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelMsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelMsgId) ProtoMessage() {}

func (x *ReplyGetChannelMsgId) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelMsgId.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelMsgId) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{17}
}

func (x *ReplyGetChannelMsgId) GetChannelMsgId() *ChannelMsgId {
	if x != nil {
		return x.ChannelMsgId
	}
	return nil
}

func (x *ReplyGetChannelMsgId) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqStoreChannelPtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelPtsHandle *ChannelPtsHandle `protobuf:"bytes,1,opt,name=ChannelPtsHandle,proto3" json:"ChannelPtsHandle,omitempty"` // ptsHandle 二进制信息
	Debug            *pbcomm.Debug     `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`                       // 日志前缀信息
}

func (x *ReqStoreChannelPtsHandle) Reset() {
	*x = ReqStoreChannelPtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStoreChannelPtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStoreChannelPtsHandle) ProtoMessage() {}

func (x *ReqStoreChannelPtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStoreChannelPtsHandle.ProtoReflect.Descriptor instead.
func (*ReqStoreChannelPtsHandle) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{18}
}

func (x *ReqStoreChannelPtsHandle) GetChannelPtsHandle() *ChannelPtsHandle {
	if x != nil {
		return x.ChannelPtsHandle
	}
	return nil
}

func (x *ReqStoreChannelPtsHandle) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqBatchStoreChannelPtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelPtsHandles []*ChannelPtsHandle `protobuf:"bytes,1,rep,name=ChannelPtsHandles,proto3" json:"ChannelPtsHandles,omitempty"`
	Debug             *pbcomm.Debug       `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqBatchStoreChannelPtsHandle) Reset() {
	*x = ReqBatchStoreChannelPtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBatchStoreChannelPtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBatchStoreChannelPtsHandle) ProtoMessage() {}

func (x *ReqBatchStoreChannelPtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBatchStoreChannelPtsHandle.ProtoReflect.Descriptor instead.
func (*ReqBatchStoreChannelPtsHandle) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{19}
}

func (x *ReqBatchStoreChannelPtsHandle) GetChannelPtsHandles() []*ChannelPtsHandle {
	if x != nil {
		return x.ChannelPtsHandles
	}
	return nil
}

func (x *ReqBatchStoreChannelPtsHandle) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetChannelDiffByPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Pts       int32         `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`             // pts
	Limit     int32         `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`         // 查询条数
	MinId     int32         `protobuf:"varint,4,opt,name=MinId,proto3" json:"MinId,omitempty"`         // 未使用字段
	MaxId     int32         `protobuf:"varint,5,opt,name=MaxId,proto3" json:"MaxId,omitempty"`         // 未使用字段
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqGetChannelDiffByPts) Reset() {
	*x = ReqGetChannelDiffByPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelDiffByPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelDiffByPts) ProtoMessage() {}

func (x *ReqGetChannelDiffByPts) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelDiffByPts.ProtoReflect.Descriptor instead.
func (*ReqGetChannelDiffByPts) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{20}
}

func (x *ReqGetChannelDiffByPts) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelDiffByPts) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReqGetChannelDiffByPts) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetChannelDiffByPts) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *ReqGetChannelDiffByPts) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *ReqGetChannelDiffByPts) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelDiffByPts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFianl  bool      `protobuf:"varint,1,opt,name=IsFianl,proto3" json:"IsFianl,omitempty"`   // 是否查询完
	ToLong   bool      `protobuf:"varint,2,opt,name=ToLong,proto3" json:"ToLong,omitempty"`     // 是否太长， 缓存里面没有则是太长
	Pts      int32     `protobuf:"varint,3,opt,name=Pts,proto3" json:"Pts,omitempty"`           // 消息二进制中最大PTS
	TopMsgId int32     `protobuf:"varint,4,opt,name=TopMsgId,proto3" json:"TopMsgId,omitempty"` // 当前超级群中用到的最大的MsgId
	Msgs     [][]byte  `protobuf:"bytes,5,rep,name=Msgs,proto3" json:"Msgs,omitempty"`          // 消息二进制集合
	ReplyErr *ReplyErr `protobuf:"bytes,6,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`  // 返回错误描述结构体
}

func (x *ReplyGetChannelDiffByPts) Reset() {
	*x = ReplyGetChannelDiffByPts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelDiffByPts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelDiffByPts) ProtoMessage() {}

func (x *ReplyGetChannelDiffByPts) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelDiffByPts.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelDiffByPts) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{21}
}

func (x *ReplyGetChannelDiffByPts) GetIsFianl() bool {
	if x != nil {
		return x.IsFianl
	}
	return false
}

func (x *ReplyGetChannelDiffByPts) GetToLong() bool {
	if x != nil {
		return x.ToLong
	}
	return false
}

func (x *ReplyGetChannelDiffByPts) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReplyGetChannelDiffByPts) GetTopMsgId() int32 {
	if x != nil {
		return x.TopMsgId
	}
	return 0
}

func (x *ReplyGetChannelDiffByPts) GetMsgs() [][]byte {
	if x != nil {
		return x.Msgs
	}
	return nil
}

func (x *ReplyGetChannelDiffByPts) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetChannelLastPtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqGetChannelLastPtsHandle) Reset() {
	*x = ReqGetChannelLastPtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelLastPtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelLastPtsHandle) ProtoMessage() {}

func (x *ReqGetChannelLastPtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelLastPtsHandle.ProtoReflect.Descriptor instead.
func (*ReqGetChannelLastPtsHandle) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{22}
}

func (x *ReqGetChannelLastPtsHandle) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelLastPtsHandle) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelLastPtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelPtsHandle *ChannelPtsHandle `protobuf:"bytes,1,opt,name=ChannelPtsHandle,proto3" json:"ChannelPtsHandle,omitempty"`
	ReplyErr         *ReplyErr         `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyGetChannelLastPtsHandle) Reset() {
	*x = ReplyGetChannelLastPtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelLastPtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelLastPtsHandle) ProtoMessage() {}

func (x *ReplyGetChannelLastPtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelLastPtsHandle.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelLastPtsHandle) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{23}
}

func (x *ReplyGetChannelLastPtsHandle) GetChannelPtsHandle() *ChannelPtsHandle {
	if x != nil {
		return x.ChannelPtsHandle
	}
	return nil
}

func (x *ReplyGetChannelLastPtsHandle) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqDeleteChannelPtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Pts       int32         `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqDeleteChannelPtsHandle) Reset() {
	*x = ReqDeleteChannelPtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteChannelPtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteChannelPtsHandle) ProtoMessage() {}

func (x *ReqDeleteChannelPtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteChannelPtsHandle.ProtoReflect.Descriptor instead.
func (*ReqDeleteChannelPtsHandle) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{24}
}

func (x *ReqDeleteChannelPtsHandle) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqDeleteChannelPtsHandle) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReqDeleteChannelPtsHandle) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyDeleteChannelPtsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyErr *ReplyErr `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyDeleteChannelPtsHandle) Reset() {
	*x = ReplyDeleteChannelPtsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDeleteChannelPtsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDeleteChannelPtsHandle) ProtoMessage() {}

func (x *ReplyDeleteChannelPtsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDeleteChannelPtsHandle.ProtoReflect.Descriptor instead.
func (*ReplyDeleteChannelPtsHandle) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{25}
}

func (x *ReplyDeleteChannelPtsHandle) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqInsertOrUpdateChannelMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsg *pbcomm.UserMsg `protobuf:"bytes,1,opt,name=UserMsg,proto3" json:"UserMsg,omitempty"`
	Debug   *pbcomm.Debug   `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqInsertOrUpdateChannelMsg) Reset() {
	*x = ReqInsertOrUpdateChannelMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqInsertOrUpdateChannelMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqInsertOrUpdateChannelMsg) ProtoMessage() {}

func (x *ReqInsertOrUpdateChannelMsg) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqInsertOrUpdateChannelMsg.ProtoReflect.Descriptor instead.
func (*ReqInsertOrUpdateChannelMsg) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{26}
}

func (x *ReqInsertOrUpdateChannelMsg) GetUserMsg() *pbcomm.UserMsg {
	if x != nil {
		return x.UserMsg
	}
	return nil
}

func (x *ReqInsertOrUpdateChannelMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqUpdateChannelMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsg *pbcomm.UserMsg `protobuf:"bytes,1,opt,name=UserMsg,proto3" json:"UserMsg,omitempty"`
	Debug   *pbcomm.Debug   `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqUpdateChannelMsg) Reset() {
	*x = ReqUpdateChannelMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateChannelMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateChannelMsg) ProtoMessage() {}

func (x *ReqUpdateChannelMsg) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateChannelMsg.ProtoReflect.Descriptor instead.
func (*ReqUpdateChannelMsg) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{27}
}

func (x *ReqUpdateChannelMsg) GetUserMsg() *pbcomm.UserMsg {
	if x != nil {
		return x.UserMsg
	}
	return nil
}

func (x *ReqUpdateChannelMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqBatchInsertOrUpdateChannelMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsgs []*pbcomm.UserMsg `protobuf:"bytes,1,rep,name=UserMsgs,proto3" json:"UserMsgs,omitempty"`
	Debug    *pbcomm.Debug     `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqBatchInsertOrUpdateChannelMsg) Reset() {
	*x = ReqBatchInsertOrUpdateChannelMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBatchInsertOrUpdateChannelMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBatchInsertOrUpdateChannelMsg) ProtoMessage() {}

func (x *ReqBatchInsertOrUpdateChannelMsg) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBatchInsertOrUpdateChannelMsg.ProtoReflect.Descriptor instead.
func (*ReqBatchInsertOrUpdateChannelMsg) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{28}
}

func (x *ReqBatchInsertOrUpdateChannelMsg) GetUserMsgs() []*pbcomm.UserMsg {
	if x != nil {
		return x.UserMsgs
	}
	return nil
}

func (x *ReqBatchInsertOrUpdateChannelMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqDeleteMsgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`  // 超级群ID
	MsgIds    []int32       `protobuf:"varint,2,rep,packed,name=MsgIds,proto3" json:"MsgIds,omitempty"` // 消息ID集合
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`           // 日志前缀信息
}

func (x *ReqDeleteMsgs) Reset() {
	*x = ReqDeleteMsgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteMsgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteMsgs) ProtoMessage() {}

func (x *ReqDeleteMsgs) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteMsgs.ProtoReflect.Descriptor instead.
func (*ReqDeleteMsgs) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{29}
}

func (x *ReqDeleteMsgs) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqDeleteMsgs) GetMsgIds() []int32 {
	if x != nil {
		return x.MsgIds
	}
	return nil
}

func (x *ReqDeleteMsgs) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyDeleteMsgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurentMsgId int32     `protobuf:"varint,1,opt,name=CurentMsgId,proto3" json:"CurentMsgId,omitempty"` // 最新的ChannelMsgId
	UpdateDate  int32     `protobuf:"varint,2,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`   // topMsg的date字段
	ReplyErr    *ReplyErr `protobuf:"bytes,3,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`        // 返回错误描述结构体
}

func (x *ReplyDeleteMsgs) Reset() {
	*x = ReplyDeleteMsgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDeleteMsgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDeleteMsgs) ProtoMessage() {}

func (x *ReplyDeleteMsgs) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDeleteMsgs.ProtoReflect.Descriptor instead.
func (*ReplyDeleteMsgs) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{30}
}

func (x *ReplyDeleteMsgs) GetCurentMsgId() int32 {
	if x != nil {
		return x.CurentMsgId
	}
	return 0
}

func (x *ReplyDeleteMsgs) GetUpdateDate() int32 {
	if x != nil {
		return x.UpdateDate
	}
	return 0
}

func (x *ReplyDeleteMsgs) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqDeleteUserHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	UserId    int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`       // 用户ID
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqDeleteUserHistory) Reset() {
	*x = ReqDeleteUserHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteUserHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteUserHistory) ProtoMessage() {}

func (x *ReqDeleteUserHistory) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteUserHistory.ProtoReflect.Descriptor instead.
func (*ReqDeleteUserHistory) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{31}
}

func (x *ReqDeleteUserHistory) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqDeleteUserHistory) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqDeleteUserHistory) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyDeleteUserHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgsAndMaxId *MsgsAndMaxId `protobuf:"bytes,1,opt,name=MsgsAndMaxId,proto3" json:"MsgsAndMaxId,omitempty"` // 最大的msgID和msgID集合
	Ptss         []int32       `protobuf:"varint,2,rep,packed,name=Ptss,proto3" json:"Ptss,omitempty"`         // 返回删除消息的pts集合
	UpdateDate   int32         `protobuf:"varint,3,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`    // topMsg的date字段
	ReplyErr     *ReplyErr     `protobuf:"bytes,4,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`         // 返回错误描述结构体
}

func (x *ReplyDeleteUserHistory) Reset() {
	*x = ReplyDeleteUserHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDeleteUserHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDeleteUserHistory) ProtoMessage() {}

func (x *ReplyDeleteUserHistory) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDeleteUserHistory.ProtoReflect.Descriptor instead.
func (*ReplyDeleteUserHistory) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{32}
}

func (x *ReplyDeleteUserHistory) GetMsgsAndMaxId() *MsgsAndMaxId {
	if x != nil {
		return x.MsgsAndMaxId
	}
	return nil
}

func (x *ReplyDeleteUserHistory) GetPtss() []int32 {
	if x != nil {
		return x.Ptss
	}
	return nil
}

func (x *ReplyDeleteUserHistory) GetUpdateDate() int32 {
	if x != nil {
		return x.UpdateDate
	}
	return 0
}

func (x *ReplyDeleteUserHistory) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqDeleteChannelMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqDeleteChannelMsg) Reset() {
	*x = ReqDeleteChannelMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteChannelMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteChannelMsg) ProtoMessage() {}

func (x *ReqDeleteChannelMsg) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteChannelMsg.ProtoReflect.Descriptor instead.
func (*ReqDeleteChannelMsg) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{33}
}

func (x *ReqDeleteChannelMsg) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqDeleteChannelMsg) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqDeleteChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	MsgId     int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`         // MSGID
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqDeleteChannelMessage) Reset() {
	*x = ReqDeleteChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteChannelMessage) ProtoMessage() {}

func (x *ReqDeleteChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteChannelMessage.ProtoReflect.Descriptor instead.
func (*ReqDeleteChannelMessage) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{34}
}

func (x *ReqDeleteChannelMessage) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqDeleteChannelMessage) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqDeleteChannelMessage) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyDeleteChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32     `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`             // 用户ID
	CurrentMsgId int32     `protobuf:"varint,2,opt,name=CurrentMsgId,proto3" json:"CurrentMsgId,omitempty"` // 最新的MSGID
	UpdateDate   int32     `protobuf:"varint,3,opt,name=UpdateDate,proto3" json:"UpdateDate,omitempty"`     // topMsg的date字段
	ReplyErr     *ReplyErr `protobuf:"bytes,4,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`          // 返回错误描述结构体
}

func (x *ReplyDeleteChannelMessage) Reset() {
	*x = ReplyDeleteChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDeleteChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDeleteChannelMessage) ProtoMessage() {}

func (x *ReplyDeleteChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDeleteChannelMessage.ProtoReflect.Descriptor instead.
func (*ReplyDeleteChannelMessage) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{35}
}

func (x *ReplyDeleteChannelMessage) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReplyDeleteChannelMessage) GetCurrentMsgId() int32 {
	if x != nil {
		return x.CurrentMsgId
	}
	return 0
}

func (x *ReplyDeleteChannelMessage) GetUpdateDate() int32 {
	if x != nil {
		return x.UpdateDate
	}
	return 0
}

func (x *ReplyDeleteChannelMessage) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	MsgId     int32         `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`         // MSGID
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqGetChannelMessage) Reset() {
	*x = ReqGetChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMessage) ProtoMessage() {}

func (x *ReqGetChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMessage.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMessage) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{36}
}

func (x *ReqGetChannelMessage) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelMessage) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqGetChannelMessage) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsg  *pbcomm.UserMsg `protobuf:"bytes,1,opt,name=UserMsg,proto3" json:"UserMsg,omitempty"`   // 消息信息
	ReplyErr *ReplyErr       `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyGetChannelMessage) Reset() {
	*x = ReplyGetChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelMessage) ProtoMessage() {}

func (x *ReplyGetChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelMessage.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelMessage) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{37}
}

func (x *ReplyGetChannelMessage) GetUserMsg() *pbcomm.UserMsg {
	if x != nil {
		return x.UserMsg
	}
	return nil
}

func (x *ReplyGetChannelMessage) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetChannelMsgsByMsgIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`  // 超级群ID
	MsgIds    []int32       `protobuf:"varint,2,rep,packed,name=MsgIds,proto3" json:"MsgIds,omitempty"` // MSGID
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`           // 日志前缀信息
}

func (x *ReqGetChannelMsgsByMsgIds) Reset() {
	*x = ReqGetChannelMsgsByMsgIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMsgsByMsgIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMsgsByMsgIds) ProtoMessage() {}

func (x *ReqGetChannelMsgsByMsgIds) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMsgsByMsgIds.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMsgsByMsgIds) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{38}
}

func (x *ReqGetChannelMsgsByMsgIds) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelMsgsByMsgIds) GetMsgIds() []int32 {
	if x != nil {
		return x.MsgIds
	}
	return nil
}

func (x *ReqGetChannelMsgsByMsgIds) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelMsgsByMsgIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsgListAndPts *UserMsgListAndPts `protobuf:"bytes,1,opt,name=UserMsgListAndPts,proto3" json:"UserMsgListAndPts,omitempty"` // 消息集合 当前最大pts
	ReplyErr          *ReplyErr          `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`                   // 返回错误描述结构体
}

func (x *ReplyGetChannelMsgsByMsgIds) Reset() {
	*x = ReplyGetChannelMsgsByMsgIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelMsgsByMsgIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelMsgsByMsgIds) ProtoMessage() {}

func (x *ReplyGetChannelMsgsByMsgIds) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelMsgsByMsgIds.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelMsgsByMsgIds) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{39}
}

func (x *ReplyGetChannelMsgsByMsgIds) GetUserMsgListAndPts() *UserMsgListAndPts {
	if x != nil {
		return x.UserMsgListAndPts
	}
	return nil
}

func (x *ReplyGetChannelMsgsByMsgIds) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetChannelMsgHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`   // 超级群ID
	OffsetId   int32         `protobuf:"varint,2,opt,name=OffsetId,proto3" json:"OffsetId,omitempty"`     // 消息ID， 查询小于OFfsetID limit- addoffset条 如果offsetID 等于0 则取最新的limit条
	OffsetDate int32         `protobuf:"varint,3,opt,name=OffsetDate,proto3" json:"OffsetDate,omitempty"` // 未使用字段
	AddOffset  int32         `protobuf:"varint,4,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`   // 向下取消息条数， 如果不等于0 则取 大于且等于OffsetId addOffset绝对值条
	MinId      int32         `protobuf:"varint,5,opt,name=MinId,proto3" json:"MinId,omitempty"`           // 未使用字段
	MaxId      int32         `protobuf:"varint,6,opt,name=MaxId,proto3" json:"MaxId,omitempty"`           // 未使用字段
	Limit      int32         `protobuf:"varint,7,opt,name=Limit,proto3" json:"Limit,omitempty"`           // 查询条数
	Encry      int32         `protobuf:"varint,8,opt,name=Encry,proto3" json:"Encry,omitempty"`           // 是否加密 0: 不加密 1：加密
	DeleteMark int32         `protobuf:"varint,9,opt,name=DeleteMark,proto3" json:"DeleteMark,omitempty"` // 超级群删除消息标记
	Debug      *pbcomm.Debug `protobuf:"bytes,10,opt,name=Debug,proto3" json:"Debug,omitempty"`           // 日志前缀信息
}

func (x *ReqGetChannelMsgHistory) Reset() {
	*x = ReqGetChannelMsgHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMsgHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMsgHistory) ProtoMessage() {}

func (x *ReqGetChannelMsgHistory) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMsgHistory.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMsgHistory) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{40}
}

func (x *ReqGetChannelMsgHistory) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetDeleteMark() int32 {
	if x != nil {
		return x.DeleteMark
	}
	return 0
}

func (x *ReqGetChannelMsgHistory) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelMsgHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsgListAndPts *UserMsgListAndPts `protobuf:"bytes,1,opt,name=UserMsgListAndPts,proto3" json:"UserMsgListAndPts,omitempty"` // 消息集合 当前最大pts
	ReplyErr          *ReplyErr          `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`                   // 返回错误描述结构体
}

func (x *ReplyGetChannelMsgHistory) Reset() {
	*x = ReplyGetChannelMsgHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelMsgHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelMsgHistory) ProtoMessage() {}

func (x *ReplyGetChannelMsgHistory) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelMsgHistory.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelMsgHistory) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{41}
}

func (x *ReplyGetChannelMsgHistory) GetUserMsgListAndPts() *UserMsgListAndPts {
	if x != nil {
		return x.UserMsgListAndPts
	}
	return nil
}

func (x *ReplyGetChannelMsgHistory) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetChannelTopMst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqGetChannelTopMst) Reset() {
	*x = ReqGetChannelTopMst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelTopMst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelTopMst) ProtoMessage() {}

func (x *ReqGetChannelTopMst) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelTopMst.ProtoReflect.Descriptor instead.
func (*ReqGetChannelTopMst) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{42}
}

func (x *ReqGetChannelTopMst) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelTopMst) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqGetChannelTopMst2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"` // 群成员ID
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`    // 日志前缀信息
}

func (x *ReqGetChannelTopMst2) Reset() {
	*x = ReqGetChannelTopMst2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelTopMst2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelTopMst2) ProtoMessage() {}

func (x *ReqGetChannelTopMst2) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelTopMst2.ProtoReflect.Descriptor instead.
func (*ReqGetChannelTopMst2) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{43}
}

func (x *ReqGetChannelTopMst2) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelTopMst2) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetChannelTopMst2) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelTopMst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsg  *pbcomm.UserMsg `protobuf:"bytes,1,opt,name=UserMsg,proto3" json:"UserMsg,omitempty"`   // 消息
	ReplyErr *ReplyErr       `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyGetChannelTopMst) Reset() {
	*x = ReplyGetChannelTopMst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelTopMst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelTopMst) ProtoMessage() {}

func (x *ReplyGetChannelTopMst) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelTopMst.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelTopMst) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{44}
}

func (x *ReplyGetChannelTopMst) GetUserMsg() *pbcomm.UserMsg {
	if x != nil {
		return x.UserMsg
	}
	return nil
}

func (x *ReplyGetChannelTopMst) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type GetChannelMediaMessageHistoryByMediaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32   `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`  // 超级群ID
	UserId    int32   `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`        // 群成员ID
	Medias    []int32 `protobuf:"varint,3,rep,packed,name=Medias,proto3" json:"Medias,omitempty"` // 媒体消息类型
	MaxId     int32   `protobuf:"varint,4,opt,name=MaxId,proto3" json:"MaxId,omitempty"`          // 最大MsgID 如果为0 则查询总数
	Limit     int32   `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`          // 分页查询条数
	Encry     int32   `protobuf:"varint,6,opt,name=encry,proto3" json:"encry,omitempty"`          // 是否加密群
}

func (x *GetChannelMediaMessageHistoryByMediaConfig) Reset() {
	*x = GetChannelMediaMessageHistoryByMediaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelMediaMessageHistoryByMediaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelMediaMessageHistoryByMediaConfig) ProtoMessage() {}

func (x *GetChannelMediaMessageHistoryByMediaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelMediaMessageHistoryByMediaConfig.ProtoReflect.Descriptor instead.
func (*GetChannelMediaMessageHistoryByMediaConfig) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{45}
}

func (x *GetChannelMediaMessageHistoryByMediaConfig) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelMediaMessageHistoryByMediaConfig) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetChannelMediaMessageHistoryByMediaConfig) GetMedias() []int32 {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *GetChannelMediaMessageHistoryByMediaConfig) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *GetChannelMediaMessageHistoryByMediaConfig) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetChannelMediaMessageHistoryByMediaConfig) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

type ReqGetChannelMediaMessageHistoryByMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetChannelMediaMessageHistoryByMediaConfig *GetChannelMediaMessageHistoryByMediaConfig `protobuf:"bytes,1,opt,name=GetChannelMediaMessageHistoryByMediaConfig,proto3" json:"GetChannelMediaMessageHistoryByMediaConfig,omitempty"`
	Debug                                      *pbcomm.Debug                               `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqGetChannelMediaMessageHistoryByMedia) Reset() {
	*x = ReqGetChannelMediaMessageHistoryByMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMediaMessageHistoryByMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMediaMessageHistoryByMedia) ProtoMessage() {}

func (x *ReqGetChannelMediaMessageHistoryByMedia) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMediaMessageHistoryByMedia.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMediaMessageHistoryByMedia) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{46}
}

func (x *ReqGetChannelMediaMessageHistoryByMedia) GetGetChannelMediaMessageHistoryByMediaConfig() *GetChannelMediaMessageHistoryByMediaConfig {
	if x != nil {
		return x.GetChannelMediaMessageHistoryByMediaConfig
	}
	return nil
}

func (x *ReqGetChannelMediaMessageHistoryByMedia) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelMediaMessageHistoryByMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMsgs []*pbcomm.UserMsg `protobuf:"bytes,1,rep,name=ChannelMsgs,proto3" json:"ChannelMsgs,omitempty"` // 消息列表
	ReplyErr    *ReplyErr         `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`       // 返回错误描述结构体
}

func (x *ReplyGetChannelMediaMessageHistoryByMedia) Reset() {
	*x = ReplyGetChannelMediaMessageHistoryByMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelMediaMessageHistoryByMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelMediaMessageHistoryByMedia) ProtoMessage() {}

func (x *ReplyGetChannelMediaMessageHistoryByMedia) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelMediaMessageHistoryByMedia.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelMediaMessageHistoryByMedia) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{47}
}

func (x *ReplyGetChannelMediaMessageHistoryByMedia) GetChannelMsgs() []*pbcomm.UserMsg {
	if x != nil {
		return x.ChannelMsgs
	}
	return nil
}

func (x *ReplyGetChannelMediaMessageHistoryByMedia) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

// 超级群标记删除记录结构体
type ChannelMessageDeleteMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`       // 用户ID
	ChannelId int32 `protobuf:"varint,2,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	MsgId     int32 `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`         // 标记删除的msgid
}

func (x *ChannelMessageDeleteMark) Reset() {
	*x = ChannelMessageDeleteMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMessageDeleteMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMessageDeleteMark) ProtoMessage() {}

func (x *ChannelMessageDeleteMark) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMessageDeleteMark.ProtoReflect.Descriptor instead.
func (*ChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{48}
}

func (x *ChannelMessageDeleteMark) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChannelMessageDeleteMark) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelMessageDeleteMark) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

type ReqInsertOrUpdateChannelMessageDeleteMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMessageDeleteMark *ChannelMessageDeleteMark `protobuf:"bytes,1,opt,name=ChannelMessageDeleteMark,proto3" json:"ChannelMessageDeleteMark,omitempty"`
	Debug                    *pbcomm.Debug             `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqInsertOrUpdateChannelMessageDeleteMark) Reset() {
	*x = ReqInsertOrUpdateChannelMessageDeleteMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqInsertOrUpdateChannelMessageDeleteMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqInsertOrUpdateChannelMessageDeleteMark) ProtoMessage() {}

func (x *ReqInsertOrUpdateChannelMessageDeleteMark) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqInsertOrUpdateChannelMessageDeleteMark.ProtoReflect.Descriptor instead.
func (*ReqInsertOrUpdateChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{49}
}

func (x *ReqInsertOrUpdateChannelMessageDeleteMark) GetChannelMessageDeleteMark() *ChannelMessageDeleteMark {
	if x != nil {
		return x.ChannelMessageDeleteMark
	}
	return nil
}

func (x *ReqInsertOrUpdateChannelMessageDeleteMark) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyInsertOrUpdateChannelMessageDeleteMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyInsertOrUpdateChannelMessageDeleteMark) Reset() {
	*x = ReplyInsertOrUpdateChannelMessageDeleteMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyInsertOrUpdateChannelMessageDeleteMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyInsertOrUpdateChannelMessageDeleteMark) ProtoMessage() {}

func (x *ReplyInsertOrUpdateChannelMessageDeleteMark) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyInsertOrUpdateChannelMessageDeleteMark.ProtoReflect.Descriptor instead.
func (*ReplyInsertOrUpdateChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{50}
}

func (x *ReplyInsertOrUpdateChannelMessageDeleteMark) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetChannelMessageDeleteMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ChannelID int32         `protobuf:"varint,2,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqGetChannelMessageDeleteMark) Reset() {
	*x = ReqGetChannelMessageDeleteMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMessageDeleteMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMessageDeleteMark) ProtoMessage() {}

func (x *ReqGetChannelMessageDeleteMark) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMessageDeleteMark.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{51}
}

func (x *ReqGetChannelMessageDeleteMark) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetChannelMessageDeleteMark) GetChannelID() int32 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *ReqGetChannelMessageDeleteMark) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelMessageDeleteMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMessageDeleteMark *ChannelMessageDeleteMark `protobuf:"bytes,1,opt,name=ChannelMessageDeleteMark,proto3" json:"ChannelMessageDeleteMark,omitempty"`
	ReplyErr                 *ReplyErr                 `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyGetChannelMessageDeleteMark) Reset() {
	*x = ReplyGetChannelMessageDeleteMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelMessageDeleteMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelMessageDeleteMark) ProtoMessage() {}

func (x *ReplyGetChannelMessageDeleteMark) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelMessageDeleteMark.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{52}
}

func (x *ReplyGetChannelMessageDeleteMark) GetChannelMessageDeleteMark() *ChannelMessageDeleteMark {
	if x != nil {
		return x.ChannelMessageDeleteMark
	}
	return nil
}

func (x *ReplyGetChannelMessageDeleteMark) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ChannelMediaMessageStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Media     int32 `protobuf:"varint,2,opt,name=Media,proto3" json:"Media,omitempty"`         // 媒体消息类型
	Count     int32 `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`         // 媒体消息计数
}

func (x *ChannelMediaMessageStatistics) Reset() {
	*x = ChannelMediaMessageStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMediaMessageStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMediaMessageStatistics) ProtoMessage() {}

func (x *ChannelMediaMessageStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMediaMessageStatistics.ProtoReflect.Descriptor instead.
func (*ChannelMediaMessageStatistics) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{53}
}

func (x *ChannelMediaMessageStatistics) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelMediaMessageStatistics) GetMedia() int32 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *ChannelMediaMessageStatistics) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ReqGetChannelMediaMessageStatisticsByMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Media     int32         `protobuf:"varint,2,opt,name=Media,proto3" json:"Media,omitempty"`         // 媒体类型
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqGetChannelMediaMessageStatisticsByMedia) Reset() {
	*x = ReqGetChannelMediaMessageStatisticsByMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMediaMessageStatisticsByMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMediaMessageStatisticsByMedia) ProtoMessage() {}

func (x *ReqGetChannelMediaMessageStatisticsByMedia) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMediaMessageStatisticsByMedia.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMediaMessageStatisticsByMedia) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{54}
}

func (x *ReqGetChannelMediaMessageStatisticsByMedia) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelMediaMessageStatisticsByMedia) GetMedia() int32 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *ReqGetChannelMediaMessageStatisticsByMedia) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetChannelMediaMessageStatisticsByMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelMediaMessageStatistics *ChannelMediaMessageStatistics `protobuf:"bytes,1,opt,name=ChannelMediaMessageStatistics,proto3" json:"ChannelMediaMessageStatistics,omitempty"`
	ReplyErr                      *ReplyErr                      `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyGetChannelMediaMessageStatisticsByMedia) Reset() {
	*x = ReplyGetChannelMediaMessageStatisticsByMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelMediaMessageStatisticsByMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelMediaMessageStatisticsByMedia) ProtoMessage() {}

func (x *ReplyGetChannelMediaMessageStatisticsByMedia) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelMediaMessageStatisticsByMedia.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelMediaMessageStatisticsByMedia) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{55}
}

func (x *ReplyGetChannelMediaMessageStatisticsByMedia) GetChannelMediaMessageStatistics() *ChannelMediaMessageStatistics {
	if x != nil {
		return x.ChannelMediaMessageStatistics
	}
	return nil
}

func (x *ReplyGetChannelMediaMessageStatisticsByMedia) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ChannelAdminLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionId    int64  `protobuf:"varint,1,opt,name=ActionId,proto3" json:"ActionId,omitempty"`       // 事件唯一ID
	ChannelId   int32  `protobuf:"varint,2,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`     // 超级群、频道ID
	AdminUserId int32  `protobuf:"varint,3,opt,name=AdminUserId,proto3" json:"AdminUserId,omitempty"` // 管理员ID
	UserId      int32  `protobuf:"varint,4,opt,name=UserId,proto3" json:"UserId,omitempty"`           // 普通用户ID
	ActionType  int32  `protobuf:"varint,5,opt,name=ActionType,proto3" json:"ActionType,omitempty"`   // 过滤类型
	AdminLog    []byte `protobuf:"bytes,6,opt,name=AdminLog,proto3" json:"AdminLog,omitempty"`        // 消息
	Date        int64  `protobuf:"varint,7,opt,name=Date,proto3" json:"Date,omitempty"`               // 日期 使用 time.Now.Unix()
}

func (x *ChannelAdminLog) Reset() {
	*x = ChannelAdminLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelAdminLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelAdminLog) ProtoMessage() {}

func (x *ChannelAdminLog) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelAdminLog.ProtoReflect.Descriptor instead.
func (*ChannelAdminLog) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{56}
}

func (x *ChannelAdminLog) GetActionId() int64 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

func (x *ChannelAdminLog) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelAdminLog) GetAdminUserId() int32 {
	if x != nil {
		return x.AdminUserId
	}
	return 0
}

func (x *ChannelAdminLog) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChannelAdminLog) GetActionType() int32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *ChannelAdminLog) GetAdminLog() []byte {
	if x != nil {
		return x.AdminLog
	}
	return nil
}

func (x *ChannelAdminLog) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

type ReqStoreAdminLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelAdminLog *ChannelAdminLog `protobuf:"bytes,1,opt,name=ChannelAdminLog,proto3" json:"ChannelAdminLog,omitempty"`
	Debug           *pbcomm.Debug    `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"` // 日志前缀信息
}

func (x *ReqStoreAdminLog) Reset() {
	*x = ReqStoreAdminLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStoreAdminLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStoreAdminLog) ProtoMessage() {}

func (x *ReqStoreAdminLog) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStoreAdminLog.ProtoReflect.Descriptor instead.
func (*ReqStoreAdminLog) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{57}
}

func (x *ReqStoreAdminLog) GetChannelAdminLog() *ChannelAdminLog {
	if x != nil {
		return x.ChannelAdminLog
	}
	return nil
}

func (x *ReqStoreAdminLog) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Limit     int32         `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`         // 查询条数
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqFindsAdminLogByChannelId) Reset() {
	*x = ReqFindsAdminLogByChannelId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFindsAdminLogByChannelId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFindsAdminLogByChannelId) ProtoMessage() {}

func (x *ReqFindsAdminLogByChannelId) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFindsAdminLogByChannelId.ProtoReflect.Descriptor instead.
func (*ReqFindsAdminLogByChannelId) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{58}
}

func (x *ReqFindsAdminLogByChannelId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelId) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyFindsAdminLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminLogs []*ChannelAdminLog `protobuf:"bytes,1,rep,name=AdminLogs,proto3" json:"AdminLogs,omitempty"` // 超级群管理员日志结合
	ReplyErr  *ReplyErr          `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`   // 返回错误描述结构体
}

func (x *ReplyFindsAdminLog) Reset() {
	*x = ReplyFindsAdminLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyFindsAdminLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyFindsAdminLog) ProtoMessage() {}

func (x *ReplyFindsAdminLog) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyFindsAdminLog.ProtoReflect.Descriptor instead.
func (*ReplyFindsAdminLog) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{59}
}

func (x *ReplyFindsAdminLog) GetAdminLogs() []*ChannelAdminLog {
	if x != nil {
		return x.AdminLogs
	}
	return nil
}

func (x *ReplyFindsAdminLog) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId    int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`              // 超级群ID
	UserId       int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`                    // 用户ID
	AdminUsers   []int32       `protobuf:"varint,3,rep,packed,name=AdminUsers,proto3" json:"AdminUsers,omitempty"`     // 管理员用户集合
	EventFilters []int32       `protobuf:"varint,4,rep,packed,name=EventFilters,proto3" json:"EventFilters,omitempty"` // 筛选类型结合 对应 adminlog 中的action_type 字段
	Limit        int32         `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`                      // 查询条数
	Debug        *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug,proto3" json:"Debug,omitempty"`                       // 日志前缀信息
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) Reset() {
	*x = ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) ProtoMessage() {}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId.ProtoReflect.Descriptor instead.
func (*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{60}
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetAdminUsers() []int32 {
	if x != nil {
		return x.AdminUsers
	}
	return nil
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetEventFilters() []int32 {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId    int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`              // 超级群ID
	UserId       int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`                    // 被操作用户
	EventFilters []int32       `protobuf:"varint,3,rep,packed,name=EventFilters,proto3" json:"EventFilters,omitempty"` // 筛选类型结合 对应 adminlog 中的action_type 字段
	Limit        int32         `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`                      // 查询条数
	Debug        *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`                       // 日志前缀信息
}

func (x *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) Reset() {
	*x = ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) ProtoMessage() {}

func (x *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId.ProtoReflect.Descriptor instead.
func (*ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{61}
}

func (x *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetEventFilters() []int32 {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

func (x *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	UserId    int32         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`       // 用户ID
	Limit     int32         `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`         // 查询条数
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqFindsAdminLogByChannelIdAndUserId) Reset() {
	*x = ReqFindsAdminLogByChannelIdAndUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFindsAdminLogByChannelIdAndUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFindsAdminLogByChannelIdAndUserId) ProtoMessage() {}

func (x *ReqFindsAdminLogByChannelIdAndUserId) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFindsAdminLogByChannelIdAndUserId.ProtoReflect.Descriptor instead.
func (*ReqFindsAdminLogByChannelIdAndUserId) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{62}
}

func (x *ReqFindsAdminLogByChannelIdAndUserId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndUserId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndUserId) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndUserId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId    int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`              // 超级群ID
	AdminUsers   []int32       `protobuf:"varint,2,rep,packed,name=AdminUsers,proto3" json:"AdminUsers,omitempty"`     // 筛选类型结合 对应 adminlog 中的action_type 字段
	EventFilters []int32       `protobuf:"varint,3,rep,packed,name=EventFilters,proto3" json:"EventFilters,omitempty"` // 筛选类型结合 对应 adminlog 中的action_type 字段
	Limit        int32         `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`                      // 查询条数
	Debug        *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`                       // 日志前缀信息
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) Reset() {
	*x = ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) ProtoMessage() {}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters.ProtoReflect.Descriptor instead.
func (*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{63}
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetAdminUsers() []int32 {
	if x != nil {
		return x.AdminUsers
	}
	return nil
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetEventFilters() []int32 {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndEventFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId    int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`              // 超级群ID
	EventFilters []int32       `protobuf:"varint,2,rep,packed,name=EventFilters,proto3" json:"EventFilters,omitempty"` // 筛选类型结合 对应 adminlog 中的action_type 字段
	Limit        int32         `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`                      // 查询条数
	Debug        *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`                       // 日志前缀信息
}

func (x *ReqFindsAdminLogByChannelIdAndEventFilters) Reset() {
	*x = ReqFindsAdminLogByChannelIdAndEventFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFindsAdminLogByChannelIdAndEventFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFindsAdminLogByChannelIdAndEventFilters) ProtoMessage() {}

func (x *ReqFindsAdminLogByChannelIdAndEventFilters) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFindsAdminLogByChannelIdAndEventFilters.ProtoReflect.Descriptor instead.
func (*ReqFindsAdminLogByChannelIdAndEventFilters) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{64}
}

func (x *ReqFindsAdminLogByChannelIdAndEventFilters) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndEventFilters) GetEventFilters() []int32 {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

func (x *ReqFindsAdminLogByChannelIdAndEventFilters) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndEventFilters) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndAdminUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`          // 超级群ID
	AdminUsers []int32       `protobuf:"varint,2,rep,packed,name=AdminUsers,proto3" json:"AdminUsers,omitempty"` // 管理员用户集合
	Limit      int32         `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`                  // 查询条数
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`                   // 日志前缀信息
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsers) Reset() {
	*x = ReqFindsAdminLogByChannelIdAndAdminUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFindsAdminLogByChannelIdAndAdminUsers) ProtoMessage() {}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsers) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFindsAdminLogByChannelIdAndAdminUsers.ProtoReflect.Descriptor instead.
func (*ReqFindsAdminLogByChannelIdAndAdminUsers) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{65}
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsers) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsers) GetAdminUsers() []int32 {
	if x != nil {
		return x.AdminUsers
	}
	return nil
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsers) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqFindsAdminLogByChannelIdAndAdminUsers) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReqChannelMessageAtAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId  int32         `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Encry  int32         `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *ReqChannelMessageAtAdd) Reset() {
	*x = ReqChannelMessageAtAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqChannelMessageAtAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqChannelMessageAtAdd) ProtoMessage() {}

func (x *ReqChannelMessageAtAdd) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqChannelMessageAtAdd.ProtoReflect.Descriptor instead.
func (*ReqChannelMessageAtAdd) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{66}
}

func (x *ReqChannelMessageAtAdd) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqChannelMessageAtAdd) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqChannelMessageAtAdd) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqChannelMessageAtAdd) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ReqChannelMessageAtAdd) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyChannelMessageAtAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`
}

func (x *ReplyChannelMessageAtAdd) Reset() {
	*x = ReplyChannelMessageAtAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChannelMessageAtAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChannelMessageAtAdd) ProtoMessage() {}

func (x *ReplyChannelMessageAtAdd) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChannelMessageAtAdd.ProtoReflect.Descriptor instead.
func (*ReplyChannelMessageAtAdd) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{67}
}

func (x *ReplyChannelMessageAtAdd) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqChannelMessageAtGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId    int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId     int32         `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	AddOffset int32         `protobuf:"varint,4,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`
	Limit     int32         `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *ReqChannelMessageAtGet) Reset() {
	*x = ReqChannelMessageAtGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqChannelMessageAtGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqChannelMessageAtGet) ProtoMessage() {}

func (x *ReqChannelMessageAtGet) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqChannelMessageAtGet.ProtoReflect.Descriptor instead.
func (*ReqChannelMessageAtGet) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{68}
}

func (x *ReqChannelMessageAtGet) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqChannelMessageAtGet) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqChannelMessageAtGet) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqChannelMessageAtGet) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *ReqChannelMessageAtGet) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqChannelMessageAtGet) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyChannelMessageAtGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*pbcomm.UserMsg `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
	ReplyErr *ReplyErr         `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`
}

func (x *ReplyChannelMessageAtGet) Reset() {
	*x = ReplyChannelMessageAtGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChannelMessageAtGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChannelMessageAtGet) ProtoMessage() {}

func (x *ReplyChannelMessageAtGet) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChannelMessageAtGet.ProtoReflect.Descriptor instead.
func (*ReplyChannelMessageAtGet) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{69}
}

func (x *ReplyChannelMessageAtGet) GetMessages() []*pbcomm.UserMsg {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ReplyChannelMessageAtGet) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqChannelMessageAtDel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32         `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId  int32         `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (x *ReqChannelMessageAtDel) Reset() {
	*x = ReqChannelMessageAtDel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqChannelMessageAtDel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqChannelMessageAtDel) ProtoMessage() {}

func (x *ReqChannelMessageAtDel) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqChannelMessageAtDel.ProtoReflect.Descriptor instead.
func (*ReqChannelMessageAtDel) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{70}
}

func (x *ReqChannelMessageAtDel) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqChannelMessageAtDel) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ReqChannelMessageAtDel) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReqChannelMessageAtDel) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyChannelMessageAtDel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"`
}

func (x *ReplyChannelMessageAtDel) Reset() {
	*x = ReplyChannelMessageAtDel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyChannelMessageAtDel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyChannelMessageAtDel) ProtoMessage() {}

func (x *ReplyChannelMessageAtDel) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyChannelMessageAtDel.ProtoReflect.Descriptor instead.
func (*ReplyChannelMessageAtDel) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{71}
}

func (x *ReplyChannelMessageAtDel) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ChannelLocalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	LocalId   int64 `protobuf:"varint,2,opt,name=LocalId,proto3" json:"LocalId,omitempty"`     // 超级群LocalId
}

func (x *ChannelLocalId) Reset() {
	*x = ChannelLocalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelLocalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelLocalId) ProtoMessage() {}

func (x *ChannelLocalId) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelLocalId.ProtoReflect.Descriptor instead.
func (*ChannelLocalId) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{72}
}

func (x *ChannelLocalId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelLocalId) GetLocalId() int64 {
	if x != nil {
		return x.LocalId
	}
	return 0
}

type ReqIncreaseChannelLocalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqIncreaseChannelLocalId) Reset() {
	*x = ReqIncreaseChannelLocalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqIncreaseChannelLocalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqIncreaseChannelLocalId) ProtoMessage() {}

func (x *ReqIncreaseChannelLocalId) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqIncreaseChannelLocalId.ProtoReflect.Descriptor instead.
func (*ReqIncreaseChannelLocalId) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{73}
}

func (x *ReqIncreaseChannelLocalId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqIncreaseChannelLocalId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyIncreaseChannelLocalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelLocalId *ChannelLocalId `protobuf:"bytes,1,opt,name=ChannelLocalId,proto3" json:"ChannelLocalId,omitempty"`
	ReplyErr       *ReplyErr       `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyIncreaseChannelLocalId) Reset() {
	*x = ReplyIncreaseChannelLocalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyIncreaseChannelLocalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyIncreaseChannelLocalId) ProtoMessage() {}

func (x *ReplyIncreaseChannelLocalId) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyIncreaseChannelLocalId.ProtoReflect.Descriptor instead.
func (*ReplyIncreaseChannelLocalId) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{74}
}

func (x *ReplyIncreaseChannelLocalId) GetChannelLocalId() *ChannelLocalId {
	if x != nil {
		return x.ChannelLocalId
	}
	return nil
}

func (x *ReplyIncreaseChannelLocalId) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetCurrentChannelLocalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"` // 超级群ID
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,proto3" json:"Debug,omitempty"`          // 日志前缀信息
}

func (x *ReqGetCurrentChannelLocalId) Reset() {
	*x = ReqGetCurrentChannelLocalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetCurrentChannelLocalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetCurrentChannelLocalId) ProtoMessage() {}

func (x *ReqGetCurrentChannelLocalId) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetCurrentChannelLocalId.ProtoReflect.Descriptor instead.
func (*ReqGetCurrentChannelLocalId) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{75}
}

func (x *ReqGetCurrentChannelLocalId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetCurrentChannelLocalId) GetDebug() *pbcomm.Debug {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ReplyGetCurrentChannelLocalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelLocalId *ChannelLocalId `protobuf:"bytes,1,opt,name=ChannelLocalId,proto3" json:"ChannelLocalId,omitempty"`
	ReplyErr       *ReplyErr       `protobuf:"bytes,2,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyGetCurrentChannelLocalId) Reset() {
	*x = ReplyGetCurrentChannelLocalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetCurrentChannelLocalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetCurrentChannelLocalId) ProtoMessage() {}

func (x *ReplyGetCurrentChannelLocalId) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetCurrentChannelLocalId.ProtoReflect.Descriptor instead.
func (*ReplyGetCurrentChannelLocalId) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{76}
}

func (x *ReplyGetCurrentChannelLocalId) GetChannelLocalId() *ChannelLocalId {
	if x != nil {
		return x.ChannelLocalId
	}
	return nil
}

func (x *ReplyGetCurrentChannelLocalId) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ForWardUserMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date        int32    `protobuf:"varint,1,opt,name=Date,proto3" json:"Date,omitempty"`              // 时间
	Message     string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`         // 消息内容
	Media       int64    `protobuf:"varint,3,opt,name=Media,proto3" json:"Media,omitempty"`            // 媒体id
	MediaData   []byte   `protobuf:"bytes,4,opt,name=MediaData,proto3" json:"MediaData,omitempty"`     // 媒体二进制
	ReplyMarkup []byte   `protobuf:"bytes,5,opt,name=ReplyMarkup,proto3" json:"ReplyMarkup,omitempty"` // 小键盘
	Entities    [][]byte `protobuf:"bytes,6,rep,name=Entities,proto3" json:"Entities,omitempty"`       // 高亮
	FromId      int32    `protobuf:"varint,7,opt,name=FromId,proto3" json:"FromId,omitempty"`          // 发送方
	Encry       int32    `protobuf:"varint,8,opt,name=Encry,proto3" json:"Encry,omitempty"`            // 是否加密 0: 不加密 1：加密
	FwdFrom     []byte   `protobuf:"bytes,9,opt,name=FwdFrom,proto3" json:"FwdFrom,omitempty"`         // 原始转发信息
	GroupId     int64    `protobuf:"varint,10,opt,name=GroupId,proto3" json:"GroupId,omitempty"`       // 图片组ID
	ViaBotId    int32    `protobuf:"varint,11,opt,name=ViaBotId,proto3" json:"ViaBotId,omitempty"`     // 机器人id
	MsgID       int32    `protobuf:"varint,12,opt,name=MsgID,proto3" json:"MsgID,omitempty"`           // 消息ID
}

func (x *ForWardUserMsg) Reset() {
	*x = ForWardUserMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForWardUserMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForWardUserMsg) ProtoMessage() {}

func (x *ForWardUserMsg) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForWardUserMsg.ProtoReflect.Descriptor instead.
func (*ForWardUserMsg) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{77}
}

func (x *ForWardUserMsg) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ForWardUserMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ForWardUserMsg) GetMedia() int64 {
	if x != nil {
		return x.Media
	}
	return 0
}

func (x *ForWardUserMsg) GetMediaData() []byte {
	if x != nil {
		return x.MediaData
	}
	return nil
}

func (x *ForWardUserMsg) GetReplyMarkup() []byte {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

func (x *ForWardUserMsg) GetEntities() [][]byte {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *ForWardUserMsg) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *ForWardUserMsg) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ForWardUserMsg) GetFwdFrom() []byte {
	if x != nil {
		return x.FwdFrom
	}
	return nil
}

func (x *ForWardUserMsg) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ForWardUserMsg) GetViaBotId() int32 {
	if x != nil {
		return x.ViaBotId
	}
	return 0
}

func (x *ForWardUserMsg) GetMsgID() int32 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

type ChannelMessageAt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	WithId int32 `protobuf:"varint,2,opt,name=WithId,proto3" json:"WithId,omitempty"`
	MsgId  int32 `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	Encry  int32 `protobuf:"varint,4,opt,name=Encry,proto3" json:"Encry,omitempty"`
}

func (x *ChannelMessageAt) Reset() {
	*x = ChannelMessageAt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMessageAt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMessageAt) ProtoMessage() {}

func (x *ChannelMessageAt) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMessageAt.ProtoReflect.Descriptor instead.
func (*ChannelMessageAt) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{78}
}

func (x *ChannelMessageAt) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChannelMessageAt) GetWithId() int32 {
	if x != nil {
		return x.WithId
	}
	return 0
}

func (x *ChannelMessageAt) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ChannelMessageAt) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

// =================================================== search =======================================================
type ReqSearchChannelMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    int32   `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`        // 消息查询者（更具UserID 查询deleteMarkID）
	ChannelID int32   `protobuf:"varint,2,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`  // 消息接收者
	FromID    int32   `protobuf:"varint,3,opt,name=FromID,proto3" json:"FromID,omitempty"`        // 消息发送者
	Medias    []int32 `protobuf:"varint,4,rep,packed,name=Medias,proto3" json:"Medias,omitempty"` // 媒体类型
	OffsetID  int32   `protobuf:"varint,5,opt,name=OffsetID,proto3" json:"OffsetID,omitempty"`    // 偏移的MsgID
	AddOffset int32   `protobuf:"varint,6,opt,name=AddOffset,proto3" json:"AddOffset,omitempty"`  // 向后偏移量 （包括OffsetID）
	Encry     int32   `protobuf:"varint,7,opt,name=Encry,proto3" json:"Encry,omitempty"`          // 是否是加密库
	Limit     int32   `protobuf:"varint,8,opt,name=Limit,proto3" json:"Limit,omitempty"`          // 获取消息的条数限制
	MinDate   int32   `protobuf:"varint,9,opt,name=MinDate,proto3" json:"MinDate,omitempty"`      // 最小日期 暂时不用
	MaxDate   int32   `protobuf:"varint,10,opt,name=MaxDate,proto3" json:"MaxDate,omitempty"`     // 最大日期 暂时不用
	MinID     int32   `protobuf:"varint,11,opt,name=MinID,proto3" json:"MinID,omitempty"`         // 最小MsgID
	MaxID     int32   `protobuf:"varint,12,opt,name=MaxID,proto3" json:"MaxID,omitempty"`         // 最大MsgID 暂时不用
}

func (x *ReqSearchChannelMsg) Reset() {
	*x = ReqSearchChannelMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSearchChannelMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSearchChannelMsg) ProtoMessage() {}

func (x *ReqSearchChannelMsg) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSearchChannelMsg.ProtoReflect.Descriptor instead.
func (*ReqSearchChannelMsg) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{79}
}

func (x *ReqSearchChannelMsg) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ReqSearchChannelMsg) GetChannelID() int32 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *ReqSearchChannelMsg) GetFromID() int32 {
	if x != nil {
		return x.FromID
	}
	return 0
}

func (x *ReqSearchChannelMsg) GetMedias() []int32 {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *ReqSearchChannelMsg) GetOffsetID() int32 {
	if x != nil {
		return x.OffsetID
	}
	return 0
}

func (x *ReqSearchChannelMsg) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *ReqSearchChannelMsg) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

func (x *ReqSearchChannelMsg) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReqSearchChannelMsg) GetMinDate() int32 {
	if x != nil {
		return x.MinDate
	}
	return 0
}

func (x *ReqSearchChannelMsg) GetMaxDate() int32 {
	if x != nil {
		return x.MaxDate
	}
	return 0
}

func (x *ReqSearchChannelMsg) GetMinID() int32 {
	if x != nil {
		return x.MinID
	}
	return 0
}

func (x *ReqSearchChannelMsg) GetMaxID() int32 {
	if x != nil {
		return x.MaxID
	}
	return 0
}

type ReplySearchChannelMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*pbcomm.UserMsg `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
}

func (x *ReplySearchChannelMsg) Reset() {
	*x = ReplySearchChannelMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplySearchChannelMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplySearchChannelMsg) ProtoMessage() {}

func (x *ReplySearchChannelMsg) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplySearchChannelMsg.ProtoReflect.Descriptor instead.
func (*ReplySearchChannelMsg) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{80}
}

func (x *ReplySearchChannelMsg) GetMessages() []*pbcomm.UserMsg {
	if x != nil {
		return x.Messages
	}
	return nil
}

// =================================================== search =======================================================
type ReqIncreaseChannelId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	MsgIdDelta int32 `protobuf:"varint,2,opt,name=MsgIdDelta,proto3" json:"MsgIdDelta,omitempty"`
	PtsDelta   int32 `protobuf:"varint,3,opt,name=PtsDelta,proto3" json:"PtsDelta,omitempty"`
}

func (x *ReqIncreaseChannelId) Reset() {
	*x = ReqIncreaseChannelId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqIncreaseChannelId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqIncreaseChannelId) ProtoMessage() {}

func (x *ReqIncreaseChannelId) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqIncreaseChannelId.ProtoReflect.Descriptor instead.
func (*ReqIncreaseChannelId) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{81}
}

func (x *ReqIncreaseChannelId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqIncreaseChannelId) GetMsgIdDelta() int32 {
	if x != nil {
		return x.MsgIdDelta
	}
	return 0
}

func (x *ReqIncreaseChannelId) GetPtsDelta() int32 {
	if x != nil {
		return x.PtsDelta
	}
	return 0
}

type ReplyIncreaseChannelId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId    int32     `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`      // MsgId
	Pts      int32     `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`          // 最新的pts
	ReplyErr *ReplyErr `protobuf:"bytes,3,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyIncreaseChannelId) Reset() {
	*x = ReplyIncreaseChannelId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyIncreaseChannelId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyIncreaseChannelId) ProtoMessage() {}

func (x *ReplyIncreaseChannelId) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyIncreaseChannelId.ProtoReflect.Descriptor instead.
func (*ReplyIncreaseChannelId) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{82}
}

func (x *ReplyIncreaseChannelId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReplyIncreaseChannelId) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReplyIncreaseChannelId) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetChannelIncreaseId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
}

func (x *ReqGetChannelIncreaseId) Reset() {
	*x = ReqGetChannelIncreaseId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelIncreaseId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelIncreaseId) ProtoMessage() {}

func (x *ReqGetChannelIncreaseId) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelIncreaseId.ProtoReflect.Descriptor instead.
func (*ReqGetChannelIncreaseId) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{83}
}

func (x *ReqGetChannelIncreaseId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

type ReplyGetChannelIncreaseId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId    int32     `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`      // MsgId
	Pts      int32     `protobuf:"varint,2,opt,name=Pts,proto3" json:"Pts,omitempty"`          // 最新的pts
	ReplyErr *ReplyErr `protobuf:"bytes,3,opt,name=ReplyErr,proto3" json:"ReplyErr,omitempty"` // 返回错误描述结构体
}

func (x *ReplyGetChannelIncreaseId) Reset() {
	*x = ReplyGetChannelIncreaseId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelIncreaseId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelIncreaseId) ProtoMessage() {}

func (x *ReplyGetChannelIncreaseId) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelIncreaseId.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelIncreaseId) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{84}
}

func (x *ReplyGetChannelIncreaseId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ReplyGetChannelIncreaseId) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReplyGetChannelIncreaseId) GetReplyErr() *ReplyErr {
	if x != nil {
		return x.ReplyErr
	}
	return nil
}

type ReqGetChannelIncreaseIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelIds []int32 `protobuf:"varint,1,rep,packed,name=ChannelIds,proto3" json:"ChannelIds,omitempty"`
}

func (x *ReqGetChannelIncreaseIds) Reset() {
	*x = ReqGetChannelIncreaseIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelIncreaseIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelIncreaseIds) ProtoMessage() {}

func (x *ReqGetChannelIncreaseIds) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelIncreaseIds.ProtoReflect.Descriptor instead.
func (*ReqGetChannelIncreaseIds) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{85}
}

func (x *ReqGetChannelIncreaseIds) GetChannelIds() []int32 {
	if x != nil {
		return x.ChannelIds
	}
	return nil
}

type ReplyGetChannelIncreaseIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgIds []*ChannelMsgId `protobuf:"bytes,1,rep,name=MsgIds,proto3" json:"MsgIds,omitempty"`
}

func (x *ReplyGetChannelIncreaseIds) Reset() {
	*x = ReplyGetChannelIncreaseIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelIncreaseIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelIncreaseIds) ProtoMessage() {}

func (x *ReplyGetChannelIncreaseIds) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelIncreaseIds.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelIncreaseIds) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{86}
}

func (x *ReplyGetChannelIncreaseIds) GetMsgIds() []*ChannelMsgId {
	if x != nil {
		return x.MsgIds
	}
	return nil
}

type ChannelDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	TopMessage int32 `protobuf:"varint,2,opt,name=TopMessage,proto3" json:"TopMessage,omitempty"`
	Pts        int32 `protobuf:"varint,3,opt,name=Pts,proto3" json:"Pts,omitempty"`
	Update     int32 `protobuf:"varint,4,opt,name=Update,proto3" json:"Update,omitempty"`
}

func (x *ChannelDialog) Reset() {
	*x = ChannelDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDialog) ProtoMessage() {}

func (x *ChannelDialog) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDialog.ProtoReflect.Descriptor instead.
func (*ChannelDialog) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{87}
}

func (x *ChannelDialog) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelDialog) GetTopMessage() int32 {
	if x != nil {
		return x.TopMessage
	}
	return 0
}

func (x *ChannelDialog) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ChannelDialog) GetUpdate() int32 {
	if x != nil {
		return x.Update
	}
	return 0
}

type ReqUpdateChannelDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	TopMessage int32 `protobuf:"varint,2,opt,name=TopMessage,proto3" json:"TopMessage,omitempty"`
	Pts        int32 `protobuf:"varint,3,opt,name=Pts,proto3" json:"Pts,omitempty"`
	Update     int32 `protobuf:"varint,4,opt,name=Update,proto3" json:"Update,omitempty"`
}

func (x *ReqUpdateChannelDialog) Reset() {
	*x = ReqUpdateChannelDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateChannelDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateChannelDialog) ProtoMessage() {}

func (x *ReqUpdateChannelDialog) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateChannelDialog.ProtoReflect.Descriptor instead.
func (*ReqUpdateChannelDialog) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{88}
}

func (x *ReqUpdateChannelDialog) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqUpdateChannelDialog) GetTopMessage() int32 {
	if x != nil {
		return x.TopMessage
	}
	return 0
}

func (x *ReqUpdateChannelDialog) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *ReqUpdateChannelDialog) GetUpdate() int32 {
	if x != nil {
		return x.Update
	}
	return 0
}

type ReqGetChannelDialogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelIds []int32 `protobuf:"varint,1,rep,packed,name=ChannelIds,proto3" json:"ChannelIds,omitempty"`
}

func (x *ReqGetChannelDialogs) Reset() {
	*x = ReqGetChannelDialogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelDialogs) ProtoMessage() {}

func (x *ReqGetChannelDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelDialogs.ProtoReflect.Descriptor instead.
func (*ReqGetChannelDialogs) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{89}
}

func (x *ReqGetChannelDialogs) GetChannelIds() []int32 {
	if x != nil {
		return x.ChannelIds
	}
	return nil
}

type ReplyGetChannelDialogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelDialogs []*ChannelDialog `protobuf:"bytes,1,rep,name=ChannelDialogs,proto3" json:"ChannelDialogs,omitempty"`
}

func (x *ReplyGetChannelDialogs) Reset() {
	*x = ReplyGetChannelDialogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelDialogs) ProtoMessage() {}

func (x *ReplyGetChannelDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelDialogs.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelDialogs) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{90}
}

func (x *ReplyGetChannelDialogs) GetChannelDialogs() []*ChannelDialog {
	if x != nil {
		return x.ChannelDialogs
	}
	return nil
}

type ReqGetChannelMessageByChannelIdRandomId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	RandomId  int64 `protobuf:"varint,2,opt,name=RandomId,proto3" json:"RandomId,omitempty"`
	Encry     int32 `protobuf:"varint,3,opt,name=Encry,proto3" json:"Encry,omitempty"`
}

func (x *ReqGetChannelMessageByChannelIdRandomId) Reset() {
	*x = ReqGetChannelMessageByChannelIdRandomId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetChannelMessageByChannelIdRandomId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetChannelMessageByChannelIdRandomId) ProtoMessage() {}

func (x *ReqGetChannelMessageByChannelIdRandomId) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetChannelMessageByChannelIdRandomId.ProtoReflect.Descriptor instead.
func (*ReqGetChannelMessageByChannelIdRandomId) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{91}
}

func (x *ReqGetChannelMessageByChannelIdRandomId) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqGetChannelMessageByChannelIdRandomId) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *ReqGetChannelMessageByChannelIdRandomId) GetEncry() int32 {
	if x != nil {
		return x.Encry
	}
	return 0
}

type ReplyGetChannelMessageByChannelIdRandomId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMsg *pbcomm.UserMsg `protobuf:"bytes,1,opt,name=UserMsg,proto3" json:"UserMsg,omitempty"`
}

func (x *ReplyGetChannelMessageByChannelIdRandomId) Reset() {
	*x = ReplyGetChannelMessageByChannelIdRandomId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeldb_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGetChannelMessageByChannelIdRandomId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGetChannelMessageByChannelIdRandomId) ProtoMessage() {}

func (x *ReplyGetChannelMessageByChannelIdRandomId) ProtoReflect() protoreflect.Message {
	mi := &file_channeldb_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGetChannelMessageByChannelIdRandomId.ProtoReflect.Descriptor instead.
func (*ReplyGetChannelMessageByChannelIdRandomId) Descriptor() ([]byte, []int) {
	return file_channeldb_proto_rawDescGZIP(), []int{92}
}

func (x *ReplyGetChannelMessageByChannelIdRandomId) GetUserMsg() *pbcomm.UserMsg {
	if x != nil {
		return x.UserMsg
	}
	return nil
}

var File_channeldb_proto protoreflect.FileDescriptor

var file_channeldb_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x1a, 0x13, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x73,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0b, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x80, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c,
	0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x68, 0x0a, 0x11,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x50, 0x74,
	0x73, 0x12, 0x2b, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3e, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x73, 0x41, 0x6e,
	0x64, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x04, 0x4d, 0x73, 0x67, 0x73, 0x22, 0x3c, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45,
	0x72, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x45, 0x72,
	0x72, 0x4d, 0x73, 0x67, 0x22, 0x7f, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x42, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x60, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x8d, 0x01, 0x0a, 0x1d, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x0c, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72,
	0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x7c, 0x0a, 0x18, 0x52, 0x65,
	0x71, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4d, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45,
	0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x58, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52,
	0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x77, 0x0a, 0x1a, 0x52, 0x65, 0x71,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x22, 0x8c, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x4e, 0x75, 0x6d, 0x12, 0x3b, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72,
	0x72, 0x22, 0x57, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72,
	0x72, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x47,
	0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74,
	0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x8f, 0x01, 0x0a,
	0x1d, 0x52, 0x65, 0x71, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x49,
	0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0xaf,
	0x01, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x69, 0x66, 0x66, 0x42, 0x79, 0x50, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x22, 0xbf, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x42, 0x79, 0x50, 0x74, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x49, 0x73, 0x46, 0x69, 0x61, 0x6e, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x49, 0x73, 0x46, 0x69, 0x61, 0x6e, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x4c, 0x6f, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x54, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x12,
	0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x4d, 0x73, 0x67,
	0x73, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45,
	0x72, 0x72, 0x22, 0x5f, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x98, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x74, 0x73, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x10, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2f, 0x0a,
	0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x70,
	0x0a, 0x19, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x4e, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72,
	0x22, 0x6d, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12,
	0x29, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x65, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x74, 0x0a, 0x20, 0x52, 0x65, 0x71, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x6a, 0x0a, 0x0d,
	0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x84, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x75, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f,
	0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22,
	0x71, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x22, 0xba, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3b, 0x0a,
	0x0c, 0x4d, 0x73, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x4d, 0x73, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x52, 0x0c, 0x4d, 0x73,
	0x67, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x74,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x50, 0x74, 0x73, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f,
	0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22,
	0x58, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x72, 0x0a, 0x17, 0x52, 0x65, 0x71,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0xa8, 0x01,
	0x0a, 0x19, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x45, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x6f, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x74, 0x0a, 0x16, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x2f,
	0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22,
	0x76, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x73, 0x67, 0x73, 0x42, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x9a, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x73, 0x42,
	0x79, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73,
	0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64,
	0x50, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x22, 0xae, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64,
	0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41,
	0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d,
	0x61, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x98, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x52, 0x11, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x12,
	0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72,
	0x22, 0x58, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x6f, 0x70, 0x4d, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x71, 0x0a, 0x14, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x4d, 0x73,
	0x74, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x73, 0x0a,
	0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x6f, 0x70, 0x4d, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45,
	0x72, 0x72, 0x22, 0xbc, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x22, 0xe6, 0x01, 0x0a, 0x27, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x95, 0x01,
	0x0a, 0x2a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42,
	0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x2a, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x8f, 0x01, 0x0a, 0x29, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x31, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x0b,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45,
	0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x66, 0x0a, 0x18,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x29, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x12, 0x5f, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x5e, 0x0a, 0x2b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x45, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x7b, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0xb4, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x5f, 0x0a, 0x18, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x52, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x2f, 0x0a, 0x08, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45,
	0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x69, 0x0a, 0x1d,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x2a, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42,
	0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22,
	0xcf, 0x01, 0x0a, 0x2c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x6e, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x1d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72,
	0x72, 0x22, 0xd5, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x22, 0x7d, 0x0a, 0x10, 0x52, 0x65, 0x71,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x44, 0x0a,
	0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c,
	0x6f, 0x67, 0x52, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x76, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x46,
	0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x7f, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c,
	0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x73,
	0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72,
	0x72, 0x22, 0xf7, 0x01, 0x0a, 0x40, 0x52, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x6e,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0xca, 0x01, 0x0a, 0x33,
	0x52, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x97, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x71,
	0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a,
	0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x22, 0xd6, 0x01, 0x0a, 0x37, 0x52, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41,
	0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0xa9, 0x01, 0x0a, 0x2a,
	0x52, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0xa3, 0x01, 0x0a, 0x28, 0x52, 0x65, 0x71, 0x46,
	0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x99, 0x01,
	0x0a, 0x16, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x41, 0x74, 0x41, 0x64, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x4b, 0x0a, 0x18, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x74, 0x41, 0x64, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0xb7, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x47, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x64, 0x64, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x78, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x47, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x08,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52,
	0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72,
	0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x52,
	0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x74, 0x44, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x22, 0x4b, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x44, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x08,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x48, 0x0a,
	0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x91, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x52, 0x0e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72,
	0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x60, 0x0a, 0x1b, 0x52,
	0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x93, 0x01,
	0x0a, 0x1d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x64, 0x52, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x45, 0x72, 0x72, 0x22, 0xc4, 0x02, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x57, 0x61, 0x72, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x77, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x46, 0x77, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x69, 0x61, 0x42,
	0x6f, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x56, 0x69, 0x61, 0x42,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x22, 0x6e, 0x0a, 0x10, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x22, 0xc1, 0x02, 0x0a, 0x13, 0x52,
	0x65, 0x71, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x4d, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4d, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x61, 0x78, 0x49,
	0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x61, 0x78, 0x49, 0x44, 0x22, 0x44,
	0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x22, 0x70, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x74,
	0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x74,
	0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52,
	0x08, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x37, 0x0a, 0x17, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x22, 0x74, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x45, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x52, 0x08,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x3a, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x73, 0x22, 0x4d, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x06, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x73, 0x22, 0x77, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x50, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x80, 0x01, 0x0a,
	0x16, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x50, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22,
	0x36, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x22, 0x5a, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x73, 0x12, 0x40, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x52, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x73, 0x22, 0x79, 0x0a, 0x27, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x22, 0x56,
	0x0a, 0x29, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x2a, 0x23, 0x0a, 0x08, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d,
	0x53, 0x47, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x10, 0x01, 0x2a, 0x55, 0x0a, 0x0c, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0d, 0x0a, 0x09, 0x52,
	0x70, 0x63, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x03, 0x32, 0x83, 0x25, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x42,
	0x12, 0x4a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x1c, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x18,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73,
	0x1a, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x15,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x41,
	0x6e, 0x64, 0x50, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x74, 0x73, 0x1a, 0x25, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x74,
	0x73, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x1a, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x4e, 0x75, 0x6d, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x75, 0x6d, 0x1a, 0x27, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x4e, 0x75, 0x6d, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x1a, 0x1f, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x11, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52,
	0x65, 0x71, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x1a, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x73, 0x1a, 0x25, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x1a, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x1a, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x42, 0x79, 0x50, 0x74, 0x73, 0x12, 0x21,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x42, 0x79, 0x50, 0x74,
	0x73, 0x1a, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x66,
	0x66, 0x42, 0x79, 0x50, 0x74, 0x73, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x73,
	0x74, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0x27, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x24, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x18, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x26, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x1e,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x1a, 0x13,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x45, 0x72, 0x72, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x73,
	0x67, 0x73, 0x1a, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x73, 0x22, 0x00,
	0x12, 0x59, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12,
	0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x1a,
	0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x72, 0x72, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x73, 0x42, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x12,
	0x24, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x73, 0x42, 0x79, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x73, 0x1a, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x73, 0x67, 0x73, 0x42, 0x79, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x12, 0x60, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x73, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x56, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x70,
	0x4d, 0x73, 0x67, 0x12, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x70,
	0x4d, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x6f, 0x70, 0x4d, 0x73, 0x74, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x4d, 0x73, 0x67, 0x32, 0x12, 0x1f, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x4d, 0x73, 0x74, 0x32, 0x1a, 0x20, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x4d, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x92, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x32, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x34,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x26, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x12, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x1a, 0x36, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x22,
	0x00, 0x12, 0x77, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x12, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x1a, 0x2b, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x27, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42,
	0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x35, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x37, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42,
	0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x12, 0x61, 0x0a, 0x18, 0x46,
	0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x1a,
	0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0xab,
	0x01, 0x0a, 0x3d, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x4b, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x1d, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x46,
	0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x91, 0x01, 0x0a,
	0x30, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3e, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x1a, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x12, 0x73, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f,
	0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c,
	0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x99, 0x01, 0x0a, 0x34, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41,
	0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x42,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x46, 0x69,
	0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x1a, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f,
	0x67, 0x12, 0x7f, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c,
	0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x35, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64,
	0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x1a, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c,
	0x6f, 0x67, 0x12, 0x7b, 0x0a, 0x25, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x41, 0x6e,
	0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x33, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x46, 0x69, 0x6e, 0x64, 0x73,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x1a, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12,
	0x5f, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x74, 0x41, 0x64, 0x64, 0x12, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x41, 0x64, 0x64, 0x1a, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x41, 0x64, 0x64, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x41, 0x74, 0x47, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x47, 0x65, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x47, 0x65, 0x74, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x41, 0x74, 0x44, 0x65, 0x6c, 0x12, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x44, 0x65, 0x6c, 0x1a, 0x23, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x44, 0x65, 0x6c,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x73, 0x67, 0x1a, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x21,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x1a, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x1f, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x1a, 0x21,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x73, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64,
	0x1a, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x64, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_channeldb_proto_rawDescOnce sync.Once
	file_channeldb_proto_rawDescData = file_channeldb_proto_rawDesc
)

func file_channeldb_proto_rawDescGZIP() []byte {
	file_channeldb_proto_rawDescOnce.Do(func() {
		file_channeldb_proto_rawDescData = protoimpl.X.CompressGZIP(file_channeldb_proto_rawDescData)
	})
	return file_channeldb_proto_rawDescData
}

var file_channeldb_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_channeldb_proto_msgTypes = make([]protoimpl.MessageInfo, 93)
var file_channeldb_proto_goTypes = []interface{}{
	(USER_MSG)(0),                                                            // 0: channeldb.USER_MSG
	(HeartBeating)(0),                                                        // 1: channeldb.HeartBeating
	(*ReplyNull)(nil),                                                        // 2: channeldb.ReplyNull
	(*ChannelMsgId)(nil),                                                     // 3: channeldb.ChannelMsgId
	(*ChannelPtsHandle)(nil),                                                 // 4: channeldb.ChannelPtsHandle
	(*UserMsgListAndPts)(nil),                                                // 5: channeldb.UserMsgListAndPts
	(*MsgsAndMaxId)(nil),                                                     // 6: channeldb.MsgsAndMaxId
	(*ReplyErr)(nil),                                                         // 7: channeldb.ReplyErr
	(*ReqHeartBeating)(nil),                                                  // 8: channeldb.ReqHeartBeating
	(*ReplyHeartBeating)(nil),                                                // 9: channeldb.ReplyHeartBeating
	(*ReqUpdateChannelMsgIdAndPts)(nil),                                      // 10: channeldb.ReqUpdateChannelMsgIdAndPts
	(*ReplyUpdateChannelMsgIdAndPts)(nil),                                    // 11: channeldb.ReplyUpdateChannelMsgIdAndPts
	(*ReqSetChannelMsgIdAndPts)(nil),                                         // 12: channeldb.ReqSetChannelMsgIdAndPts
	(*ReplySetChannelMsgIdAndPts)(nil),                                       // 13: channeldb.ReplySetChannelMsgIdAndPts
	(*ReqUpdateChannelPts)(nil),                                              // 14: channeldb.ReqUpdateChannelPts
	(*ReplyUpdateChannelPts)(nil),                                            // 15: channeldb.ReplyUpdateChannelPts
	(*ReqUpdateChannelPtsWithNum)(nil),                                       // 16: channeldb.ReqUpdateChannelPtsWithNum
	(*ReplyUpdateChannelPtsWithNum)(nil),                                     // 17: channeldb.ReplyUpdateChannelPtsWithNum
	(*ReqGetChannelMsgId)(nil),                                               // 18: channeldb.ReqGetChannelMsgId
	(*ReplyGetChannelMsgId)(nil),                                             // 19: channeldb.ReplyGetChannelMsgId
	(*ReqStoreChannelPtsHandle)(nil),                                         // 20: channeldb.ReqStoreChannelPtsHandle
	(*ReqBatchStoreChannelPtsHandle)(nil),                                    // 21: channeldb.ReqBatchStoreChannelPtsHandle
	(*ReqGetChannelDiffByPts)(nil),                                           // 22: channeldb.ReqGetChannelDiffByPts
	(*ReplyGetChannelDiffByPts)(nil),                                         // 23: channeldb.ReplyGetChannelDiffByPts
	(*ReqGetChannelLastPtsHandle)(nil),                                       // 24: channeldb.ReqGetChannelLastPtsHandle
	(*ReplyGetChannelLastPtsHandle)(nil),                                     // 25: channeldb.ReplyGetChannelLastPtsHandle
	(*ReqDeleteChannelPtsHandle)(nil),                                        // 26: channeldb.ReqDeleteChannelPtsHandle
	(*ReplyDeleteChannelPtsHandle)(nil),                                      // 27: channeldb.ReplyDeleteChannelPtsHandle
	(*ReqInsertOrUpdateChannelMsg)(nil),                                      // 28: channeldb.ReqInsertOrUpdateChannelMsg
	(*ReqUpdateChannelMsg)(nil),                                              // 29: channeldb.ReqUpdateChannelMsg
	(*ReqBatchInsertOrUpdateChannelMsg)(nil),                                 // 30: channeldb.ReqBatchInsertOrUpdateChannelMsg
	(*ReqDeleteMsgs)(nil),                                                    // 31: channeldb.ReqDeleteMsgs
	(*ReplyDeleteMsgs)(nil),                                                  // 32: channeldb.ReplyDeleteMsgs
	(*ReqDeleteUserHistory)(nil),                                             // 33: channeldb.ReqDeleteUserHistory
	(*ReplyDeleteUserHistory)(nil),                                           // 34: channeldb.ReplyDeleteUserHistory
	(*ReqDeleteChannelMsg)(nil),                                              // 35: channeldb.ReqDeleteChannelMsg
	(*ReqDeleteChannelMessage)(nil),                                          // 36: channeldb.ReqDeleteChannelMessage
	(*ReplyDeleteChannelMessage)(nil),                                        // 37: channeldb.ReplyDeleteChannelMessage
	(*ReqGetChannelMessage)(nil),                                             // 38: channeldb.ReqGetChannelMessage
	(*ReplyGetChannelMessage)(nil),                                           // 39: channeldb.ReplyGetChannelMessage
	(*ReqGetChannelMsgsByMsgIds)(nil),                                        // 40: channeldb.ReqGetChannelMsgsByMsgIds
	(*ReplyGetChannelMsgsByMsgIds)(nil),                                      // 41: channeldb.ReplyGetChannelMsgsByMsgIds
	(*ReqGetChannelMsgHistory)(nil),                                          // 42: channeldb.ReqGetChannelMsgHistory
	(*ReplyGetChannelMsgHistory)(nil),                                        // 43: channeldb.ReplyGetChannelMsgHistory
	(*ReqGetChannelTopMst)(nil),                                              // 44: channeldb.ReqGetChannelTopMst
	(*ReqGetChannelTopMst2)(nil),                                             // 45: channeldb.ReqGetChannelTopMst2
	(*ReplyGetChannelTopMst)(nil),                                            // 46: channeldb.ReplyGetChannelTopMst
	(*GetChannelMediaMessageHistoryByMediaConfig)(nil),                       // 47: channeldb.GetChannelMediaMessageHistoryByMediaConfig
	(*ReqGetChannelMediaMessageHistoryByMedia)(nil),                          // 48: channeldb.ReqGetChannelMediaMessageHistoryByMedia
	(*ReplyGetChannelMediaMessageHistoryByMedia)(nil),                        // 49: channeldb.ReplyGetChannelMediaMessageHistoryByMedia
	(*ChannelMessageDeleteMark)(nil),                                         // 50: channeldb.ChannelMessageDeleteMark
	(*ReqInsertOrUpdateChannelMessageDeleteMark)(nil),                        // 51: channeldb.ReqInsertOrUpdateChannelMessageDeleteMark
	(*ReplyInsertOrUpdateChannelMessageDeleteMark)(nil),                      // 52: channeldb.ReplyInsertOrUpdateChannelMessageDeleteMark
	(*ReqGetChannelMessageDeleteMark)(nil),                                   // 53: channeldb.ReqGetChannelMessageDeleteMark
	(*ReplyGetChannelMessageDeleteMark)(nil),                                 // 54: channeldb.ReplyGetChannelMessageDeleteMark
	(*ChannelMediaMessageStatistics)(nil),                                    // 55: channeldb.ChannelMediaMessageStatistics
	(*ReqGetChannelMediaMessageStatisticsByMedia)(nil),                       // 56: channeldb.ReqGetChannelMediaMessageStatisticsByMedia
	(*ReplyGetChannelMediaMessageStatisticsByMedia)(nil),                     // 57: channeldb.ReplyGetChannelMediaMessageStatisticsByMedia
	(*ChannelAdminLog)(nil),                                                  // 58: channeldb.ChannelAdminLog
	(*ReqStoreAdminLog)(nil),                                                 // 59: channeldb.ReqStoreAdminLog
	(*ReqFindsAdminLogByChannelId)(nil),                                      // 60: channeldb.ReqFindsAdminLogByChannelId
	(*ReplyFindsAdminLog)(nil),                                               // 61: channeldb.ReplyFindsAdminLog
	(*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId)(nil), // 62: channeldb.ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId
	(*ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId)(nil),              // 63: channeldb.ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId
	(*ReqFindsAdminLogByChannelIdAndUserId)(nil),                             // 64: channeldb.ReqFindsAdminLogByChannelIdAndUserId
	(*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters)(nil),          // 65: channeldb.ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters
	(*ReqFindsAdminLogByChannelIdAndEventFilters)(nil),                       // 66: channeldb.ReqFindsAdminLogByChannelIdAndEventFilters
	(*ReqFindsAdminLogByChannelIdAndAdminUsers)(nil),                         // 67: channeldb.ReqFindsAdminLogByChannelIdAndAdminUsers
	(*ReqChannelMessageAtAdd)(nil),                                           // 68: channeldb.ReqChannelMessageAtAdd
	(*ReplyChannelMessageAtAdd)(nil),                                         // 69: channeldb.ReplyChannelMessageAtAdd
	(*ReqChannelMessageAtGet)(nil),                                           // 70: channeldb.ReqChannelMessageAtGet
	(*ReplyChannelMessageAtGet)(nil),                                         // 71: channeldb.ReplyChannelMessageAtGet
	(*ReqChannelMessageAtDel)(nil),                                           // 72: channeldb.ReqChannelMessageAtDel
	(*ReplyChannelMessageAtDel)(nil),                                         // 73: channeldb.ReplyChannelMessageAtDel
	(*ChannelLocalId)(nil),                                                   // 74: channeldb.ChannelLocalId
	(*ReqIncreaseChannelLocalId)(nil),                                        // 75: channeldb.ReqIncreaseChannelLocalId
	(*ReplyIncreaseChannelLocalId)(nil),                                      // 76: channeldb.ReplyIncreaseChannelLocalId
	(*ReqGetCurrentChannelLocalId)(nil),                                      // 77: channeldb.ReqGetCurrentChannelLocalId
	(*ReplyGetCurrentChannelLocalId)(nil),                                    // 78: channeldb.ReplyGetCurrentChannelLocalId
	(*ForWardUserMsg)(nil),                                                   // 79: channeldb.ForWardUserMsg
	(*ChannelMessageAt)(nil),                                                 // 80: channeldb.ChannelMessageAt
	(*ReqSearchChannelMsg)(nil),                                              // 81: channeldb.ReqSearchChannelMsg
	(*ReplySearchChannelMsg)(nil),                                            // 82: channeldb.ReplySearchChannelMsg
	(*ReqIncreaseChannelId)(nil),                                             // 83: channeldb.ReqIncreaseChannelId
	(*ReplyIncreaseChannelId)(nil),                                           // 84: channeldb.ReplyIncreaseChannelId
	(*ReqGetChannelIncreaseId)(nil),                                          // 85: channeldb.ReqGetChannelIncreaseId
	(*ReplyGetChannelIncreaseId)(nil),                                        // 86: channeldb.ReplyGetChannelIncreaseId
	(*ReqGetChannelIncreaseIds)(nil),                                         // 87: channeldb.ReqGetChannelIncreaseIds
	(*ReplyGetChannelIncreaseIds)(nil),                                       // 88: channeldb.ReplyGetChannelIncreaseIds
	(*ChannelDialog)(nil),                                                    // 89: channeldb.ChannelDialog
	(*ReqUpdateChannelDialog)(nil),                                           // 90: channeldb.ReqUpdateChannelDialog
	(*ReqGetChannelDialogs)(nil),                                             // 91: channeldb.ReqGetChannelDialogs
	(*ReplyGetChannelDialogs)(nil),                                           // 92: channeldb.ReplyGetChannelDialogs
	(*ReqGetChannelMessageByChannelIdRandomId)(nil),                          // 93: channeldb.ReqGetChannelMessageByChannelIdRandomId
	(*ReplyGetChannelMessageByChannelIdRandomId)(nil),                        // 94: channeldb.ReplyGetChannelMessageByChannelIdRandomId
	(*pbcomm.UserMsg)(nil),                                                   // 95: pbcomm.UserMsg
	(*pbcomm.Debug)(nil),                                                     // 96: pbcomm.Debug
}
var file_channeldb_proto_depIdxs = []int32{
	95,  // 0: channeldb.UserMsgListAndPts.UserMsgs:type_name -> pbcomm.UserMsg
	1,   // 1: channeldb.ReqHeartBeating.Type:type_name -> channeldb.HeartBeating
	1,   // 2: channeldb.ReqHeartBeating.Identification:type_name -> channeldb.HeartBeating
	1,   // 3: channeldb.ReplyHeartBeating.Type:type_name -> channeldb.HeartBeating
	1,   // 4: channeldb.ReplyHeartBeating.Result:type_name -> channeldb.HeartBeating
	96,  // 5: channeldb.ReqUpdateChannelMsgIdAndPts.Debug:type_name -> pbcomm.Debug
	3,   // 6: channeldb.ReplyUpdateChannelMsgIdAndPts.ChannelMsgId:type_name -> channeldb.ChannelMsgId
	7,   // 7: channeldb.ReplyUpdateChannelMsgIdAndPts.ReplyErr:type_name -> channeldb.ReplyErr
	3,   // 8: channeldb.ReqSetChannelMsgIdAndPts.ChannelMsgId:type_name -> channeldb.ChannelMsgId
	96,  // 9: channeldb.ReqSetChannelMsgIdAndPts.Debug:type_name -> pbcomm.Debug
	7,   // 10: channeldb.ReplySetChannelMsgIdAndPts.ReplyErr:type_name -> channeldb.ReplyErr
	96,  // 11: channeldb.ReqUpdateChannelPts.Debug:type_name -> pbcomm.Debug
	3,   // 12: channeldb.ReplyUpdateChannelPts.ChannelMsgId:type_name -> channeldb.ChannelMsgId
	7,   // 13: channeldb.ReplyUpdateChannelPts.ReplyErr:type_name -> channeldb.ReplyErr
	96,  // 14: channeldb.ReqUpdateChannelPtsWithNum.Debug:type_name -> pbcomm.Debug
	3,   // 15: channeldb.ReplyUpdateChannelPtsWithNum.ChannelMsgId:type_name -> channeldb.ChannelMsgId
	7,   // 16: channeldb.ReplyUpdateChannelPtsWithNum.ReplyErr:type_name -> channeldb.ReplyErr
	96,  // 17: channeldb.ReqGetChannelMsgId.Debug:type_name -> pbcomm.Debug
	3,   // 18: channeldb.ReplyGetChannelMsgId.ChannelMsgId:type_name -> channeldb.ChannelMsgId
	7,   // 19: channeldb.ReplyGetChannelMsgId.ReplyErr:type_name -> channeldb.ReplyErr
	4,   // 20: channeldb.ReqStoreChannelPtsHandle.ChannelPtsHandle:type_name -> channeldb.ChannelPtsHandle
	96,  // 21: channeldb.ReqStoreChannelPtsHandle.Debug:type_name -> pbcomm.Debug
	4,   // 22: channeldb.ReqBatchStoreChannelPtsHandle.ChannelPtsHandles:type_name -> channeldb.ChannelPtsHandle
	96,  // 23: channeldb.ReqBatchStoreChannelPtsHandle.Debug:type_name -> pbcomm.Debug
	96,  // 24: channeldb.ReqGetChannelDiffByPts.Debug:type_name -> pbcomm.Debug
	7,   // 25: channeldb.ReplyGetChannelDiffByPts.ReplyErr:type_name -> channeldb.ReplyErr
	96,  // 26: channeldb.ReqGetChannelLastPtsHandle.Debug:type_name -> pbcomm.Debug
	4,   // 27: channeldb.ReplyGetChannelLastPtsHandle.ChannelPtsHandle:type_name -> channeldb.ChannelPtsHandle
	7,   // 28: channeldb.ReplyGetChannelLastPtsHandle.ReplyErr:type_name -> channeldb.ReplyErr
	96,  // 29: channeldb.ReqDeleteChannelPtsHandle.Debug:type_name -> pbcomm.Debug
	7,   // 30: channeldb.ReplyDeleteChannelPtsHandle.ReplyErr:type_name -> channeldb.ReplyErr
	95,  // 31: channeldb.ReqInsertOrUpdateChannelMsg.UserMsg:type_name -> pbcomm.UserMsg
	96,  // 32: channeldb.ReqInsertOrUpdateChannelMsg.Debug:type_name -> pbcomm.Debug
	95,  // 33: channeldb.ReqUpdateChannelMsg.UserMsg:type_name -> pbcomm.UserMsg
	96,  // 34: channeldb.ReqUpdateChannelMsg.Debug:type_name -> pbcomm.Debug
	95,  // 35: channeldb.ReqBatchInsertOrUpdateChannelMsg.UserMsgs:type_name -> pbcomm.UserMsg
	96,  // 36: channeldb.ReqBatchInsertOrUpdateChannelMsg.Debug:type_name -> pbcomm.Debug
	96,  // 37: channeldb.ReqDeleteMsgs.Debug:type_name -> pbcomm.Debug
	7,   // 38: channeldb.ReplyDeleteMsgs.ReplyErr:type_name -> channeldb.ReplyErr
	96,  // 39: channeldb.ReqDeleteUserHistory.Debug:type_name -> pbcomm.Debug
	6,   // 40: channeldb.ReplyDeleteUserHistory.MsgsAndMaxId:type_name -> channeldb.MsgsAndMaxId
	7,   // 41: channeldb.ReplyDeleteUserHistory.ReplyErr:type_name -> channeldb.ReplyErr
	96,  // 42: channeldb.ReqDeleteChannelMsg.Debug:type_name -> pbcomm.Debug
	96,  // 43: channeldb.ReqDeleteChannelMessage.Debug:type_name -> pbcomm.Debug
	7,   // 44: channeldb.ReplyDeleteChannelMessage.ReplyErr:type_name -> channeldb.ReplyErr
	96,  // 45: channeldb.ReqGetChannelMessage.Debug:type_name -> pbcomm.Debug
	95,  // 46: channeldb.ReplyGetChannelMessage.UserMsg:type_name -> pbcomm.UserMsg
	7,   // 47: channeldb.ReplyGetChannelMessage.ReplyErr:type_name -> channeldb.ReplyErr
	96,  // 48: channeldb.ReqGetChannelMsgsByMsgIds.Debug:type_name -> pbcomm.Debug
	5,   // 49: channeldb.ReplyGetChannelMsgsByMsgIds.UserMsgListAndPts:type_name -> channeldb.UserMsgListAndPts
	7,   // 50: channeldb.ReplyGetChannelMsgsByMsgIds.ReplyErr:type_name -> channeldb.ReplyErr
	96,  // 51: channeldb.ReqGetChannelMsgHistory.Debug:type_name -> pbcomm.Debug
	5,   // 52: channeldb.ReplyGetChannelMsgHistory.UserMsgListAndPts:type_name -> channeldb.UserMsgListAndPts
	7,   // 53: channeldb.ReplyGetChannelMsgHistory.ReplyErr:type_name -> channeldb.ReplyErr
	96,  // 54: channeldb.ReqGetChannelTopMst.Debug:type_name -> pbcomm.Debug
	96,  // 55: channeldb.ReqGetChannelTopMst2.Debug:type_name -> pbcomm.Debug
	95,  // 56: channeldb.ReplyGetChannelTopMst.UserMsg:type_name -> pbcomm.UserMsg
	7,   // 57: channeldb.ReplyGetChannelTopMst.ReplyErr:type_name -> channeldb.ReplyErr
	47,  // 58: channeldb.ReqGetChannelMediaMessageHistoryByMedia.GetChannelMediaMessageHistoryByMediaConfig:type_name -> channeldb.GetChannelMediaMessageHistoryByMediaConfig
	96,  // 59: channeldb.ReqGetChannelMediaMessageHistoryByMedia.Debug:type_name -> pbcomm.Debug
	95,  // 60: channeldb.ReplyGetChannelMediaMessageHistoryByMedia.ChannelMsgs:type_name -> pbcomm.UserMsg
	7,   // 61: channeldb.ReplyGetChannelMediaMessageHistoryByMedia.ReplyErr:type_name -> channeldb.ReplyErr
	50,  // 62: channeldb.ReqInsertOrUpdateChannelMessageDeleteMark.ChannelMessageDeleteMark:type_name -> channeldb.ChannelMessageDeleteMark
	96,  // 63: channeldb.ReqInsertOrUpdateChannelMessageDeleteMark.Debug:type_name -> pbcomm.Debug
	7,   // 64: channeldb.ReplyInsertOrUpdateChannelMessageDeleteMark.ReplyErr:type_name -> channeldb.ReplyErr
	96,  // 65: channeldb.ReqGetChannelMessageDeleteMark.Debug:type_name -> pbcomm.Debug
	50,  // 66: channeldb.ReplyGetChannelMessageDeleteMark.ChannelMessageDeleteMark:type_name -> channeldb.ChannelMessageDeleteMark
	7,   // 67: channeldb.ReplyGetChannelMessageDeleteMark.ReplyErr:type_name -> channeldb.ReplyErr
	96,  // 68: channeldb.ReqGetChannelMediaMessageStatisticsByMedia.Debug:type_name -> pbcomm.Debug
	55,  // 69: channeldb.ReplyGetChannelMediaMessageStatisticsByMedia.ChannelMediaMessageStatistics:type_name -> channeldb.ChannelMediaMessageStatistics
	7,   // 70: channeldb.ReplyGetChannelMediaMessageStatisticsByMedia.ReplyErr:type_name -> channeldb.ReplyErr
	58,  // 71: channeldb.ReqStoreAdminLog.ChannelAdminLog:type_name -> channeldb.ChannelAdminLog
	96,  // 72: channeldb.ReqStoreAdminLog.Debug:type_name -> pbcomm.Debug
	96,  // 73: channeldb.ReqFindsAdminLogByChannelId.Debug:type_name -> pbcomm.Debug
	58,  // 74: channeldb.ReplyFindsAdminLog.AdminLogs:type_name -> channeldb.ChannelAdminLog
	7,   // 75: channeldb.ReplyFindsAdminLog.ReplyErr:type_name -> channeldb.ReplyErr
	96,  // 76: channeldb.ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId.Debug:type_name -> pbcomm.Debug
	96,  // 77: channeldb.ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId.Debug:type_name -> pbcomm.Debug
	96,  // 78: channeldb.ReqFindsAdminLogByChannelIdAndUserId.Debug:type_name -> pbcomm.Debug
	96,  // 79: channeldb.ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters.Debug:type_name -> pbcomm.Debug
	96,  // 80: channeldb.ReqFindsAdminLogByChannelIdAndEventFilters.Debug:type_name -> pbcomm.Debug
	96,  // 81: channeldb.ReqFindsAdminLogByChannelIdAndAdminUsers.Debug:type_name -> pbcomm.Debug
	96,  // 82: channeldb.ReqChannelMessageAtAdd.Debug:type_name -> pbcomm.Debug
	7,   // 83: channeldb.ReplyChannelMessageAtAdd.ReplyErr:type_name -> channeldb.ReplyErr
	96,  // 84: channeldb.ReqChannelMessageAtGet.Debug:type_name -> pbcomm.Debug
	95,  // 85: channeldb.ReplyChannelMessageAtGet.Messages:type_name -> pbcomm.UserMsg
	7,   // 86: channeldb.ReplyChannelMessageAtGet.ReplyErr:type_name -> channeldb.ReplyErr
	96,  // 87: channeldb.ReqChannelMessageAtDel.Debug:type_name -> pbcomm.Debug
	7,   // 88: channeldb.ReplyChannelMessageAtDel.ReplyErr:type_name -> channeldb.ReplyErr
	96,  // 89: channeldb.ReqIncreaseChannelLocalId.Debug:type_name -> pbcomm.Debug
	74,  // 90: channeldb.ReplyIncreaseChannelLocalId.ChannelLocalId:type_name -> channeldb.ChannelLocalId
	7,   // 91: channeldb.ReplyIncreaseChannelLocalId.ReplyErr:type_name -> channeldb.ReplyErr
	96,  // 92: channeldb.ReqGetCurrentChannelLocalId.Debug:type_name -> pbcomm.Debug
	74,  // 93: channeldb.ReplyGetCurrentChannelLocalId.ChannelLocalId:type_name -> channeldb.ChannelLocalId
	7,   // 94: channeldb.ReplyGetCurrentChannelLocalId.ReplyErr:type_name -> channeldb.ReplyErr
	95,  // 95: channeldb.ReplySearchChannelMsg.Messages:type_name -> pbcomm.UserMsg
	7,   // 96: channeldb.ReplyIncreaseChannelId.ReplyErr:type_name -> channeldb.ReplyErr
	7,   // 97: channeldb.ReplyGetChannelIncreaseId.ReplyErr:type_name -> channeldb.ReplyErr
	3,   // 98: channeldb.ReplyGetChannelIncreaseIds.MsgIds:type_name -> channeldb.ChannelMsgId
	89,  // 99: channeldb.ReplyGetChannelDialogs.ChannelDialogs:type_name -> channeldb.ChannelDialog
	95,  // 100: channeldb.ReplyGetChannelMessageByChannelIdRandomId.UserMsg:type_name -> pbcomm.UserMsg
	8,   // 101: channeldb.ChannelDB.HeartBeating:input_type -> channeldb.ReqHeartBeating
	10,  // 102: channeldb.ChannelDB.UpdateChannelMsgIdAndPts:input_type -> channeldb.ReqUpdateChannelMsgIdAndPts
	12,  // 103: channeldb.ChannelDB.SetChannelMsgIdAndPts:input_type -> channeldb.ReqSetChannelMsgIdAndPts
	14,  // 104: channeldb.ChannelDB.UpdateChannelPts:input_type -> channeldb.ReqUpdateChannelPts
	16,  // 105: channeldb.ChannelDB.UpdateChannelPtsWithNum:input_type -> channeldb.ReqUpdateChannelPtsWithNum
	18,  // 106: channeldb.ChannelDB.GetChannelMsgId:input_type -> channeldb.ReqGetChannelMsgId
	83,  // 107: channeldb.ChannelDB.IncreaseChannelId:input_type -> channeldb.ReqIncreaseChannelId
	85,  // 108: channeldb.ChannelDB.GetChannelIncreaseId:input_type -> channeldb.ReqGetChannelIncreaseId
	87,  // 109: channeldb.ChannelDB.GetChannelIncreaseIds:input_type -> channeldb.ReqGetChannelIncreaseIds
	20,  // 110: channeldb.ChannelDB.StoreChannelPtsHandle:input_type -> channeldb.ReqStoreChannelPtsHandle
	21,  // 111: channeldb.ChannelDB.BatchStoreChannelPtsHandle:input_type -> channeldb.ReqBatchStoreChannelPtsHandle
	22,  // 112: channeldb.ChannelDB.GetChannelDiffByPts:input_type -> channeldb.ReqGetChannelDiffByPts
	24,  // 113: channeldb.ChannelDB.GetChannelLastPtsHandle:input_type -> channeldb.ReqGetChannelLastPtsHandle
	26,  // 114: channeldb.ChannelDB.DeleteChannelPtsHandle:input_type -> channeldb.ReqDeleteChannelPtsHandle
	28,  // 115: channeldb.ChannelDB.InsertOrUpdateChannelMsg:input_type -> channeldb.ReqInsertOrUpdateChannelMsg
	29,  // 116: channeldb.ChannelDB.UpdateChannelMsg:input_type -> channeldb.ReqUpdateChannelMsg
	30,  // 117: channeldb.ChannelDB.BatchInsertOrUpdateChannelMsg:input_type -> channeldb.ReqBatchInsertOrUpdateChannelMsg
	31,  // 118: channeldb.ChannelDB.DeleteMsgs:input_type -> channeldb.ReqDeleteMsgs
	33,  // 119: channeldb.ChannelDB.DeleteUserHistory:input_type -> channeldb.ReqDeleteUserHistory
	35,  // 120: channeldb.ChannelDB.DeleteChannelMsg:input_type -> channeldb.ReqDeleteChannelMsg
	36,  // 121: channeldb.ChannelDB.DeleteChannelMessage:input_type -> channeldb.ReqDeleteChannelMessage
	38,  // 122: channeldb.ChannelDB.GetChannelMessage:input_type -> channeldb.ReqGetChannelMessage
	40,  // 123: channeldb.ChannelDB.GetChannelMsgsByMsgIds:input_type -> channeldb.ReqGetChannelMsgsByMsgIds
	42,  // 124: channeldb.ChannelDB.GetChannelMsgHistory:input_type -> channeldb.ReqGetChannelMsgHistory
	44,  // 125: channeldb.ChannelDB.GetChannelTopMsg:input_type -> channeldb.ReqGetChannelTopMst
	45,  // 126: channeldb.ChannelDB.GetChannelTopMsg2:input_type -> channeldb.ReqGetChannelTopMst2
	48,  // 127: channeldb.ChannelDB.GetChannelMediaMessageHistoryByMedia:input_type -> channeldb.ReqGetChannelMediaMessageHistoryByMedia
	51,  // 128: channeldb.ChannelDB.InsertOrUpdateChannelMessageDeleteMark:input_type -> channeldb.ReqInsertOrUpdateChannelMessageDeleteMark
	53,  // 129: channeldb.ChannelDB.GetChannelMessageDeleteMark:input_type -> channeldb.ReqGetChannelMessageDeleteMark
	56,  // 130: channeldb.ChannelDB.GetChannelMediaMessageStatisticsByMedia:input_type -> channeldb.ReqGetChannelMediaMessageStatisticsByMedia
	59,  // 131: channeldb.ChannelDB.StoreAdminLog:input_type -> channeldb.ReqStoreAdminLog
	60,  // 132: channeldb.ChannelDB.FindsAdminLogByChannelId:input_type -> channeldb.ReqFindsAdminLogByChannelId
	62,  // 133: channeldb.ChannelDB.FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId:input_type -> channeldb.ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId
	63,  // 134: channeldb.ChannelDB.FindsAdminLogByChannelIdAndEventFiltersAndUserId:input_type -> channeldb.ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId
	64,  // 135: channeldb.ChannelDB.FindsAdminLogByChannelIdAndUserId:input_type -> channeldb.ReqFindsAdminLogByChannelIdAndUserId
	65,  // 136: channeldb.ChannelDB.FindsAdminLogByChannelIdAndAdminUsersAndEventFilters:input_type -> channeldb.ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters
	66,  // 137: channeldb.ChannelDB.FindsAdminLogByChannelIdAndEventFilters:input_type -> channeldb.ReqFindsAdminLogByChannelIdAndEventFilters
	67,  // 138: channeldb.ChannelDB.FindsAdminLogByChannelIdAndAdminUsers:input_type -> channeldb.ReqFindsAdminLogByChannelIdAndAdminUsers
	68,  // 139: channeldb.ChannelDB.ChannelMessageAtAdd:input_type -> channeldb.ReqChannelMessageAtAdd
	70,  // 140: channeldb.ChannelDB.ChannelMessageAtGet:input_type -> channeldb.ReqChannelMessageAtGet
	72,  // 141: channeldb.ChannelDB.ChannelMessageAtDel:input_type -> channeldb.ReqChannelMessageAtDel
	81,  // 142: channeldb.ChannelDB.SearchMessage:input_type -> channeldb.ReqSearchChannelMsg
	90,  // 143: channeldb.ChannelDB.UpdateChannelDialog:input_type -> channeldb.ReqUpdateChannelDialog
	91,  // 144: channeldb.ChannelDB.GetChannelDialogs:input_type -> channeldb.ReqGetChannelDialogs
	93,  // 145: channeldb.ChannelDB.GetChannelMessageByChannelIdRandomId:input_type -> channeldb.ReqGetChannelMessageByChannelIdRandomId
	9,   // 146: channeldb.ChannelDB.HeartBeating:output_type -> channeldb.ReplyHeartBeating
	11,  // 147: channeldb.ChannelDB.UpdateChannelMsgIdAndPts:output_type -> channeldb.ReplyUpdateChannelMsgIdAndPts
	13,  // 148: channeldb.ChannelDB.SetChannelMsgIdAndPts:output_type -> channeldb.ReplySetChannelMsgIdAndPts
	15,  // 149: channeldb.ChannelDB.UpdateChannelPts:output_type -> channeldb.ReplyUpdateChannelPts
	17,  // 150: channeldb.ChannelDB.UpdateChannelPtsWithNum:output_type -> channeldb.ReplyUpdateChannelPtsWithNum
	19,  // 151: channeldb.ChannelDB.GetChannelMsgId:output_type -> channeldb.ReplyGetChannelMsgId
	84,  // 152: channeldb.ChannelDB.IncreaseChannelId:output_type -> channeldb.ReplyIncreaseChannelId
	86,  // 153: channeldb.ChannelDB.GetChannelIncreaseId:output_type -> channeldb.ReplyGetChannelIncreaseId
	88,  // 154: channeldb.ChannelDB.GetChannelIncreaseIds:output_type -> channeldb.ReplyGetChannelIncreaseIds
	7,   // 155: channeldb.ChannelDB.StoreChannelPtsHandle:output_type -> channeldb.ReplyErr
	7,   // 156: channeldb.ChannelDB.BatchStoreChannelPtsHandle:output_type -> channeldb.ReplyErr
	23,  // 157: channeldb.ChannelDB.GetChannelDiffByPts:output_type -> channeldb.ReplyGetChannelDiffByPts
	25,  // 158: channeldb.ChannelDB.GetChannelLastPtsHandle:output_type -> channeldb.ReplyGetChannelLastPtsHandle
	27,  // 159: channeldb.ChannelDB.DeleteChannelPtsHandle:output_type -> channeldb.ReplyDeleteChannelPtsHandle
	7,   // 160: channeldb.ChannelDB.InsertOrUpdateChannelMsg:output_type -> channeldb.ReplyErr
	7,   // 161: channeldb.ChannelDB.UpdateChannelMsg:output_type -> channeldb.ReplyErr
	7,   // 162: channeldb.ChannelDB.BatchInsertOrUpdateChannelMsg:output_type -> channeldb.ReplyErr
	32,  // 163: channeldb.ChannelDB.DeleteMsgs:output_type -> channeldb.ReplyDeleteMsgs
	34,  // 164: channeldb.ChannelDB.DeleteUserHistory:output_type -> channeldb.ReplyDeleteUserHistory
	7,   // 165: channeldb.ChannelDB.DeleteChannelMsg:output_type -> channeldb.ReplyErr
	37,  // 166: channeldb.ChannelDB.DeleteChannelMessage:output_type -> channeldb.ReplyDeleteChannelMessage
	39,  // 167: channeldb.ChannelDB.GetChannelMessage:output_type -> channeldb.ReplyGetChannelMessage
	41,  // 168: channeldb.ChannelDB.GetChannelMsgsByMsgIds:output_type -> channeldb.ReplyGetChannelMsgsByMsgIds
	43,  // 169: channeldb.ChannelDB.GetChannelMsgHistory:output_type -> channeldb.ReplyGetChannelMsgHistory
	46,  // 170: channeldb.ChannelDB.GetChannelTopMsg:output_type -> channeldb.ReplyGetChannelTopMst
	46,  // 171: channeldb.ChannelDB.GetChannelTopMsg2:output_type -> channeldb.ReplyGetChannelTopMst
	49,  // 172: channeldb.ChannelDB.GetChannelMediaMessageHistoryByMedia:output_type -> channeldb.ReplyGetChannelMediaMessageHistoryByMedia
	52,  // 173: channeldb.ChannelDB.InsertOrUpdateChannelMessageDeleteMark:output_type -> channeldb.ReplyInsertOrUpdateChannelMessageDeleteMark
	54,  // 174: channeldb.ChannelDB.GetChannelMessageDeleteMark:output_type -> channeldb.ReplyGetChannelMessageDeleteMark
	57,  // 175: channeldb.ChannelDB.GetChannelMediaMessageStatisticsByMedia:output_type -> channeldb.ReplyGetChannelMediaMessageStatisticsByMedia
	7,   // 176: channeldb.ChannelDB.StoreAdminLog:output_type -> channeldb.ReplyErr
	61,  // 177: channeldb.ChannelDB.FindsAdminLogByChannelId:output_type -> channeldb.ReplyFindsAdminLog
	61,  // 178: channeldb.ChannelDB.FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId:output_type -> channeldb.ReplyFindsAdminLog
	61,  // 179: channeldb.ChannelDB.FindsAdminLogByChannelIdAndEventFiltersAndUserId:output_type -> channeldb.ReplyFindsAdminLog
	61,  // 180: channeldb.ChannelDB.FindsAdminLogByChannelIdAndUserId:output_type -> channeldb.ReplyFindsAdminLog
	61,  // 181: channeldb.ChannelDB.FindsAdminLogByChannelIdAndAdminUsersAndEventFilters:output_type -> channeldb.ReplyFindsAdminLog
	61,  // 182: channeldb.ChannelDB.FindsAdminLogByChannelIdAndEventFilters:output_type -> channeldb.ReplyFindsAdminLog
	61,  // 183: channeldb.ChannelDB.FindsAdminLogByChannelIdAndAdminUsers:output_type -> channeldb.ReplyFindsAdminLog
	69,  // 184: channeldb.ChannelDB.ChannelMessageAtAdd:output_type -> channeldb.ReplyChannelMessageAtAdd
	71,  // 185: channeldb.ChannelDB.ChannelMessageAtGet:output_type -> channeldb.ReplyChannelMessageAtGet
	73,  // 186: channeldb.ChannelDB.ChannelMessageAtDel:output_type -> channeldb.ReplyChannelMessageAtDel
	82,  // 187: channeldb.ChannelDB.SearchMessage:output_type -> channeldb.ReplySearchChannelMsg
	7,   // 188: channeldb.ChannelDB.UpdateChannelDialog:output_type -> channeldb.ReplyErr
	92,  // 189: channeldb.ChannelDB.GetChannelDialogs:output_type -> channeldb.ReplyGetChannelDialogs
	94,  // 190: channeldb.ChannelDB.GetChannelMessageByChannelIdRandomId:output_type -> channeldb.ReplyGetChannelMessageByChannelIdRandomId
	146, // [146:191] is the sub-list for method output_type
	101, // [101:146] is the sub-list for method input_type
	101, // [101:101] is the sub-list for extension type_name
	101, // [101:101] is the sub-list for extension extendee
	0,   // [0:101] is the sub-list for field type_name
}

func init() { file_channeldb_proto_init() }
func file_channeldb_proto_init() {
	if File_channeldb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_channeldb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMsgListAndPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgsAndMaxId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyErr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqHeartBeating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyHeartBeating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateChannelMsgIdAndPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUpdateChannelMsgIdAndPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSetChannelMsgIdAndPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplySetChannelMsgIdAndPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateChannelPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUpdateChannelPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateChannelPtsWithNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUpdateChannelPtsWithNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelMsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStoreChannelPtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBatchStoreChannelPtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelDiffByPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelDiffByPts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelLastPtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelLastPtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteChannelPtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDeleteChannelPtsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqInsertOrUpdateChannelMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateChannelMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBatchInsertOrUpdateChannelMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteMsgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDeleteMsgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteUserHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDeleteUserHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteChannelMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDeleteChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMsgsByMsgIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelMsgsByMsgIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMsgHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelMsgHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelTopMst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelTopMst2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelTopMst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelMediaMessageHistoryByMediaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMediaMessageHistoryByMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelMediaMessageHistoryByMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMessageDeleteMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqInsertOrUpdateChannelMessageDeleteMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyInsertOrUpdateChannelMessageDeleteMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMessageDeleteMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelMessageDeleteMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMediaMessageStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMediaMessageStatisticsByMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelMediaMessageStatisticsByMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelAdminLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStoreAdminLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFindsAdminLogByChannelId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyFindsAdminLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFindsAdminLogByChannelIdAndUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFindsAdminLogByChannelIdAndEventFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFindsAdminLogByChannelIdAndAdminUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqChannelMessageAtAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChannelMessageAtAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqChannelMessageAtGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChannelMessageAtGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqChannelMessageAtDel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyChannelMessageAtDel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelLocalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqIncreaseChannelLocalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyIncreaseChannelLocalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetCurrentChannelLocalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetCurrentChannelLocalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForWardUserMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMessageAt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSearchChannelMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplySearchChannelMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqIncreaseChannelId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyIncreaseChannelId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelIncreaseId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelIncreaseId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelIncreaseIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelIncreaseIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateChannelDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelDialogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelDialogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetChannelMessageByChannelIdRandomId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeldb_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGetChannelMessageByChannelIdRandomId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_channeldb_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   93,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_channeldb_proto_goTypes,
		DependencyIndexes: file_channeldb_proto_depIdxs,
		EnumInfos:         file_channeldb_proto_enumTypes,
		MessageInfos:      file_channeldb_proto_msgTypes,
	}.Build()
	File_channeldb_proto = out.File
	file_channeldb_proto_rawDesc = nil
	file_channeldb_proto_goTypes = nil
	file_channeldb_proto_depIdxs = nil
}
