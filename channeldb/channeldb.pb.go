// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitlab.chatserver.im/interfaceprobuf/channeldb/channeldb.proto

/*
Package channeldb is a generated protocol buffer package.

It is generated from these files:

	gitlab.chatserver.im/interfaceprobuf/channeldb/channeldb.proto

It has these top-level messages:

	ReplyNull
	ChannelMsgId
	ChannelPtsHandle
	UserMsgListAndPts
	MsgsAndMaxId
	ReplyErr
	ReqHeartBeating
	ReplyHeartBeating
	ReqUpdateChannelMsgIdAndPts
	ReplyUpdateChannelMsgIdAndPts
	ReqSetChannelMsgIdAndPts
	ReplySetChannelMsgIdAndPts
	ReqUpdateChannelPts
	ReplyUpdateChannelPts
	ReqUpdateChannelPtsWithNum
	ReplyUpdateChannelPtsWithNum
	ReqGetChannelMsgId
	ReplyGetChannelMsgId
	ReqStoreChannelPtsHandle
	ReqBatchStoreChannelPtsHandle
	ReqGetChannelDiffByPts
	ReplyGetChannelDiffByPts
	ReqGetChannelLastPtsHandle
	ReplyGetChannelLastPtsHandle
	ReqDeleteChannelPtsHandle
	ReplyDeleteChannelPtsHandle
	ReqInsertOrUpdateChannelMsg
	ReqUpdateChannelMsg
	ReqBatchInsertOrUpdateChannelMsg
	ReqDeleteMsgs
	ReplyDeleteMsgs
	ReqDeleteUserHistory
	ReplyDeleteUserHistory
	ReqDeleteChannelMsg
	ReqDeleteChannelMessage
	ReplyDeleteChannelMessage
	ReqGetChannelMessage
	ReplyGetChannelMessage
	ReqGetChannelMsgsByMsgIds
	ReplyGetChannelMsgsByMsgIds
	ReqGetChannelMsgHistory
	ReplyGetChannelMsgHistory
	ReqGetChannelTopMst
	ReqGetChannelTopMst2
	ReplyGetChannelTopMst
	GetChannelMediaMessageHistoryByMediaConfig
	ReqGetChannelMediaMessageHistoryByMedia
	ReplyGetChannelMediaMessageHistoryByMedia
	ChannelMessageDeleteMark
	ReqInsertOrUpdateChannelMessageDeleteMark
	ReplyInsertOrUpdateChannelMessageDeleteMark
	ReqGetChannelMessageDeleteMark
	ReplyGetChannelMessageDeleteMark
	ChannelMediaMessageStatistics
	ReqGetChannelMediaMessageStatisticsByMedia
	ReplyGetChannelMediaMessageStatisticsByMedia
	ChannelAdminLog
	ReqStoreAdminLog
	ReqFindsAdminLogByChannelId
	ReplyFindsAdminLog
	ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId
	ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId
	ReqFindsAdminLogByChannelIdAndUserId
	ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters
	ReqFindsAdminLogByChannelIdAndEventFilters
	ReqFindsAdminLogByChannelIdAndAdminUsers
	ReqChannelMessageAtAdd
	ReplyChannelMessageAtAdd
	ReqChannelMessageAtGet
	ReplyChannelMessageAtGet
	ReqChannelMessageAtDel
	ReplyChannelMessageAtDel
	ChannelLocalId
	ReqIncreaseChannelLocalId
	ReplyIncreaseChannelLocalId
	ReqGetCurrentChannelLocalId
	ReplyGetCurrentChannelLocalId
	ForWardUserMsg
	ChannelMessageAt
	ReqSearchChannelMsg
	ReplySearchChannelMsg
	ReqIncreaseChannelId
	ReplyIncreaseChannelId
	ReqGetChannelIncreaseId
	ReplyGetChannelIncreaseId
	ReqGetChannelIncreaseIds
	ReplyGetChannelIncreaseIds
	ChannelDialog
	ReqUpdateChannelDialog
	ReqGetChannelDialogs
	ReplyGetChannelDialogs
	ReqGetChannelMessageByChannelIdRandomId
	ReplyGetChannelMessageByChannelIdRandomId
*/
package channeldb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pbcomm "gitlab.chatserver.im/interfaceprobuf/pbcomm"
import pbcomm1 "gitlab.chatserver.im/interfaceprobuf/pbcomm"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type USER_MSG int32

const (
	USER_MSG_UN_ENCRY USER_MSG = 0
	USER_MSG_ENCRY    USER_MSG = 1
)

var USER_MSG_name = map[int32]string{
	0: "UN_ENCRY",
	1: "ENCRY",
}
var USER_MSG_value = map[string]int32{
	"UN_ENCRY": 0,
	"ENCRY":    1,
}

func (x USER_MSG) String() string {
	return proto.EnumName(USER_MSG_name, int32(x))
}
func (USER_MSG) EnumDescriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{0} }

type HeartBeating int32

const (
	HeartBeating_RpcExcept      HeartBeating = 0
	HeartBeating_PackageType    HeartBeating = 1
	HeartBeating_Identification HeartBeating = 2
	HeartBeating_ResultSuccess  HeartBeating = 3
)

var HeartBeating_name = map[int32]string{
	0: "RpcExcept",
	1: "PackageType",
	2: "Identification",
	3: "ResultSuccess",
}
var HeartBeating_value = map[string]int32{
	"RpcExcept":      0,
	"PackageType":    1,
	"Identification": 2,
	"ResultSuccess":  3,
}

func (x HeartBeating) String() string {
	return proto.EnumName(HeartBeating_name, int32(x))
}
func (HeartBeating) EnumDescriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{1} }

// 返回空结构体
type ReplyNull struct {
}

func (m *ReplyNull) Reset()                    { *m = ReplyNull{} }
func (m *ReplyNull) String() string            { return proto.CompactTextString(m) }
func (*ReplyNull) ProtoMessage()               {}
func (*ReplyNull) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{0} }

type ChannelMsgId struct {
	Id        int32 `protobuf:"varint,1,opt,name=Id,json=id,proto3" json:"Id,omitempty"`
	ChannelId int32 `protobuf:"varint,2,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	MsgId     int32 `protobuf:"varint,3,opt,name=MsgId,json=msgId,proto3" json:"MsgId,omitempty"`
	Pts       int32 `protobuf:"varint,4,opt,name=Pts,json=pts,proto3" json:"Pts,omitempty"`
	LastDate  int32 `protobuf:"varint,5,opt,name=LastDate,json=lastDate,proto3" json:"LastDate,omitempty"`
}

func (m *ChannelMsgId) Reset()                    { *m = ChannelMsgId{} }
func (m *ChannelMsgId) String() string            { return proto.CompactTextString(m) }
func (*ChannelMsgId) ProtoMessage()               {}
func (*ChannelMsgId) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{1} }

func (m *ChannelMsgId) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChannelMsgId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelMsgId) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ChannelMsgId) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ChannelMsgId) GetLastDate() int32 {
	if m != nil {
		return m.LastDate
	}
	return 0
}

type ChannelPtsHandle struct {
	ChannelId int32   `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	UserIds   []int32 `protobuf:"varint,2,rep,packed,name=UserIds,json=userIds" json:"UserIds,omitempty"`
	Pts       int32   `protobuf:"varint,3,opt,name=Pts,json=pts,proto3" json:"Pts,omitempty"`
	Msg       []byte  `protobuf:"bytes,4,opt,name=Msg,json=msg,proto3" json:"Msg,omitempty"`
	Date      int64   `protobuf:"varint,5,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *ChannelPtsHandle) Reset()                    { *m = ChannelPtsHandle{} }
func (m *ChannelPtsHandle) String() string            { return proto.CompactTextString(m) }
func (*ChannelPtsHandle) ProtoMessage()               {}
func (*ChannelPtsHandle) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{2} }

func (m *ChannelPtsHandle) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelPtsHandle) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *ChannelPtsHandle) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ChannelPtsHandle) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *ChannelPtsHandle) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

type UserMsgListAndPts struct {
	UserMsgs []*pbcomm1.UserMsg `protobuf:"bytes,1,rep,name=UserMsgs,json=userMsgs" json:"UserMsgs,omitempty"`
	Pts      int32              `protobuf:"varint,2,opt,name=Pts,json=pts,proto3" json:"Pts,omitempty"`
	Count    int32              `protobuf:"varint,3,opt,name=Count,json=count,proto3" json:"Count,omitempty"`
}

func (m *UserMsgListAndPts) Reset()                    { *m = UserMsgListAndPts{} }
func (m *UserMsgListAndPts) String() string            { return proto.CompactTextString(m) }
func (*UserMsgListAndPts) ProtoMessage()               {}
func (*UserMsgListAndPts) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{3} }

func (m *UserMsgListAndPts) GetUserMsgs() []*pbcomm1.UserMsg {
	if m != nil {
		return m.UserMsgs
	}
	return nil
}

func (m *UserMsgListAndPts) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *UserMsgListAndPts) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type MsgsAndMaxId struct {
	MaxMsgId int32   `protobuf:"varint,1,opt,name=MaxMsgId,json=maxMsgId,proto3" json:"MaxMsgId,omitempty"`
	Msgs     []int32 `protobuf:"varint,2,rep,packed,name=Msgs,json=msgs" json:"Msgs,omitempty"`
}

func (m *MsgsAndMaxId) Reset()                    { *m = MsgsAndMaxId{} }
func (m *MsgsAndMaxId) String() string            { return proto.CompactTextString(m) }
func (*MsgsAndMaxId) ProtoMessage()               {}
func (*MsgsAndMaxId) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{4} }

func (m *MsgsAndMaxId) GetMaxMsgId() int32 {
	if m != nil {
		return m.MaxMsgId
	}
	return 0
}

func (m *MsgsAndMaxId) GetMsgs() []int32 {
	if m != nil {
		return m.Msgs
	}
	return nil
}

type ReplyErr struct {
	ErrCode uint32 `protobuf:"varint,1,opt,name=ErrCode,json=errCode,proto3" json:"ErrCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg,proto3" json:"ErrMsg,omitempty"`
}

func (m *ReplyErr) Reset()                    { *m = ReplyErr{} }
func (m *ReplyErr) String() string            { return proto.CompactTextString(m) }
func (*ReplyErr) ProtoMessage()               {}
func (*ReplyErr) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{5} }

func (m *ReplyErr) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ReplyErr) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type ReqHeartBeating struct {
	Type           HeartBeating `protobuf:"varint,1,opt,name=Type,json=type,proto3,enum=channeldb.HeartBeating" json:"Type,omitempty"`
	Identification HeartBeating `protobuf:"varint,2,opt,name=Identification,json=identification,proto3,enum=channeldb.HeartBeating" json:"Identification,omitempty"`
}

func (m *ReqHeartBeating) Reset()                    { *m = ReqHeartBeating{} }
func (m *ReqHeartBeating) String() string            { return proto.CompactTextString(m) }
func (*ReqHeartBeating) ProtoMessage()               {}
func (*ReqHeartBeating) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{6} }

func (m *ReqHeartBeating) GetType() HeartBeating {
	if m != nil {
		return m.Type
	}
	return HeartBeating_RpcExcept
}

func (m *ReqHeartBeating) GetIdentification() HeartBeating {
	if m != nil {
		return m.Identification
	}
	return HeartBeating_RpcExcept
}

type ReplyHeartBeating struct {
	Type   HeartBeating `protobuf:"varint,1,opt,name=Type,json=type,proto3,enum=channeldb.HeartBeating" json:"Type,omitempty"`
	Result HeartBeating `protobuf:"varint,2,opt,name=Result,json=result,proto3,enum=channeldb.HeartBeating" json:"Result,omitempty"`
}

func (m *ReplyHeartBeating) Reset()                    { *m = ReplyHeartBeating{} }
func (m *ReplyHeartBeating) String() string            { return proto.CompactTextString(m) }
func (*ReplyHeartBeating) ProtoMessage()               {}
func (*ReplyHeartBeating) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{7} }

func (m *ReplyHeartBeating) GetType() HeartBeating {
	if m != nil {
		return m.Type
	}
	return HeartBeating_RpcExcept
}

func (m *ReplyHeartBeating) GetResult() HeartBeating {
	if m != nil {
		return m.Result
	}
	return HeartBeating_RpcExcept
}

type ReqUpdateChannelMsgIdAndPts struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateChannelMsgIdAndPts) Reset()         { *m = ReqUpdateChannelMsgIdAndPts{} }
func (m *ReqUpdateChannelMsgIdAndPts) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateChannelMsgIdAndPts) ProtoMessage()    {}
func (*ReqUpdateChannelMsgIdAndPts) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{8}
}

func (m *ReqUpdateChannelMsgIdAndPts) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqUpdateChannelMsgIdAndPts) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUpdateChannelMsgIdAndPts struct {
	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId,json=channelMsgId" json:"ChannelMsgId,omitempty"`
	ReplyErr     *ReplyErr     `protobuf:"bytes,2,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyUpdateChannelMsgIdAndPts) Reset()         { *m = ReplyUpdateChannelMsgIdAndPts{} }
func (m *ReplyUpdateChannelMsgIdAndPts) String() string { return proto.CompactTextString(m) }
func (*ReplyUpdateChannelMsgIdAndPts) ProtoMessage()    {}
func (*ReplyUpdateChannelMsgIdAndPts) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{9}
}

func (m *ReplyUpdateChannelMsgIdAndPts) GetChannelMsgId() *ChannelMsgId {
	if m != nil {
		return m.ChannelMsgId
	}
	return nil
}

func (m *ReplyUpdateChannelMsgIdAndPts) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqSetChannelMsgIdAndPts struct {
	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId,json=channelMsgId" json:"ChannelMsgId,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqSetChannelMsgIdAndPts) Reset()         { *m = ReqSetChannelMsgIdAndPts{} }
func (m *ReqSetChannelMsgIdAndPts) String() string { return proto.CompactTextString(m) }
func (*ReqSetChannelMsgIdAndPts) ProtoMessage()    {}
func (*ReqSetChannelMsgIdAndPts) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{10}
}

func (m *ReqSetChannelMsgIdAndPts) GetChannelMsgId() *ChannelMsgId {
	if m != nil {
		return m.ChannelMsgId
	}
	return nil
}

func (m *ReqSetChannelMsgIdAndPts) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplySetChannelMsgIdAndPts struct {
	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplySetChannelMsgIdAndPts) Reset()         { *m = ReplySetChannelMsgIdAndPts{} }
func (m *ReplySetChannelMsgIdAndPts) String() string { return proto.CompactTextString(m) }
func (*ReplySetChannelMsgIdAndPts) ProtoMessage()    {}
func (*ReplySetChannelMsgIdAndPts) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{11}
}

func (m *ReplySetChannelMsgIdAndPts) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqUpdateChannelPts struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateChannelPts) Reset()                    { *m = ReqUpdateChannelPts{} }
func (m *ReqUpdateChannelPts) String() string            { return proto.CompactTextString(m) }
func (*ReqUpdateChannelPts) ProtoMessage()               {}
func (*ReqUpdateChannelPts) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{12} }

func (m *ReqUpdateChannelPts) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqUpdateChannelPts) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUpdateChannelPts struct {
	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId,json=channelMsgId" json:"ChannelMsgId,omitempty"`
	ReplyErr     *ReplyErr     `protobuf:"bytes,2,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyUpdateChannelPts) Reset()                    { *m = ReplyUpdateChannelPts{} }
func (m *ReplyUpdateChannelPts) String() string            { return proto.CompactTextString(m) }
func (*ReplyUpdateChannelPts) ProtoMessage()               {}
func (*ReplyUpdateChannelPts) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{13} }

func (m *ReplyUpdateChannelPts) GetChannelMsgId() *ChannelMsgId {
	if m != nil {
		return m.ChannelMsgId
	}
	return nil
}

func (m *ReplyUpdateChannelPts) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqUpdateChannelPtsWithNum struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	Number    int32         `protobuf:"varint,2,opt,name=Number,json=number,proto3" json:"Number,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateChannelPtsWithNum) Reset()         { *m = ReqUpdateChannelPtsWithNum{} }
func (m *ReqUpdateChannelPtsWithNum) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateChannelPtsWithNum) ProtoMessage()    {}
func (*ReqUpdateChannelPtsWithNum) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{14}
}

func (m *ReqUpdateChannelPtsWithNum) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqUpdateChannelPtsWithNum) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ReqUpdateChannelPtsWithNum) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyUpdateChannelPtsWithNum struct {
	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId,json=channelMsgId" json:"ChannelMsgId,omitempty"`
	ReplyErr     *ReplyErr     `protobuf:"bytes,2,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyUpdateChannelPtsWithNum) Reset()         { *m = ReplyUpdateChannelPtsWithNum{} }
func (m *ReplyUpdateChannelPtsWithNum) String() string { return proto.CompactTextString(m) }
func (*ReplyUpdateChannelPtsWithNum) ProtoMessage()    {}
func (*ReplyUpdateChannelPtsWithNum) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{15}
}

func (m *ReplyUpdateChannelPtsWithNum) GetChannelMsgId() *ChannelMsgId {
	if m != nil {
		return m.ChannelMsgId
	}
	return nil
}

func (m *ReplyUpdateChannelPtsWithNum) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetChannelMsgId struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelMsgId) Reset()                    { *m = ReqGetChannelMsgId{} }
func (m *ReqGetChannelMsgId) String() string            { return proto.CompactTextString(m) }
func (*ReqGetChannelMsgId) ProtoMessage()               {}
func (*ReqGetChannelMsgId) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{16} }

func (m *ReqGetChannelMsgId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelMsgId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelMsgId struct {
	ChannelMsgId *ChannelMsgId `protobuf:"bytes,1,opt,name=ChannelMsgId,json=channelMsgId" json:"ChannelMsgId,omitempty"`
	ReplyErr     *ReplyErr     `protobuf:"bytes,2,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelMsgId) Reset()                    { *m = ReplyGetChannelMsgId{} }
func (m *ReplyGetChannelMsgId) String() string            { return proto.CompactTextString(m) }
func (*ReplyGetChannelMsgId) ProtoMessage()               {}
func (*ReplyGetChannelMsgId) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{17} }

func (m *ReplyGetChannelMsgId) GetChannelMsgId() *ChannelMsgId {
	if m != nil {
		return m.ChannelMsgId
	}
	return nil
}

func (m *ReplyGetChannelMsgId) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqStoreChannelPtsHandle struct {
	ChannelPtsHandle *ChannelPtsHandle `protobuf:"bytes,1,opt,name=ChannelPtsHandle,json=channelPtsHandle" json:"ChannelPtsHandle,omitempty"`
	Debug            *pbcomm.Debug     `protobuf:"bytes,2,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqStoreChannelPtsHandle) Reset()         { *m = ReqStoreChannelPtsHandle{} }
func (m *ReqStoreChannelPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReqStoreChannelPtsHandle) ProtoMessage()    {}
func (*ReqStoreChannelPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{18}
}

func (m *ReqStoreChannelPtsHandle) GetChannelPtsHandle() *ChannelPtsHandle {
	if m != nil {
		return m.ChannelPtsHandle
	}
	return nil
}

func (m *ReqStoreChannelPtsHandle) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqBatchStoreChannelPtsHandle struct {
	ChannelPtsHandles []*ChannelPtsHandle `protobuf:"bytes,1,rep,name=ChannelPtsHandles,json=channelPtsHandles" json:"ChannelPtsHandles,omitempty"`
	Debug             *pbcomm.Debug       `protobuf:"bytes,2,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqBatchStoreChannelPtsHandle) Reset()         { *m = ReqBatchStoreChannelPtsHandle{} }
func (m *ReqBatchStoreChannelPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReqBatchStoreChannelPtsHandle) ProtoMessage()    {}
func (*ReqBatchStoreChannelPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{19}
}

func (m *ReqBatchStoreChannelPtsHandle) GetChannelPtsHandles() []*ChannelPtsHandle {
	if m != nil {
		return m.ChannelPtsHandles
	}
	return nil
}

func (m *ReqBatchStoreChannelPtsHandle) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetChannelDiffByPts struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	Pts       int32         `protobuf:"varint,2,opt,name=Pts,json=pts,proto3" json:"Pts,omitempty"`
	Limit     int32         `protobuf:"varint,3,opt,name=Limit,json=limit,proto3" json:"Limit,omitempty"`
	MinId     int32         `protobuf:"varint,4,opt,name=MinId,json=minId,proto3" json:"MinId,omitempty"`
	MaxId     int32         `protobuf:"varint,5,opt,name=MaxId,json=maxId,proto3" json:"MaxId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelDiffByPts) Reset()         { *m = ReqGetChannelDiffByPts{} }
func (m *ReqGetChannelDiffByPts) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelDiffByPts) ProtoMessage()    {}
func (*ReqGetChannelDiffByPts) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{20}
}

func (m *ReqGetChannelDiffByPts) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelDiffByPts) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReqGetChannelDiffByPts) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetChannelDiffByPts) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *ReqGetChannelDiffByPts) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ReqGetChannelDiffByPts) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelDiffByPts struct {
	IsFianl  bool      `protobuf:"varint,1,opt,name=IsFianl,json=isFianl,proto3" json:"IsFianl,omitempty"`
	ToLong   bool      `protobuf:"varint,2,opt,name=ToLong,json=toLong,proto3" json:"ToLong,omitempty"`
	Pts      int32     `protobuf:"varint,3,opt,name=Pts,json=pts,proto3" json:"Pts,omitempty"`
	TopMsgId int32     `protobuf:"varint,4,opt,name=TopMsgId,json=topMsgId,proto3" json:"TopMsgId,omitempty"`
	Msgs     [][]byte  `protobuf:"bytes,5,rep,name=Msgs,json=msgs" json:"Msgs,omitempty"`
	ReplyErr *ReplyErr `protobuf:"bytes,6,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelDiffByPts) Reset()         { *m = ReplyGetChannelDiffByPts{} }
func (m *ReplyGetChannelDiffByPts) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelDiffByPts) ProtoMessage()    {}
func (*ReplyGetChannelDiffByPts) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{21}
}

func (m *ReplyGetChannelDiffByPts) GetIsFianl() bool {
	if m != nil {
		return m.IsFianl
	}
	return false
}

func (m *ReplyGetChannelDiffByPts) GetToLong() bool {
	if m != nil {
		return m.ToLong
	}
	return false
}

func (m *ReplyGetChannelDiffByPts) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReplyGetChannelDiffByPts) GetTopMsgId() int32 {
	if m != nil {
		return m.TopMsgId
	}
	return 0
}

func (m *ReplyGetChannelDiffByPts) GetMsgs() [][]byte {
	if m != nil {
		return m.Msgs
	}
	return nil
}

func (m *ReplyGetChannelDiffByPts) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetChannelLastPtsHandle struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelLastPtsHandle) Reset()         { *m = ReqGetChannelLastPtsHandle{} }
func (m *ReqGetChannelLastPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelLastPtsHandle) ProtoMessage()    {}
func (*ReqGetChannelLastPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{22}
}

func (m *ReqGetChannelLastPtsHandle) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelLastPtsHandle) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelLastPtsHandle struct {
	ChannelPtsHandle *ChannelPtsHandle `protobuf:"bytes,1,opt,name=ChannelPtsHandle,json=channelPtsHandle" json:"ChannelPtsHandle,omitempty"`
	ReplyErr         *ReplyErr         `protobuf:"bytes,2,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelLastPtsHandle) Reset()         { *m = ReplyGetChannelLastPtsHandle{} }
func (m *ReplyGetChannelLastPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelLastPtsHandle) ProtoMessage()    {}
func (*ReplyGetChannelLastPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{23}
}

func (m *ReplyGetChannelLastPtsHandle) GetChannelPtsHandle() *ChannelPtsHandle {
	if m != nil {
		return m.ChannelPtsHandle
	}
	return nil
}

func (m *ReplyGetChannelLastPtsHandle) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqDeleteChannelPtsHandle struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	Pts       int32         `protobuf:"varint,2,opt,name=Pts,json=pts,proto3" json:"Pts,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqDeleteChannelPtsHandle) Reset()         { *m = ReqDeleteChannelPtsHandle{} }
func (m *ReqDeleteChannelPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteChannelPtsHandle) ProtoMessage()    {}
func (*ReqDeleteChannelPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{24}
}

func (m *ReqDeleteChannelPtsHandle) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqDeleteChannelPtsHandle) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReqDeleteChannelPtsHandle) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyDeleteChannelPtsHandle struct {
	ReplyErr *ReplyErr `protobuf:"bytes,2,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyDeleteChannelPtsHandle) Reset()         { *m = ReplyDeleteChannelPtsHandle{} }
func (m *ReplyDeleteChannelPtsHandle) String() string { return proto.CompactTextString(m) }
func (*ReplyDeleteChannelPtsHandle) ProtoMessage()    {}
func (*ReplyDeleteChannelPtsHandle) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{25}
}

func (m *ReplyDeleteChannelPtsHandle) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqInsertOrUpdateChannelMsg struct {
	UserMsg *pbcomm1.UserMsg `protobuf:"bytes,1,opt,name=UserMsg,json=userMsg" json:"UserMsg,omitempty"`
	Debug   *pbcomm.Debug    `protobuf:"bytes,2,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqInsertOrUpdateChannelMsg) Reset()         { *m = ReqInsertOrUpdateChannelMsg{} }
func (m *ReqInsertOrUpdateChannelMsg) String() string { return proto.CompactTextString(m) }
func (*ReqInsertOrUpdateChannelMsg) ProtoMessage()    {}
func (*ReqInsertOrUpdateChannelMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{26}
}

func (m *ReqInsertOrUpdateChannelMsg) GetUserMsg() *pbcomm1.UserMsg {
	if m != nil {
		return m.UserMsg
	}
	return nil
}

func (m *ReqInsertOrUpdateChannelMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqUpdateChannelMsg struct {
	UserMsg *pbcomm1.UserMsg `protobuf:"bytes,1,opt,name=UserMsg,json=userMsg" json:"UserMsg,omitempty"`
	Debug   *pbcomm.Debug    `protobuf:"bytes,2,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqUpdateChannelMsg) Reset()                    { *m = ReqUpdateChannelMsg{} }
func (m *ReqUpdateChannelMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqUpdateChannelMsg) ProtoMessage()               {}
func (*ReqUpdateChannelMsg) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{27} }

func (m *ReqUpdateChannelMsg) GetUserMsg() *pbcomm1.UserMsg {
	if m != nil {
		return m.UserMsg
	}
	return nil
}

func (m *ReqUpdateChannelMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqBatchInsertOrUpdateChannelMsg struct {
	UserMsgs []*pbcomm1.UserMsg `protobuf:"bytes,1,rep,name=UserMsgs,json=userMsgs" json:"UserMsgs,omitempty"`
	Debug    *pbcomm.Debug      `protobuf:"bytes,2,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqBatchInsertOrUpdateChannelMsg) Reset()         { *m = ReqBatchInsertOrUpdateChannelMsg{} }
func (m *ReqBatchInsertOrUpdateChannelMsg) String() string { return proto.CompactTextString(m) }
func (*ReqBatchInsertOrUpdateChannelMsg) ProtoMessage()    {}
func (*ReqBatchInsertOrUpdateChannelMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{28}
}

func (m *ReqBatchInsertOrUpdateChannelMsg) GetUserMsgs() []*pbcomm1.UserMsg {
	if m != nil {
		return m.UserMsgs
	}
	return nil
}

func (m *ReqBatchInsertOrUpdateChannelMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqDeleteMsgs struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	MsgIds    []int32       `protobuf:"varint,2,rep,packed,name=MsgIds,json=msgIds" json:"MsgIds,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqDeleteMsgs) Reset()                    { *m = ReqDeleteMsgs{} }
func (m *ReqDeleteMsgs) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteMsgs) ProtoMessage()               {}
func (*ReqDeleteMsgs) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{29} }

func (m *ReqDeleteMsgs) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqDeleteMsgs) GetMsgIds() []int32 {
	if m != nil {
		return m.MsgIds
	}
	return nil
}

func (m *ReqDeleteMsgs) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyDeleteMsgs struct {
	CurentMsgId int32     `protobuf:"varint,1,opt,name=CurentMsgId,json=curentMsgId,proto3" json:"CurentMsgId,omitempty"`
	UpdateDate  int32     `protobuf:"varint,2,opt,name=UpdateDate,json=updateDate,proto3" json:"UpdateDate,omitempty"`
	ReplyErr    *ReplyErr `protobuf:"bytes,3,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyDeleteMsgs) Reset()                    { *m = ReplyDeleteMsgs{} }
func (m *ReplyDeleteMsgs) String() string            { return proto.CompactTextString(m) }
func (*ReplyDeleteMsgs) ProtoMessage()               {}
func (*ReplyDeleteMsgs) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{30} }

func (m *ReplyDeleteMsgs) GetCurentMsgId() int32 {
	if m != nil {
		return m.CurentMsgId
	}
	return 0
}

func (m *ReplyDeleteMsgs) GetUpdateDate() int32 {
	if m != nil {
		return m.UpdateDate
	}
	return 0
}

func (m *ReplyDeleteMsgs) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqDeleteUserHistory struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=UserId,json=userId,proto3" json:"UserId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqDeleteUserHistory) Reset()                    { *m = ReqDeleteUserHistory{} }
func (m *ReqDeleteUserHistory) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteUserHistory) ProtoMessage()               {}
func (*ReqDeleteUserHistory) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{31} }

func (m *ReqDeleteUserHistory) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqDeleteUserHistory) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqDeleteUserHistory) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyDeleteUserHistory struct {
	MsgsAndMaxId *MsgsAndMaxId `protobuf:"bytes,1,opt,name=MsgsAndMaxId,json=msgsAndMaxId" json:"MsgsAndMaxId,omitempty"`
	Ptss         []int32       `protobuf:"varint,2,rep,packed,name=Ptss,json=ptss" json:"Ptss,omitempty"`
	UpdateDate   int32         `protobuf:"varint,3,opt,name=UpdateDate,json=updateDate,proto3" json:"UpdateDate,omitempty"`
	ReplyErr     *ReplyErr     `protobuf:"bytes,4,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyDeleteUserHistory) Reset()         { *m = ReplyDeleteUserHistory{} }
func (m *ReplyDeleteUserHistory) String() string { return proto.CompactTextString(m) }
func (*ReplyDeleteUserHistory) ProtoMessage()    {}
func (*ReplyDeleteUserHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{32}
}

func (m *ReplyDeleteUserHistory) GetMsgsAndMaxId() *MsgsAndMaxId {
	if m != nil {
		return m.MsgsAndMaxId
	}
	return nil
}

func (m *ReplyDeleteUserHistory) GetPtss() []int32 {
	if m != nil {
		return m.Ptss
	}
	return nil
}

func (m *ReplyDeleteUserHistory) GetUpdateDate() int32 {
	if m != nil {
		return m.UpdateDate
	}
	return 0
}

func (m *ReplyDeleteUserHistory) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqDeleteChannelMsg struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqDeleteChannelMsg) Reset()                    { *m = ReqDeleteChannelMsg{} }
func (m *ReqDeleteChannelMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteChannelMsg) ProtoMessage()               {}
func (*ReqDeleteChannelMsg) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{33} }

func (m *ReqDeleteChannelMsg) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqDeleteChannelMsg) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqDeleteChannelMessage struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	MsgId     int32         `protobuf:"varint,2,opt,name=MsgId,json=msgId,proto3" json:"MsgId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqDeleteChannelMessage) Reset()         { *m = ReqDeleteChannelMessage{} }
func (m *ReqDeleteChannelMessage) String() string { return proto.CompactTextString(m) }
func (*ReqDeleteChannelMessage) ProtoMessage()    {}
func (*ReqDeleteChannelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{34}
}

func (m *ReqDeleteChannelMessage) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqDeleteChannelMessage) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqDeleteChannelMessage) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyDeleteChannelMessage struct {
	UserId       int32     `protobuf:"varint,1,opt,name=UserId,json=userId,proto3" json:"UserId,omitempty"`
	CurrentMsgId int32     `protobuf:"varint,2,opt,name=CurrentMsgId,json=currentMsgId,proto3" json:"CurrentMsgId,omitempty"`
	UpdateDate   int32     `protobuf:"varint,3,opt,name=UpdateDate,json=updateDate,proto3" json:"UpdateDate,omitempty"`
	ReplyErr     *ReplyErr `protobuf:"bytes,4,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyDeleteChannelMessage) Reset()         { *m = ReplyDeleteChannelMessage{} }
func (m *ReplyDeleteChannelMessage) String() string { return proto.CompactTextString(m) }
func (*ReplyDeleteChannelMessage) ProtoMessage()    {}
func (*ReplyDeleteChannelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{35}
}

func (m *ReplyDeleteChannelMessage) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReplyDeleteChannelMessage) GetCurrentMsgId() int32 {
	if m != nil {
		return m.CurrentMsgId
	}
	return 0
}

func (m *ReplyDeleteChannelMessage) GetUpdateDate() int32 {
	if m != nil {
		return m.UpdateDate
	}
	return 0
}

func (m *ReplyDeleteChannelMessage) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetChannelMessage struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	MsgId     int32         `protobuf:"varint,2,opt,name=MsgId,json=msgId,proto3" json:"MsgId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelMessage) Reset()                    { *m = ReqGetChannelMessage{} }
func (m *ReqGetChannelMessage) String() string            { return proto.CompactTextString(m) }
func (*ReqGetChannelMessage) ProtoMessage()               {}
func (*ReqGetChannelMessage) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{36} }

func (m *ReqGetChannelMessage) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelMessage) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqGetChannelMessage) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelMessage struct {
	UserMsg  *pbcomm1.UserMsg `protobuf:"bytes,1,opt,name=UserMsg,json=userMsg" json:"UserMsg,omitempty"`
	ReplyErr *ReplyErr        `protobuf:"bytes,2,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelMessage) Reset()         { *m = ReplyGetChannelMessage{} }
func (m *ReplyGetChannelMessage) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelMessage) ProtoMessage()    {}
func (*ReplyGetChannelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{37}
}

func (m *ReplyGetChannelMessage) GetUserMsg() *pbcomm1.UserMsg {
	if m != nil {
		return m.UserMsg
	}
	return nil
}

func (m *ReplyGetChannelMessage) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetChannelMsgsByMsgIds struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	MsgIds    []int32       `protobuf:"varint,2,rep,packed,name=MsgIds,json=msgIds" json:"MsgIds,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelMsgsByMsgIds) Reset()         { *m = ReqGetChannelMsgsByMsgIds{} }
func (m *ReqGetChannelMsgsByMsgIds) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelMsgsByMsgIds) ProtoMessage()    {}
func (*ReqGetChannelMsgsByMsgIds) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{38}
}

func (m *ReqGetChannelMsgsByMsgIds) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelMsgsByMsgIds) GetMsgIds() []int32 {
	if m != nil {
		return m.MsgIds
	}
	return nil
}

func (m *ReqGetChannelMsgsByMsgIds) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelMsgsByMsgIds struct {
	UserMsgListAndPts *UserMsgListAndPts `protobuf:"bytes,1,opt,name=UserMsgListAndPts,json=userMsgListAndPts" json:"UserMsgListAndPts,omitempty"`
	ReplyErr          *ReplyErr          `protobuf:"bytes,2,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelMsgsByMsgIds) Reset()         { *m = ReplyGetChannelMsgsByMsgIds{} }
func (m *ReplyGetChannelMsgsByMsgIds) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelMsgsByMsgIds) ProtoMessage()    {}
func (*ReplyGetChannelMsgsByMsgIds) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{39}
}

func (m *ReplyGetChannelMsgsByMsgIds) GetUserMsgListAndPts() *UserMsgListAndPts {
	if m != nil {
		return m.UserMsgListAndPts
	}
	return nil
}

func (m *ReplyGetChannelMsgsByMsgIds) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetChannelMsgHistory struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	OffsetId   int32         `protobuf:"varint,2,opt,name=OffsetId,json=offsetId,proto3" json:"OffsetId,omitempty"`
	OffsetDate int32         `protobuf:"varint,3,opt,name=OffsetDate,json=offsetDate,proto3" json:"OffsetDate,omitempty"`
	AddOffset  int32         `protobuf:"varint,4,opt,name=AddOffset,json=addOffset,proto3" json:"AddOffset,omitempty"`
	MinId      int32         `protobuf:"varint,5,opt,name=MinId,json=minId,proto3" json:"MinId,omitempty"`
	MaxId      int32         `protobuf:"varint,6,opt,name=MaxId,json=maxId,proto3" json:"MaxId,omitempty"`
	Limit      int32         `protobuf:"varint,7,opt,name=Limit,json=limit,proto3" json:"Limit,omitempty"`
	Encry      int32         `protobuf:"varint,8,opt,name=Encry,json=encry,proto3" json:"Encry,omitempty"`
	DeleteMark int32         `protobuf:"varint,9,opt,name=DeleteMark,json=deleteMark,proto3" json:"DeleteMark,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,10,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelMsgHistory) Reset()         { *m = ReqGetChannelMsgHistory{} }
func (m *ReqGetChannelMsgHistory) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelMsgHistory) ProtoMessage()    {}
func (*ReqGetChannelMsgHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{40}
}

func (m *ReqGetChannelMsgHistory) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetDeleteMark() int32 {
	if m != nil {
		return m.DeleteMark
	}
	return 0
}

func (m *ReqGetChannelMsgHistory) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelMsgHistory struct {
	UserMsgListAndPts *UserMsgListAndPts `protobuf:"bytes,1,opt,name=UserMsgListAndPts,json=userMsgListAndPts" json:"UserMsgListAndPts,omitempty"`
	ReplyErr          *ReplyErr          `protobuf:"bytes,2,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelMsgHistory) Reset()         { *m = ReplyGetChannelMsgHistory{} }
func (m *ReplyGetChannelMsgHistory) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelMsgHistory) ProtoMessage()    {}
func (*ReplyGetChannelMsgHistory) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{41}
}

func (m *ReplyGetChannelMsgHistory) GetUserMsgListAndPts() *UserMsgListAndPts {
	if m != nil {
		return m.UserMsgListAndPts
	}
	return nil
}

func (m *ReplyGetChannelMsgHistory) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetChannelTopMst struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelTopMst) Reset()                    { *m = ReqGetChannelTopMst{} }
func (m *ReqGetChannelTopMst) String() string            { return proto.CompactTextString(m) }
func (*ReqGetChannelTopMst) ProtoMessage()               {}
func (*ReqGetChannelTopMst) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{42} }

func (m *ReqGetChannelTopMst) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelTopMst) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqGetChannelTopMst2 struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=UserId,json=userId,proto3" json:"UserId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelTopMst2) Reset()                    { *m = ReqGetChannelTopMst2{} }
func (m *ReqGetChannelTopMst2) String() string            { return proto.CompactTextString(m) }
func (*ReqGetChannelTopMst2) ProtoMessage()               {}
func (*ReqGetChannelTopMst2) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{43} }

func (m *ReqGetChannelTopMst2) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelTopMst2) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetChannelTopMst2) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelTopMst struct {
	UserMsg  *pbcomm1.UserMsg `protobuf:"bytes,1,opt,name=UserMsg,json=userMsg" json:"UserMsg,omitempty"`
	ReplyErr *ReplyErr        `protobuf:"bytes,2,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelTopMst) Reset()                    { *m = ReplyGetChannelTopMst{} }
func (m *ReplyGetChannelTopMst) String() string            { return proto.CompactTextString(m) }
func (*ReplyGetChannelTopMst) ProtoMessage()               {}
func (*ReplyGetChannelTopMst) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{44} }

func (m *ReplyGetChannelTopMst) GetUserMsg() *pbcomm1.UserMsg {
	if m != nil {
		return m.UserMsg
	}
	return nil
}

func (m *ReplyGetChannelTopMst) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type GetChannelMediaMessageHistoryByMediaConfig struct {
	ChannelId int32   `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	UserId    int32   `protobuf:"varint,2,opt,name=UserId,json=userId,proto3" json:"UserId,omitempty"`
	Medias    []int32 `protobuf:"varint,3,rep,packed,name=Medias,json=medias" json:"Medias,omitempty"`
	MaxId     int32   `protobuf:"varint,4,opt,name=MaxId,json=maxId,proto3" json:"MaxId,omitempty"`
	Limit     int32   `protobuf:"varint,5,opt,name=Limit,json=limit,proto3" json:"Limit,omitempty"`
	Encry     int32   `protobuf:"varint,6,opt,name=encry,proto3" json:"encry,omitempty"`
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) Reset() {
	*m = GetChannelMediaMessageHistoryByMediaConfig{}
}
func (m *GetChannelMediaMessageHistoryByMediaConfig) String() string {
	return proto.CompactTextString(m)
}
func (*GetChannelMediaMessageHistoryByMediaConfig) ProtoMessage() {}
func (*GetChannelMediaMessageHistoryByMediaConfig) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{45}
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) GetMedias() []int32 {
	if m != nil {
		return m.Medias
	}
	return nil
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

type ReqGetChannelMediaMessageHistoryByMedia struct {
	GetChannelMediaMessageHistoryByMediaConfig *GetChannelMediaMessageHistoryByMediaConfig `protobuf:"bytes,1,opt,name=GetChannelMediaMessageHistoryByMediaConfig,json=getChannelMediaMessageHistoryByMediaConfig" json:"GetChannelMediaMessageHistoryByMediaConfig,omitempty"`
	Debug                                      *pbcomm.Debug                               `protobuf:"bytes,2,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelMediaMessageHistoryByMedia) Reset() {
	*m = ReqGetChannelMediaMessageHistoryByMedia{}
}
func (m *ReqGetChannelMediaMessageHistoryByMedia) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelMediaMessageHistoryByMedia) ProtoMessage()    {}
func (*ReqGetChannelMediaMessageHistoryByMedia) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{46}
}

func (m *ReqGetChannelMediaMessageHistoryByMedia) GetGetChannelMediaMessageHistoryByMediaConfig() *GetChannelMediaMessageHistoryByMediaConfig {
	if m != nil {
		return m.GetChannelMediaMessageHistoryByMediaConfig
	}
	return nil
}

func (m *ReqGetChannelMediaMessageHistoryByMedia) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelMediaMessageHistoryByMedia struct {
	ChannelMsgs []*pbcomm1.UserMsg `protobuf:"bytes,1,rep,name=ChannelMsgs,json=channelMsgs" json:"ChannelMsgs,omitempty"`
	ReplyErr    *ReplyErr          `protobuf:"bytes,2,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelMediaMessageHistoryByMedia) Reset() {
	*m = ReplyGetChannelMediaMessageHistoryByMedia{}
}
func (m *ReplyGetChannelMediaMessageHistoryByMedia) String() string {
	return proto.CompactTextString(m)
}
func (*ReplyGetChannelMediaMessageHistoryByMedia) ProtoMessage() {}
func (*ReplyGetChannelMediaMessageHistoryByMedia) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{47}
}

func (m *ReplyGetChannelMediaMessageHistoryByMedia) GetChannelMsgs() []*pbcomm1.UserMsg {
	if m != nil {
		return m.ChannelMsgs
	}
	return nil
}

func (m *ReplyGetChannelMediaMessageHistoryByMedia) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

// 超级群标记删除记录结构体
type ChannelMessageDeleteMark struct {
	UserId    int32 `protobuf:"varint,1,opt,name=UserId,json=userId,proto3" json:"UserId,omitempty"`
	ChannelId int32 `protobuf:"varint,2,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	MsgId     int32 `protobuf:"varint,3,opt,name=MsgId,json=msgId,proto3" json:"MsgId,omitempty"`
}

func (m *ChannelMessageDeleteMark) Reset()         { *m = ChannelMessageDeleteMark{} }
func (m *ChannelMessageDeleteMark) String() string { return proto.CompactTextString(m) }
func (*ChannelMessageDeleteMark) ProtoMessage()    {}
func (*ChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{48}
}

func (m *ChannelMessageDeleteMark) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChannelMessageDeleteMark) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelMessageDeleteMark) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type ReqInsertOrUpdateChannelMessageDeleteMark struct {
	ChannelMessageDeleteMark *ChannelMessageDeleteMark `protobuf:"bytes,1,opt,name=ChannelMessageDeleteMark,json=channelMessageDeleteMark" json:"ChannelMessageDeleteMark,omitempty"`
	Debug                    *pbcomm.Debug             `protobuf:"bytes,2,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqInsertOrUpdateChannelMessageDeleteMark) Reset() {
	*m = ReqInsertOrUpdateChannelMessageDeleteMark{}
}
func (m *ReqInsertOrUpdateChannelMessageDeleteMark) String() string {
	return proto.CompactTextString(m)
}
func (*ReqInsertOrUpdateChannelMessageDeleteMark) ProtoMessage() {}
func (*ReqInsertOrUpdateChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{49}
}

func (m *ReqInsertOrUpdateChannelMessageDeleteMark) GetChannelMessageDeleteMark() *ChannelMessageDeleteMark {
	if m != nil {
		return m.ChannelMessageDeleteMark
	}
	return nil
}

func (m *ReqInsertOrUpdateChannelMessageDeleteMark) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyInsertOrUpdateChannelMessageDeleteMark struct {
	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyInsertOrUpdateChannelMessageDeleteMark) Reset() {
	*m = ReplyInsertOrUpdateChannelMessageDeleteMark{}
}
func (m *ReplyInsertOrUpdateChannelMessageDeleteMark) String() string {
	return proto.CompactTextString(m)
}
func (*ReplyInsertOrUpdateChannelMessageDeleteMark) ProtoMessage() {}
func (*ReplyInsertOrUpdateChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{50}
}

func (m *ReplyInsertOrUpdateChannelMessageDeleteMark) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetChannelMessageDeleteMark struct {
	UserId    int32         `protobuf:"varint,1,opt,name=UserId,json=userId,proto3" json:"UserId,omitempty"`
	ChannelID int32         `protobuf:"varint,2,opt,name=ChannelID,json=channelID,proto3" json:"ChannelID,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelMessageDeleteMark) Reset()         { *m = ReqGetChannelMessageDeleteMark{} }
func (m *ReqGetChannelMessageDeleteMark) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelMessageDeleteMark) ProtoMessage()    {}
func (*ReqGetChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{51}
}

func (m *ReqGetChannelMessageDeleteMark) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetChannelMessageDeleteMark) GetChannelID() int32 {
	if m != nil {
		return m.ChannelID
	}
	return 0
}

func (m *ReqGetChannelMessageDeleteMark) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelMessageDeleteMark struct {
	ChannelMessageDeleteMark *ChannelMessageDeleteMark `protobuf:"bytes,1,opt,name=ChannelMessageDeleteMark,json=channelMessageDeleteMark" json:"ChannelMessageDeleteMark,omitempty"`
	ReplyErr                 *ReplyErr                 `protobuf:"bytes,2,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelMessageDeleteMark) Reset()         { *m = ReplyGetChannelMessageDeleteMark{} }
func (m *ReplyGetChannelMessageDeleteMark) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelMessageDeleteMark) ProtoMessage()    {}
func (*ReplyGetChannelMessageDeleteMark) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{52}
}

func (m *ReplyGetChannelMessageDeleteMark) GetChannelMessageDeleteMark() *ChannelMessageDeleteMark {
	if m != nil {
		return m.ChannelMessageDeleteMark
	}
	return nil
}

func (m *ReplyGetChannelMessageDeleteMark) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ChannelMediaMessageStatistics struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	Media     int32 `protobuf:"varint,2,opt,name=Media,json=media,proto3" json:"Media,omitempty"`
	Count     int32 `protobuf:"varint,3,opt,name=Count,json=count,proto3" json:"Count,omitempty"`
}

func (m *ChannelMediaMessageStatistics) Reset()         { *m = ChannelMediaMessageStatistics{} }
func (m *ChannelMediaMessageStatistics) String() string { return proto.CompactTextString(m) }
func (*ChannelMediaMessageStatistics) ProtoMessage()    {}
func (*ChannelMediaMessageStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{53}
}

func (m *ChannelMediaMessageStatistics) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelMediaMessageStatistics) GetMedia() int32 {
	if m != nil {
		return m.Media
	}
	return 0
}

func (m *ChannelMediaMessageStatistics) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ReqGetChannelMediaMessageStatisticsByMedia struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	Media     int32         `protobuf:"varint,2,opt,name=Media,json=media,proto3" json:"Media,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqGetChannelMediaMessageStatisticsByMedia) Reset() {
	*m = ReqGetChannelMediaMessageStatisticsByMedia{}
}
func (m *ReqGetChannelMediaMessageStatisticsByMedia) String() string {
	return proto.CompactTextString(m)
}
func (*ReqGetChannelMediaMessageStatisticsByMedia) ProtoMessage() {}
func (*ReqGetChannelMediaMessageStatisticsByMedia) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{54}
}

func (m *ReqGetChannelMediaMessageStatisticsByMedia) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelMediaMessageStatisticsByMedia) GetMedia() int32 {
	if m != nil {
		return m.Media
	}
	return 0
}

func (m *ReqGetChannelMediaMessageStatisticsByMedia) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetChannelMediaMessageStatisticsByMedia struct {
	ChannelMediaMessageStatistics *ChannelMediaMessageStatistics `protobuf:"bytes,1,opt,name=ChannelMediaMessageStatistics,json=channelMediaMessageStatistics" json:"ChannelMediaMessageStatistics,omitempty"`
	ReplyErr                      *ReplyErr                      `protobuf:"bytes,2,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelMediaMessageStatisticsByMedia) Reset() {
	*m = ReplyGetChannelMediaMessageStatisticsByMedia{}
}
func (m *ReplyGetChannelMediaMessageStatisticsByMedia) String() string {
	return proto.CompactTextString(m)
}
func (*ReplyGetChannelMediaMessageStatisticsByMedia) ProtoMessage() {}
func (*ReplyGetChannelMediaMessageStatisticsByMedia) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{55}
}

func (m *ReplyGetChannelMediaMessageStatisticsByMedia) GetChannelMediaMessageStatistics() *ChannelMediaMessageStatistics {
	if m != nil {
		return m.ChannelMediaMessageStatistics
	}
	return nil
}

func (m *ReplyGetChannelMediaMessageStatisticsByMedia) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ChannelAdminLog struct {
	ActionId    int64  `protobuf:"varint,1,opt,name=ActionId,json=actionId,proto3" json:"ActionId,omitempty"`
	ChannelId   int32  `protobuf:"varint,2,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	AdminUserId int32  `protobuf:"varint,3,opt,name=AdminUserId,json=adminUserId,proto3" json:"AdminUserId,omitempty"`
	UserId      int32  `protobuf:"varint,4,opt,name=UserId,json=userId,proto3" json:"UserId,omitempty"`
	ActionType  int32  `protobuf:"varint,5,opt,name=ActionType,json=actionType,proto3" json:"ActionType,omitempty"`
	AdminLog    []byte `protobuf:"bytes,6,opt,name=AdminLog,json=adminLog,proto3" json:"AdminLog,omitempty"`
	Date        int64  `protobuf:"varint,7,opt,name=Date,json=date,proto3" json:"Date,omitempty"`
}

func (m *ChannelAdminLog) Reset()                    { *m = ChannelAdminLog{} }
func (m *ChannelAdminLog) String() string            { return proto.CompactTextString(m) }
func (*ChannelAdminLog) ProtoMessage()               {}
func (*ChannelAdminLog) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{56} }

func (m *ChannelAdminLog) GetActionId() int64 {
	if m != nil {
		return m.ActionId
	}
	return 0
}

func (m *ChannelAdminLog) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelAdminLog) GetAdminUserId() int32 {
	if m != nil {
		return m.AdminUserId
	}
	return 0
}

func (m *ChannelAdminLog) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChannelAdminLog) GetActionType() int32 {
	if m != nil {
		return m.ActionType
	}
	return 0
}

func (m *ChannelAdminLog) GetAdminLog() []byte {
	if m != nil {
		return m.AdminLog
	}
	return nil
}

func (m *ChannelAdminLog) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

type ReqStoreAdminLog struct {
	ChannelAdminLog *ChannelAdminLog `protobuf:"bytes,1,opt,name=ChannelAdminLog,json=channelAdminLog" json:"ChannelAdminLog,omitempty"`
	Debug           *pbcomm.Debug    `protobuf:"bytes,2,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqStoreAdminLog) Reset()                    { *m = ReqStoreAdminLog{} }
func (m *ReqStoreAdminLog) String() string            { return proto.CompactTextString(m) }
func (*ReqStoreAdminLog) ProtoMessage()               {}
func (*ReqStoreAdminLog) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{57} }

func (m *ReqStoreAdminLog) GetChannelAdminLog() *ChannelAdminLog {
	if m != nil {
		return m.ChannelAdminLog
	}
	return nil
}

func (m *ReqStoreAdminLog) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelId struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	Limit     int32         `protobuf:"varint,2,opt,name=Limit,json=limit,proto3" json:"Limit,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,3,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqFindsAdminLogByChannelId) Reset()         { *m = ReqFindsAdminLogByChannelId{} }
func (m *ReqFindsAdminLogByChannelId) String() string { return proto.CompactTextString(m) }
func (*ReqFindsAdminLogByChannelId) ProtoMessage()    {}
func (*ReqFindsAdminLogByChannelId) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{58}
}

func (m *ReqFindsAdminLogByChannelId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelId) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyFindsAdminLog struct {
	AdminLogs []*ChannelAdminLog `protobuf:"bytes,1,rep,name=AdminLogs,json=adminLogs" json:"AdminLogs,omitempty"`
	ReplyErr  *ReplyErr          `protobuf:"bytes,2,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyFindsAdminLog) Reset()                    { *m = ReplyFindsAdminLog{} }
func (m *ReplyFindsAdminLog) String() string            { return proto.CompactTextString(m) }
func (*ReplyFindsAdminLog) ProtoMessage()               {}
func (*ReplyFindsAdminLog) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{59} }

func (m *ReplyFindsAdminLog) GetAdminLogs() []*ChannelAdminLog {
	if m != nil {
		return m.AdminLogs
	}
	return nil
}

func (m *ReplyFindsAdminLog) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId struct {
	ChannelId    int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	UserId       int32         `protobuf:"varint,2,opt,name=UserId,json=userId,proto3" json:"UserId,omitempty"`
	AdminUsers   []int32       `protobuf:"varint,3,rep,packed,name=AdminUsers,json=adminUsers" json:"AdminUsers,omitempty"`
	EventFilters []int32       `protobuf:"varint,4,rep,packed,name=EventFilters,json=eventFilters" json:"EventFilters,omitempty"`
	Limit        int32         `protobuf:"varint,5,opt,name=Limit,json=limit,proto3" json:"Limit,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) Reset() {
	*m = ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId{}
}
func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) String() string {
	return proto.CompactTextString(m)
}
func (*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) ProtoMessage() {}
func (*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{60}
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetAdminUsers() []int32 {
	if m != nil {
		return m.AdminUsers
	}
	return nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetEventFilters() []int32 {
	if m != nil {
		return m.EventFilters
	}
	return nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId struct {
	ChannelId    int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	UserId       int32         `protobuf:"varint,2,opt,name=UserId,json=userId,proto3" json:"UserId,omitempty"`
	EventFilters []int32       `protobuf:"varint,3,rep,packed,name=EventFilters,json=eventFilters" json:"EventFilters,omitempty"`
	Limit        int32         `protobuf:"varint,4,opt,name=Limit,json=limit,proto3" json:"Limit,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) Reset() {
	*m = ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId{}
}
func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) String() string {
	return proto.CompactTextString(m)
}
func (*ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) ProtoMessage() {}
func (*ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{61}
}

func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetEventFilters() []int32 {
	if m != nil {
		return m.EventFilters
	}
	return nil
}

func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndUserId struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	UserId    int32         `protobuf:"varint,2,opt,name=UserId,json=userId,proto3" json:"UserId,omitempty"`
	Limit     int32         `protobuf:"varint,3,opt,name=Limit,json=limit,proto3" json:"Limit,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqFindsAdminLogByChannelIdAndUserId) Reset()         { *m = ReqFindsAdminLogByChannelIdAndUserId{} }
func (m *ReqFindsAdminLogByChannelIdAndUserId) String() string { return proto.CompactTextString(m) }
func (*ReqFindsAdminLogByChannelIdAndUserId) ProtoMessage()    {}
func (*ReqFindsAdminLogByChannelIdAndUserId) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{62}
}

func (m *ReqFindsAdminLogByChannelIdAndUserId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndUserId) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndUserId) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndUserId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters struct {
	ChannelId    int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	AdminUsers   []int32       `protobuf:"varint,2,rep,packed,name=AdminUsers,json=adminUsers" json:"AdminUsers,omitempty"`
	EventFilters []int32       `protobuf:"varint,3,rep,packed,name=EventFilters,json=eventFilters" json:"EventFilters,omitempty"`
	Limit        int32         `protobuf:"varint,4,opt,name=Limit,json=limit,proto3" json:"Limit,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) Reset() {
	*m = ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters{}
}
func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) String() string {
	return proto.CompactTextString(m)
}
func (*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) ProtoMessage() {}
func (*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{63}
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetAdminUsers() []int32 {
	if m != nil {
		return m.AdminUsers
	}
	return nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetEventFilters() []int32 {
	if m != nil {
		return m.EventFilters
	}
	return nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndEventFilters struct {
	ChannelId    int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	EventFilters []int32       `protobuf:"varint,2,rep,packed,name=EventFilters,json=eventFilters" json:"EventFilters,omitempty"`
	Limit        int32         `protobuf:"varint,3,opt,name=Limit,json=limit,proto3" json:"Limit,omitempty"`
	Debug        *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqFindsAdminLogByChannelIdAndEventFilters) Reset() {
	*m = ReqFindsAdminLogByChannelIdAndEventFilters{}
}
func (m *ReqFindsAdminLogByChannelIdAndEventFilters) String() string {
	return proto.CompactTextString(m)
}
func (*ReqFindsAdminLogByChannelIdAndEventFilters) ProtoMessage() {}
func (*ReqFindsAdminLogByChannelIdAndEventFilters) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{64}
}

func (m *ReqFindsAdminLogByChannelIdAndEventFilters) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndEventFilters) GetEventFilters() []int32 {
	if m != nil {
		return m.EventFilters
	}
	return nil
}

func (m *ReqFindsAdminLogByChannelIdAndEventFilters) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndEventFilters) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqFindsAdminLogByChannelIdAndAdminUsers struct {
	ChannelId  int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	AdminUsers []int32       `protobuf:"varint,2,rep,packed,name=AdminUsers,json=adminUsers" json:"AdminUsers,omitempty"`
	Limit      int32         `protobuf:"varint,3,opt,name=Limit,json=limit,proto3" json:"Limit,omitempty"`
	Debug      *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) Reset() {
	*m = ReqFindsAdminLogByChannelIdAndAdminUsers{}
}
func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) String() string { return proto.CompactTextString(m) }
func (*ReqFindsAdminLogByChannelIdAndAdminUsers) ProtoMessage()    {}
func (*ReqFindsAdminLogByChannelIdAndAdminUsers) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{65}
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) GetAdminUsers() []int32 {
	if m != nil {
		return m.AdminUsers
	}
	return nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReqChannelMessageAtAdd struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,json=userId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,json=withId,proto3" json:"WithId,omitempty"`
	MsgId  int32         `protobuf:"varint,3,opt,name=MsgId,json=msgId,proto3" json:"MsgId,omitempty"`
	Encry  int32         `protobuf:"varint,4,opt,name=Encry,json=encry,proto3" json:"Encry,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,5,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqChannelMessageAtAdd) Reset()         { *m = ReqChannelMessageAtAdd{} }
func (m *ReqChannelMessageAtAdd) String() string { return proto.CompactTextString(m) }
func (*ReqChannelMessageAtAdd) ProtoMessage()    {}
func (*ReqChannelMessageAtAdd) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{66}
}

func (m *ReqChannelMessageAtAdd) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqChannelMessageAtAdd) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqChannelMessageAtAdd) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqChannelMessageAtAdd) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *ReqChannelMessageAtAdd) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyChannelMessageAtAdd struct {
	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyChannelMessageAtAdd) Reset()         { *m = ReplyChannelMessageAtAdd{} }
func (m *ReplyChannelMessageAtAdd) String() string { return proto.CompactTextString(m) }
func (*ReplyChannelMessageAtAdd) ProtoMessage()    {}
func (*ReplyChannelMessageAtAdd) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{67}
}

func (m *ReplyChannelMessageAtAdd) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqChannelMessageAtGet struct {
	UserId    int32         `protobuf:"varint,1,opt,name=UserId,json=userId,proto3" json:"UserId,omitempty"`
	WithId    int32         `protobuf:"varint,2,opt,name=WithId,json=withId,proto3" json:"WithId,omitempty"`
	MsgId     int32         `protobuf:"varint,3,opt,name=MsgId,json=msgId,proto3" json:"MsgId,omitempty"`
	AddOffset int32         `protobuf:"varint,4,opt,name=AddOffset,json=addOffset,proto3" json:"AddOffset,omitempty"`
	Limit     int32         `protobuf:"varint,5,opt,name=Limit,json=limit,proto3" json:"Limit,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,6,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqChannelMessageAtGet) Reset()         { *m = ReqChannelMessageAtGet{} }
func (m *ReqChannelMessageAtGet) String() string { return proto.CompactTextString(m) }
func (*ReqChannelMessageAtGet) ProtoMessage()    {}
func (*ReqChannelMessageAtGet) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{68}
}

func (m *ReqChannelMessageAtGet) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqChannelMessageAtGet) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqChannelMessageAtGet) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqChannelMessageAtGet) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *ReqChannelMessageAtGet) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqChannelMessageAtGet) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyChannelMessageAtGet struct {
	Messages []*pbcomm1.UserMsg `protobuf:"bytes,1,rep,name=Messages,json=messages" json:"Messages,omitempty"`
	ReplyErr *ReplyErr          `protobuf:"bytes,2,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyChannelMessageAtGet) Reset()         { *m = ReplyChannelMessageAtGet{} }
func (m *ReplyChannelMessageAtGet) String() string { return proto.CompactTextString(m) }
func (*ReplyChannelMessageAtGet) ProtoMessage()    {}
func (*ReplyChannelMessageAtGet) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{69}
}

func (m *ReplyChannelMessageAtGet) GetMessages() []*pbcomm1.UserMsg {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ReplyChannelMessageAtGet) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqChannelMessageAtDel struct {
	UserId int32         `protobuf:"varint,1,opt,name=UserId,json=userId,proto3" json:"UserId,omitempty"`
	WithId int32         `protobuf:"varint,2,opt,name=WithId,json=withId,proto3" json:"WithId,omitempty"`
	MsgId  int32         `protobuf:"varint,3,opt,name=MsgId,json=msgId,proto3" json:"MsgId,omitempty"`
	Debug  *pbcomm.Debug `protobuf:"bytes,4,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqChannelMessageAtDel) Reset()         { *m = ReqChannelMessageAtDel{} }
func (m *ReqChannelMessageAtDel) String() string { return proto.CompactTextString(m) }
func (*ReqChannelMessageAtDel) ProtoMessage()    {}
func (*ReqChannelMessageAtDel) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{70}
}

func (m *ReqChannelMessageAtDel) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqChannelMessageAtDel) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ReqChannelMessageAtDel) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReqChannelMessageAtDel) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyChannelMessageAtDel struct {
	ReplyErr *ReplyErr `protobuf:"bytes,1,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyChannelMessageAtDel) Reset()         { *m = ReplyChannelMessageAtDel{} }
func (m *ReplyChannelMessageAtDel) String() string { return proto.CompactTextString(m) }
func (*ReplyChannelMessageAtDel) ProtoMessage()    {}
func (*ReplyChannelMessageAtDel) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{71}
}

func (m *ReplyChannelMessageAtDel) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ChannelLocalId struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	LocalId   int64 `protobuf:"varint,2,opt,name=LocalId,json=localId,proto3" json:"LocalId,omitempty"`
}

func (m *ChannelLocalId) Reset()                    { *m = ChannelLocalId{} }
func (m *ChannelLocalId) String() string            { return proto.CompactTextString(m) }
func (*ChannelLocalId) ProtoMessage()               {}
func (*ChannelLocalId) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{72} }

func (m *ChannelLocalId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelLocalId) GetLocalId() int64 {
	if m != nil {
		return m.LocalId
	}
	return 0
}

type ReqIncreaseChannelLocalId struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqIncreaseChannelLocalId) Reset()         { *m = ReqIncreaseChannelLocalId{} }
func (m *ReqIncreaseChannelLocalId) String() string { return proto.CompactTextString(m) }
func (*ReqIncreaseChannelLocalId) ProtoMessage()    {}
func (*ReqIncreaseChannelLocalId) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{73}
}

func (m *ReqIncreaseChannelLocalId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqIncreaseChannelLocalId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyIncreaseChannelLocalId struct {
	ChannelLocalId *ChannelLocalId `protobuf:"bytes,1,opt,name=ChannelLocalId,json=channelLocalId" json:"ChannelLocalId,omitempty"`
	ReplyErr       *ReplyErr       `protobuf:"bytes,2,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyIncreaseChannelLocalId) Reset()         { *m = ReplyIncreaseChannelLocalId{} }
func (m *ReplyIncreaseChannelLocalId) String() string { return proto.CompactTextString(m) }
func (*ReplyIncreaseChannelLocalId) ProtoMessage()    {}
func (*ReplyIncreaseChannelLocalId) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{74}
}

func (m *ReplyIncreaseChannelLocalId) GetChannelLocalId() *ChannelLocalId {
	if m != nil {
		return m.ChannelLocalId
	}
	return nil
}

func (m *ReplyIncreaseChannelLocalId) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetCurrentChannelLocalId struct {
	ChannelId int32         `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	Debug     *pbcomm.Debug `protobuf:"bytes,2,opt,name=Debug,json=debug" json:"Debug,omitempty"`
}

func (m *ReqGetCurrentChannelLocalId) Reset()         { *m = ReqGetCurrentChannelLocalId{} }
func (m *ReqGetCurrentChannelLocalId) String() string { return proto.CompactTextString(m) }
func (*ReqGetCurrentChannelLocalId) ProtoMessage()    {}
func (*ReqGetCurrentChannelLocalId) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{75}
}

func (m *ReqGetCurrentChannelLocalId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetCurrentChannelLocalId) GetDebug() *pbcomm.Debug {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ReplyGetCurrentChannelLocalId struct {
	ChannelLocalId *ChannelLocalId `protobuf:"bytes,1,opt,name=ChannelLocalId,json=channelLocalId" json:"ChannelLocalId,omitempty"`
	ReplyErr       *ReplyErr       `protobuf:"bytes,2,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetCurrentChannelLocalId) Reset()         { *m = ReplyGetCurrentChannelLocalId{} }
func (m *ReplyGetCurrentChannelLocalId) String() string { return proto.CompactTextString(m) }
func (*ReplyGetCurrentChannelLocalId) ProtoMessage()    {}
func (*ReplyGetCurrentChannelLocalId) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{76}
}

func (m *ReplyGetCurrentChannelLocalId) GetChannelLocalId() *ChannelLocalId {
	if m != nil {
		return m.ChannelLocalId
	}
	return nil
}

func (m *ReplyGetCurrentChannelLocalId) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ForWardUserMsg struct {
	Date        int32    `protobuf:"varint,1,opt,name=Date,json=date,proto3" json:"Date,omitempty"`
	Message     string   `protobuf:"bytes,2,opt,name=Message,json=message,proto3" json:"Message,omitempty"`
	Media       int64    `protobuf:"varint,3,opt,name=Media,json=media,proto3" json:"Media,omitempty"`
	MediaData   []byte   `protobuf:"bytes,4,opt,name=MediaData,json=mediaData,proto3" json:"MediaData,omitempty"`
	ReplyMarkup []byte   `protobuf:"bytes,5,opt,name=ReplyMarkup,json=replyMarkup,proto3" json:"ReplyMarkup,omitempty"`
	Entities    [][]byte `protobuf:"bytes,6,rep,name=Entities,json=entities" json:"Entities,omitempty"`
	FromId      int32    `protobuf:"varint,7,opt,name=FromId,json=fromId,proto3" json:"FromId,omitempty"`
	Encry       int32    `protobuf:"varint,8,opt,name=Encry,json=encry,proto3" json:"Encry,omitempty"`
	FwdFrom     []byte   `protobuf:"bytes,9,opt,name=FwdFrom,json=fwdFrom,proto3" json:"FwdFrom,omitempty"`
	GroupId     int64    `protobuf:"varint,10,opt,name=GroupId,json=groupId,proto3" json:"GroupId,omitempty"`
	ViaBotId    int32    `protobuf:"varint,11,opt,name=ViaBotId,json=viaBotId,proto3" json:"ViaBotId,omitempty"`
	MsgID       int32    `protobuf:"varint,12,opt,name=MsgID,json=msgID,proto3" json:"MsgID,omitempty"`
}

func (m *ForWardUserMsg) Reset()                    { *m = ForWardUserMsg{} }
func (m *ForWardUserMsg) String() string            { return proto.CompactTextString(m) }
func (*ForWardUserMsg) ProtoMessage()               {}
func (*ForWardUserMsg) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{77} }

func (m *ForWardUserMsg) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ForWardUserMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ForWardUserMsg) GetMedia() int64 {
	if m != nil {
		return m.Media
	}
	return 0
}

func (m *ForWardUserMsg) GetMediaData() []byte {
	if m != nil {
		return m.MediaData
	}
	return nil
}

func (m *ForWardUserMsg) GetReplyMarkup() []byte {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *ForWardUserMsg) GetEntities() [][]byte {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *ForWardUserMsg) GetFromId() int32 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *ForWardUserMsg) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *ForWardUserMsg) GetFwdFrom() []byte {
	if m != nil {
		return m.FwdFrom
	}
	return nil
}

func (m *ForWardUserMsg) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *ForWardUserMsg) GetViaBotId() int32 {
	if m != nil {
		return m.ViaBotId
	}
	return 0
}

func (m *ForWardUserMsg) GetMsgID() int32 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

type ChannelMessageAt struct {
	UserId int32 `protobuf:"varint,1,opt,name=UserId,json=userId,proto3" json:"UserId,omitempty"`
	WithId int32 `protobuf:"varint,2,opt,name=WithId,json=withId,proto3" json:"WithId,omitempty"`
	MsgId  int32 `protobuf:"varint,3,opt,name=MsgId,json=msgId,proto3" json:"MsgId,omitempty"`
	Encry  int32 `protobuf:"varint,4,opt,name=Encry,json=encry,proto3" json:"Encry,omitempty"`
}

func (m *ChannelMessageAt) Reset()                    { *m = ChannelMessageAt{} }
func (m *ChannelMessageAt) String() string            { return proto.CompactTextString(m) }
func (*ChannelMessageAt) ProtoMessage()               {}
func (*ChannelMessageAt) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{78} }

func (m *ChannelMessageAt) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChannelMessageAt) GetWithId() int32 {
	if m != nil {
		return m.WithId
	}
	return 0
}

func (m *ChannelMessageAt) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ChannelMessageAt) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

// =================================================== search =======================================================
type ReqSearchChannelMsg struct {
	UserID    int32   `protobuf:"varint,1,opt,name=UserID,json=userID,proto3" json:"UserID,omitempty"`
	ChannelID int32   `protobuf:"varint,2,opt,name=ChannelID,json=channelID,proto3" json:"ChannelID,omitempty"`
	FromID    int32   `protobuf:"varint,3,opt,name=FromID,json=fromID,proto3" json:"FromID,omitempty"`
	Medias    []int32 `protobuf:"varint,4,rep,packed,name=Medias,json=medias" json:"Medias,omitempty"`
	OffsetID  int32   `protobuf:"varint,5,opt,name=OffsetID,json=offsetID,proto3" json:"OffsetID,omitempty"`
	AddOffset int32   `protobuf:"varint,6,opt,name=AddOffset,json=addOffset,proto3" json:"AddOffset,omitempty"`
	Encry     int32   `protobuf:"varint,7,opt,name=Encry,json=encry,proto3" json:"Encry,omitempty"`
	Limit     int32   `protobuf:"varint,8,opt,name=Limit,json=limit,proto3" json:"Limit,omitempty"`
	MinDate   int32   `protobuf:"varint,9,opt,name=MinDate,json=minDate,proto3" json:"MinDate,omitempty"`
	MaxDate   int32   `protobuf:"varint,10,opt,name=MaxDate,json=maxDate,proto3" json:"MaxDate,omitempty"`
	MinID     int32   `protobuf:"varint,11,opt,name=MinID,json=minID,proto3" json:"MinID,omitempty"`
	MaxID     int32   `protobuf:"varint,12,opt,name=MaxID,json=maxID,proto3" json:"MaxID,omitempty"`
}

func (m *ReqSearchChannelMsg) Reset()                    { *m = ReqSearchChannelMsg{} }
func (m *ReqSearchChannelMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqSearchChannelMsg) ProtoMessage()               {}
func (*ReqSearchChannelMsg) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{79} }

func (m *ReqSearchChannelMsg) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ReqSearchChannelMsg) GetChannelID() int32 {
	if m != nil {
		return m.ChannelID
	}
	return 0
}

func (m *ReqSearchChannelMsg) GetFromID() int32 {
	if m != nil {
		return m.FromID
	}
	return 0
}

func (m *ReqSearchChannelMsg) GetMedias() []int32 {
	if m != nil {
		return m.Medias
	}
	return nil
}

func (m *ReqSearchChannelMsg) GetOffsetID() int32 {
	if m != nil {
		return m.OffsetID
	}
	return 0
}

func (m *ReqSearchChannelMsg) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *ReqSearchChannelMsg) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

func (m *ReqSearchChannelMsg) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReqSearchChannelMsg) GetMinDate() int32 {
	if m != nil {
		return m.MinDate
	}
	return 0
}

func (m *ReqSearchChannelMsg) GetMaxDate() int32 {
	if m != nil {
		return m.MaxDate
	}
	return 0
}

func (m *ReqSearchChannelMsg) GetMinID() int32 {
	if m != nil {
		return m.MinID
	}
	return 0
}

func (m *ReqSearchChannelMsg) GetMaxID() int32 {
	if m != nil {
		return m.MaxID
	}
	return 0
}

type ReplySearchChannelMsg struct {
	Messages []*pbcomm1.UserMsg `protobuf:"bytes,1,rep,name=Messages,json=messages" json:"Messages,omitempty"`
}

func (m *ReplySearchChannelMsg) Reset()                    { *m = ReplySearchChannelMsg{} }
func (m *ReplySearchChannelMsg) String() string            { return proto.CompactTextString(m) }
func (*ReplySearchChannelMsg) ProtoMessage()               {}
func (*ReplySearchChannelMsg) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{80} }

func (m *ReplySearchChannelMsg) GetMessages() []*pbcomm1.UserMsg {
	if m != nil {
		return m.Messages
	}
	return nil
}

// =================================================== search =======================================================
type ReqIncreaseChannelId struct {
	ChannelId  int32 `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	MsgIdDelta int32 `protobuf:"varint,2,opt,name=MsgIdDelta,json=msgIdDelta,proto3" json:"MsgIdDelta,omitempty"`
	PtsDelta   int32 `protobuf:"varint,3,opt,name=PtsDelta,json=ptsDelta,proto3" json:"PtsDelta,omitempty"`
}

func (m *ReqIncreaseChannelId) Reset()                    { *m = ReqIncreaseChannelId{} }
func (m *ReqIncreaseChannelId) String() string            { return proto.CompactTextString(m) }
func (*ReqIncreaseChannelId) ProtoMessage()               {}
func (*ReqIncreaseChannelId) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{81} }

func (m *ReqIncreaseChannelId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqIncreaseChannelId) GetMsgIdDelta() int32 {
	if m != nil {
		return m.MsgIdDelta
	}
	return 0
}

func (m *ReqIncreaseChannelId) GetPtsDelta() int32 {
	if m != nil {
		return m.PtsDelta
	}
	return 0
}

type ReplyIncreaseChannelId struct {
	MsgId    int32     `protobuf:"varint,1,opt,name=MsgId,json=msgId,proto3" json:"MsgId,omitempty"`
	Pts      int32     `protobuf:"varint,2,opt,name=Pts,json=pts,proto3" json:"Pts,omitempty"`
	ReplyErr *ReplyErr `protobuf:"bytes,3,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyIncreaseChannelId) Reset()         { *m = ReplyIncreaseChannelId{} }
func (m *ReplyIncreaseChannelId) String() string { return proto.CompactTextString(m) }
func (*ReplyIncreaseChannelId) ProtoMessage()    {}
func (*ReplyIncreaseChannelId) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{82}
}

func (m *ReplyIncreaseChannelId) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReplyIncreaseChannelId) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReplyIncreaseChannelId) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetChannelIncreaseId struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
}

func (m *ReqGetChannelIncreaseId) Reset()         { *m = ReqGetChannelIncreaseId{} }
func (m *ReqGetChannelIncreaseId) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelIncreaseId) ProtoMessage()    {}
func (*ReqGetChannelIncreaseId) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{83}
}

func (m *ReqGetChannelIncreaseId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

type ReplyGetChannelIncreaseId struct {
	MsgId    int32     `protobuf:"varint,1,opt,name=MsgId,json=msgId,proto3" json:"MsgId,omitempty"`
	Pts      int32     `protobuf:"varint,2,opt,name=Pts,json=pts,proto3" json:"Pts,omitempty"`
	ReplyErr *ReplyErr `protobuf:"bytes,3,opt,name=ReplyErr,json=replyErr" json:"ReplyErr,omitempty"`
}

func (m *ReplyGetChannelIncreaseId) Reset()         { *m = ReplyGetChannelIncreaseId{} }
func (m *ReplyGetChannelIncreaseId) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelIncreaseId) ProtoMessage()    {}
func (*ReplyGetChannelIncreaseId) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{84}
}

func (m *ReplyGetChannelIncreaseId) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ReplyGetChannelIncreaseId) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReplyGetChannelIncreaseId) GetReplyErr() *ReplyErr {
	if m != nil {
		return m.ReplyErr
	}
	return nil
}

type ReqGetChannelIncreaseIds struct {
	ChannelIds []int32 `protobuf:"varint,1,rep,packed,name=ChannelIds,json=channelIds" json:"ChannelIds,omitempty"`
}

func (m *ReqGetChannelIncreaseIds) Reset()         { *m = ReqGetChannelIncreaseIds{} }
func (m *ReqGetChannelIncreaseIds) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelIncreaseIds) ProtoMessage()    {}
func (*ReqGetChannelIncreaseIds) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{85}
}

func (m *ReqGetChannelIncreaseIds) GetChannelIds() []int32 {
	if m != nil {
		return m.ChannelIds
	}
	return nil
}

type ReplyGetChannelIncreaseIds struct {
	MsgIds []*ChannelMsgId `protobuf:"bytes,1,rep,name=MsgIds,json=msgIds" json:"MsgIds,omitempty"`
}

func (m *ReplyGetChannelIncreaseIds) Reset()         { *m = ReplyGetChannelIncreaseIds{} }
func (m *ReplyGetChannelIncreaseIds) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelIncreaseIds) ProtoMessage()    {}
func (*ReplyGetChannelIncreaseIds) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{86}
}

func (m *ReplyGetChannelIncreaseIds) GetMsgIds() []*ChannelMsgId {
	if m != nil {
		return m.MsgIds
	}
	return nil
}

type ChannelDialog struct {
	ChannelId  int32 `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	TopMessage int32 `protobuf:"varint,2,opt,name=TopMessage,json=topMessage,proto3" json:"TopMessage,omitempty"`
	Pts        int32 `protobuf:"varint,3,opt,name=Pts,json=pts,proto3" json:"Pts,omitempty"`
	Update     int32 `protobuf:"varint,4,opt,name=Update,json=update,proto3" json:"Update,omitempty"`
}

func (m *ChannelDialog) Reset()                    { *m = ChannelDialog{} }
func (m *ChannelDialog) String() string            { return proto.CompactTextString(m) }
func (*ChannelDialog) ProtoMessage()               {}
func (*ChannelDialog) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{87} }

func (m *ChannelDialog) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelDialog) GetTopMessage() int32 {
	if m != nil {
		return m.TopMessage
	}
	return 0
}

func (m *ChannelDialog) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ChannelDialog) GetUpdate() int32 {
	if m != nil {
		return m.Update
	}
	return 0
}

type ReqUpdateChannelDialog struct {
	ChannelId  int32 `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	TopMessage int32 `protobuf:"varint,2,opt,name=TopMessage,json=topMessage,proto3" json:"TopMessage,omitempty"`
	Pts        int32 `protobuf:"varint,3,opt,name=Pts,json=pts,proto3" json:"Pts,omitempty"`
	Update     int32 `protobuf:"varint,4,opt,name=Update,json=update,proto3" json:"Update,omitempty"`
}

func (m *ReqUpdateChannelDialog) Reset()         { *m = ReqUpdateChannelDialog{} }
func (m *ReqUpdateChannelDialog) String() string { return proto.CompactTextString(m) }
func (*ReqUpdateChannelDialog) ProtoMessage()    {}
func (*ReqUpdateChannelDialog) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{88}
}

func (m *ReqUpdateChannelDialog) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqUpdateChannelDialog) GetTopMessage() int32 {
	if m != nil {
		return m.TopMessage
	}
	return 0
}

func (m *ReqUpdateChannelDialog) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ReqUpdateChannelDialog) GetUpdate() int32 {
	if m != nil {
		return m.Update
	}
	return 0
}

type ReqGetChannelDialogs struct {
	ChannelIds []int32 `protobuf:"varint,1,rep,packed,name=ChannelIds,json=channelIds" json:"ChannelIds,omitempty"`
}

func (m *ReqGetChannelDialogs) Reset()                    { *m = ReqGetChannelDialogs{} }
func (m *ReqGetChannelDialogs) String() string            { return proto.CompactTextString(m) }
func (*ReqGetChannelDialogs) ProtoMessage()               {}
func (*ReqGetChannelDialogs) Descriptor() ([]byte, []int) { return fileDescriptorChanneldb, []int{89} }

func (m *ReqGetChannelDialogs) GetChannelIds() []int32 {
	if m != nil {
		return m.ChannelIds
	}
	return nil
}

type ReplyGetChannelDialogs struct {
	ChannelDialogs []*ChannelDialog `protobuf:"bytes,1,rep,name=ChannelDialogs,json=channelDialogs" json:"ChannelDialogs,omitempty"`
}

func (m *ReplyGetChannelDialogs) Reset()         { *m = ReplyGetChannelDialogs{} }
func (m *ReplyGetChannelDialogs) String() string { return proto.CompactTextString(m) }
func (*ReplyGetChannelDialogs) ProtoMessage()    {}
func (*ReplyGetChannelDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{90}
}

func (m *ReplyGetChannelDialogs) GetChannelDialogs() []*ChannelDialog {
	if m != nil {
		return m.ChannelDialogs
	}
	return nil
}

type ReqGetChannelMessageByChannelIdRandomId struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	RandomId  int64 `protobuf:"varint,2,opt,name=RandomId,json=randomId,proto3" json:"RandomId,omitempty"`
	Encry     int32 `protobuf:"varint,3,opt,name=Encry,json=encry,proto3" json:"Encry,omitempty"`
}

func (m *ReqGetChannelMessageByChannelIdRandomId) Reset() {
	*m = ReqGetChannelMessageByChannelIdRandomId{}
}
func (m *ReqGetChannelMessageByChannelIdRandomId) String() string { return proto.CompactTextString(m) }
func (*ReqGetChannelMessageByChannelIdRandomId) ProtoMessage()    {}
func (*ReqGetChannelMessageByChannelIdRandomId) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{91}
}

func (m *ReqGetChannelMessageByChannelIdRandomId) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ReqGetChannelMessageByChannelIdRandomId) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *ReqGetChannelMessageByChannelIdRandomId) GetEncry() int32 {
	if m != nil {
		return m.Encry
	}
	return 0
}

type ReplyGetChannelMessageByChannelIdRandomId struct {
	UserMsg *pbcomm1.UserMsg `protobuf:"bytes,1,opt,name=UserMsg,json=userMsg" json:"UserMsg,omitempty"`
}

func (m *ReplyGetChannelMessageByChannelIdRandomId) Reset() {
	*m = ReplyGetChannelMessageByChannelIdRandomId{}
}
func (m *ReplyGetChannelMessageByChannelIdRandomId) String() string {
	return proto.CompactTextString(m)
}
func (*ReplyGetChannelMessageByChannelIdRandomId) ProtoMessage() {}
func (*ReplyGetChannelMessageByChannelIdRandomId) Descriptor() ([]byte, []int) {
	return fileDescriptorChanneldb, []int{92}
}

func (m *ReplyGetChannelMessageByChannelIdRandomId) GetUserMsg() *pbcomm1.UserMsg {
	if m != nil {
		return m.UserMsg
	}
	return nil
}

func init() {
	proto.RegisterType((*ReplyNull)(nil), "channeldb.ReplyNull")
	proto.RegisterType((*ChannelMsgId)(nil), "channeldb.ChannelMsgId")
	proto.RegisterType((*ChannelPtsHandle)(nil), "channeldb.ChannelPtsHandle")
	proto.RegisterType((*UserMsgListAndPts)(nil), "channeldb.UserMsgListAndPts")
	proto.RegisterType((*MsgsAndMaxId)(nil), "channeldb.MsgsAndMaxId")
	proto.RegisterType((*ReplyErr)(nil), "channeldb.ReplyErr")
	proto.RegisterType((*ReqHeartBeating)(nil), "channeldb.ReqHeartBeating")
	proto.RegisterType((*ReplyHeartBeating)(nil), "channeldb.ReplyHeartBeating")
	proto.RegisterType((*ReqUpdateChannelMsgIdAndPts)(nil), "channeldb.ReqUpdateChannelMsgIdAndPts")
	proto.RegisterType((*ReplyUpdateChannelMsgIdAndPts)(nil), "channeldb.ReplyUpdateChannelMsgIdAndPts")
	proto.RegisterType((*ReqSetChannelMsgIdAndPts)(nil), "channeldb.ReqSetChannelMsgIdAndPts")
	proto.RegisterType((*ReplySetChannelMsgIdAndPts)(nil), "channeldb.ReplySetChannelMsgIdAndPts")
	proto.RegisterType((*ReqUpdateChannelPts)(nil), "channeldb.ReqUpdateChannelPts")
	proto.RegisterType((*ReplyUpdateChannelPts)(nil), "channeldb.ReplyUpdateChannelPts")
	proto.RegisterType((*ReqUpdateChannelPtsWithNum)(nil), "channeldb.ReqUpdateChannelPtsWithNum")
	proto.RegisterType((*ReplyUpdateChannelPtsWithNum)(nil), "channeldb.ReplyUpdateChannelPtsWithNum")
	proto.RegisterType((*ReqGetChannelMsgId)(nil), "channeldb.ReqGetChannelMsgId")
	proto.RegisterType((*ReplyGetChannelMsgId)(nil), "channeldb.ReplyGetChannelMsgId")
	proto.RegisterType((*ReqStoreChannelPtsHandle)(nil), "channeldb.ReqStoreChannelPtsHandle")
	proto.RegisterType((*ReqBatchStoreChannelPtsHandle)(nil), "channeldb.ReqBatchStoreChannelPtsHandle")
	proto.RegisterType((*ReqGetChannelDiffByPts)(nil), "channeldb.ReqGetChannelDiffByPts")
	proto.RegisterType((*ReplyGetChannelDiffByPts)(nil), "channeldb.ReplyGetChannelDiffByPts")
	proto.RegisterType((*ReqGetChannelLastPtsHandle)(nil), "channeldb.ReqGetChannelLastPtsHandle")
	proto.RegisterType((*ReplyGetChannelLastPtsHandle)(nil), "channeldb.ReplyGetChannelLastPtsHandle")
	proto.RegisterType((*ReqDeleteChannelPtsHandle)(nil), "channeldb.ReqDeleteChannelPtsHandle")
	proto.RegisterType((*ReplyDeleteChannelPtsHandle)(nil), "channeldb.ReplyDeleteChannelPtsHandle")
	proto.RegisterType((*ReqInsertOrUpdateChannelMsg)(nil), "channeldb.ReqInsertOrUpdateChannelMsg")
	proto.RegisterType((*ReqUpdateChannelMsg)(nil), "channeldb.ReqUpdateChannelMsg")
	proto.RegisterType((*ReqBatchInsertOrUpdateChannelMsg)(nil), "channeldb.ReqBatchInsertOrUpdateChannelMsg")
	proto.RegisterType((*ReqDeleteMsgs)(nil), "channeldb.ReqDeleteMsgs")
	proto.RegisterType((*ReplyDeleteMsgs)(nil), "channeldb.ReplyDeleteMsgs")
	proto.RegisterType((*ReqDeleteUserHistory)(nil), "channeldb.ReqDeleteUserHistory")
	proto.RegisterType((*ReplyDeleteUserHistory)(nil), "channeldb.ReplyDeleteUserHistory")
	proto.RegisterType((*ReqDeleteChannelMsg)(nil), "channeldb.ReqDeleteChannelMsg")
	proto.RegisterType((*ReqDeleteChannelMessage)(nil), "channeldb.ReqDeleteChannelMessage")
	proto.RegisterType((*ReplyDeleteChannelMessage)(nil), "channeldb.ReplyDeleteChannelMessage")
	proto.RegisterType((*ReqGetChannelMessage)(nil), "channeldb.ReqGetChannelMessage")
	proto.RegisterType((*ReplyGetChannelMessage)(nil), "channeldb.ReplyGetChannelMessage")
	proto.RegisterType((*ReqGetChannelMsgsByMsgIds)(nil), "channeldb.ReqGetChannelMsgsByMsgIds")
	proto.RegisterType((*ReplyGetChannelMsgsByMsgIds)(nil), "channeldb.ReplyGetChannelMsgsByMsgIds")
	proto.RegisterType((*ReqGetChannelMsgHistory)(nil), "channeldb.ReqGetChannelMsgHistory")
	proto.RegisterType((*ReplyGetChannelMsgHistory)(nil), "channeldb.ReplyGetChannelMsgHistory")
	proto.RegisterType((*ReqGetChannelTopMst)(nil), "channeldb.ReqGetChannelTopMst")
	proto.RegisterType((*ReqGetChannelTopMst2)(nil), "channeldb.ReqGetChannelTopMst2")
	proto.RegisterType((*ReplyGetChannelTopMst)(nil), "channeldb.ReplyGetChannelTopMst")
	proto.RegisterType((*GetChannelMediaMessageHistoryByMediaConfig)(nil), "channeldb.GetChannelMediaMessageHistoryByMediaConfig")
	proto.RegisterType((*ReqGetChannelMediaMessageHistoryByMedia)(nil), "channeldb.ReqGetChannelMediaMessageHistoryByMedia")
	proto.RegisterType((*ReplyGetChannelMediaMessageHistoryByMedia)(nil), "channeldb.ReplyGetChannelMediaMessageHistoryByMedia")
	proto.RegisterType((*ChannelMessageDeleteMark)(nil), "channeldb.ChannelMessageDeleteMark")
	proto.RegisterType((*ReqInsertOrUpdateChannelMessageDeleteMark)(nil), "channeldb.ReqInsertOrUpdateChannelMessageDeleteMark")
	proto.RegisterType((*ReplyInsertOrUpdateChannelMessageDeleteMark)(nil), "channeldb.ReplyInsertOrUpdateChannelMessageDeleteMark")
	proto.RegisterType((*ReqGetChannelMessageDeleteMark)(nil), "channeldb.ReqGetChannelMessageDeleteMark")
	proto.RegisterType((*ReplyGetChannelMessageDeleteMark)(nil), "channeldb.ReplyGetChannelMessageDeleteMark")
	proto.RegisterType((*ChannelMediaMessageStatistics)(nil), "channeldb.ChannelMediaMessageStatistics")
	proto.RegisterType((*ReqGetChannelMediaMessageStatisticsByMedia)(nil), "channeldb.ReqGetChannelMediaMessageStatisticsByMedia")
	proto.RegisterType((*ReplyGetChannelMediaMessageStatisticsByMedia)(nil), "channeldb.ReplyGetChannelMediaMessageStatisticsByMedia")
	proto.RegisterType((*ChannelAdminLog)(nil), "channeldb.ChannelAdminLog")
	proto.RegisterType((*ReqStoreAdminLog)(nil), "channeldb.ReqStoreAdminLog")
	proto.RegisterType((*ReqFindsAdminLogByChannelId)(nil), "channeldb.ReqFindsAdminLogByChannelId")
	proto.RegisterType((*ReplyFindsAdminLog)(nil), "channeldb.ReplyFindsAdminLog")
	proto.RegisterType((*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId)(nil), "channeldb.ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId")
	proto.RegisterType((*ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId)(nil), "channeldb.ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId")
	proto.RegisterType((*ReqFindsAdminLogByChannelIdAndUserId)(nil), "channeldb.ReqFindsAdminLogByChannelIdAndUserId")
	proto.RegisterType((*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters)(nil), "channeldb.ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters")
	proto.RegisterType((*ReqFindsAdminLogByChannelIdAndEventFilters)(nil), "channeldb.ReqFindsAdminLogByChannelIdAndEventFilters")
	proto.RegisterType((*ReqFindsAdminLogByChannelIdAndAdminUsers)(nil), "channeldb.ReqFindsAdminLogByChannelIdAndAdminUsers")
	proto.RegisterType((*ReqChannelMessageAtAdd)(nil), "channeldb.ReqChannelMessageAtAdd")
	proto.RegisterType((*ReplyChannelMessageAtAdd)(nil), "channeldb.ReplyChannelMessageAtAdd")
	proto.RegisterType((*ReqChannelMessageAtGet)(nil), "channeldb.ReqChannelMessageAtGet")
	proto.RegisterType((*ReplyChannelMessageAtGet)(nil), "channeldb.ReplyChannelMessageAtGet")
	proto.RegisterType((*ReqChannelMessageAtDel)(nil), "channeldb.ReqChannelMessageAtDel")
	proto.RegisterType((*ReplyChannelMessageAtDel)(nil), "channeldb.ReplyChannelMessageAtDel")
	proto.RegisterType((*ChannelLocalId)(nil), "channeldb.ChannelLocalId")
	proto.RegisterType((*ReqIncreaseChannelLocalId)(nil), "channeldb.ReqIncreaseChannelLocalId")
	proto.RegisterType((*ReplyIncreaseChannelLocalId)(nil), "channeldb.ReplyIncreaseChannelLocalId")
	proto.RegisterType((*ReqGetCurrentChannelLocalId)(nil), "channeldb.ReqGetCurrentChannelLocalId")
	proto.RegisterType((*ReplyGetCurrentChannelLocalId)(nil), "channeldb.ReplyGetCurrentChannelLocalId")
	proto.RegisterType((*ForWardUserMsg)(nil), "channeldb.ForWardUserMsg")
	proto.RegisterType((*ChannelMessageAt)(nil), "channeldb.ChannelMessageAt")
	proto.RegisterType((*ReqSearchChannelMsg)(nil), "channeldb.ReqSearchChannelMsg")
	proto.RegisterType((*ReplySearchChannelMsg)(nil), "channeldb.ReplySearchChannelMsg")
	proto.RegisterType((*ReqIncreaseChannelId)(nil), "channeldb.ReqIncreaseChannelId")
	proto.RegisterType((*ReplyIncreaseChannelId)(nil), "channeldb.ReplyIncreaseChannelId")
	proto.RegisterType((*ReqGetChannelIncreaseId)(nil), "channeldb.ReqGetChannelIncreaseId")
	proto.RegisterType((*ReplyGetChannelIncreaseId)(nil), "channeldb.ReplyGetChannelIncreaseId")
	proto.RegisterType((*ReqGetChannelIncreaseIds)(nil), "channeldb.ReqGetChannelIncreaseIds")
	proto.RegisterType((*ReplyGetChannelIncreaseIds)(nil), "channeldb.ReplyGetChannelIncreaseIds")
	proto.RegisterType((*ChannelDialog)(nil), "channeldb.ChannelDialog")
	proto.RegisterType((*ReqUpdateChannelDialog)(nil), "channeldb.ReqUpdateChannelDialog")
	proto.RegisterType((*ReqGetChannelDialogs)(nil), "channeldb.ReqGetChannelDialogs")
	proto.RegisterType((*ReplyGetChannelDialogs)(nil), "channeldb.ReplyGetChannelDialogs")
	proto.RegisterType((*ReqGetChannelMessageByChannelIdRandomId)(nil), "channeldb.ReqGetChannelMessageByChannelIdRandomId")
	proto.RegisterType((*ReplyGetChannelMessageByChannelIdRandomId)(nil), "channeldb.ReplyGetChannelMessageByChannelIdRandomId")
	proto.RegisterEnum("channeldb.USER_MSG", USER_MSG_name, USER_MSG_value)
	proto.RegisterEnum("channeldb.HeartBeating", HeartBeating_name, HeartBeating_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChannelDB service

type ChannelDBClient interface {
	// =========================================== HeartBeating =========================================================
	// HeartBeating
	HeartBeating(ctx context.Context, in *ReqHeartBeating, opts ...grpc.CallOption) (*ReplyHeartBeating, error)
	// =========================================== ChannelMsgId =========================================================
	// 更新超级群 msgid and pts
	UpdateChannelMsgIdAndPts(ctx context.Context, in *ReqUpdateChannelMsgIdAndPts, opts ...grpc.CallOption) (*ReplyUpdateChannelMsgIdAndPts, error)
	// 直接设置 msgId pts 值 erlang版本导入数据使用
	SetChannelMsgIdAndPts(ctx context.Context, in *ReqSetChannelMsgIdAndPts, opts ...grpc.CallOption) (*ReplySetChannelMsgIdAndPts, error)
	// 自增超级群 pts
	UpdateChannelPts(ctx context.Context, in *ReqUpdateChannelPts, opts ...grpc.CallOption) (*ReplyUpdateChannelPts, error)
	// 自增超级群 pts N次
	UpdateChannelPtsWithNum(ctx context.Context, in *ReqUpdateChannelPtsWithNum, opts ...grpc.CallOption) (*ReplyUpdateChannelPtsWithNum, error)
	// 查询单条 channelmsgid
	GetChannelMsgId(ctx context.Context, in *ReqGetChannelMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMsgId, error)
	// 超级群自增ID 返回自增后的 msgId, pts
	IncreaseChannelId(ctx context.Context, in *ReqIncreaseChannelId, opts ...grpc.CallOption) (*ReplyIncreaseChannelId, error)
	// 获取超级群的自增序列 返回 msgId、pts
	GetChannelIncreaseId(ctx context.Context, in *ReqGetChannelIncreaseId, opts ...grpc.CallOption) (*ReplyGetChannelIncreaseId, error)
	// 查询多条 channelmsgId
	GetChannelIncreaseIds(ctx context.Context, in *ReqGetChannelIncreaseIds, opts ...grpc.CallOption) (*ReplyGetChannelIncreaseIds, error)
	// =========================================== ptsHandle =========================================================
	// 存储 pts 信息 只需要存储到boltdb即可，不用存储到tidb
	StoreChannelPtsHandle(ctx context.Context, in *ReqStoreChannelPtsHandle, opts ...grpc.CallOption) (*ReplyErr, error)
	// 批量存储pts信息
	BatchStoreChannelPtsHandle(ctx context.Context, in *ReqBatchStoreChannelPtsHandle, opts ...grpc.CallOption) (*ReplyErr, error)
	// 获取某个超级群的diff
	GetChannelDiffByPts(ctx context.Context, in *ReqGetChannelDiffByPts, opts ...grpc.CallOption) (*ReplyGetChannelDiffByPts, error)
	// 获取最后的PtsHandle
	GetChannelLastPtsHandle(ctx context.Context, in *ReqGetChannelLastPtsHandle, opts ...grpc.CallOption) (*ReplyGetChannelLastPtsHandle, error)
	// 删除ptsHandle
	DeleteChannelPtsHandle(ctx context.Context, in *ReqDeleteChannelPtsHandle, opts ...grpc.CallOption) (*ReplyDeleteChannelPtsHandle, error)
	// =========================================== ChannelMsg =========================================================
	// 新增或者更新消息
	InsertOrUpdateChannelMsg(ctx context.Context, in *ReqInsertOrUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error)
	// 更新消息内容
	UpdateChannelMsg(ctx context.Context, in *ReqUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error)
	// 批量存储消息
	BatchInsertOrUpdateChannelMsg(ctx context.Context, in *ReqBatchInsertOrUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error)
	// 删除信息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteMsgs(ctx context.Context, in *ReqDeleteMsgs, opts ...grpc.CallOption) (*ReplyDeleteMsgs, error)
	// 超级群中删除指定用户信息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteUserHistory(ctx context.Context, in *ReqDeleteUserHistory, opts ...grpc.CallOption) (*ReplyDeleteUserHistory, error)
	// 删除超级群所有消息
	DeleteChannelMsg(ctx context.Context, in *ReqDeleteChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error)
	// 删除单条超级群消息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteChannelMessage(ctx context.Context, in *ReqDeleteChannelMessage, opts ...grpc.CallOption) (*ReplyDeleteChannelMessage, error)
	// 获取指定msgid信息
	GetChannelMessage(ctx context.Context, in *ReqGetChannelMessage, opts ...grpc.CallOption) (*ReplyGetChannelMessage, error)
	// 获取一组信息
	GetChannelMsgsByMsgIds(ctx context.Context, in *ReqGetChannelMsgsByMsgIds, opts ...grpc.CallOption) (*ReplyGetChannelMsgsByMsgIds, error)
	// 获取历史
	GetChannelMsgHistory(ctx context.Context, in *ReqGetChannelMsgHistory, opts ...grpc.CallOption) (*ReplyGetChannelMsgHistory, error)
	// 获取超级群中最新的一条消息
	GetChannelTopMsg(ctx context.Context, in *ReqGetChannelTopMst, opts ...grpc.CallOption) (*ReplyGetChannelTopMst, error)
	// 获取超级群中最新的一条消息
	GetChannelTopMsg2(ctx context.Context, in *ReqGetChannelTopMst2, opts ...grpc.CallOption) (*ReplyGetChannelTopMst, error)
	// 分页查询媒体消息
	GetChannelMediaMessageHistoryByMedia(ctx context.Context, in *ReqGetChannelMediaMessageHistoryByMedia, opts ...grpc.CallOption) (*ReplyGetChannelMediaMessageHistoryByMedia, error)
	// 新增或者修改 超级群 标记删除记录
	InsertOrUpdateChannelMessageDeleteMark(ctx context.Context, in *ReqInsertOrUpdateChannelMessageDeleteMark, opts ...grpc.CallOption) (*ReplyInsertOrUpdateChannelMessageDeleteMark, error)
	// 查询 超级群 标记删除记录
	GetChannelMessageDeleteMark(ctx context.Context, in *ReqGetChannelMessageDeleteMark, opts ...grpc.CallOption) (*ReplyGetChannelMessageDeleteMark, error)
	// ==================================== ChannelMediaMessageStatistics ===============================================
	// 根据channelId 获取ChannelMediaMessageStatistics
	GetChannelMediaMessageStatisticsByMedia(ctx context.Context, in *ReqGetChannelMediaMessageStatisticsByMedia, opts ...grpc.CallOption) (*ReplyGetChannelMediaMessageStatisticsByMedia, error)
	// =========================================== channelAdminLog ======================================================
	// 存储adminlog
	StoreAdminLog(ctx context.Context, in *ReqStoreAdminLog, opts ...grpc.CallOption) (*ReplyErr, error)
	// 查询Adminlog 条件 超级群ID
	FindsAdminLogByChannelId(ctx context.Context, in *ReqFindsAdminLogByChannelId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合 过滤集合 用户ID
	FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 过滤集合 用户ID
	FindsAdminLogByChannelIdAndEventFiltersAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 用户ID
	FindsAdminLogByChannelIdAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合 过滤集合
	FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 过滤集合
	FindsAdminLogByChannelIdAndEventFilters(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndEventFilters, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合
	FindsAdminLogByChannelIdAndAdminUsers(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsers, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error)
	// add for channeldb.channel_message_at
	ChannelMessageAtAdd(ctx context.Context, in *ReqChannelMessageAtAdd, opts ...grpc.CallOption) (*ReplyChannelMessageAtAdd, error)
	// get for channeldb.channel_message_at
	ChannelMessageAtGet(ctx context.Context, in *ReqChannelMessageAtGet, opts ...grpc.CallOption) (*ReplyChannelMessageAtGet, error)
	// delete for channeldb.channel_message_at
	ChannelMessageAtDel(ctx context.Context, in *ReqChannelMessageAtDel, opts ...grpc.CallOption) (*ReplyChannelMessageAtDel, error)
	// =================================================== search =======================================================
	SearchMessage(ctx context.Context, in *ReqSearchChannelMsg, opts ...grpc.CallOption) (*ReplySearchChannelMsg, error)
	// =================================================== search =======================================================
	UpdateChannelDialog(ctx context.Context, in *ReqUpdateChannelDialog, opts ...grpc.CallOption) (*ReplyErr, error)
	GetChannelDialogs(ctx context.Context, in *ReqGetChannelDialogs, opts ...grpc.CallOption) (*ReplyGetChannelDialogs, error)
	GetChannelMessageByChannelIdRandomId(ctx context.Context, in *ReqGetChannelMessageByChannelIdRandomId, opts ...grpc.CallOption) (*ReplyGetChannelMessageByChannelIdRandomId, error)
}

type channelDBClient struct {
	cc *grpc.ClientConn
}

func NewChannelDBClient(cc *grpc.ClientConn) ChannelDBClient {
	return &channelDBClient{cc}
}

func (c *channelDBClient) HeartBeating(ctx context.Context, in *ReqHeartBeating, opts ...grpc.CallOption) (*ReplyHeartBeating, error) {
	out := new(ReplyHeartBeating)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/HeartBeating", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) UpdateChannelMsgIdAndPts(ctx context.Context, in *ReqUpdateChannelMsgIdAndPts, opts ...grpc.CallOption) (*ReplyUpdateChannelMsgIdAndPts, error) {
	out := new(ReplyUpdateChannelMsgIdAndPts)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/UpdateChannelMsgIdAndPts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) SetChannelMsgIdAndPts(ctx context.Context, in *ReqSetChannelMsgIdAndPts, opts ...grpc.CallOption) (*ReplySetChannelMsgIdAndPts, error) {
	out := new(ReplySetChannelMsgIdAndPts)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/SetChannelMsgIdAndPts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) UpdateChannelPts(ctx context.Context, in *ReqUpdateChannelPts, opts ...grpc.CallOption) (*ReplyUpdateChannelPts, error) {
	out := new(ReplyUpdateChannelPts)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/UpdateChannelPts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) UpdateChannelPtsWithNum(ctx context.Context, in *ReqUpdateChannelPtsWithNum, opts ...grpc.CallOption) (*ReplyUpdateChannelPtsWithNum, error) {
	out := new(ReplyUpdateChannelPtsWithNum)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/UpdateChannelPtsWithNum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMsgId(ctx context.Context, in *ReqGetChannelMsgId, opts ...grpc.CallOption) (*ReplyGetChannelMsgId, error) {
	out := new(ReplyGetChannelMsgId)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelMsgId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) IncreaseChannelId(ctx context.Context, in *ReqIncreaseChannelId, opts ...grpc.CallOption) (*ReplyIncreaseChannelId, error) {
	out := new(ReplyIncreaseChannelId)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/IncreaseChannelId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelIncreaseId(ctx context.Context, in *ReqGetChannelIncreaseId, opts ...grpc.CallOption) (*ReplyGetChannelIncreaseId, error) {
	out := new(ReplyGetChannelIncreaseId)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelIncreaseId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelIncreaseIds(ctx context.Context, in *ReqGetChannelIncreaseIds, opts ...grpc.CallOption) (*ReplyGetChannelIncreaseIds, error) {
	out := new(ReplyGetChannelIncreaseIds)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelIncreaseIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) StoreChannelPtsHandle(ctx context.Context, in *ReqStoreChannelPtsHandle, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/StoreChannelPtsHandle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) BatchStoreChannelPtsHandle(ctx context.Context, in *ReqBatchStoreChannelPtsHandle, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/BatchStoreChannelPtsHandle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelDiffByPts(ctx context.Context, in *ReqGetChannelDiffByPts, opts ...grpc.CallOption) (*ReplyGetChannelDiffByPts, error) {
	out := new(ReplyGetChannelDiffByPts)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelDiffByPts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelLastPtsHandle(ctx context.Context, in *ReqGetChannelLastPtsHandle, opts ...grpc.CallOption) (*ReplyGetChannelLastPtsHandle, error) {
	out := new(ReplyGetChannelLastPtsHandle)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelLastPtsHandle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteChannelPtsHandle(ctx context.Context, in *ReqDeleteChannelPtsHandle, opts ...grpc.CallOption) (*ReplyDeleteChannelPtsHandle, error) {
	out := new(ReplyDeleteChannelPtsHandle)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/DeleteChannelPtsHandle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) InsertOrUpdateChannelMsg(ctx context.Context, in *ReqInsertOrUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/InsertOrUpdateChannelMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) UpdateChannelMsg(ctx context.Context, in *ReqUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/UpdateChannelMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) BatchInsertOrUpdateChannelMsg(ctx context.Context, in *ReqBatchInsertOrUpdateChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/BatchInsertOrUpdateChannelMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteMsgs(ctx context.Context, in *ReqDeleteMsgs, opts ...grpc.CallOption) (*ReplyDeleteMsgs, error) {
	out := new(ReplyDeleteMsgs)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/DeleteMsgs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteUserHistory(ctx context.Context, in *ReqDeleteUserHistory, opts ...grpc.CallOption) (*ReplyDeleteUserHistory, error) {
	out := new(ReplyDeleteUserHistory)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/DeleteUserHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteChannelMsg(ctx context.Context, in *ReqDeleteChannelMsg, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/DeleteChannelMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) DeleteChannelMessage(ctx context.Context, in *ReqDeleteChannelMessage, opts ...grpc.CallOption) (*ReplyDeleteChannelMessage, error) {
	out := new(ReplyDeleteChannelMessage)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/DeleteChannelMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMessage(ctx context.Context, in *ReqGetChannelMessage, opts ...grpc.CallOption) (*ReplyGetChannelMessage, error) {
	out := new(ReplyGetChannelMessage)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMsgsByMsgIds(ctx context.Context, in *ReqGetChannelMsgsByMsgIds, opts ...grpc.CallOption) (*ReplyGetChannelMsgsByMsgIds, error) {
	out := new(ReplyGetChannelMsgsByMsgIds)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelMsgsByMsgIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMsgHistory(ctx context.Context, in *ReqGetChannelMsgHistory, opts ...grpc.CallOption) (*ReplyGetChannelMsgHistory, error) {
	out := new(ReplyGetChannelMsgHistory)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelMsgHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelTopMsg(ctx context.Context, in *ReqGetChannelTopMst, opts ...grpc.CallOption) (*ReplyGetChannelTopMst, error) {
	out := new(ReplyGetChannelTopMst)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelTopMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelTopMsg2(ctx context.Context, in *ReqGetChannelTopMst2, opts ...grpc.CallOption) (*ReplyGetChannelTopMst, error) {
	out := new(ReplyGetChannelTopMst)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelTopMsg2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMediaMessageHistoryByMedia(ctx context.Context, in *ReqGetChannelMediaMessageHistoryByMedia, opts ...grpc.CallOption) (*ReplyGetChannelMediaMessageHistoryByMedia, error) {
	out := new(ReplyGetChannelMediaMessageHistoryByMedia)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelMediaMessageHistoryByMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) InsertOrUpdateChannelMessageDeleteMark(ctx context.Context, in *ReqInsertOrUpdateChannelMessageDeleteMark, opts ...grpc.CallOption) (*ReplyInsertOrUpdateChannelMessageDeleteMark, error) {
	out := new(ReplyInsertOrUpdateChannelMessageDeleteMark)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/InsertOrUpdateChannelMessageDeleteMark", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMessageDeleteMark(ctx context.Context, in *ReqGetChannelMessageDeleteMark, opts ...grpc.CallOption) (*ReplyGetChannelMessageDeleteMark, error) {
	out := new(ReplyGetChannelMessageDeleteMark)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelMessageDeleteMark", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMediaMessageStatisticsByMedia(ctx context.Context, in *ReqGetChannelMediaMessageStatisticsByMedia, opts ...grpc.CallOption) (*ReplyGetChannelMediaMessageStatisticsByMedia, error) {
	out := new(ReplyGetChannelMediaMessageStatisticsByMedia)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelMediaMessageStatisticsByMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) StoreAdminLog(ctx context.Context, in *ReqStoreAdminLog, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/StoreAdminLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelId(ctx context.Context, in *ReqFindsAdminLogByChannelId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/FindsAdminLogByChannelId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndEventFiltersAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndEventFiltersAndUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndUserId(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndUserId, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsersAndEventFilters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndEventFilters(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndEventFilters, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndEventFilters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) FindsAdminLogByChannelIdAndAdminUsers(ctx context.Context, in *ReqFindsAdminLogByChannelIdAndAdminUsers, opts ...grpc.CallOption) (*ReplyFindsAdminLog, error) {
	out := new(ReplyFindsAdminLog)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) ChannelMessageAtAdd(ctx context.Context, in *ReqChannelMessageAtAdd, opts ...grpc.CallOption) (*ReplyChannelMessageAtAdd, error) {
	out := new(ReplyChannelMessageAtAdd)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/ChannelMessageAtAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) ChannelMessageAtGet(ctx context.Context, in *ReqChannelMessageAtGet, opts ...grpc.CallOption) (*ReplyChannelMessageAtGet, error) {
	out := new(ReplyChannelMessageAtGet)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/ChannelMessageAtGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) ChannelMessageAtDel(ctx context.Context, in *ReqChannelMessageAtDel, opts ...grpc.CallOption) (*ReplyChannelMessageAtDel, error) {
	out := new(ReplyChannelMessageAtDel)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/ChannelMessageAtDel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) SearchMessage(ctx context.Context, in *ReqSearchChannelMsg, opts ...grpc.CallOption) (*ReplySearchChannelMsg, error) {
	out := new(ReplySearchChannelMsg)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/SearchMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) UpdateChannelDialog(ctx context.Context, in *ReqUpdateChannelDialog, opts ...grpc.CallOption) (*ReplyErr, error) {
	out := new(ReplyErr)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/UpdateChannelDialog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelDialogs(ctx context.Context, in *ReqGetChannelDialogs, opts ...grpc.CallOption) (*ReplyGetChannelDialogs, error) {
	out := new(ReplyGetChannelDialogs)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelDialogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelDBClient) GetChannelMessageByChannelIdRandomId(ctx context.Context, in *ReqGetChannelMessageByChannelIdRandomId, opts ...grpc.CallOption) (*ReplyGetChannelMessageByChannelIdRandomId, error) {
	out := new(ReplyGetChannelMessageByChannelIdRandomId)
	err := grpc.Invoke(ctx, "/channeldb.ChannelDB/GetChannelMessageByChannelIdRandomId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChannelDB service

type ChannelDBServer interface {
	// =========================================== HeartBeating =========================================================
	// HeartBeating
	HeartBeating(context.Context, *ReqHeartBeating) (*ReplyHeartBeating, error)
	// =========================================== ChannelMsgId =========================================================
	// 更新超级群 msgid and pts
	UpdateChannelMsgIdAndPts(context.Context, *ReqUpdateChannelMsgIdAndPts) (*ReplyUpdateChannelMsgIdAndPts, error)
	// 直接设置 msgId pts 值 erlang版本导入数据使用
	SetChannelMsgIdAndPts(context.Context, *ReqSetChannelMsgIdAndPts) (*ReplySetChannelMsgIdAndPts, error)
	// 自增超级群 pts
	UpdateChannelPts(context.Context, *ReqUpdateChannelPts) (*ReplyUpdateChannelPts, error)
	// 自增超级群 pts N次
	UpdateChannelPtsWithNum(context.Context, *ReqUpdateChannelPtsWithNum) (*ReplyUpdateChannelPtsWithNum, error)
	// 查询单条 channelmsgid
	GetChannelMsgId(context.Context, *ReqGetChannelMsgId) (*ReplyGetChannelMsgId, error)
	// 超级群自增ID 返回自增后的 msgId, pts
	IncreaseChannelId(context.Context, *ReqIncreaseChannelId) (*ReplyIncreaseChannelId, error)
	// 获取超级群的自增序列 返回 msgId、pts
	GetChannelIncreaseId(context.Context, *ReqGetChannelIncreaseId) (*ReplyGetChannelIncreaseId, error)
	// 查询多条 channelmsgId
	GetChannelIncreaseIds(context.Context, *ReqGetChannelIncreaseIds) (*ReplyGetChannelIncreaseIds, error)
	// =========================================== ptsHandle =========================================================
	// 存储 pts 信息 只需要存储到boltdb即可，不用存储到tidb
	StoreChannelPtsHandle(context.Context, *ReqStoreChannelPtsHandle) (*ReplyErr, error)
	// 批量存储pts信息
	BatchStoreChannelPtsHandle(context.Context, *ReqBatchStoreChannelPtsHandle) (*ReplyErr, error)
	// 获取某个超级群的diff
	GetChannelDiffByPts(context.Context, *ReqGetChannelDiffByPts) (*ReplyGetChannelDiffByPts, error)
	// 获取最后的PtsHandle
	GetChannelLastPtsHandle(context.Context, *ReqGetChannelLastPtsHandle) (*ReplyGetChannelLastPtsHandle, error)
	// 删除ptsHandle
	DeleteChannelPtsHandle(context.Context, *ReqDeleteChannelPtsHandle) (*ReplyDeleteChannelPtsHandle, error)
	// =========================================== ChannelMsg =========================================================
	// 新增或者更新消息
	InsertOrUpdateChannelMsg(context.Context, *ReqInsertOrUpdateChannelMsg) (*ReplyErr, error)
	// 更新消息内容
	UpdateChannelMsg(context.Context, *ReqUpdateChannelMsg) (*ReplyErr, error)
	// 批量存储消息
	BatchInsertOrUpdateChannelMsg(context.Context, *ReqBatchInsertOrUpdateChannelMsg) (*ReplyErr, error)
	// 删除信息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteMsgs(context.Context, *ReqDeleteMsgs) (*ReplyDeleteMsgs, error)
	// 超级群中删除指定用户信息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteUserHistory(context.Context, *ReqDeleteUserHistory) (*ReplyDeleteUserHistory, error)
	// 删除超级群所有消息
	DeleteChannelMsg(context.Context, *ReqDeleteChannelMsg) (*ReplyErr, error)
	// 删除单条超级群消息 判断返回的 updateDate 字段是否为0 更新messagedb的dialog 信息
	DeleteChannelMessage(context.Context, *ReqDeleteChannelMessage) (*ReplyDeleteChannelMessage, error)
	// 获取指定msgid信息
	GetChannelMessage(context.Context, *ReqGetChannelMessage) (*ReplyGetChannelMessage, error)
	// 获取一组信息
	GetChannelMsgsByMsgIds(context.Context, *ReqGetChannelMsgsByMsgIds) (*ReplyGetChannelMsgsByMsgIds, error)
	// 获取历史
	GetChannelMsgHistory(context.Context, *ReqGetChannelMsgHistory) (*ReplyGetChannelMsgHistory, error)
	// 获取超级群中最新的一条消息
	GetChannelTopMsg(context.Context, *ReqGetChannelTopMst) (*ReplyGetChannelTopMst, error)
	// 获取超级群中最新的一条消息
	GetChannelTopMsg2(context.Context, *ReqGetChannelTopMst2) (*ReplyGetChannelTopMst, error)
	// 分页查询媒体消息
	GetChannelMediaMessageHistoryByMedia(context.Context, *ReqGetChannelMediaMessageHistoryByMedia) (*ReplyGetChannelMediaMessageHistoryByMedia, error)
	// 新增或者修改 超级群 标记删除记录
	InsertOrUpdateChannelMessageDeleteMark(context.Context, *ReqInsertOrUpdateChannelMessageDeleteMark) (*ReplyInsertOrUpdateChannelMessageDeleteMark, error)
	// 查询 超级群 标记删除记录
	GetChannelMessageDeleteMark(context.Context, *ReqGetChannelMessageDeleteMark) (*ReplyGetChannelMessageDeleteMark, error)
	// ==================================== ChannelMediaMessageStatistics ===============================================
	// 根据channelId 获取ChannelMediaMessageStatistics
	GetChannelMediaMessageStatisticsByMedia(context.Context, *ReqGetChannelMediaMessageStatisticsByMedia) (*ReplyGetChannelMediaMessageStatisticsByMedia, error)
	// =========================================== channelAdminLog ======================================================
	// 存储adminlog
	StoreAdminLog(context.Context, *ReqStoreAdminLog) (*ReplyErr, error)
	// 查询Adminlog 条件 超级群ID
	FindsAdminLogByChannelId(context.Context, *ReqFindsAdminLogByChannelId) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合 过滤集合 用户ID
	FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(context.Context, *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 过滤集合 用户ID
	FindsAdminLogByChannelIdAndEventFiltersAndUserId(context.Context, *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 用户ID
	FindsAdminLogByChannelIdAndUserId(context.Context, *ReqFindsAdminLogByChannelIdAndUserId) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合 过滤集合
	FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(context.Context, *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 过滤集合
	FindsAdminLogByChannelIdAndEventFilters(context.Context, *ReqFindsAdminLogByChannelIdAndEventFilters) (*ReplyFindsAdminLog, error)
	// 查询Adminlog 条件 超级群ID 管理员用户集合
	FindsAdminLogByChannelIdAndAdminUsers(context.Context, *ReqFindsAdminLogByChannelIdAndAdminUsers) (*ReplyFindsAdminLog, error)
	// add for channeldb.channel_message_at
	ChannelMessageAtAdd(context.Context, *ReqChannelMessageAtAdd) (*ReplyChannelMessageAtAdd, error)
	// get for channeldb.channel_message_at
	ChannelMessageAtGet(context.Context, *ReqChannelMessageAtGet) (*ReplyChannelMessageAtGet, error)
	// delete for channeldb.channel_message_at
	ChannelMessageAtDel(context.Context, *ReqChannelMessageAtDel) (*ReplyChannelMessageAtDel, error)
	// =================================================== search =======================================================
	SearchMessage(context.Context, *ReqSearchChannelMsg) (*ReplySearchChannelMsg, error)
	// =================================================== search =======================================================
	UpdateChannelDialog(context.Context, *ReqUpdateChannelDialog) (*ReplyErr, error)
	GetChannelDialogs(context.Context, *ReqGetChannelDialogs) (*ReplyGetChannelDialogs, error)
	GetChannelMessageByChannelIdRandomId(context.Context, *ReqGetChannelMessageByChannelIdRandomId) (*ReplyGetChannelMessageByChannelIdRandomId, error)
}

func RegisterChannelDBServer(s *grpc.Server, srv ChannelDBServer) {
	s.RegisterService(&_ChannelDB_serviceDesc, srv)
}

func _ChannelDB_HeartBeating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHeartBeating)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).HeartBeating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/HeartBeating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).HeartBeating(ctx, req.(*ReqHeartBeating))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_UpdateChannelMsgIdAndPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelMsgIdAndPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelMsgIdAndPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/UpdateChannelMsgIdAndPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelMsgIdAndPts(ctx, req.(*ReqUpdateChannelMsgIdAndPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_SetChannelMsgIdAndPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetChannelMsgIdAndPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).SetChannelMsgIdAndPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/SetChannelMsgIdAndPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).SetChannelMsgIdAndPts(ctx, req.(*ReqSetChannelMsgIdAndPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_UpdateChannelPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/UpdateChannelPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelPts(ctx, req.(*ReqUpdateChannelPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_UpdateChannelPtsWithNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelPtsWithNum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelPtsWithNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/UpdateChannelPtsWithNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelPtsWithNum(ctx, req.(*ReqUpdateChannelPtsWithNum))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMsgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMsgId(ctx, req.(*ReqGetChannelMsgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_IncreaseChannelId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqIncreaseChannelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).IncreaseChannelId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/IncreaseChannelId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).IncreaseChannelId(ctx, req.(*ReqIncreaseChannelId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelIncreaseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelIncreaseId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelIncreaseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelIncreaseId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelIncreaseId(ctx, req.(*ReqGetChannelIncreaseId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelIncreaseIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelIncreaseIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelIncreaseIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelIncreaseIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelIncreaseIds(ctx, req.(*ReqGetChannelIncreaseIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_StoreChannelPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoreChannelPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).StoreChannelPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/StoreChannelPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).StoreChannelPtsHandle(ctx, req.(*ReqStoreChannelPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_BatchStoreChannelPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBatchStoreChannelPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).BatchStoreChannelPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/BatchStoreChannelPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).BatchStoreChannelPtsHandle(ctx, req.(*ReqBatchStoreChannelPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelDiffByPts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelDiffByPts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelDiffByPts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelDiffByPts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelDiffByPts(ctx, req.(*ReqGetChannelDiffByPts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelLastPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelLastPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelLastPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelLastPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelLastPtsHandle(ctx, req.(*ReqGetChannelLastPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteChannelPtsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelPtsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteChannelPtsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/DeleteChannelPtsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteChannelPtsHandle(ctx, req.(*ReqDeleteChannelPtsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_InsertOrUpdateChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInsertOrUpdateChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).InsertOrUpdateChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/InsertOrUpdateChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).InsertOrUpdateChannelMsg(ctx, req.(*ReqInsertOrUpdateChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_UpdateChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/UpdateChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelMsg(ctx, req.(*ReqUpdateChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_BatchInsertOrUpdateChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBatchInsertOrUpdateChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).BatchInsertOrUpdateChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/BatchInsertOrUpdateChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).BatchInsertOrUpdateChannelMsg(ctx, req.(*ReqBatchInsertOrUpdateChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteMsgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteMsgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteMsgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/DeleteMsgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteMsgs(ctx, req.(*ReqDeleteMsgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteUserHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteUserHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteUserHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/DeleteUserHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteUserHistory(ctx, req.(*ReqDeleteUserHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteChannelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteChannelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/DeleteChannelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteChannelMsg(ctx, req.(*ReqDeleteChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_DeleteChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteChannelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).DeleteChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/DeleteChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).DeleteChannelMessage(ctx, req.(*ReqDeleteChannelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMessage(ctx, req.(*ReqGetChannelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMsgsByMsgIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMsgsByMsgIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMsgsByMsgIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelMsgsByMsgIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMsgsByMsgIds(ctx, req.(*ReqGetChannelMsgsByMsgIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMsgHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMsgHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMsgHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelMsgHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMsgHistory(ctx, req.(*ReqGetChannelMsgHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelTopMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelTopMst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelTopMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelTopMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelTopMsg(ctx, req.(*ReqGetChannelTopMst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelTopMsg2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelTopMst2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelTopMsg2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelTopMsg2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelTopMsg2(ctx, req.(*ReqGetChannelTopMst2))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMediaMessageHistoryByMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMediaMessageHistoryByMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMediaMessageHistoryByMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelMediaMessageHistoryByMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMediaMessageHistoryByMedia(ctx, req.(*ReqGetChannelMediaMessageHistoryByMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_InsertOrUpdateChannelMessageDeleteMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInsertOrUpdateChannelMessageDeleteMark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).InsertOrUpdateChannelMessageDeleteMark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/InsertOrUpdateChannelMessageDeleteMark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).InsertOrUpdateChannelMessageDeleteMark(ctx, req.(*ReqInsertOrUpdateChannelMessageDeleteMark))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMessageDeleteMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMessageDeleteMark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMessageDeleteMark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelMessageDeleteMark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMessageDeleteMark(ctx, req.(*ReqGetChannelMessageDeleteMark))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMediaMessageStatisticsByMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMediaMessageStatisticsByMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMediaMessageStatisticsByMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelMediaMessageStatisticsByMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMediaMessageStatisticsByMedia(ctx, req.(*ReqGetChannelMediaMessageStatisticsByMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_StoreAdminLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStoreAdminLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).StoreAdminLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/StoreAdminLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).StoreAdminLog(ctx, req.(*ReqStoreAdminLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/FindsAdminLogByChannelId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelId(ctx, req.(*ReqFindsAdminLogByChannelId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId(ctx, req.(*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndEventFiltersAndUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndEventFiltersAndUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndEventFiltersAndUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndEventFiltersAndUserId(ctx, req.(*ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndUserId(ctx, req.(*ReqFindsAdminLogByChannelIdAndUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndAdminUsersAndEventFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsersAndEventFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsersAndEventFilters(ctx, req.(*ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndEventFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndEventFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndEventFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndEventFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndEventFilters(ctx, req.(*ReqFindsAdminLogByChannelIdAndEventFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_FindsAdminLogByChannelIdAndAdminUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindsAdminLogByChannelIdAndAdminUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/FindsAdminLogByChannelIdAndAdminUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).FindsAdminLogByChannelIdAndAdminUsers(ctx, req.(*ReqFindsAdminLogByChannelIdAndAdminUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_ChannelMessageAtAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelMessageAtAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).ChannelMessageAtAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/ChannelMessageAtAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).ChannelMessageAtAdd(ctx, req.(*ReqChannelMessageAtAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_ChannelMessageAtGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelMessageAtGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).ChannelMessageAtGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/ChannelMessageAtGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).ChannelMessageAtGet(ctx, req.(*ReqChannelMessageAtGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_ChannelMessageAtDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelMessageAtDel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).ChannelMessageAtDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/ChannelMessageAtDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).ChannelMessageAtDel(ctx, req.(*ReqChannelMessageAtDel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_SearchMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSearchChannelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).SearchMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/SearchMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).SearchMessage(ctx, req.(*ReqSearchChannelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_UpdateChannelDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateChannelDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).UpdateChannelDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/UpdateChannelDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).UpdateChannelDialog(ctx, req.(*ReqUpdateChannelDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelDialogs(ctx, req.(*ReqGetChannelDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelDB_GetChannelMessageByChannelIdRandomId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetChannelMessageByChannelIdRandomId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelDBServer).GetChannelMessageByChannelIdRandomId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/channeldb.ChannelDB/GetChannelMessageByChannelIdRandomId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelDBServer).GetChannelMessageByChannelIdRandomId(ctx, req.(*ReqGetChannelMessageByChannelIdRandomId))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChannelDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "channeldb.ChannelDB",
	HandlerType: (*ChannelDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartBeating",
			Handler:    _ChannelDB_HeartBeating_Handler,
		},
		{
			MethodName: "UpdateChannelMsgIdAndPts",
			Handler:    _ChannelDB_UpdateChannelMsgIdAndPts_Handler,
		},
		{
			MethodName: "SetChannelMsgIdAndPts",
			Handler:    _ChannelDB_SetChannelMsgIdAndPts_Handler,
		},
		{
			MethodName: "UpdateChannelPts",
			Handler:    _ChannelDB_UpdateChannelPts_Handler,
		},
		{
			MethodName: "UpdateChannelPtsWithNum",
			Handler:    _ChannelDB_UpdateChannelPtsWithNum_Handler,
		},
		{
			MethodName: "GetChannelMsgId",
			Handler:    _ChannelDB_GetChannelMsgId_Handler,
		},
		{
			MethodName: "IncreaseChannelId",
			Handler:    _ChannelDB_IncreaseChannelId_Handler,
		},
		{
			MethodName: "GetChannelIncreaseId",
			Handler:    _ChannelDB_GetChannelIncreaseId_Handler,
		},
		{
			MethodName: "GetChannelIncreaseIds",
			Handler:    _ChannelDB_GetChannelIncreaseIds_Handler,
		},
		{
			MethodName: "StoreChannelPtsHandle",
			Handler:    _ChannelDB_StoreChannelPtsHandle_Handler,
		},
		{
			MethodName: "BatchStoreChannelPtsHandle",
			Handler:    _ChannelDB_BatchStoreChannelPtsHandle_Handler,
		},
		{
			MethodName: "GetChannelDiffByPts",
			Handler:    _ChannelDB_GetChannelDiffByPts_Handler,
		},
		{
			MethodName: "GetChannelLastPtsHandle",
			Handler:    _ChannelDB_GetChannelLastPtsHandle_Handler,
		},
		{
			MethodName: "DeleteChannelPtsHandle",
			Handler:    _ChannelDB_DeleteChannelPtsHandle_Handler,
		},
		{
			MethodName: "InsertOrUpdateChannelMsg",
			Handler:    _ChannelDB_InsertOrUpdateChannelMsg_Handler,
		},
		{
			MethodName: "UpdateChannelMsg",
			Handler:    _ChannelDB_UpdateChannelMsg_Handler,
		},
		{
			MethodName: "BatchInsertOrUpdateChannelMsg",
			Handler:    _ChannelDB_BatchInsertOrUpdateChannelMsg_Handler,
		},
		{
			MethodName: "DeleteMsgs",
			Handler:    _ChannelDB_DeleteMsgs_Handler,
		},
		{
			MethodName: "DeleteUserHistory",
			Handler:    _ChannelDB_DeleteUserHistory_Handler,
		},
		{
			MethodName: "DeleteChannelMsg",
			Handler:    _ChannelDB_DeleteChannelMsg_Handler,
		},
		{
			MethodName: "DeleteChannelMessage",
			Handler:    _ChannelDB_DeleteChannelMessage_Handler,
		},
		{
			MethodName: "GetChannelMessage",
			Handler:    _ChannelDB_GetChannelMessage_Handler,
		},
		{
			MethodName: "GetChannelMsgsByMsgIds",
			Handler:    _ChannelDB_GetChannelMsgsByMsgIds_Handler,
		},
		{
			MethodName: "GetChannelMsgHistory",
			Handler:    _ChannelDB_GetChannelMsgHistory_Handler,
		},
		{
			MethodName: "GetChannelTopMsg",
			Handler:    _ChannelDB_GetChannelTopMsg_Handler,
		},
		{
			MethodName: "GetChannelTopMsg2",
			Handler:    _ChannelDB_GetChannelTopMsg2_Handler,
		},
		{
			MethodName: "GetChannelMediaMessageHistoryByMedia",
			Handler:    _ChannelDB_GetChannelMediaMessageHistoryByMedia_Handler,
		},
		{
			MethodName: "InsertOrUpdateChannelMessageDeleteMark",
			Handler:    _ChannelDB_InsertOrUpdateChannelMessageDeleteMark_Handler,
		},
		{
			MethodName: "GetChannelMessageDeleteMark",
			Handler:    _ChannelDB_GetChannelMessageDeleteMark_Handler,
		},
		{
			MethodName: "GetChannelMediaMessageStatisticsByMedia",
			Handler:    _ChannelDB_GetChannelMediaMessageStatisticsByMedia_Handler,
		},
		{
			MethodName: "StoreAdminLog",
			Handler:    _ChannelDB_StoreAdminLog_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelId",
			Handler:    _ChannelDB_FindsAdminLogByChannelId_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndEventFiltersAndUserId",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndEventFiltersAndUserId_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndUserId",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndUserId_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndAdminUsersAndEventFilters",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndAdminUsersAndEventFilters_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndEventFilters",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndEventFilters_Handler,
		},
		{
			MethodName: "FindsAdminLogByChannelIdAndAdminUsers",
			Handler:    _ChannelDB_FindsAdminLogByChannelIdAndAdminUsers_Handler,
		},
		{
			MethodName: "ChannelMessageAtAdd",
			Handler:    _ChannelDB_ChannelMessageAtAdd_Handler,
		},
		{
			MethodName: "ChannelMessageAtGet",
			Handler:    _ChannelDB_ChannelMessageAtGet_Handler,
		},
		{
			MethodName: "ChannelMessageAtDel",
			Handler:    _ChannelDB_ChannelMessageAtDel_Handler,
		},
		{
			MethodName: "SearchMessage",
			Handler:    _ChannelDB_SearchMessage_Handler,
		},
		{
			MethodName: "UpdateChannelDialog",
			Handler:    _ChannelDB_UpdateChannelDialog_Handler,
		},
		{
			MethodName: "GetChannelDialogs",
			Handler:    _ChannelDB_GetChannelDialogs_Handler,
		},
		{
			MethodName: "GetChannelMessageByChannelIdRandomId",
			Handler:    _ChannelDB_GetChannelMessageByChannelIdRandomId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.chatserver.im/interfaceprobuf/channeldb/channeldb.proto",
}

func (m *ReplyNull) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyNull) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ChannelMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Id))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MsgId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Pts))
	}
	if m.LastDate != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.LastDate))
	}
	return i, nil
}

func (m *ChannelPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.UserIds) > 0 {
		dAtA2 := make([]byte, len(m.UserIds)*10)
		var j1 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.Pts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Pts))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Date != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Date))
	}
	return i, nil
}

func (m *UserMsgListAndPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMsgListAndPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserMsgs) > 0 {
		for _, msg := range m.UserMsgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChanneldb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Pts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Pts))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *MsgsAndMaxId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgsAndMaxId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MaxMsgId))
	}
	if len(m.Msgs) > 0 {
		dAtA4 := make([]byte, len(m.Msgs)*10)
		var j3 int
		for _, num1 := range m.Msgs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *ReplyErr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyErr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.ErrMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(len(m.ErrMsg)))
		i += copy(dAtA[i:], m.ErrMsg)
	}
	return i, nil
}

func (m *ReqHeartBeating) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqHeartBeating) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Type))
	}
	if m.Identification != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Identification))
	}
	return i, nil
}

func (m *ReplyHeartBeating) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyHeartBeating) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Type))
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *ReqUpdateChannelMsgIdAndPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateChannelMsgIdAndPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n5, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *ReplyUpdateChannelMsgIdAndPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUpdateChannelMsgIdAndPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelMsgId.Size()))
		n6, err := m.ChannelMsgId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n7, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *ReqSetChannelMsgIdAndPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSetChannelMsgIdAndPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelMsgId.Size()))
		n8, err := m.ChannelMsgId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n9, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *ReplySetChannelMsgIdAndPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplySetChannelMsgIdAndPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyErr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n10, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *ReqUpdateChannelPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateChannelPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n11, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *ReplyUpdateChannelPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUpdateChannelPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelMsgId.Size()))
		n12, err := m.ChannelMsgId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n13, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *ReqUpdateChannelPtsWithNum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateChannelPtsWithNum) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Number != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Number))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n14, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *ReplyUpdateChannelPtsWithNum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyUpdateChannelPtsWithNum) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelMsgId.Size()))
		n15, err := m.ChannelMsgId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n16, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *ReqGetChannelMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n17, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *ReplyGetChannelMsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelMsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelMsgId.Size()))
		n18, err := m.ChannelMsgId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n19, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *ReqStoreChannelPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqStoreChannelPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelPtsHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelPtsHandle.Size()))
		n20, err := m.ChannelPtsHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n21, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *ReqBatchStoreChannelPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBatchStoreChannelPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelPtsHandles) > 0 {
		for _, msg := range m.ChannelPtsHandles {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChanneldb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n22, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *ReqGetChannelDiffByPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelDiffByPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Pts))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Limit))
	}
	if m.MinId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MinId))
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MaxId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n23, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *ReplyGetChannelDiffByPts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelDiffByPts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsFianl {
		dAtA[i] = 0x8
		i++
		if m.IsFianl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ToLong {
		dAtA[i] = 0x10
		i++
		if m.ToLong {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Pts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Pts))
	}
	if m.TopMsgId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.TopMsgId))
	}
	if len(m.Msgs) > 0 {
		for _, b := range m.Msgs {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintChanneldb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n24, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *ReqGetChannelLastPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelLastPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n25, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func (m *ReplyGetChannelLastPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelLastPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelPtsHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelPtsHandle.Size()))
		n26, err := m.ChannelPtsHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n27, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *ReqDeleteChannelPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteChannelPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Pts))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n28, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *ReplyDeleteChannelPtsHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeleteChannelPtsHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n29, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *ReqInsertOrUpdateChannelMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqInsertOrUpdateChannelMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserMsg.Size()))
		n30, err := m.UserMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n31, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *ReqUpdateChannelMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateChannelMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserMsg.Size()))
		n32, err := m.UserMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n33, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func (m *ReqBatchInsertOrUpdateChannelMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqBatchInsertOrUpdateChannelMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserMsgs) > 0 {
		for _, msg := range m.UserMsgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChanneldb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n34, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *ReqDeleteMsgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteMsgs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.MsgIds) > 0 {
		dAtA36 := make([]byte, len(m.MsgIds)*10)
		var j35 int
		for _, num1 := range m.MsgIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA36[j35] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j35++
			}
			dAtA36[j35] = uint8(num)
			j35++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(j35))
		i += copy(dAtA[i:], dAtA36[:j35])
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n37, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}

func (m *ReplyDeleteMsgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeleteMsgs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurentMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.CurentMsgId))
	}
	if m.UpdateDate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UpdateDate))
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n38, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}

func (m *ReqDeleteUserHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteUserHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n39, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}

func (m *ReplyDeleteUserHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeleteUserHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgsAndMaxId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MsgsAndMaxId.Size()))
		n40, err := m.MsgsAndMaxId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if len(m.Ptss) > 0 {
		dAtA42 := make([]byte, len(m.Ptss)*10)
		var j41 int
		for _, num1 := range m.Ptss {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA42[j41] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j41++
			}
			dAtA42[j41] = uint8(num)
			j41++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(j41))
		i += copy(dAtA[i:], dAtA42[:j41])
	}
	if m.UpdateDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UpdateDate))
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n43, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}

func (m *ReqDeleteChannelMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteChannelMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n44, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}

func (m *ReqDeleteChannelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqDeleteChannelMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MsgId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n45, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}

func (m *ReplyDeleteChannelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyDeleteChannelMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserId))
	}
	if m.CurrentMsgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.CurrentMsgId))
	}
	if m.UpdateDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UpdateDate))
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n46, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}

func (m *ReqGetChannelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MsgId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n47, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}

func (m *ReplyGetChannelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserMsg.Size()))
		n48, err := m.UserMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n49, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}

func (m *ReqGetChannelMsgsByMsgIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMsgsByMsgIds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.MsgIds) > 0 {
		dAtA51 := make([]byte, len(m.MsgIds)*10)
		var j50 int
		for _, num1 := range m.MsgIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA51[j50] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j50++
			}
			dAtA51[j50] = uint8(num)
			j50++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(j50))
		i += copy(dAtA[i:], dAtA51[:j50])
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n52, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}

func (m *ReplyGetChannelMsgsByMsgIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelMsgsByMsgIds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMsgListAndPts != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserMsgListAndPts.Size()))
		n53, err := m.UserMsgListAndPts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n54, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}

func (m *ReqGetChannelMsgHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMsgHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.OffsetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.OffsetId))
	}
	if m.OffsetDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.OffsetDate))
	}
	if m.AddOffset != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.AddOffset))
	}
	if m.MinId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MinId))
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MaxId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Limit))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Encry))
	}
	if m.DeleteMark != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.DeleteMark))
	}
	if m.Debug != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n55, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	return i, nil
}

func (m *ReplyGetChannelMsgHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelMsgHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMsgListAndPts != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserMsgListAndPts.Size()))
		n56, err := m.UserMsgListAndPts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n57, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	return i, nil
}

func (m *ReqGetChannelTopMst) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelTopMst) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n58, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}

func (m *ReqGetChannelTopMst2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelTopMst2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n59, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	return i, nil
}

func (m *ReplyGetChannelTopMst) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelTopMst) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserMsg.Size()))
		n60, err := m.UserMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n61, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	return i, nil
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserId))
	}
	if len(m.Medias) > 0 {
		dAtA63 := make([]byte, len(m.Medias)*10)
		var j62 int
		for _, num1 := range m.Medias {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA63[j62] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j62++
			}
			dAtA63[j62] = uint8(num)
			j62++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(j62))
		i += copy(dAtA[i:], dAtA63[:j62])
	}
	if m.MaxId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MaxId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Limit))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Encry))
	}
	return i, nil
}

func (m *ReqGetChannelMediaMessageHistoryByMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMediaMessageHistoryByMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GetChannelMediaMessageHistoryByMediaConfig != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.GetChannelMediaMessageHistoryByMediaConfig.Size()))
		n64, err := m.GetChannelMediaMessageHistoryByMediaConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n65, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	return i, nil
}

func (m *ReplyGetChannelMediaMessageHistoryByMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelMediaMessageHistoryByMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelMsgs) > 0 {
		for _, msg := range m.ChannelMsgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChanneldb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n66, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	return i, nil
}

func (m *ChannelMessageDeleteMark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelMessageDeleteMark) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MsgId))
	}
	return i, nil
}

func (m *ReqInsertOrUpdateChannelMessageDeleteMark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqInsertOrUpdateChannelMessageDeleteMark) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMessageDeleteMark != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelMessageDeleteMark.Size()))
		n67, err := m.ChannelMessageDeleteMark.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n68, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	return i, nil
}

func (m *ReplyInsertOrUpdateChannelMessageDeleteMark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyInsertOrUpdateChannelMessageDeleteMark) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyErr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n69, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	return i, nil
}

func (m *ReqGetChannelMessageDeleteMark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMessageDeleteMark) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserId))
	}
	if m.ChannelID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelID))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n70, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	return i, nil
}

func (m *ReplyGetChannelMessageDeleteMark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelMessageDeleteMark) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMessageDeleteMark != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelMessageDeleteMark.Size()))
		n71, err := m.ChannelMessageDeleteMark.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n72, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	return i, nil
}

func (m *ChannelMediaMessageStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelMediaMessageStatistics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Media != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Media))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *ReqGetChannelMediaMessageStatisticsByMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMediaMessageStatisticsByMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Media != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Media))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n73, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	return i, nil
}

func (m *ReplyGetChannelMediaMessageStatisticsByMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelMediaMessageStatisticsByMedia) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelMediaMessageStatistics != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelMediaMessageStatistics.Size()))
		n74, err := m.ChannelMediaMessageStatistics.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n75, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}

func (m *ChannelAdminLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelAdminLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ActionId))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.AdminUserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.AdminUserId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserId))
	}
	if m.ActionType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ActionType))
	}
	if len(m.AdminLog) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(len(m.AdminLog)))
		i += copy(dAtA[i:], m.AdminLog)
	}
	if m.Date != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Date))
	}
	return i, nil
}

func (m *ReqStoreAdminLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqStoreAdminLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelAdminLog != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelAdminLog.Size()))
		n76, err := m.ChannelAdminLog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n77, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}

func (m *ReqFindsAdminLogByChannelId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFindsAdminLogByChannelId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n78, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}

func (m *ReplyFindsAdminLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyFindsAdminLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AdminLogs) > 0 {
		for _, msg := range m.AdminLogs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChanneldb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n79, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n79
	}
	return i, nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserId))
	}
	if len(m.AdminUsers) > 0 {
		dAtA81 := make([]byte, len(m.AdminUsers)*10)
		var j80 int
		for _, num1 := range m.AdminUsers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA81[j80] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j80++
			}
			dAtA81[j80] = uint8(num)
			j80++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(j80))
		i += copy(dAtA[i:], dAtA81[:j80])
	}
	if len(m.EventFilters) > 0 {
		dAtA83 := make([]byte, len(m.EventFilters)*10)
		var j82 int
		for _, num1 := range m.EventFilters {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA83[j82] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j82++
			}
			dAtA83[j82] = uint8(num)
			j82++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(j82))
		i += copy(dAtA[i:], dAtA83[:j82])
	}
	if m.Limit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n84, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	return i, nil
}

func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserId))
	}
	if len(m.EventFilters) > 0 {
		dAtA86 := make([]byte, len(m.EventFilters)*10)
		var j85 int
		for _, num1 := range m.EventFilters {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA86[j85] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j85++
			}
			dAtA86[j85] = uint8(num)
			j85++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(j85))
		i += copy(dAtA[i:], dAtA86[:j85])
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n87, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n87
	}
	return i, nil
}

func (m *ReqFindsAdminLogByChannelIdAndUserId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFindsAdminLogByChannelIdAndUserId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n88, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n88
	}
	return i, nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.AdminUsers) > 0 {
		dAtA90 := make([]byte, len(m.AdminUsers)*10)
		var j89 int
		for _, num1 := range m.AdminUsers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA90[j89] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j89++
			}
			dAtA90[j89] = uint8(num)
			j89++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(j89))
		i += copy(dAtA[i:], dAtA90[:j89])
	}
	if len(m.EventFilters) > 0 {
		dAtA92 := make([]byte, len(m.EventFilters)*10)
		var j91 int
		for _, num1 := range m.EventFilters {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA92[j91] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j91++
			}
			dAtA92[j91] = uint8(num)
			j91++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(j91))
		i += copy(dAtA[i:], dAtA92[:j91])
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n93, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n93
	}
	return i, nil
}

func (m *ReqFindsAdminLogByChannelIdAndEventFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFindsAdminLogByChannelIdAndEventFilters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.EventFilters) > 0 {
		dAtA95 := make([]byte, len(m.EventFilters)*10)
		var j94 int
		for _, num1 := range m.EventFilters {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA95[j94] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j94++
			}
			dAtA95[j94] = uint8(num)
			j94++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(j94))
		i += copy(dAtA[i:], dAtA95[:j94])
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n96, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n96
	}
	return i, nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if len(m.AdminUsers) > 0 {
		dAtA98 := make([]byte, len(m.AdminUsers)*10)
		var j97 int
		for _, num1 := range m.AdminUsers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA98[j97] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j97++
			}
			dAtA98[j97] = uint8(num)
			j97++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(j97))
		i += copy(dAtA[i:], dAtA98[:j97])
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n99, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n99
	}
	return i, nil
}

func (m *ReqChannelMessageAtAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChannelMessageAtAdd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.WithId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MsgId))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Encry))
	}
	if m.Debug != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n100, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n100
	}
	return i, nil
}

func (m *ReplyChannelMessageAtAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannelMessageAtAdd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyErr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n101, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n101
	}
	return i, nil
}

func (m *ReqChannelMessageAtGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChannelMessageAtGet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.WithId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MsgId))
	}
	if m.AddOffset != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.AddOffset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Limit))
	}
	if m.Debug != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n102, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n102
	}
	return i, nil
}

func (m *ReplyChannelMessageAtGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannelMessageAtGet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChanneldb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n103, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n103
	}
	return i, nil
}

func (m *ReqChannelMessageAtDel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqChannelMessageAtDel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.WithId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MsgId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n104, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n104
	}
	return i, nil
}

func (m *ReplyChannelMessageAtDel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyChannelMessageAtDel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplyErr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n105, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n105
	}
	return i, nil
}

func (m *ChannelLocalId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelLocalId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.LocalId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.LocalId))
	}
	return i, nil
}

func (m *ReqIncreaseChannelLocalId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqIncreaseChannelLocalId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n106, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n106
	}
	return i, nil
}

func (m *ReplyIncreaseChannelLocalId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyIncreaseChannelLocalId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelLocalId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelLocalId.Size()))
		n107, err := m.ChannelLocalId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n107
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n108, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n108
	}
	return i, nil
}

func (m *ReqGetCurrentChannelLocalId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetCurrentChannelLocalId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.Debug != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Debug.Size()))
		n109, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n109
	}
	return i, nil
}

func (m *ReplyGetCurrentChannelLocalId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetCurrentChannelLocalId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelLocalId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelLocalId.Size()))
		n110, err := m.ChannelLocalId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n110
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n111, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n111
	}
	return i, nil
}

func (m *ForWardUserMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForWardUserMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Date != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Date))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Media != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Media))
	}
	if len(m.MediaData) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(len(m.MediaData)))
		i += copy(dAtA[i:], m.MediaData)
	}
	if len(m.ReplyMarkup) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(len(m.ReplyMarkup)))
		i += copy(dAtA[i:], m.ReplyMarkup)
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			dAtA[i] = 0x32
			i++
			i = encodeVarintChanneldb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.FromId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.FromId))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Encry))
	}
	if len(m.FwdFrom) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(len(m.FwdFrom)))
		i += copy(dAtA[i:], m.FwdFrom)
	}
	if m.GroupId != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.GroupId))
	}
	if m.ViaBotId != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ViaBotId))
	}
	if m.MsgID != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MsgID))
	}
	return i, nil
}

func (m *ChannelMessageAt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelMessageAt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserId))
	}
	if m.WithId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.WithId))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MsgId))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Encry))
	}
	return i, nil
}

func (m *ReqSearchChannelMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSearchChannelMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserID))
	}
	if m.ChannelID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelID))
	}
	if m.FromID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.FromID))
	}
	if len(m.Medias) > 0 {
		dAtA113 := make([]byte, len(m.Medias)*10)
		var j112 int
		for _, num1 := range m.Medias {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA113[j112] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j112++
			}
			dAtA113[j112] = uint8(num)
			j112++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(j112))
		i += copy(dAtA[i:], dAtA113[:j112])
	}
	if m.OffsetID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.OffsetID))
	}
	if m.AddOffset != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.AddOffset))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Encry))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Limit))
	}
	if m.MinDate != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MinDate))
	}
	if m.MaxDate != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MaxDate))
	}
	if m.MinID != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MinID))
	}
	if m.MaxID != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MaxID))
	}
	return i, nil
}

func (m *ReplySearchChannelMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplySearchChannelMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChanneldb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReqIncreaseChannelId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqIncreaseChannelId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.MsgIdDelta != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MsgIdDelta))
	}
	if m.PtsDelta != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.PtsDelta))
	}
	return i, nil
}

func (m *ReplyIncreaseChannelId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyIncreaseChannelId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MsgId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Pts))
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n114, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n114
	}
	return i, nil
}

func (m *ReqGetChannelIncreaseId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelIncreaseId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	return i, nil
}

func (m *ReplyGetChannelIncreaseId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelIncreaseId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.MsgId))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Pts))
	}
	if m.ReplyErr != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ReplyErr.Size()))
		n115, err := m.ReplyErr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n115
	}
	return i, nil
}

func (m *ReqGetChannelIncreaseIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelIncreaseIds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelIds) > 0 {
		dAtA117 := make([]byte, len(m.ChannelIds)*10)
		var j116 int
		for _, num1 := range m.ChannelIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA117[j116] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j116++
			}
			dAtA117[j116] = uint8(num)
			j116++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(j116))
		i += copy(dAtA[i:], dAtA117[:j116])
	}
	return i, nil
}

func (m *ReplyGetChannelIncreaseIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelIncreaseIds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MsgIds) > 0 {
		for _, msg := range m.MsgIds {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChanneldb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ChannelDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.TopMessage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.TopMessage))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Pts))
	}
	if m.Update != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Update))
	}
	return i, nil
}

func (m *ReqUpdateChannelDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUpdateChannelDialog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.TopMessage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.TopMessage))
	}
	if m.Pts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Pts))
	}
	if m.Update != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Update))
	}
	return i, nil
}

func (m *ReqGetChannelDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelDialogs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelIds) > 0 {
		dAtA119 := make([]byte, len(m.ChannelIds)*10)
		var j118 int
		for _, num1 := range m.ChannelIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA119[j118] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j118++
			}
			dAtA119[j118] = uint8(num)
			j118++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(j118))
		i += copy(dAtA[i:], dAtA119[:j118])
	}
	return i, nil
}

func (m *ReplyGetChannelDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelDialogs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChannelDialogs) > 0 {
		for _, msg := range m.ChannelDialogs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChanneldb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReqGetChannelMessageByChannelIdRandomId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGetChannelMessageByChannelIdRandomId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.ChannelId))
	}
	if m.RandomId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.RandomId))
	}
	if m.Encry != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.Encry))
	}
	return i, nil
}

func (m *ReplyGetChannelMessageByChannelIdRandomId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyGetChannelMessageByChannelIdRandomId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChanneldb(dAtA, i, uint64(m.UserMsg.Size()))
		n120, err := m.UserMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n120
	}
	return i, nil
}

func encodeVarintChanneldb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReplyNull) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ChannelMsgId) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovChanneldb(uint64(m.Id))
	}
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		n += 1 + sovChanneldb(uint64(m.MsgId))
	}
	if m.Pts != 0 {
		n += 1 + sovChanneldb(uint64(m.Pts))
	}
	if m.LastDate != 0 {
		n += 1 + sovChanneldb(uint64(m.LastDate))
	}
	return n
}

func (m *ChannelPtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovChanneldb(uint64(e))
		}
		n += 1 + sovChanneldb(uint64(l)) + l
	}
	if m.Pts != 0 {
		n += 1 + sovChanneldb(uint64(m.Pts))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovChanneldb(uint64(m.Date))
	}
	return n
}

func (m *UserMsgListAndPts) Size() (n int) {
	var l int
	_ = l
	if len(m.UserMsgs) > 0 {
		for _, e := range m.UserMsgs {
			l = e.Size()
			n += 1 + l + sovChanneldb(uint64(l))
		}
	}
	if m.Pts != 0 {
		n += 1 + sovChanneldb(uint64(m.Pts))
	}
	if m.Count != 0 {
		n += 1 + sovChanneldb(uint64(m.Count))
	}
	return n
}

func (m *MsgsAndMaxId) Size() (n int) {
	var l int
	_ = l
	if m.MaxMsgId != 0 {
		n += 1 + sovChanneldb(uint64(m.MaxMsgId))
	}
	if len(m.Msgs) > 0 {
		l = 0
		for _, e := range m.Msgs {
			l += sovChanneldb(uint64(e))
		}
		n += 1 + sovChanneldb(uint64(l)) + l
	}
	return n
}

func (m *ReplyErr) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovChanneldb(uint64(m.ErrCode))
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqHeartBeating) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovChanneldb(uint64(m.Type))
	}
	if m.Identification != 0 {
		n += 1 + sovChanneldb(uint64(m.Identification))
	}
	return n
}

func (m *ReplyHeartBeating) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovChanneldb(uint64(m.Type))
	}
	if m.Result != 0 {
		n += 1 + sovChanneldb(uint64(m.Result))
	}
	return n
}

func (m *ReqUpdateChannelMsgIdAndPts) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyUpdateChannelMsgIdAndPts) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		l = m.ChannelMsgId.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqSetChannelMsgIdAndPts) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		l = m.ChannelMsgId.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplySetChannelMsgIdAndPts) Size() (n int) {
	var l int
	_ = l
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqUpdateChannelPts) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyUpdateChannelPts) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		l = m.ChannelMsgId.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqUpdateChannelPtsWithNum) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.Number != 0 {
		n += 1 + sovChanneldb(uint64(m.Number))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyUpdateChannelPtsWithNum) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		l = m.ChannelMsgId.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelMsgId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelMsgId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMsgId != nil {
		l = m.ChannelMsgId.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqStoreChannelPtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.ChannelPtsHandle != nil {
		l = m.ChannelPtsHandle.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqBatchStoreChannelPtsHandle) Size() (n int) {
	var l int
	_ = l
	if len(m.ChannelPtsHandles) > 0 {
		for _, e := range m.ChannelPtsHandles {
			l = e.Size()
			n += 1 + l + sovChanneldb(uint64(l))
		}
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelDiffByPts) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.Pts != 0 {
		n += 1 + sovChanneldb(uint64(m.Pts))
	}
	if m.Limit != 0 {
		n += 1 + sovChanneldb(uint64(m.Limit))
	}
	if m.MinId != 0 {
		n += 1 + sovChanneldb(uint64(m.MinId))
	}
	if m.MaxId != 0 {
		n += 1 + sovChanneldb(uint64(m.MaxId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelDiffByPts) Size() (n int) {
	var l int
	_ = l
	if m.IsFianl {
		n += 2
	}
	if m.ToLong {
		n += 2
	}
	if m.Pts != 0 {
		n += 1 + sovChanneldb(uint64(m.Pts))
	}
	if m.TopMsgId != 0 {
		n += 1 + sovChanneldb(uint64(m.TopMsgId))
	}
	if len(m.Msgs) > 0 {
		for _, b := range m.Msgs {
			l = len(b)
			n += 1 + l + sovChanneldb(uint64(l))
		}
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelLastPtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelLastPtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.ChannelPtsHandle != nil {
		l = m.ChannelPtsHandle.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqDeleteChannelPtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.Pts != 0 {
		n += 1 + sovChanneldb(uint64(m.Pts))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyDeleteChannelPtsHandle) Size() (n int) {
	var l int
	_ = l
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqInsertOrUpdateChannelMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserMsg != nil {
		l = m.UserMsg.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqUpdateChannelMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserMsg != nil {
		l = m.UserMsg.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqBatchInsertOrUpdateChannelMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.UserMsgs) > 0 {
		for _, e := range m.UserMsgs {
			l = e.Size()
			n += 1 + l + sovChanneldb(uint64(l))
		}
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqDeleteMsgs) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if len(m.MsgIds) > 0 {
		l = 0
		for _, e := range m.MsgIds {
			l += sovChanneldb(uint64(e))
		}
		n += 1 + sovChanneldb(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyDeleteMsgs) Size() (n int) {
	var l int
	_ = l
	if m.CurentMsgId != 0 {
		n += 1 + sovChanneldb(uint64(m.CurentMsgId))
	}
	if m.UpdateDate != 0 {
		n += 1 + sovChanneldb(uint64(m.UpdateDate))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqDeleteUserHistory) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChanneldb(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyDeleteUserHistory) Size() (n int) {
	var l int
	_ = l
	if m.MsgsAndMaxId != nil {
		l = m.MsgsAndMaxId.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if len(m.Ptss) > 0 {
		l = 0
		for _, e := range m.Ptss {
			l += sovChanneldb(uint64(e))
		}
		n += 1 + sovChanneldb(uint64(l)) + l
	}
	if m.UpdateDate != 0 {
		n += 1 + sovChanneldb(uint64(m.UpdateDate))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqDeleteChannelMsg) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqDeleteChannelMessage) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		n += 1 + sovChanneldb(uint64(m.MsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyDeleteChannelMessage) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChanneldb(uint64(m.UserId))
	}
	if m.CurrentMsgId != 0 {
		n += 1 + sovChanneldb(uint64(m.CurrentMsgId))
	}
	if m.UpdateDate != 0 {
		n += 1 + sovChanneldb(uint64(m.UpdateDate))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelMessage) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		n += 1 + sovChanneldb(uint64(m.MsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelMessage) Size() (n int) {
	var l int
	_ = l
	if m.UserMsg != nil {
		l = m.UserMsg.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelMsgsByMsgIds) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if len(m.MsgIds) > 0 {
		l = 0
		for _, e := range m.MsgIds {
			l += sovChanneldb(uint64(e))
		}
		n += 1 + sovChanneldb(uint64(l)) + l
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelMsgsByMsgIds) Size() (n int) {
	var l int
	_ = l
	if m.UserMsgListAndPts != nil {
		l = m.UserMsgListAndPts.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelMsgHistory) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.OffsetId != 0 {
		n += 1 + sovChanneldb(uint64(m.OffsetId))
	}
	if m.OffsetDate != 0 {
		n += 1 + sovChanneldb(uint64(m.OffsetDate))
	}
	if m.AddOffset != 0 {
		n += 1 + sovChanneldb(uint64(m.AddOffset))
	}
	if m.MinId != 0 {
		n += 1 + sovChanneldb(uint64(m.MinId))
	}
	if m.MaxId != 0 {
		n += 1 + sovChanneldb(uint64(m.MaxId))
	}
	if m.Limit != 0 {
		n += 1 + sovChanneldb(uint64(m.Limit))
	}
	if m.Encry != 0 {
		n += 1 + sovChanneldb(uint64(m.Encry))
	}
	if m.DeleteMark != 0 {
		n += 1 + sovChanneldb(uint64(m.DeleteMark))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelMsgHistory) Size() (n int) {
	var l int
	_ = l
	if m.UserMsgListAndPts != nil {
		l = m.UserMsgListAndPts.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelTopMst) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelTopMst2) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChanneldb(uint64(m.UserId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelTopMst) Size() (n int) {
	var l int
	_ = l
	if m.UserMsg != nil {
		l = m.UserMsg.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *GetChannelMediaMessageHistoryByMediaConfig) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChanneldb(uint64(m.UserId))
	}
	if len(m.Medias) > 0 {
		l = 0
		for _, e := range m.Medias {
			l += sovChanneldb(uint64(e))
		}
		n += 1 + sovChanneldb(uint64(l)) + l
	}
	if m.MaxId != 0 {
		n += 1 + sovChanneldb(uint64(m.MaxId))
	}
	if m.Limit != 0 {
		n += 1 + sovChanneldb(uint64(m.Limit))
	}
	if m.Encry != 0 {
		n += 1 + sovChanneldb(uint64(m.Encry))
	}
	return n
}

func (m *ReqGetChannelMediaMessageHistoryByMedia) Size() (n int) {
	var l int
	_ = l
	if m.GetChannelMediaMessageHistoryByMediaConfig != nil {
		l = m.GetChannelMediaMessageHistoryByMediaConfig.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelMediaMessageHistoryByMedia) Size() (n int) {
	var l int
	_ = l
	if len(m.ChannelMsgs) > 0 {
		for _, e := range m.ChannelMsgs {
			l = e.Size()
			n += 1 + l + sovChanneldb(uint64(l))
		}
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ChannelMessageDeleteMark) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChanneldb(uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.MsgId != 0 {
		n += 1 + sovChanneldb(uint64(m.MsgId))
	}
	return n
}

func (m *ReqInsertOrUpdateChannelMessageDeleteMark) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMessageDeleteMark != nil {
		l = m.ChannelMessageDeleteMark.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyInsertOrUpdateChannelMessageDeleteMark) Size() (n int) {
	var l int
	_ = l
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelMessageDeleteMark) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChanneldb(uint64(m.UserId))
	}
	if m.ChannelID != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelID))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelMessageDeleteMark) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMessageDeleteMark != nil {
		l = m.ChannelMessageDeleteMark.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ChannelMediaMessageStatistics) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.Media != 0 {
		n += 1 + sovChanneldb(uint64(m.Media))
	}
	if m.Count != 0 {
		n += 1 + sovChanneldb(uint64(m.Count))
	}
	return n
}

func (m *ReqGetChannelMediaMessageStatisticsByMedia) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.Media != 0 {
		n += 1 + sovChanneldb(uint64(m.Media))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyGetChannelMediaMessageStatisticsByMedia) Size() (n int) {
	var l int
	_ = l
	if m.ChannelMediaMessageStatistics != nil {
		l = m.ChannelMediaMessageStatistics.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ChannelAdminLog) Size() (n int) {
	var l int
	_ = l
	if m.ActionId != 0 {
		n += 1 + sovChanneldb(uint64(m.ActionId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.AdminUserId != 0 {
		n += 1 + sovChanneldb(uint64(m.AdminUserId))
	}
	if m.UserId != 0 {
		n += 1 + sovChanneldb(uint64(m.UserId))
	}
	if m.ActionType != 0 {
		n += 1 + sovChanneldb(uint64(m.ActionType))
	}
	l = len(m.AdminLog)
	if l > 0 {
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovChanneldb(uint64(m.Date))
	}
	return n
}

func (m *ReqStoreAdminLog) Size() (n int) {
	var l int
	_ = l
	if m.ChannelAdminLog != nil {
		l = m.ChannelAdminLog.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqFindsAdminLogByChannelId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.Limit != 0 {
		n += 1 + sovChanneldb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyFindsAdminLog) Size() (n int) {
	var l int
	_ = l
	if len(m.AdminLogs) > 0 {
		for _, e := range m.AdminLogs {
			l = e.Size()
			n += 1 + l + sovChanneldb(uint64(l))
		}
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChanneldb(uint64(m.UserId))
	}
	if len(m.AdminUsers) > 0 {
		l = 0
		for _, e := range m.AdminUsers {
			l += sovChanneldb(uint64(e))
		}
		n += 1 + sovChanneldb(uint64(l)) + l
	}
	if len(m.EventFilters) > 0 {
		l = 0
		for _, e := range m.EventFilters {
			l += sovChanneldb(uint64(e))
		}
		n += 1 + sovChanneldb(uint64(l)) + l
	}
	if m.Limit != 0 {
		n += 1 + sovChanneldb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChanneldb(uint64(m.UserId))
	}
	if len(m.EventFilters) > 0 {
		l = 0
		for _, e := range m.EventFilters {
			l += sovChanneldb(uint64(e))
		}
		n += 1 + sovChanneldb(uint64(l)) + l
	}
	if m.Limit != 0 {
		n += 1 + sovChanneldb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqFindsAdminLogByChannelIdAndUserId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.UserId != 0 {
		n += 1 + sovChanneldb(uint64(m.UserId))
	}
	if m.Limit != 0 {
		n += 1 + sovChanneldb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if len(m.AdminUsers) > 0 {
		l = 0
		for _, e := range m.AdminUsers {
			l += sovChanneldb(uint64(e))
		}
		n += 1 + sovChanneldb(uint64(l)) + l
	}
	if len(m.EventFilters) > 0 {
		l = 0
		for _, e := range m.EventFilters {
			l += sovChanneldb(uint64(e))
		}
		n += 1 + sovChanneldb(uint64(l)) + l
	}
	if m.Limit != 0 {
		n += 1 + sovChanneldb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqFindsAdminLogByChannelIdAndEventFilters) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if len(m.EventFilters) > 0 {
		l = 0
		for _, e := range m.EventFilters {
			l += sovChanneldb(uint64(e))
		}
		n += 1 + sovChanneldb(uint64(l)) + l
	}
	if m.Limit != 0 {
		n += 1 + sovChanneldb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if len(m.AdminUsers) > 0 {
		l = 0
		for _, e := range m.AdminUsers {
			l += sovChanneldb(uint64(e))
		}
		n += 1 + sovChanneldb(uint64(l)) + l
	}
	if m.Limit != 0 {
		n += 1 + sovChanneldb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqChannelMessageAtAdd) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChanneldb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovChanneldb(uint64(m.WithId))
	}
	if m.MsgId != 0 {
		n += 1 + sovChanneldb(uint64(m.MsgId))
	}
	if m.Encry != 0 {
		n += 1 + sovChanneldb(uint64(m.Encry))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyChannelMessageAtAdd) Size() (n int) {
	var l int
	_ = l
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqChannelMessageAtGet) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChanneldb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovChanneldb(uint64(m.WithId))
	}
	if m.MsgId != 0 {
		n += 1 + sovChanneldb(uint64(m.MsgId))
	}
	if m.AddOffset != 0 {
		n += 1 + sovChanneldb(uint64(m.AddOffset))
	}
	if m.Limit != 0 {
		n += 1 + sovChanneldb(uint64(m.Limit))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyChannelMessageAtGet) Size() (n int) {
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovChanneldb(uint64(l))
		}
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqChannelMessageAtDel) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChanneldb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovChanneldb(uint64(m.WithId))
	}
	if m.MsgId != 0 {
		n += 1 + sovChanneldb(uint64(m.MsgId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyChannelMessageAtDel) Size() (n int) {
	var l int
	_ = l
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ChannelLocalId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.LocalId != 0 {
		n += 1 + sovChanneldb(uint64(m.LocalId))
	}
	return n
}

func (m *ReqIncreaseChannelLocalId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyIncreaseChannelLocalId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelLocalId != nil {
		l = m.ChannelLocalId.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqGetCurrentChannelLocalId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReplyGetCurrentChannelLocalId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelLocalId != nil {
		l = m.ChannelLocalId.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ForWardUserMsg) Size() (n int) {
	var l int
	_ = l
	if m.Date != 0 {
		n += 1 + sovChanneldb(uint64(m.Date))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.Media != 0 {
		n += 1 + sovChanneldb(uint64(m.Media))
	}
	l = len(m.MediaData)
	if l > 0 {
		n += 1 + l + sovChanneldb(uint64(l))
	}
	l = len(m.ReplyMarkup)
	if l > 0 {
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, b := range m.Entities {
			l = len(b)
			n += 1 + l + sovChanneldb(uint64(l))
		}
	}
	if m.FromId != 0 {
		n += 1 + sovChanneldb(uint64(m.FromId))
	}
	if m.Encry != 0 {
		n += 1 + sovChanneldb(uint64(m.Encry))
	}
	l = len(m.FwdFrom)
	if l > 0 {
		n += 1 + l + sovChanneldb(uint64(l))
	}
	if m.GroupId != 0 {
		n += 1 + sovChanneldb(uint64(m.GroupId))
	}
	if m.ViaBotId != 0 {
		n += 1 + sovChanneldb(uint64(m.ViaBotId))
	}
	if m.MsgID != 0 {
		n += 1 + sovChanneldb(uint64(m.MsgID))
	}
	return n
}

func (m *ChannelMessageAt) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChanneldb(uint64(m.UserId))
	}
	if m.WithId != 0 {
		n += 1 + sovChanneldb(uint64(m.WithId))
	}
	if m.MsgId != 0 {
		n += 1 + sovChanneldb(uint64(m.MsgId))
	}
	if m.Encry != 0 {
		n += 1 + sovChanneldb(uint64(m.Encry))
	}
	return n
}

func (m *ReqSearchChannelMsg) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovChanneldb(uint64(m.UserID))
	}
	if m.ChannelID != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelID))
	}
	if m.FromID != 0 {
		n += 1 + sovChanneldb(uint64(m.FromID))
	}
	if len(m.Medias) > 0 {
		l = 0
		for _, e := range m.Medias {
			l += sovChanneldb(uint64(e))
		}
		n += 1 + sovChanneldb(uint64(l)) + l
	}
	if m.OffsetID != 0 {
		n += 1 + sovChanneldb(uint64(m.OffsetID))
	}
	if m.AddOffset != 0 {
		n += 1 + sovChanneldb(uint64(m.AddOffset))
	}
	if m.Encry != 0 {
		n += 1 + sovChanneldb(uint64(m.Encry))
	}
	if m.Limit != 0 {
		n += 1 + sovChanneldb(uint64(m.Limit))
	}
	if m.MinDate != 0 {
		n += 1 + sovChanneldb(uint64(m.MinDate))
	}
	if m.MaxDate != 0 {
		n += 1 + sovChanneldb(uint64(m.MaxDate))
	}
	if m.MinID != 0 {
		n += 1 + sovChanneldb(uint64(m.MinID))
	}
	if m.MaxID != 0 {
		n += 1 + sovChanneldb(uint64(m.MaxID))
	}
	return n
}

func (m *ReplySearchChannelMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovChanneldb(uint64(l))
		}
	}
	return n
}

func (m *ReqIncreaseChannelId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.MsgIdDelta != 0 {
		n += 1 + sovChanneldb(uint64(m.MsgIdDelta))
	}
	if m.PtsDelta != 0 {
		n += 1 + sovChanneldb(uint64(m.PtsDelta))
	}
	return n
}

func (m *ReplyIncreaseChannelId) Size() (n int) {
	var l int
	_ = l
	if m.MsgId != 0 {
		n += 1 + sovChanneldb(uint64(m.MsgId))
	}
	if m.Pts != 0 {
		n += 1 + sovChanneldb(uint64(m.Pts))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelIncreaseId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	return n
}

func (m *ReplyGetChannelIncreaseId) Size() (n int) {
	var l int
	_ = l
	if m.MsgId != 0 {
		n += 1 + sovChanneldb(uint64(m.MsgId))
	}
	if m.Pts != 0 {
		n += 1 + sovChanneldb(uint64(m.Pts))
	}
	if m.ReplyErr != nil {
		l = m.ReplyErr.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func (m *ReqGetChannelIncreaseIds) Size() (n int) {
	var l int
	_ = l
	if len(m.ChannelIds) > 0 {
		l = 0
		for _, e := range m.ChannelIds {
			l += sovChanneldb(uint64(e))
		}
		n += 1 + sovChanneldb(uint64(l)) + l
	}
	return n
}

func (m *ReplyGetChannelIncreaseIds) Size() (n int) {
	var l int
	_ = l
	if len(m.MsgIds) > 0 {
		for _, e := range m.MsgIds {
			l = e.Size()
			n += 1 + l + sovChanneldb(uint64(l))
		}
	}
	return n
}

func (m *ChannelDialog) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.TopMessage != 0 {
		n += 1 + sovChanneldb(uint64(m.TopMessage))
	}
	if m.Pts != 0 {
		n += 1 + sovChanneldb(uint64(m.Pts))
	}
	if m.Update != 0 {
		n += 1 + sovChanneldb(uint64(m.Update))
	}
	return n
}

func (m *ReqUpdateChannelDialog) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.TopMessage != 0 {
		n += 1 + sovChanneldb(uint64(m.TopMessage))
	}
	if m.Pts != 0 {
		n += 1 + sovChanneldb(uint64(m.Pts))
	}
	if m.Update != 0 {
		n += 1 + sovChanneldb(uint64(m.Update))
	}
	return n
}

func (m *ReqGetChannelDialogs) Size() (n int) {
	var l int
	_ = l
	if len(m.ChannelIds) > 0 {
		l = 0
		for _, e := range m.ChannelIds {
			l += sovChanneldb(uint64(e))
		}
		n += 1 + sovChanneldb(uint64(l)) + l
	}
	return n
}

func (m *ReplyGetChannelDialogs) Size() (n int) {
	var l int
	_ = l
	if len(m.ChannelDialogs) > 0 {
		for _, e := range m.ChannelDialogs {
			l = e.Size()
			n += 1 + l + sovChanneldb(uint64(l))
		}
	}
	return n
}

func (m *ReqGetChannelMessageByChannelIdRandomId) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovChanneldb(uint64(m.ChannelId))
	}
	if m.RandomId != 0 {
		n += 1 + sovChanneldb(uint64(m.RandomId))
	}
	if m.Encry != 0 {
		n += 1 + sovChanneldb(uint64(m.Encry))
	}
	return n
}

func (m *ReplyGetChannelMessageByChannelIdRandomId) Size() (n int) {
	var l int
	_ = l
	if m.UserMsg != nil {
		l = m.UserMsg.Size()
		n += 1 + l + sovChanneldb(uint64(l))
	}
	return n
}

func sovChanneldb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChanneldb(x uint64) (n int) {
	return sovChanneldb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReplyNull) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyNull: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyNull: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDate", wireType)
			}
			m.LastDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChanneldb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChanneldb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMsgListAndPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMsgListAndPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMsgListAndPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserMsgs = append(m.UserMsgs, &pbcomm1.UserMsg{})
			if err := m.UserMsgs[len(m.UserMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgsAndMaxId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgsAndMaxId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgsAndMaxId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMsgId", wireType)
			}
			m.MaxMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Msgs = append(m.Msgs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChanneldb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChanneldb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Msgs = append(m.Msgs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyErr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyErr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyErr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqHeartBeating) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqHeartBeating: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqHeartBeating: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (HeartBeating(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identification", wireType)
			}
			m.Identification = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Identification |= (HeartBeating(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyHeartBeating) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyHeartBeating: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyHeartBeating: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (HeartBeating(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (HeartBeating(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateChannelMsgIdAndPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateChannelMsgIdAndPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateChannelMsgIdAndPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUpdateChannelMsgIdAndPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUpdateChannelMsgIdAndPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUpdateChannelMsgIdAndPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMsgId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMsgId == nil {
				m.ChannelMsgId = &ChannelMsgId{}
			}
			if err := m.ChannelMsgId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSetChannelMsgIdAndPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSetChannelMsgIdAndPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSetChannelMsgIdAndPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMsgId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMsgId == nil {
				m.ChannelMsgId = &ChannelMsgId{}
			}
			if err := m.ChannelMsgId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplySetChannelMsgIdAndPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplySetChannelMsgIdAndPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplySetChannelMsgIdAndPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateChannelPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateChannelPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateChannelPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUpdateChannelPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUpdateChannelPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUpdateChannelPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMsgId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMsgId == nil {
				m.ChannelMsgId = &ChannelMsgId{}
			}
			if err := m.ChannelMsgId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateChannelPtsWithNum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateChannelPtsWithNum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateChannelPtsWithNum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyUpdateChannelPtsWithNum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyUpdateChannelPtsWithNum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyUpdateChannelPtsWithNum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMsgId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMsgId == nil {
				m.ChannelMsgId = &ChannelMsgId{}
			}
			if err := m.ChannelMsgId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelMsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelMsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelMsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMsgId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMsgId == nil {
				m.ChannelMsgId = &ChannelMsgId{}
			}
			if err := m.ChannelMsgId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqStoreChannelPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqStoreChannelPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqStoreChannelPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelPtsHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelPtsHandle == nil {
				m.ChannelPtsHandle = &ChannelPtsHandle{}
			}
			if err := m.ChannelPtsHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBatchStoreChannelPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBatchStoreChannelPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBatchStoreChannelPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelPtsHandles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelPtsHandles = append(m.ChannelPtsHandles, &ChannelPtsHandle{})
			if err := m.ChannelPtsHandles[len(m.ChannelPtsHandles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelDiffByPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelDiffByPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelDiffByPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelDiffByPts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelDiffByPts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelDiffByPts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFianl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFianl = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToLong", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToLong = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMsgId", wireType)
			}
			m.TopMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, make([]byte, postIndex-iNdEx))
			copy(m.Msgs[len(m.Msgs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelLastPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelLastPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelLastPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelLastPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelLastPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelLastPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelPtsHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelPtsHandle == nil {
				m.ChannelPtsHandle = &ChannelPtsHandle{}
			}
			if err := m.ChannelPtsHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteChannelPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteChannelPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteChannelPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeleteChannelPtsHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeleteChannelPtsHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeleteChannelPtsHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqInsertOrUpdateChannelMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqInsertOrUpdateChannelMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqInsertOrUpdateChannelMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMsg == nil {
				m.UserMsg = &pbcomm1.UserMsg{}
			}
			if err := m.UserMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateChannelMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateChannelMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateChannelMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMsg == nil {
				m.UserMsg = &pbcomm1.UserMsg{}
			}
			if err := m.UserMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqBatchInsertOrUpdateChannelMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqBatchInsertOrUpdateChannelMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqBatchInsertOrUpdateChannelMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserMsgs = append(m.UserMsgs, &pbcomm1.UserMsg{})
			if err := m.UserMsgs[len(m.UserMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteMsgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteMsgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteMsgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgIds = append(m.MsgIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChanneldb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChanneldb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgIds = append(m.MsgIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIds", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeleteMsgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeleteMsgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeleteMsgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurentMsgId", wireType)
			}
			m.CurentMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurentMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDate", wireType)
			}
			m.UpdateDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteUserHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteUserHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteUserHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeleteUserHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeleteUserHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeleteUserHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgsAndMaxId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgsAndMaxId == nil {
				m.MsgsAndMaxId = &MsgsAndMaxId{}
			}
			if err := m.MsgsAndMaxId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ptss = append(m.Ptss, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChanneldb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChanneldb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ptss = append(m.Ptss, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptss", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDate", wireType)
			}
			m.UpdateDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteChannelMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteChannelMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteChannelMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqDeleteChannelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqDeleteChannelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqDeleteChannelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyDeleteChannelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyDeleteChannelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyDeleteChannelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentMsgId", wireType)
			}
			m.CurrentMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDate", wireType)
			}
			m.UpdateDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMsg == nil {
				m.UserMsg = &pbcomm1.UserMsg{}
			}
			if err := m.UserMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMsgsByMsgIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMsgsByMsgIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMsgsByMsgIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgIds = append(m.MsgIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChanneldb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChanneldb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgIds = append(m.MsgIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIds", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelMsgsByMsgIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelMsgsByMsgIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelMsgsByMsgIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsgListAndPts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMsgListAndPts == nil {
				m.UserMsgListAndPts = &UserMsgListAndPts{}
			}
			if err := m.UserMsgListAndPts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMsgHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMsgHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMsgHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOffset", wireType)
			}
			m.AddOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOffset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteMark", wireType)
			}
			m.DeleteMark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteMark |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelMsgHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelMsgHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelMsgHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsgListAndPts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMsgListAndPts == nil {
				m.UserMsgListAndPts = &UserMsgListAndPts{}
			}
			if err := m.UserMsgListAndPts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelTopMst) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelTopMst: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelTopMst: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelTopMst2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelTopMst2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelTopMst2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelTopMst) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelTopMst: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelTopMst: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMsg == nil {
				m.UserMsg = &pbcomm1.UserMsg{}
			}
			if err := m.UserMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelMediaMessageHistoryByMediaConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelMediaMessageHistoryByMediaConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelMediaMessageHistoryByMediaConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Medias = append(m.Medias, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChanneldb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChanneldb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Medias = append(m.Medias, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Medias", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMediaMessageHistoryByMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMediaMessageHistoryByMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMediaMessageHistoryByMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetChannelMediaMessageHistoryByMediaConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetChannelMediaMessageHistoryByMediaConfig == nil {
				m.GetChannelMediaMessageHistoryByMediaConfig = &GetChannelMediaMessageHistoryByMediaConfig{}
			}
			if err := m.GetChannelMediaMessageHistoryByMediaConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelMediaMessageHistoryByMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelMediaMessageHistoryByMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelMediaMessageHistoryByMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelMsgs = append(m.ChannelMsgs, &pbcomm1.UserMsg{})
			if err := m.ChannelMsgs[len(m.ChannelMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelMessageDeleteMark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelMessageDeleteMark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelMessageDeleteMark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqInsertOrUpdateChannelMessageDeleteMark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqInsertOrUpdateChannelMessageDeleteMark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqInsertOrUpdateChannelMessageDeleteMark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMessageDeleteMark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMessageDeleteMark == nil {
				m.ChannelMessageDeleteMark = &ChannelMessageDeleteMark{}
			}
			if err := m.ChannelMessageDeleteMark.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyInsertOrUpdateChannelMessageDeleteMark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyInsertOrUpdateChannelMessageDeleteMark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyInsertOrUpdateChannelMessageDeleteMark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMessageDeleteMark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMessageDeleteMark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMessageDeleteMark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			m.ChannelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelMessageDeleteMark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelMessageDeleteMark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelMessageDeleteMark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMessageDeleteMark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMessageDeleteMark == nil {
				m.ChannelMessageDeleteMark = &ChannelMessageDeleteMark{}
			}
			if err := m.ChannelMessageDeleteMark.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelMediaMessageStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelMediaMessageStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelMediaMessageStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			m.Media = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Media |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMediaMessageStatisticsByMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMediaMessageStatisticsByMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMediaMessageStatisticsByMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			m.Media = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Media |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelMediaMessageStatisticsByMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelMediaMessageStatisticsByMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelMediaMessageStatisticsByMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMediaMessageStatistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMediaMessageStatistics == nil {
				m.ChannelMediaMessageStatistics = &ChannelMediaMessageStatistics{}
			}
			if err := m.ChannelMediaMessageStatistics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelAdminLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelAdminLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelAdminLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionId", wireType)
			}
			m.ActionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUserId", wireType)
			}
			m.AdminUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			m.ActionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminLog", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminLog = append(m.AdminLog[:0], dAtA[iNdEx:postIndex]...)
			if m.AdminLog == nil {
				m.AdminLog = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqStoreAdminLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqStoreAdminLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqStoreAdminLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelAdminLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelAdminLog == nil {
				m.ChannelAdminLog = &ChannelAdminLog{}
			}
			if err := m.ChannelAdminLog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFindsAdminLogByChannelId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyFindsAdminLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyFindsAdminLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyFindsAdminLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminLogs = append(m.AdminLogs, &ChannelAdminLog{})
			if err := m.AdminLogs[len(m.AdminLogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFiltersAndUserId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AdminUsers = append(m.AdminUsers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChanneldb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChanneldb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AdminUsers = append(m.AdminUsers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUsers", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EventFilters = append(m.EventFilters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChanneldb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChanneldb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EventFilters = append(m.EventFilters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EventFilters", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndEventFiltersAndUserId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EventFilters = append(m.EventFilters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChanneldb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChanneldb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EventFilters = append(m.EventFilters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EventFilters", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFindsAdminLogByChannelIdAndUserId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndUserId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndUserId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndAdminUsersAndEventFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AdminUsers = append(m.AdminUsers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChanneldb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChanneldb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AdminUsers = append(m.AdminUsers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUsers", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EventFilters = append(m.EventFilters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChanneldb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChanneldb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EventFilters = append(m.EventFilters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EventFilters", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFindsAdminLogByChannelIdAndEventFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndEventFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndEventFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EventFilters = append(m.EventFilters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChanneldb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChanneldb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EventFilters = append(m.EventFilters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EventFilters", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFindsAdminLogByChannelIdAndAdminUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndAdminUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFindsAdminLogByChannelIdAndAdminUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AdminUsers = append(m.AdminUsers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChanneldb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChanneldb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AdminUsers = append(m.AdminUsers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUsers", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChannelMessageAtAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChannelMessageAtAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChannelMessageAtAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChannelMessageAtAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannelMessageAtAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannelMessageAtAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChannelMessageAtGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChannelMessageAtGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChannelMessageAtGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOffset", wireType)
			}
			m.AddOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOffset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChannelMessageAtGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannelMessageAtGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannelMessageAtGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &pbcomm1.UserMsg{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqChannelMessageAtDel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqChannelMessageAtDel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqChannelMessageAtDel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyChannelMessageAtDel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyChannelMessageAtDel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyChannelMessageAtDel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelLocalId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelLocalId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelLocalId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalId", wireType)
			}
			m.LocalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqIncreaseChannelLocalId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqIncreaseChannelLocalId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqIncreaseChannelLocalId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyIncreaseChannelLocalId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyIncreaseChannelLocalId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyIncreaseChannelLocalId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelLocalId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelLocalId == nil {
				m.ChannelLocalId = &ChannelLocalId{}
			}
			if err := m.ChannelLocalId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetCurrentChannelLocalId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetCurrentChannelLocalId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetCurrentChannelLocalId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &pbcomm.Debug{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetCurrentChannelLocalId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetCurrentChannelLocalId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetCurrentChannelLocalId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelLocalId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelLocalId == nil {
				m.ChannelLocalId = &ChannelLocalId{}
			}
			if err := m.ChannelLocalId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForWardUserMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForWardUserMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForWardUserMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			m.Media = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Media |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaData = append(m.MediaData[:0], dAtA[iNdEx:postIndex]...)
			if m.MediaData == nil {
				m.MediaData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyMarkup = append(m.ReplyMarkup[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, make([]byte, postIndex-iNdEx))
			copy(m.Entities[len(m.Entities)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FwdFrom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FwdFrom = append(m.FwdFrom[:0], dAtA[iNdEx:postIndex]...)
			if m.FwdFrom == nil {
				m.FwdFrom = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViaBotId", wireType)
			}
			m.ViaBotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViaBotId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelMessageAt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelMessageAt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelMessageAt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithId", wireType)
			}
			m.WithId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSearchChannelMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSearchChannelMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSearchChannelMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			m.ChannelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromID", wireType)
			}
			m.FromID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Medias = append(m.Medias, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChanneldb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChanneldb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Medias = append(m.Medias, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Medias", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetID", wireType)
			}
			m.OffsetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOffset", wireType)
			}
			m.AddOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOffset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDate", wireType)
			}
			m.MinDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDate", wireType)
			}
			m.MaxDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinID", wireType)
			}
			m.MinID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxID", wireType)
			}
			m.MaxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplySearchChannelMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplySearchChannelMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplySearchChannelMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &pbcomm1.UserMsg{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqIncreaseChannelId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqIncreaseChannelId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqIncreaseChannelId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIdDelta", wireType)
			}
			m.MsgIdDelta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgIdDelta |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsDelta", wireType)
			}
			m.PtsDelta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PtsDelta |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyIncreaseChannelId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyIncreaseChannelId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyIncreaseChannelId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelIncreaseId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelIncreaseId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelIncreaseId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelIncreaseId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelIncreaseId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelIncreaseId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyErr == nil {
				m.ReplyErr = &ReplyErr{}
			}
			if err := m.ReplyErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelIncreaseIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelIncreaseIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelIncreaseIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChannelIds = append(m.ChannelIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChanneldb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChanneldb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChannelIds = append(m.ChannelIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelIncreaseIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelIncreaseIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelIncreaseIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgIds = append(m.MsgIds, &ChannelMsgId{})
			if err := m.MsgIds[len(m.MsgIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMessage", wireType)
			}
			m.TopMessage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMessage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			m.Update = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Update |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUpdateChannelDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUpdateChannelDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUpdateChannelDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMessage", wireType)
			}
			m.TopMessage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMessage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			m.Update = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Update |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChannelIds = append(m.ChannelIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChanneldb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChanneldb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChannelIds = append(m.ChannelIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelDialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelDialogs = append(m.ChannelDialogs, &ChannelDialog{})
			if err := m.ChannelDialogs[len(m.ChannelDialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGetChannelMessageByChannelIdRandomId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGetChannelMessageByChannelIdRandomId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGetChannelMessageByChannelIdRandomId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encry", wireType)
			}
			m.Encry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyGetChannelMessageByChannelIdRandomId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyGetChannelMessageByChannelIdRandomId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyGetChannelMessageByChannelIdRandomId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChanneldb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserMsg == nil {
				m.UserMsg = &pbcomm1.UserMsg{}
			}
			if err := m.UserMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChanneldb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChanneldb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChanneldb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChanneldb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChanneldb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChanneldb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChanneldb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChanneldb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChanneldb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChanneldb   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("gitlab.chatserver.im/interfaceprobuf/channeldb/channeldb.proto", fileDescriptorChanneldb)
}

var fileDescriptorChanneldb = []byte{
	// 3396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x1c, 0x5d, 0x6f, 0x1c, 0x57,
	0x75, 0xc7, 0xfb, 0xe9, 0xe3, 0x75, 0x62, 0x4f, 0xd2, 0x74, 0xbb, 0x49, 0x1c, 0x67, 0xf2, 0xe5,
	0x26, 0x28, 0x01, 0xf7, 0x13, 0x0a, 0xa5, 0xb6, 0xd7, 0x71, 0xb6, 0x8d, 0xd3, 0x68, 0x9c, 0x8f,
	0x16, 0x89, 0xa6, 0xe3, 0x9d, 0xeb, 0xf5, 0xd0, 0xdd, 0xd9, 0xf5, 0xcc, 0xdd, 0x24, 0x56, 0x41,
	0xad, 0x68, 0x2b, 0xf1, 0x00, 0x42, 0x05, 0x21, 0x5a, 0x78, 0xe4, 0x05, 0x84, 0x04, 0x42, 0x42,
	0x42, 0x42, 0x48, 0x08, 0x89, 0x07, 0xc4, 0x0b, 0xbc, 0xc0, 0x33, 0xea, 0x03, 0x7f, 0x81, 0x57,
	0x74, 0x3f, 0xe6, 0xfb, 0xde, 0x99, 0x59, 0xc7, 0x4e, 0x9f, 0xbc, 0xf7, 0xce, 0xb9, 0xf7, 0x7c,
	0xde, 0x73, 0xce, 0x3d, 0xf7, 0xc8, 0xf0, 0x72, 0xd7, 0xc2, 0x3d, 0x63, 0xf3, 0x72, 0x67, 0xdb,
	0xc0, 0x2e, 0x72, 0xee, 0x23, 0xe7, 0xb2, 0xd5, 0xbf, 0x62, 0xd9, 0x18, 0x39, 0x5b, 0x46, 0x07,
	0x0d, 0x9d, 0xc1, 0xe6, 0x68, 0xeb, 0x4a, 0x67, 0xdb, 0xb0, 0x6d, 0xd4, 0x33, 0x37, 0x83, 0x5f,
	0x97, 0x87, 0xce, 0x00, 0x0f, 0xd4, 0x49, 0x7f, 0xa2, 0xf9, 0x62, 0xae, 0xad, 0x86, 0x9b, 0x9d,
	0x41, 0xbf, 0xcf, 0xff, 0xb0, 0x4d, 0x9a, 0x5f, 0x1e, 0x67, 0xe5, 0xc8, 0x45, 0x4e, 0xdf, 0xed,
	0xb2, 0xa5, 0xda, 0x14, 0x4c, 0xea, 0x68, 0xd8, 0xdb, 0xbd, 0x31, 0xea, 0xf5, 0xb4, 0xf7, 0x15,
	0xa8, 0xaf, 0x30, 0x7a, 0xd6, 0xdd, 0x6e, 0xdb, 0x54, 0x0f, 0xc1, 0x44, 0xdb, 0x6c, 0x28, 0xf3,
	0xca, 0x42, 0x59, 0x9f, 0xb0, 0x4c, 0xf5, 0x04, 0x4c, 0xf2, 0xef, 0x6d, 0xb3, 0x31, 0x41, 0xa7,
	0x3d, 0x06, 0xda, 0xa6, 0x7a, 0x14, 0xca, 0x74, 0x59, 0xa3, 0x48, 0xbf, 0x94, 0xfb, 0x74, 0x8f,
	0x19, 0x28, 0xde, 0xc4, 0x6e, 0xa3, 0x44, 0xe7, 0x8a, 0x43, 0xec, 0xaa, 0x4d, 0xa8, 0x5d, 0x37,
	0x5c, 0xdc, 0x32, 0x30, 0x6a, 0x94, 0xe9, 0x74, 0xad, 0xc7, 0xc7, 0xda, 0x77, 0x15, 0x98, 0xe1,
	0x28, 0x6e, 0x62, 0xf7, 0x9a, 0x61, 0x9b, 0x3d, 0x14, 0x45, 0xab, 0xc4, 0xd1, 0x36, 0xa0, 0x7a,
	0xdb, 0x45, 0x4e, 0xdb, 0x74, 0x1b, 0x13, 0xf3, 0xc5, 0x85, 0xb2, 0x5e, 0x1d, 0xb1, 0xa1, 0x87,
	0xba, 0x18, 0xa0, 0x9e, 0x81, 0xe2, 0xba, 0xdb, 0xa5, 0xc4, 0xd4, 0xf5, 0x62, 0xdf, 0xed, 0xaa,
	0x2a, 0x94, 0x4c, 0x8f, 0x90, 0xa2, 0x4e, 0x7f, 0x6b, 0xdb, 0x30, 0x4b, 0x76, 0x5c, 0x77, 0xbb,
	0xd7, 0x2d, 0x17, 0x2f, 0xd9, 0xe6, 0x4d, 0xec, 0xaa, 0x97, 0xa0, 0xc6, 0x27, 0xdd, 0x86, 0x32,
	0x5f, 0x5c, 0x98, 0x5a, 0x3c, 0x7c, 0x99, 0x6b, 0x81, 0xcf, 0xeb, 0xb5, 0x11, 0x07, 0xf0, 0x30,
	0x4f, 0x04, 0x98, 0x8f, 0x42, 0x79, 0x65, 0x30, 0xb2, 0xb1, 0x27, 0x9c, 0x0e, 0x19, 0x68, 0x2f,
	0x43, 0x9d, 0xc0, 0x2f, 0xd9, 0xe6, 0xba, 0xf1, 0xb0, 0x6d, 0x12, 0xd1, 0xac, 0x1b, 0x0f, 0x99,
	0x14, 0x19, 0xa3, 0xb5, 0x3e, 0x1f, 0x13, 0x4a, 0x29, 0x72, 0xc6, 0x64, 0xa9, 0xef, 0x76, 0x5d,
	0xed, 0xab, 0x50, 0xa3, 0xea, 0x5b, 0x75, 0x1c, 0x22, 0x87, 0x55, 0xc7, 0x59, 0x19, 0x98, 0x88,
	0x2e, 0x9d, 0xd6, 0xab, 0x88, 0x0d, 0xd5, 0x63, 0x50, 0x59, 0x75, 0x08, 0x61, 0x94, 0xa0, 0x49,
	0xbd, 0x82, 0xe8, 0x48, 0x7b, 0x0f, 0x0e, 0xeb, 0x68, 0xe7, 0x1a, 0x32, 0x1c, 0xbc, 0x8c, 0x0c,
	0x6c, 0xd9, 0x5d, 0xf5, 0x12, 0x94, 0x6e, 0xed, 0x0e, 0xd9, 0x0e, 0x87, 0x16, 0x9f, 0xbc, 0x1c,
	0xd8, 0x6b, 0x18, 0x4c, 0x2f, 0xe1, 0xdd, 0x21, 0x52, 0xbf, 0x0e, 0x87, 0xda, 0x26, 0xb2, 0xb1,
	0xb5, 0x65, 0x75, 0x0c, 0x6c, 0x0d, 0x6c, 0xba, 0x7f, 0xca, 0xb2, 0x43, 0x56, 0x04, 0x5c, 0xdb,
	0x81, 0x59, 0x4a, 0xfe, 0xde, 0x49, 0xb8, 0x02, 0x15, 0x1d, 0xb9, 0xa3, 0x1e, 0xce, 0x42, 0x5d,
	0x71, 0x28, 0x98, 0xf6, 0x36, 0x1c, 0xd7, 0xd1, 0xce, 0xed, 0x21, 0x51, 0x74, 0xd8, 0xd6, 0xb9,
	0x96, 0xd3, 0x4d, 0xed, 0x0c, 0x94, 0x5b, 0x68, 0x73, 0xc4, 0xe4, 0x38, 0xb5, 0x38, 0xed, 0x19,
	0x00, 0x9d, 0xd4, 0xcb, 0x26, 0xf9, 0xa3, 0xfd, 0x40, 0x81, 0x93, 0x94, 0x2b, 0x29, 0x92, 0x97,
	0xa2, 0xc7, 0x8c, 0xe2, 0x99, 0x8a, 0x90, 0x1e, 0xfe, 0xac, 0xd7, 0x3b, 0xe1, 0x33, 0x79, 0x25,
	0x50, 0x39, 0x27, 0xe3, 0x48, 0x68, 0xa1, 0xf7, 0x49, 0xaf, 0x39, 0xfc, 0x97, 0xf6, 0x6d, 0x68,
	0xe8, 0x68, 0x67, 0x03, 0xe1, 0xfd, 0xa6, 0x24, 0x97, 0x34, 0xd6, 0xa1, 0x49, 0x69, 0x12, 0xe3,
	0x0f, 0x33, 0xa3, 0xe4, 0x61, 0xe6, 0x0d, 0x38, 0x12, 0x57, 0xdf, 0x3e, 0xa9, 0xed, 0x23, 0x05,
	0x9e, 0x48, 0xaa, 0xed, 0xf1, 0xab, 0xeb, 0x01, 0x11, 0x58, 0x82, 0xc3, 0xbb, 0x16, 0xde, 0xbe,
	0x31, 0xea, 0x67, 0x30, 0x7a, 0x0c, 0x2a, 0x37, 0x46, 0xfd, 0x4d, 0xe4, 0x70, 0xcf, 0x53, 0xb1,
	0xe9, 0x28, 0x10, 0x40, 0x31, 0x45, 0x00, 0xdf, 0x57, 0xe0, 0x84, 0x50, 0x00, 0x1e, 0xee, 0xc7,
	0x2b, 0x87, 0xbb, 0xa0, 0xea, 0x68, 0x67, 0x2d, 0x6a, 0x36, 0xfb, 0xa1, 0xe8, 0x0f, 0x15, 0x38,
	0x4a, 0xf1, 0xc5, 0xf7, 0x7e, 0xbc, 0xfc, 0x7d, 0x4f, 0x61, 0xe7, 0x12, 0x0f, 0x1c, 0x94, 0x88,
	0x78, 0x6b, 0xc9, 0x28, 0xc8, 0xc9, 0x39, 0x9e, 0x24, 0xc7, 0x07, 0xd1, 0x67, 0x3a, 0xf1, 0x8d,
	0x72, 0x49, 0xe4, 0x87, 0xd4, 0x63, 0xed, 0x2c, 0x1b, 0xb8, 0xb3, 0x2d, 0xa6, 0xa7, 0x0d, 0xb3,
	0xf1, 0x39, 0x2f, 0x0a, 0xa6, 0x12, 0x34, 0x1b, 0x27, 0xc8, 0xcd, 0x47, 0xd1, 0x6f, 0x15, 0x38,
	0x16, 0xd1, 0x7e, 0xcb, 0xda, 0xda, 0x5a, 0xde, 0xcd, 0x3e, 0xea, 0xc2, 0xc0, 0x7b, 0xdd, 0xea,
	0x5b, 0x7e, 0xe0, 0xed, 0x91, 0x01, 0xcd, 0x55, 0x2c, 0xbb, 0x6d, 0xf2, 0xbc, 0xa4, 0xdc, 0x27,
	0x03, 0x3a, 0x4b, 0xe2, 0x30, 0x4f, 0x4b, 0xca, 0x7d, 0x1a, 0x94, 0x7d, 0x8a, 0x2b, 0x29, 0x14,
	0xff, 0x99, 0xaa, 0x33, 0x62, 0x55, 0x01, 0xcd, 0x0d, 0xa8, 0xb6, 0xdd, 0xab, 0x96, 0x61, 0xf7,
	0x28, 0xc5, 0x35, 0xbd, 0x6a, 0xb1, 0x21, 0x39, 0xb1, 0xb7, 0x06, 0xd7, 0x07, 0x36, 0x13, 0x47,
	0x4d, 0xaf, 0x60, 0x3a, 0x12, 0xa4, 0x2e, 0x4d, 0xa8, 0xdd, 0x1a, 0x0c, 0x99, 0x65, 0x32, 0xa2,
	0x6b, 0x98, 0x8f, 0xfd, 0xd4, 0xa0, 0x3c, 0x5f, 0x5c, 0xa8, 0xb3, 0xd4, 0x20, 0x62, 0x90, 0x95,
	0x3c, 0x06, 0x79, 0x8f, 0x3a, 0x9e, 0x80, 0x7c, 0x92, 0xa3, 0xe5, 0xcd, 0xc1, 0x72, 0x29, 0xf5,
	0x13, 0xcf, 0xc1, 0xc8, 0x70, 0xec, 0x9b, 0xd5, 0x8f, 0x7d, 0x18, 0x87, 0xf0, 0x94, 0x8e, 0x76,
	0x5a, 0xa8, 0x87, 0x30, 0x1a, 0x33, 0xfd, 0x4c, 0x5a, 0x5c, 0x2e, 0x6f, 0x7b, 0x83, 0xe4, 0x21,
	0xc3, 0xde, 0xae, 0x04, 0xe7, 0xd8, 0x1c, 0xf4, 0x69, 0x5e, 0xd3, 0xb6, 0x5d, 0xe4, 0xe0, 0xd7,
	0x9d, 0x78, 0xea, 0xa1, 0x3e, 0xcd, 0x92, 0x64, 0x92, 0x03, 0x32, 0x89, 0x26, 0x92, 0xd7, 0x2a,
	0x4f, 0x5e, 0xf3, 0xe9, 0x12, 0x25, 0xe3, 0xf0, 0x41, 0xa0, 0xc1, 0x30, 0xef, 0x39, 0x26, 0x29,
	0x6b, 0x63, 0x25, 0xe6, 0xb9, 0xb0, 0x7e, 0x0b, 0xa6, 0x7d, 0x6b, 0xa0, 0xab, 0x32, 0xa3, 0x2e,
	0x3d, 0x86, 0x5e, 0x6a, 0x5e, 0xa1, 0x17, 0x9f, 0x9c, 0x76, 0xf0, 0xa1, 0x42, 0x92, 0x70, 0xdf,
	0x10, 0x28, 0xba, 0x79, 0x98, 0x5a, 0x19, 0x39, 0xc8, 0xc6, 0xe1, 0x8b, 0xc0, 0x54, 0x27, 0x98,
	0x52, 0xe7, 0x00, 0x98, 0x1c, 0xe8, 0x25, 0x8a, 0xd9, 0x1e, 0x8c, 0xfc, 0x99, 0x88, 0xf9, 0x14,
	0xf3, 0x98, 0xcf, 0x0e, 0x89, 0x89, 0x9c, 0x65, 0x22, 0xb5, 0x6b, 0x96, 0x8b, 0x07, 0xce, 0x6e,
	0x36, 0xe7, 0xec, 0xea, 0xe5, 0xe5, 0x1b, 0xec, 0xe6, 0x95, 0x8f, 0xf3, 0x3f, 0x52, 0x1f, 0xef,
	0x73, 0x1e, 0xc6, 0xfa, 0x52, 0xf4, 0x5a, 0x24, 0x88, 0xc4, 0xe1, 0xcf, 0x7a, 0xbd, 0x1f, 0xbe,
	0x43, 0xa9, 0x50, 0xba, 0x89, 0x5d, 0xff, 0x9e, 0x34, 0xc4, 0xae, 0x1b, 0x93, 0x57, 0x31, 0x55,
	0x5e, 0xa5, 0xfc, 0x79, 0x68, 0xe4, 0xf0, 0x12, 0x5b, 0xdc, 0x07, 0x2f, 0xe9, 0xc0, 0x93, 0x89,
	0x9d, 0x91, 0xeb, 0x1a, 0xdd, 0x2c, 0x47, 0xe4, 0x5f, 0xbf, 0x27, 0xc2, 0xd7, 0xef, 0x5c, 0xaa,
	0xf8, 0xa5, 0x42, 0xfc, 0x5f, 0xdc, 0x1b, 0x79, 0x68, 0x03, 0x2d, 0x2b, 0x11, 0x2d, 0x6b, 0x50,
	0x5f, 0x19, 0x39, 0x81, 0x9d, 0x32, 0xbc, 0xf5, 0x4e, 0x68, 0x6e, 0xff, 0x05, 0x3f, 0xa0, 0x86,
	0x1a, 0x4a, 0xdd, 0x0e, 0x5a, 0x36, 0x98, 0x5b, 0x69, 0x12, 0xe5, 0x18, 0xce, 0x6e, 0x6c, 0x77,
	0x7e, 0x9f, 0x06, 0xa4, 0x48, 0x86, 0xea, 0x2e, 0xef, 0x32, 0x37, 0x73, 0x90, 0xee, 0xe8, 0x67,
	0x0a, 0x8f, 0x4b, 0x12, 0xd4, 0xaf, 0x0a, 0x4a, 0x23, 0x9c, 0xfb, 0x13, 0x21, 0x8e, 0x12, 0x30,
	0xfa, 0xec, 0x28, 0x51, 0x51, 0x19, 0x5b, 0x28, 0xbf, 0x99, 0xa0, 0x67, 0x23, 0x42, 0x5a, 0x3e,
	0x47, 0xd5, 0x84, 0xda, 0xeb, 0x5b, 0x5b, 0x2e, 0xc2, 0xbe, 0x09, 0xd4, 0x06, 0x7c, 0x4c, 0x4c,
	0x94, 0x7d, 0x0b, 0x9b, 0xe8, 0xc0, 0x9f, 0x21, 0x3b, 0x2f, 0x99, 0x26, 0x03, 0xe1, 0x99, 0xd7,
	0xa4, 0xe1, 0x4d, 0x04, 0x89, 0x64, 0x59, 0x98, 0x48, 0x56, 0xc2, 0x89, 0xa4, 0x9f, 0x8a, 0x56,
	0x63, 0xa9, 0xe8, 0xaa, 0xdd, 0x71, 0x76, 0x1b, 0x35, 0x36, 0x8b, 0xc8, 0x80, 0x50, 0xc5, 0x23,
	0x82, 0xe1, 0xbc, 0xd3, 0x98, 0x64, 0x54, 0x99, 0xfe, 0x4c, 0xa0, 0x4d, 0x48, 0xcf, 0xb8, 0x9e,
	0x4a, 0x6a, 0xd3, 0x13, 0xd9, 0xe7, 0xaa, 0x4b, 0xe6, 0x40, 0x03, 0xba, 0x68, 0x6e, 0x8b, 0xf7,
	0xc3, 0x81, 0xee, 0xc4, 0x3c, 0x04, 0xdb, 0x79, 0xf1, 0x20, 0x43, 0x99, 0xcb, 0x4b, 0x07, 0x09,
	0x76, 0x0e, 0xd2, 0x45, 0xfc, 0x49, 0x81, 0x8b, 0x61, 0xa7, 0x64, 0x5a, 0x06, 0xf7, 0x4c, 0x5c,
	0xc1, 0xcb, 0xbb, 0x74, 0x72, 0x65, 0x60, 0x6f, 0x59, 0xdd, 0x3d, 0xb2, 0x4f, 0x9c, 0x09, 0xd9,
	0x84, 0x5c, 0x45, 0x98, 0x33, 0xa1, 0xa3, 0xc0, 0xc0, 0x4b, 0x42, 0x03, 0x2f, 0xc7, 0x0c, 0x9c,
	0xda, 0xb4, 0x77, 0x18, 0xe8, 0x40, 0xfb, 0xaf, 0x02, 0x17, 0x62, 0x9e, 0x5c, 0xc6, 0x81, 0xfa,
	0x93, 0xb1, 0x58, 0xe5, 0xa2, 0x7e, 0x2e, 0x24, 0xbe, 0xfc, 0x8b, 0xf5, 0x8b, 0xdd, 0xfc, 0x32,
	0xcd, 0x7b, 0xbb, 0x7e, 0x3a, 0x11, 0x41, 0xa4, 0xac, 0x7e, 0x09, 0xa6, 0x42, 0x7e, 0x57, 0x96,
	0xd0, 0x4e, 0x05, 0xb5, 0x87, 0x3d, 0x9c, 0xbd, 0x2d, 0x68, 0x44, 0x43, 0x59, 0xe0, 0x69, 0xa4,
	0xc1, 0x7e, 0x0f, 0xa5, 0x7f, 0xed, 0x77, 0x94, 0x73, 0xc9, 0xa5, 0x24, 0x81, 0xf9, 0x9e, 0x9c,
	0x2a, 0xae, 0xd1, 0x33, 0x82, 0x52, 0x4c, 0x1c, 0x54, 0x6f, 0x74, 0x64, 0x08, 0x72, 0x69, 0xeb,
	0x2d, 0xb8, 0x44, 0x25, 0x96, 0x93, 0xe8, 0xb1, 0x0b, 0x98, 0xef, 0xc2, 0x9c, 0x28, 0x7f, 0x19,
	0x4f, 0x03, 0xad, 0xb8, 0x06, 0x5a, 0xf9, 0xfc, 0xd4, 0xef, 0x15, 0x72, 0x9f, 0x12, 0x25, 0x33,
	0x8f, 0x53, 0x0f, 0x63, 0xdb, 0xab, 0x05, 0x27, 0x05, 0x07, 0x67, 0x03, 0x1b, 0xd8, 0x72, 0xb1,
	0xd5, 0x71, 0x73, 0x24, 0x7f, 0x64, 0x9d, 0x9f, 0xfc, 0xd1, 0x83, 0x26, 0x7e, 0x90, 0xf9, 0x48,
	0x81, 0x8b, 0x52, 0xaf, 0x14, 0x60, 0xf4, 0x4e, 0xeb, 0x5e, 0x10, 0xe7, 0xd2, 0xd4, 0x3f, 0x14,
	0xf8, 0x42, 0x8a, 0xd3, 0x48, 0x52, 0x62, 0x67, 0xc8, 0x88, 0xab, 0x6e, 0x41, 0xa4, 0x3a, 0x11,
	0xbc, 0x7e, 0xb2, 0x93, 0x2a, 0xf2, 0xb1, 0x95, 0xf8, 0x2f, 0x05, 0x0e, 0x73, 0x8c, 0x4b, 0x66,
	0xdf, 0xb2, 0xaf, 0x0f, 0xba, 0x24, 0x2d, 0x5b, 0xea, 0x60, 0x6b, 0x60, 0x73, 0xe9, 0x15, 0xf5,
	0x9a, 0xc1, 0xc7, 0x19, 0x0e, 0x67, 0x1e, 0xa6, 0xe8, 0x2e, 0xfc, 0xa4, 0x30, 0x1d, 0x4e, 0x19,
	0xc1, 0x54, 0xe8, 0x18, 0x95, 0x22, 0xc7, 0x68, 0x0e, 0x80, 0xe1, 0xa4, 0x8f, 0x4c, 0x2c, 0x50,
	0x81, 0xe1, 0xcf, 0x50, 0x9a, 0x38, 0x7d, 0x34, 0x60, 0xd5, 0xf5, 0x9a, 0xe1, 0xd1, 0xab, 0x42,
	0x89, 0x26, 0x89, 0xd5, 0xd0, 0x63, 0xe1, 0x77, 0x60, 0xc6, 0x2b, 0xe3, 0xfa, 0x7c, 0xb5, 0x12,
	0xac, 0x72, 0xf1, 0x37, 0x93, 0xe2, 0xf7, 0x20, 0xf4, 0xc3, 0x9d, 0x98, 0x74, 0x72, 0xf9, 0xab,
	0xfb, 0xb4, 0xee, 0x73, 0xd5, 0xb2, 0x4d, 0xd7, 0x5b, 0xb8, 0xbc, 0xeb, 0x0b, 0x2e, 0xdb, 0x40,
	0x59, 0xbc, 0x9e, 0x08, 0xc7, 0xeb, 0x5c, 0x06, 0xfa, 0x1e, 0xa8, 0x54, 0xc9, 0x11, 0xcc, 0xea,
	0x8b, 0x24, 0x57, 0x66, 0xbf, 0xbd, 0xd8, 0x95, 0xc6, 0xf2, 0xa4, 0x27, 0xd9, 0x3d, 0xd8, 0xd3,
	0xff, 0x14, 0x78, 0x25, 0x85, 0xf3, 0x25, 0xdb, 0xf4, 0x0d, 0xc4, 0x5d, 0xb2, 0xcd, 0xd5, 0xfb,
	0xc8, 0xc6, 0x57, 0xad, 0x1e, 0x66, 0xc3, 0xdb, 0x82, 0xa8, 0x96, 0x3b, 0x29, 0x22, 0x26, 0xe4,
	0xef, 0xcd, 0x13, 0x23, 0xf0, 0x6d, 0xcf, 0x25, 0x17, 0xe3, 0x30, 0xba, 0x46, 0x89, 0x42, 0xd4,
	0x51, 0x68, 0x4e, 0x92, 0x2a, 0xe5, 0x2a, 0x35, 0xff, 0x5d, 0x81, 0x67, 0xd2, 0x39, 0xdf, 0x4f,
	0x66, 0xe3, 0xcc, 0x14, 0xd3, 0x98, 0x29, 0x09, 0x99, 0x29, 0xa7, 0x30, 0xf3, 0x53, 0x05, 0xce,
	0xa6, 0x33, 0xf3, 0x48, 0xd4, 0x8b, 0xab, 0xff, 0x3e, 0x65, 0xa5, 0x14, 0xca, 0xfe, 0xad, 0xc0,
	0x0b, 0x7b, 0x34, 0xb0, 0x0c, 0x62, 0xa3, 0xf6, 0x33, 0x91, 0x69, 0x3f, 0xfb, 0x2c, 0xf2, 0x5f,
	0xb1, 0x18, 0x97, 0xd3, 0x7e, 0x32, 0x78, 0x89, 0xd3, 0x3a, 0x91, 0x46, 0xeb, 0xf8, 0x4a, 0xf8,
	0x85, 0x02, 0x0b, 0x79, 0x95, 0xf0, 0x88, 0x52, 0x7f, 0x04, 0x2a, 0x3f, 0x65, 0xcf, 0x55, 0xd1,
	0x5c, 0x68, 0x09, 0x2f, 0x99, 0xa6, 0x34, 0x9b, 0x3b, 0x06, 0x95, 0xbb, 0x16, 0xde, 0x0e, 0x0c,
	0xf6, 0x01, 0x1d, 0x49, 0x9a, 0x68, 0xfc, 0x1a, 0x41, 0x29, 0x5c, 0x23, 0xc8, 0xa5, 0xed, 0xd7,
	0xf8, 0xbb, 0x94, 0x88, 0xb8, 0xb1, 0xb3, 0xd7, 0x3f, 0x88, 0x19, 0x5d, 0x43, 0x78, 0x9f, 0x18,
	0xcd, 0x2c, 0xb6, 0xec, 0xd5, 0x69, 0x3e, 0x94, 0x88, 0x81, 0x90, 0x7e, 0x09, 0x6a, 0x7c, 0x2c,
	0x7f, 0x41, 0xe8, 0x73, 0x80, 0xf1, 0x03, 0xd5, 0x07, 0x62, 0x99, 0xb5, 0x50, 0x6f, 0x9f, 0x64,
	0x96, 0xcb, 0x44, 0x65, 0x66, 0x40, 0xc8, 0x18, 0xdb, 0x0c, 0xae, 0xc1, 0x21, 0xef, 0x01, 0x6f,
	0xd0, 0x31, 0xb2, 0xf3, 0x8c, 0x06, 0x54, 0x39, 0x20, 0x65, 0xa8, 0xa8, 0x57, 0x7b, 0x6c, 0xa8,
	0xbd, 0x45, 0xeb, 0x9c, 0x6d, 0xbb, 0xe3, 0x20, 0xc3, 0x45, 0x63, 0x6d, 0x9a, 0x2b, 0x3d, 0xfa,
	0xd8, 0xab, 0x67, 0x4a, 0x50, 0x2c, 0xc5, 0x39, 0xe1, 0x02, 0x78, 0x2a, 0x99, 0xb5, 0x70, 0x00,
	0xfd, 0x50, 0x27, 0xba, 0xc5, 0xd8, 0x06, 0xc1, 0x5a, 0x90, 0x48, 0x62, 0xcf, 0x2a, 0xe5, 0xfb,
	0xcf, 0xf5, 0x8f, 0xbd, 0x16, 0x24, 0x29, 0x92, 0xcf, 0x83, 0xef, 0xbf, 0x4e, 0xc0, 0xa1, 0xab,
	0x03, 0xe7, 0xae, 0xe1, 0x98, 0xfc, 0x58, 0xf9, 0x09, 0x35, 0x63, 0x93, 0x26, 0xd4, 0xc4, 0x58,
	0xb8, 0x75, 0xf2, 0x76, 0xb5, 0x2a, 0x3f, 0x7b, 0xc1, 0x7d, 0xaa, 0x48, 0x8d, 0x88, 0xdf, 0xa7,
	0x4e, 0xc0, 0x24, 0x9d, 0x6d, 0x19, 0xd8, 0xe0, 0x9d, 0x7d, 0x93, 0x7d, 0x6f, 0x82, 0x5c, 0x14,
	0x28, 0x29, 0xe4, 0xe6, 0x39, 0x1a, 0x52, 0xc7, 0x51, 0xd7, 0xa7, 0x9c, 0x60, 0x8a, 0x24, 0xfc,
	0xab, 0x36, 0xb6, 0xb0, 0x85, 0xdc, 0x46, 0x85, 0x3e, 0xa0, 0xd7, 0x10, 0x1f, 0x93, 0x83, 0x78,
	0xd5, 0x19, 0xf4, 0xdb, 0x26, 0x2f, 0xd9, 0x56, 0xb6, 0xe8, 0x48, 0x52, 0xb3, 0x6d, 0x40, 0xf5,
	0xea, 0x03, 0x93, 0x2c, 0xa0, 0x05, 0xdb, 0xba, 0x5e, 0xdd, 0x62, 0x43, 0xf2, 0x65, 0xcd, 0x19,
	0x8c, 0x86, 0x6d, 0x93, 0xd6, 0x6b, 0x8b, 0x7a, 0xb5, 0xcb, 0x86, 0x04, 0xfb, 0x1d, 0xcb, 0x58,
	0x1e, 0xe0, 0xb6, 0xd9, 0x98, 0x62, 0x95, 0xe9, 0xfb, 0x7c, 0xec, 0x1d, 0xf7, 0x56, 0xa3, 0x1e,
	0x1c, 0xf7, 0x96, 0x66, 0xfb, 0xaf, 0xe4, 0xfe, 0x21, 0x3e, 0xc8, 0x28, 0xa3, 0xfd, 0x65, 0x82,
	0x96, 0x6a, 0x37, 0x90, 0xe1, 0x74, 0xb6, 0x43, 0x6f, 0x5d, 0x1e, 0xce, 0x56, 0x04, 0x67, 0x2b,
	0xa3, 0x4e, 0xe1, 0x49, 0xb4, 0xc5, 0x51, 0x33, 0x89, 0xb6, 0x42, 0x85, 0xc6, 0x52, 0xa4, 0xd0,
	0x18, 0x54, 0xee, 0x5b, 0x5e, 0xb3, 0x28, 0xaf, 0xdc, 0xb7, 0xa2, 0xc1, 0xa2, 0x22, 0x08, 0x16,
	0x8c, 0x9b, 0x6a, 0x58, 0x47, 0x7e, 0x08, 0xa9, 0x85, 0x43, 0x08, 0xb1, 0x39, 0xcb, 0xa6, 0xa6,
	0xc8, 0x4a, 0xed, 0xd5, 0x3e, 0x1b, 0xd2, 0x2f, 0xc6, 0x43, 0xfa, 0x05, 0xf8, 0x17, 0x36, 0xf4,
	0x2a, 0xff, 0x2d, 0xae, 0x36, 0x5a, 0xf9, 0x6f, 0x79, 0x85, 0xd1, 0x40, 0x67, 0x64, 0xa0, 0xb5,
	0x78, 0x81, 0x38, 0x21, 0xc4, 0x71, 0x42, 0x8f, 0x36, 0xa4, 0x95, 0xed, 0x98, 0x27, 0xcb, 0xf4,
	0x18, 0x73, 0x00, 0x54, 0xd7, 0x2d, 0xd4, 0xc3, 0x5e, 0x29, 0x02, 0xfa, 0xfe, 0x0c, 0x91, 0xf0,
	0x4d, 0xec, 0xb2, 0xaf, 0x4c, 0x27, 0xb5, 0x21, 0x1f, 0x6b, 0x3b, 0xfc, 0xf1, 0x2b, 0x89, 0xd3,
	0xb7, 0x20, 0x45, 0xd0, 0xec, 0x1b, 0x6a, 0x86, 0x18, 0xfb, 0x25, 0xfa, 0x85, 0xd8, 0x1b, 0x8f,
	0x87, 0x3a, 0x8b, 0x4f, 0x0d, 0x27, 0xde, 0x3a, 0x42, 0x4b, 0x0f, 0x8c, 0xdc, 0xaf, 0xd0, 0x2e,
	0x2e, 0x11, 0x4e, 0xfa, 0xea, 0xec, 0xd3, 0xcb, 0xd4, 0x5b, 0xd6, 0xc1, 0x27, 0xd8, 0xf5, 0x7b,
	0x23, 0xc5, 0xab, 0xaf, 0xf8, 0xef, 0x78, 0xcc, 0x30, 0xa4, 0x8d, 0x68, 0xfc, 0x81, 0x4f, 0x7b,
	0x00, 0xd3, 0x7e, 0xe7, 0x91, 0xd1, 0x1b, 0x74, 0xb3, 0xed, 0xe2, 0xd6, 0x60, 0x18, 0x76, 0xb5,
	0x65, 0x1d, 0xb0, 0x3f, 0x23, 0x68, 0x41, 0x22, 0x27, 0x9e, 0x96, 0x43, 0xfd, 0x92, 0x0a, 0x1d,
	0x69, 0xef, 0xb3, 0x0c, 0x27, 0x52, 0x2a, 0x7d, 0xcc, 0x24, 0x3c, 0x1f, 0x7b, 0xf4, 0x61, 0xe8,
	0xb3, 0x55, 0xf0, 0x8d, 0xc4, 0xeb, 0xae, 0xb7, 0xf2, 0x15, 0x3f, 0x42, 0xf2, 0x19, 0xae, 0x86,
	0x46, 0x52, 0x0d, 0x0c, 0xc0, 0x0f, 0x90, 0x1c, 0x5e, 0xdb, 0x4d, 0x3c, 0x70, 0x50, 0xae, 0x42,
	0xd7, 0x17, 0xdd, 0xb0, 0x4d, 0x1a, 0x4f, 0x32, 0x5f, 0x2f, 0x3d, 0x48, 0x9e, 0x3f, 0xd5, 0x1c,
	0x6f, 0xa5, 0xef, 0xe5, 0x8a, 0x61, 0x9f, 0x7d, 0x47, 0xf0, 0xe4, 0x20, 0x45, 0x9e, 0xff, 0x91,
	0xea, 0xe2, 0x19, 0xa8, 0xdd, 0xde, 0x58, 0xd5, 0xef, 0xad, 0x6f, 0xac, 0xa9, 0x75, 0xa8, 0xdd,
	0xbe, 0x71, 0x6f, 0xf5, 0xc6, 0x8a, 0xfe, 0xe6, 0x4c, 0x41, 0x9d, 0x84, 0x32, 0xfb, 0xa9, 0x5c,
	0xbc, 0x0d, 0xf5, 0x48, 0x43, 0xf7, 0x34, 0x4c, 0xea, 0xc3, 0xce, 0xea, 0xc3, 0x0e, 0x1a, 0xe2,
	0x99, 0x82, 0x7a, 0x18, 0xa6, 0x6e, 0x1a, 0x9d, 0x77, 0x8c, 0x2e, 0xba, 0xb5, 0x3b, 0x44, 0x33,
	0x8a, 0xaa, 0xc6, 0xdb, 0xc8, 0x67, 0x26, 0xd4, 0x59, 0x98, 0x66, 0x7d, 0xdd, 0x1b, 0xa3, 0x4e,
	0x07, 0xb9, 0xee, 0x4c, 0x71, 0xf1, 0x83, 0x73, 0xbe, 0x90, 0x5a, 0xcb, 0xea, 0xab, 0x31, 0x24,
	0xcd, 0xc8, 0x31, 0x8d, 0x34, 0xb5, 0x37, 0x4f, 0xc4, 0x8f, 0x70, 0xf8, 0xab, 0x56, 0x50, 0x6d,
	0x68, 0x48, 0x7b, 0xb5, 0xcf, 0x47, 0xf7, 0x95, 0xc1, 0x35, 0x17, 0xe2, 0x38, 0x64, 0x90, 0x5a,
	0x41, 0x45, 0xf0, 0x84, 0xb8, 0x1d, 0xfa, 0x4c, 0x14, 0x99, 0x10, 0xa8, 0x79, 0x2e, 0x8e, 0x49,
	0x08, 0xa6, 0x15, 0xd4, 0x3b, 0x30, 0x93, 0xe8, 0x65, 0x9e, 0x4b, 0x61, 0x87, 0x6c, 0x3e, 0x9f,
	0xca, 0x06, 0xdb, 0xf7, 0x1d, 0x78, 0x52, 0xd6, 0x22, 0x7c, 0x2e, 0x7d, 0x7b, 0x0e, 0xd6, 0xbc,
	0x90, 0x85, 0x85, 0x03, 0x6a, 0x05, 0x75, 0x03, 0x0e, 0xc7, 0xfb, 0x74, 0x4f, 0x46, 0x91, 0xc4,
	0x3e, 0x37, 0x4f, 0xc5, 0x37, 0x8f, 0x01, 0x68, 0x05, 0xf5, 0x4d, 0x98, 0x4d, 0x46, 0xb4, 0xe8,
	0xba, 0x64, 0x98, 0x6d, 0x9e, 0x8e, 0x6f, 0x9c, 0x00, 0xd1, 0x0a, 0xea, 0x26, 0x1c, 0x15, 0x06,
	0x20, 0x4d, 0x46, 0x74, 0x00, 0xd3, 0x3c, 0x2b, 0xa7, 0x3c, 0x80, 0x62, 0xf6, 0x23, 0x0e, 0x19,
	0x67, 0xb2, 0x91, 0x08, 0xec, 0x47, 0x08, 0x46, 0x45, 0xff, 0x84, 0xb8, 0x1b, 0x38, 0x6e, 0xa6,
	0x22, 0xa0, 0xa6, 0x28, 0x6e, 0x6a, 0x05, 0xf5, 0x9b, 0xd0, 0x4c, 0xe9, 0x33, 0x8e, 0x9e, 0xa2,
	0x94, 0x8e, 0x64, 0xd9, 0xf6, 0xf7, 0xe0, 0x88, 0xa8, 0x01, 0xf7, 0xb4, 0x4c, 0x30, 0x3e, 0x48,
	0xf3, 0x8c, 0x5c, 0x2c, 0x3e, 0x10, 0x33, 0x7e, 0x59, 0xfb, 0xea, 0x39, 0x19, 0x92, 0x08, 0x58,
	0xd2, 0xf8, 0x25, 0x80, 0x5a, 0x41, 0xdd, 0x86, 0x63, 0x92, 0xfe, 0xd0, 0xa8, 0xa9, 0x48, 0x3a,
	0x57, 0x9b, 0xe7, 0xe3, 0xa8, 0xc4, 0x70, 0xf4, 0x44, 0x34, 0xa4, 0x0d, 0x96, 0xe7, 0xe3, 0x07,
	0x43, 0x0c, 0x27, 0x53, 0x49, 0x3b, 0xe6, 0x86, 0xc8, 0x96, 0x73, 0xe9, 0x5e, 0x55, 0xb6, 0x55,
	0x07, 0x4e, 0x66, 0xf4, 0x82, 0x0a, 0xec, 0x67, 0x5c, 0x7a, 0x5b, 0x7e, 0xe7, 0x8d, 0xdb, 0x75,
	0xd5, 0x86, 0x48, 0xd0, 0xe4, 0x4b, 0xb3, 0x29, 0x16, 0x2e, 0xf9, 0xc6, 0x5c, 0x4c, 0xb2, 0xaf,
	0xf1, 0x94, 0x68, 0xb3, 0x10, 0x40, 0xd2, 0xc5, 0x24, 0x40, 0x98, 0x40, 0x13, 0x8d, 0x87, 0x73,
	0x29, 0xf6, 0x90, 0xc2, 0xeb, 0x26, 0x1c, 0x15, 0xb6, 0xfc, 0x69, 0x69, 0xdb, 0x31, 0x98, 0xa4,
	0xb7, 0x12, 0x41, 0x31, 0x49, 0x24, 0x7b, 0xe7, 0x4e, 0x49, 0x7d, 0x38, 0xdf, 0xfd, 0x74, 0x8a,
	0x17, 0xf7, 0xb7, 0xde, 0x82, 0x63, 0x92, 0x3e, 0xb5, 0xb3, 0x29, 0x31, 0xc2, 0x87, 0x4a, 0x9e,
	0x0f, 0xc9, 0x6e, 0x6f, 0x87, 0x9d, 0x7a, 0xa8, 0x83, 0x4a, 0x4b, 0xc1, 0xe2, 0xa9, 0xf4, 0x6c,
	0x2a, 0x0e, 0x6f, 0xa7, 0x3b, 0x30, 0x13, 0x6b, 0x1e, 0x4a, 0xe8, 0x34, 0xde, 0x5c, 0x94, 0x8c,
	0xd5, 0x71, 0x08, 0xad, 0xa0, 0xbe, 0x11, 0x16, 0x3e, 0xdb, 0x77, 0x51, 0x2e, 0x7c, 0xde, 0x2a,
	0x95, 0x6b, 0xe7, 0x1f, 0x29, 0x70, 0x36, 0x57, 0x47, 0xcb, 0xa2, 0x5c, 0xd5, 0xb2, 0x35, 0xcd,
	0x67, 0xd3, 0xb4, 0x2f, 0x5b, 0xa5, 0x15, 0xd4, 0x4f, 0x14, 0x38, 0x9f, 0xb3, 0x73, 0xe3, 0xd9,
	0x3c, 0x5e, 0x2d, 0xbe, 0xaa, 0xf9, 0x7c, 0x32, 0x07, 0xc8, 0xb3, 0x4e, 0x2b, 0xa8, 0x0f, 0xe0,
	0x78, 0x5a, 0xd7, 0xc5, 0xd3, 0x19, 0x07, 0x22, 0x44, 0xc3, 0xa5, 0xcc, 0xa3, 0x11, 0x41, 0xfc,
	0x73, 0x05, 0x2e, 0xe4, 0xed, 0x22, 0x78, 0x2e, 0x8f, 0xae, 0x12, 0xcb, 0x9a, 0x2f, 0xe4, 0x53,
	0x57, 0x62, 0xa1, 0x56, 0x50, 0x97, 0x60, 0x3a, 0xfa, 0x76, 0x7e, 0x5c, 0x90, 0x5c, 0x78, 0x1f,
	0x85, 0x6e, 0x4c, 0x35, 0xa0, 0x21, 0x7d, 0xff, 0x8e, 0xc5, 0x2e, 0x19, 0x5c, 0xf3, 0x64, 0x7c,
	0xe3, 0xe8, 0xbb, 0xf6, 0xaf, 0x15, 0xf8, 0xda, 0xa3, 0xbd, 0x34, 0xbf, 0x96, 0x8f, 0x90, 0x5c,
	0x9b, 0x65, 0x51, 0xfb, 0xb1, 0x02, 0x5f, 0x1c, 0xfb, 0x75, 0xf8, 0xe5, 0xdc, 0x04, 0xee, 0x89,
	0x26, 0x17, 0x4e, 0x67, 0xbf, 0xf1, 0x5e, 0xc9, 0x4d, 0x43, 0x3e, 0xa4, 0x9f, 0x2a, 0xf0, 0xec,
	0x9e, 0xde, 0x6f, 0x97, 0x1f, 0x5d, 0x5b, 0x59, 0xb4, 0xbd, 0x07, 0x17, 0xf2, 0xbe, 0xc0, 0x3e,
	0xb7, 0x27, 0xd5, 0x64, 0x11, 0xf0, 0x2e, 0x9c, 0xcb, 0xf7, 0xac, 0xfa, 0xcc, 0x1e, 0x84, 0x91,
	0x85, 0xfc, 0x1e, 0x1c, 0x11, 0x3d, 0x48, 0xc6, 0xf2, 0x74, 0x01, 0x48, 0x32, 0x4f, 0x17, 0x00,
	0xb1, 0x8b, 0x80, 0xe8, 0xa9, 0x2f, 0x03, 0xc1, 0x1a, 0xc2, 0xd9, 0x08, 0xd6, 0x10, 0x16, 0x23,
	0x68, 0xa1, 0x5e, 0x16, 0x82, 0x16, 0xea, 0x65, 0x23, 0x68, 0xa1, 0x1e, 0xbd, 0x7e, 0x4d, 0xb3,
	0x72, 0xb1, 0x97, 0x33, 0xcd, 0xc5, 0xab, 0x03, 0xd1, 0x5a, 0x72, 0x32, 0x6a, 0xc7, 0x21, 0xb4,
	0x82, 0xfa, 0x3a, 0x1c, 0x11, 0x95, 0xe9, 0x4e, 0xa7, 0xe4, 0xe3, 0x0c, 0x44, 0x96, 0x41, 0x46,
	0xb2, 0x3b, 0xaf, 0x76, 0x76, 0x4a, 0x7e, 0xdd, 0xa2, 0x00, 0x69, 0xd9, 0x9d, 0x57, 0x3d, 0x4b,
	0x66, 0x18, 0xd2, 0x02, 0xd6, 0x62, 0x46, 0xec, 0x14, 0xac, 0x49, 0xcf, 0x30, 0x64, 0xab, 0xb4,
	0xc2, 0x72, 0xfd, 0x6f, 0x9f, 0xcd, 0x29, 0xff, 0xfc, 0x6c, 0x4e, 0xf9, 0xcf, 0x67, 0x73, 0xca,
	0x66, 0x85, 0xfe, 0x17, 0x8d, 0x67, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x88, 0x9c, 0xb1, 0xaa,
	0x07, 0x44, 0x00, 0x00,
}
